// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: watchtower.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_watchtower_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_watchtower_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_watchtower_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_watchtower_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_watchtower_2eproto;
namespace watchtowerrpc {
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
}  // namespace watchtowerrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::watchtowerrpc::GetInfoRequest* Arena::CreateMaybeMessage<::watchtowerrpc::GetInfoRequest>(Arena*);
template<> ::watchtowerrpc::GetInfoResponse* Arena::CreateMaybeMessage<::watchtowerrpc::GetInfoResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace watchtowerrpc {

// ===================================================================

class GetInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:watchtowerrpc.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(nullptr);
  }

  GetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "watchtowerrpc.GetInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_watchtower_2eproto);
    return ::descriptor_table_watchtower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:watchtowerrpc.GetInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchtower_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:watchtowerrpc.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return CreateMaybeMessage<GetInfoResponse>(nullptr);
  }

  GetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "watchtowerrpc.GetInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_watchtower_2eproto);
    return ::descriptor_table_watchtower_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListenersFieldNumber = 2,
    kUrisFieldNumber = 3,
    kPubkeyFieldNumber = 1,
  };
  // repeated string listeners = 2;
  int listeners_size() const;
  private:
  int _internal_listeners_size() const;
  public:
  void clear_listeners();
  const std::string& listeners(int index) const;
  std::string* mutable_listeners(int index);
  void set_listeners(int index, const std::string& value);
  void set_listeners(int index, std::string&& value);
  void set_listeners(int index, const char* value);
  void set_listeners(int index, const char* value, size_t size);
  std::string* add_listeners();
  void add_listeners(const std::string& value);
  void add_listeners(std::string&& value);
  void add_listeners(const char* value);
  void add_listeners(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& listeners() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_listeners();
  private:
  const std::string& _internal_listeners(int index) const;
  std::string* _internal_add_listeners();
  public:

  // repeated string uris = 3;
  int uris_size() const;
  private:
  int _internal_uris_size() const;
  public:
  void clear_uris();
  const std::string& uris(int index) const;
  std::string* mutable_uris(int index);
  void set_uris(int index, const std::string& value);
  void set_uris(int index, std::string&& value);
  void set_uris(int index, const char* value);
  void set_uris(int index, const char* value, size_t size);
  std::string* add_uris();
  void add_uris(const std::string& value);
  void add_uris(std::string&& value);
  void add_uris(const char* value);
  void add_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uris();
  private:
  const std::string& _internal_uris(int index) const;
  std::string* _internal_add_uris();
  public:

  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // @@protoc_insertion_point(class_scope:watchtowerrpc.GetInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> listeners_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uris_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_watchtower_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetInfoRequest

// -------------------------------------------------------------------

// GetInfoResponse

// bytes pubkey = 1;
inline void GetInfoResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:watchtowerrpc.GetInfoResponse.pubkey)
  return _internal_pubkey();
}
inline void GetInfoResponse::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:watchtowerrpc.GetInfoResponse.pubkey)
}
inline std::string* GetInfoResponse::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:watchtowerrpc.GetInfoResponse.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& GetInfoResponse::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:watchtowerrpc.GetInfoResponse.pubkey)
}
inline void GetInfoResponse::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:watchtowerrpc.GetInfoResponse.pubkey)
}
inline void GetInfoResponse::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:watchtowerrpc.GetInfoResponse.pubkey)
}
inline std::string* GetInfoResponse::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:watchtowerrpc.GetInfoResponse.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:watchtowerrpc.GetInfoResponse.pubkey)
}

// repeated string listeners = 2;
inline int GetInfoResponse::_internal_listeners_size() const {
  return listeners_.size();
}
inline int GetInfoResponse::listeners_size() const {
  return _internal_listeners_size();
}
inline void GetInfoResponse::clear_listeners() {
  listeners_.Clear();
}
inline std::string* GetInfoResponse::add_listeners() {
  // @@protoc_insertion_point(field_add_mutable:watchtowerrpc.GetInfoResponse.listeners)
  return _internal_add_listeners();
}
inline const std::string& GetInfoResponse::_internal_listeners(int index) const {
  return listeners_.Get(index);
}
inline const std::string& GetInfoResponse::listeners(int index) const {
  // @@protoc_insertion_point(field_get:watchtowerrpc.GetInfoResponse.listeners)
  return _internal_listeners(index);
}
inline std::string* GetInfoResponse::mutable_listeners(int index) {
  // @@protoc_insertion_point(field_mutable:watchtowerrpc.GetInfoResponse.listeners)
  return listeners_.Mutable(index);
}
inline void GetInfoResponse::set_listeners(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:watchtowerrpc.GetInfoResponse.listeners)
  listeners_.Mutable(index)->assign(value);
}
inline void GetInfoResponse::set_listeners(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:watchtowerrpc.GetInfoResponse.listeners)
  listeners_.Mutable(index)->assign(std::move(value));
}
inline void GetInfoResponse::set_listeners(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listeners_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:watchtowerrpc.GetInfoResponse.listeners)
}
inline void GetInfoResponse::set_listeners(int index, const char* value, size_t size) {
  listeners_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:watchtowerrpc.GetInfoResponse.listeners)
}
inline std::string* GetInfoResponse::_internal_add_listeners() {
  return listeners_.Add();
}
inline void GetInfoResponse::add_listeners(const std::string& value) {
  listeners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:watchtowerrpc.GetInfoResponse.listeners)
}
inline void GetInfoResponse::add_listeners(std::string&& value) {
  listeners_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:watchtowerrpc.GetInfoResponse.listeners)
}
inline void GetInfoResponse::add_listeners(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  listeners_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:watchtowerrpc.GetInfoResponse.listeners)
}
inline void GetInfoResponse::add_listeners(const char* value, size_t size) {
  listeners_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:watchtowerrpc.GetInfoResponse.listeners)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInfoResponse::listeners() const {
  // @@protoc_insertion_point(field_list:watchtowerrpc.GetInfoResponse.listeners)
  return listeners_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInfoResponse::mutable_listeners() {
  // @@protoc_insertion_point(field_mutable_list:watchtowerrpc.GetInfoResponse.listeners)
  return &listeners_;
}

// repeated string uris = 3;
inline int GetInfoResponse::_internal_uris_size() const {
  return uris_.size();
}
inline int GetInfoResponse::uris_size() const {
  return _internal_uris_size();
}
inline void GetInfoResponse::clear_uris() {
  uris_.Clear();
}
inline std::string* GetInfoResponse::add_uris() {
  // @@protoc_insertion_point(field_add_mutable:watchtowerrpc.GetInfoResponse.uris)
  return _internal_add_uris();
}
inline const std::string& GetInfoResponse::_internal_uris(int index) const {
  return uris_.Get(index);
}
inline const std::string& GetInfoResponse::uris(int index) const {
  // @@protoc_insertion_point(field_get:watchtowerrpc.GetInfoResponse.uris)
  return _internal_uris(index);
}
inline std::string* GetInfoResponse::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:watchtowerrpc.GetInfoResponse.uris)
  return uris_.Mutable(index);
}
inline void GetInfoResponse::set_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:watchtowerrpc.GetInfoResponse.uris)
  uris_.Mutable(index)->assign(value);
}
inline void GetInfoResponse::set_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:watchtowerrpc.GetInfoResponse.uris)
  uris_.Mutable(index)->assign(std::move(value));
}
inline void GetInfoResponse::set_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:watchtowerrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::set_uris(int index, const char* value, size_t size) {
  uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:watchtowerrpc.GetInfoResponse.uris)
}
inline std::string* GetInfoResponse::_internal_add_uris() {
  return uris_.Add();
}
inline void GetInfoResponse::add_uris(const std::string& value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:watchtowerrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(std::string&& value) {
  uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:watchtowerrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:watchtowerrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(const char* value, size_t size) {
  uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:watchtowerrpc.GetInfoResponse.uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInfoResponse::uris() const {
  // @@protoc_insertion_point(field_list:watchtowerrpc.GetInfoResponse.uris)
  return uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInfoResponse::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:watchtowerrpc.GetInfoResponse.uris)
  return &uris_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace watchtowerrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_watchtower_2eproto
