// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: invoices.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_invoices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_invoices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_invoices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_invoices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_invoices_2eproto;
namespace invoicesrpc {
class AddHoldInvoiceRequest;
class AddHoldInvoiceRequestDefaultTypeInternal;
extern AddHoldInvoiceRequestDefaultTypeInternal _AddHoldInvoiceRequest_default_instance_;
class AddHoldInvoiceResp;
class AddHoldInvoiceRespDefaultTypeInternal;
extern AddHoldInvoiceRespDefaultTypeInternal _AddHoldInvoiceResp_default_instance_;
class CancelInvoiceMsg;
class CancelInvoiceMsgDefaultTypeInternal;
extern CancelInvoiceMsgDefaultTypeInternal _CancelInvoiceMsg_default_instance_;
class CancelInvoiceResp;
class CancelInvoiceRespDefaultTypeInternal;
extern CancelInvoiceRespDefaultTypeInternal _CancelInvoiceResp_default_instance_;
class SettleInvoiceMsg;
class SettleInvoiceMsgDefaultTypeInternal;
extern SettleInvoiceMsgDefaultTypeInternal _SettleInvoiceMsg_default_instance_;
class SettleInvoiceResp;
class SettleInvoiceRespDefaultTypeInternal;
extern SettleInvoiceRespDefaultTypeInternal _SettleInvoiceResp_default_instance_;
class SubscribeSingleInvoiceRequest;
class SubscribeSingleInvoiceRequestDefaultTypeInternal;
extern SubscribeSingleInvoiceRequestDefaultTypeInternal _SubscribeSingleInvoiceRequest_default_instance_;
}  // namespace invoicesrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::invoicesrpc::AddHoldInvoiceRequest* Arena::CreateMaybeMessage<::invoicesrpc::AddHoldInvoiceRequest>(Arena*);
template<> ::invoicesrpc::AddHoldInvoiceResp* Arena::CreateMaybeMessage<::invoicesrpc::AddHoldInvoiceResp>(Arena*);
template<> ::invoicesrpc::CancelInvoiceMsg* Arena::CreateMaybeMessage<::invoicesrpc::CancelInvoiceMsg>(Arena*);
template<> ::invoicesrpc::CancelInvoiceResp* Arena::CreateMaybeMessage<::invoicesrpc::CancelInvoiceResp>(Arena*);
template<> ::invoicesrpc::SettleInvoiceMsg* Arena::CreateMaybeMessage<::invoicesrpc::SettleInvoiceMsg>(Arena*);
template<> ::invoicesrpc::SettleInvoiceResp* Arena::CreateMaybeMessage<::invoicesrpc::SettleInvoiceResp>(Arena*);
template<> ::invoicesrpc::SubscribeSingleInvoiceRequest* Arena::CreateMaybeMessage<::invoicesrpc::SubscribeSingleInvoiceRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace invoicesrpc {

// ===================================================================

class CancelInvoiceMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.CancelInvoiceMsg) */ {
 public:
  CancelInvoiceMsg();
  virtual ~CancelInvoiceMsg();

  CancelInvoiceMsg(const CancelInvoiceMsg& from);
  CancelInvoiceMsg(CancelInvoiceMsg&& from) noexcept
    : CancelInvoiceMsg() {
    *this = ::std::move(from);
  }

  inline CancelInvoiceMsg& operator=(const CancelInvoiceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelInvoiceMsg& operator=(CancelInvoiceMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelInvoiceMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelInvoiceMsg* internal_default_instance() {
    return reinterpret_cast<const CancelInvoiceMsg*>(
               &_CancelInvoiceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CancelInvoiceMsg& a, CancelInvoiceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelInvoiceMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelInvoiceMsg* New() const final {
    return CreateMaybeMessage<CancelInvoiceMsg>(nullptr);
  }

  CancelInvoiceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelInvoiceMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelInvoiceMsg& from);
  void MergeFrom(const CancelInvoiceMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelInvoiceMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.CancelInvoiceMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
  };
  // bytes payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // @@protoc_insertion_point(class_scope:invoicesrpc.CancelInvoiceMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class CancelInvoiceResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.CancelInvoiceResp) */ {
 public:
  CancelInvoiceResp();
  virtual ~CancelInvoiceResp();

  CancelInvoiceResp(const CancelInvoiceResp& from);
  CancelInvoiceResp(CancelInvoiceResp&& from) noexcept
    : CancelInvoiceResp() {
    *this = ::std::move(from);
  }

  inline CancelInvoiceResp& operator=(const CancelInvoiceResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelInvoiceResp& operator=(CancelInvoiceResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelInvoiceResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelInvoiceResp* internal_default_instance() {
    return reinterpret_cast<const CancelInvoiceResp*>(
               &_CancelInvoiceResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CancelInvoiceResp& a, CancelInvoiceResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelInvoiceResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelInvoiceResp* New() const final {
    return CreateMaybeMessage<CancelInvoiceResp>(nullptr);
  }

  CancelInvoiceResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelInvoiceResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelInvoiceResp& from);
  void MergeFrom(const CancelInvoiceResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelInvoiceResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.CancelInvoiceResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:invoicesrpc.CancelInvoiceResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class AddHoldInvoiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.AddHoldInvoiceRequest) */ {
 public:
  AddHoldInvoiceRequest();
  virtual ~AddHoldInvoiceRequest();

  AddHoldInvoiceRequest(const AddHoldInvoiceRequest& from);
  AddHoldInvoiceRequest(AddHoldInvoiceRequest&& from) noexcept
    : AddHoldInvoiceRequest() {
    *this = ::std::move(from);
  }

  inline AddHoldInvoiceRequest& operator=(const AddHoldInvoiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddHoldInvoiceRequest& operator=(AddHoldInvoiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddHoldInvoiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddHoldInvoiceRequest* internal_default_instance() {
    return reinterpret_cast<const AddHoldInvoiceRequest*>(
               &_AddHoldInvoiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddHoldInvoiceRequest& a, AddHoldInvoiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddHoldInvoiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddHoldInvoiceRequest* New() const final {
    return CreateMaybeMessage<AddHoldInvoiceRequest>(nullptr);
  }

  AddHoldInvoiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddHoldInvoiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddHoldInvoiceRequest& from);
  void MergeFrom(const AddHoldInvoiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddHoldInvoiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.AddHoldInvoiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteHintsFieldNumber = 8,
    kMemoFieldNumber = 1,
    kHashFieldNumber = 2,
    kDescriptionHashFieldNumber = 4,
    kFallbackAddrFieldNumber = 6,
    kValueFieldNumber = 3,
    kExpiryFieldNumber = 5,
    kCltvExpiryFieldNumber = 7,
    kValueMsatFieldNumber = 10,
    kPrivateFieldNumber = 9,
  };
  // repeated .lnrpc.RouteHint route_hints = 8;
  int route_hints_size() const;
  private:
  int _internal_route_hints_size() const;
  public:
  void clear_route_hints();
  ::lnrpc::RouteHint* mutable_route_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
      mutable_route_hints();
  private:
  const ::lnrpc::RouteHint& _internal_route_hints(int index) const;
  ::lnrpc::RouteHint* _internal_add_route_hints();
  public:
  const ::lnrpc::RouteHint& route_hints(int index) const;
  ::lnrpc::RouteHint* add_route_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
      route_hints() const;

  // string memo = 1;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes description_hash = 4;
  void clear_description_hash();
  const std::string& description_hash() const;
  void set_description_hash(const std::string& value);
  void set_description_hash(std::string&& value);
  void set_description_hash(const char* value);
  void set_description_hash(const void* value, size_t size);
  std::string* mutable_description_hash();
  std::string* release_description_hash();
  void set_allocated_description_hash(std::string* description_hash);
  private:
  const std::string& _internal_description_hash() const;
  void _internal_set_description_hash(const std::string& value);
  std::string* _internal_mutable_description_hash();
  public:

  // string fallback_addr = 6;
  void clear_fallback_addr();
  const std::string& fallback_addr() const;
  void set_fallback_addr(const std::string& value);
  void set_fallback_addr(std::string&& value);
  void set_fallback_addr(const char* value);
  void set_fallback_addr(const char* value, size_t size);
  std::string* mutable_fallback_addr();
  std::string* release_fallback_addr();
  void set_allocated_fallback_addr(std::string* fallback_addr);
  private:
  const std::string& _internal_fallback_addr() const;
  void _internal_set_fallback_addr(const std::string& value);
  std::string* _internal_mutable_fallback_addr();
  public:

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiry = 5;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 cltv_expiry = 7;
  void clear_cltv_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint64 cltv_expiry() const;
  void set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cltv_expiry() const;
  void _internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 value_msat = 10;
  void clear_value_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat() const;
  void set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value_msat() const;
  void _internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool private = 9;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:invoicesrpc.AddHoldInvoiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint > route_hints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cltv_expiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat_;
  bool private__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class AddHoldInvoiceResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.AddHoldInvoiceResp) */ {
 public:
  AddHoldInvoiceResp();
  virtual ~AddHoldInvoiceResp();

  AddHoldInvoiceResp(const AddHoldInvoiceResp& from);
  AddHoldInvoiceResp(AddHoldInvoiceResp&& from) noexcept
    : AddHoldInvoiceResp() {
    *this = ::std::move(from);
  }

  inline AddHoldInvoiceResp& operator=(const AddHoldInvoiceResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddHoldInvoiceResp& operator=(AddHoldInvoiceResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddHoldInvoiceResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddHoldInvoiceResp* internal_default_instance() {
    return reinterpret_cast<const AddHoldInvoiceResp*>(
               &_AddHoldInvoiceResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AddHoldInvoiceResp& a, AddHoldInvoiceResp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddHoldInvoiceResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddHoldInvoiceResp* New() const final {
    return CreateMaybeMessage<AddHoldInvoiceResp>(nullptr);
  }

  AddHoldInvoiceResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddHoldInvoiceResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddHoldInvoiceResp& from);
  void MergeFrom(const AddHoldInvoiceResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddHoldInvoiceResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.AddHoldInvoiceResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentRequestFieldNumber = 1,
  };
  // string payment_request = 1;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // @@protoc_insertion_point(class_scope:invoicesrpc.AddHoldInvoiceResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class SettleInvoiceMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.SettleInvoiceMsg) */ {
 public:
  SettleInvoiceMsg();
  virtual ~SettleInvoiceMsg();

  SettleInvoiceMsg(const SettleInvoiceMsg& from);
  SettleInvoiceMsg(SettleInvoiceMsg&& from) noexcept
    : SettleInvoiceMsg() {
    *this = ::std::move(from);
  }

  inline SettleInvoiceMsg& operator=(const SettleInvoiceMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleInvoiceMsg& operator=(SettleInvoiceMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleInvoiceMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettleInvoiceMsg* internal_default_instance() {
    return reinterpret_cast<const SettleInvoiceMsg*>(
               &_SettleInvoiceMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SettleInvoiceMsg& a, SettleInvoiceMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleInvoiceMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleInvoiceMsg* New() const final {
    return CreateMaybeMessage<SettleInvoiceMsg>(nullptr);
  }

  SettleInvoiceMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleInvoiceMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleInvoiceMsg& from);
  void MergeFrom(const SettleInvoiceMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleInvoiceMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.SettleInvoiceMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreimageFieldNumber = 1,
  };
  // bytes preimage = 1;
  void clear_preimage();
  const std::string& preimage() const;
  void set_preimage(const std::string& value);
  void set_preimage(std::string&& value);
  void set_preimage(const char* value);
  void set_preimage(const void* value, size_t size);
  std::string* mutable_preimage();
  std::string* release_preimage();
  void set_allocated_preimage(std::string* preimage);
  private:
  const std::string& _internal_preimage() const;
  void _internal_set_preimage(const std::string& value);
  std::string* _internal_mutable_preimage();
  public:

  // @@protoc_insertion_point(class_scope:invoicesrpc.SettleInvoiceMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class SettleInvoiceResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.SettleInvoiceResp) */ {
 public:
  SettleInvoiceResp();
  virtual ~SettleInvoiceResp();

  SettleInvoiceResp(const SettleInvoiceResp& from);
  SettleInvoiceResp(SettleInvoiceResp&& from) noexcept
    : SettleInvoiceResp() {
    *this = ::std::move(from);
  }

  inline SettleInvoiceResp& operator=(const SettleInvoiceResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleInvoiceResp& operator=(SettleInvoiceResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleInvoiceResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettleInvoiceResp* internal_default_instance() {
    return reinterpret_cast<const SettleInvoiceResp*>(
               &_SettleInvoiceResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SettleInvoiceResp& a, SettleInvoiceResp& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleInvoiceResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleInvoiceResp* New() const final {
    return CreateMaybeMessage<SettleInvoiceResp>(nullptr);
  }

  SettleInvoiceResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleInvoiceResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleInvoiceResp& from);
  void MergeFrom(const SettleInvoiceResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleInvoiceResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.SettleInvoiceResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:invoicesrpc.SettleInvoiceResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// -------------------------------------------------------------------

class SubscribeSingleInvoiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:invoicesrpc.SubscribeSingleInvoiceRequest) */ {
 public:
  SubscribeSingleInvoiceRequest();
  virtual ~SubscribeSingleInvoiceRequest();

  SubscribeSingleInvoiceRequest(const SubscribeSingleInvoiceRequest& from);
  SubscribeSingleInvoiceRequest(SubscribeSingleInvoiceRequest&& from) noexcept
    : SubscribeSingleInvoiceRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSingleInvoiceRequest& operator=(const SubscribeSingleInvoiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSingleInvoiceRequest& operator=(SubscribeSingleInvoiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeSingleInvoiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeSingleInvoiceRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSingleInvoiceRequest*>(
               &_SubscribeSingleInvoiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeSingleInvoiceRequest& a, SubscribeSingleInvoiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSingleInvoiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeSingleInvoiceRequest* New() const final {
    return CreateMaybeMessage<SubscribeSingleInvoiceRequest>(nullptr);
  }

  SubscribeSingleInvoiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeSingleInvoiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeSingleInvoiceRequest& from);
  void MergeFrom(const SubscribeSingleInvoiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeSingleInvoiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "invoicesrpc.SubscribeSingleInvoiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_invoices_2eproto);
    return ::descriptor_table_invoices_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 2,
  };
  // bytes r_hash = 2;
  void clear_r_hash();
  const std::string& r_hash() const;
  void set_r_hash(const std::string& value);
  void set_r_hash(std::string&& value);
  void set_r_hash(const char* value);
  void set_r_hash(const void* value, size_t size);
  std::string* mutable_r_hash();
  std::string* release_r_hash();
  void set_allocated_r_hash(std::string* r_hash);
  private:
  const std::string& _internal_r_hash() const;
  void _internal_set_r_hash(const std::string& value);
  std::string* _internal_mutable_r_hash();
  public:

  // @@protoc_insertion_point(class_scope:invoicesrpc.SubscribeSingleInvoiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_invoices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CancelInvoiceMsg

// bytes payment_hash = 1;
inline void CancelInvoiceMsg::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CancelInvoiceMsg::payment_hash() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.CancelInvoiceMsg.payment_hash)
  return _internal_payment_hash();
}
inline void CancelInvoiceMsg::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.CancelInvoiceMsg.payment_hash)
}
inline std::string* CancelInvoiceMsg::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.CancelInvoiceMsg.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& CancelInvoiceMsg::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void CancelInvoiceMsg::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CancelInvoiceMsg::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.CancelInvoiceMsg.payment_hash)
}
inline void CancelInvoiceMsg::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.CancelInvoiceMsg.payment_hash)
}
inline void CancelInvoiceMsg::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.CancelInvoiceMsg.payment_hash)
}
inline std::string* CancelInvoiceMsg::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CancelInvoiceMsg::release_payment_hash() {
  // @@protoc_insertion_point(field_release:invoicesrpc.CancelInvoiceMsg.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CancelInvoiceMsg::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.CancelInvoiceMsg.payment_hash)
}

// -------------------------------------------------------------------

// CancelInvoiceResp

// -------------------------------------------------------------------

// AddHoldInvoiceRequest

// string memo = 1;
inline void AddHoldInvoiceRequest::clear_memo() {
  memo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddHoldInvoiceRequest::memo() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.memo)
  return _internal_memo();
}
inline void AddHoldInvoiceRequest::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.memo)
}
inline std::string* AddHoldInvoiceRequest::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceRequest.memo)
  return _internal_mutable_memo();
}
inline const std::string& AddHoldInvoiceRequest::_internal_memo() const {
  return memo_.GetNoArena();
}
inline void AddHoldInvoiceRequest::_internal_set_memo(const std::string& value) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddHoldInvoiceRequest::set_memo(std::string&& value) {
  
  memo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.AddHoldInvoiceRequest.memo)
}
inline void AddHoldInvoiceRequest::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.AddHoldInvoiceRequest.memo)
}
inline void AddHoldInvoiceRequest::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.AddHoldInvoiceRequest.memo)
}
inline std::string* AddHoldInvoiceRequest::_internal_mutable_memo() {
  
  return memo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddHoldInvoiceRequest::release_memo() {
  // @@protoc_insertion_point(field_release:invoicesrpc.AddHoldInvoiceRequest.memo)
  
  return memo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddHoldInvoiceRequest::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.AddHoldInvoiceRequest.memo)
}

// bytes hash = 2;
inline void AddHoldInvoiceRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddHoldInvoiceRequest::hash() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.hash)
  return _internal_hash();
}
inline void AddHoldInvoiceRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.hash)
}
inline std::string* AddHoldInvoiceRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& AddHoldInvoiceRequest::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void AddHoldInvoiceRequest::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddHoldInvoiceRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.AddHoldInvoiceRequest.hash)
}
inline void AddHoldInvoiceRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.AddHoldInvoiceRequest.hash)
}
inline void AddHoldInvoiceRequest::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.AddHoldInvoiceRequest.hash)
}
inline std::string* AddHoldInvoiceRequest::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddHoldInvoiceRequest::release_hash() {
  // @@protoc_insertion_point(field_release:invoicesrpc.AddHoldInvoiceRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddHoldInvoiceRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.AddHoldInvoiceRequest.hash)
}

// int64 value = 3;
inline void AddHoldInvoiceRequest::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::value() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.value)
  return _internal_value();
}
inline void AddHoldInvoiceRequest::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void AddHoldInvoiceRequest::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.value)
}

// int64 value_msat = 10;
inline void AddHoldInvoiceRequest::clear_value_msat() {
  value_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::_internal_value_msat() const {
  return value_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::value_msat() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.value_msat)
  return _internal_value_msat();
}
inline void AddHoldInvoiceRequest::_internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_msat_ = value;
}
inline void AddHoldInvoiceRequest::set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value_msat(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.value_msat)
}

// bytes description_hash = 4;
inline void AddHoldInvoiceRequest::clear_description_hash() {
  description_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddHoldInvoiceRequest::description_hash() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.description_hash)
  return _internal_description_hash();
}
inline void AddHoldInvoiceRequest::set_description_hash(const std::string& value) {
  _internal_set_description_hash(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.description_hash)
}
inline std::string* AddHoldInvoiceRequest::mutable_description_hash() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceRequest.description_hash)
  return _internal_mutable_description_hash();
}
inline const std::string& AddHoldInvoiceRequest::_internal_description_hash() const {
  return description_hash_.GetNoArena();
}
inline void AddHoldInvoiceRequest::_internal_set_description_hash(const std::string& value) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddHoldInvoiceRequest::set_description_hash(std::string&& value) {
  
  description_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.AddHoldInvoiceRequest.description_hash)
}
inline void AddHoldInvoiceRequest::set_description_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.AddHoldInvoiceRequest.description_hash)
}
inline void AddHoldInvoiceRequest::set_description_hash(const void* value, size_t size) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.AddHoldInvoiceRequest.description_hash)
}
inline std::string* AddHoldInvoiceRequest::_internal_mutable_description_hash() {
  
  return description_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddHoldInvoiceRequest::release_description_hash() {
  // @@protoc_insertion_point(field_release:invoicesrpc.AddHoldInvoiceRequest.description_hash)
  
  return description_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddHoldInvoiceRequest::set_allocated_description_hash(std::string* description_hash) {
  if (description_hash != nullptr) {
    
  } else {
    
  }
  description_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_hash);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.AddHoldInvoiceRequest.description_hash)
}

// int64 expiry = 5;
inline void AddHoldInvoiceRequest::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AddHoldInvoiceRequest::expiry() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.expiry)
  return _internal_expiry();
}
inline void AddHoldInvoiceRequest::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void AddHoldInvoiceRequest::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.expiry)
}

// string fallback_addr = 6;
inline void AddHoldInvoiceRequest::clear_fallback_addr() {
  fallback_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddHoldInvoiceRequest::fallback_addr() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
  return _internal_fallback_addr();
}
inline void AddHoldInvoiceRequest::set_fallback_addr(const std::string& value) {
  _internal_set_fallback_addr(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
}
inline std::string* AddHoldInvoiceRequest::mutable_fallback_addr() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
  return _internal_mutable_fallback_addr();
}
inline const std::string& AddHoldInvoiceRequest::_internal_fallback_addr() const {
  return fallback_addr_.GetNoArena();
}
inline void AddHoldInvoiceRequest::_internal_set_fallback_addr(const std::string& value) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddHoldInvoiceRequest::set_fallback_addr(std::string&& value) {
  
  fallback_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
}
inline void AddHoldInvoiceRequest::set_fallback_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
}
inline void AddHoldInvoiceRequest::set_fallback_addr(const char* value, size_t size) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
}
inline std::string* AddHoldInvoiceRequest::_internal_mutable_fallback_addr() {
  
  return fallback_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddHoldInvoiceRequest::release_fallback_addr() {
  // @@protoc_insertion_point(field_release:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
  
  return fallback_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddHoldInvoiceRequest::set_allocated_fallback_addr(std::string* fallback_addr) {
  if (fallback_addr != nullptr) {
    
  } else {
    
  }
  fallback_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_addr);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.AddHoldInvoiceRequest.fallback_addr)
}

// uint64 cltv_expiry = 7;
inline void AddHoldInvoiceRequest::clear_cltv_expiry() {
  cltv_expiry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddHoldInvoiceRequest::_internal_cltv_expiry() const {
  return cltv_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddHoldInvoiceRequest::cltv_expiry() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.cltv_expiry)
  return _internal_cltv_expiry();
}
inline void AddHoldInvoiceRequest::_internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cltv_expiry_ = value;
}
inline void AddHoldInvoiceRequest::set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cltv_expiry(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.cltv_expiry)
}

// repeated .lnrpc.RouteHint route_hints = 8;
inline int AddHoldInvoiceRequest::_internal_route_hints_size() const {
  return route_hints_.size();
}
inline int AddHoldInvoiceRequest::route_hints_size() const {
  return _internal_route_hints_size();
}
inline ::lnrpc::RouteHint* AddHoldInvoiceRequest::mutable_route_hints(int index) {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceRequest.route_hints)
  return route_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
AddHoldInvoiceRequest::mutable_route_hints() {
  // @@protoc_insertion_point(field_mutable_list:invoicesrpc.AddHoldInvoiceRequest.route_hints)
  return &route_hints_;
}
inline const ::lnrpc::RouteHint& AddHoldInvoiceRequest::_internal_route_hints(int index) const {
  return route_hints_.Get(index);
}
inline const ::lnrpc::RouteHint& AddHoldInvoiceRequest::route_hints(int index) const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.route_hints)
  return _internal_route_hints(index);
}
inline ::lnrpc::RouteHint* AddHoldInvoiceRequest::_internal_add_route_hints() {
  return route_hints_.Add();
}
inline ::lnrpc::RouteHint* AddHoldInvoiceRequest::add_route_hints() {
  // @@protoc_insertion_point(field_add:invoicesrpc.AddHoldInvoiceRequest.route_hints)
  return _internal_add_route_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
AddHoldInvoiceRequest::route_hints() const {
  // @@protoc_insertion_point(field_list:invoicesrpc.AddHoldInvoiceRequest.route_hints)
  return route_hints_;
}

// bool private = 9;
inline void AddHoldInvoiceRequest::clear_private_() {
  private__ = false;
}
inline bool AddHoldInvoiceRequest::_internal_private_() const {
  return private__;
}
inline bool AddHoldInvoiceRequest::private_() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceRequest.private)
  return _internal_private_();
}
inline void AddHoldInvoiceRequest::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void AddHoldInvoiceRequest::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceRequest.private)
}

// -------------------------------------------------------------------

// AddHoldInvoiceResp

// string payment_request = 1;
inline void AddHoldInvoiceResp::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddHoldInvoiceResp::payment_request() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.AddHoldInvoiceResp.payment_request)
  return _internal_payment_request();
}
inline void AddHoldInvoiceResp::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.AddHoldInvoiceResp.payment_request)
}
inline std::string* AddHoldInvoiceResp::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.AddHoldInvoiceResp.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& AddHoldInvoiceResp::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void AddHoldInvoiceResp::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddHoldInvoiceResp::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.AddHoldInvoiceResp.payment_request)
}
inline void AddHoldInvoiceResp::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.AddHoldInvoiceResp.payment_request)
}
inline void AddHoldInvoiceResp::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.AddHoldInvoiceResp.payment_request)
}
inline std::string* AddHoldInvoiceResp::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddHoldInvoiceResp::release_payment_request() {
  // @@protoc_insertion_point(field_release:invoicesrpc.AddHoldInvoiceResp.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddHoldInvoiceResp::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.AddHoldInvoiceResp.payment_request)
}

// -------------------------------------------------------------------

// SettleInvoiceMsg

// bytes preimage = 1;
inline void SettleInvoiceMsg::clear_preimage() {
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SettleInvoiceMsg::preimage() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.SettleInvoiceMsg.preimage)
  return _internal_preimage();
}
inline void SettleInvoiceMsg::set_preimage(const std::string& value) {
  _internal_set_preimage(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.SettleInvoiceMsg.preimage)
}
inline std::string* SettleInvoiceMsg::mutable_preimage() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.SettleInvoiceMsg.preimage)
  return _internal_mutable_preimage();
}
inline const std::string& SettleInvoiceMsg::_internal_preimage() const {
  return preimage_.GetNoArena();
}
inline void SettleInvoiceMsg::_internal_set_preimage(const std::string& value) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SettleInvoiceMsg::set_preimage(std::string&& value) {
  
  preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.SettleInvoiceMsg.preimage)
}
inline void SettleInvoiceMsg::set_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.SettleInvoiceMsg.preimage)
}
inline void SettleInvoiceMsg::set_preimage(const void* value, size_t size) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.SettleInvoiceMsg.preimage)
}
inline std::string* SettleInvoiceMsg::_internal_mutable_preimage() {
  
  return preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SettleInvoiceMsg::release_preimage() {
  // @@protoc_insertion_point(field_release:invoicesrpc.SettleInvoiceMsg.preimage)
  
  return preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SettleInvoiceMsg::set_allocated_preimage(std::string* preimage) {
  if (preimage != nullptr) {
    
  } else {
    
  }
  preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimage);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.SettleInvoiceMsg.preimage)
}

// -------------------------------------------------------------------

// SettleInvoiceResp

// -------------------------------------------------------------------

// SubscribeSingleInvoiceRequest

// bytes r_hash = 2;
inline void SubscribeSingleInvoiceRequest::clear_r_hash() {
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscribeSingleInvoiceRequest::r_hash() const {
  // @@protoc_insertion_point(field_get:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
  return _internal_r_hash();
}
inline void SubscribeSingleInvoiceRequest::set_r_hash(const std::string& value) {
  _internal_set_r_hash(value);
  // @@protoc_insertion_point(field_set:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
}
inline std::string* SubscribeSingleInvoiceRequest::mutable_r_hash() {
  // @@protoc_insertion_point(field_mutable:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
  return _internal_mutable_r_hash();
}
inline const std::string& SubscribeSingleInvoiceRequest::_internal_r_hash() const {
  return r_hash_.GetNoArena();
}
inline void SubscribeSingleInvoiceRequest::_internal_set_r_hash(const std::string& value) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubscribeSingleInvoiceRequest::set_r_hash(std::string&& value) {
  
  r_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
}
inline void SubscribeSingleInvoiceRequest::set_r_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
}
inline void SubscribeSingleInvoiceRequest::set_r_hash(const void* value, size_t size) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
}
inline std::string* SubscribeSingleInvoiceRequest::_internal_mutable_r_hash() {
  
  return r_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscribeSingleInvoiceRequest::release_r_hash() {
  // @@protoc_insertion_point(field_release:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
  
  return r_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeSingleInvoiceRequest::set_allocated_r_hash(std::string* r_hash) {
  if (r_hash != nullptr) {
    
  } else {
    
  }
  r_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash);
  // @@protoc_insertion_point(field_set_allocated:invoicesrpc.SubscribeSingleInvoiceRequest.r_hash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace invoicesrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_invoices_2eproto
