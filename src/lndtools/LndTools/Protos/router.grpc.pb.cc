// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: router.proto

#include "router.pb.h"
#include "router.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace routerrpc {

static const char* Router_method_names[] = {
  "/routerrpc.Router/SendPaymentV2",
  "/routerrpc.Router/TrackPaymentV2",
  "/routerrpc.Router/EstimateRouteFee",
  "/routerrpc.Router/SendToRoute",
  "/routerrpc.Router/ResetMissionControl",
  "/routerrpc.Router/QueryMissionControl",
  "/routerrpc.Router/QueryProbability",
  "/routerrpc.Router/BuildRoute",
  "/routerrpc.Router/SubscribeHtlcEvents",
  "/routerrpc.Router/SendPayment",
  "/routerrpc.Router/TrackPayment",
};

std::unique_ptr< Router::Stub> Router::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Router::Stub> stub(new Router::Stub(channel));
  return stub;
}

Router::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendPaymentV2_(Router_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TrackPaymentV2_(Router_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_EstimateRouteFee_(Router_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendToRoute_(Router_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetMissionControl_(Router_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryMissionControl_(Router_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryProbability_(Router_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_BuildRoute_(Router_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeHtlcEvents_(Router_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendPayment_(Router_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TrackPayment_(Router_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::lnrpc::Payment>* Router::Stub::SendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), rpcmethod_SendPaymentV2_, context, request);
}

void Router::Stub::experimental_async::SendPaymentV2(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::Payment>::Create(stub_->channel_.get(), stub_->rpcmethod_SendPaymentV2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::Payment>* Router::Stub::AsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), cq, rpcmethod_SendPaymentV2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::Payment>* Router::Stub::PrepareAsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), cq, rpcmethod_SendPaymentV2_, context, request, false, nullptr);
}

::grpc::ClientReader< ::lnrpc::Payment>* Router::Stub::TrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), rpcmethod_TrackPaymentV2_, context, request);
}

void Router::Stub::experimental_async::TrackPaymentV2(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::Payment>::Create(stub_->channel_.get(), stub_->rpcmethod_TrackPaymentV2_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::Payment>* Router::Stub::AsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), cq, rpcmethod_TrackPaymentV2_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::Payment>* Router::Stub::PrepareAsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Payment>::Create(channel_.get(), cq, rpcmethod_TrackPaymentV2_, context, request, false, nullptr);
}

::grpc::Status Router::Stub::EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::routerrpc::RouteFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EstimateRouteFee_, context, request, response);
}

void Router::Stub::experimental_async::EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateRouteFee_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateRouteFee_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateRouteFee_, context, request, response, reactor);
}

void Router::Stub::experimental_async::EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateRouteFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>* Router::Stub::AsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::RouteFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateRouteFee_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>* Router::Stub::PrepareAsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::RouteFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateRouteFee_, context, request, false);
}

::grpc::Status Router::Stub::SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::routerrpc::SendToRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendToRoute_, context, request, response);
}

void Router::Stub::experimental_async::SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendToRoute_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendToRoute_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendToRoute_, context, request, response, reactor);
}

void Router::Stub::experimental_async::SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendToRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>* Router::Stub::AsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::SendToRouteResponse>::Create(channel_.get(), cq, rpcmethod_SendToRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>* Router::Stub::PrepareAsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::SendToRouteResponse>::Create(channel_.get(), cq, rpcmethod_SendToRoute_, context, request, false);
}

::grpc::Status Router::Stub::ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::routerrpc::ResetMissionControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResetMissionControl_, context, request, response);
}

void Router::Stub::experimental_async::ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetMissionControl_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResetMissionControl_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetMissionControl_, context, request, response, reactor);
}

void Router::Stub::experimental_async::ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ResetMissionControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>* Router::Stub::AsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::ResetMissionControlResponse>::Create(channel_.get(), cq, rpcmethod_ResetMissionControl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>* Router::Stub::PrepareAsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::ResetMissionControlResponse>::Create(channel_.get(), cq, rpcmethod_ResetMissionControl_, context, request, false);
}

::grpc::Status Router::Stub::QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::routerrpc::QueryMissionControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryMissionControl_, context, request, response);
}

void Router::Stub::experimental_async::QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryMissionControl_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryMissionControl_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryMissionControl_, context, request, response, reactor);
}

void Router::Stub::experimental_async::QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryMissionControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>* Router::Stub::AsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::QueryMissionControlResponse>::Create(channel_.get(), cq, rpcmethod_QueryMissionControl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>* Router::Stub::PrepareAsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::QueryMissionControlResponse>::Create(channel_.get(), cq, rpcmethod_QueryMissionControl_, context, request, false);
}

::grpc::Status Router::Stub::QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::routerrpc::QueryProbabilityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryProbability_, context, request, response);
}

void Router::Stub::experimental_async::QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryProbability_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryProbability_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryProbability_, context, request, response, reactor);
}

void Router::Stub::experimental_async::QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryProbability_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>* Router::Stub::AsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::QueryProbabilityResponse>::Create(channel_.get(), cq, rpcmethod_QueryProbability_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>* Router::Stub::PrepareAsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::QueryProbabilityResponse>::Create(channel_.get(), cq, rpcmethod_QueryProbability_, context, request, false);
}

::grpc::Status Router::Stub::BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::routerrpc::BuildRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BuildRoute_, context, request, response);
}

void Router::Stub::experimental_async::BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildRoute_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BuildRoute_, context, request, response, std::move(f));
}

void Router::Stub::experimental_async::BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildRoute_, context, request, response, reactor);
}

void Router::Stub::experimental_async::BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BuildRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>* Router::Stub::AsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::BuildRouteResponse>::Create(channel_.get(), cq, rpcmethod_BuildRoute_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>* Router::Stub::PrepareAsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::routerrpc::BuildRouteResponse>::Create(channel_.get(), cq, rpcmethod_BuildRoute_, context, request, false);
}

::grpc::ClientReader< ::routerrpc::HtlcEvent>* Router::Stub::SubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::routerrpc::HtlcEvent>::Create(channel_.get(), rpcmethod_SubscribeHtlcEvents_, context, request);
}

void Router::Stub::experimental_async::SubscribeHtlcEvents(::grpc::ClientContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::HtlcEvent>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::routerrpc::HtlcEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeHtlcEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>* Router::Stub::AsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::HtlcEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeHtlcEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>* Router::Stub::PrepareAsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::HtlcEvent>::Create(channel_.get(), cq, rpcmethod_SubscribeHtlcEvents_, context, request, false, nullptr);
}

::grpc::ClientReader< ::routerrpc::PaymentStatus>* Router::Stub::SendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), rpcmethod_SendPayment_, context, request);
}

void Router::Stub::experimental_async::SendPayment(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::routerrpc::PaymentStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_SendPayment_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* Router::Stub::AsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), cq, rpcmethod_SendPayment_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* Router::Stub::PrepareAsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), cq, rpcmethod_SendPayment_, context, request, false, nullptr);
}

::grpc::ClientReader< ::routerrpc::PaymentStatus>* Router::Stub::TrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), rpcmethod_TrackPayment_, context, request);
}

void Router::Stub::experimental_async::TrackPayment(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::routerrpc::PaymentStatus>::Create(stub_->channel_.get(), stub_->rpcmethod_TrackPayment_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* Router::Stub::AsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), cq, rpcmethod_TrackPayment_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* Router::Stub::PrepareAsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::routerrpc::PaymentStatus>::Create(channel_.get(), cq, rpcmethod_TrackPayment_, context, request, false, nullptr);
}

Router::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Router::Service, ::routerrpc::SendPaymentRequest, ::lnrpc::Payment>(
          std::mem_fn(&Router::Service::SendPaymentV2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Router::Service, ::routerrpc::TrackPaymentRequest, ::lnrpc::Payment>(
          std::mem_fn(&Router::Service::TrackPaymentV2), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::RouteFeeRequest, ::routerrpc::RouteFeeResponse>(
          std::mem_fn(&Router::Service::EstimateRouteFee), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::SendToRouteRequest, ::routerrpc::SendToRouteResponse>(
          std::mem_fn(&Router::Service::SendToRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::ResetMissionControlRequest, ::routerrpc::ResetMissionControlResponse>(
          std::mem_fn(&Router::Service::ResetMissionControl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::QueryMissionControlRequest, ::routerrpc::QueryMissionControlResponse>(
          std::mem_fn(&Router::Service::QueryMissionControl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::QueryProbabilityRequest, ::routerrpc::QueryProbabilityResponse>(
          std::mem_fn(&Router::Service::QueryProbability), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Router::Service, ::routerrpc::BuildRouteRequest, ::routerrpc::BuildRouteResponse>(
          std::mem_fn(&Router::Service::BuildRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Router::Service, ::routerrpc::SubscribeHtlcEventsRequest, ::routerrpc::HtlcEvent>(
          std::mem_fn(&Router::Service::SubscribeHtlcEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Router::Service, ::routerrpc::SendPaymentRequest, ::routerrpc::PaymentStatus>(
          std::mem_fn(&Router::Service::SendPayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Router_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Router::Service, ::routerrpc::TrackPaymentRequest, ::routerrpc::PaymentStatus>(
          std::mem_fn(&Router::Service::TrackPayment), this)));
}

Router::Service::~Service() {
}

::grpc::Status Router::Service::SendPaymentV2(::grpc::ServerContext* context, const ::routerrpc::SendPaymentRequest* request, ::grpc::ServerWriter< ::lnrpc::Payment>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::TrackPaymentV2(::grpc::ServerContext* context, const ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerWriter< ::lnrpc::Payment>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::EstimateRouteFee(::grpc::ServerContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SendToRoute(::grpc::ServerContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::ResetMissionControl(::grpc::ServerContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::QueryMissionControl(::grpc::ServerContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::QueryProbability(::grpc::ServerContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::BuildRoute(::grpc::ServerContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SubscribeHtlcEvents(::grpc::ServerContext* context, const ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::SendPayment(::grpc::ServerContext* context, const ::routerrpc::SendPaymentRequest* request, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Router::Service::TrackPayment(::grpc::ServerContext* context, const ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace routerrpc

