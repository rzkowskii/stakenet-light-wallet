// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#include "rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMP_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chain_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChanPointShim_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Channel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelBackup_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelBackups_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelCloseSummary_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelCloseUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConstraints_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelEdge_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelEdgeUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelFeeReport_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelOpenUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelPoint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClosedChannelUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeLocator_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Failure_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeLimit_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatMetric_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardingEvent_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingPsbtFinalize_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingPsbtVerify_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FundingShim_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingShimCancel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTLC_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTLCAttempt_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Hop_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HopHint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Invoice_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvoiceHTLC_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyDescriptor_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyLocator_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningAddress_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LightningNode_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPPRecord_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MacaroonPermission_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MacaroonPermissionList_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiChanBackup_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeAddress_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodePair_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Op_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutPoint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Peer_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingChannelsResponse_Commitments_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingHTLC_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingUpdate_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsbtShim_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadyForPsbtFunding_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resolution_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteHint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingPolicy_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampedError_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Utxo_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletAccountBalance_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto;
namespace lnrpc {
class UtxoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Utxo> _instance;
} _Utxo_default_instance_;
class TransactionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Transaction> _instance;
} _Transaction_default_instance_;
class GetTransactionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTransactionsRequest> _instance;
} _GetTransactionsRequest_default_instance_;
class TransactionDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TransactionDetails> _instance;
} _TransactionDetails_default_instance_;
class FeeLimitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeLimit> _instance;
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_;
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 percent_;
} _FeeLimit_default_instance_;
class SendRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendRequest_DestCustomRecordsEntry_DoNotUse> _instance;
} _SendRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class SendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendRequest> _instance;
} _SendRequest_default_instance_;
class SendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendResponse> _instance;
} _SendResponse_default_instance_;
class SendToRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToRouteRequest> _instance;
} _SendToRouteRequest_default_instance_;
class ChannelAcceptRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelAcceptRequest> _instance;
} _ChannelAcceptRequest_default_instance_;
class ChannelAcceptResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelAcceptResponse> _instance;
} _ChannelAcceptResponse_default_instance_;
class ChannelPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelPoint> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_txid_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_txid_str_;
} _ChannelPoint_default_instance_;
class OutPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OutPoint> _instance;
} _OutPoint_default_instance_;
class LightningAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningAddress> _instance;
} _LightningAddress_default_instance_;
class EstimateFeeRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeRequest_AddrToAmountEntry_DoNotUse> _instance;
} _EstimateFeeRequest_AddrToAmountEntry_DoNotUse_default_instance_;
class EstimateFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeRequest> _instance;
} _EstimateFeeRequest_default_instance_;
class EstimateFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateFeeResponse> _instance;
} _EstimateFeeResponse_default_instance_;
class SendManyRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendManyRequest_AddrToAmountEntry_DoNotUse> _instance;
} _SendManyRequest_AddrToAmountEntry_DoNotUse_default_instance_;
class SendManyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendManyRequest> _instance;
} _SendManyRequest_default_instance_;
class SendManyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendManyResponse> _instance;
} _SendManyResponse_default_instance_;
class SendCoinsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCoinsRequest> _instance;
} _SendCoinsRequest_default_instance_;
class SendCoinsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendCoinsResponse> _instance;
} _SendCoinsResponse_default_instance_;
class ListUnspentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUnspentRequest> _instance;
} _ListUnspentRequest_default_instance_;
class ListUnspentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUnspentResponse> _instance;
} _ListUnspentResponse_default_instance_;
class NewAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewAddressRequest> _instance;
} _NewAddressRequest_default_instance_;
class NewAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewAddressResponse> _instance;
} _NewAddressResponse_default_instance_;
class SignMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignMessageRequest> _instance;
} _SignMessageRequest_default_instance_;
class SignMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignMessageResponse> _instance;
} _SignMessageResponse_default_instance_;
class VerifyMessageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyMessageRequest> _instance;
} _VerifyMessageRequest_default_instance_;
class VerifyMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyMessageResponse> _instance;
} _VerifyMessageResponse_default_instance_;
class ConnectPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectPeerRequest> _instance;
} _ConnectPeerRequest_default_instance_;
class ConnectPeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectPeerResponse> _instance;
} _ConnectPeerResponse_default_instance_;
class DisconnectPeerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectPeerRequest> _instance;
} _DisconnectPeerRequest_default_instance_;
class DisconnectPeerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DisconnectPeerResponse> _instance;
} _DisconnectPeerResponse_default_instance_;
class HTLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTLC> _instance;
} _HTLC_default_instance_;
class ChannelConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelConstraints> _instance;
} _ChannelConstraints_default_instance_;
class ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Channel> _instance;
} _Channel_default_instance_;
class ListChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListChannelsRequest> _instance;
} _ListChannelsRequest_default_instance_;
class ListChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListChannelsResponse> _instance;
} _ListChannelsResponse_default_instance_;
class ChannelCloseSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelCloseSummary> _instance;
} _ChannelCloseSummary_default_instance_;
class ResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resolution> _instance;
} _Resolution_default_instance_;
class ClosedChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClosedChannelsRequest> _instance;
} _ClosedChannelsRequest_default_instance_;
class ClosedChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClosedChannelsResponse> _instance;
} _ClosedChannelsResponse_default_instance_;
class Peer_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Peer_FeaturesEntry_DoNotUse> _instance;
} _Peer_FeaturesEntry_DoNotUse_default_instance_;
class PeerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Peer> _instance;
} _Peer_default_instance_;
class TimestampedErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimestampedError> _instance;
} _TimestampedError_default_instance_;
class ListPeersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeersRequest> _instance;
} _ListPeersRequest_default_instance_;
class ListPeersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPeersResponse> _instance;
} _ListPeersResponse_default_instance_;
class PeerEventSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerEventSubscription> _instance;
} _PeerEventSubscription_default_instance_;
class PeerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeerEvent> _instance;
} _PeerEvent_default_instance_;
class GetInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoRequest> _instance;
} _GetInfoRequest_default_instance_;
class GetInfoResponse_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoResponse_FeaturesEntry_DoNotUse> _instance;
} _GetInfoResponse_FeaturesEntry_DoNotUse_default_instance_;
class GetInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetInfoResponse> _instance;
} _GetInfoResponse_default_instance_;
class GetRecoveryInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRecoveryInfoRequest> _instance;
} _GetRecoveryInfoRequest_default_instance_;
class GetRecoveryInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRecoveryInfoResponse> _instance;
} _GetRecoveryInfoResponse_default_instance_;
class ChainDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Chain> _instance;
} _Chain_default_instance_;
class ConfirmationUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfirmationUpdate> _instance;
} _ConfirmationUpdate_default_instance_;
class ChannelOpenUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelOpenUpdate> _instance;
} _ChannelOpenUpdate_default_instance_;
class ChannelCloseUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelCloseUpdate> _instance;
} _ChannelCloseUpdate_default_instance_;
class CloseChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseChannelRequest> _instance;
} _CloseChannelRequest_default_instance_;
class CloseStatusUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseStatusUpdate> _instance;
  const ::lnrpc::PendingUpdate* close_pending_;
  const ::lnrpc::ChannelCloseUpdate* chan_close_;
} _CloseStatusUpdate_default_instance_;
class PendingUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingUpdate> _instance;
} _PendingUpdate_default_instance_;
class ReadyForPsbtFundingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReadyForPsbtFunding> _instance;
} _ReadyForPsbtFunding_default_instance_;
class OpenChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenChannelRequest> _instance;
} _OpenChannelRequest_default_instance_;
class OpenStatusUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpenStatusUpdate> _instance;
  const ::lnrpc::PendingUpdate* chan_pending_;
  const ::lnrpc::ChannelOpenUpdate* chan_open_;
  const ::lnrpc::ReadyForPsbtFunding* psbt_fund_;
} _OpenStatusUpdate_default_instance_;
class KeyLocatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyLocator> _instance;
} _KeyLocator_default_instance_;
class KeyDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyDescriptor> _instance;
} _KeyDescriptor_default_instance_;
class ChanPointShimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChanPointShim> _instance;
} _ChanPointShim_default_instance_;
class PsbtShimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PsbtShim> _instance;
} _PsbtShim_default_instance_;
class FundingShimDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingShim> _instance;
  const ::lnrpc::ChanPointShim* chan_point_shim_;
  const ::lnrpc::PsbtShim* psbt_shim_;
} _FundingShim_default_instance_;
class FundingShimCancelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingShimCancel> _instance;
} _FundingShimCancel_default_instance_;
class FundingPsbtVerifyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingPsbtVerify> _instance;
} _FundingPsbtVerify_default_instance_;
class FundingPsbtFinalizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingPsbtFinalize> _instance;
} _FundingPsbtFinalize_default_instance_;
class FundingTransitionMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingTransitionMsg> _instance;
  const ::lnrpc::FundingShim* shim_register_;
  const ::lnrpc::FundingShimCancel* shim_cancel_;
  const ::lnrpc::FundingPsbtVerify* psbt_verify_;
  const ::lnrpc::FundingPsbtFinalize* psbt_finalize_;
} _FundingTransitionMsg_default_instance_;
class FundingStateStepRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FundingStateStepResp> _instance;
} _FundingStateStepResp_default_instance_;
class PendingHTLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingHTLC> _instance;
} _PendingHTLC_default_instance_;
class PendingChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsRequest> _instance;
} _PendingChannelsRequest_default_instance_;
class PendingChannelsResponse_PendingChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_PendingChannel> _instance;
} _PendingChannelsResponse_PendingChannel_default_instance_;
class PendingChannelsResponse_PendingOpenChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_PendingOpenChannel> _instance;
} _PendingChannelsResponse_PendingOpenChannel_default_instance_;
class PendingChannelsResponse_WaitingCloseChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_WaitingCloseChannel> _instance;
} _PendingChannelsResponse_WaitingCloseChannel_default_instance_;
class PendingChannelsResponse_CommitmentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_Commitments> _instance;
} _PendingChannelsResponse_Commitments_default_instance_;
class PendingChannelsResponse_ClosedChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_ClosedChannel> _instance;
} _PendingChannelsResponse_ClosedChannel_default_instance_;
class PendingChannelsResponse_ForceClosedChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse_ForceClosedChannel> _instance;
} _PendingChannelsResponse_ForceClosedChannel_default_instance_;
class PendingChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PendingChannelsResponse> _instance;
} _PendingChannelsResponse_default_instance_;
class ChannelEventSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelEventSubscription> _instance;
} _ChannelEventSubscription_default_instance_;
class ChannelEventUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelEventUpdate> _instance;
  const ::lnrpc::Channel* open_channel_;
  const ::lnrpc::ChannelCloseSummary* closed_channel_;
  const ::lnrpc::ChannelPoint* active_channel_;
  const ::lnrpc::ChannelPoint* inactive_channel_;
  const ::lnrpc::PendingUpdate* pending_open_channel_;
} _ChannelEventUpdate_default_instance_;
class WalletAccountBalanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletAccountBalance> _instance;
} _WalletAccountBalance_default_instance_;
class WalletBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletBalanceRequest> _instance;
} _WalletBalanceRequest_default_instance_;
class WalletBalanceResponse_AccountBalanceEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletBalanceResponse_AccountBalanceEntry_DoNotUse> _instance;
} _WalletBalanceResponse_AccountBalanceEntry_DoNotUse_default_instance_;
class WalletBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WalletBalanceResponse> _instance;
} _WalletBalanceResponse_default_instance_;
class AmountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Amount> _instance;
} _Amount_default_instance_;
class ChannelBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBalanceRequest> _instance;
} _ChannelBalanceRequest_default_instance_;
class ChannelBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBalanceResponse> _instance;
} _ChannelBalanceResponse_default_instance_;
class QueryRoutesRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse> _instance;
} _QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class QueryRoutesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRoutesRequest> _instance;
} _QueryRoutesRequest_default_instance_;
class NodePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodePair> _instance;
} _NodePair_default_instance_;
class EdgeLocatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EdgeLocator> _instance;
} _EdgeLocator_default_instance_;
class QueryRoutesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryRoutesResponse> _instance;
} _QueryRoutesResponse_default_instance_;
class Hop_CustomRecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hop_CustomRecordsEntry_DoNotUse> _instance;
} _Hop_CustomRecordsEntry_DoNotUse_default_instance_;
class HopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hop> _instance;
} _Hop_default_instance_;
class MPPRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MPPRecord> _instance;
} _MPPRecord_default_instance_;
class RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Route> _instance;
} _Route_default_instance_;
class NodeInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfoRequest> _instance;
} _NodeInfoRequest_default_instance_;
class NodeInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeInfo> _instance;
} _NodeInfo_default_instance_;
class LightningNode_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningNode_FeaturesEntry_DoNotUse> _instance;
} _LightningNode_FeaturesEntry_DoNotUse_default_instance_;
class LightningNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LightningNode> _instance;
} _LightningNode_default_instance_;
class NodeAddressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeAddress> _instance;
} _NodeAddress_default_instance_;
class RoutingPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoutingPolicy> _instance;
} _RoutingPolicy_default_instance_;
class ChannelEdgeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelEdge> _instance;
} _ChannelEdge_default_instance_;
class ChannelGraphRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelGraphRequest> _instance;
} _ChannelGraphRequest_default_instance_;
class ChannelGraphDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelGraph> _instance;
} _ChannelGraph_default_instance_;
class NodeMetricsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeMetricsRequest> _instance;
} _NodeMetricsRequest_default_instance_;
class NodeMetricsResponse_BetweennessCentralityEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse> _instance;
} _NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_default_instance_;
class NodeMetricsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeMetricsResponse> _instance;
} _NodeMetricsResponse_default_instance_;
class FloatMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FloatMetric> _instance;
} _FloatMetric_default_instance_;
class ChanInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChanInfoRequest> _instance;
} _ChanInfoRequest_default_instance_;
class NetworkInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkInfoRequest> _instance;
} _NetworkInfoRequest_default_instance_;
class NetworkInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkInfo> _instance;
} _NetworkInfo_default_instance_;
class StopRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopRequest> _instance;
} _StopRequest_default_instance_;
class StopResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopResponse> _instance;
} _StopResponse_default_instance_;
class GraphTopologySubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTopologySubscription> _instance;
} _GraphTopologySubscription_default_instance_;
class GraphTopologyUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GraphTopologyUpdate> _instance;
} _GraphTopologyUpdate_default_instance_;
class NodeUpdate_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeUpdate_FeaturesEntry_DoNotUse> _instance;
} _NodeUpdate_FeaturesEntry_DoNotUse_default_instance_;
class NodeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NodeUpdate> _instance;
} _NodeUpdate_default_instance_;
class ChannelEdgeUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelEdgeUpdate> _instance;
} _ChannelEdgeUpdate_default_instance_;
class ClosedChannelUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClosedChannelUpdate> _instance;
} _ClosedChannelUpdate_default_instance_;
class HopHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HopHint> _instance;
} _HopHint_default_instance_;
class RouteHintDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteHint> _instance;
} _RouteHint_default_instance_;
class Invoice_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Invoice_FeaturesEntry_DoNotUse> _instance;
} _Invoice_FeaturesEntry_DoNotUse_default_instance_;
class InvoiceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Invoice> _instance;
} _Invoice_default_instance_;
class InvoiceHTLC_CustomRecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvoiceHTLC_CustomRecordsEntry_DoNotUse> _instance;
} _InvoiceHTLC_CustomRecordsEntry_DoNotUse_default_instance_;
class InvoiceHTLCDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvoiceHTLC> _instance;
} _InvoiceHTLC_default_instance_;
class AMPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AMP> _instance;
} _AMP_default_instance_;
class AddInvoiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddInvoiceResponse> _instance;
} _AddInvoiceResponse_default_instance_;
class PaymentHashDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentHash> _instance;
} _PaymentHash_default_instance_;
class ListInvoiceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInvoiceRequest> _instance;
} _ListInvoiceRequest_default_instance_;
class ListInvoiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListInvoiceResponse> _instance;
} _ListInvoiceResponse_default_instance_;
class InvoiceSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvoiceSubscription> _instance;
} _InvoiceSubscription_default_instance_;
class PaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Payment> _instance;
} _Payment_default_instance_;
class HTLCAttemptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTLCAttempt> _instance;
} _HTLCAttempt_default_instance_;
class ListPaymentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentsRequest> _instance;
} _ListPaymentsRequest_default_instance_;
class ListPaymentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPaymentsResponse> _instance;
} _ListPaymentsResponse_default_instance_;
class DeleteAllPaymentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAllPaymentsRequest> _instance;
} _DeleteAllPaymentsRequest_default_instance_;
class DeleteAllPaymentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAllPaymentsResponse> _instance;
} _DeleteAllPaymentsResponse_default_instance_;
class AbandonChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbandonChannelRequest> _instance;
} _AbandonChannelRequest_default_instance_;
class AbandonChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbandonChannelResponse> _instance;
} _AbandonChannelResponse_default_instance_;
class DebugLevelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugLevelRequest> _instance;
} _DebugLevelRequest_default_instance_;
class DebugLevelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DebugLevelResponse> _instance;
} _DebugLevelResponse_default_instance_;
class PayReqStringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayReqString> _instance;
} _PayReqString_default_instance_;
class PayReq_FeaturesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayReq_FeaturesEntry_DoNotUse> _instance;
} _PayReq_FeaturesEntry_DoNotUse_default_instance_;
class PayReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PayReq> _instance;
} _PayReq_default_instance_;
class FeatureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature> _instance;
} _Feature_default_instance_;
class FeeReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeReportRequest> _instance;
} _FeeReportRequest_default_instance_;
class ChannelFeeReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelFeeReport> _instance;
} _ChannelFeeReport_default_instance_;
class FeeReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeeReportResponse> _instance;
} _FeeReportResponse_default_instance_;
class PolicyUpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyUpdateRequest> _instance;
  bool global_;
  const ::lnrpc::ChannelPoint* chan_point_;
} _PolicyUpdateRequest_default_instance_;
class PolicyUpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyUpdateResponse> _instance;
} _PolicyUpdateResponse_default_instance_;
class ForwardingHistoryRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardingHistoryRequest> _instance;
} _ForwardingHistoryRequest_default_instance_;
class ForwardingEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardingEvent> _instance;
} _ForwardingEvent_default_instance_;
class ForwardingHistoryResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardingHistoryResponse> _instance;
} _ForwardingHistoryResponse_default_instance_;
class ExportChannelBackupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExportChannelBackupRequest> _instance;
} _ExportChannelBackupRequest_default_instance_;
class ChannelBackupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBackup> _instance;
} _ChannelBackup_default_instance_;
class MultiChanBackupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MultiChanBackup> _instance;
} _MultiChanBackup_default_instance_;
class ChanBackupExportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChanBackupExportRequest> _instance;
} _ChanBackupExportRequest_default_instance_;
class ChanBackupSnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChanBackupSnapshot> _instance;
} _ChanBackupSnapshot_default_instance_;
class ChannelBackupsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBackups> _instance;
} _ChannelBackups_default_instance_;
class RestoreChanBackupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreChanBackupRequest> _instance;
  const ::lnrpc::ChannelBackups* chan_backups_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multi_chan_backup_;
} _RestoreChanBackupRequest_default_instance_;
class RestoreBackupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RestoreBackupResponse> _instance;
} _RestoreBackupResponse_default_instance_;
class ChannelBackupSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelBackupSubscription> _instance;
} _ChannelBackupSubscription_default_instance_;
class VerifyChanBackupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VerifyChanBackupResponse> _instance;
} _VerifyChanBackupResponse_default_instance_;
class MacaroonPermissionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacaroonPermission> _instance;
} _MacaroonPermission_default_instance_;
class BakeMacaroonRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BakeMacaroonRequest> _instance;
} _BakeMacaroonRequest_default_instance_;
class BakeMacaroonResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BakeMacaroonResponse> _instance;
} _BakeMacaroonResponse_default_instance_;
class ListMacaroonIDsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMacaroonIDsRequest> _instance;
} _ListMacaroonIDsRequest_default_instance_;
class ListMacaroonIDsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListMacaroonIDsResponse> _instance;
} _ListMacaroonIDsResponse_default_instance_;
class DeleteMacaroonIDRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMacaroonIDRequest> _instance;
} _DeleteMacaroonIDRequest_default_instance_;
class DeleteMacaroonIDResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteMacaroonIDResponse> _instance;
} _DeleteMacaroonIDResponse_default_instance_;
class MacaroonPermissionListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacaroonPermissionList> _instance;
} _MacaroonPermissionList_default_instance_;
class ListPermissionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPermissionsRequest> _instance;
} _ListPermissionsRequest_default_instance_;
class ListPermissionsResponse_MethodPermissionsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPermissionsResponse_MethodPermissionsEntry_DoNotUse> _instance;
} _ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_default_instance_;
class ListPermissionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPermissionsResponse> _instance;
} _ListPermissionsResponse_default_instance_;
class FailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Failure> _instance;
} _Failure_default_instance_;
class ChannelUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelUpdate> _instance;
} _ChannelUpdate_default_instance_;
class MacaroonIdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MacaroonId> _instance;
} _MacaroonId_default_instance_;
class OpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Op> _instance;
} _Op_default_instance_;
}  // namespace lnrpc
static void InitDefaultsscc_info_AMP_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_AMP_default_instance_;
    new (ptr) ::lnrpc::AMP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::AMP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AMP_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AMP_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AbandonChannelRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_AbandonChannelRequest_default_instance_;
    new (ptr) ::lnrpc::AbandonChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::AbandonChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AbandonChannelRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AbandonChannelRequest_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_AbandonChannelResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_AbandonChannelResponse_default_instance_;
    new (ptr) ::lnrpc::AbandonChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::AbandonChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbandonChannelResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbandonChannelResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_AddInvoiceResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_AddInvoiceResponse_default_instance_;
    new (ptr) ::lnrpc::AddInvoiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::AddInvoiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddInvoiceResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddInvoiceResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Amount_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Amount_default_instance_;
    new (ptr) ::lnrpc::Amount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Amount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Amount_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Amount_rpc_2eproto}, {}};

static void InitDefaultsscc_info_BakeMacaroonRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_BakeMacaroonRequest_default_instance_;
    new (ptr) ::lnrpc::BakeMacaroonRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::BakeMacaroonRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BakeMacaroonRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BakeMacaroonRequest_rpc_2eproto}, {
      &scc_info_MacaroonPermission_rpc_2eproto.base,}};

static void InitDefaultsscc_info_BakeMacaroonResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_BakeMacaroonResponse_default_instance_;
    new (ptr) ::lnrpc::BakeMacaroonResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::BakeMacaroonResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BakeMacaroonResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BakeMacaroonResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Chain_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Chain_default_instance_;
    new (ptr) ::lnrpc::Chain();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Chain::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Chain_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Chain_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChanBackupExportRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChanBackupExportRequest_default_instance_;
    new (ptr) ::lnrpc::ChanBackupExportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChanBackupExportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChanBackupExportRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChanBackupExportRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChanBackupSnapshot_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChanBackupSnapshot_default_instance_;
    new (ptr) ::lnrpc::ChanBackupSnapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChanBackupSnapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChanBackupSnapshot_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChanBackupSnapshot_rpc_2eproto}, {
      &scc_info_ChannelBackups_rpc_2eproto.base,
      &scc_info_MultiChanBackup_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChanInfoRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChanInfoRequest_default_instance_;
    new (ptr) ::lnrpc::ChanInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChanInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChanInfoRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChanInfoRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChanPointShim_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChanPointShim_default_instance_;
    new (ptr) ::lnrpc::ChanPointShim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChanPointShim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChanPointShim_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChanPointShim_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,
      &scc_info_KeyDescriptor_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Channel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Channel_default_instance_;
    new (ptr) ::lnrpc::Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Channel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Channel_rpc_2eproto}, {
      &scc_info_HTLC_rpc_2eproto.base,
      &scc_info_ChannelConstraints_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelAcceptRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelAcceptRequest_default_instance_;
    new (ptr) ::lnrpc::ChannelAcceptRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelAcceptRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelAcceptRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelAcceptRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelAcceptResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelAcceptResponse_default_instance_;
    new (ptr) ::lnrpc::ChannelAcceptResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelAcceptResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelAcceptResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelAcceptResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelBackup_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelBackup_default_instance_;
    new (ptr) ::lnrpc::ChannelBackup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelBackup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelBackup_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelBackup_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelBackupSubscription_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelBackupSubscription_default_instance_;
    new (ptr) ::lnrpc::ChannelBackupSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelBackupSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelBackupSubscription_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelBackupSubscription_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelBackups_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelBackups_default_instance_;
    new (ptr) ::lnrpc::ChannelBackups();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelBackups::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelBackups_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelBackups_rpc_2eproto}, {
      &scc_info_ChannelBackup_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelBalanceRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelBalanceRequest_default_instance_;
    new (ptr) ::lnrpc::ChannelBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelBalanceRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelBalanceRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelBalanceResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelBalanceResponse_default_instance_;
    new (ptr) ::lnrpc::ChannelBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelBalanceResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelBalanceResponse_rpc_2eproto}, {
      &scc_info_Amount_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelCloseSummary_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelCloseSummary_default_instance_;
    new (ptr) ::lnrpc::ChannelCloseSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelCloseSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelCloseSummary_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelCloseSummary_rpc_2eproto}, {
      &scc_info_Resolution_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelCloseUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelCloseUpdate_default_instance_;
    new (ptr) ::lnrpc::ChannelCloseUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelCloseUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelCloseUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelCloseUpdate_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelConstraints_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelConstraints_default_instance_;
    new (ptr) ::lnrpc::ChannelConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelConstraints_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelConstraints_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelEdge_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelEdge_default_instance_;
    new (ptr) ::lnrpc::ChannelEdge();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelEdge::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelEdge_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelEdge_rpc_2eproto}, {
      &scc_info_RoutingPolicy_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelEdgeUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelEdgeUpdate_default_instance_;
    new (ptr) ::lnrpc::ChannelEdgeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelEdgeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelEdgeUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelEdgeUpdate_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,
      &scc_info_RoutingPolicy_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelEventSubscription_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelEventSubscription_default_instance_;
    new (ptr) ::lnrpc::ChannelEventSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelEventSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelEventSubscription_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelEventSubscription_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelEventUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelEventUpdate_default_instance_;
    new (ptr) ::lnrpc::ChannelEventUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelEventUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ChannelEventUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ChannelEventUpdate_rpc_2eproto}, {
      &scc_info_Channel_rpc_2eproto.base,
      &scc_info_ChannelCloseSummary_rpc_2eproto.base,
      &scc_info_ChannelPoint_rpc_2eproto.base,
      &scc_info_PendingUpdate_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelFeeReport_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelFeeReport_default_instance_;
    new (ptr) ::lnrpc::ChannelFeeReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelFeeReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelFeeReport_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelFeeReport_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelGraph_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelGraph_default_instance_;
    new (ptr) ::lnrpc::ChannelGraph();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelGraph::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelGraph_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelGraph_rpc_2eproto}, {
      &scc_info_LightningNode_rpc_2eproto.base,
      &scc_info_ChannelEdge_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelGraphRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelGraphRequest_default_instance_;
    new (ptr) ::lnrpc::ChannelGraphRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelGraphRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelGraphRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelGraphRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelOpenUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelOpenUpdate_default_instance_;
    new (ptr) ::lnrpc::ChannelOpenUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelOpenUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChannelOpenUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChannelOpenUpdate_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ChannelPoint_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelPoint_default_instance_;
    new (ptr) ::lnrpc::ChannelPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelPoint_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelPoint_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ChannelUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ChannelUpdate_default_instance_;
    new (ptr) ::lnrpc::ChannelUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ChannelUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChannelUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChannelUpdate_rpc_2eproto}, {}};

static void InitDefaultsscc_info_CloseChannelRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_CloseChannelRequest_default_instance_;
    new (ptr) ::lnrpc::CloseChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::CloseChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CloseChannelRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CloseChannelRequest_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_CloseStatusUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_CloseStatusUpdate_default_instance_;
    new (ptr) ::lnrpc::CloseStatusUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::CloseStatusUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CloseStatusUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CloseStatusUpdate_rpc_2eproto}, {
      &scc_info_PendingUpdate_rpc_2eproto.base,
      &scc_info_ChannelCloseUpdate_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ClosedChannelUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ClosedChannelUpdate_default_instance_;
    new (ptr) ::lnrpc::ClosedChannelUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ClosedChannelUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClosedChannelUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClosedChannelUpdate_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ClosedChannelsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ClosedChannelsRequest_default_instance_;
    new (ptr) ::lnrpc::ClosedChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ClosedChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClosedChannelsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClosedChannelsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ClosedChannelsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ClosedChannelsResponse_default_instance_;
    new (ptr) ::lnrpc::ClosedChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ClosedChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClosedChannelsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ClosedChannelsResponse_rpc_2eproto}, {
      &scc_info_ChannelCloseSummary_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ConfirmationUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ConfirmationUpdate_default_instance_;
    new (ptr) ::lnrpc::ConfirmationUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ConfirmationUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConfirmationUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConfirmationUpdate_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ConnectPeerRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ConnectPeerRequest_default_instance_;
    new (ptr) ::lnrpc::ConnectPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ConnectPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ConnectPeerRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ConnectPeerRequest_rpc_2eproto}, {
      &scc_info_LightningAddress_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ConnectPeerResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ConnectPeerResponse_default_instance_;
    new (ptr) ::lnrpc::ConnectPeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ConnectPeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectPeerResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectPeerResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DebugLevelRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DebugLevelRequest_default_instance_;
    new (ptr) ::lnrpc::DebugLevelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DebugLevelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugLevelRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugLevelRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DebugLevelResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DebugLevelResponse_default_instance_;
    new (ptr) ::lnrpc::DebugLevelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DebugLevelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DebugLevelResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DebugLevelResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAllPaymentsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DeleteAllPaymentsRequest_default_instance_;
    new (ptr) ::lnrpc::DeleteAllPaymentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DeleteAllPaymentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAllPaymentsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAllPaymentsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAllPaymentsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DeleteAllPaymentsResponse_default_instance_;
    new (ptr) ::lnrpc::DeleteAllPaymentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DeleteAllPaymentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAllPaymentsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAllPaymentsResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMacaroonIDRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DeleteMacaroonIDRequest_default_instance_;
    new (ptr) ::lnrpc::DeleteMacaroonIDRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DeleteMacaroonIDRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMacaroonIDRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMacaroonIDRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DeleteMacaroonIDResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DeleteMacaroonIDResponse_default_instance_;
    new (ptr) ::lnrpc::DeleteMacaroonIDResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DeleteMacaroonIDResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteMacaroonIDResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteMacaroonIDResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DisconnectPeerRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DisconnectPeerRequest_default_instance_;
    new (ptr) ::lnrpc::DisconnectPeerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DisconnectPeerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectPeerRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisconnectPeerRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_DisconnectPeerResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_DisconnectPeerResponse_default_instance_;
    new (ptr) ::lnrpc::DisconnectPeerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::DisconnectPeerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DisconnectPeerResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DisconnectPeerResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_EdgeLocator_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_EdgeLocator_default_instance_;
    new (ptr) ::lnrpc::EdgeLocator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::EdgeLocator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EdgeLocator_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EdgeLocator_rpc_2eproto}, {}};

static void InitDefaultsscc_info_EstimateFeeRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_EstimateFeeRequest_default_instance_;
    new (ptr) ::lnrpc::EstimateFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::EstimateFeeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EstimateFeeRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EstimateFeeRequest_rpc_2eproto}, {
      &scc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse();
  }
  ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_EstimateFeeResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_EstimateFeeResponse_default_instance_;
    new (ptr) ::lnrpc::EstimateFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::EstimateFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstimateFeeResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EstimateFeeResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ExportChannelBackupRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ExportChannelBackupRequest_default_instance_;
    new (ptr) ::lnrpc::ExportChannelBackupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ExportChannelBackupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExportChannelBackupRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExportChannelBackupRequest_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Failure_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Failure_default_instance_;
    new (ptr) ::lnrpc::Failure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Failure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Failure_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Failure_rpc_2eproto}, {
      &scc_info_ChannelUpdate_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Feature_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Feature_default_instance_;
    new (ptr) ::lnrpc::Feature();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Feature::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Feature_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FeeLimit_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FeeLimit_default_instance_;
    new (ptr) ::lnrpc::FeeLimit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FeeLimit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeLimit_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeLimit_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FeeReportRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FeeReportRequest_default_instance_;
    new (ptr) ::lnrpc::FeeReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FeeReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeeReportRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeeReportRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FeeReportResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FeeReportResponse_default_instance_;
    new (ptr) ::lnrpc::FeeReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FeeReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeeReportResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeeReportResponse_rpc_2eproto}, {
      &scc_info_ChannelFeeReport_rpc_2eproto.base,}};

static void InitDefaultsscc_info_FloatMetric_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FloatMetric_default_instance_;
    new (ptr) ::lnrpc::FloatMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FloatMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatMetric_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FloatMetric_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ForwardingEvent_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ForwardingEvent_default_instance_;
    new (ptr) ::lnrpc::ForwardingEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ForwardingEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardingEvent_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForwardingEvent_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ForwardingHistoryRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ForwardingHistoryRequest_default_instance_;
    new (ptr) ::lnrpc::ForwardingHistoryRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ForwardingHistoryRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardingHistoryRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForwardingHistoryRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ForwardingHistoryResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ForwardingHistoryResponse_default_instance_;
    new (ptr) ::lnrpc::ForwardingHistoryResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ForwardingHistoryResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForwardingHistoryResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForwardingHistoryResponse_rpc_2eproto}, {
      &scc_info_ForwardingEvent_rpc_2eproto.base,}};

static void InitDefaultsscc_info_FundingPsbtFinalize_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingPsbtFinalize_default_instance_;
    new (ptr) ::lnrpc::FundingPsbtFinalize();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingPsbtFinalize::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingPsbtFinalize_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundingPsbtFinalize_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FundingPsbtVerify_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingPsbtVerify_default_instance_;
    new (ptr) ::lnrpc::FundingPsbtVerify();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingPsbtVerify::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingPsbtVerify_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundingPsbtVerify_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FundingShim_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingShim_default_instance_;
    new (ptr) ::lnrpc::FundingShim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingShim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FundingShim_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FundingShim_rpc_2eproto}, {
      &scc_info_ChanPointShim_rpc_2eproto.base,
      &scc_info_PsbtShim_rpc_2eproto.base,}};

static void InitDefaultsscc_info_FundingShimCancel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingShimCancel_default_instance_;
    new (ptr) ::lnrpc::FundingShimCancel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingShimCancel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingShimCancel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundingShimCancel_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FundingStateStepResp_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingStateStepResp_default_instance_;
    new (ptr) ::lnrpc::FundingStateStepResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingStateStepResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FundingStateStepResp_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FundingStateStepResp_rpc_2eproto}, {}};

static void InitDefaultsscc_info_FundingTransitionMsg_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_FundingTransitionMsg_default_instance_;
    new (ptr) ::lnrpc::FundingTransitionMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::FundingTransitionMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_FundingTransitionMsg_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_FundingTransitionMsg_rpc_2eproto}, {
      &scc_info_FundingShim_rpc_2eproto.base,
      &scc_info_FundingShimCancel_rpc_2eproto.base,
      &scc_info_FundingPsbtVerify_rpc_2eproto.base,
      &scc_info_FundingPsbtFinalize_rpc_2eproto.base,}};

static void InitDefaultsscc_info_GetInfoRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetInfoRequest_default_instance_;
    new (ptr) ::lnrpc::GetInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GetInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetInfoRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetInfoRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetInfoResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetInfoResponse_default_instance_;
    new (ptr) ::lnrpc::GetInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GetInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetInfoResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetInfoResponse_rpc_2eproto}, {
      &scc_info_Chain_rpc_2eproto.base,
      &scc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetInfoResponse_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_GetRecoveryInfoRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetRecoveryInfoRequest_default_instance_;
    new (ptr) ::lnrpc::GetRecoveryInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GetRecoveryInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRecoveryInfoRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRecoveryInfoRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetRecoveryInfoResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetRecoveryInfoResponse_default_instance_;
    new (ptr) ::lnrpc::GetRecoveryInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GetRecoveryInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRecoveryInfoResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRecoveryInfoResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_GetTransactionsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GetTransactionsRequest_default_instance_;
    new (ptr) ::lnrpc::GetTransactionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GetTransactionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTransactionsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTransactionsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_GraphTopologySubscription_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GraphTopologySubscription_default_instance_;
    new (ptr) ::lnrpc::GraphTopologySubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GraphTopologySubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GraphTopologySubscription_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GraphTopologySubscription_rpc_2eproto}, {}};

static void InitDefaultsscc_info_GraphTopologyUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_GraphTopologyUpdate_default_instance_;
    new (ptr) ::lnrpc::GraphTopologyUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::GraphTopologyUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GraphTopologyUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GraphTopologyUpdate_rpc_2eproto}, {
      &scc_info_NodeUpdate_rpc_2eproto.base,
      &scc_info_ChannelEdgeUpdate_rpc_2eproto.base,
      &scc_info_ClosedChannelUpdate_rpc_2eproto.base,}};

static void InitDefaultsscc_info_HTLC_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_HTLC_default_instance_;
    new (ptr) ::lnrpc::HTLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::HTLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTLC_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HTLC_rpc_2eproto}, {}};

static void InitDefaultsscc_info_HTLCAttempt_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_HTLCAttempt_default_instance_;
    new (ptr) ::lnrpc::HTLCAttempt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::HTLCAttempt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTLCAttempt_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HTLCAttempt_rpc_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,
      &scc_info_Failure_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Hop_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Hop_default_instance_;
    new (ptr) ::lnrpc::Hop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Hop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Hop_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Hop_rpc_2eproto}, {
      &scc_info_MPPRecord_rpc_2eproto.base,
      &scc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Hop_CustomRecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::Hop_CustomRecordsEntry_DoNotUse();
  }
  ::lnrpc::Hop_CustomRecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_HopHint_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_HopHint_default_instance_;
    new (ptr) ::lnrpc::HopHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::HopHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HopHint_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HopHint_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Invoice_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Invoice_default_instance_;
    new (ptr) ::lnrpc::Invoice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Invoice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Invoice_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Invoice_rpc_2eproto}, {
      &scc_info_RouteHint_rpc_2eproto.base,
      &scc_info_InvoiceHTLC_rpc_2eproto.base,
      &scc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Invoice_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::Invoice_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::Invoice_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_InvoiceHTLC_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_InvoiceHTLC_default_instance_;
    new (ptr) ::lnrpc::InvoiceHTLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::InvoiceHTLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InvoiceHTLC_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InvoiceHTLC_rpc_2eproto}, {
      &scc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto.base,
      &scc_info_AMP_rpc_2eproto.base,}};

static void InitDefaultsscc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_InvoiceHTLC_CustomRecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse();
  }
  ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_InvoiceSubscription_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_InvoiceSubscription_default_instance_;
    new (ptr) ::lnrpc::InvoiceSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::InvoiceSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceSubscription_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvoiceSubscription_rpc_2eproto}, {}};

static void InitDefaultsscc_info_KeyDescriptor_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_KeyDescriptor_default_instance_;
    new (ptr) ::lnrpc::KeyDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::KeyDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyDescriptor_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyDescriptor_rpc_2eproto}, {
      &scc_info_KeyLocator_rpc_2eproto.base,}};

static void InitDefaultsscc_info_KeyLocator_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_KeyLocator_default_instance_;
    new (ptr) ::lnrpc::KeyLocator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::KeyLocator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyLocator_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyLocator_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LightningAddress_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_LightningAddress_default_instance_;
    new (ptr) ::lnrpc::LightningAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::LightningAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LightningAddress_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LightningAddress_rpc_2eproto}, {}};

static void InitDefaultsscc_info_LightningNode_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_LightningNode_default_instance_;
    new (ptr) ::lnrpc::LightningNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::LightningNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LightningNode_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LightningNode_rpc_2eproto}, {
      &scc_info_NodeAddress_rpc_2eproto.base,
      &scc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_LightningNode_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::LightningNode_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::LightningNode_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListChannelsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListChannelsRequest_default_instance_;
    new (ptr) ::lnrpc::ListChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListChannelsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListChannelsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListChannelsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListChannelsResponse_default_instance_;
    new (ptr) ::lnrpc::ListChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListChannelsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListChannelsResponse_rpc_2eproto}, {
      &scc_info_Channel_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListInvoiceRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListInvoiceRequest_default_instance_;
    new (ptr) ::lnrpc::ListInvoiceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListInvoiceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListInvoiceRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListInvoiceRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListInvoiceResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListInvoiceResponse_default_instance_;
    new (ptr) ::lnrpc::ListInvoiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListInvoiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListInvoiceResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListInvoiceResponse_rpc_2eproto}, {
      &scc_info_Invoice_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListMacaroonIDsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListMacaroonIDsRequest_default_instance_;
    new (ptr) ::lnrpc::ListMacaroonIDsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListMacaroonIDsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMacaroonIDsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListMacaroonIDsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListMacaroonIDsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListMacaroonIDsResponse_default_instance_;
    new (ptr) ::lnrpc::ListMacaroonIDsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListMacaroonIDsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListMacaroonIDsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListMacaroonIDsResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListPaymentsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPaymentsRequest_default_instance_;
    new (ptr) ::lnrpc::ListPaymentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPaymentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPaymentsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPaymentsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListPaymentsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPaymentsResponse_default_instance_;
    new (ptr) ::lnrpc::ListPaymentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPaymentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPaymentsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPaymentsResponse_rpc_2eproto}, {
      &scc_info_Payment_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListPeersRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPeersRequest_default_instance_;
    new (ptr) ::lnrpc::ListPeersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPeersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPeersRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPeersRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListPeersResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPeersResponse_default_instance_;
    new (ptr) ::lnrpc::ListPeersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPeersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPeersResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPeersResponse_rpc_2eproto}, {
      &scc_info_Peer_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListPermissionsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPermissionsRequest_default_instance_;
    new (ptr) ::lnrpc::ListPermissionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPermissionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPermissionsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPermissionsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListPermissionsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPermissionsResponse_default_instance_;
    new (ptr) ::lnrpc::ListPermissionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListPermissionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPermissionsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPermissionsResponse_rpc_2eproto}, {
      &scc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse();
  }
  ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_MacaroonPermissionList_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ListUnspentRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListUnspentRequest_default_instance_;
    new (ptr) ::lnrpc::ListUnspentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListUnspentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUnspentRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUnspentRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_ListUnspentResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ListUnspentResponse_default_instance_;
    new (ptr) ::lnrpc::ListUnspentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ListUnspentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUnspentResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUnspentResponse_rpc_2eproto}, {
      &scc_info_Utxo_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MPPRecord_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_MPPRecord_default_instance_;
    new (ptr) ::lnrpc::MPPRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::MPPRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MPPRecord_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MPPRecord_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MacaroonId_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_MacaroonId_default_instance_;
    new (ptr) ::lnrpc::MacaroonId();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::MacaroonId::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MacaroonId_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MacaroonId_rpc_2eproto}, {
      &scc_info_Op_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MacaroonPermission_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_MacaroonPermission_default_instance_;
    new (ptr) ::lnrpc::MacaroonPermission();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::MacaroonPermission::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MacaroonPermission_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MacaroonPermission_rpc_2eproto}, {}};

static void InitDefaultsscc_info_MacaroonPermissionList_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_MacaroonPermissionList_default_instance_;
    new (ptr) ::lnrpc::MacaroonPermissionList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::MacaroonPermissionList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MacaroonPermissionList_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MacaroonPermissionList_rpc_2eproto}, {
      &scc_info_MacaroonPermission_rpc_2eproto.base,}};

static void InitDefaultsscc_info_MultiChanBackup_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_MultiChanBackup_default_instance_;
    new (ptr) ::lnrpc::MultiChanBackup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::MultiChanBackup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MultiChanBackup_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MultiChanBackup_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_NetworkInfo_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NetworkInfo_default_instance_;
    new (ptr) ::lnrpc::NetworkInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NetworkInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInfo_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkInfo_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NetworkInfoRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NetworkInfoRequest_default_instance_;
    new (ptr) ::lnrpc::NetworkInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NetworkInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInfoRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkInfoRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NewAddressRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NewAddressRequest_default_instance_;
    new (ptr) ::lnrpc::NewAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NewAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewAddressRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewAddressRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NewAddressResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NewAddressResponse_default_instance_;
    new (ptr) ::lnrpc::NewAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NewAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewAddressResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewAddressResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NodeAddress_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeAddress_default_instance_;
    new (ptr) ::lnrpc::NodeAddress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeAddress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeAddress_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeAddress_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NodeInfo_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeInfo_default_instance_;
    new (ptr) ::lnrpc::NodeInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_NodeInfo_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_NodeInfo_rpc_2eproto}, {
      &scc_info_LightningNode_rpc_2eproto.base,
      &scc_info_ChannelEdge_rpc_2eproto.base,}};

static void InitDefaultsscc_info_NodeInfoRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeInfoRequest_default_instance_;
    new (ptr) ::lnrpc::NodeInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeInfoRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeInfoRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NodeMetricsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeMetricsRequest_default_instance_;
    new (ptr) ::lnrpc::NodeMetricsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeMetricsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodeMetricsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodeMetricsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NodeMetricsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeMetricsResponse_default_instance_;
    new (ptr) ::lnrpc::NodeMetricsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeMetricsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeMetricsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeMetricsResponse_rpc_2eproto}, {
      &scc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse();
  }
  ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_FloatMetric_rpc_2eproto.base,}};

static void InitDefaultsscc_info_NodePair_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodePair_default_instance_;
    new (ptr) ::lnrpc::NodePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NodePair_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NodePair_rpc_2eproto}, {}};

static void InitDefaultsscc_info_NodeUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeUpdate_default_instance_;
    new (ptr) ::lnrpc::NodeUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::NodeUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeUpdate_rpc_2eproto}, {
      &scc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_NodeUpdate_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Op_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Op_default_instance_;
    new (ptr) ::lnrpc::Op();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Op::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Op_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Op_rpc_2eproto}, {}};

static void InitDefaultsscc_info_OpenChannelRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_OpenChannelRequest_default_instance_;
    new (ptr) ::lnrpc::OpenChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::OpenChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpenChannelRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpenChannelRequest_rpc_2eproto}, {
      &scc_info_FundingShim_rpc_2eproto.base,}};

static void InitDefaultsscc_info_OpenStatusUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_OpenStatusUpdate_default_instance_;
    new (ptr) ::lnrpc::OpenStatusUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::OpenStatusUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OpenStatusUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_OpenStatusUpdate_rpc_2eproto}, {
      &scc_info_PendingUpdate_rpc_2eproto.base,
      &scc_info_ChannelOpenUpdate_rpc_2eproto.base,
      &scc_info_ReadyForPsbtFunding_rpc_2eproto.base,}};

static void InitDefaultsscc_info_OutPoint_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_OutPoint_default_instance_;
    new (ptr) ::lnrpc::OutPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::OutPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OutPoint_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OutPoint_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PayReq_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PayReq_default_instance_;
    new (ptr) ::lnrpc::PayReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PayReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PayReq_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PayReq_rpc_2eproto}, {
      &scc_info_RouteHint_rpc_2eproto.base,
      &scc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PayReq_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::PayReq_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::PayReq_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PayReqString_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PayReqString_default_instance_;
    new (ptr) ::lnrpc::PayReqString();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PayReqString::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PayReqString_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PayReqString_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Payment_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Payment_default_instance_;
    new (ptr) ::lnrpc::Payment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Payment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Payment_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Payment_rpc_2eproto}, {
      &scc_info_HTLCAttempt_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PaymentHash_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PaymentHash_default_instance_;
    new (ptr) ::lnrpc::PaymentHash();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PaymentHash::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentHash_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentHash_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Peer_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Peer_default_instance_;
    new (ptr) ::lnrpc::Peer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Peer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Peer_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Peer_rpc_2eproto}, {
      &scc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto.base,
      &scc_info_TimestampedError_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Peer_FeaturesEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::Peer_FeaturesEntry_DoNotUse();
  }
  ::lnrpc::Peer_FeaturesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_Feature_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PeerEvent_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PeerEvent_default_instance_;
    new (ptr) ::lnrpc::PeerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PeerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerEvent_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerEvent_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PeerEventSubscription_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PeerEventSubscription_default_instance_;
    new (ptr) ::lnrpc::PeerEventSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PeerEventSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeerEventSubscription_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeerEventSubscription_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PendingChannelsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsRequest_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingChannelsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingChannelsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PendingChannelsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PendingChannelsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PendingChannelsResponse_rpc_2eproto}, {
      &scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto.base,
      &scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto.base,
      &scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto.base,
      &scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_ClosedChannel_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_ClosedChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_ClosedChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto}, {
      &scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PendingChannelsResponse_Commitments_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_Commitments_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_Commitments();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_Commitments::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingChannelsResponse_Commitments_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingChannelsResponse_Commitments_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_ForceClosedChannel_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_ForceClosedChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto}, {
      &scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base,
      &scc_info_PendingHTLC_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_PendingChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_PendingChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_PendingOpenChannel_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_PendingOpenChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_PendingOpenChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto}, {
      &scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingChannelsResponse_WaitingCloseChannel_default_instance_;
    new (ptr) ::lnrpc::PendingChannelsResponse_WaitingCloseChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingChannelsResponse_WaitingCloseChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto}, {
      &scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base,
      &scc_info_PendingChannelsResponse_Commitments_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PendingHTLC_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingHTLC_default_instance_;
    new (ptr) ::lnrpc::PendingHTLC();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingHTLC::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingHTLC_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingHTLC_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PendingUpdate_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PendingUpdate_default_instance_;
    new (ptr) ::lnrpc::PendingUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PendingUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PendingUpdate_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PendingUpdate_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PolicyUpdateRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PolicyUpdateRequest_default_instance_;
    new (ptr) ::lnrpc::PolicyUpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PolicyUpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PolicyUpdateRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PolicyUpdateRequest_rpc_2eproto}, {
      &scc_info_ChannelPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_PolicyUpdateResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PolicyUpdateResponse_default_instance_;
    new (ptr) ::lnrpc::PolicyUpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PolicyUpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyUpdateResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolicyUpdateResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_PsbtShim_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_PsbtShim_default_instance_;
    new (ptr) ::lnrpc::PsbtShim();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::PsbtShim::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PsbtShim_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PsbtShim_rpc_2eproto}, {}};

static void InitDefaultsscc_info_QueryRoutesRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_QueryRoutesRequest_default_instance_;
    new (ptr) ::lnrpc::QueryRoutesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::QueryRoutesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_QueryRoutesRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_QueryRoutesRequest_rpc_2eproto}, {
      &scc_info_FeeLimit_rpc_2eproto.base,
      &scc_info_EdgeLocator_rpc_2eproto.base,
      &scc_info_NodePair_rpc_2eproto.base,
      &scc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto.base,
      &scc_info_RouteHint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse();
  }
  ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_QueryRoutesResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_QueryRoutesResponse_default_instance_;
    new (ptr) ::lnrpc::QueryRoutesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::QueryRoutesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryRoutesResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryRoutesResponse_rpc_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ReadyForPsbtFunding_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_ReadyForPsbtFunding_default_instance_;
    new (ptr) ::lnrpc::ReadyForPsbtFunding();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::ReadyForPsbtFunding::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReadyForPsbtFunding_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReadyForPsbtFunding_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Resolution_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Resolution_default_instance_;
    new (ptr) ::lnrpc::Resolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Resolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Resolution_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Resolution_rpc_2eproto}, {
      &scc_info_OutPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_RestoreBackupResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_RestoreBackupResponse_default_instance_;
    new (ptr) ::lnrpc::RestoreBackupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::RestoreBackupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RestoreBackupResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RestoreBackupResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_RestoreChanBackupRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_RestoreChanBackupRequest_default_instance_;
    new (ptr) ::lnrpc::RestoreChanBackupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::RestoreChanBackupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RestoreChanBackupRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RestoreChanBackupRequest_rpc_2eproto}, {
      &scc_info_ChannelBackups_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Route_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Route_default_instance_;
    new (ptr) ::lnrpc::Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Route_rpc_2eproto}, {
      &scc_info_Hop_rpc_2eproto.base,}};

static void InitDefaultsscc_info_RouteHint_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_RouteHint_default_instance_;
    new (ptr) ::lnrpc::RouteHint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::RouteHint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteHint_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RouteHint_rpc_2eproto}, {
      &scc_info_HopHint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_RoutingPolicy_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_RoutingPolicy_default_instance_;
    new (ptr) ::lnrpc::RoutingPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::RoutingPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RoutingPolicy_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RoutingPolicy_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendCoinsRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendCoinsRequest_default_instance_;
    new (ptr) ::lnrpc::SendCoinsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendCoinsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendCoinsRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendCoinsRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendCoinsResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendCoinsResponse_default_instance_;
    new (ptr) ::lnrpc::SendCoinsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendCoinsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendCoinsResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendCoinsResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendManyRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendManyRequest_default_instance_;
    new (ptr) ::lnrpc::SendManyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendManyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendManyRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendManyRequest_rpc_2eproto}, {
      &scc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendManyRequest_AddrToAmountEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse();
  }
  ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendManyResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendManyResponse_default_instance_;
    new (ptr) ::lnrpc::SendManyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendManyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendManyResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendManyResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendRequest_default_instance_;
    new (ptr) ::lnrpc::SendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendRequest_rpc_2eproto}, {
      &scc_info_FeeLimit_rpc_2eproto.base,
      &scc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse();
  }
  ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SendResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendResponse_default_instance_;
    new (ptr) ::lnrpc::SendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendResponse_rpc_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SendToRouteRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SendToRouteRequest_default_instance_;
    new (ptr) ::lnrpc::SendToRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SendToRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendToRouteRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendToRouteRequest_rpc_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SignMessageRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SignMessageRequest_default_instance_;
    new (ptr) ::lnrpc::SignMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SignMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignMessageRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignMessageRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_SignMessageResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_SignMessageResponse_default_instance_;
    new (ptr) ::lnrpc::SignMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::SignMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignMessageResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignMessageResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_StopRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_StopRequest_default_instance_;
    new (ptr) ::lnrpc::StopRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::StopRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_StopResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_StopResponse_default_instance_;
    new (ptr) ::lnrpc::StopResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::StopResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_TimestampedError_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_TimestampedError_default_instance_;
    new (ptr) ::lnrpc::TimestampedError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::TimestampedError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampedError_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimestampedError_rpc_2eproto}, {}};

static void InitDefaultsscc_info_Transaction_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Transaction_default_instance_;
    new (ptr) ::lnrpc::Transaction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Transaction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Transaction_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Transaction_rpc_2eproto}, {}};

static void InitDefaultsscc_info_TransactionDetails_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_TransactionDetails_default_instance_;
    new (ptr) ::lnrpc::TransactionDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::TransactionDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TransactionDetails_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TransactionDetails_rpc_2eproto}, {
      &scc_info_Transaction_rpc_2eproto.base,}};

static void InitDefaultsscc_info_Utxo_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_Utxo_default_instance_;
    new (ptr) ::lnrpc::Utxo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::Utxo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Utxo_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Utxo_rpc_2eproto}, {
      &scc_info_OutPoint_rpc_2eproto.base,}};

static void InitDefaultsscc_info_VerifyChanBackupResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_VerifyChanBackupResponse_default_instance_;
    new (ptr) ::lnrpc::VerifyChanBackupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::VerifyChanBackupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyChanBackupResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyChanBackupResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_VerifyMessageRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_VerifyMessageRequest_default_instance_;
    new (ptr) ::lnrpc::VerifyMessageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::VerifyMessageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyMessageRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyMessageRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_VerifyMessageResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_VerifyMessageResponse_default_instance_;
    new (ptr) ::lnrpc::VerifyMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::VerifyMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VerifyMessageResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VerifyMessageResponse_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WalletAccountBalance_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_WalletAccountBalance_default_instance_;
    new (ptr) ::lnrpc::WalletAccountBalance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::WalletAccountBalance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletAccountBalance_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WalletAccountBalance_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WalletBalanceRequest_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_WalletBalanceRequest_default_instance_;
    new (ptr) ::lnrpc::WalletBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::WalletBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WalletBalanceRequest_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WalletBalanceRequest_rpc_2eproto}, {}};

static void InitDefaultsscc_info_WalletBalanceResponse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_WalletBalanceResponse_default_instance_;
    new (ptr) ::lnrpc::WalletBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lnrpc::WalletBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletBalanceResponse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WalletBalanceResponse_rpc_2eproto}, {
      &scc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto.base,}};

static void InitDefaultsscc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lnrpc::_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_default_instance_;
    new (ptr) ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse();
  }
  ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto}, {
      &scc_info_WalletAccountBalance_rpc_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rpc_2eproto[185];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rpc_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rpc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, address_type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, amount_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, pk_script_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, outpoint_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Utxo, confirmations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, tx_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, num_confirmations_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, block_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, block_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, time_stamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, total_fees_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, dest_addresses_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, raw_tx_hex_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Transaction, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetTransactionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetTransactionsRequest, start_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetTransactionsRequest, end_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetTransactionsRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::TransactionDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::TransactionDetails, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeLimit, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeLimit, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::FeeLimitDefaultTypeInternal, fixed_),
  offsetof(::lnrpc::FeeLimitDefaultTypeInternal, fixed_msat_),
  offsetof(::lnrpc::FeeLimitDefaultTypeInternal, percent_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeLimit, limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, dest_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, dest_string_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, amt_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, payment_hash_string_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, payment_request_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, final_cltv_delta_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, fee_limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, outgoing_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, last_hop_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, cltv_limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, dest_custom_records_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, allow_self_payment_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, dest_features_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendRequest, payment_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendResponse, payment_error_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendResponse, payment_preimage_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendResponse, payment_route_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendResponse, payment_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendToRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendToRouteRequest, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendToRouteRequest, payment_hash_string_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendToRouteRequest, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, node_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, chain_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, funding_amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, push_amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, dust_limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, max_value_in_flight_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, channel_reserve_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, min_htlc_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, fee_per_kw_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, csv_delay_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, max_accepted_htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptRequest, channel_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, error_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, upfront_shutdown_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, csv_delay_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, in_flight_max_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, max_htlc_count_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, min_htlc_in_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelAcceptResponse, min_accept_depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelPoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::ChannelPointDefaultTypeInternal, funding_txid_bytes_),
  offsetof(::lnrpc::ChannelPointDefaultTypeInternal, funding_txid_str_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelPoint, output_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelPoint, funding_txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OutPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OutPoint, txid_bytes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OutPoint, txid_str_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OutPoint, output_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningAddress, pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningAddress, host_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest, addrtoamount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeRequest, target_conf_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeResponse, fee_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeResponse, feerate_sat_per_byte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EstimateFeeResponse, sat_per_vbyte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, addrtoamount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, target_conf_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, sat_per_vbyte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, sat_per_byte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, label_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, min_confs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyRequest, spend_unconfirmed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendManyResponse, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, target_conf_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, sat_per_vbyte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, sat_per_byte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, send_all_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, label_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, min_confs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsRequest, spend_unconfirmed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SendCoinsResponse, txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentRequest, min_confs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentRequest, max_confs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListUnspentResponse, utxos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NewAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NewAddressRequest, type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NewAddressRequest, account_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NewAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NewAddressResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SignMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SignMessageRequest, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SignMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::SignMessageResponse, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageRequest, msg_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageRequest, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageResponse, valid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyMessageResponse, pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConnectPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConnectPeerRequest, addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConnectPeerRequest, perm_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConnectPeerRequest, timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConnectPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DisconnectPeerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DisconnectPeerRequest, pub_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DisconnectPeerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, incoming_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, hash_lock_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, expiration_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, htlc_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, forwarding_channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLC, forwarding_htlc_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, csv_delay_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, chan_reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, dust_limit_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, max_pending_amt_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, min_htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelConstraints, max_accepted_htlcs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, active_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, remote_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, local_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, remote_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, commit_fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, commit_weight_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, fee_per_kw_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, unsettled_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, total_satoshis_sent_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, total_satoshis_received_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, num_updates_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, pending_htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, csv_delay_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, private__),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, initiator_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, chan_status_flags_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, local_chan_reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, remote_chan_reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, static_remote_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, commitment_type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, lifetime_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, uptime_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, close_address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, push_amount_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, thaw_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, local_constraints_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Channel, remote_constraints_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, active_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, inactive_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, public_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, private_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsRequest, peer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListChannelsResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, chain_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, closing_tx_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, remote_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, close_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, settled_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, time_locked_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, close_type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, open_initiator_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, close_initiator_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseSummary, resolutions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, resolution_type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, outcome_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, outpoint_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, amount_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Resolution, sweep_txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, cooperative_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, local_force_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, remote_force_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, breach_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, funding_canceled_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsRequest, abandoned_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelsResponse, channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, bytes_sent_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, bytes_recv_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, sat_sent_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, sat_recv_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, inbound_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, ping_time_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, sync_type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, features_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, errors_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, flap_count_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Peer, last_flap_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::TimestampedError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::TimestampedError, timestamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::TimestampedError, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPeersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPeersRequest, latest_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPeersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPeersResponse, peers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PeerEventSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PeerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PeerEvent, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PeerEvent, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, version_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, commit_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, identity_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, alias_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, color_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, num_pending_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, num_active_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, num_inactive_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, num_peers_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, block_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, block_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, best_header_timestamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, synced_to_chain_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, synced_to_graph_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, testnet_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, chains_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, uris_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetInfoResponse, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetRecoveryInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetRecoveryInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetRecoveryInfoResponse, recovery_mode_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetRecoveryInfoResponse, recovery_finished_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GetRecoveryInfoResponse, progress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Chain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Chain, chain_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Chain, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConfirmationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConfirmationUpdate, block_sha_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConfirmationUpdate, block_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ConfirmationUpdate, num_confs_left_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelOpenUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelOpenUpdate, channel_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseUpdate, closing_txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelCloseUpdate, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, force_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, target_conf_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, sat_per_byte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, delivery_address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseChannelRequest, sat_per_vbyte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseStatusUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::CloseStatusUpdateDefaultTypeInternal, close_pending_),
  offsetof(::lnrpc::CloseStatusUpdateDefaultTypeInternal, chan_close_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::CloseStatusUpdate, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingUpdate, txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingUpdate, output_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ReadyForPsbtFunding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ReadyForPsbtFunding, funding_address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ReadyForPsbtFunding, funding_amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ReadyForPsbtFunding, psbt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, sat_per_vbyte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, node_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, node_pubkey_string_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, local_funding_amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, push_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, target_conf_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, sat_per_byte_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, private__),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, min_htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, remote_csv_delay_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, min_confs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, spend_unconfirmed_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, close_address_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, funding_shim_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, remote_max_value_in_flight_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, remote_max_htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, max_local_csv_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenChannelRequest, subtract_fees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenStatusUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::OpenStatusUpdateDefaultTypeInternal, chan_pending_),
  offsetof(::lnrpc::OpenStatusUpdateDefaultTypeInternal, chan_open_),
  offsetof(::lnrpc::OpenStatusUpdateDefaultTypeInternal, psbt_fund_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenStatusUpdate, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::OpenStatusUpdate, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyLocator, key_family_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyLocator, key_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyDescriptor, raw_key_bytes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::KeyDescriptor, key_loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, chan_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, local_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, remote_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanPointShim, thaw_height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PsbtShim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PsbtShim, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PsbtShim, base_psbt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PsbtShim, no_publish_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingShim, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingShim, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::FundingShimDefaultTypeInternal, chan_point_shim_),
  offsetof(::lnrpc::FundingShimDefaultTypeInternal, psbt_shim_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingShim, shim_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingShimCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingShimCancel, pending_chan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtVerify, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtVerify, funded_psbt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtVerify, pending_chan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtFinalize, signed_psbt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtFinalize, pending_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingPsbtFinalize, final_raw_tx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingTransitionMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingTransitionMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::FundingTransitionMsgDefaultTypeInternal, shim_register_),
  offsetof(::lnrpc::FundingTransitionMsgDefaultTypeInternal, shim_cancel_),
  offsetof(::lnrpc::FundingTransitionMsgDefaultTypeInternal, psbt_verify_),
  offsetof(::lnrpc::FundingTransitionMsgDefaultTypeInternal, psbt_finalize_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingTransitionMsg, trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FundingStateStepResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, incoming_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, amount_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, outpoint_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, maturity_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, blocks_til_maturity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingHTLC, stage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, remote_node_pub_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, local_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, remote_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, local_chan_reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, remote_chan_reserve_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, initiator_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingChannel, commitment_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, confirmation_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, commit_fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, commit_weight_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_PendingOpenChannel, fee_per_kw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_WaitingCloseChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_WaitingCloseChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_WaitingCloseChannel, limbo_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_WaitingCloseChannel, commitments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, local_txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, remote_txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, remote_pending_txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, local_commit_fee_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, remote_commit_fee_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_Commitments, remote_pending_commit_fee_sat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ClosedChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ClosedChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ClosedChannel, closing_txid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, closing_txid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, limbo_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, maturity_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, blocks_til_maturity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, recovered_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, pending_htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse_ForceClosedChannel, anchor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, total_limbo_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, pending_open_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, pending_closing_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, pending_force_closing_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PendingChannelsResponse, waiting_close_channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEventSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEventUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEventUpdate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::ChannelEventUpdateDefaultTypeInternal, open_channel_),
  offsetof(::lnrpc::ChannelEventUpdateDefaultTypeInternal, closed_channel_),
  offsetof(::lnrpc::ChannelEventUpdateDefaultTypeInternal, active_channel_),
  offsetof(::lnrpc::ChannelEventUpdateDefaultTypeInternal, inactive_channel_),
  offsetof(::lnrpc::ChannelEventUpdateDefaultTypeInternal, pending_open_channel_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEventUpdate, type_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEventUpdate, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletAccountBalance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletAccountBalance, confirmed_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletAccountBalance, unconfirmed_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse, total_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse, confirmed_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse, unconfirmed_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::WalletBalanceResponse, account_balance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Amount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Amount, sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Amount, msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, pending_open_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, local_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, remote_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, unsettled_local_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, unsettled_remote_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, pending_open_local_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBalanceResponse, pending_open_remote_balance_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, amt_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, final_cltv_delta_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, fee_limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, ignored_nodes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, ignored_edges_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, source_pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, use_mission_control_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, ignored_pairs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, cltv_limit_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, dest_custom_records_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, outgoing_chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, last_hop_pubkey_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, route_hints_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesRequest, dest_features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodePair, from_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodePair, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EdgeLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::EdgeLocator, channel_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::EdgeLocator, direction_reverse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesResponse, routes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::QueryRoutesResponse, success_prob_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop_CustomRecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop_CustomRecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop_CustomRecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop_CustomRecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, chan_capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, amt_to_forward_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, amt_to_forward_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, fee_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, tlv_payload_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, mpp_record_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Hop, custom_records_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MPPRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MPPRecord, payment_addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::MPPRecord, total_amt_msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, total_time_lock_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, total_fees_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, total_amt_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, hops_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, total_fees_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Route, total_amt_msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfoRequest, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfoRequest, include_channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfo, node_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfo, num_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfo, total_capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeInfo, channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, last_update_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, pub_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, alias_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, addresses_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, color_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::LightningNode, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeAddress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeAddress, network_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeAddress, addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, time_lock_delta_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, min_htlc_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, fee_base_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, fee_rate_milli_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, disabled_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, max_htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RoutingPolicy, last_update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, channel_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, chan_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, last_update_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, node1_pub_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, node2_pub_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, node1_policy_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdge, node2_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelGraphRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelGraphRequest, include_unannounced_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelGraph, nodes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelGraph, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsRequest, types_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeMetricsResponse, betweenness_centrality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FloatMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FloatMetric, value_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FloatMetric, normalized_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanInfoRequest, chan_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, graph_diameter_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, avg_out_degree_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, max_out_degree_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, num_nodes_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, num_channels_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, total_network_capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, avg_channel_size_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, min_channel_size_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, max_channel_size_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, median_channel_size_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NetworkInfo, num_zombie_chans_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GraphTopologySubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GraphTopologyUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::GraphTopologyUpdate, node_updates_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GraphTopologyUpdate, channel_updates_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::GraphTopologyUpdate, closed_chans_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, addresses_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, identity_key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, global_features_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, alias_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, color_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::NodeUpdate, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, chan_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, routing_policy_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, advertising_node_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelEdgeUpdate, connecting_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelUpdate, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelUpdate, capacity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelUpdate, closed_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ClosedChannelUpdate, chan_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, node_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, fee_base_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, fee_proportional_millionths_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HopHint, cltv_expiry_delta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RouteHint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RouteHint, hop_hints_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, memo_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, r_preimage_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, r_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, value_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, value_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, settled_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, creation_date_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, settle_date_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, payment_request_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, description_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, fallback_addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, cltv_expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, route_hints_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, private__),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, add_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, settle_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, amt_paid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, amt_paid_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, amt_paid_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, state_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, features_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, is_keysend_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Invoice, payment_addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, htlc_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, amt_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, accept_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, accept_time_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, resolve_time_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, expiry_height_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, state_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, custom_records_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, mpp_total_amt_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceHTLC, amp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, root_share_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, set_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, child_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AMP, preimage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AddInvoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AddInvoiceResponse, r_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AddInvoiceResponse, payment_request_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AddInvoiceResponse, add_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AddInvoiceResponse, payment_addr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PaymentHash, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PaymentHash, r_hash_str_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PaymentHash, r_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceRequest, pending_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceRequest, index_offset_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceRequest, num_max_invoices_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceRequest, reversed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceResponse, invoices_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceResponse, last_index_offset_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListInvoiceResponse, first_index_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceSubscription, add_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::InvoiceSubscription, settle_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, value_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, creation_date_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, payment_preimage_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, value_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, value_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, payment_request_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, status_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, fee_sat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, fee_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, creation_time_ns_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, htlcs_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, payment_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Payment, failure_reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, attempt_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, status_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, route_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, attempt_time_ns_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, resolve_time_ns_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, failure_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::HTLCAttempt, preimage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsRequest, include_incomplete_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsRequest, index_offset_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsRequest, max_payments_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsRequest, reversed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsResponse, payments_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsResponse, first_index_offset_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPaymentsResponse, last_index_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteAllPaymentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteAllPaymentsRequest, failed_payments_only_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteAllPaymentsRequest, failed_htlcs_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteAllPaymentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AbandonChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AbandonChannelRequest, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::AbandonChannelRequest, pending_funding_shim_only_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::AbandonChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DebugLevelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DebugLevelRequest, show_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::DebugLevelRequest, level_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DebugLevelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DebugLevelResponse, sub_systems_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReqString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReqString, pay_req_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq_FeaturesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq_FeaturesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq_FeaturesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq_FeaturesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, destination_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, num_satoshis_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, timestamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, description_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, description_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, fallback_addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, cltv_expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, route_hints_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, payment_addr_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, num_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PayReq, features_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Feature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Feature, name_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Feature, is_required_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Feature, is_known_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, channel_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, base_fee_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, fee_per_mil_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelFeeReport, fee_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportResponse, channel_fees_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportResponse, day_fee_sum_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportResponse, week_fee_sum_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::FeeReportResponse, month_fee_sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::PolicyUpdateRequestDefaultTypeInternal, global_),
  offsetof(::lnrpc::PolicyUpdateRequestDefaultTypeInternal, chan_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, base_fee_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, fee_rate_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, time_lock_delta_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, max_htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, min_htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, min_htlc_msat_specified_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateRequest, scope_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::PolicyUpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryRequest, index_offset_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryRequest, num_max_events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, timestamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, chan_id_in_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, chan_id_out_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, amt_in_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, amt_out_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, fee_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, amt_in_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, amt_out_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingEvent, timestamp_ns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryResponse, forwarding_events_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ForwardingHistoryResponse, last_offset_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ExportChannelBackupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ExportChannelBackupRequest, chan_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackup, chan_point_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackup, chan_backup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MultiChanBackup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MultiChanBackup, chan_points_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::MultiChanBackup, multi_chan_backup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanBackupExportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanBackupSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanBackupSnapshot, single_chan_backups_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChanBackupSnapshot, multi_chan_backup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackups, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackups, chan_backups_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RestoreChanBackupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RestoreChanBackupRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::lnrpc::RestoreChanBackupRequestDefaultTypeInternal, chan_backups_),
  offsetof(::lnrpc::RestoreChanBackupRequestDefaultTypeInternal, multi_chan_backup_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::RestoreChanBackupRequest, backup_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::RestoreBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelBackupSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::VerifyChanBackupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonPermission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonPermission, entity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonPermission, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::BakeMacaroonRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::BakeMacaroonRequest, permissions_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::BakeMacaroonRequest, root_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::BakeMacaroonResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::BakeMacaroonResponse, macaroon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListMacaroonIDsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListMacaroonIDsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListMacaroonIDsResponse, root_key_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteMacaroonIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteMacaroonIDRequest, root_key_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteMacaroonIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::DeleteMacaroonIDResponse, deleted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonPermissionList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonPermissionList, permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ListPermissionsResponse, method_permissions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, code_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, channel_update_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, htlc_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, onion_sha_256_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, cltv_expiry_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, flags_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, failure_source_index_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Failure, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, signature_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, chain_hash_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, chan_id_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, message_flags_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, channel_flags_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, time_lock_delta_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, htlc_minimum_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, base_fee_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, fee_rate_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, htlc_maximum_msat_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::ChannelUpdate, extra_opaque_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonId, nonce_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonId, storageid_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::MacaroonId, ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Op, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lnrpc::Op, entity_),
  PROTOBUF_FIELD_OFFSET(::lnrpc::Op, actions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lnrpc::Utxo)},
  { 11, -1, sizeof(::lnrpc::Transaction)},
  { 26, -1, sizeof(::lnrpc::GetTransactionsRequest)},
  { 34, -1, sizeof(::lnrpc::TransactionDetails)},
  { 40, -1, sizeof(::lnrpc::FeeLimit)},
  { 49, 56, sizeof(::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse)},
  { 58, -1, sizeof(::lnrpc::SendRequest)},
  { 79, -1, sizeof(::lnrpc::SendResponse)},
  { 88, -1, sizeof(::lnrpc::SendToRouteRequest)},
  { 96, -1, sizeof(::lnrpc::ChannelAcceptRequest)},
  { 114, -1, sizeof(::lnrpc::ChannelAcceptResponse)},
  { 129, -1, sizeof(::lnrpc::ChannelPoint)},
  { 138, -1, sizeof(::lnrpc::OutPoint)},
  { 146, -1, sizeof(::lnrpc::LightningAddress)},
  { 153, 160, sizeof(::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse)},
  { 162, -1, sizeof(::lnrpc::EstimateFeeRequest)},
  { 169, -1, sizeof(::lnrpc::EstimateFeeResponse)},
  { 177, 184, sizeof(::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse)},
  { 186, -1, sizeof(::lnrpc::SendManyRequest)},
  { 198, -1, sizeof(::lnrpc::SendManyResponse)},
  { 204, -1, sizeof(::lnrpc::SendCoinsRequest)},
  { 218, -1, sizeof(::lnrpc::SendCoinsResponse)},
  { 224, -1, sizeof(::lnrpc::ListUnspentRequest)},
  { 232, -1, sizeof(::lnrpc::ListUnspentResponse)},
  { 238, -1, sizeof(::lnrpc::NewAddressRequest)},
  { 245, -1, sizeof(::lnrpc::NewAddressResponse)},
  { 251, -1, sizeof(::lnrpc::SignMessageRequest)},
  { 257, -1, sizeof(::lnrpc::SignMessageResponse)},
  { 263, -1, sizeof(::lnrpc::VerifyMessageRequest)},
  { 270, -1, sizeof(::lnrpc::VerifyMessageResponse)},
  { 277, -1, sizeof(::lnrpc::ConnectPeerRequest)},
  { 285, -1, sizeof(::lnrpc::ConnectPeerResponse)},
  { 290, -1, sizeof(::lnrpc::DisconnectPeerRequest)},
  { 296, -1, sizeof(::lnrpc::DisconnectPeerResponse)},
  { 301, -1, sizeof(::lnrpc::HTLC)},
  { 313, -1, sizeof(::lnrpc::ChannelConstraints)},
  { 324, -1, sizeof(::lnrpc::Channel)},
  { 359, -1, sizeof(::lnrpc::ListChannelsRequest)},
  { 369, -1, sizeof(::lnrpc::ListChannelsResponse)},
  { 375, -1, sizeof(::lnrpc::ChannelCloseSummary)},
  { 393, -1, sizeof(::lnrpc::Resolution)},
  { 403, -1, sizeof(::lnrpc::ClosedChannelsRequest)},
  { 414, -1, sizeof(::lnrpc::ClosedChannelsResponse)},
  { 420, 427, sizeof(::lnrpc::Peer_FeaturesEntry_DoNotUse)},
  { 429, -1, sizeof(::lnrpc::Peer)},
  { 447, -1, sizeof(::lnrpc::TimestampedError)},
  { 454, -1, sizeof(::lnrpc::ListPeersRequest)},
  { 460, -1, sizeof(::lnrpc::ListPeersResponse)},
  { 466, -1, sizeof(::lnrpc::PeerEventSubscription)},
  { 471, -1, sizeof(::lnrpc::PeerEvent)},
  { 478, -1, sizeof(::lnrpc::GetInfoRequest)},
  { 483, 490, sizeof(::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse)},
  { 492, -1, sizeof(::lnrpc::GetInfoResponse)},
  { 515, -1, sizeof(::lnrpc::GetRecoveryInfoRequest)},
  { 520, -1, sizeof(::lnrpc::GetRecoveryInfoResponse)},
  { 528, -1, sizeof(::lnrpc::Chain)},
  { 535, -1, sizeof(::lnrpc::ConfirmationUpdate)},
  { 543, -1, sizeof(::lnrpc::ChannelOpenUpdate)},
  { 549, -1, sizeof(::lnrpc::ChannelCloseUpdate)},
  { 556, -1, sizeof(::lnrpc::CloseChannelRequest)},
  { 567, -1, sizeof(::lnrpc::CloseStatusUpdate)},
  { 575, -1, sizeof(::lnrpc::PendingUpdate)},
  { 582, -1, sizeof(::lnrpc::ReadyForPsbtFunding)},
  { 590, -1, sizeof(::lnrpc::OpenChannelRequest)},
  { 613, -1, sizeof(::lnrpc::OpenStatusUpdate)},
  { 623, -1, sizeof(::lnrpc::KeyLocator)},
  { 630, -1, sizeof(::lnrpc::KeyDescriptor)},
  { 637, -1, sizeof(::lnrpc::ChanPointShim)},
  { 648, -1, sizeof(::lnrpc::PsbtShim)},
  { 656, -1, sizeof(::lnrpc::FundingShim)},
  { 664, -1, sizeof(::lnrpc::FundingShimCancel)},
  { 670, -1, sizeof(::lnrpc::FundingPsbtVerify)},
  { 677, -1, sizeof(::lnrpc::FundingPsbtFinalize)},
  { 685, -1, sizeof(::lnrpc::FundingTransitionMsg)},
  { 695, -1, sizeof(::lnrpc::FundingStateStepResp)},
  { 700, -1, sizeof(::lnrpc::PendingHTLC)},
  { 711, -1, sizeof(::lnrpc::PendingChannelsRequest)},
  { 716, -1, sizeof(::lnrpc::PendingChannelsResponse_PendingChannel)},
  { 730, -1, sizeof(::lnrpc::PendingChannelsResponse_PendingOpenChannel)},
  { 740, -1, sizeof(::lnrpc::PendingChannelsResponse_WaitingCloseChannel)},
  { 748, -1, sizeof(::lnrpc::PendingChannelsResponse_Commitments)},
  { 759, -1, sizeof(::lnrpc::PendingChannelsResponse_ClosedChannel)},
  { 766, -1, sizeof(::lnrpc::PendingChannelsResponse_ForceClosedChannel)},
  { 779, -1, sizeof(::lnrpc::PendingChannelsResponse)},
  { 789, -1, sizeof(::lnrpc::ChannelEventSubscription)},
  { 794, -1, sizeof(::lnrpc::ChannelEventUpdate)},
  { 806, -1, sizeof(::lnrpc::WalletAccountBalance)},
  { 813, -1, sizeof(::lnrpc::WalletBalanceRequest)},
  { 818, 825, sizeof(::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse)},
  { 827, -1, sizeof(::lnrpc::WalletBalanceResponse)},
  { 836, -1, sizeof(::lnrpc::Amount)},
  { 843, -1, sizeof(::lnrpc::ChannelBalanceRequest)},
  { 848, -1, sizeof(::lnrpc::ChannelBalanceResponse)},
  { 861, 868, sizeof(::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse)},
  { 870, -1, sizeof(::lnrpc::QueryRoutesRequest)},
  { 891, -1, sizeof(::lnrpc::NodePair)},
  { 898, -1, sizeof(::lnrpc::EdgeLocator)},
  { 905, -1, sizeof(::lnrpc::QueryRoutesResponse)},
  { 912, 919, sizeof(::lnrpc::Hop_CustomRecordsEntry_DoNotUse)},
  { 921, -1, sizeof(::lnrpc::Hop)},
  { 937, -1, sizeof(::lnrpc::MPPRecord)},
  { 944, -1, sizeof(::lnrpc::Route)},
  { 955, -1, sizeof(::lnrpc::NodeInfoRequest)},
  { 962, -1, sizeof(::lnrpc::NodeInfo)},
  { 971, 978, sizeof(::lnrpc::LightningNode_FeaturesEntry_DoNotUse)},
  { 980, -1, sizeof(::lnrpc::LightningNode)},
  { 991, -1, sizeof(::lnrpc::NodeAddress)},
  { 998, -1, sizeof(::lnrpc::RoutingPolicy)},
  { 1010, -1, sizeof(::lnrpc::ChannelEdge)},
  { 1023, -1, sizeof(::lnrpc::ChannelGraphRequest)},
  { 1029, -1, sizeof(::lnrpc::ChannelGraph)},
  { 1036, -1, sizeof(::lnrpc::NodeMetricsRequest)},
  { 1042, 1049, sizeof(::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse)},
  { 1051, -1, sizeof(::lnrpc::NodeMetricsResponse)},
  { 1057, -1, sizeof(::lnrpc::FloatMetric)},
  { 1064, -1, sizeof(::lnrpc::ChanInfoRequest)},
  { 1070, -1, sizeof(::lnrpc::NetworkInfoRequest)},
  { 1075, -1, sizeof(::lnrpc::NetworkInfo)},
  { 1091, -1, sizeof(::lnrpc::StopRequest)},
  { 1096, -1, sizeof(::lnrpc::StopResponse)},
  { 1101, -1, sizeof(::lnrpc::GraphTopologySubscription)},
  { 1106, -1, sizeof(::lnrpc::GraphTopologyUpdate)},
  { 1114, 1121, sizeof(::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse)},
  { 1123, -1, sizeof(::lnrpc::NodeUpdate)},
  { 1134, -1, sizeof(::lnrpc::ChannelEdgeUpdate)},
  { 1145, -1, sizeof(::lnrpc::ClosedChannelUpdate)},
  { 1154, -1, sizeof(::lnrpc::HopHint)},
  { 1164, -1, sizeof(::lnrpc::RouteHint)},
  { 1170, 1177, sizeof(::lnrpc::Invoice_FeaturesEntry_DoNotUse)},
  { 1179, -1, sizeof(::lnrpc::Invoice)},
  { 1209, 1216, sizeof(::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse)},
  { 1218, -1, sizeof(::lnrpc::InvoiceHTLC)},
  { 1234, -1, sizeof(::lnrpc::AMP)},
  { 1244, -1, sizeof(::lnrpc::AddInvoiceResponse)},
  { 1253, -1, sizeof(::lnrpc::PaymentHash)},
  { 1260, -1, sizeof(::lnrpc::ListInvoiceRequest)},
  { 1269, -1, sizeof(::lnrpc::ListInvoiceResponse)},
  { 1277, -1, sizeof(::lnrpc::InvoiceSubscription)},
  { 1284, -1, sizeof(::lnrpc::Payment)},
  { 1304, -1, sizeof(::lnrpc::HTLCAttempt)},
  { 1316, -1, sizeof(::lnrpc::ListPaymentsRequest)},
  { 1325, -1, sizeof(::lnrpc::ListPaymentsResponse)},
  { 1333, -1, sizeof(::lnrpc::DeleteAllPaymentsRequest)},
  { 1340, -1, sizeof(::lnrpc::DeleteAllPaymentsResponse)},
  { 1345, -1, sizeof(::lnrpc::AbandonChannelRequest)},
  { 1352, -1, sizeof(::lnrpc::AbandonChannelResponse)},
  { 1357, -1, sizeof(::lnrpc::DebugLevelRequest)},
  { 1364, -1, sizeof(::lnrpc::DebugLevelResponse)},
  { 1370, -1, sizeof(::lnrpc::PayReqString)},
  { 1376, 1383, sizeof(::lnrpc::PayReq_FeaturesEntry_DoNotUse)},
  { 1385, -1, sizeof(::lnrpc::PayReq)},
  { 1403, -1, sizeof(::lnrpc::Feature)},
  { 1411, -1, sizeof(::lnrpc::FeeReportRequest)},
  { 1416, -1, sizeof(::lnrpc::ChannelFeeReport)},
  { 1426, -1, sizeof(::lnrpc::FeeReportResponse)},
  { 1435, -1, sizeof(::lnrpc::PolicyUpdateRequest)},
  { 1449, -1, sizeof(::lnrpc::PolicyUpdateResponse)},
  { 1454, -1, sizeof(::lnrpc::ForwardingHistoryRequest)},
  { 1463, -1, sizeof(::lnrpc::ForwardingEvent)},
  { 1478, -1, sizeof(::lnrpc::ForwardingHistoryResponse)},
  { 1485, -1, sizeof(::lnrpc::ExportChannelBackupRequest)},
  { 1491, -1, sizeof(::lnrpc::ChannelBackup)},
  { 1498, -1, sizeof(::lnrpc::MultiChanBackup)},
  { 1505, -1, sizeof(::lnrpc::ChanBackupExportRequest)},
  { 1510, -1, sizeof(::lnrpc::ChanBackupSnapshot)},
  { 1517, -1, sizeof(::lnrpc::ChannelBackups)},
  { 1523, -1, sizeof(::lnrpc::RestoreChanBackupRequest)},
  { 1531, -1, sizeof(::lnrpc::RestoreBackupResponse)},
  { 1536, -1, sizeof(::lnrpc::ChannelBackupSubscription)},
  { 1541, -1, sizeof(::lnrpc::VerifyChanBackupResponse)},
  { 1546, -1, sizeof(::lnrpc::MacaroonPermission)},
  { 1553, -1, sizeof(::lnrpc::BakeMacaroonRequest)},
  { 1560, -1, sizeof(::lnrpc::BakeMacaroonResponse)},
  { 1566, -1, sizeof(::lnrpc::ListMacaroonIDsRequest)},
  { 1571, -1, sizeof(::lnrpc::ListMacaroonIDsResponse)},
  { 1577, -1, sizeof(::lnrpc::DeleteMacaroonIDRequest)},
  { 1583, -1, sizeof(::lnrpc::DeleteMacaroonIDResponse)},
  { 1589, -1, sizeof(::lnrpc::MacaroonPermissionList)},
  { 1595, -1, sizeof(::lnrpc::ListPermissionsRequest)},
  { 1600, 1607, sizeof(::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse)},
  { 1609, -1, sizeof(::lnrpc::ListPermissionsResponse)},
  { 1615, -1, sizeof(::lnrpc::Failure)},
  { 1628, -1, sizeof(::lnrpc::ChannelUpdate)},
  { 1645, -1, sizeof(::lnrpc::MacaroonId)},
  { 1653, -1, sizeof(::lnrpc::Op)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Utxo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetTransactionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_TransactionDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FeeLimit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendRequest_DestCustomRecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendToRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelAcceptRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelAcceptResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_OutPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_LightningAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_EstimateFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_EstimateFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendManyRequest_AddrToAmountEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendManyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendManyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendCoinsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SendCoinsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListUnspentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListUnspentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NewAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NewAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SignMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_SignMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_VerifyMessageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_VerifyMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ConnectPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ConnectPeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DisconnectPeerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DisconnectPeerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_HTLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelCloseSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Resolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ClosedChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ClosedChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Peer_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Peer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_TimestampedError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPeersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPeersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PeerEventSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PeerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetInfoResponse_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetRecoveryInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GetRecoveryInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Chain_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ConfirmationUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelOpenUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelCloseUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_CloseChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_CloseStatusUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ReadyForPsbtFunding_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_OpenChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_OpenStatusUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_KeyLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_KeyDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChanPointShim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PsbtShim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingShim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingShimCancel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingPsbtVerify_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingPsbtFinalize_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingTransitionMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FundingStateStepResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingHTLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_PendingOpenChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_WaitingCloseChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_Commitments_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_ClosedChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_ForceClosedChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PendingChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelEventSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelEventUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_WalletAccountBalance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_WalletBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_WalletBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Amount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_QueryRoutesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_EdgeLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_QueryRoutesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Hop_CustomRecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Hop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_MPPRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_LightningNode_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_LightningNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeAddress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_RoutingPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelEdge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelGraphRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelGraph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeMetricsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeMetricsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FloatMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChanInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NetworkInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NetworkInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_StopRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_StopResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GraphTopologySubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_GraphTopologyUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeUpdate_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_NodeUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelEdgeUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ClosedChannelUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_HopHint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_RouteHint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Invoice_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Invoice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_InvoiceHTLC_CustomRecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_InvoiceHTLC_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_AMP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_AddInvoiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PaymentHash_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListInvoiceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListInvoiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_InvoiceSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Payment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_HTLCAttempt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPaymentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPaymentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DeleteAllPaymentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DeleteAllPaymentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_AbandonChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_AbandonChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DebugLevelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DebugLevelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PayReqString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PayReq_FeaturesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PayReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Feature_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FeeReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelFeeReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_FeeReportResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PolicyUpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_PolicyUpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ForwardingHistoryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ForwardingEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ForwardingHistoryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ExportChannelBackupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelBackup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_MultiChanBackup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChanBackupExportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChanBackupSnapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelBackups_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_RestoreChanBackupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_RestoreBackupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelBackupSubscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_VerifyChanBackupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_MacaroonPermission_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_BakeMacaroonRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_BakeMacaroonResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListMacaroonIDsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListMacaroonIDsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DeleteMacaroonIDRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_DeleteMacaroonIDResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_MacaroonPermissionList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPermissionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ListPermissionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Failure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_ChannelUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_MacaroonId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lnrpc::_Op_default_instance_),
};

const char descriptor_table_protodef_rpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\trpc.proto\022\005lnrpc\"\242\001\n\004Utxo\022(\n\014address_t"
  "ype\030\001 \001(\0162\022.lnrpc.AddressType\022\017\n\007address"
  "\030\002 \001(\t\022\022\n\namount_sat\030\003 \001(\003\022\021\n\tpk_script\030"
  "\004 \001(\t\022!\n\010outpoint\030\005 \001(\0132\017.lnrpc.OutPoint"
  "\022\025\n\rconfirmations\030\006 \001(\003\"\326\001\n\013Transaction\022"
  "\017\n\007tx_hash\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\022\031\n\021num_"
  "confirmations\030\003 \001(\005\022\022\n\nblock_hash\030\004 \001(\t\022"
  "\024\n\014block_height\030\005 \001(\005\022\022\n\ntime_stamp\030\006 \001("
  "\003\022\022\n\ntotal_fees\030\007 \001(\003\022\026\n\016dest_addresses\030"
  "\010 \003(\t\022\022\n\nraw_tx_hex\030\t \001(\t\022\r\n\005label\030\n \001(\t"
  "\"S\n\026GetTransactionsRequest\022\024\n\014start_heig"
  "ht\030\001 \001(\005\022\022\n\nend_height\030\002 \001(\005\022\017\n\007account\030"
  "\003 \001(\t\">\n\022TransactionDetails\022(\n\014transacti"
  "ons\030\001 \003(\0132\022.lnrpc.Transaction\"M\n\010FeeLimi"
  "t\022\017\n\005fixed\030\001 \001(\003H\000\022\024\n\nfixed_msat\030\003 \001(\003H\000"
  "\022\021\n\007percent\030\002 \001(\003H\000B\007\n\005limit\"\212\004\n\013SendReq"
  "uest\022\014\n\004dest\030\001 \001(\014\022\027\n\013dest_string\030\002 \001(\tB"
  "\002\030\001\022\013\n\003amt\030\003 \001(\003\022\020\n\010amt_msat\030\014 \001(\003\022\024\n\014pa"
  "yment_hash\030\004 \001(\014\022\037\n\023payment_hash_string\030"
  "\005 \001(\tB\002\030\001\022\027\n\017payment_request\030\006 \001(\t\022\030\n\020fi"
  "nal_cltv_delta\030\007 \001(\005\022\"\n\tfee_limit\030\010 \001(\0132"
  "\017.lnrpc.FeeLimit\022\034\n\020outgoing_chan_id\030\t \001"
  "(\004B\0020\001\022\027\n\017last_hop_pubkey\030\r \001(\014\022\022\n\ncltv_"
  "limit\030\n \001(\r\022F\n\023dest_custom_records\030\013 \003(\013"
  "2).lnrpc.SendRequest.DestCustomRecordsEn"
  "try\022\032\n\022allow_self_payment\030\016 \001(\010\022(\n\rdest_"
  "features\030\017 \003(\0162\021.lnrpc.FeatureBit\022\024\n\014pay"
  "ment_addr\030\020 \001(\014\0328\n\026DestCustomRecordsEntr"
  "y\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\014:\0028\001\"z\n\014Sen"
  "dResponse\022\025\n\rpayment_error\030\001 \001(\t\022\030\n\020paym"
  "ent_preimage\030\002 \001(\014\022#\n\rpayment_route\030\003 \001("
  "\0132\014.lnrpc.Route\022\024\n\014payment_hash\030\004 \001(\014\"n\n"
  "\022SendToRouteRequest\022\024\n\014payment_hash\030\001 \001("
  "\014\022\037\n\023payment_hash_string\030\002 \001(\tB\002\030\001\022\033\n\005ro"
  "ute\030\004 \001(\0132\014.lnrpc.RouteJ\004\010\003\020\004\"\265\002\n\024Channe"
  "lAcceptRequest\022\023\n\013node_pubkey\030\001 \001(\014\022\022\n\nc"
  "hain_hash\030\002 \001(\014\022\027\n\017pending_chan_id\030\003 \001(\014"
  "\022\023\n\013funding_amt\030\004 \001(\004\022\020\n\010push_amt\030\005 \001(\004\022"
  "\022\n\ndust_limit\030\006 \001(\004\022\033\n\023max_value_in_flig"
  "ht\030\007 \001(\004\022\027\n\017channel_reserve\030\010 \001(\004\022\020\n\010min"
  "_htlc\030\t \001(\004\022\022\n\nfee_per_kw\030\n \001(\004\022\021\n\tcsv_d"
  "elay\030\013 \001(\r\022\032\n\022max_accepted_htlcs\030\014 \001(\r\022\025"
  "\n\rchannel_flags\030\r \001(\r\"\364\001\n\025ChannelAcceptR"
  "esponse\022\016\n\006accept\030\001 \001(\010\022\027\n\017pending_chan_"
  "id\030\002 \001(\014\022\r\n\005error\030\003 \001(\t\022\030\n\020upfront_shutd"
  "own\030\004 \001(\t\022\021\n\tcsv_delay\030\005 \001(\r\022\023\n\013reserve_"
  "sat\030\006 \001(\004\022\032\n\022in_flight_max_msat\030\007 \001(\004\022\026\n"
  "\016max_htlc_count\030\010 \001(\r\022\023\n\013min_htlc_in\030\t \001"
  "(\004\022\030\n\020min_accept_depth\030\n \001(\r\"n\n\014ChannelP"
  "oint\022\034\n\022funding_txid_bytes\030\001 \001(\014H\000\022\032\n\020fu"
  "nding_txid_str\030\002 \001(\tH\000\022\024\n\014output_index\030\003"
  " \001(\rB\016\n\014funding_txid\"F\n\010OutPoint\022\022\n\ntxid"
  "_bytes\030\001 \001(\014\022\020\n\010txid_str\030\002 \001(\t\022\024\n\014output"
  "_index\030\003 \001(\r\"0\n\020LightningAddress\022\016\n\006pubk"
  "ey\030\001 \001(\t\022\014\n\004host\030\002 \001(\t\"\241\001\n\022EstimateFeeRe"
  "quest\022A\n\014AddrToAmount\030\001 \003(\0132+.lnrpc.Esti"
  "mateFeeRequest.AddrToAmountEntry\022\023\n\013targ"
  "et_conf\030\002 \001(\005\0323\n\021AddrToAmountEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\"_\n\023EstimateFe"
  "eResponse\022\017\n\007fee_sat\030\001 \001(\003\022 \n\024feerate_sa"
  "t_per_byte\030\002 \001(\003B\002\030\001\022\025\n\rsat_per_vbyte\030\003 "
  "\001(\004\"\211\002\n\017SendManyRequest\022>\n\014AddrToAmount\030"
  "\001 \003(\0132(.lnrpc.SendManyRequest.AddrToAmou"
  "ntEntry\022\023\n\013target_conf\030\003 \001(\005\022\025\n\rsat_per_"
  "vbyte\030\004 \001(\004\022\030\n\014sat_per_byte\030\005 \001(\003B\002\030\001\022\r\n"
  "\005label\030\006 \001(\t\022\021\n\tmin_confs\030\007 \001(\005\022\031\n\021spend"
  "_unconfirmed\030\010 \001(\010\0323\n\021AddrToAmountEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\003:\0028\001\" \n\020SendM"
  "anyResponse\022\014\n\004txid\030\001 \001(\t\"\305\001\n\020SendCoinsR"
  "equest\022\014\n\004addr\030\001 \001(\t\022\016\n\006amount\030\002 \001(\003\022\023\n\013"
  "target_conf\030\003 \001(\005\022\025\n\rsat_per_vbyte\030\004 \001(\004"
  "\022\030\n\014sat_per_byte\030\005 \001(\003B\002\030\001\022\020\n\010send_all\030\006"
  " \001(\010\022\r\n\005label\030\007 \001(\t\022\021\n\tmin_confs\030\010 \001(\005\022\031"
  "\n\021spend_unconfirmed\030\t \001(\010\"!\n\021SendCoinsRe"
  "sponse\022\014\n\004txid\030\001 \001(\t\"K\n\022ListUnspentReque"
  "st\022\021\n\tmin_confs\030\001 \001(\005\022\021\n\tmax_confs\030\002 \001(\005"
  "\022\017\n\007account\030\003 \001(\t\"1\n\023ListUnspentResponse"
  "\022\032\n\005utxos\030\001 \003(\0132\013.lnrpc.Utxo\"F\n\021NewAddre"
  "ssRequest\022 \n\004type\030\001 \001(\0162\022.lnrpc.AddressT"
  "ype\022\017\n\007account\030\002 \001(\t\"%\n\022NewAddressRespon"
  "se\022\017\n\007address\030\001 \001(\t\"!\n\022SignMessageReques"
  "t\022\013\n\003msg\030\001 \001(\014\"(\n\023SignMessageResponse\022\021\n"
  "\tsignature\030\001 \001(\t\"6\n\024VerifyMessageRequest"
  "\022\013\n\003msg\030\001 \001(\014\022\021\n\tsignature\030\002 \001(\t\"6\n\025Veri"
  "fyMessageResponse\022\r\n\005valid\030\001 \001(\010\022\016\n\006pubk"
  "ey\030\002 \001(\t\"Z\n\022ConnectPeerRequest\022%\n\004addr\030\001"
  " \001(\0132\027.lnrpc.LightningAddress\022\014\n\004perm\030\002 "
  "\001(\010\022\017\n\007timeout\030\003 \001(\004\"\025\n\023ConnectPeerRespo"
  "nse\"(\n\025DisconnectPeerRequest\022\017\n\007pub_key\030"
  "\001 \001(\t\"\030\n\026DisconnectPeerResponse\"\245\001\n\004HTLC"
  "\022\020\n\010incoming\030\001 \001(\010\022\016\n\006amount\030\002 \001(\003\022\021\n\tha"
  "sh_lock\030\003 \001(\014\022\031\n\021expiration_height\030\004 \001(\r"
  "\022\022\n\nhtlc_index\030\005 \001(\004\022\032\n\022forwarding_chann"
  "el\030\006 \001(\004\022\035\n\025forwarding_htlc_index\030\007 \001(\004\""
  "\252\001\n\022ChannelConstraints\022\021\n\tcsv_delay\030\001 \001("
  "\r\022\030\n\020chan_reserve_sat\030\002 \001(\004\022\026\n\016dust_limi"
  "t_sat\030\003 \001(\004\022\034\n\024max_pending_amt_msat\030\004 \001("
  "\004\022\025\n\rmin_htlc_msat\030\005 \001(\004\022\032\n\022max_accepted"
  "_htlcs\030\006 \001(\r\"\260\006\n\007Channel\022\016\n\006active\030\001 \001(\010"
  "\022\025\n\rremote_pubkey\030\002 \001(\t\022\025\n\rchannel_point"
  "\030\003 \001(\t\022\023\n\007chan_id\030\004 \001(\004B\0020\001\022\020\n\010capacity\030"
  "\005 \001(\003\022\025\n\rlocal_balance\030\006 \001(\003\022\026\n\016remote_b"
  "alance\030\007 \001(\003\022\022\n\ncommit_fee\030\010 \001(\003\022\025\n\rcomm"
  "it_weight\030\t \001(\003\022\022\n\nfee_per_kw\030\n \001(\003\022\031\n\021u"
  "nsettled_balance\030\013 \001(\003\022\033\n\023total_satoshis"
  "_sent\030\014 \001(\003\022\037\n\027total_satoshis_received\030\r"
  " \001(\003\022\023\n\013num_updates\030\016 \001(\004\022\"\n\rpending_htl"
  "cs\030\017 \003(\0132\013.lnrpc.HTLC\022\025\n\tcsv_delay\030\020 \001(\r"
  "B\002\030\001\022\017\n\007private\030\021 \001(\010\022\021\n\tinitiator\030\022 \001(\010"
  "\022\031\n\021chan_status_flags\030\023 \001(\t\022\"\n\026local_cha"
  "n_reserve_sat\030\024 \001(\003B\002\030\001\022#\n\027remote_chan_r"
  "eserve_sat\030\025 \001(\003B\002\030\001\022\035\n\021static_remote_ke"
  "y\030\026 \001(\010B\002\030\001\022.\n\017commitment_type\030\032 \001(\0162\025.l"
  "nrpc.CommitmentType\022\020\n\010lifetime\030\027 \001(\003\022\016\n"
  "\006uptime\030\030 \001(\003\022\025\n\rclose_address\030\031 \001(\t\022\027\n\017"
  "push_amount_sat\030\033 \001(\004\022\023\n\013thaw_height\030\034 \001"
  "(\r\0224\n\021local_constraints\030\035 \001(\0132\031.lnrpc.Ch"
  "annelConstraints\0225\n\022remote_constraints\030\036"
  " \001(\0132\031.lnrpc.ChannelConstraints\"z\n\023ListC"
  "hannelsRequest\022\023\n\013active_only\030\001 \001(\010\022\025\n\ri"
  "nactive_only\030\002 \001(\010\022\023\n\013public_only\030\003 \001(\010\022"
  "\024\n\014private_only\030\004 \001(\010\022\014\n\004peer\030\005 \001(\014\"8\n\024L"
  "istChannelsResponse\022 \n\010channels\030\013 \003(\0132\016."
  "lnrpc.Channel\"\251\004\n\023ChannelCloseSummary\022\025\n"
  "\rchannel_point\030\001 \001(\t\022\023\n\007chan_id\030\002 \001(\004B\0020"
  "\001\022\022\n\nchain_hash\030\003 \001(\t\022\027\n\017closing_tx_hash"
  "\030\004 \001(\t\022\025\n\rremote_pubkey\030\005 \001(\t\022\020\n\010capacit"
  "y\030\006 \001(\003\022\024\n\014close_height\030\007 \001(\r\022\027\n\017settled"
  "_balance\030\010 \001(\003\022\033\n\023time_locked_balance\030\t "
  "\001(\003\022:\n\nclose_type\030\n \001(\0162&.lnrpc.ChannelC"
  "loseSummary.ClosureType\022(\n\016open_initiato"
  "r\030\013 \001(\0162\020.lnrpc.Initiator\022)\n\017close_initi"
  "ator\030\014 \001(\0162\020.lnrpc.Initiator\022&\n\013resoluti"
  "ons\030\r \003(\0132\021.lnrpc.Resolution\"\212\001\n\013Closure"
  "Type\022\025\n\021COOPERATIVE_CLOSE\020\000\022\025\n\021LOCAL_FOR"
  "CE_CLOSE\020\001\022\026\n\022REMOTE_FORCE_CLOSE\020\002\022\020\n\014BR"
  "EACH_CLOSE\020\003\022\024\n\020FUNDING_CANCELED\020\004\022\r\n\tAB"
  "ANDONED\020\005\"\262\001\n\nResolution\022.\n\017resolution_t"
  "ype\030\001 \001(\0162\025.lnrpc.ResolutionType\022)\n\007outc"
  "ome\030\002 \001(\0162\030.lnrpc.ResolutionOutcome\022!\n\010o"
  "utpoint\030\003 \001(\0132\017.lnrpc.OutPoint\022\022\n\namount"
  "_sat\030\004 \001(\004\022\022\n\nsweep_txid\030\005 \001(\t\"\224\001\n\025Close"
  "dChannelsRequest\022\023\n\013cooperative\030\001 \001(\010\022\023\n"
  "\013local_force\030\002 \001(\010\022\024\n\014remote_force\030\003 \001(\010"
  "\022\016\n\006breach\030\004 \001(\010\022\030\n\020funding_canceled\030\005 \001"
  "(\010\022\021\n\tabandoned\030\006 \001(\010\"F\n\026ClosedChannelsR"
  "esponse\022,\n\010channels\030\001 \003(\0132\032.lnrpc.Channe"
  "lCloseSummary\"\324\003\n\004Peer\022\017\n\007pub_key\030\001 \001(\t\022"
  "\017\n\007address\030\003 \001(\t\022\022\n\nbytes_sent\030\004 \001(\004\022\022\n\n"
  "bytes_recv\030\005 \001(\004\022\020\n\010sat_sent\030\006 \001(\003\022\020\n\010sa"
  "t_recv\030\007 \001(\003\022\017\n\007inbound\030\010 \001(\010\022\021\n\tping_ti"
  "me\030\t \001(\003\022\'\n\tsync_type\030\n \001(\0162\024.lnrpc.Peer"
  ".SyncType\022+\n\010features\030\013 \003(\0132\031.lnrpc.Peer"
  ".FeaturesEntry\022\'\n\006errors\030\014 \003(\0132\027.lnrpc.T"
  "imestampedError\022\022\n\nflap_count\030\r \001(\005\022\024\n\014l"
  "ast_flap_ns\030\016 \001(\003\032\?\n\rFeaturesEntry\022\013\n\003ke"
  "y\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016.lnrpc.Feature:\002"
  "8\001\"P\n\010SyncType\022\020\n\014UNKNOWN_SYNC\020\000\022\017\n\013ACTI"
  "VE_SYNC\020\001\022\020\n\014PASSIVE_SYNC\020\002\022\017\n\013PINNED_SY"
  "NC\020\003\"4\n\020TimestampedError\022\021\n\ttimestamp\030\001 "
  "\001(\004\022\r\n\005error\030\002 \001(\t\"(\n\020ListPeersRequest\022\024"
  "\n\014latest_error\030\001 \001(\010\"/\n\021ListPeersRespons"
  "e\022\032\n\005peers\030\001 \003(\0132\013.lnrpc.Peer\"\027\n\025PeerEve"
  "ntSubscription\"v\n\tPeerEvent\022\017\n\007pub_key\030\001"
  " \001(\t\022(\n\004type\030\002 \001(\0162\032.lnrpc.PeerEvent.Eve"
  "ntType\".\n\tEventType\022\017\n\013PEER_ONLINE\020\000\022\020\n\014"
  "PEER_OFFLINE\020\001\"\020\n\016GetInfoRequest\"\226\004\n\017Get"
  "InfoResponse\022\017\n\007version\030\016 \001(\t\022\023\n\013commit_"
  "hash\030\024 \001(\t\022\027\n\017identity_pubkey\030\001 \001(\t\022\r\n\005a"
  "lias\030\002 \001(\t\022\r\n\005color\030\021 \001(\t\022\034\n\024num_pending"
  "_channels\030\003 \001(\r\022\033\n\023num_active_channels\030\004"
  " \001(\r\022\035\n\025num_inactive_channels\030\017 \001(\r\022\021\n\tn"
  "um_peers\030\005 \001(\r\022\024\n\014block_height\030\006 \001(\r\022\022\n\n"
  "block_hash\030\010 \001(\t\022\035\n\025best_header_timestam"
  "p\030\r \001(\003\022\027\n\017synced_to_chain\030\t \001(\010\022\027\n\017sync"
  "ed_to_graph\030\022 \001(\010\022\023\n\007testnet\030\n \001(\010B\002\030\001\022\034"
  "\n\006chains\030\020 \003(\0132\014.lnrpc.Chain\022\014\n\004uris\030\014 \003"
  "(\t\0226\n\010features\030\023 \003(\0132$.lnrpc.GetInfoResp"
  "onse.FeaturesEntry\032\?\n\rFeaturesEntry\022\013\n\003k"
  "ey\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016.lnrpc.Feature:"
  "\0028\001J\004\010\013\020\014\"\030\n\026GetRecoveryInfoRequest\"]\n\027G"
  "etRecoveryInfoResponse\022\025\n\rrecovery_mode\030"
  "\001 \001(\010\022\031\n\021recovery_finished\030\002 \001(\010\022\020\n\010prog"
  "ress\030\003 \001(\001\"\'\n\005Chain\022\r\n\005chain\030\001 \001(\t\022\017\n\007ne"
  "twork\030\002 \001(\t\"U\n\022ConfirmationUpdate\022\021\n\tblo"
  "ck_sha\030\001 \001(\014\022\024\n\014block_height\030\002 \001(\005\022\026\n\016nu"
  "m_confs_left\030\003 \001(\r\"\?\n\021ChannelOpenUpdate\022"
  "*\n\rchannel_point\030\001 \001(\0132\023.lnrpc.ChannelPo"
  "int\";\n\022ChannelCloseUpdate\022\024\n\014closing_txi"
  "d\030\001 \001(\014\022\017\n\007success\030\002 \001(\010\"\260\001\n\023CloseChanne"
  "lRequest\022*\n\rchannel_point\030\001 \001(\0132\023.lnrpc."
  "ChannelPoint\022\r\n\005force\030\002 \001(\010\022\023\n\013target_co"
  "nf\030\003 \001(\005\022\030\n\014sat_per_byte\030\004 \001(\003B\002\030\001\022\030\n\020de"
  "livery_address\030\005 \001(\t\022\025\n\rsat_per_vbyte\030\006 "
  "\001(\004\"}\n\021CloseStatusUpdate\022-\n\rclose_pendin"
  "g\030\001 \001(\0132\024.lnrpc.PendingUpdateH\000\022/\n\nchan_"
  "close\030\003 \001(\0132\031.lnrpc.ChannelCloseUpdateH\000"
  "B\010\n\006update\"3\n\rPendingUpdate\022\014\n\004txid\030\001 \001("
  "\014\022\024\n\014output_index\030\002 \001(\r\"T\n\023ReadyForPsbtF"
  "unding\022\027\n\017funding_address\030\001 \001(\t\022\026\n\016fundi"
  "ng_amount\030\002 \001(\003\022\014\n\004psbt\030\003 \001(\014\"\341\003\n\022OpenCh"
  "annelRequest\022\025\n\rsat_per_vbyte\030\001 \001(\004\022\023\n\013n"
  "ode_pubkey\030\002 \001(\014\022\036\n\022node_pubkey_string\030\003"
  " \001(\tB\002\030\001\022\034\n\024local_funding_amount\030\004 \001(\003\022\020"
  "\n\010push_sat\030\005 \001(\003\022\023\n\013target_conf\030\006 \001(\005\022\030\n"
  "\014sat_per_byte\030\007 \001(\003B\002\030\001\022\017\n\007private\030\010 \001(\010"
  "\022\025\n\rmin_htlc_msat\030\t \001(\003\022\030\n\020remote_csv_de"
  "lay\030\n \001(\r\022\021\n\tmin_confs\030\013 \001(\005\022\031\n\021spend_un"
  "confirmed\030\014 \001(\010\022\025\n\rclose_address\030\r \001(\t\022("
  "\n\014funding_shim\030\016 \001(\0132\022.lnrpc.FundingShim"
  "\022\'\n\037remote_max_value_in_flight_msat\030\017 \001("
  "\004\022\030\n\020remote_max_htlcs\030\020 \001(\r\022\025\n\rmax_local"
  "_csv\030\021 \001(\r\022\025\n\rsubtract_fees\030\022 \001(\010\"\303\001\n\020Op"
  "enStatusUpdate\022,\n\014chan_pending\030\001 \001(\0132\024.l"
  "nrpc.PendingUpdateH\000\022-\n\tchan_open\030\003 \001(\0132"
  "\030.lnrpc.ChannelOpenUpdateH\000\022/\n\tpsbt_fund"
  "\030\005 \001(\0132\032.lnrpc.ReadyForPsbtFundingH\000\022\027\n\017"
  "pending_chan_id\030\004 \001(\014B\010\n\006update\"3\n\nKeyLo"
  "cator\022\022\n\nkey_family\030\001 \001(\005\022\021\n\tkey_index\030\002"
  " \001(\005\"J\n\rKeyDescriptor\022\025\n\rraw_key_bytes\030\001"
  " \001(\014\022\"\n\007key_loc\030\002 \001(\0132\021.lnrpc.KeyLocator"
  "\"\260\001\n\rChanPointShim\022\013\n\003amt\030\001 \001(\003\022\'\n\nchan_"
  "point\030\002 \001(\0132\023.lnrpc.ChannelPoint\022\'\n\tloca"
  "l_key\030\003 \001(\0132\024.lnrpc.KeyDescriptor\022\022\n\nrem"
  "ote_key\030\004 \001(\014\022\027\n\017pending_chan_id\030\005 \001(\014\022\023"
  "\n\013thaw_height\030\006 \001(\r\"J\n\010PsbtShim\022\027\n\017pendi"
  "ng_chan_id\030\001 \001(\014\022\021\n\tbase_psbt\030\002 \001(\014\022\022\n\nn"
  "o_publish\030\003 \001(\010\"l\n\013FundingShim\022/\n\017chan_p"
  "oint_shim\030\001 \001(\0132\024.lnrpc.ChanPointShimH\000\022"
  "$\n\tpsbt_shim\030\002 \001(\0132\017.lnrpc.PsbtShimH\000B\006\n"
  "\004shim\",\n\021FundingShimCancel\022\027\n\017pending_ch"
  "an_id\030\001 \001(\014\"A\n\021FundingPsbtVerify\022\023\n\013fund"
  "ed_psbt\030\001 \001(\014\022\027\n\017pending_chan_id\030\002 \001(\014\"Y"
  "\n\023FundingPsbtFinalize\022\023\n\013signed_psbt\030\001 \001"
  "(\014\022\027\n\017pending_chan_id\030\002 \001(\014\022\024\n\014final_raw"
  "_tx\030\003 \001(\014\"\345\001\n\024FundingTransitionMsg\022+\n\rsh"
  "im_register\030\001 \001(\0132\022.lnrpc.FundingShimH\000\022"
  "/\n\013shim_cancel\030\002 \001(\0132\030.lnrpc.FundingShim"
  "CancelH\000\022/\n\013psbt_verify\030\003 \001(\0132\030.lnrpc.Fu"
  "ndingPsbtVerifyH\000\0223\n\rpsbt_finalize\030\004 \001(\013"
  "2\032.lnrpc.FundingPsbtFinalizeH\000B\t\n\007trigge"
  "r\"\026\n\024FundingStateStepResp\"\206\001\n\013PendingHTL"
  "C\022\020\n\010incoming\030\001 \001(\010\022\016\n\006amount\030\002 \001(\003\022\020\n\010o"
  "utpoint\030\003 \001(\t\022\027\n\017maturity_height\030\004 \001(\r\022\033"
  "\n\023blocks_til_maturity\030\005 \001(\005\022\r\n\005stage\030\006 \001"
  "(\r\"\030\n\026PendingChannelsRequest\"\253\r\n\027Pending"
  "ChannelsResponse\022\033\n\023total_limbo_balance\030"
  "\001 \001(\003\022P\n\025pending_open_channels\030\002 \003(\01321.l"
  "nrpc.PendingChannelsResponse.PendingOpen"
  "Channel\022R\n\030pending_closing_channels\030\003 \003("
  "\0132,.lnrpc.PendingChannelsResponse.Closed"
  "ChannelB\002\030\001\022Y\n\036pending_force_closing_cha"
  "nnels\030\004 \003(\01321.lnrpc.PendingChannelsRespo"
  "nse.ForceClosedChannel\022R\n\026waiting_close_"
  "channels\030\005 \003(\01322.lnrpc.PendingChannelsRe"
  "sponse.WaitingCloseChannel\032\227\002\n\016PendingCh"
  "annel\022\027\n\017remote_node_pub\030\001 \001(\t\022\025\n\rchanne"
  "l_point\030\002 \001(\t\022\020\n\010capacity\030\003 \001(\003\022\025\n\rlocal"
  "_balance\030\004 \001(\003\022\026\n\016remote_balance\030\005 \001(\003\022\036"
  "\n\026local_chan_reserve_sat\030\006 \001(\003\022\037\n\027remote"
  "_chan_reserve_sat\030\007 \001(\003\022#\n\tinitiator\030\010 \001"
  "(\0162\020.lnrpc.Initiator\022.\n\017commitment_type\030"
  "\t \001(\0162\025.lnrpc.CommitmentType\032\260\001\n\022Pending"
  "OpenChannel\022>\n\007channel\030\001 \001(\0132-.lnrpc.Pen"
  "dingChannelsResponse.PendingChannel\022\033\n\023c"
  "onfirmation_height\030\002 \001(\r\022\022\n\ncommit_fee\030\004"
  " \001(\003\022\025\n\rcommit_weight\030\005 \001(\003\022\022\n\nfee_per_k"
  "w\030\006 \001(\003\032\255\001\n\023WaitingCloseChannel\022>\n\007chann"
  "el\030\001 \001(\0132-.lnrpc.PendingChannelsResponse"
  ".PendingChannel\022\025\n\rlimbo_balance\030\002 \001(\003\022\?"
  "\n\013commitments\030\003 \001(\0132*.lnrpc.PendingChann"
  "elsResponse.Commitments\032\267\001\n\013Commitments\022"
  "\022\n\nlocal_txid\030\001 \001(\t\022\023\n\013remote_txid\030\002 \001(\t"
  "\022\033\n\023remote_pending_txid\030\003 \001(\t\022\034\n\024local_c"
  "ommit_fee_sat\030\004 \001(\004\022\035\n\025remote_commit_fee"
  "_sat\030\005 \001(\004\022%\n\035remote_pending_commit_fee_"
  "sat\030\006 \001(\004\032e\n\rClosedChannel\022>\n\007channel\030\001 "
  "\001(\0132-.lnrpc.PendingChannelsResponse.Pend"
  "ingChannel\022\024\n\014closing_txid\030\002 \001(\t\032\377\002\n\022For"
  "ceClosedChannel\022>\n\007channel\030\001 \001(\0132-.lnrpc"
  ".PendingChannelsResponse.PendingChannel\022"
  "\024\n\014closing_txid\030\002 \001(\t\022\025\n\rlimbo_balance\030\003"
  " \001(\003\022\027\n\017maturity_height\030\004 \001(\r\022\033\n\023blocks_"
  "til_maturity\030\005 \001(\005\022\031\n\021recovered_balance\030"
  "\006 \001(\003\022)\n\rpending_htlcs\030\010 \003(\0132\022.lnrpc.Pen"
  "dingHTLC\022M\n\006anchor\030\t \001(\0162=.lnrpc.Pending"
  "ChannelsResponse.ForceClosedChannel.Anch"
  "orState\"1\n\013AnchorState\022\t\n\005LIMBO\020\000\022\r\n\tREC"
  "OVERED\020\001\022\010\n\004LOST\020\002\"\032\n\030ChannelEventSubscr"
  "iption\"\277\003\n\022ChannelEventUpdate\022&\n\014open_ch"
  "annel\030\001 \001(\0132\016.lnrpc.ChannelH\000\0224\n\016closed_"
  "channel\030\002 \001(\0132\032.lnrpc.ChannelCloseSummar"
  "yH\000\022-\n\016active_channel\030\003 \001(\0132\023.lnrpc.Chan"
  "nelPointH\000\022/\n\020inactive_channel\030\004 \001(\0132\023.l"
  "nrpc.ChannelPointH\000\0224\n\024pending_open_chan"
  "nel\030\006 \001(\0132\024.lnrpc.PendingUpdateH\000\0222\n\004typ"
  "e\030\005 \001(\0162$.lnrpc.ChannelEventUpdate.Updat"
  "eType\"v\n\nUpdateType\022\020\n\014OPEN_CHANNEL\020\000\022\022\n"
  "\016CLOSED_CHANNEL\020\001\022\022\n\016ACTIVE_CHANNEL\020\002\022\024\n"
  "\020INACTIVE_CHANNEL\020\003\022\030\n\024PENDING_OPEN_CHAN"
  "NEL\020\004B\t\n\007channel\"N\n\024WalletAccountBalance"
  "\022\031\n\021confirmed_balance\030\001 \001(\003\022\033\n\023unconfirm"
  "ed_balance\030\002 \001(\003\"\026\n\024WalletBalanceRequest"
  "\"\205\002\n\025WalletBalanceResponse\022\025\n\rtotal_bala"
  "nce\030\001 \001(\003\022\031\n\021confirmed_balance\030\002 \001(\003\022\033\n\023"
  "unconfirmed_balance\030\003 \001(\003\022I\n\017account_bal"
  "ance\030\004 \003(\01320.lnrpc.WalletBalanceResponse"
  ".AccountBalanceEntry\032R\n\023AccountBalanceEn"
  "try\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.lnrpc."
  "WalletAccountBalance:\0028\001\"#\n\006Amount\022\013\n\003sa"
  "t\030\001 \001(\004\022\014\n\004msat\030\002 \001(\004\"\027\n\025ChannelBalanceR"
  "equest\"\344\002\n\026ChannelBalanceResponse\022\023\n\007bal"
  "ance\030\001 \001(\003B\002\030\001\022 \n\024pending_open_balance\030\002"
  " \001(\003B\002\030\001\022$\n\rlocal_balance\030\003 \001(\0132\r.lnrpc."
  "Amount\022%\n\016remote_balance\030\004 \001(\0132\r.lnrpc.A"
  "mount\022.\n\027unsettled_local_balance\030\005 \001(\0132\r"
  ".lnrpc.Amount\022/\n\030unsettled_remote_balanc"
  "e\030\006 \001(\0132\r.lnrpc.Amount\0221\n\032pending_open_l"
  "ocal_balance\030\007 \001(\0132\r.lnrpc.Amount\0222\n\033pen"
  "ding_open_remote_balance\030\010 \001(\0132\r.lnrpc.A"
  "mount\"\320\004\n\022QueryRoutesRequest\022\017\n\007pub_key\030"
  "\001 \001(\t\022\013\n\003amt\030\002 \001(\003\022\020\n\010amt_msat\030\014 \001(\003\022\030\n\020"
  "final_cltv_delta\030\004 \001(\005\022\"\n\tfee_limit\030\005 \001("
  "\0132\017.lnrpc.FeeLimit\022\025\n\rignored_nodes\030\006 \003("
  "\014\022-\n\rignored_edges\030\007 \003(\0132\022.lnrpc.EdgeLoc"
  "atorB\002\030\001\022\026\n\016source_pub_key\030\010 \001(\t\022\033\n\023use_"
  "mission_control\030\t \001(\010\022&\n\rignored_pairs\030\n"
  " \003(\0132\017.lnrpc.NodePair\022\022\n\ncltv_limit\030\013 \001("
  "\r\022M\n\023dest_custom_records\030\r \003(\01320.lnrpc.Q"
  "ueryRoutesRequest.DestCustomRecordsEntry"
  "\022\034\n\020outgoing_chan_id\030\016 \001(\004B\0020\001\022\027\n\017last_h"
  "op_pubkey\030\017 \001(\014\022%\n\013route_hints\030\020 \003(\0132\020.l"
  "nrpc.RouteHint\022(\n\rdest_features\030\021 \003(\0162\021."
  "lnrpc.FeatureBit\0328\n\026DestCustomRecordsEnt"
  "ry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\014:\0028\001J\004\010\003\020\004"
  "\"$\n\010NodePair\022\014\n\004from\030\001 \001(\014\022\n\n\002to\030\002 \001(\014\"@"
  "\n\013EdgeLocator\022\026\n\nchannel_id\030\001 \001(\004B\0020\001\022\031\n"
  "\021direction_reverse\030\002 \001(\010\"I\n\023QueryRoutesR"
  "esponse\022\034\n\006routes\030\001 \003(\0132\014.lnrpc.Route\022\024\n"
  "\014success_prob\030\002 \001(\001\"\326\002\n\003Hop\022\023\n\007chan_id\030\001"
  " \001(\004B\0020\001\022\025\n\rchan_capacity\030\002 \001(\003\022\032\n\016amt_t"
  "o_forward\030\003 \001(\003B\002\030\001\022\017\n\003fee\030\004 \001(\003B\002\030\001\022\016\n\006"
  "expiry\030\005 \001(\r\022\033\n\023amt_to_forward_msat\030\006 \001("
  "\003\022\020\n\010fee_msat\030\007 \001(\003\022\017\n\007pub_key\030\010 \001(\t\022\023\n\013"
  "tlv_payload\030\t \001(\010\022$\n\nmpp_record\030\n \001(\0132\020."
  "lnrpc.MPPRecord\0225\n\016custom_records\030\013 \003(\0132"
  "\035.lnrpc.Hop.CustomRecordsEntry\0324\n\022Custom"
  "RecordsEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\014"
  ":\0028\001\"9\n\tMPPRecord\022\024\n\014payment_addr\030\013 \001(\014\022"
  "\026\n\016total_amt_msat\030\n \001(\003\"\232\001\n\005Route\022\027\n\017tot"
  "al_time_lock\030\001 \001(\r\022\026\n\ntotal_fees\030\002 \001(\003B\002"
  "\030\001\022\025\n\ttotal_amt\030\003 \001(\003B\002\030\001\022\030\n\004hops\030\004 \003(\0132"
  "\n.lnrpc.Hop\022\027\n\017total_fees_msat\030\005 \001(\003\022\026\n\016"
  "total_amt_msat\030\006 \001(\003\"<\n\017NodeInfoRequest\022"
  "\017\n\007pub_key\030\001 \001(\t\022\030\n\020include_channels\030\002 \001"
  "(\010\"\202\001\n\010NodeInfo\022\"\n\004node\030\001 \001(\0132\024.lnrpc.Li"
  "ghtningNode\022\024\n\014num_channels\030\002 \001(\r\022\026\n\016tot"
  "al_capacity\030\003 \001(\003\022$\n\010channels\030\004 \003(\0132\022.ln"
  "rpc.ChannelEdge\"\361\001\n\rLightningNode\022\023\n\013las"
  "t_update\030\001 \001(\r\022\017\n\007pub_key\030\002 \001(\t\022\r\n\005alias"
  "\030\003 \001(\t\022%\n\taddresses\030\004 \003(\0132\022.lnrpc.NodeAd"
  "dress\022\r\n\005color\030\005 \001(\t\0224\n\010features\030\006 \003(\0132\""
  ".lnrpc.LightningNode.FeaturesEntry\032\?\n\rFe"
  "aturesEntry\022\013\n\003key\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132"
  "\016.lnrpc.Feature:\0028\001\",\n\013NodeAddress\022\017\n\007ne"
  "twork\030\001 \001(\t\022\014\n\004addr\030\002 \001(\t\"\254\001\n\rRoutingPol"
  "icy\022\027\n\017time_lock_delta\030\001 \001(\r\022\020\n\010min_htlc"
  "\030\002 \001(\003\022\025\n\rfee_base_msat\030\003 \001(\003\022\033\n\023fee_rat"
  "e_milli_msat\030\004 \001(\003\022\020\n\010disabled\030\005 \001(\010\022\025\n\r"
  "max_htlc_msat\030\006 \001(\004\022\023\n\013last_update\030\007 \001(\r"
  "\"\342\001\n\013ChannelEdge\022\026\n\nchannel_id\030\001 \001(\004B\0020\001"
  "\022\022\n\nchan_point\030\002 \001(\t\022\027\n\013last_update\030\003 \001("
  "\rB\002\030\001\022\021\n\tnode1_pub\030\004 \001(\t\022\021\n\tnode2_pub\030\005 "
  "\001(\t\022\020\n\010capacity\030\006 \001(\003\022*\n\014node1_policy\030\007 "
  "\001(\0132\024.lnrpc.RoutingPolicy\022*\n\014node2_polic"
  "y\030\010 \001(\0132\024.lnrpc.RoutingPolicy\"2\n\023Channel"
  "GraphRequest\022\033\n\023include_unannounced\030\001 \001("
  "\010\"V\n\014ChannelGraph\022#\n\005nodes\030\001 \003(\0132\024.lnrpc"
  ".LightningNode\022!\n\005edges\030\002 \003(\0132\022.lnrpc.Ch"
  "annelEdge\":\n\022NodeMetricsRequest\022$\n\005types"
  "\030\001 \003(\0162\025.lnrpc.NodeMetricType\"\276\001\n\023NodeMe"
  "tricsResponse\022U\n\026betweenness_centrality\030"
  "\001 \003(\01325.lnrpc.NodeMetricsResponse.Betwee"
  "nnessCentralityEntry\032P\n\032BetweennessCentr"
  "alityEntry\022\013\n\003key\030\001 \001(\t\022!\n\005value\030\002 \001(\0132\022"
  ".lnrpc.FloatMetric:\0028\001\"6\n\013FloatMetric\022\r\n"
  "\005value\030\001 \001(\001\022\030\n\020normalized_value\030\002 \001(\001\"&"
  "\n\017ChanInfoRequest\022\023\n\007chan_id\030\001 \001(\004B\0020\001\"\024"
  "\n\022NetworkInfoRequest\"\247\002\n\013NetworkInfo\022\026\n\016"
  "graph_diameter\030\001 \001(\r\022\026\n\016avg_out_degree\030\002"
  " \001(\001\022\026\n\016max_out_degree\030\003 \001(\r\022\021\n\tnum_node"
  "s\030\004 \001(\r\022\024\n\014num_channels\030\005 \001(\r\022\036\n\026total_n"
  "etwork_capacity\030\006 \001(\003\022\030\n\020avg_channel_siz"
  "e\030\007 \001(\001\022\030\n\020min_channel_size\030\010 \001(\003\022\030\n\020max"
  "_channel_size\030\t \001(\003\022\037\n\027median_channel_si"
  "ze_sat\030\n \001(\003\022\030\n\020num_zombie_chans\030\013 \001(\004\"\r"
  "\n\013StopRequest\"\016\n\014StopResponse\"\033\n\031GraphTo"
  "pologySubscription\"\243\001\n\023GraphTopologyUpda"
  "te\022\'\n\014node_updates\030\001 \003(\0132\021.lnrpc.NodeUpd"
  "ate\0221\n\017channel_updates\030\002 \003(\0132\030.lnrpc.Cha"
  "nnelEdgeUpdate\0220\n\014closed_chans\030\003 \003(\0132\032.l"
  "nrpc.ClosedChannelUpdate\"\344\001\n\nNodeUpdate\022"
  "\021\n\taddresses\030\001 \003(\t\022\024\n\014identity_key\030\002 \001(\t"
  "\022\033\n\017global_features\030\003 \001(\014B\002\030\001\022\r\n\005alias\030\004"
  " \001(\t\022\r\n\005color\030\005 \001(\t\0221\n\010features\030\006 \003(\0132\037."
  "lnrpc.NodeUpdate.FeaturesEntry\032\?\n\rFeatur"
  "esEntry\022\013\n\003key\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016.ln"
  "rpc.Feature:\0028\001\"\304\001\n\021ChannelEdgeUpdate\022\023\n"
  "\007chan_id\030\001 \001(\004B\0020\001\022\'\n\nchan_point\030\002 \001(\0132\023"
  ".lnrpc.ChannelPoint\022\020\n\010capacity\030\003 \001(\003\022,\n"
  "\016routing_policy\030\004 \001(\0132\024.lnrpc.RoutingPol"
  "icy\022\030\n\020advertising_node\030\005 \001(\t\022\027\n\017connect"
  "ing_node\030\006 \001(\t\"|\n\023ClosedChannelUpdate\022\023\n"
  "\007chan_id\030\001 \001(\004B\0020\001\022\020\n\010capacity\030\002 \001(\003\022\025\n\r"
  "closed_height\030\003 \001(\r\022\'\n\nchan_point\030\004 \001(\0132"
  "\023.lnrpc.ChannelPoint\"\206\001\n\007HopHint\022\017\n\007node"
  "_id\030\001 \001(\t\022\023\n\007chan_id\030\002 \001(\004B\0020\001\022\025\n\rfee_ba"
  "se_msat\030\003 \001(\r\022#\n\033fee_proportional_millio"
  "nths\030\004 \001(\r\022\031\n\021cltv_expiry_delta\030\005 \001(\r\".\n"
  "\tRouteHint\022!\n\thop_hints\030\001 \003(\0132\016.lnrpc.Ho"
  "pHint\"\345\005\n\007Invoice\022\014\n\004memo\030\001 \001(\t\022\022\n\nr_pre"
  "image\030\003 \001(\014\022\016\n\006r_hash\030\004 \001(\014\022\r\n\005value\030\005 \001"
  "(\003\022\022\n\nvalue_msat\030\027 \001(\003\022\023\n\007settled\030\006 \001(\010B"
  "\002\030\001\022\025\n\rcreation_date\030\007 \001(\003\022\023\n\013settle_dat"
  "e\030\010 \001(\003\022\027\n\017payment_request\030\t \001(\t\022\030\n\020desc"
  "ription_hash\030\n \001(\014\022\016\n\006expiry\030\013 \001(\003\022\025\n\rfa"
  "llback_addr\030\014 \001(\t\022\023\n\013cltv_expiry\030\r \001(\004\022%"
  "\n\013route_hints\030\016 \003(\0132\020.lnrpc.RouteHint\022\017\n"
  "\007private\030\017 \001(\010\022\021\n\tadd_index\030\020 \001(\004\022\024\n\014set"
  "tle_index\030\021 \001(\004\022\024\n\010amt_paid\030\022 \001(\003B\002\030\001\022\024\n"
  "\014amt_paid_sat\030\023 \001(\003\022\025\n\ramt_paid_msat\030\024 \001"
  "(\003\022*\n\005state\030\025 \001(\0162\033.lnrpc.Invoice.Invoic"
  "eState\022!\n\005htlcs\030\026 \003(\0132\022.lnrpc.InvoiceHTL"
  "C\022.\n\010features\030\030 \003(\0132\034.lnrpc.Invoice.Feat"
  "uresEntry\022\022\n\nis_keysend\030\031 \001(\010\022\024\n\014payment"
  "_addr\030\032 \001(\014\032\?\n\rFeaturesEntry\022\013\n\003key\030\001 \001("
  "\r\022\035\n\005value\030\002 \001(\0132\016.lnrpc.Feature:\0028\001\"A\n\014"
  "InvoiceState\022\010\n\004OPEN\020\000\022\013\n\007SETTLED\020\001\022\014\n\010C"
  "ANCELED\020\002\022\014\n\010ACCEPTED\020\003J\004\010\002\020\003\"\363\002\n\013Invoic"
  "eHTLC\022\023\n\007chan_id\030\001 \001(\004B\0020\001\022\022\n\nhtlc_index"
  "\030\002 \001(\004\022\020\n\010amt_msat\030\003 \001(\004\022\025\n\raccept_heigh"
  "t\030\004 \001(\005\022\023\n\013accept_time\030\005 \001(\003\022\024\n\014resolve_"
  "time\030\006 \001(\003\022\025\n\rexpiry_height\030\007 \001(\005\022&\n\005sta"
  "te\030\010 \001(\0162\027.lnrpc.InvoiceHTLCState\022=\n\016cus"
  "tom_records\030\t \003(\0132%.lnrpc.InvoiceHTLC.Cu"
  "stomRecordsEntry\022\032\n\022mpp_total_amt_msat\030\n"
  " \001(\004\022\027\n\003amp\030\013 \001(\0132\n.lnrpc.AMP\0324\n\022CustomR"
  "ecordsEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001(\014:"
  "\0028\001\"^\n\003AMP\022\022\n\nroot_share\030\001 \001(\014\022\016\n\006set_id"
  "\030\002 \001(\014\022\023\n\013child_index\030\003 \001(\r\022\014\n\004hash\030\004 \001("
  "\014\022\020\n\010preimage\030\005 \001(\014\"f\n\022AddInvoiceRespons"
  "e\022\016\n\006r_hash\030\001 \001(\014\022\027\n\017payment_request\030\002 \001"
  "(\t\022\021\n\tadd_index\030\020 \001(\004\022\024\n\014payment_addr\030\021 "
  "\001(\014\"5\n\013PaymentHash\022\026\n\nr_hash_str\030\001 \001(\tB\002"
  "\030\001\022\016\n\006r_hash\030\002 \001(\014\"l\n\022ListInvoiceRequest"
  "\022\024\n\014pending_only\030\001 \001(\010\022\024\n\014index_offset\030\004"
  " \001(\004\022\030\n\020num_max_invoices\030\005 \001(\004\022\020\n\010revers"
  "ed\030\006 \001(\010\"n\n\023ListInvoiceResponse\022 \n\010invoi"
  "ces\030\001 \003(\0132\016.lnrpc.Invoice\022\031\n\021last_index_"
  "offset\030\002 \001(\004\022\032\n\022first_index_offset\030\003 \001(\004"
  "\">\n\023InvoiceSubscription\022\021\n\tadd_index\030\001 \001"
  "(\004\022\024\n\014settle_index\030\002 \001(\004\"\340\003\n\007Payment\022\024\n\014"
  "payment_hash\030\001 \001(\t\022\021\n\005value\030\002 \001(\003B\002\030\001\022\031\n"
  "\rcreation_date\030\003 \001(\003B\002\030\001\022\017\n\003fee\030\005 \001(\003B\002\030"
  "\001\022\030\n\020payment_preimage\030\006 \001(\t\022\021\n\tvalue_sat"
  "\030\007 \001(\003\022\022\n\nvalue_msat\030\010 \001(\003\022\027\n\017payment_re"
  "quest\030\t \001(\t\022,\n\006status\030\n \001(\0162\034.lnrpc.Paym"
  "ent.PaymentStatus\022\017\n\007fee_sat\030\013 \001(\003\022\020\n\010fe"
  "e_msat\030\014 \001(\003\022\030\n\020creation_time_ns\030\r \001(\003\022!"
  "\n\005htlcs\030\016 \003(\0132\022.lnrpc.HTLCAttempt\022\025\n\rpay"
  "ment_index\030\017 \001(\004\0223\n\016failure_reason\030\020 \001(\016"
  "2\033.lnrpc.PaymentFailureReason\"F\n\rPayment"
  "Status\022\013\n\007UNKNOWN\020\000\022\r\n\tIN_FLIGHT\020\001\022\r\n\tSU"
  "CCEEDED\020\002\022\n\n\006FAILED\020\003J\004\010\004\020\005\"\212\002\n\013HTLCAtte"
  "mpt\022\022\n\nattempt_id\030\007 \001(\004\022-\n\006status\030\001 \001(\0162"
  "\035.lnrpc.HTLCAttempt.HTLCStatus\022\033\n\005route\030"
  "\002 \001(\0132\014.lnrpc.Route\022\027\n\017attempt_time_ns\030\003"
  " \001(\003\022\027\n\017resolve_time_ns\030\004 \001(\003\022\037\n\007failure"
  "\030\005 \001(\0132\016.lnrpc.Failure\022\020\n\010preimage\030\006 \001(\014"
  "\"6\n\nHTLCStatus\022\r\n\tIN_FLIGHT\020\000\022\r\n\tSUCCEED"
  "ED\020\001\022\n\n\006FAILED\020\002\"o\n\023ListPaymentsRequest\022"
  "\032\n\022include_incomplete\030\001 \001(\010\022\024\n\014index_off"
  "set\030\002 \001(\004\022\024\n\014max_payments\030\003 \001(\004\022\020\n\010rever"
  "sed\030\004 \001(\010\"o\n\024ListPaymentsResponse\022 \n\010pay"
  "ments\030\001 \003(\0132\016.lnrpc.Payment\022\032\n\022first_ind"
  "ex_offset\030\002 \001(\004\022\031\n\021last_index_offset\030\003 \001"
  "(\004\"S\n\030DeleteAllPaymentsRequest\022\034\n\024failed"
  "_payments_only\030\001 \001(\010\022\031\n\021failed_htlcs_onl"
  "y\030\002 \001(\010\"\033\n\031DeleteAllPaymentsResponse\"f\n\025"
  "AbandonChannelRequest\022*\n\rchannel_point\030\001"
  " \001(\0132\023.lnrpc.ChannelPoint\022!\n\031pending_fun"
  "ding_shim_only\030\002 \001(\010\"\030\n\026AbandonChannelRe"
  "sponse\"5\n\021DebugLevelRequest\022\014\n\004show\030\001 \001("
  "\010\022\022\n\nlevel_spec\030\002 \001(\t\")\n\022DebugLevelRespo"
  "nse\022\023\n\013sub_systems\030\001 \001(\t\"\037\n\014PayReqString"
  "\022\017\n\007pay_req\030\001 \001(\t\"\206\003\n\006PayReq\022\023\n\013destinat"
  "ion\030\001 \001(\t\022\024\n\014payment_hash\030\002 \001(\t\022\024\n\014num_s"
  "atoshis\030\003 \001(\003\022\021\n\ttimestamp\030\004 \001(\003\022\016\n\006expi"
  "ry\030\005 \001(\003\022\023\n\013description\030\006 \001(\t\022\030\n\020descrip"
  "tion_hash\030\007 \001(\t\022\025\n\rfallback_addr\030\010 \001(\t\022\023"
  "\n\013cltv_expiry\030\t \001(\003\022%\n\013route_hints\030\n \003(\013"
  "2\020.lnrpc.RouteHint\022\024\n\014payment_addr\030\013 \001(\014"
  "\022\020\n\010num_msat\030\014 \001(\003\022-\n\010features\030\r \003(\0132\033.l"
  "nrpc.PayReq.FeaturesEntry\032\?\n\rFeaturesEnt"
  "ry\022\013\n\003key\030\001 \001(\r\022\035\n\005value\030\002 \001(\0132\016.lnrpc.F"
  "eature:\0028\001\">\n\007Feature\022\014\n\004name\030\002 \001(\t\022\023\n\013i"
  "s_required\030\003 \001(\010\022\020\n\010is_known\030\004 \001(\010\"\022\n\020Fe"
  "eReportRequest\"|\n\020ChannelFeeReport\022\023\n\007ch"
  "an_id\030\005 \001(\004B\0020\001\022\025\n\rchannel_point\030\001 \001(\t\022\025"
  "\n\rbase_fee_msat\030\002 \001(\003\022\023\n\013fee_per_mil\030\003 \001"
  "(\003\022\020\n\010fee_rate\030\004 \001(\001\"\204\001\n\021FeeReportRespon"
  "se\022-\n\014channel_fees\030\001 \003(\0132\027.lnrpc.Channel"
  "FeeReport\022\023\n\013day_fee_sum\030\002 \001(\004\022\024\n\014week_f"
  "ee_sum\030\003 \001(\004\022\025\n\rmonth_fee_sum\030\004 \001(\004\"\354\001\n\023"
  "PolicyUpdateRequest\022\020\n\006global\030\001 \001(\010H\000\022)\n"
  "\nchan_point\030\002 \001(\0132\023.lnrpc.ChannelPointH\000"
  "\022\025\n\rbase_fee_msat\030\003 \001(\003\022\020\n\010fee_rate\030\004 \001("
  "\001\022\027\n\017time_lock_delta\030\005 \001(\r\022\025\n\rmax_htlc_m"
  "sat\030\006 \001(\004\022\025\n\rmin_htlc_msat\030\007 \001(\004\022\037\n\027min_"
  "htlc_msat_specified\030\010 \001(\010B\007\n\005scope\"\026\n\024Po"
  "licyUpdateResponse\"n\n\030ForwardingHistoryR"
  "equest\022\022\n\nstart_time\030\001 \001(\004\022\020\n\010end_time\030\002"
  " \001(\004\022\024\n\014index_offset\030\003 \001(\r\022\026\n\016num_max_ev"
  "ents\030\004 \001(\r\"\332\001\n\017ForwardingEvent\022\025\n\ttimest"
  "amp\030\001 \001(\004B\002\030\001\022\026\n\nchan_id_in\030\002 \001(\004B\0020\001\022\027\n"
  "\013chan_id_out\030\004 \001(\004B\0020\001\022\016\n\006amt_in\030\005 \001(\004\022\017"
  "\n\007amt_out\030\006 \001(\004\022\013\n\003fee\030\007 \001(\004\022\020\n\010fee_msat"
  "\030\010 \001(\004\022\023\n\013amt_in_msat\030\t \001(\004\022\024\n\014amt_out_m"
  "sat\030\n \001(\004\022\024\n\014timestamp_ns\030\013 \001(\004\"i\n\031Forwa"
  "rdingHistoryResponse\0221\n\021forwarding_event"
  "s\030\001 \003(\0132\026.lnrpc.ForwardingEvent\022\031\n\021last_"
  "offset_index\030\002 \001(\r\"E\n\032ExportChannelBacku"
  "pRequest\022\'\n\nchan_point\030\001 \001(\0132\023.lnrpc.Cha"
  "nnelPoint\"M\n\rChannelBackup\022\'\n\nchan_point"
  "\030\001 \001(\0132\023.lnrpc.ChannelPoint\022\023\n\013chan_back"
  "up\030\002 \001(\014\"V\n\017MultiChanBackup\022(\n\013chan_poin"
  "ts\030\001 \003(\0132\023.lnrpc.ChannelPoint\022\031\n\021multi_c"
  "han_backup\030\002 \001(\014\"\031\n\027ChanBackupExportRequ"
  "est\"{\n\022ChanBackupSnapshot\0222\n\023single_chan"
  "_backups\030\001 \001(\0132\025.lnrpc.ChannelBackups\0221\n"
  "\021multi_chan_backup\030\002 \001(\0132\026.lnrpc.MultiCh"
  "anBackup\"<\n\016ChannelBackups\022*\n\014chan_backu"
  "ps\030\001 \003(\0132\024.lnrpc.ChannelBackup\"p\n\030Restor"
  "eChanBackupRequest\022-\n\014chan_backups\030\001 \001(\013"
  "2\025.lnrpc.ChannelBackupsH\000\022\033\n\021multi_chan_"
  "backup\030\002 \001(\014H\000B\010\n\006backup\"\027\n\025RestoreBacku"
  "pResponse\"\033\n\031ChannelBackupSubscription\"\032"
  "\n\030VerifyChanBackupResponse\"4\n\022MacaroonPe"
  "rmission\022\016\n\006entity\030\001 \001(\t\022\016\n\006action\030\002 \001(\t"
  "\"Z\n\023BakeMacaroonRequest\022.\n\013permissions\030\001"
  " \003(\0132\031.lnrpc.MacaroonPermission\022\023\n\013root_"
  "key_id\030\002 \001(\004\"(\n\024BakeMacaroonResponse\022\020\n\010"
  "macaroon\030\001 \001(\t\"\030\n\026ListMacaroonIDsRequest"
  "\"/\n\027ListMacaroonIDsResponse\022\024\n\014root_key_"
  "ids\030\001 \003(\004\".\n\027DeleteMacaroonIDRequest\022\023\n\013"
  "root_key_id\030\001 \001(\004\"+\n\030DeleteMacaroonIDRes"
  "ponse\022\017\n\007deleted\030\001 \001(\010\"H\n\026MacaroonPermis"
  "sionList\022.\n\013permissions\030\001 \003(\0132\031.lnrpc.Ma"
  "caroonPermission\"\030\n\026ListPermissionsReque"
  "st\"\305\001\n\027ListPermissionsResponse\022Q\n\022method"
  "_permissions\030\001 \003(\01325.lnrpc.ListPermissio"
  "nsResponse.MethodPermissionsEntry\032W\n\026Met"
  "hodPermissionsEntry\022\013\n\003key\030\001 \001(\t\022,\n\005valu"
  "e\030\002 \001(\0132\035.lnrpc.MacaroonPermissionList:\002"
  "8\001\"\325\007\n\007Failure\022(\n\004code\030\001 \001(\0162\032.lnrpc.Fai"
  "lure.FailureCode\022,\n\016channel_update\030\003 \001(\013"
  "2\024.lnrpc.ChannelUpdate\022\021\n\thtlc_msat\030\004 \001("
  "\004\022\025\n\ronion_sha_256\030\005 \001(\014\022\023\n\013cltv_expiry\030"
  "\006 \001(\r\022\r\n\005flags\030\007 \001(\r\022\034\n\024failure_source_i"
  "ndex\030\010 \001(\r\022\016\n\006height\030\t \001(\r\"\357\005\n\013FailureCo"
  "de\022\014\n\010RESERVED\020\000\022(\n$INCORRECT_OR_UNKNOWN"
  "_PAYMENT_DETAILS\020\001\022\034\n\030INCORRECT_PAYMENT_"
  "AMOUNT\020\002\022\037\n\033FINAL_INCORRECT_CLTV_EXPIRY\020"
  "\003\022\037\n\033FINAL_INCORRECT_HTLC_AMOUNT\020\004\022\031\n\025FI"
  "NAL_EXPIRY_TOO_SOON\020\005\022\021\n\rINVALID_REALM\020\006"
  "\022\023\n\017EXPIRY_TOO_SOON\020\007\022\031\n\025INVALID_ONION_V"
  "ERSION\020\010\022\026\n\022INVALID_ONION_HMAC\020\t\022\025\n\021INVA"
  "LID_ONION_KEY\020\n\022\030\n\024AMOUNT_BELOW_MINIMUM\020"
  "\013\022\024\n\020FEE_INSUFFICIENT\020\014\022\031\n\025INCORRECT_CLT"
  "V_EXPIRY\020\r\022\024\n\020CHANNEL_DISABLED\020\016\022\035\n\031TEMP"
  "ORARY_CHANNEL_FAILURE\020\017\022!\n\035REQUIRED_NODE"
  "_FEATURE_MISSING\020\020\022$\n REQUIRED_CHANNEL_F"
  "EATURE_MISSING\020\021\022\025\n\021UNKNOWN_NEXT_PEER\020\022\022"
  "\032\n\026TEMPORARY_NODE_FAILURE\020\023\022\032\n\026PERMANENT"
  "_NODE_FAILURE\020\024\022\035\n\031PERMANENT_CHANNEL_FAI"
  "LURE\020\025\022\022\n\016EXPIRY_TOO_FAR\020\026\022\017\n\013MPP_TIMEOU"
  "T\020\027\022\031\n\025INVALID_ONION_PAYLOAD\020\030\022\025\n\020INTERN"
  "AL_FAILURE\020\345\007\022\024\n\017UNKNOWN_FAILURE\020\346\007\022\027\n\022U"
  "NREADABLE_FAILURE\020\347\007J\004\010\002\020\003\"\232\002\n\rChannelUp"
  "date\022\021\n\tsignature\030\001 \001(\014\022\022\n\nchain_hash\030\002 "
  "\001(\014\022\023\n\007chan_id\030\003 \001(\004B\0020\001\022\021\n\ttimestamp\030\004 "
  "\001(\r\022\025\n\rmessage_flags\030\n \001(\r\022\025\n\rchannel_fl"
  "ags\030\005 \001(\r\022\027\n\017time_lock_delta\030\006 \001(\r\022\031\n\021ht"
  "lc_minimum_msat\030\007 \001(\004\022\020\n\010base_fee\030\010 \001(\r\022"
  "\020\n\010fee_rate\030\t \001(\r\022\031\n\021htlc_maximum_msat\030\013"
  " \001(\004\022\031\n\021extra_opaque_data\030\014 \001(\014\"F\n\nMacar"
  "oonId\022\r\n\005nonce\030\001 \001(\014\022\021\n\tstorageId\030\002 \001(\014\022"
  "\026\n\003ops\030\003 \003(\0132\t.lnrpc.Op\"%\n\002Op\022\016\n\006entity\030"
  "\001 \001(\t\022\017\n\007actions\030\002 \003(\t*}\n\013AddressType\022\027\n"
  "\023WITNESS_PUBKEY_HASH\020\000\022\026\n\022NESTED_PUBKEY_"
  "HASH\020\001\022\036\n\032UNUSED_WITNESS_PUBKEY_HASH\020\002\022\035"
  "\n\031UNUSED_NESTED_PUBKEY_HASH\020\003*^\n\016Commitm"
  "entType\022\n\n\006LEGACY\020\000\022\025\n\021STATIC_REMOTE_KEY"
  "\020\001\022\013\n\007ANCHORS\020\002\022\034\n\027UNKNOWN_COMMITMENT_TY"
  "PE\020\347\007*a\n\tInitiator\022\025\n\021INITIATOR_UNKNOWN\020"
  "\000\022\023\n\017INITIATOR_LOCAL\020\001\022\024\n\020INITIATOR_REMO"
  "TE\020\002\022\022\n\016INITIATOR_BOTH\020\003*`\n\016ResolutionTy"
  "pe\022\020\n\014TYPE_UNKNOWN\020\000\022\n\n\006ANCHOR\020\001\022\021\n\rINCO"
  "MING_HTLC\020\002\022\021\n\rOUTGOING_HTLC\020\003\022\n\n\006COMMIT"
  "\020\004*q\n\021ResolutionOutcome\022\023\n\017OUTCOME_UNKNO"
  "WN\020\000\022\013\n\007CLAIMED\020\001\022\r\n\tUNCLAIMED\020\002\022\r\n\tABAN"
  "DONED\020\003\022\017\n\013FIRST_STAGE\020\004\022\013\n\007TIMEOUT\020\005*9\n"
  "\016NodeMetricType\022\013\n\007UNKNOWN\020\000\022\032\n\026BETWEENN"
  "ESS_CENTRALITY\020\001*;\n\020InvoiceHTLCState\022\014\n\010"
  "ACCEPTED\020\000\022\013\n\007SETTLED\020\001\022\014\n\010CANCELED\020\002*\331\001"
  "\n\024PaymentFailureReason\022\027\n\023FAILURE_REASON"
  "_NONE\020\000\022\032\n\026FAILURE_REASON_TIMEOUT\020\001\022\033\n\027F"
  "AILURE_REASON_NO_ROUTE\020\002\022\030\n\024FAILURE_REAS"
  "ON_ERROR\020\003\022,\n(FAILURE_REASON_INCORRECT_P"
  "AYMENT_DETAILS\020\004\022\'\n#FAILURE_REASON_INSUF"
  "FICIENT_BALANCE\020\005*\265\004\n\nFeatureBit\022\030\n\024DATA"
  "LOSS_PROTECT_REQ\020\000\022\030\n\024DATALOSS_PROTECT_O"
  "PT\020\001\022\027\n\023INITIAL_ROUING_SYNC\020\003\022\037\n\033UPFRONT"
  "_SHUTDOWN_SCRIPT_REQ\020\004\022\037\n\033UPFRONT_SHUTDO"
  "WN_SCRIPT_OPT\020\005\022\026\n\022GOSSIP_QUERIES_REQ\020\006\022"
  "\026\n\022GOSSIP_QUERIES_OPT\020\007\022\021\n\rTLV_ONION_REQ"
  "\020\010\022\021\n\rTLV_ONION_OPT\020\t\022\032\n\026EXT_GOSSIP_QUER"
  "IES_REQ\020\n\022\032\n\026EXT_GOSSIP_QUERIES_OPT\020\013\022\031\n"
  "\025STATIC_REMOTE_KEY_REQ\020\014\022\031\n\025STATIC_REMOT"
  "E_KEY_OPT\020\r\022\024\n\020PAYMENT_ADDR_REQ\020\016\022\024\n\020PAY"
  "MENT_ADDR_OPT\020\017\022\013\n\007MPP_REQ\020\020\022\013\n\007MPP_OPT\020"
  "\021\022\026\n\022WUMBO_CHANNELS_REQ\020\022\022\026\n\022WUMBO_CHANN"
  "ELS_OPT\020\023\022\017\n\013ANCHORS_REQ\020\024\022\017\n\013ANCHORS_OP"
  "T\020\025\022\035\n\031ANCHORS_ZERO_FEE_HTLC_REQ\020\026\022\035\n\031AN"
  "CHORS_ZERO_FEE_HTLC_OPT\020\0272\311!\n\tLightning\022"
  "J\n\rWalletBalance\022\033.lnrpc.WalletBalanceRe"
  "quest\032\034.lnrpc.WalletBalanceResponse\022M\n\016C"
  "hannelBalance\022\034.lnrpc.ChannelBalanceRequ"
  "est\032\035.lnrpc.ChannelBalanceResponse\022K\n\017Ge"
  "tTransactions\022\035.lnrpc.GetTransactionsReq"
  "uest\032\031.lnrpc.TransactionDetails\022D\n\013Estim"
  "ateFee\022\031.lnrpc.EstimateFeeRequest\032\032.lnrp"
  "c.EstimateFeeResponse\022>\n\tSendCoins\022\027.lnr"
  "pc.SendCoinsRequest\032\030.lnrpc.SendCoinsRes"
  "ponse\022D\n\013ListUnspent\022\031.lnrpc.ListUnspent"
  "Request\032\032.lnrpc.ListUnspentResponse\022L\n\025S"
  "ubscribeTransactions\022\035.lnrpc.GetTransact"
  "ionsRequest\032\022.lnrpc.Transaction0\001\022;\n\010Sen"
  "dMany\022\026.lnrpc.SendManyRequest\032\027.lnrpc.Se"
  "ndManyResponse\022A\n\nNewAddress\022\030.lnrpc.New"
  "AddressRequest\032\031.lnrpc.NewAddressRespons"
  "e\022D\n\013SignMessage\022\031.lnrpc.SignMessageRequ"
  "est\032\032.lnrpc.SignMessageResponse\022J\n\rVerif"
  "yMessage\022\033.lnrpc.VerifyMessageRequest\032\034."
  "lnrpc.VerifyMessageResponse\022D\n\013ConnectPe"
  "er\022\031.lnrpc.ConnectPeerRequest\032\032.lnrpc.Co"
  "nnectPeerResponse\022M\n\016DisconnectPeer\022\034.ln"
  "rpc.DisconnectPeerRequest\032\035.lnrpc.Discon"
  "nectPeerResponse\022>\n\tListPeers\022\027.lnrpc.Li"
  "stPeersRequest\032\030.lnrpc.ListPeersResponse"
  "\022G\n\023SubscribePeerEvents\022\034.lnrpc.PeerEven"
  "tSubscription\032\020.lnrpc.PeerEvent0\001\0228\n\007Get"
  "Info\022\025.lnrpc.GetInfoRequest\032\026.lnrpc.GetI"
  "nfoResponse\022P\n\017GetRecoveryInfo\022\035.lnrpc.G"
  "etRecoveryInfoRequest\032\036.lnrpc.GetRecover"
  "yInfoResponse\022P\n\017PendingChannels\022\035.lnrpc"
  ".PendingChannelsRequest\032\036.lnrpc.PendingC"
  "hannelsResponse\022G\n\014ListChannels\022\032.lnrpc."
  "ListChannelsRequest\032\033.lnrpc.ListChannels"
  "Response\022V\n\026SubscribeChannelEvents\022\037.lnr"
  "pc.ChannelEventSubscription\032\031.lnrpc.Chan"
  "nelEventUpdate0\001\022M\n\016ClosedChannels\022\034.lnr"
  "pc.ClosedChannelsRequest\032\035.lnrpc.ClosedC"
  "hannelsResponse\022A\n\017OpenChannelSync\022\031.lnr"
  "pc.OpenChannelRequest\032\023.lnrpc.ChannelPoi"
  "nt\022C\n\013OpenChannel\022\031.lnrpc.OpenChannelReq"
  "uest\032\027.lnrpc.OpenStatusUpdate0\001\022L\n\020Fundi"
  "ngStateStep\022\033.lnrpc.FundingTransitionMsg"
  "\032\033.lnrpc.FundingStateStepResp\022P\n\017Channel"
  "Acceptor\022\034.lnrpc.ChannelAcceptResponse\032\033"
  ".lnrpc.ChannelAcceptRequest(\0010\001\022F\n\014Close"
  "Channel\022\032.lnrpc.CloseChannelRequest\032\030.ln"
  "rpc.CloseStatusUpdate0\001\022M\n\016AbandonChanne"
  "l\022\034.lnrpc.AbandonChannelRequest\032\035.lnrpc."
  "AbandonChannelResponse\022\?\n\013SendPayment\022\022."
  "lnrpc.SendRequest\032\023.lnrpc.SendResponse\"\003"
  "\210\002\001(\0010\001\022:\n\017SendPaymentSync\022\022.lnrpc.SendR"
  "equest\032\023.lnrpc.SendResponse\022F\n\013SendToRou"
  "te\022\031.lnrpc.SendToRouteRequest\032\023.lnrpc.Se"
  "ndResponse\"\003\210\002\001(\0010\001\022A\n\017SendToRouteSync\022\031"
  ".lnrpc.SendToRouteRequest\032\023.lnrpc.SendRe"
  "sponse\0227\n\nAddInvoice\022\016.lnrpc.Invoice\032\031.l"
  "nrpc.AddInvoiceResponse\022E\n\014ListInvoices\022"
  "\031.lnrpc.ListInvoiceRequest\032\032.lnrpc.ListI"
  "nvoiceResponse\0223\n\rLookupInvoice\022\022.lnrpc."
  "PaymentHash\032\016.lnrpc.Invoice\022A\n\021Subscribe"
  "Invoices\022\032.lnrpc.InvoiceSubscription\032\016.l"
  "nrpc.Invoice0\001\0222\n\014DecodePayReq\022\023.lnrpc.P"
  "ayReqString\032\r.lnrpc.PayReq\022G\n\014ListPaymen"
  "ts\022\032.lnrpc.ListPaymentsRequest\032\033.lnrpc.L"
  "istPaymentsResponse\022V\n\021DeleteAllPayments"
  "\022\037.lnrpc.DeleteAllPaymentsRequest\032 .lnrp"
  "c.DeleteAllPaymentsResponse\022@\n\rDescribeG"
  "raph\022\032.lnrpc.ChannelGraphRequest\032\023.lnrpc"
  ".ChannelGraph\022G\n\016GetNodeMetrics\022\031.lnrpc."
  "NodeMetricsRequest\032\032.lnrpc.NodeMetricsRe"
  "sponse\0229\n\013GetChanInfo\022\026.lnrpc.ChanInfoRe"
  "quest\032\022.lnrpc.ChannelEdge\0226\n\013GetNodeInfo"
  "\022\026.lnrpc.NodeInfoRequest\032\017.lnrpc.NodeInf"
  "o\022D\n\013QueryRoutes\022\031.lnrpc.QueryRoutesRequ"
  "est\032\032.lnrpc.QueryRoutesResponse\022\?\n\016GetNe"
  "tworkInfo\022\031.lnrpc.NetworkInfoRequest\032\022.l"
  "nrpc.NetworkInfo\0225\n\nStopDaemon\022\022.lnrpc.S"
  "topRequest\032\023.lnrpc.StopResponse\022W\n\025Subsc"
  "ribeChannelGraph\022 .lnrpc.GraphTopologySu"
  "bscription\032\032.lnrpc.GraphTopologyUpdate0\001"
  "\022A\n\nDebugLevel\022\030.lnrpc.DebugLevelRequest"
  "\032\031.lnrpc.DebugLevelResponse\022>\n\tFeeReport"
  "\022\027.lnrpc.FeeReportRequest\032\030.lnrpc.FeeRep"
  "ortResponse\022N\n\023UpdateChannelPolicy\022\032.lnr"
  "pc.PolicyUpdateRequest\032\033.lnrpc.PolicyUpd"
  "ateResponse\022V\n\021ForwardingHistory\022\037.lnrpc"
  ".ForwardingHistoryRequest\032 .lnrpc.Forwar"
  "dingHistoryResponse\022N\n\023ExportChannelBack"
  "up\022!.lnrpc.ExportChannelBackupRequest\032\024."
  "lnrpc.ChannelBackup\022T\n\027ExportAllChannelB"
  "ackups\022\036.lnrpc.ChanBackupExportRequest\032\031"
  ".lnrpc.ChanBackupSnapshot\022N\n\020VerifyChanB"
  "ackup\022\031.lnrpc.ChanBackupSnapshot\032\037.lnrpc"
  ".VerifyChanBackupResponse\022V\n\025RestoreChan"
  "nelBackups\022\037.lnrpc.RestoreChanBackupRequ"
  "est\032\034.lnrpc.RestoreBackupResponse\022X\n\027Sub"
  "scribeChannelBackups\022 .lnrpc.ChannelBack"
  "upSubscription\032\031.lnrpc.ChanBackupSnapsho"
  "t0\001\022G\n\014BakeMacaroon\022\032.lnrpc.BakeMacaroon"
  "Request\032\033.lnrpc.BakeMacaroonResponse\022P\n\017"
  "ListMacaroonIDs\022\035.lnrpc.ListMacaroonIDsR"
  "equest\032\036.lnrpc.ListMacaroonIDsResponse\022S"
  "\n\020DeleteMacaroonID\022\036.lnrpc.DeleteMacaroo"
  "nIDRequest\032\037.lnrpc.DeleteMacaroonIDRespo"
  "nse\022P\n\017ListPermissions\022\035.lnrpc.ListPermi"
  "ssionsRequest\032\036.lnrpc.ListPermissionsRes"
  "ponseB\'Z%github.com/lightningnetwork/lnd"
  "/lnrpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rpc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rpc_2eproto_sccs[185] = {
  &scc_info_AMP_rpc_2eproto.base,
  &scc_info_AbandonChannelRequest_rpc_2eproto.base,
  &scc_info_AbandonChannelResponse_rpc_2eproto.base,
  &scc_info_AddInvoiceResponse_rpc_2eproto.base,
  &scc_info_Amount_rpc_2eproto.base,
  &scc_info_BakeMacaroonRequest_rpc_2eproto.base,
  &scc_info_BakeMacaroonResponse_rpc_2eproto.base,
  &scc_info_Chain_rpc_2eproto.base,
  &scc_info_ChanBackupExportRequest_rpc_2eproto.base,
  &scc_info_ChanBackupSnapshot_rpc_2eproto.base,
  &scc_info_ChanInfoRequest_rpc_2eproto.base,
  &scc_info_ChanPointShim_rpc_2eproto.base,
  &scc_info_Channel_rpc_2eproto.base,
  &scc_info_ChannelAcceptRequest_rpc_2eproto.base,
  &scc_info_ChannelAcceptResponse_rpc_2eproto.base,
  &scc_info_ChannelBackup_rpc_2eproto.base,
  &scc_info_ChannelBackupSubscription_rpc_2eproto.base,
  &scc_info_ChannelBackups_rpc_2eproto.base,
  &scc_info_ChannelBalanceRequest_rpc_2eproto.base,
  &scc_info_ChannelBalanceResponse_rpc_2eproto.base,
  &scc_info_ChannelCloseSummary_rpc_2eproto.base,
  &scc_info_ChannelCloseUpdate_rpc_2eproto.base,
  &scc_info_ChannelConstraints_rpc_2eproto.base,
  &scc_info_ChannelEdge_rpc_2eproto.base,
  &scc_info_ChannelEdgeUpdate_rpc_2eproto.base,
  &scc_info_ChannelEventSubscription_rpc_2eproto.base,
  &scc_info_ChannelEventUpdate_rpc_2eproto.base,
  &scc_info_ChannelFeeReport_rpc_2eproto.base,
  &scc_info_ChannelGraph_rpc_2eproto.base,
  &scc_info_ChannelGraphRequest_rpc_2eproto.base,
  &scc_info_ChannelOpenUpdate_rpc_2eproto.base,
  &scc_info_ChannelPoint_rpc_2eproto.base,
  &scc_info_ChannelUpdate_rpc_2eproto.base,
  &scc_info_CloseChannelRequest_rpc_2eproto.base,
  &scc_info_CloseStatusUpdate_rpc_2eproto.base,
  &scc_info_ClosedChannelUpdate_rpc_2eproto.base,
  &scc_info_ClosedChannelsRequest_rpc_2eproto.base,
  &scc_info_ClosedChannelsResponse_rpc_2eproto.base,
  &scc_info_ConfirmationUpdate_rpc_2eproto.base,
  &scc_info_ConnectPeerRequest_rpc_2eproto.base,
  &scc_info_ConnectPeerResponse_rpc_2eproto.base,
  &scc_info_DebugLevelRequest_rpc_2eproto.base,
  &scc_info_DebugLevelResponse_rpc_2eproto.base,
  &scc_info_DeleteAllPaymentsRequest_rpc_2eproto.base,
  &scc_info_DeleteAllPaymentsResponse_rpc_2eproto.base,
  &scc_info_DeleteMacaroonIDRequest_rpc_2eproto.base,
  &scc_info_DeleteMacaroonIDResponse_rpc_2eproto.base,
  &scc_info_DisconnectPeerRequest_rpc_2eproto.base,
  &scc_info_DisconnectPeerResponse_rpc_2eproto.base,
  &scc_info_EdgeLocator_rpc_2eproto.base,
  &scc_info_EstimateFeeRequest_rpc_2eproto.base,
  &scc_info_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_EstimateFeeResponse_rpc_2eproto.base,
  &scc_info_ExportChannelBackupRequest_rpc_2eproto.base,
  &scc_info_Failure_rpc_2eproto.base,
  &scc_info_Feature_rpc_2eproto.base,
  &scc_info_FeeLimit_rpc_2eproto.base,
  &scc_info_FeeReportRequest_rpc_2eproto.base,
  &scc_info_FeeReportResponse_rpc_2eproto.base,
  &scc_info_FloatMetric_rpc_2eproto.base,
  &scc_info_ForwardingEvent_rpc_2eproto.base,
  &scc_info_ForwardingHistoryRequest_rpc_2eproto.base,
  &scc_info_ForwardingHistoryResponse_rpc_2eproto.base,
  &scc_info_FundingPsbtFinalize_rpc_2eproto.base,
  &scc_info_FundingPsbtVerify_rpc_2eproto.base,
  &scc_info_FundingShim_rpc_2eproto.base,
  &scc_info_FundingShimCancel_rpc_2eproto.base,
  &scc_info_FundingStateStepResp_rpc_2eproto.base,
  &scc_info_FundingTransitionMsg_rpc_2eproto.base,
  &scc_info_GetInfoRequest_rpc_2eproto.base,
  &scc_info_GetInfoResponse_rpc_2eproto.base,
  &scc_info_GetInfoResponse_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_GetRecoveryInfoRequest_rpc_2eproto.base,
  &scc_info_GetRecoveryInfoResponse_rpc_2eproto.base,
  &scc_info_GetTransactionsRequest_rpc_2eproto.base,
  &scc_info_GraphTopologySubscription_rpc_2eproto.base,
  &scc_info_GraphTopologyUpdate_rpc_2eproto.base,
  &scc_info_HTLC_rpc_2eproto.base,
  &scc_info_HTLCAttempt_rpc_2eproto.base,
  &scc_info_Hop_rpc_2eproto.base,
  &scc_info_Hop_CustomRecordsEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_HopHint_rpc_2eproto.base,
  &scc_info_Invoice_rpc_2eproto.base,
  &scc_info_Invoice_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_InvoiceHTLC_rpc_2eproto.base,
  &scc_info_InvoiceHTLC_CustomRecordsEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_InvoiceSubscription_rpc_2eproto.base,
  &scc_info_KeyDescriptor_rpc_2eproto.base,
  &scc_info_KeyLocator_rpc_2eproto.base,
  &scc_info_LightningAddress_rpc_2eproto.base,
  &scc_info_LightningNode_rpc_2eproto.base,
  &scc_info_LightningNode_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_ListChannelsRequest_rpc_2eproto.base,
  &scc_info_ListChannelsResponse_rpc_2eproto.base,
  &scc_info_ListInvoiceRequest_rpc_2eproto.base,
  &scc_info_ListInvoiceResponse_rpc_2eproto.base,
  &scc_info_ListMacaroonIDsRequest_rpc_2eproto.base,
  &scc_info_ListMacaroonIDsResponse_rpc_2eproto.base,
  &scc_info_ListPaymentsRequest_rpc_2eproto.base,
  &scc_info_ListPaymentsResponse_rpc_2eproto.base,
  &scc_info_ListPeersRequest_rpc_2eproto.base,
  &scc_info_ListPeersResponse_rpc_2eproto.base,
  &scc_info_ListPermissionsRequest_rpc_2eproto.base,
  &scc_info_ListPermissionsResponse_rpc_2eproto.base,
  &scc_info_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_ListUnspentRequest_rpc_2eproto.base,
  &scc_info_ListUnspentResponse_rpc_2eproto.base,
  &scc_info_MPPRecord_rpc_2eproto.base,
  &scc_info_MacaroonId_rpc_2eproto.base,
  &scc_info_MacaroonPermission_rpc_2eproto.base,
  &scc_info_MacaroonPermissionList_rpc_2eproto.base,
  &scc_info_MultiChanBackup_rpc_2eproto.base,
  &scc_info_NetworkInfo_rpc_2eproto.base,
  &scc_info_NetworkInfoRequest_rpc_2eproto.base,
  &scc_info_NewAddressRequest_rpc_2eproto.base,
  &scc_info_NewAddressResponse_rpc_2eproto.base,
  &scc_info_NodeAddress_rpc_2eproto.base,
  &scc_info_NodeInfo_rpc_2eproto.base,
  &scc_info_NodeInfoRequest_rpc_2eproto.base,
  &scc_info_NodeMetricsRequest_rpc_2eproto.base,
  &scc_info_NodeMetricsResponse_rpc_2eproto.base,
  &scc_info_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_NodePair_rpc_2eproto.base,
  &scc_info_NodeUpdate_rpc_2eproto.base,
  &scc_info_NodeUpdate_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_Op_rpc_2eproto.base,
  &scc_info_OpenChannelRequest_rpc_2eproto.base,
  &scc_info_OpenStatusUpdate_rpc_2eproto.base,
  &scc_info_OutPoint_rpc_2eproto.base,
  &scc_info_PayReq_rpc_2eproto.base,
  &scc_info_PayReq_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_PayReqString_rpc_2eproto.base,
  &scc_info_Payment_rpc_2eproto.base,
  &scc_info_PaymentHash_rpc_2eproto.base,
  &scc_info_Peer_rpc_2eproto.base,
  &scc_info_Peer_FeaturesEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_PeerEvent_rpc_2eproto.base,
  &scc_info_PeerEventSubscription_rpc_2eproto.base,
  &scc_info_PendingChannelsRequest_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_Commitments_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto.base,
  &scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto.base,
  &scc_info_PendingHTLC_rpc_2eproto.base,
  &scc_info_PendingUpdate_rpc_2eproto.base,
  &scc_info_PolicyUpdateRequest_rpc_2eproto.base,
  &scc_info_PolicyUpdateResponse_rpc_2eproto.base,
  &scc_info_PsbtShim_rpc_2eproto.base,
  &scc_info_QueryRoutesRequest_rpc_2eproto.base,
  &scc_info_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_QueryRoutesResponse_rpc_2eproto.base,
  &scc_info_ReadyForPsbtFunding_rpc_2eproto.base,
  &scc_info_Resolution_rpc_2eproto.base,
  &scc_info_RestoreBackupResponse_rpc_2eproto.base,
  &scc_info_RestoreChanBackupRequest_rpc_2eproto.base,
  &scc_info_Route_rpc_2eproto.base,
  &scc_info_RouteHint_rpc_2eproto.base,
  &scc_info_RoutingPolicy_rpc_2eproto.base,
  &scc_info_SendCoinsRequest_rpc_2eproto.base,
  &scc_info_SendCoinsResponse_rpc_2eproto.base,
  &scc_info_SendManyRequest_rpc_2eproto.base,
  &scc_info_SendManyRequest_AddrToAmountEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_SendManyResponse_rpc_2eproto.base,
  &scc_info_SendRequest_rpc_2eproto.base,
  &scc_info_SendRequest_DestCustomRecordsEntry_DoNotUse_rpc_2eproto.base,
  &scc_info_SendResponse_rpc_2eproto.base,
  &scc_info_SendToRouteRequest_rpc_2eproto.base,
  &scc_info_SignMessageRequest_rpc_2eproto.base,
  &scc_info_SignMessageResponse_rpc_2eproto.base,
  &scc_info_StopRequest_rpc_2eproto.base,
  &scc_info_StopResponse_rpc_2eproto.base,
  &scc_info_TimestampedError_rpc_2eproto.base,
  &scc_info_Transaction_rpc_2eproto.base,
  &scc_info_TransactionDetails_rpc_2eproto.base,
  &scc_info_Utxo_rpc_2eproto.base,
  &scc_info_VerifyChanBackupResponse_rpc_2eproto.base,
  &scc_info_VerifyMessageRequest_rpc_2eproto.base,
  &scc_info_VerifyMessageResponse_rpc_2eproto.base,
  &scc_info_WalletAccountBalance_rpc_2eproto.base,
  &scc_info_WalletBalanceRequest_rpc_2eproto.base,
  &scc_info_WalletBalanceResponse_rpc_2eproto.base,
  &scc_info_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_rpc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rpc_2eproto_once;
static bool descriptor_table_rpc_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto = {
  &descriptor_table_rpc_2eproto_initialized, descriptor_table_protodef_rpc_2eproto, "rpc.proto", 29734,
  &descriptor_table_rpc_2eproto_once, descriptor_table_rpc_2eproto_sccs, descriptor_table_rpc_2eproto_deps, 185, 0,
  schemas, file_default_instances, TableStruct_rpc_2eproto::offsets,
  file_level_metadata_rpc_2eproto, 185, file_level_enum_descriptors_rpc_2eproto, file_level_service_descriptors_rpc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rpc_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rpc_2eproto), true);
namespace lnrpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelCloseSummary_ClosureType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[0];
}
bool ChannelCloseSummary_ClosureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::COOPERATIVE_CLOSE;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::LOCAL_FORCE_CLOSE;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::REMOTE_FORCE_CLOSE;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::BREACH_CLOSE;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::FUNDING_CANCELED;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::ABANDONED;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::ClosureType_MIN;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary::ClosureType_MAX;
constexpr int ChannelCloseSummary::ClosureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Peer_SyncType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[1];
}
bool Peer_SyncType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Peer_SyncType Peer::UNKNOWN_SYNC;
constexpr Peer_SyncType Peer::ACTIVE_SYNC;
constexpr Peer_SyncType Peer::PASSIVE_SYNC;
constexpr Peer_SyncType Peer::PINNED_SYNC;
constexpr Peer_SyncType Peer::SyncType_MIN;
constexpr Peer_SyncType Peer::SyncType_MAX;
constexpr int Peer::SyncType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[2];
}
bool PeerEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PeerEvent_EventType PeerEvent::PEER_ONLINE;
constexpr PeerEvent_EventType PeerEvent::PEER_OFFLINE;
constexpr PeerEvent_EventType PeerEvent::EventType_MIN;
constexpr PeerEvent_EventType PeerEvent::EventType_MAX;
constexpr int PeerEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[3];
}
bool PendingChannelsResponse_ForceClosedChannel_AnchorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::LIMBO;
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::RECOVERED;
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::LOST;
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::AnchorState_MIN;
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::AnchorState_MAX;
constexpr int PendingChannelsResponse_ForceClosedChannel::AnchorState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelEventUpdate_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[4];
}
bool ChannelEventUpdate_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::OPEN_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::CLOSED_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::ACTIVE_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::INACTIVE_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::PENDING_OPEN_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::UpdateType_MIN;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate::UpdateType_MAX;
constexpr int ChannelEventUpdate::UpdateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Invoice_InvoiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[5];
}
bool Invoice_InvoiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Invoice_InvoiceState Invoice::OPEN;
constexpr Invoice_InvoiceState Invoice::SETTLED;
constexpr Invoice_InvoiceState Invoice::CANCELED;
constexpr Invoice_InvoiceState Invoice::ACCEPTED;
constexpr Invoice_InvoiceState Invoice::InvoiceState_MIN;
constexpr Invoice_InvoiceState Invoice::InvoiceState_MAX;
constexpr int Invoice::InvoiceState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Payment_PaymentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[6];
}
bool Payment_PaymentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Payment_PaymentStatus Payment::UNKNOWN;
constexpr Payment_PaymentStatus Payment::IN_FLIGHT;
constexpr Payment_PaymentStatus Payment::SUCCEEDED;
constexpr Payment_PaymentStatus Payment::FAILED;
constexpr Payment_PaymentStatus Payment::PaymentStatus_MIN;
constexpr Payment_PaymentStatus Payment::PaymentStatus_MAX;
constexpr int Payment::PaymentStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HTLCAttempt_HTLCStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[7];
}
bool HTLCAttempt_HTLCStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HTLCAttempt_HTLCStatus HTLCAttempt::IN_FLIGHT;
constexpr HTLCAttempt_HTLCStatus HTLCAttempt::SUCCEEDED;
constexpr HTLCAttempt_HTLCStatus HTLCAttempt::FAILED;
constexpr HTLCAttempt_HTLCStatus HTLCAttempt::HTLCStatus_MIN;
constexpr HTLCAttempt_HTLCStatus HTLCAttempt::HTLCStatus_MAX;
constexpr int HTLCAttempt::HTLCStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Failure_FailureCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[8];
}
bool Failure_FailureCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 997:
    case 998:
    case 999:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Failure_FailureCode Failure::RESERVED;
constexpr Failure_FailureCode Failure::INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS;
constexpr Failure_FailureCode Failure::INCORRECT_PAYMENT_AMOUNT;
constexpr Failure_FailureCode Failure::FINAL_INCORRECT_CLTV_EXPIRY;
constexpr Failure_FailureCode Failure::FINAL_INCORRECT_HTLC_AMOUNT;
constexpr Failure_FailureCode Failure::FINAL_EXPIRY_TOO_SOON;
constexpr Failure_FailureCode Failure::INVALID_REALM;
constexpr Failure_FailureCode Failure::EXPIRY_TOO_SOON;
constexpr Failure_FailureCode Failure::INVALID_ONION_VERSION;
constexpr Failure_FailureCode Failure::INVALID_ONION_HMAC;
constexpr Failure_FailureCode Failure::INVALID_ONION_KEY;
constexpr Failure_FailureCode Failure::AMOUNT_BELOW_MINIMUM;
constexpr Failure_FailureCode Failure::FEE_INSUFFICIENT;
constexpr Failure_FailureCode Failure::INCORRECT_CLTV_EXPIRY;
constexpr Failure_FailureCode Failure::CHANNEL_DISABLED;
constexpr Failure_FailureCode Failure::TEMPORARY_CHANNEL_FAILURE;
constexpr Failure_FailureCode Failure::REQUIRED_NODE_FEATURE_MISSING;
constexpr Failure_FailureCode Failure::REQUIRED_CHANNEL_FEATURE_MISSING;
constexpr Failure_FailureCode Failure::UNKNOWN_NEXT_PEER;
constexpr Failure_FailureCode Failure::TEMPORARY_NODE_FAILURE;
constexpr Failure_FailureCode Failure::PERMANENT_NODE_FAILURE;
constexpr Failure_FailureCode Failure::PERMANENT_CHANNEL_FAILURE;
constexpr Failure_FailureCode Failure::EXPIRY_TOO_FAR;
constexpr Failure_FailureCode Failure::MPP_TIMEOUT;
constexpr Failure_FailureCode Failure::INVALID_ONION_PAYLOAD;
constexpr Failure_FailureCode Failure::INTERNAL_FAILURE;
constexpr Failure_FailureCode Failure::UNKNOWN_FAILURE;
constexpr Failure_FailureCode Failure::UNREADABLE_FAILURE;
constexpr Failure_FailureCode Failure::FailureCode_MIN;
constexpr Failure_FailureCode Failure::FailureCode_MAX;
constexpr int Failure::FailureCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[9];
}
bool AddressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommitmentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[10];
}
bool CommitmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 999:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Initiator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[11];
}
bool Initiator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolutionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[12];
}
bool ResolutionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolutionOutcome_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[13];
}
bool ResolutionOutcome_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeMetricType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[14];
}
bool NodeMetricType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvoiceHTLCState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[15];
}
bool InvoiceHTLCState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentFailureReason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[16];
}
bool PaymentFailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureBit_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rpc_2eproto);
  return file_level_enum_descriptors_rpc_2eproto[17];
}
bool FeatureBit_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Utxo::InitAsDefaultInstance() {
  ::lnrpc::_Utxo_default_instance_._instance.get_mutable()->outpoint_ = const_cast< ::lnrpc::OutPoint*>(
      ::lnrpc::OutPoint::internal_default_instance());
}
class Utxo::_Internal {
 public:
  static const ::lnrpc::OutPoint& outpoint(const Utxo* msg);
};

const ::lnrpc::OutPoint&
Utxo::_Internal::outpoint(const Utxo* msg) {
  return *msg->outpoint_;
}
Utxo::Utxo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Utxo)
}
Utxo::Utxo(const Utxo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  pk_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pk_script().empty()) {
    pk_script_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pk_script_);
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::lnrpc::OutPoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  ::memcpy(&amount_sat_, &from.amount_sat_,
    static_cast<size_t>(reinterpret_cast<char*>(&address_type_) -
    reinterpret_cast<char*>(&amount_sat_)) + sizeof(address_type_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Utxo)
}

void Utxo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Utxo_rpc_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pk_script_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_type_) -
      reinterpret_cast<char*>(&outpoint_)) + sizeof(address_type_));
}

Utxo::~Utxo() {
  // @@protoc_insertion_point(destructor:lnrpc.Utxo)
  SharedDtor();
}

void Utxo::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pk_script_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
}

void Utxo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Utxo& Utxo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Utxo_rpc_2eproto.base);
  return *internal_default_instance();
}


void Utxo::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Utxo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pk_script_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  ::memset(&amount_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&address_type_) -
      reinterpret_cast<char*>(&amount_sat_)) + sizeof(address_type_));
  _internal_metadata_.Clear();
}

const char* Utxo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.AddressType address_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_address_type(static_cast<::lnrpc::AddressType>(val));
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Utxo.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount_sat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amount_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pk_script = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pk_script();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Utxo.pk_script"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.OutPoint outpoint = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 confirmations = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Utxo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Utxo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.AddressType address_type = 1;
  if (this->address_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_address_type(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Utxo.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // int64 amount_sat = 3;
  if (this->amount_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amount_sat(), target);
  }

  // string pk_script = 4;
  if (this->pk_script().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pk_script().data(), static_cast<int>(this->_internal_pk_script().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Utxo.pk_script");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pk_script(), target);
  }

  // .lnrpc.OutPoint outpoint = 5;
  if (this->has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::outpoint(this), target, stream);
  }

  // int64 confirmations = 6;
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_confirmations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Utxo)
  return target;
}

size_t Utxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Utxo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string pk_script = 4;
  if (this->pk_script().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pk_script());
  }

  // .lnrpc.OutPoint outpoint = 5;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // int64 amount_sat = 3;
  if (this->amount_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount_sat());
  }

  // int64 confirmations = 6;
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_confirmations());
  }

  // .lnrpc.AddressType address_type = 1;
  if (this->address_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_address_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Utxo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Utxo)
  GOOGLE_DCHECK_NE(&from, this);
  const Utxo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Utxo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Utxo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Utxo)
    MergeFrom(*source);
  }
}

void Utxo::MergeFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Utxo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.pk_script().size() > 0) {

    pk_script_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pk_script_);
  }
  if (from.has_outpoint()) {
    _internal_mutable_outpoint()->::lnrpc::OutPoint::MergeFrom(from._internal_outpoint());
  }
  if (from.amount_sat() != 0) {
    _internal_set_amount_sat(from._internal_amount_sat());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
  if (from.address_type() != 0) {
    _internal_set_address_type(from._internal_address_type());
  }
}

void Utxo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utxo::CopyFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utxo::IsInitialized() const {
  return true;
}

void Utxo::InternalSwap(Utxo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pk_script_.Swap(&other->pk_script_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outpoint_, other->outpoint_);
  swap(amount_sat_, other->amount_sat_);
  swap(confirmations_, other->confirmations_);
  swap(address_type_, other->address_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Utxo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Transaction::InitAsDefaultInstance() {
}
class Transaction::_Internal {
 public:
};

Transaction::Transaction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dest_addresses_(from.dest_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tx_hash().empty()) {
    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  raw_tx_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_tx_hex().empty()) {
    raw_tx_hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_tx_hex_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_fees_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(total_fees_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Transaction)
}

void Transaction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Transaction_rpc_2eproto.base);
  tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_tx_hex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_fees_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(total_fees_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:lnrpc.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_tx_hex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Transaction& Transaction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Transaction_rpc_2eproto.base);
  return *internal_default_instance();
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_addresses_.Clear();
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  raw_tx_hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_fees_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(total_fees_));
  _internal_metadata_.Clear();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tx_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Transaction.tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_confirmations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Transaction.block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_height = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_stamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_fees = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          total_fees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string dest_addresses = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_dest_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Transaction.dest_addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // string raw_tx_hex = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_raw_tx_hex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Transaction.raw_tx_hex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Transaction.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Transaction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Transaction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_hash().data(), static_cast<int>(this->_internal_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Transaction.tx_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_hash(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // int32 num_confirmations = 3;
  if (this->num_confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_confirmations(), target);
  }

  // string block_hash = 4;
  if (this->block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_hash().data(), static_cast<int>(this->_internal_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Transaction.block_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_block_hash(), target);
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_block_height(), target);
  }

  // int64 time_stamp = 6;
  if (this->time_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_time_stamp(), target);
  }

  // int64 total_fees = 7;
  if (this->total_fees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_total_fees(), target);
  }

  // repeated string dest_addresses = 8;
  for (int i = 0, n = this->_internal_dest_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_dest_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Transaction.dest_addresses");
    target = stream->WriteString(8, s, target);
  }

  // string raw_tx_hex = 9;
  if (this->raw_tx_hex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_tx_hex().data(), static_cast<int>(this->_internal_raw_tx_hex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Transaction.raw_tx_hex");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_raw_tx_hex(), target);
  }

  // string label = 10;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Transaction.label");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_label(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Transaction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string dest_addresses = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(dest_addresses_.size());
  for (int i = 0, n = dest_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      dest_addresses_.Get(i));
  }

  // string tx_hash = 1;
  if (this->tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_hash());
  }

  // string block_hash = 4;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_hash());
  }

  // string raw_tx_hex = 9;
  if (this->raw_tx_hex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_raw_tx_hex());
  }

  // string label = 10;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // int32 num_confirmations = 3;
  if (this->num_confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_confirmations());
  }

  // int32 block_height = 5;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_height());
  }

  // int64 time_stamp = 6;
  if (this->time_stamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_stamp());
  }

  // int64 total_fees = 7;
  if (this->total_fees() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_fees());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Transaction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  const Transaction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Transaction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Transaction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Transaction)
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dest_addresses_.MergeFrom(from.dest_addresses_);
  if (from.tx_hash().size() > 0) {

    tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  if (from.block_hash().size() > 0) {

    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  if (from.raw_tx_hex().size() > 0) {

    raw_tx_hex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_tx_hex_);
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.num_confirmations() != 0) {
    _internal_set_num_confirmations(from._internal_num_confirmations());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.time_stamp() != 0) {
    _internal_set_time_stamp(from._internal_time_stamp());
  }
  if (from.total_fees() != 0) {
    _internal_set_total_fees(from._internal_total_fees());
  }
}

void Transaction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dest_addresses_.InternalSwap(&other->dest_addresses_);
  tx_hash_.Swap(&other->tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  raw_tx_hex_.Swap(&other->raw_tx_hex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(num_confirmations_, other->num_confirmations_);
  swap(block_height_, other->block_height_);
  swap(time_stamp_, other->time_stamp_);
  swap(total_fees_, other->total_fees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTransactionsRequest::InitAsDefaultInstance() {
}
class GetTransactionsRequest::_Internal {
 public:
};

GetTransactionsRequest::GetTransactionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GetTransactionsRequest)
}
GetTransactionsRequest::GetTransactionsRequest(const GetTransactionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&start_height_, &from.start_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_height_) -
    reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.GetTransactionsRequest)
}

void GetTransactionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTransactionsRequest_rpc_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
}

GetTransactionsRequest::~GetTransactionsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.GetTransactionsRequest)
  SharedDtor();
}

void GetTransactionsRequest::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTransactionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTransactionsRequest& GetTransactionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTransactionsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void GetTransactionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GetTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_height_) -
      reinterpret_cast<char*>(&start_height_)) + sizeof(end_height_));
  _internal_metadata_.Clear();
}

const char* GetTransactionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 start_height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetTransactionsRequest.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTransactionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GetTransactionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 start_height = 1;
  if (this->start_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_start_height(), target);
  }

  // int32 end_height = 2;
  if (this->end_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_end_height(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetTransactionsRequest.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GetTransactionsRequest)
  return target;
}

size_t GetTransactionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GetTransactionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int32 start_height = 1;
  if (this->start_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start_height());
  }

  // int32 end_height = 2;
  if (this->end_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTransactionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GetTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTransactionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTransactionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GetTransactionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GetTransactionsRequest)
    MergeFrom(*source);
  }
}

void GetTransactionsRequest::MergeFrom(const GetTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GetTransactionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.start_height() != 0) {
    _internal_set_start_height(from._internal_start_height());
  }
  if (from.end_height() != 0) {
    _internal_set_end_height(from._internal_end_height());
  }
}

void GetTransactionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GetTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTransactionsRequest::CopyFrom(const GetTransactionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GetTransactionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTransactionsRequest::IsInitialized() const {
  return true;
}

void GetTransactionsRequest::InternalSwap(GetTransactionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_height_, other->start_height_);
  swap(end_height_, other->end_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTransactionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TransactionDetails::InitAsDefaultInstance() {
}
class TransactionDetails::_Internal {
 public:
};

TransactionDetails::TransactionDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.TransactionDetails)
}
TransactionDetails::TransactionDetails(const TransactionDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.TransactionDetails)
}

void TransactionDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TransactionDetails_rpc_2eproto.base);
}

TransactionDetails::~TransactionDetails() {
  // @@protoc_insertion_point(destructor:lnrpc.TransactionDetails)
  SharedDtor();
}

void TransactionDetails::SharedDtor() {
}

void TransactionDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TransactionDetails& TransactionDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TransactionDetails_rpc_2eproto.base);
  return *internal_default_instance();
}


void TransactionDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.TransactionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear();
}

const char* TransactionDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Transaction transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransactionDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.TransactionDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Transaction transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.TransactionDetails)
  return target;
}

size_t TransactionDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.TransactionDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Transaction transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransactionDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.TransactionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const TransactionDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransactionDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.TransactionDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.TransactionDetails)
    MergeFrom(*source);
  }
}

void TransactionDetails::MergeFrom(const TransactionDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.TransactionDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void TransactionDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.TransactionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionDetails::CopyFrom(const TransactionDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.TransactionDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionDetails::IsInitialized() const {
  return true;
}

void TransactionDetails::InternalSwap(TransactionDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeLimit::InitAsDefaultInstance() {
  ::lnrpc::_FeeLimit_default_instance_.fixed_ = PROTOBUF_LONGLONG(0);
  ::lnrpc::_FeeLimit_default_instance_.fixed_msat_ = PROTOBUF_LONGLONG(0);
  ::lnrpc::_FeeLimit_default_instance_.percent_ = PROTOBUF_LONGLONG(0);
}
class FeeLimit::_Internal {
 public:
};

FeeLimit::FeeLimit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FeeLimit)
}
FeeLimit::FeeLimit(const FeeLimit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_limit();
  switch (from.limit_case()) {
    case kFixed: {
      _internal_set_fixed(from._internal_fixed());
      break;
    }
    case kFixedMsat: {
      _internal_set_fixed_msat(from._internal_fixed_msat());
      break;
    }
    case kPercent: {
      _internal_set_percent(from._internal_percent());
      break;
    }
    case LIMIT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FeeLimit)
}

void FeeLimit::SharedCtor() {
  clear_has_limit();
}

FeeLimit::~FeeLimit() {
  // @@protoc_insertion_point(destructor:lnrpc.FeeLimit)
  SharedDtor();
}

void FeeLimit::SharedDtor() {
  if (has_limit()) {
    clear_limit();
  }
}

void FeeLimit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeLimit& FeeLimit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeLimit_rpc_2eproto.base);
  return *internal_default_instance();
}


void FeeLimit::clear_limit() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.FeeLimit)
  switch (limit_case()) {
    case kFixed: {
      // No need to clear
      break;
    }
    case kFixedMsat: {
      // No need to clear
      break;
    }
    case kPercent: {
      // No need to clear
      break;
    }
    case LIMIT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIMIT_NOT_SET;
}


void FeeLimit::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FeeLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_limit();
  _internal_metadata_.Clear();
}

const char* FeeLimit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fixed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_fixed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 percent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_percent(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fixed_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_fixed_msat(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeLimit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FeeLimit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fixed = 1;
  if (_internal_has_fixed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fixed(), target);
  }

  // int64 percent = 2;
  if (_internal_has_percent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_percent(), target);
  }

  // int64 fixed_msat = 3;
  if (_internal_has_fixed_msat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fixed_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FeeLimit)
  return target;
}

size_t FeeLimit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FeeLimit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (limit_case()) {
    // int64 fixed = 1;
    case kFixed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fixed());
      break;
    }
    // int64 fixed_msat = 3;
    case kFixedMsat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_fixed_msat());
      break;
    }
    // int64 percent = 2;
    case kPercent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_percent());
      break;
    }
    case LIMIT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeLimit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FeeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeLimit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeLimit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FeeLimit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FeeLimit)
    MergeFrom(*source);
  }
}

void FeeLimit::MergeFrom(const FeeLimit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FeeLimit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.limit_case()) {
    case kFixed: {
      _internal_set_fixed(from._internal_fixed());
      break;
    }
    case kFixedMsat: {
      _internal_set_fixed_msat(from._internal_fixed_msat());
      break;
    }
    case kPercent: {
      _internal_set_percent(from._internal_percent());
      break;
    }
    case LIMIT_NOT_SET: {
      break;
    }
  }
}

void FeeLimit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FeeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeLimit::CopyFrom(const FeeLimit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FeeLimit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeLimit::IsInitialized() const {
  return true;
}

void FeeLimit::InternalSwap(FeeLimit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(limit_, other->limit_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeLimit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SendRequest_DestCustomRecordsEntry_DoNotUse::SendRequest_DestCustomRecordsEntry_DoNotUse() {}
SendRequest_DestCustomRecordsEntry_DoNotUse::SendRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SendRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(const SendRequest_DestCustomRecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SendRequest_DestCustomRecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SendRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SendRequest::InitAsDefaultInstance() {
  ::lnrpc::_SendRequest_default_instance_._instance.get_mutable()->fee_limit_ = const_cast< ::lnrpc::FeeLimit*>(
      ::lnrpc::FeeLimit::internal_default_instance());
}
class SendRequest::_Internal {
 public:
  static const ::lnrpc::FeeLimit& fee_limit(const SendRequest* msg);
};

const ::lnrpc::FeeLimit&
SendRequest::_Internal::fee_limit(const SendRequest* msg) {
  return *msg->fee_limit_;
}
SendRequest::SendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dest_features_(from.dest_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest().empty()) {
    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  dest_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest_string().empty()) {
    dest_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_string_);
  }
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  payment_hash_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash_string().empty()) {
    payment_hash_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_string_);
  }
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_request().empty()) {
    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_hop_pubkey().empty()) {
    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_addr().empty()) {
    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from._internal_has_fee_limit()) {
    fee_limit_ = new ::lnrpc::FeeLimit(*from.fee_limit_);
  } else {
    fee_limit_ = nullptr;
  }
  ::memcpy(&amt_, &from.amt_,
    static_cast<size_t>(reinterpret_cast<char*>(&allow_self_payment_) -
    reinterpret_cast<char*>(&amt_)) + sizeof(allow_self_payment_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendRequest)
}

void SendRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendRequest_rpc_2eproto.base);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_self_payment_) -
      reinterpret_cast<char*>(&fee_limit_)) + sizeof(allow_self_payment_));
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.SendRequest)
  SharedDtor();
}

void SendRequest::SharedDtor() {
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fee_limit_;
}

void SendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendRequest& SendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_custom_records_.Clear();
  dest_features_.Clear();
  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && fee_limit_ != nullptr) {
    delete fee_limit_;
  }
  fee_limit_ = nullptr;
  ::memset(&amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&allow_self_payment_) -
      reinterpret_cast<char*>(&amt_)) + sizeof(allow_self_payment_));
  _internal_metadata_.Clear();
}

const char* SendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dest_string = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dest_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendRequest.dest_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_hash_string = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payment_hash_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendRequest.payment_hash_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_request = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payment_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendRequest.payment_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 final_cltv_delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          final_cltv_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FeeLimit fee_limit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_chan_id = 9 [jstype = JS_STRING];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          outgoing_chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cltv_limit = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cltv_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, bytes> dest_custom_records = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dest_custom_records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 amt_msat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes last_hop_pubkey = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_last_hop_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_self_payment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          allow_self_payment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.FeatureBit dest_features = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dest_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_dest_features(static_cast<::lnrpc::FeatureBit>(val));
        } else goto handle_unusual;
        continue;
      // bytes payment_addr = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_payment_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dest(), target);
  }

  // string dest_string = 2 [deprecated = true];
  if (this->dest_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dest_string().data(), static_cast<int>(this->_internal_dest_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendRequest.dest_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dest_string(), target);
  }

  // int64 amt = 3;
  if (this->amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amt(), target);
  }

  // bytes payment_hash = 4;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payment_hash(), target);
  }

  // string payment_hash_string = 5 [deprecated = true];
  if (this->payment_hash_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_hash_string().data(), static_cast<int>(this->_internal_payment_hash_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendRequest.payment_hash_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payment_hash_string(), target);
  }

  // string payment_request = 6;
  if (this->payment_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_request().data(), static_cast<int>(this->_internal_payment_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendRequest.payment_request");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payment_request(), target);
  }

  // int32 final_cltv_delta = 7;
  if (this->final_cltv_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_final_cltv_delta(), target);
  }

  // .lnrpc.FeeLimit fee_limit = 8;
  if (this->has_fee_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::fee_limit(this), target, stream);
  }

  // uint64 outgoing_chan_id = 9 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_outgoing_chan_id(), target);
  }

  // uint32 cltv_limit = 10;
  if (this->cltv_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_cltv_limit(), target);
  }

  // map<uint64, bytes> dest_custom_records = 11;
  if (!this->_internal_dest_custom_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dest_custom_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dest_custom_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SendRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it) {
        target = SendRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_amt_msat(), target);
  }

  // bytes last_hop_pubkey = 13;
  if (this->last_hop_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        13, this->_internal_last_hop_pubkey(), target);
  }

  // bool allow_self_payment = 14;
  if (this->allow_self_payment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_allow_self_payment(), target);
  }

  // repeated .lnrpc.FeatureBit dest_features = 15;
  {
    int byte_size = _dest_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          15, dest_features_, byte_size, target);
    }
  }

  // bytes payment_addr = 16;
  if (this->payment_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_payment_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, bytes> dest_custom_records = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dest_custom_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_dest_custom_records().begin();
      it != this->_internal_dest_custom_records().end(); ++it) {
    total_size += SendRequest_DestCustomRecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .lnrpc.FeatureBit dest_features = 15;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dest_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_dest_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dest_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest());
  }

  // string dest_string = 2 [deprecated = true];
  if (this->dest_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest_string());
  }

  // bytes payment_hash = 4;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // string payment_hash_string = 5 [deprecated = true];
  if (this->payment_hash_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_hash_string());
  }

  // string payment_request = 6;
  if (this->payment_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_request());
  }

  // bytes last_hop_pubkey = 13;
  if (this->last_hop_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_hop_pubkey());
  }

  // bytes payment_addr = 16;
  if (this->payment_addr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_addr());
  }

  // .lnrpc.FeeLimit fee_limit = 8;
  if (this->has_fee_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_limit_);
  }

  // int64 amt = 3;
  if (this->amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt());
  }

  // int32 final_cltv_delta = 7;
  if (this->final_cltv_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_cltv_delta());
  }

  // uint32 cltv_limit = 10;
  if (this->cltv_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cltv_limit());
  }

  // uint64 outgoing_chan_id = 9 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_chan_id());
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_msat());
  }

  // bool allow_self_payment = 14;
  if (this->allow_self_payment() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendRequest)
    MergeFrom(*source);
  }
}

void SendRequest::MergeFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  dest_features_.MergeFrom(from.dest_features_);
  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.dest_string().size() > 0) {

    dest_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_string_);
  }
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.payment_hash_string().size() > 0) {

    payment_hash_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_string_);
  }
  if (from.payment_request().size() > 0) {

    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  if (from.last_hop_pubkey().size() > 0) {

    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  if (from.payment_addr().size() > 0) {

    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from.has_fee_limit()) {
    _internal_mutable_fee_limit()->::lnrpc::FeeLimit::MergeFrom(from._internal_fee_limit());
  }
  if (from.amt() != 0) {
    _internal_set_amt(from._internal_amt());
  }
  if (from.final_cltv_delta() != 0) {
    _internal_set_final_cltv_delta(from._internal_final_cltv_delta());
  }
  if (from.cltv_limit() != 0) {
    _internal_set_cltv_limit(from._internal_cltv_limit());
  }
  if (from.outgoing_chan_id() != 0) {
    _internal_set_outgoing_chan_id(from._internal_outgoing_chan_id());
  }
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
  if (from.allow_self_payment() != 0) {
    _internal_set_allow_self_payment(from._internal_allow_self_payment());
  }
}

void SendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::InternalSwap(SendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dest_custom_records_.Swap(&other->dest_custom_records_);
  dest_features_.InternalSwap(&other->dest_features_);
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dest_string_.Swap(&other->dest_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_string_.Swap(&other->payment_hash_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_request_.Swap(&other->payment_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_hop_pubkey_.Swap(&other->last_hop_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_addr_.Swap(&other->payment_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fee_limit_, other->fee_limit_);
  swap(amt_, other->amt_);
  swap(final_cltv_delta_, other->final_cltv_delta_);
  swap(cltv_limit_, other->cltv_limit_);
  swap(outgoing_chan_id_, other->outgoing_chan_id_);
  swap(amt_msat_, other->amt_msat_);
  swap(allow_self_payment_, other->allow_self_payment_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendResponse::InitAsDefaultInstance() {
  ::lnrpc::_SendResponse_default_instance_._instance.get_mutable()->payment_route_ = const_cast< ::lnrpc::Route*>(
      ::lnrpc::Route::internal_default_instance());
}
class SendResponse::_Internal {
 public:
  static const ::lnrpc::Route& payment_route(const SendResponse* msg);
};

const ::lnrpc::Route&
SendResponse::_Internal::payment_route(const SendResponse* msg) {
  return *msg->payment_route_;
}
SendResponse::SendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendResponse)
}
SendResponse::SendResponse(const SendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_error().empty()) {
    payment_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_error_);
  }
  payment_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_preimage().empty()) {
    payment_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_preimage_);
  }
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from._internal_has_payment_route()) {
    payment_route_ = new ::lnrpc::Route(*from.payment_route_);
  } else {
    payment_route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendResponse)
}

void SendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendResponse_rpc_2eproto.base);
  payment_error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_route_ = nullptr;
}

SendResponse::~SendResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.SendResponse)
  SharedDtor();
}

void SendResponse::SharedDtor() {
  payment_error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete payment_route_;
}

void SendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendResponse& SendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && payment_route_ != nullptr) {
    delete payment_route_;
  }
  payment_route_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string payment_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendResponse.payment_error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_preimage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Route payment_route = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string payment_error = 1;
  if (this->payment_error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_error().data(), static_cast<int>(this->_internal_payment_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendResponse.payment_error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payment_error(), target);
  }

  // bytes payment_preimage = 2;
  if (this->payment_preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payment_preimage(), target);
  }

  // .lnrpc.Route payment_route = 3;
  if (this->has_payment_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::payment_route(this), target, stream);
  }

  // bytes payment_hash = 4;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_payment_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendResponse)
  return target;
}

size_t SendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string payment_error = 1;
  if (this->payment_error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_error());
  }

  // bytes payment_preimage = 2;
  if (this->payment_preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_preimage());
  }

  // bytes payment_hash = 4;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // .lnrpc.Route payment_route = 3;
  if (this->has_payment_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_route_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendResponse)
    MergeFrom(*source);
  }
}

void SendResponse::MergeFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_error().size() > 0) {

    payment_error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_error_);
  }
  if (from.payment_preimage().size() > 0) {

    payment_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_preimage_);
  }
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.has_payment_route()) {
    _internal_mutable_payment_route()->::lnrpc::Route::MergeFrom(from._internal_payment_route());
  }
}

void SendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendResponse::CopyFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResponse::IsInitialized() const {
  return true;
}

void SendResponse::InternalSwap(SendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_error_.Swap(&other->payment_error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_preimage_.Swap(&other->payment_preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(payment_route_, other->payment_route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToRouteRequest::InitAsDefaultInstance() {
  ::lnrpc::_SendToRouteRequest_default_instance_._instance.get_mutable()->route_ = const_cast< ::lnrpc::Route*>(
      ::lnrpc::Route::internal_default_instance());
}
class SendToRouteRequest::_Internal {
 public:
  static const ::lnrpc::Route& route(const SendToRouteRequest* msg);
};

const ::lnrpc::Route&
SendToRouteRequest::_Internal::route(const SendToRouteRequest* msg) {
  return *msg->route_;
}
SendToRouteRequest::SendToRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendToRouteRequest)
}
SendToRouteRequest::SendToRouteRequest(const SendToRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  payment_hash_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash_string().empty()) {
    payment_hash_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_string_);
  }
  if (from._internal_has_route()) {
    route_ = new ::lnrpc::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendToRouteRequest)
}

void SendToRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendToRouteRequest_rpc_2eproto.base);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_ = nullptr;
}

SendToRouteRequest::~SendToRouteRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.SendToRouteRequest)
  SharedDtor();
}

void SendToRouteRequest::SharedDtor() {
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_;
}

void SendToRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToRouteRequest& SendToRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToRouteRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendToRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendToRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SendToRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes payment_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_hash_string = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_hash_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendToRouteRequest.payment_hash_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Route route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendToRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payment_hash(), target);
  }

  // string payment_hash_string = 2 [deprecated = true];
  if (this->payment_hash_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_hash_string().data(), static_cast<int>(this->_internal_payment_hash_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendToRouteRequest.payment_hash_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_hash_string(), target);
  }

  // .lnrpc.Route route = 4;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::route(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendToRouteRequest)
  return target;
}

size_t SendToRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendToRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // string payment_hash_string = 2 [deprecated = true];
  if (this->payment_hash_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_hash_string());
  }

  // .lnrpc.Route route = 4;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendToRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendToRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendToRouteRequest)
    MergeFrom(*source);
  }
}

void SendToRouteRequest::MergeFrom(const SendToRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendToRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.payment_hash_string().size() > 0) {

    payment_hash_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_string_);
  }
  if (from.has_route()) {
    _internal_mutable_route()->::lnrpc::Route::MergeFrom(from._internal_route());
  }
}

void SendToRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendToRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToRouteRequest::CopyFrom(const SendToRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendToRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToRouteRequest::IsInitialized() const {
  return true;
}

void SendToRouteRequest::InternalSwap(SendToRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_string_.Swap(&other->payment_hash_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelAcceptRequest::InitAsDefaultInstance() {
}
class ChannelAcceptRequest::_Internal {
 public:
};

ChannelAcceptRequest::ChannelAcceptRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelAcceptRequest)
}
ChannelAcceptRequest::ChannelAcceptRequest(const ChannelAcceptRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_pubkey().empty()) {
    node_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_);
  }
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_hash().empty()) {
    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  ::memcpy(&funding_amt_, &from.funding_amt_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_flags_) -
    reinterpret_cast<char*>(&funding_amt_)) + sizeof(channel_flags_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelAcceptRequest)
}

void ChannelAcceptRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelAcceptRequest_rpc_2eproto.base);
  node_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funding_amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_flags_) -
      reinterpret_cast<char*>(&funding_amt_)) + sizeof(channel_flags_));
}

ChannelAcceptRequest::~ChannelAcceptRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelAcceptRequest)
  SharedDtor();
}

void ChannelAcceptRequest::SharedDtor() {
  node_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelAcceptRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelAcceptRequest& ChannelAcceptRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelAcceptRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelAcceptRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelAcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funding_amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_flags_) -
      reinterpret_cast<char*>(&funding_amt_)) + sizeof(channel_flags_));
  _internal_metadata_.Clear();
}

const char* ChannelAcceptRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes node_pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chain_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 funding_amt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          funding_amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 push_amt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          push_amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dust_limit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dust_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_value_in_flight = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_value_in_flight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 channel_reserve = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          channel_reserve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_htlc = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          min_htlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee_per_kw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          fee_per_kw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 csv_delay = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          csv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_accepted_htlcs = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          max_accepted_htlcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_flags = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          channel_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelAcceptRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelAcceptRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_pubkey = 1;
  if (this->node_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_pubkey(), target);
  }

  // bytes chain_hash = 2;
  if (this->chain_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chain_hash(), target);
  }

  // bytes pending_chan_id = 3;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pending_chan_id(), target);
  }

  // uint64 funding_amt = 4;
  if (this->funding_amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_funding_amt(), target);
  }

  // uint64 push_amt = 5;
  if (this->push_amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_push_amt(), target);
  }

  // uint64 dust_limit = 6;
  if (this->dust_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_dust_limit(), target);
  }

  // uint64 max_value_in_flight = 7;
  if (this->max_value_in_flight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_max_value_in_flight(), target);
  }

  // uint64 channel_reserve = 8;
  if (this->channel_reserve() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_channel_reserve(), target);
  }

  // uint64 min_htlc = 9;
  if (this->min_htlc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_min_htlc(), target);
  }

  // uint64 fee_per_kw = 10;
  if (this->fee_per_kw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_fee_per_kw(), target);
  }

  // uint32 csv_delay = 11;
  if (this->csv_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_csv_delay(), target);
  }

  // uint32 max_accepted_htlcs = 12;
  if (this->max_accepted_htlcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_max_accepted_htlcs(), target);
  }

  // uint32 channel_flags = 13;
  if (this->channel_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_channel_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelAcceptRequest)
  return target;
}

size_t ChannelAcceptRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelAcceptRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_pubkey = 1;
  if (this->node_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_pubkey());
  }

  // bytes chain_hash = 2;
  if (this->chain_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_hash());
  }

  // bytes pending_chan_id = 3;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  // uint64 funding_amt = 4;
  if (this->funding_amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_funding_amt());
  }

  // uint64 push_amt = 5;
  if (this->push_amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_push_amt());
  }

  // uint64 dust_limit = 6;
  if (this->dust_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dust_limit());
  }

  // uint64 max_value_in_flight = 7;
  if (this->max_value_in_flight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_value_in_flight());
  }

  // uint64 channel_reserve = 8;
  if (this->channel_reserve() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_reserve());
  }

  // uint64 min_htlc = 9;
  if (this->min_htlc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_htlc());
  }

  // uint64 fee_per_kw = 10;
  if (this->fee_per_kw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fee_per_kw());
  }

  // uint32 csv_delay = 11;
  if (this->csv_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csv_delay());
  }

  // uint32 max_accepted_htlcs = 12;
  if (this->max_accepted_htlcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_accepted_htlcs());
  }

  // uint32 channel_flags = 13;
  if (this->channel_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelAcceptRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelAcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelAcceptRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelAcceptRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelAcceptRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelAcceptRequest)
    MergeFrom(*source);
  }
}

void ChannelAcceptRequest::MergeFrom(const ChannelAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelAcceptRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_pubkey().size() > 0) {

    node_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_);
  }
  if (from.chain_hash().size() > 0) {

    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from.funding_amt() != 0) {
    _internal_set_funding_amt(from._internal_funding_amt());
  }
  if (from.push_amt() != 0) {
    _internal_set_push_amt(from._internal_push_amt());
  }
  if (from.dust_limit() != 0) {
    _internal_set_dust_limit(from._internal_dust_limit());
  }
  if (from.max_value_in_flight() != 0) {
    _internal_set_max_value_in_flight(from._internal_max_value_in_flight());
  }
  if (from.channel_reserve() != 0) {
    _internal_set_channel_reserve(from._internal_channel_reserve());
  }
  if (from.min_htlc() != 0) {
    _internal_set_min_htlc(from._internal_min_htlc());
  }
  if (from.fee_per_kw() != 0) {
    _internal_set_fee_per_kw(from._internal_fee_per_kw());
  }
  if (from.csv_delay() != 0) {
    _internal_set_csv_delay(from._internal_csv_delay());
  }
  if (from.max_accepted_htlcs() != 0) {
    _internal_set_max_accepted_htlcs(from._internal_max_accepted_htlcs());
  }
  if (from.channel_flags() != 0) {
    _internal_set_channel_flags(from._internal_channel_flags());
  }
}

void ChannelAcceptRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelAcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelAcceptRequest::CopyFrom(const ChannelAcceptRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelAcceptRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelAcceptRequest::IsInitialized() const {
  return true;
}

void ChannelAcceptRequest::InternalSwap(ChannelAcceptRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_pubkey_.Swap(&other->node_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chain_hash_.Swap(&other->chain_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funding_amt_, other->funding_amt_);
  swap(push_amt_, other->push_amt_);
  swap(dust_limit_, other->dust_limit_);
  swap(max_value_in_flight_, other->max_value_in_flight_);
  swap(channel_reserve_, other->channel_reserve_);
  swap(min_htlc_, other->min_htlc_);
  swap(fee_per_kw_, other->fee_per_kw_);
  swap(csv_delay_, other->csv_delay_);
  swap(max_accepted_htlcs_, other->max_accepted_htlcs_);
  swap(channel_flags_, other->channel_flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelAcceptRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelAcceptResponse::InitAsDefaultInstance() {
}
class ChannelAcceptResponse::_Internal {
 public:
};

ChannelAcceptResponse::ChannelAcceptResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelAcceptResponse)
}
ChannelAcceptResponse::ChannelAcceptResponse(const ChannelAcceptResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  upfront_shutdown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_upfront_shutdown().empty()) {
    upfront_shutdown_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upfront_shutdown_);
  }
  ::memcpy(&accept_, &from.accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_accept_depth_) -
    reinterpret_cast<char*>(&accept_)) + sizeof(min_accept_depth_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelAcceptResponse)
}

void ChannelAcceptResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelAcceptResponse_rpc_2eproto.base);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upfront_shutdown_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_accept_depth_) -
      reinterpret_cast<char*>(&accept_)) + sizeof(min_accept_depth_));
}

ChannelAcceptResponse::~ChannelAcceptResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelAcceptResponse)
  SharedDtor();
}

void ChannelAcceptResponse::SharedDtor() {
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upfront_shutdown_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelAcceptResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelAcceptResponse& ChannelAcceptResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelAcceptResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelAcceptResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelAcceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  upfront_shutdown_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_accept_depth_) -
      reinterpret_cast<char*>(&accept_)) + sizeof(min_accept_depth_));
  _internal_metadata_.Clear();
}

const char* ChannelAcceptResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelAcceptResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string upfront_shutdown = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_upfront_shutdown();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelAcceptResponse.upfront_shutdown"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 csv_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          csv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reserve_sat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 in_flight_max_msat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          in_flight_max_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_htlc_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_htlc_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_htlc_in = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          min_htlc_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 min_accept_depth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          min_accept_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelAcceptResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelAcceptResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool accept = 1;
  if (this->accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_accept(), target);
  }

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pending_chan_id(), target);
  }

  // string error = 3;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelAcceptResponse.error");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error(), target);
  }

  // string upfront_shutdown = 4;
  if (this->upfront_shutdown().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_upfront_shutdown().data(), static_cast<int>(this->_internal_upfront_shutdown().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelAcceptResponse.upfront_shutdown");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_upfront_shutdown(), target);
  }

  // uint32 csv_delay = 5;
  if (this->csv_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_csv_delay(), target);
  }

  // uint64 reserve_sat = 6;
  if (this->reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_reserve_sat(), target);
  }

  // uint64 in_flight_max_msat = 7;
  if (this->in_flight_max_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_in_flight_max_msat(), target);
  }

  // uint32 max_htlc_count = 8;
  if (this->max_htlc_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_htlc_count(), target);
  }

  // uint64 min_htlc_in = 9;
  if (this->min_htlc_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_min_htlc_in(), target);
  }

  // uint32 min_accept_depth = 10;
  if (this->min_accept_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_min_accept_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelAcceptResponse)
  return target;
}

size_t ChannelAcceptResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelAcceptResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  // string error = 3;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // string upfront_shutdown = 4;
  if (this->upfront_shutdown().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upfront_shutdown());
  }

  // bool accept = 1;
  if (this->accept() != 0) {
    total_size += 1 + 1;
  }

  // uint32 csv_delay = 5;
  if (this->csv_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csv_delay());
  }

  // uint64 reserve_sat = 6;
  if (this->reserve_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reserve_sat());
  }

  // uint64 in_flight_max_msat = 7;
  if (this->in_flight_max_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_in_flight_max_msat());
  }

  // uint64 min_htlc_in = 9;
  if (this->min_htlc_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_htlc_in());
  }

  // uint32 max_htlc_count = 8;
  if (this->max_htlc_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_htlc_count());
  }

  // uint32 min_accept_depth = 10;
  if (this->min_accept_depth() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_accept_depth());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelAcceptResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelAcceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelAcceptResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelAcceptResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelAcceptResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelAcceptResponse)
    MergeFrom(*source);
  }
}

void ChannelAcceptResponse::MergeFrom(const ChannelAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelAcceptResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.upfront_shutdown().size() > 0) {

    upfront_shutdown_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.upfront_shutdown_);
  }
  if (from.accept() != 0) {
    _internal_set_accept(from._internal_accept());
  }
  if (from.csv_delay() != 0) {
    _internal_set_csv_delay(from._internal_csv_delay());
  }
  if (from.reserve_sat() != 0) {
    _internal_set_reserve_sat(from._internal_reserve_sat());
  }
  if (from.in_flight_max_msat() != 0) {
    _internal_set_in_flight_max_msat(from._internal_in_flight_max_msat());
  }
  if (from.min_htlc_in() != 0) {
    _internal_set_min_htlc_in(from._internal_min_htlc_in());
  }
  if (from.max_htlc_count() != 0) {
    _internal_set_max_htlc_count(from._internal_max_htlc_count());
  }
  if (from.min_accept_depth() != 0) {
    _internal_set_min_accept_depth(from._internal_min_accept_depth());
  }
}

void ChannelAcceptResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelAcceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelAcceptResponse::CopyFrom(const ChannelAcceptResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelAcceptResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelAcceptResponse::IsInitialized() const {
  return true;
}

void ChannelAcceptResponse::InternalSwap(ChannelAcceptResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  upfront_shutdown_.Swap(&other->upfront_shutdown_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(accept_, other->accept_);
  swap(csv_delay_, other->csv_delay_);
  swap(reserve_sat_, other->reserve_sat_);
  swap(in_flight_max_msat_, other->in_flight_max_msat_);
  swap(min_htlc_in_, other->min_htlc_in_);
  swap(max_htlc_count_, other->max_htlc_count_);
  swap(min_accept_depth_, other->min_accept_depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelAcceptResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelPoint::InitAsDefaultInstance() {
  ::lnrpc::_ChannelPoint_default_instance_.funding_txid_bytes_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::lnrpc::_ChannelPoint_default_instance_.funding_txid_str_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class ChannelPoint::_Internal {
 public:
};

ChannelPoint::ChannelPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelPoint)
}
ChannelPoint::ChannelPoint(const ChannelPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_index_ = from.output_index_;
  clear_has_funding_txid();
  switch (from.funding_txid_case()) {
    case kFundingTxidBytes: {
      _internal_set_funding_txid_bytes(from._internal_funding_txid_bytes());
      break;
    }
    case kFundingTxidStr: {
      _internal_set_funding_txid_str(from._internal_funding_txid_str());
      break;
    }
    case FUNDING_TXID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelPoint)
}

void ChannelPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelPoint_rpc_2eproto.base);
  output_index_ = 0u;
  clear_has_funding_txid();
}

ChannelPoint::~ChannelPoint() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelPoint)
  SharedDtor();
}

void ChannelPoint::SharedDtor() {
  if (has_funding_txid()) {
    clear_funding_txid();
  }
}

void ChannelPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelPoint& ChannelPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelPoint_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelPoint::clear_funding_txid() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.ChannelPoint)
  switch (funding_txid_case()) {
    case kFundingTxidBytes: {
      funding_txid_.funding_txid_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kFundingTxidStr: {
      funding_txid_.funding_txid_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FUNDING_TXID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FUNDING_TXID_NOT_SET;
}


void ChannelPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_index_ = 0u;
  clear_funding_txid();
  _internal_metadata_.Clear();
}

const char* ChannelPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes funding_txid_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_funding_txid_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string funding_txid_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_funding_txid_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelPoint.funding_txid_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes funding_txid_bytes = 1;
  if (_internal_has_funding_txid_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_funding_txid_bytes(), target);
  }

  // string funding_txid_str = 2;
  if (_internal_has_funding_txid_str()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funding_txid_str().data(), static_cast<int>(this->_internal_funding_txid_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelPoint.funding_txid_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_funding_txid_str(), target);
  }

  // uint32 output_index = 3;
  if (this->output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_output_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelPoint)
  return target;
}

size_t ChannelPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 output_index = 3;
  if (this->output_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_index());
  }

  switch (funding_txid_case()) {
    // bytes funding_txid_bytes = 1;
    case kFundingTxidBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_funding_txid_bytes());
      break;
    }
    // string funding_txid_str = 2;
    case kFundingTxidStr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_funding_txid_str());
      break;
    }
    case FUNDING_TXID_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelPoint)
    MergeFrom(*source);
  }
}

void ChannelPoint::MergeFrom(const ChannelPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_index() != 0) {
    _internal_set_output_index(from._internal_output_index());
  }
  switch (from.funding_txid_case()) {
    case kFundingTxidBytes: {
      _internal_set_funding_txid_bytes(from._internal_funding_txid_bytes());
      break;
    }
    case kFundingTxidStr: {
      _internal_set_funding_txid_str(from._internal_funding_txid_str());
      break;
    }
    case FUNDING_TXID_NOT_SET: {
      break;
    }
  }
}

void ChannelPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelPoint::CopyFrom(const ChannelPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelPoint::IsInitialized() const {
  return true;
}

void ChannelPoint::InternalSwap(ChannelPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(output_index_, other->output_index_);
  swap(funding_txid_, other->funding_txid_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OutPoint::InitAsDefaultInstance() {
}
class OutPoint::_Internal {
 public:
};

OutPoint::OutPoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.OutPoint)
}
OutPoint::OutPoint(const OutPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid_bytes().empty()) {
    txid_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_bytes_);
  }
  txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid_str().empty()) {
    txid_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_str_);
  }
  output_index_ = from.output_index_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.OutPoint)
}

void OutPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OutPoint_rpc_2eproto.base);
  txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_index_ = 0u;
}

OutPoint::~OutPoint() {
  // @@protoc_insertion_point(destructor:lnrpc.OutPoint)
  SharedDtor();
}

void OutPoint::SharedDtor() {
  txid_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OutPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OutPoint& OutPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OutPoint_rpc_2eproto.base);
  return *internal_default_instance();
}


void OutPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.OutPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  txid_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_index_ = 0u;
  _internal_metadata_.Clear();
}

const char* OutPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes txid_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txid_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txid_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txid_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.OutPoint.txid_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OutPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.OutPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid_bytes = 1;
  if (this->txid_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_txid_bytes(), target);
  }

  // string txid_str = 2;
  if (this->txid_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txid_str().data(), static_cast<int>(this->_internal_txid_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.OutPoint.txid_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_txid_str(), target);
  }

  // uint32 output_index = 3;
  if (this->output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_output_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.OutPoint)
  return target;
}

size_t OutPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.OutPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid_bytes = 1;
  if (this->txid_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid_bytes());
  }

  // string txid_str = 2;
  if (this->txid_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txid_str());
  }

  // uint32 output_index = 3;
  if (this->output_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OutPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.OutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const OutPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OutPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.OutPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.OutPoint)
    MergeFrom(*source);
  }
}

void OutPoint::MergeFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.OutPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid_bytes().size() > 0) {

    txid_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_bytes_);
  }
  if (from.txid_str().size() > 0) {

    txid_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_str_);
  }
  if (from.output_index() != 0) {
    _internal_set_output_index(from._internal_output_index());
  }
}

void OutPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutPoint::CopyFrom(const OutPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.OutPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutPoint::IsInitialized() const {
  return true;
}

void OutPoint::InternalSwap(OutPoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_bytes_.Swap(&other->txid_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  txid_str_.Swap(&other->txid_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(output_index_, other->output_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LightningAddress::InitAsDefaultInstance() {
}
class LightningAddress::_Internal {
 public:
};

LightningAddress::LightningAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.LightningAddress)
}
LightningAddress::LightningAddress(const LightningAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host().empty()) {
    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.LightningAddress)
}

void LightningAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightningAddress_rpc_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LightningAddress::~LightningAddress() {
  // @@protoc_insertion_point(destructor:lnrpc.LightningAddress)
  SharedDtor();
}

void LightningAddress::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LightningAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightningAddress& LightningAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightningAddress_rpc_2eproto.base);
  return *internal_default_instance();
}


void LightningAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.LightningAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LightningAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.LightningAddress.pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.LightningAddress.host"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightningAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.LightningAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pubkey = 1;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.LightningAddress.pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // string host = 2;
  if (this->host().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.LightningAddress.host");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.LightningAddress)
  return target;
}

size_t LightningAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.LightningAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // string host = 2;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightningAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.LightningAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const LightningAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightningAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.LightningAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.LightningAddress)
    MergeFrom(*source);
  }
}

void LightningAddress::MergeFrom(const LightningAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.LightningAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
}

void LightningAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.LightningAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightningAddress::CopyFrom(const LightningAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.LightningAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightningAddress::IsInitialized() const {
  return true;
}

void LightningAddress::InternalSwap(LightningAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  host_.Swap(&other->host_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LightningAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

EstimateFeeRequest_AddrToAmountEntry_DoNotUse::EstimateFeeRequest_AddrToAmountEntry_DoNotUse() {}
EstimateFeeRequest_AddrToAmountEntry_DoNotUse::EstimateFeeRequest_AddrToAmountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void EstimateFeeRequest_AddrToAmountEntry_DoNotUse::MergeFrom(const EstimateFeeRequest_AddrToAmountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeRequest_AddrToAmountEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void EstimateFeeRequest_AddrToAmountEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void EstimateFeeRequest::InitAsDefaultInstance() {
}
class EstimateFeeRequest::_Internal {
 public:
};

EstimateFeeRequest::EstimateFeeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.EstimateFeeRequest)
}
EstimateFeeRequest::EstimateFeeRequest(const EstimateFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addrtoamount_.MergeFrom(from.addrtoamount_);
  target_conf_ = from.target_conf_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.EstimateFeeRequest)
}

void EstimateFeeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EstimateFeeRequest_rpc_2eproto.base);
  target_conf_ = 0;
}

EstimateFeeRequest::~EstimateFeeRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.EstimateFeeRequest)
  SharedDtor();
}

void EstimateFeeRequest::SharedDtor() {
}

void EstimateFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeRequest& EstimateFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrtoamount_.Clear();
  target_conf_ = 0;
  _internal_metadata_.Clear();
}

const char* EstimateFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int64> AddrToAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addrtoamount_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 target_conf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.EstimateFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> AddrToAmount = 1;
  if (!this->_internal_addrtoamount().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lnrpc.EstimateFeeRequest.AddrToAmountEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addrtoamount().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addrtoamount().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_addrtoamount().begin();
          it != this->_internal_addrtoamount().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = EstimateFeeRequest_AddrToAmountEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_addrtoamount().begin();
          it != this->_internal_addrtoamount().end(); ++it) {
        target = EstimateFeeRequest_AddrToAmountEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 target_conf = 2;
  if (this->target_conf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_target_conf(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.EstimateFeeRequest)
  return target;
}

size_t EstimateFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.EstimateFeeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> AddrToAmount = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addrtoamount_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_addrtoamount().begin();
      it != this->_internal_addrtoamount().end(); ++it) {
    total_size += EstimateFeeRequest_AddrToAmountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 target_conf = 2;
  if (this->target_conf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_conf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.EstimateFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.EstimateFeeRequest)
    MergeFrom(*source);
  }
}

void EstimateFeeRequest::MergeFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.EstimateFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrtoamount_.MergeFrom(from.addrtoamount_);
  if (from.target_conf() != 0) {
    _internal_set_target_conf(from._internal_target_conf());
  }
}

void EstimateFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeRequest::CopyFrom(const EstimateFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.EstimateFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeRequest::IsInitialized() const {
  return true;
}

void EstimateFeeRequest::InternalSwap(EstimateFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addrtoamount_.Swap(&other->addrtoamount_);
  swap(target_conf_, other->target_conf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EstimateFeeResponse::InitAsDefaultInstance() {
}
class EstimateFeeResponse::_Internal {
 public:
};

EstimateFeeResponse::EstimateFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.EstimateFeeResponse)
}
EstimateFeeResponse::EstimateFeeResponse(const EstimateFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fee_sat_, &from.fee_sat_,
    static_cast<size_t>(reinterpret_cast<char*>(&sat_per_vbyte_) -
    reinterpret_cast<char*>(&fee_sat_)) + sizeof(sat_per_vbyte_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.EstimateFeeResponse)
}

void EstimateFeeResponse::SharedCtor() {
  ::memset(&fee_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sat_per_vbyte_) -
      reinterpret_cast<char*>(&fee_sat_)) + sizeof(sat_per_vbyte_));
}

EstimateFeeResponse::~EstimateFeeResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.EstimateFeeResponse)
  SharedDtor();
}

void EstimateFeeResponse::SharedDtor() {
}

void EstimateFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateFeeResponse& EstimateFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateFeeResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void EstimateFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fee_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sat_per_vbyte_) -
      reinterpret_cast<char*>(&fee_sat_)) + sizeof(sat_per_vbyte_));
  _internal_metadata_.Clear();
}

const char* EstimateFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fee_sat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fee_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 feerate_sat_per_byte = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          feerate_sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sat_per_vbyte = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sat_per_vbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.EstimateFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee_sat = 1;
  if (this->fee_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fee_sat(), target);
  }

  // int64 feerate_sat_per_byte = 2 [deprecated = true];
  if (this->feerate_sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_feerate_sat_per_byte(), target);
  }

  // uint64 sat_per_vbyte = 3;
  if (this->sat_per_vbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_sat_per_vbyte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.EstimateFeeResponse)
  return target;
}

size_t EstimateFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.EstimateFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fee_sat = 1;
  if (this->fee_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_sat());
  }

  // int64 feerate_sat_per_byte = 2 [deprecated = true];
  if (this->feerate_sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_feerate_sat_per_byte());
  }

  // uint64 sat_per_vbyte = 3;
  if (this->sat_per_vbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat_per_vbyte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.EstimateFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.EstimateFeeResponse)
    MergeFrom(*source);
  }
}

void EstimateFeeResponse::MergeFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.EstimateFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fee_sat() != 0) {
    _internal_set_fee_sat(from._internal_fee_sat());
  }
  if (from.feerate_sat_per_byte() != 0) {
    _internal_set_feerate_sat_per_byte(from._internal_feerate_sat_per_byte());
  }
  if (from.sat_per_vbyte() != 0) {
    _internal_set_sat_per_vbyte(from._internal_sat_per_vbyte());
  }
}

void EstimateFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateFeeResponse::CopyFrom(const EstimateFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.EstimateFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateFeeResponse::IsInitialized() const {
  return true;
}

void EstimateFeeResponse::InternalSwap(EstimateFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_sat_, other->fee_sat_);
  swap(feerate_sat_per_byte_, other->feerate_sat_per_byte_);
  swap(sat_per_vbyte_, other->sat_per_vbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

SendManyRequest_AddrToAmountEntry_DoNotUse::SendManyRequest_AddrToAmountEntry_DoNotUse() {}
SendManyRequest_AddrToAmountEntry_DoNotUse::SendManyRequest_AddrToAmountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SendManyRequest_AddrToAmountEntry_DoNotUse::MergeFrom(const SendManyRequest_AddrToAmountEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SendManyRequest_AddrToAmountEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SendManyRequest_AddrToAmountEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SendManyRequest::InitAsDefaultInstance() {
}
class SendManyRequest::_Internal {
 public:
};

SendManyRequest::SendManyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendManyRequest)
}
SendManyRequest::SendManyRequest(const SendManyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addrtoamount_.MergeFrom(from.addrtoamount_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&sat_per_vbyte_, &from.sat_per_vbyte_,
    static_cast<size_t>(reinterpret_cast<char*>(&spend_unconfirmed_) -
    reinterpret_cast<char*>(&sat_per_vbyte_)) + sizeof(spend_unconfirmed_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendManyRequest)
}

void SendManyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendManyRequest_rpc_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sat_per_vbyte_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spend_unconfirmed_) -
      reinterpret_cast<char*>(&sat_per_vbyte_)) + sizeof(spend_unconfirmed_));
}

SendManyRequest::~SendManyRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.SendManyRequest)
  SharedDtor();
}

void SendManyRequest::SharedDtor() {
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendManyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendManyRequest& SendManyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendManyRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendManyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addrtoamount_.Clear();
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sat_per_vbyte_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spend_unconfirmed_) -
      reinterpret_cast<char*>(&sat_per_vbyte_)) + sizeof(spend_unconfirmed_));
  _internal_metadata_.Clear();
}

const char* SendManyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int64> AddrToAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&addrtoamount_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 target_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sat_per_vbyte = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sat_per_vbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_per_byte = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendManyRequest.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_confs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spend_unconfirmed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          spend_unconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendManyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendManyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int64> AddrToAmount = 1;
  if (!this->_internal_addrtoamount().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lnrpc.SendManyRequest.AddrToAmountEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_addrtoamount().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_addrtoamount().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_addrtoamount().begin();
          it != this->_internal_addrtoamount().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SendManyRequest_AddrToAmountEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
          it = this->_internal_addrtoamount().begin();
          it != this->_internal_addrtoamount().end(); ++it) {
        target = SendManyRequest_AddrToAmountEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_conf(), target);
  }

  // uint64 sat_per_vbyte = 4;
  if (this->sat_per_vbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sat_per_vbyte(), target);
  }

  // int64 sat_per_byte = 5 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sat_per_byte(), target);
  }

  // string label = 6;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendManyRequest.label");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_label(), target);
  }

  // int32 min_confs = 7;
  if (this->min_confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_min_confs(), target);
  }

  // bool spend_unconfirmed = 8;
  if (this->spend_unconfirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_spend_unconfirmed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendManyRequest)
  return target;
}

size_t SendManyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendManyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> AddrToAmount = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_addrtoamount_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >::const_iterator
      it = this->_internal_addrtoamount().begin();
      it != this->_internal_addrtoamount().end(); ++it) {
    total_size += SendManyRequest_AddrToAmountEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string label = 6;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // uint64 sat_per_vbyte = 4;
  if (this->sat_per_vbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat_per_vbyte());
  }

  // int64 sat_per_byte = 5 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_per_byte());
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_conf());
  }

  // int32 min_confs = 7;
  if (this->min_confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_confs());
  }

  // bool spend_unconfirmed = 8;
  if (this->spend_unconfirmed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendManyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendManyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendManyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendManyRequest)
    MergeFrom(*source);
  }
}

void SendManyRequest::MergeFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendManyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrtoamount_.MergeFrom(from.addrtoamount_);
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.sat_per_vbyte() != 0) {
    _internal_set_sat_per_vbyte(from._internal_sat_per_vbyte());
  }
  if (from.sat_per_byte() != 0) {
    _internal_set_sat_per_byte(from._internal_sat_per_byte());
  }
  if (from.target_conf() != 0) {
    _internal_set_target_conf(from._internal_target_conf());
  }
  if (from.min_confs() != 0) {
    _internal_set_min_confs(from._internal_min_confs());
  }
  if (from.spend_unconfirmed() != 0) {
    _internal_set_spend_unconfirmed(from._internal_spend_unconfirmed());
  }
}

void SendManyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyRequest::CopyFrom(const SendManyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendManyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyRequest::IsInitialized() const {
  return true;
}

void SendManyRequest::InternalSwap(SendManyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addrtoamount_.Swap(&other->addrtoamount_);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sat_per_vbyte_, other->sat_per_vbyte_);
  swap(sat_per_byte_, other->sat_per_byte_);
  swap(target_conf_, other->target_conf_);
  swap(min_confs_, other->min_confs_);
  swap(spend_unconfirmed_, other->spend_unconfirmed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendManyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendManyResponse::InitAsDefaultInstance() {
}
class SendManyResponse::_Internal {
 public:
};

SendManyResponse::SendManyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendManyResponse)
}
SendManyResponse::SendManyResponse(const SendManyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendManyResponse)
}

void SendManyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendManyResponse_rpc_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendManyResponse::~SendManyResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.SendManyResponse)
  SharedDtor();
}

void SendManyResponse::SharedDtor() {
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendManyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendManyResponse& SendManyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendManyResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendManyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendManyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendManyResponse.txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendManyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendManyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txid = 1;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txid().data(), static_cast<int>(this->_internal_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendManyResponse.txid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendManyResponse)
  return target;
}

size_t SendManyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendManyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txid = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendManyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendManyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendManyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendManyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendManyResponse)
    MergeFrom(*source);
  }
}

void SendManyResponse::MergeFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendManyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
}

void SendManyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendManyResponse::CopyFrom(const SendManyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendManyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendManyResponse::IsInitialized() const {
  return true;
}

void SendManyResponse::InternalSwap(SendManyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendManyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCoinsRequest::InitAsDefaultInstance() {
}
class SendCoinsRequest::_Internal {
 public:
};

SendCoinsRequest::SendCoinsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendCoinsRequest)
}
SendCoinsRequest::SendCoinsRequest(const SendCoinsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_confs_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(min_confs_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendCoinsRequest)
}

void SendCoinsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCoinsRequest_rpc_2eproto.base);
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_confs_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(min_confs_));
}

SendCoinsRequest::~SendCoinsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.SendCoinsRequest)
  SharedDtor();
}

void SendCoinsRequest::SharedDtor() {
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendCoinsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCoinsRequest& SendCoinsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCoinsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendCoinsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendCoinsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_confs_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(min_confs_));
  _internal_metadata_.Clear();
}

const char* SendCoinsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendCoinsRequest.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sat_per_vbyte = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sat_per_vbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_per_byte = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool send_all = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          send_all_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendCoinsRequest.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_confs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spend_unconfirmed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          spend_unconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendCoinsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendCoinsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendCoinsRequest.addr");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_addr(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_conf(), target);
  }

  // uint64 sat_per_vbyte = 4;
  if (this->sat_per_vbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_sat_per_vbyte(), target);
  }

  // int64 sat_per_byte = 5 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_sat_per_byte(), target);
  }

  // bool send_all = 6;
  if (this->send_all() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_send_all(), target);
  }

  // string label = 7;
  if (this->label().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendCoinsRequest.label");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_label(), target);
  }

  // int32 min_confs = 8;
  if (this->min_confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_min_confs(), target);
  }

  // bool spend_unconfirmed = 9;
  if (this->spend_unconfirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_spend_unconfirmed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendCoinsRequest)
  return target;
}

size_t SendCoinsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendCoinsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string addr = 1;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // string label = 7;
  if (this->label().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // uint64 sat_per_vbyte = 4;
  if (this->sat_per_vbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat_per_vbyte());
  }

  // int64 sat_per_byte = 5 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_per_byte());
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_conf());
  }

  // bool send_all = 6;
  if (this->send_all() != 0) {
    total_size += 1 + 1;
  }

  // bool spend_unconfirmed = 9;
  if (this->spend_unconfirmed() != 0) {
    total_size += 1 + 1;
  }

  // int32 min_confs = 8;
  if (this->min_confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_confs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCoinsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendCoinsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCoinsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCoinsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendCoinsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendCoinsRequest)
    MergeFrom(*source);
  }
}

void SendCoinsRequest::MergeFrom(const SendCoinsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendCoinsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  if (from.label().size() > 0) {

    label_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.label_);
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.sat_per_vbyte() != 0) {
    _internal_set_sat_per_vbyte(from._internal_sat_per_vbyte());
  }
  if (from.sat_per_byte() != 0) {
    _internal_set_sat_per_byte(from._internal_sat_per_byte());
  }
  if (from.target_conf() != 0) {
    _internal_set_target_conf(from._internal_target_conf());
  }
  if (from.send_all() != 0) {
    _internal_set_send_all(from._internal_send_all());
  }
  if (from.spend_unconfirmed() != 0) {
    _internal_set_spend_unconfirmed(from._internal_spend_unconfirmed());
  }
  if (from.min_confs() != 0) {
    _internal_set_min_confs(from._internal_min_confs());
  }
}

void SendCoinsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendCoinsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCoinsRequest::CopyFrom(const SendCoinsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendCoinsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCoinsRequest::IsInitialized() const {
  return true;
}

void SendCoinsRequest::InternalSwap(SendCoinsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(sat_per_vbyte_, other->sat_per_vbyte_);
  swap(sat_per_byte_, other->sat_per_byte_);
  swap(target_conf_, other->target_conf_);
  swap(send_all_, other->send_all_);
  swap(spend_unconfirmed_, other->spend_unconfirmed_);
  swap(min_confs_, other->min_confs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCoinsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendCoinsResponse::InitAsDefaultInstance() {
}
class SendCoinsResponse::_Internal {
 public:
};

SendCoinsResponse::SendCoinsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SendCoinsResponse)
}
SendCoinsResponse::SendCoinsResponse(const SendCoinsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SendCoinsResponse)
}

void SendCoinsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendCoinsResponse_rpc_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendCoinsResponse::~SendCoinsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.SendCoinsResponse)
  SharedDtor();
}

void SendCoinsResponse::SharedDtor() {
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendCoinsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendCoinsResponse& SendCoinsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendCoinsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void SendCoinsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SendCoinsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendCoinsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SendCoinsResponse.txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendCoinsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SendCoinsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txid = 1;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txid().data(), static_cast<int>(this->_internal_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SendCoinsResponse.txid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SendCoinsResponse)
  return target;
}

size_t SendCoinsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SendCoinsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txid = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCoinsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SendCoinsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendCoinsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendCoinsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SendCoinsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SendCoinsResponse)
    MergeFrom(*source);
  }
}

void SendCoinsResponse::MergeFrom(const SendCoinsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SendCoinsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
}

void SendCoinsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SendCoinsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCoinsResponse::CopyFrom(const SendCoinsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SendCoinsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCoinsResponse::IsInitialized() const {
  return true;
}

void SendCoinsResponse::InternalSwap(SendCoinsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendCoinsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUnspentRequest::InitAsDefaultInstance() {
}
class ListUnspentRequest::_Internal {
 public:
};

ListUnspentRequest::ListUnspentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListUnspentRequest)
}
ListUnspentRequest::ListUnspentRequest(const ListUnspentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  ::memcpy(&min_confs_, &from.min_confs_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_confs_) -
    reinterpret_cast<char*>(&min_confs_)) + sizeof(max_confs_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListUnspentRequest)
}

void ListUnspentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUnspentRequest_rpc_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_confs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_confs_) -
      reinterpret_cast<char*>(&min_confs_)) + sizeof(max_confs_));
}

ListUnspentRequest::~ListUnspentRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListUnspentRequest)
  SharedDtor();
}

void ListUnspentRequest::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListUnspentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUnspentRequest& ListUnspentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUnspentRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListUnspentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListUnspentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&min_confs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_confs_) -
      reinterpret_cast<char*>(&min_confs_)) + sizeof(max_confs_));
  _internal_metadata_.Clear();
}

const char* ListUnspentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 min_confs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_confs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ListUnspentRequest.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUnspentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListUnspentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 min_confs = 1;
  if (this->min_confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_min_confs(), target);
  }

  // int32 max_confs = 2;
  if (this->max_confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_confs(), target);
  }

  // string account = 3;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ListUnspentRequest.account");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListUnspentRequest)
  return target;
}

size_t ListUnspentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListUnspentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 3;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // int32 min_confs = 1;
  if (this->min_confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_confs());
  }

  // int32 max_confs = 2;
  if (this->max_confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_confs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUnspentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListUnspentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUnspentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUnspentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListUnspentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListUnspentRequest)
    MergeFrom(*source);
  }
}

void ListUnspentRequest::MergeFrom(const ListUnspentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListUnspentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.min_confs() != 0) {
    _internal_set_min_confs(from._internal_min_confs());
  }
  if (from.max_confs() != 0) {
    _internal_set_max_confs(from._internal_max_confs());
  }
}

void ListUnspentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListUnspentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUnspentRequest::CopyFrom(const ListUnspentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListUnspentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUnspentRequest::IsInitialized() const {
  return true;
}

void ListUnspentRequest::InternalSwap(ListUnspentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(min_confs_, other->min_confs_);
  swap(max_confs_, other->max_confs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUnspentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUnspentResponse::InitAsDefaultInstance() {
}
class ListUnspentResponse::_Internal {
 public:
};

ListUnspentResponse::ListUnspentResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListUnspentResponse)
}
ListUnspentResponse::ListUnspentResponse(const ListUnspentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      utxos_(from.utxos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListUnspentResponse)
}

void ListUnspentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUnspentResponse_rpc_2eproto.base);
}

ListUnspentResponse::~ListUnspentResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListUnspentResponse)
  SharedDtor();
}

void ListUnspentResponse::SharedDtor() {
}

void ListUnspentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUnspentResponse& ListUnspentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUnspentResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListUnspentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListUnspentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxos_.Clear();
  _internal_metadata_.Clear();
}

const char* ListUnspentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Utxo utxos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utxos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUnspentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListUnspentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Utxo utxos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utxos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_utxos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListUnspentResponse)
  return target;
}

size_t ListUnspentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListUnspentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Utxo utxos = 1;
  total_size += 1UL * this->_internal_utxos_size();
  for (const auto& msg : this->utxos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUnspentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListUnspentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUnspentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUnspentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListUnspentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListUnspentResponse)
    MergeFrom(*source);
  }
}

void ListUnspentResponse::MergeFrom(const ListUnspentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListUnspentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utxos_.MergeFrom(from.utxos_);
}

void ListUnspentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListUnspentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUnspentResponse::CopyFrom(const ListUnspentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListUnspentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUnspentResponse::IsInitialized() const {
  return true;
}

void ListUnspentResponse::InternalSwap(ListUnspentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  utxos_.InternalSwap(&other->utxos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUnspentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewAddressRequest::InitAsDefaultInstance() {
}
class NewAddressRequest::_Internal {
 public:
};

NewAddressRequest::NewAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NewAddressRequest)
}
NewAddressRequest::NewAddressRequest(const NewAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.NewAddressRequest)
}

void NewAddressRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewAddressRequest_rpc_2eproto.base);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

NewAddressRequest::~NewAddressRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.NewAddressRequest)
  SharedDtor();
}

void NewAddressRequest::SharedDtor() {
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewAddressRequest& NewAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewAddressRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void NewAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NewAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* NewAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.AddressType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lnrpc::AddressType>(val));
        } else goto handle_unusual;
        continue;
      // string account = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NewAddressRequest.account"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NewAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.AddressType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string account = 2;
  if (this->account().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_account().data(), static_cast<int>(this->_internal_account().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NewAddressRequest.account");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_account(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NewAddressRequest)
  return target;
}

size_t NewAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NewAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_account());
  }

  // .lnrpc.AddressType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NewAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NewAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NewAddressRequest)
    MergeFrom(*source);
  }
}

void NewAddressRequest::MergeFrom(const NewAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NewAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void NewAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NewAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAddressRequest::CopyFrom(const NewAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NewAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAddressRequest::IsInitialized() const {
  return true;
}

void NewAddressRequest::InternalSwap(NewAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_.Swap(&other->account_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewAddressResponse::InitAsDefaultInstance() {
}
class NewAddressResponse::_Internal {
 public:
};

NewAddressResponse::NewAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NewAddressResponse)
}
NewAddressResponse::NewAddressResponse(const NewAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.NewAddressResponse)
}

void NewAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewAddressResponse_rpc_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewAddressResponse::~NewAddressResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.NewAddressResponse)
  SharedDtor();
}

void NewAddressResponse::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewAddressResponse& NewAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewAddressResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void NewAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NewAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NewAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NewAddressResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NewAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NewAddressResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NewAddressResponse)
  return target;
}

size_t NewAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NewAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NewAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NewAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NewAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NewAddressResponse)
    MergeFrom(*source);
  }
}

void NewAddressResponse::MergeFrom(const NewAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NewAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void NewAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NewAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewAddressResponse::CopyFrom(const NewAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NewAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewAddressResponse::IsInitialized() const {
  return true;
}

void NewAddressResponse::InternalSwap(NewAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignMessageRequest::InitAsDefaultInstance() {
}
class SignMessageRequest::_Internal {
 public:
};

SignMessageRequest::SignMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SignMessageRequest)
}
SignMessageRequest::SignMessageRequest(const SignMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SignMessageRequest)
}

void SignMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignMessageRequest_rpc_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignMessageRequest::~SignMessageRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.SignMessageRequest)
  SharedDtor();
}

void SignMessageRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignMessageRequest& SignMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignMessageRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void SignMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SignMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SignMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SignMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SignMessageRequest)
  return target;
}

size_t SignMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SignMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SignMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SignMessageRequest)
    MergeFrom(*source);
  }
}

void SignMessageRequest::MergeFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SignMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
}

void SignMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageRequest::CopyFrom(const SignMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SignMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageRequest::IsInitialized() const {
  return true;
}

void SignMessageRequest::InternalSwap(SignMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignMessageResponse::InitAsDefaultInstance() {
}
class SignMessageResponse::_Internal {
 public:
};

SignMessageResponse::SignMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.SignMessageResponse)
}
SignMessageResponse::SignMessageResponse(const SignMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.SignMessageResponse)
}

void SignMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignMessageResponse_rpc_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SignMessageResponse::~SignMessageResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.SignMessageResponse)
  SharedDtor();
}

void SignMessageResponse::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SignMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignMessageResponse& SignMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignMessageResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void SignMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.SignMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SignMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.SignMessageResponse.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.SignMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.SignMessageResponse.signature");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.SignMessageResponse)
  return target;
}

size_t SignMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.SignMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.SignMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.SignMessageResponse)
    MergeFrom(*source);
  }
}

void SignMessageResponse::MergeFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.SignMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void SignMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMessageResponse::CopyFrom(const SignMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.SignMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMessageResponse::IsInitialized() const {
  return true;
}

void SignMessageResponse::InternalSwap(SignMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SignMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyMessageRequest::InitAsDefaultInstance() {
}
class VerifyMessageRequest::_Internal {
 public:
};

VerifyMessageRequest::VerifyMessageRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.VerifyMessageRequest)
}
VerifyMessageRequest::VerifyMessageRequest(const VerifyMessageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.VerifyMessageRequest)
}

void VerifyMessageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyMessageRequest_rpc_2eproto.base);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VerifyMessageRequest::~VerifyMessageRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.VerifyMessageRequest)
  SharedDtor();
}

void VerifyMessageRequest::SharedDtor() {
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyMessageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyMessageRequest& VerifyMessageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyMessageRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void VerifyMessageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.VerifyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* VerifyMessageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.VerifyMessageRequest.signature"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyMessageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.VerifyMessageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signature().data(), static_cast<int>(this->_internal_signature().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.VerifyMessageRequest.signature");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.VerifyMessageRequest)
  return target;
}

size_t VerifyMessageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.VerifyMessageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes msg = 1;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg());
  }

  // string signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyMessageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyMessageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.VerifyMessageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.VerifyMessageRequest)
    MergeFrom(*source);
  }
}

void VerifyMessageRequest::MergeFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.VerifyMessageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
}

void VerifyMessageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageRequest::CopyFrom(const VerifyMessageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.VerifyMessageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageRequest::IsInitialized() const {
  return true;
}

void VerifyMessageRequest::InternalSwap(VerifyMessageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  msg_.Swap(&other->msg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyMessageResponse::InitAsDefaultInstance() {
}
class VerifyMessageResponse::_Internal {
 public:
};

VerifyMessageResponse::VerifyMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.VerifyMessageResponse)
}
VerifyMessageResponse::VerifyMessageResponse(const VerifyMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  valid_ = from.valid_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.VerifyMessageResponse)
}

void VerifyMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VerifyMessageResponse_rpc_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valid_ = false;
}

VerifyMessageResponse::~VerifyMessageResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.VerifyMessageResponse)
  SharedDtor();
}

void VerifyMessageResponse::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VerifyMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyMessageResponse& VerifyMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyMessageResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void VerifyMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.VerifyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  valid_ = false;
  _internal_metadata_.Clear();
}

const char* VerifyMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool valid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.VerifyMessageResponse.pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.VerifyMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_valid(), target);
  }

  // string pubkey = 2;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.VerifyMessageResponse.pubkey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.VerifyMessageResponse)
  return target;
}

size_t VerifyMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.VerifyMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubkey = 2;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.VerifyMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.VerifyMessageResponse)
    MergeFrom(*source);
  }
}

void VerifyMessageResponse::MergeFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.VerifyMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.valid() != 0) {
    _internal_set_valid(from._internal_valid());
  }
}

void VerifyMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyMessageResponse::CopyFrom(const VerifyMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.VerifyMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyMessageResponse::IsInitialized() const {
  return true;
}

void VerifyMessageResponse::InternalSwap(VerifyMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(valid_, other->valid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectPeerRequest::InitAsDefaultInstance() {
  ::lnrpc::_ConnectPeerRequest_default_instance_._instance.get_mutable()->addr_ = const_cast< ::lnrpc::LightningAddress*>(
      ::lnrpc::LightningAddress::internal_default_instance());
}
class ConnectPeerRequest::_Internal {
 public:
  static const ::lnrpc::LightningAddress& addr(const ConnectPeerRequest* msg);
};

const ::lnrpc::LightningAddress&
ConnectPeerRequest::_Internal::addr(const ConnectPeerRequest* msg) {
  return *msg->addr_;
}
ConnectPeerRequest::ConnectPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ConnectPeerRequest)
}
ConnectPeerRequest::ConnectPeerRequest(const ConnectPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_addr()) {
    addr_ = new ::lnrpc::LightningAddress(*from.addr_);
  } else {
    addr_ = nullptr;
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&perm_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(perm_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ConnectPeerRequest)
}

void ConnectPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnectPeerRequest_rpc_2eproto.base);
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perm_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(perm_));
}

ConnectPeerRequest::~ConnectPeerRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ConnectPeerRequest)
  SharedDtor();
}

void ConnectPeerRequest::SharedDtor() {
  if (this != internal_default_instance()) delete addr_;
}

void ConnectPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectPeerRequest& ConnectPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectPeerRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ConnectPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ConnectPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && addr_ != nullptr) {
    delete addr_;
  }
  addr_ = nullptr;
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&perm_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(perm_));
  _internal_metadata_.Clear();
}

const char* ConnectPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.LightningAddress addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_addr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool perm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          perm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ConnectPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.LightningAddress addr = 1;
  if (this->has_addr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::addr(this), target, stream);
  }

  // bool perm = 2;
  if (this->perm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_perm(), target);
  }

  // uint64 timeout = 3;
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ConnectPeerRequest)
  return target;
}

size_t ConnectPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ConnectPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.LightningAddress addr = 1;
  if (this->has_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *addr_);
  }

  // uint64 timeout = 3;
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timeout());
  }

  // bool perm = 2;
  if (this->perm() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ConnectPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ConnectPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ConnectPeerRequest)
    MergeFrom(*source);
  }
}

void ConnectPeerRequest::MergeFrom(const ConnectPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ConnectPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addr()) {
    _internal_mutable_addr()->::lnrpc::LightningAddress::MergeFrom(from._internal_addr());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.perm() != 0) {
    _internal_set_perm(from._internal_perm());
  }
}

void ConnectPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ConnectPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectPeerRequest::CopyFrom(const ConnectPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ConnectPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectPeerRequest::IsInitialized() const {
  return true;
}

void ConnectPeerRequest::InternalSwap(ConnectPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(addr_, other->addr_);
  swap(timeout_, other->timeout_);
  swap(perm_, other->perm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectPeerResponse::InitAsDefaultInstance() {
}
class ConnectPeerResponse::_Internal {
 public:
};

ConnectPeerResponse::ConnectPeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ConnectPeerResponse)
}
ConnectPeerResponse::ConnectPeerResponse(const ConnectPeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ConnectPeerResponse)
}

void ConnectPeerResponse::SharedCtor() {
}

ConnectPeerResponse::~ConnectPeerResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ConnectPeerResponse)
  SharedDtor();
}

void ConnectPeerResponse::SharedDtor() {
}

void ConnectPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectPeerResponse& ConnectPeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectPeerResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ConnectPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ConnectPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ConnectPeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectPeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ConnectPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ConnectPeerResponse)
  return target;
}

size_t ConnectPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ConnectPeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectPeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ConnectPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectPeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectPeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ConnectPeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ConnectPeerResponse)
    MergeFrom(*source);
  }
}

void ConnectPeerResponse::MergeFrom(const ConnectPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ConnectPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ConnectPeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ConnectPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectPeerResponse::CopyFrom(const ConnectPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ConnectPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectPeerResponse::IsInitialized() const {
  return true;
}

void ConnectPeerResponse::InternalSwap(ConnectPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectPeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectPeerRequest::InitAsDefaultInstance() {
}
class DisconnectPeerRequest::_Internal {
 public:
};

DisconnectPeerRequest::DisconnectPeerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DisconnectPeerRequest)
}
DisconnectPeerRequest::DisconnectPeerRequest(const DisconnectPeerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.DisconnectPeerRequest)
}

void DisconnectPeerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DisconnectPeerRequest_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DisconnectPeerRequest::~DisconnectPeerRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.DisconnectPeerRequest)
  SharedDtor();
}

void DisconnectPeerRequest::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DisconnectPeerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectPeerRequest& DisconnectPeerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectPeerRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DisconnectPeerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DisconnectPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DisconnectPeerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.DisconnectPeerRequest.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectPeerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DisconnectPeerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.DisconnectPeerRequest.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DisconnectPeerRequest)
  return target;
}

size_t DisconnectPeerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DisconnectPeerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectPeerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DisconnectPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectPeerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectPeerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DisconnectPeerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DisconnectPeerRequest)
    MergeFrom(*source);
  }
}

void DisconnectPeerRequest::MergeFrom(const DisconnectPeerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DisconnectPeerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
}

void DisconnectPeerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DisconnectPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectPeerRequest::CopyFrom(const DisconnectPeerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DisconnectPeerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectPeerRequest::IsInitialized() const {
  return true;
}

void DisconnectPeerRequest::InternalSwap(DisconnectPeerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectPeerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DisconnectPeerResponse::InitAsDefaultInstance() {
}
class DisconnectPeerResponse::_Internal {
 public:
};

DisconnectPeerResponse::DisconnectPeerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DisconnectPeerResponse)
}
DisconnectPeerResponse::DisconnectPeerResponse(const DisconnectPeerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.DisconnectPeerResponse)
}

void DisconnectPeerResponse::SharedCtor() {
}

DisconnectPeerResponse::~DisconnectPeerResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.DisconnectPeerResponse)
  SharedDtor();
}

void DisconnectPeerResponse::SharedDtor() {
}

void DisconnectPeerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DisconnectPeerResponse& DisconnectPeerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DisconnectPeerResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DisconnectPeerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DisconnectPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DisconnectPeerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DisconnectPeerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DisconnectPeerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DisconnectPeerResponse)
  return target;
}

size_t DisconnectPeerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DisconnectPeerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectPeerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DisconnectPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DisconnectPeerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DisconnectPeerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DisconnectPeerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DisconnectPeerResponse)
    MergeFrom(*source);
  }
}

void DisconnectPeerResponse::MergeFrom(const DisconnectPeerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DisconnectPeerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DisconnectPeerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DisconnectPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DisconnectPeerResponse::CopyFrom(const DisconnectPeerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DisconnectPeerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectPeerResponse::IsInitialized() const {
  return true;
}

void DisconnectPeerResponse::InternalSwap(DisconnectPeerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DisconnectPeerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTLC::InitAsDefaultInstance() {
}
class HTLC::_Internal {
 public:
};

HTLC::HTLC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.HTLC)
}
HTLC::HTLC(const HTLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash_lock().empty()) {
    hash_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_lock_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&forwarding_htlc_index_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(forwarding_htlc_index_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.HTLC)
}

void HTLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTLC_rpc_2eproto.base);
  hash_lock_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forwarding_htlc_index_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(forwarding_htlc_index_));
}

HTLC::~HTLC() {
  // @@protoc_insertion_point(destructor:lnrpc.HTLC)
  SharedDtor();
}

void HTLC::SharedDtor() {
  hash_lock_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTLC& HTLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTLC_rpc_2eproto.base);
  return *internal_default_instance();
}


void HTLC::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.HTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_lock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&forwarding_htlc_index_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(forwarding_htlc_index_));
  _internal_metadata_.Clear();
}

const char* HTLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool incoming = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash_lock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash_lock();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiration_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiration_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 htlc_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          htlc_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 forwarding_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          forwarding_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 forwarding_htlc_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          forwarding_htlc_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.HTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool incoming = 1;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_incoming(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // bytes hash_lock = 3;
  if (this->hash_lock().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash_lock(), target);
  }

  // uint32 expiration_height = 4;
  if (this->expiration_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expiration_height(), target);
  }

  // uint64 htlc_index = 5;
  if (this->htlc_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_htlc_index(), target);
  }

  // uint64 forwarding_channel = 6;
  if (this->forwarding_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_forwarding_channel(), target);
  }

  // uint64 forwarding_htlc_index = 7;
  if (this->forwarding_htlc_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_forwarding_htlc_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.HTLC)
  return target;
}

size_t HTLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.HTLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash_lock = 3;
  if (this->hash_lock().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash_lock());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // bool incoming = 1;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  // uint32 expiration_height = 4;
  if (this->expiration_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiration_height());
  }

  // uint64 htlc_index = 5;
  if (this->htlc_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_htlc_index());
  }

  // uint64 forwarding_channel = 6;
  if (this->forwarding_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_forwarding_channel());
  }

  // uint64 forwarding_htlc_index = 7;
  if (this->forwarding_htlc_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_forwarding_htlc_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.HTLC)
  GOOGLE_DCHECK_NE(&from, this);
  const HTLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.HTLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.HTLC)
    MergeFrom(*source);
  }
}

void HTLC::MergeFrom(const HTLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.HTLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash_lock().size() > 0) {

    hash_lock_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_lock_);
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
  if (from.expiration_height() != 0) {
    _internal_set_expiration_height(from._internal_expiration_height());
  }
  if (from.htlc_index() != 0) {
    _internal_set_htlc_index(from._internal_htlc_index());
  }
  if (from.forwarding_channel() != 0) {
    _internal_set_forwarding_channel(from._internal_forwarding_channel());
  }
  if (from.forwarding_htlc_index() != 0) {
    _internal_set_forwarding_htlc_index(from._internal_forwarding_htlc_index());
  }
}

void HTLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.HTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTLC::CopyFrom(const HTLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.HTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTLC::IsInitialized() const {
  return true;
}

void HTLC::InternalSwap(HTLC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_lock_.Swap(&other->hash_lock_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(incoming_, other->incoming_);
  swap(expiration_height_, other->expiration_height_);
  swap(htlc_index_, other->htlc_index_);
  swap(forwarding_channel_, other->forwarding_channel_);
  swap(forwarding_htlc_index_, other->forwarding_htlc_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HTLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelConstraints::InitAsDefaultInstance() {
}
class ChannelConstraints::_Internal {
 public:
};

ChannelConstraints::ChannelConstraints()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelConstraints)
}
ChannelConstraints::ChannelConstraints(const ChannelConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chan_reserve_sat_, &from.chan_reserve_sat_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_htlc_msat_) -
    reinterpret_cast<char*>(&chan_reserve_sat_)) + sizeof(min_htlc_msat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelConstraints)
}

void ChannelConstraints::SharedCtor() {
  ::memset(&chan_reserve_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_htlc_msat_) -
      reinterpret_cast<char*>(&chan_reserve_sat_)) + sizeof(min_htlc_msat_));
}

ChannelConstraints::~ChannelConstraints() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelConstraints)
  SharedDtor();
}

void ChannelConstraints::SharedDtor() {
}

void ChannelConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelConstraints& ChannelConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelConstraints_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chan_reserve_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_htlc_msat_) -
      reinterpret_cast<char*>(&chan_reserve_sat_)) + sizeof(min_htlc_msat_));
  _internal_metadata_.Clear();
}

const char* ChannelConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 csv_delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          csv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_reserve_sat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chan_reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 dust_limit_sat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dust_limit_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_pending_amt_msat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_pending_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_htlc_msat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_accepted_htlcs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_accepted_htlcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 csv_delay = 1;
  if (this->csv_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_csv_delay(), target);
  }

  // uint64 chan_reserve_sat = 2;
  if (this->chan_reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chan_reserve_sat(), target);
  }

  // uint64 dust_limit_sat = 3;
  if (this->dust_limit_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dust_limit_sat(), target);
  }

  // uint64 max_pending_amt_msat = 4;
  if (this->max_pending_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_pending_amt_msat(), target);
  }

  // uint64 min_htlc_msat = 5;
  if (this->min_htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_min_htlc_msat(), target);
  }

  // uint32 max_accepted_htlcs = 6;
  if (this->max_accepted_htlcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_accepted_htlcs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelConstraints)
  return target;
}

size_t ChannelConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 chan_reserve_sat = 2;
  if (this->chan_reserve_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_reserve_sat());
  }

  // uint64 dust_limit_sat = 3;
  if (this->dust_limit_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_dust_limit_sat());
  }

  // uint32 csv_delay = 1;
  if (this->csv_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csv_delay());
  }

  // uint32 max_accepted_htlcs = 6;
  if (this->max_accepted_htlcs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_accepted_htlcs());
  }

  // uint64 max_pending_amt_msat = 4;
  if (this->max_pending_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_pending_amt_msat());
  }

  // uint64 min_htlc_msat = 5;
  if (this->min_htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_htlc_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelConstraints)
    MergeFrom(*source);
  }
}

void ChannelConstraints::MergeFrom(const ChannelConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chan_reserve_sat() != 0) {
    _internal_set_chan_reserve_sat(from._internal_chan_reserve_sat());
  }
  if (from.dust_limit_sat() != 0) {
    _internal_set_dust_limit_sat(from._internal_dust_limit_sat());
  }
  if (from.csv_delay() != 0) {
    _internal_set_csv_delay(from._internal_csv_delay());
  }
  if (from.max_accepted_htlcs() != 0) {
    _internal_set_max_accepted_htlcs(from._internal_max_accepted_htlcs());
  }
  if (from.max_pending_amt_msat() != 0) {
    _internal_set_max_pending_amt_msat(from._internal_max_pending_amt_msat());
  }
  if (from.min_htlc_msat() != 0) {
    _internal_set_min_htlc_msat(from._internal_min_htlc_msat());
  }
}

void ChannelConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConstraints::CopyFrom(const ChannelConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConstraints::IsInitialized() const {
  return true;
}

void ChannelConstraints::InternalSwap(ChannelConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chan_reserve_sat_, other->chan_reserve_sat_);
  swap(dust_limit_sat_, other->dust_limit_sat_);
  swap(csv_delay_, other->csv_delay_);
  swap(max_accepted_htlcs_, other->max_accepted_htlcs_);
  swap(max_pending_amt_msat_, other->max_pending_amt_msat_);
  swap(min_htlc_msat_, other->min_htlc_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Channel::InitAsDefaultInstance() {
  ::lnrpc::_Channel_default_instance_._instance.get_mutable()->local_constraints_ = const_cast< ::lnrpc::ChannelConstraints*>(
      ::lnrpc::ChannelConstraints::internal_default_instance());
  ::lnrpc::_Channel_default_instance_._instance.get_mutable()->remote_constraints_ = const_cast< ::lnrpc::ChannelConstraints*>(
      ::lnrpc::ChannelConstraints::internal_default_instance());
}
class Channel::_Internal {
 public:
  static const ::lnrpc::ChannelConstraints& local_constraints(const Channel* msg);
  static const ::lnrpc::ChannelConstraints& remote_constraints(const Channel* msg);
};

const ::lnrpc::ChannelConstraints&
Channel::_Internal::local_constraints(const Channel* msg) {
  return *msg->local_constraints_;
}
const ::lnrpc::ChannelConstraints&
Channel::_Internal::remote_constraints(const Channel* msg) {
  return *msg->remote_constraints_;
}
Channel::Channel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pending_htlcs_(from.pending_htlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_pubkey().empty()) {
    remote_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pubkey_);
  }
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_point().empty()) {
    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  chan_status_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chan_status_flags().empty()) {
    chan_status_flags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_status_flags_);
  }
  close_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close_address().empty()) {
    close_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_address_);
  }
  if (from._internal_has_local_constraints()) {
    local_constraints_ = new ::lnrpc::ChannelConstraints(*from.local_constraints_);
  } else {
    local_constraints_ = nullptr;
  }
  if (from._internal_has_remote_constraints()) {
    remote_constraints_ = new ::lnrpc::ChannelConstraints(*from.remote_constraints_);
  } else {
    remote_constraints_ = nullptr;
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&thaw_height_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(thaw_height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Channel)
}

void Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Channel_rpc_2eproto.base);
  remote_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chan_status_flags_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_constraints_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thaw_height_) -
      reinterpret_cast<char*>(&local_constraints_)) + sizeof(thaw_height_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:lnrpc.Channel)
  SharedDtor();
}

void Channel::SharedDtor() {
  remote_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chan_status_flags_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete local_constraints_;
  if (this != internal_default_instance()) delete remote_constraints_;
}

void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Channel& Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Channel_rpc_2eproto.base);
  return *internal_default_instance();
}


void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_htlcs_.Clear();
  remote_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chan_status_flags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && local_constraints_ != nullptr) {
    delete local_constraints_;
  }
  local_constraints_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && remote_constraints_ != nullptr) {
    delete remote_constraints_;
  }
  remote_constraints_ = nullptr;
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thaw_height_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(thaw_height_));
  _internal_metadata_.Clear();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Channel.remote_pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_channel_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Channel.channel_point"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          local_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remote_balance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          remote_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 commit_fee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          commit_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 commit_weight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          commit_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_per_kw = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          fee_per_kw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unsettled_balance = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          unsettled_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_satoshis_sent = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          total_satoshis_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_satoshis_received = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          total_satoshis_received_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_updates = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          num_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.HTLC pending_htlcs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_htlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 csv_delay = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          csv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool initiator = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          initiator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chan_status_flags = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_chan_status_flags();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Channel.chan_status_flags"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_chan_reserve_sat = 20 [deprecated = true];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          local_chan_reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remote_chan_reserve_sat = 21 [deprecated = true];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          remote_chan_reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool static_remote_key = 22 [deprecated = true];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          static_remote_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetime = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 uptime = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          uptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string close_address = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_close_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Channel.close_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.CommitmentType commitment_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_commitment_type(static_cast<::lnrpc::CommitmentType>(val));
        } else goto handle_unusual;
        continue;
      // uint64 push_amount_sat = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          push_amount_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thaw_height = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          thaw_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelConstraints local_constraints = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_constraints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelConstraints remote_constraints = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_constraints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active = 1;
  if (this->active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active(), target);
  }

  // string remote_pubkey = 2;
  if (this->remote_pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_pubkey().data(), static_cast<int>(this->_internal_remote_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Channel.remote_pubkey");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_pubkey(), target);
  }

  // string channel_point = 3;
  if (this->channel_point().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_point().data(), static_cast<int>(this->_internal_channel_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Channel.channel_point");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channel_point(), target);
  }

  // uint64 chan_id = 4 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chan_id(), target);
  }

  // int64 capacity = 5;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_capacity(), target);
  }

  // int64 local_balance = 6;
  if (this->local_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_local_balance(), target);
  }

  // int64 remote_balance = 7;
  if (this->remote_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_remote_balance(), target);
  }

  // int64 commit_fee = 8;
  if (this->commit_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_commit_fee(), target);
  }

  // int64 commit_weight = 9;
  if (this->commit_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_commit_weight(), target);
  }

  // int64 fee_per_kw = 10;
  if (this->fee_per_kw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_fee_per_kw(), target);
  }

  // int64 unsettled_balance = 11;
  if (this->unsettled_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_unsettled_balance(), target);
  }

  // int64 total_satoshis_sent = 12;
  if (this->total_satoshis_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_total_satoshis_sent(), target);
  }

  // int64 total_satoshis_received = 13;
  if (this->total_satoshis_received() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_total_satoshis_received(), target);
  }

  // uint64 num_updates = 14;
  if (this->num_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_num_updates(), target);
  }

  // repeated .lnrpc.HTLC pending_htlcs = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_htlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_pending_htlcs(i), target, stream);
  }

  // uint32 csv_delay = 16 [deprecated = true];
  if (this->csv_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_csv_delay(), target);
  }

  // bool private = 17;
  if (this->private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_private_(), target);
  }

  // bool initiator = 18;
  if (this->initiator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_initiator(), target);
  }

  // string chan_status_flags = 19;
  if (this->chan_status_flags().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chan_status_flags().data(), static_cast<int>(this->_internal_chan_status_flags().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Channel.chan_status_flags");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_chan_status_flags(), target);
  }

  // int64 local_chan_reserve_sat = 20 [deprecated = true];
  if (this->local_chan_reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_local_chan_reserve_sat(), target);
  }

  // int64 remote_chan_reserve_sat = 21 [deprecated = true];
  if (this->remote_chan_reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_remote_chan_reserve_sat(), target);
  }

  // bool static_remote_key = 22 [deprecated = true];
  if (this->static_remote_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_static_remote_key(), target);
  }

  // int64 lifetime = 23;
  if (this->lifetime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_lifetime(), target);
  }

  // int64 uptime = 24;
  if (this->uptime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(24, this->_internal_uptime(), target);
  }

  // string close_address = 25;
  if (this->close_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_address().data(), static_cast<int>(this->_internal_close_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Channel.close_address");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_close_address(), target);
  }

  // .lnrpc.CommitmentType commitment_type = 26;
  if (this->commitment_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      26, this->_internal_commitment_type(), target);
  }

  // uint64 push_amount_sat = 27;
  if (this->push_amount_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(27, this->_internal_push_amount_sat(), target);
  }

  // uint32 thaw_height = 28;
  if (this->thaw_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_thaw_height(), target);
  }

  // .lnrpc.ChannelConstraints local_constraints = 29;
  if (this->has_local_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::local_constraints(this), target, stream);
  }

  // .lnrpc.ChannelConstraints remote_constraints = 30;
  if (this->has_remote_constraints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::remote_constraints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.HTLC pending_htlcs = 15;
  total_size += 1UL * this->_internal_pending_htlcs_size();
  for (const auto& msg : this->pending_htlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string remote_pubkey = 2;
  if (this->remote_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_pubkey());
  }

  // string channel_point = 3;
  if (this->channel_point().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_point());
  }

  // string chan_status_flags = 19;
  if (this->chan_status_flags().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chan_status_flags());
  }

  // string close_address = 25;
  if (this->close_address().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_address());
  }

  // .lnrpc.ChannelConstraints local_constraints = 29;
  if (this->has_local_constraints()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_constraints_);
  }

  // .lnrpc.ChannelConstraints remote_constraints = 30;
  if (this->has_remote_constraints()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_constraints_);
  }

  // uint64 chan_id = 4 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // int64 capacity = 5;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // int64 local_balance = 6;
  if (this->local_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_balance());
  }

  // int64 remote_balance = 7;
  if (this->remote_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remote_balance());
  }

  // int64 commit_fee = 8;
  if (this->commit_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commit_fee());
  }

  // int64 commit_weight = 9;
  if (this->commit_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commit_weight());
  }

  // int64 fee_per_kw = 10;
  if (this->fee_per_kw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_per_kw());
  }

  // int64 unsettled_balance = 11;
  if (this->unsettled_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unsettled_balance());
  }

  // int64 total_satoshis_sent = 12;
  if (this->total_satoshis_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_satoshis_sent());
  }

  // int64 total_satoshis_received = 13;
  if (this->total_satoshis_received() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_satoshis_received());
  }

  // uint64 num_updates = 14;
  if (this->num_updates() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_updates());
  }

  // bool active = 1;
  if (this->active() != 0) {
    total_size += 1 + 1;
  }

  // bool private = 17;
  if (this->private_() != 0) {
    total_size += 2 + 1;
  }

  // bool initiator = 18;
  if (this->initiator() != 0) {
    total_size += 2 + 1;
  }

  // bool static_remote_key = 22 [deprecated = true];
  if (this->static_remote_key() != 0) {
    total_size += 2 + 1;
  }

  // uint32 csv_delay = 16 [deprecated = true];
  if (this->csv_delay() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_csv_delay());
  }

  // int64 local_chan_reserve_sat = 20 [deprecated = true];
  if (this->local_chan_reserve_sat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_chan_reserve_sat());
  }

  // int64 remote_chan_reserve_sat = 21 [deprecated = true];
  if (this->remote_chan_reserve_sat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remote_chan_reserve_sat());
  }

  // int64 lifetime = 23;
  if (this->lifetime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetime());
  }

  // int64 uptime = 24;
  if (this->uptime() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_uptime());
  }

  // uint64 push_amount_sat = 27;
  if (this->push_amount_sat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_push_amount_sat());
  }

  // .lnrpc.CommitmentType commitment_type = 26;
  if (this->commitment_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commitment_type());
  }

  // uint32 thaw_height = 28;
  if (this->thaw_height() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thaw_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Channel)
    MergeFrom(*source);
  }
}

void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_htlcs_.MergeFrom(from.pending_htlcs_);
  if (from.remote_pubkey().size() > 0) {

    remote_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pubkey_);
  }
  if (from.channel_point().size() > 0) {

    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  if (from.chan_status_flags().size() > 0) {

    chan_status_flags_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_status_flags_);
  }
  if (from.close_address().size() > 0) {

    close_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_address_);
  }
  if (from.has_local_constraints()) {
    _internal_mutable_local_constraints()->::lnrpc::ChannelConstraints::MergeFrom(from._internal_local_constraints());
  }
  if (from.has_remote_constraints()) {
    _internal_mutable_remote_constraints()->::lnrpc::ChannelConstraints::MergeFrom(from._internal_remote_constraints());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.local_balance() != 0) {
    _internal_set_local_balance(from._internal_local_balance());
  }
  if (from.remote_balance() != 0) {
    _internal_set_remote_balance(from._internal_remote_balance());
  }
  if (from.commit_fee() != 0) {
    _internal_set_commit_fee(from._internal_commit_fee());
  }
  if (from.commit_weight() != 0) {
    _internal_set_commit_weight(from._internal_commit_weight());
  }
  if (from.fee_per_kw() != 0) {
    _internal_set_fee_per_kw(from._internal_fee_per_kw());
  }
  if (from.unsettled_balance() != 0) {
    _internal_set_unsettled_balance(from._internal_unsettled_balance());
  }
  if (from.total_satoshis_sent() != 0) {
    _internal_set_total_satoshis_sent(from._internal_total_satoshis_sent());
  }
  if (from.total_satoshis_received() != 0) {
    _internal_set_total_satoshis_received(from._internal_total_satoshis_received());
  }
  if (from.num_updates() != 0) {
    _internal_set_num_updates(from._internal_num_updates());
  }
  if (from.active() != 0) {
    _internal_set_active(from._internal_active());
  }
  if (from.private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from.initiator() != 0) {
    _internal_set_initiator(from._internal_initiator());
  }
  if (from.static_remote_key() != 0) {
    _internal_set_static_remote_key(from._internal_static_remote_key());
  }
  if (from.csv_delay() != 0) {
    _internal_set_csv_delay(from._internal_csv_delay());
  }
  if (from.local_chan_reserve_sat() != 0) {
    _internal_set_local_chan_reserve_sat(from._internal_local_chan_reserve_sat());
  }
  if (from.remote_chan_reserve_sat() != 0) {
    _internal_set_remote_chan_reserve_sat(from._internal_remote_chan_reserve_sat());
  }
  if (from.lifetime() != 0) {
    _internal_set_lifetime(from._internal_lifetime());
  }
  if (from.uptime() != 0) {
    _internal_set_uptime(from._internal_uptime());
  }
  if (from.push_amount_sat() != 0) {
    _internal_set_push_amount_sat(from._internal_push_amount_sat());
  }
  if (from.commitment_type() != 0) {
    _internal_set_commitment_type(from._internal_commitment_type());
  }
  if (from.thaw_height() != 0) {
    _internal_set_thaw_height(from._internal_thaw_height());
  }
}

void Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_htlcs_.InternalSwap(&other->pending_htlcs_);
  remote_pubkey_.Swap(&other->remote_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_point_.Swap(&other->channel_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chan_status_flags_.Swap(&other->chan_status_flags_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  close_address_.Swap(&other->close_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_constraints_, other->local_constraints_);
  swap(remote_constraints_, other->remote_constraints_);
  swap(chan_id_, other->chan_id_);
  swap(capacity_, other->capacity_);
  swap(local_balance_, other->local_balance_);
  swap(remote_balance_, other->remote_balance_);
  swap(commit_fee_, other->commit_fee_);
  swap(commit_weight_, other->commit_weight_);
  swap(fee_per_kw_, other->fee_per_kw_);
  swap(unsettled_balance_, other->unsettled_balance_);
  swap(total_satoshis_sent_, other->total_satoshis_sent_);
  swap(total_satoshis_received_, other->total_satoshis_received_);
  swap(num_updates_, other->num_updates_);
  swap(active_, other->active_);
  swap(private__, other->private__);
  swap(initiator_, other->initiator_);
  swap(static_remote_key_, other->static_remote_key_);
  swap(csv_delay_, other->csv_delay_);
  swap(local_chan_reserve_sat_, other->local_chan_reserve_sat_);
  swap(remote_chan_reserve_sat_, other->remote_chan_reserve_sat_);
  swap(lifetime_, other->lifetime_);
  swap(uptime_, other->uptime_);
  swap(push_amount_sat_, other->push_amount_sat_);
  swap(commitment_type_, other->commitment_type_);
  swap(thaw_height_, other->thaw_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListChannelsRequest::InitAsDefaultInstance() {
}
class ListChannelsRequest::_Internal {
 public:
};

ListChannelsRequest::ListChannelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListChannelsRequest)
}
ListChannelsRequest::ListChannelsRequest(const ListChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_peer().empty()) {
    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  ::memcpy(&active_only_, &from.active_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&private_only_) -
    reinterpret_cast<char*>(&active_only_)) + sizeof(private_only_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListChannelsRequest)
}

void ListChannelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListChannelsRequest_rpc_2eproto.base);
  peer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private_only_) -
      reinterpret_cast<char*>(&active_only_)) + sizeof(private_only_));
}

ListChannelsRequest::~ListChannelsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListChannelsRequest)
  SharedDtor();
}

void ListChannelsRequest::SharedDtor() {
  peer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListChannelsRequest& ListChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListChannelsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&private_only_) -
      reinterpret_cast<char*>(&active_only_)) + sizeof(private_only_));
  _internal_metadata_.Clear();
}

const char* ListChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool active_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          active_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inactive_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          inactive_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public_only = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          public_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private_only = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          private_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes peer = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_peer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool active_only = 1;
  if (this->active_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_active_only(), target);
  }

  // bool inactive_only = 2;
  if (this->inactive_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_inactive_only(), target);
  }

  // bool public_only = 3;
  if (this->public_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_public_only(), target);
  }

  // bool private_only = 4;
  if (this->private_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_private_only(), target);
  }

  // bytes peer = 5;
  if (this->peer().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_peer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListChannelsRequest)
  return target;
}

size_t ListChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes peer = 5;
  if (this->peer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_peer());
  }

  // bool active_only = 1;
  if (this->active_only() != 0) {
    total_size += 1 + 1;
  }

  // bool inactive_only = 2;
  if (this->inactive_only() != 0) {
    total_size += 1 + 1;
  }

  // bool public_only = 3;
  if (this->public_only() != 0) {
    total_size += 1 + 1;
  }

  // bool private_only = 4;
  if (this->private_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListChannelsRequest)
    MergeFrom(*source);
  }
}

void ListChannelsRequest::MergeFrom(const ListChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.peer().size() > 0) {

    peer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.peer_);
  }
  if (from.active_only() != 0) {
    _internal_set_active_only(from._internal_active_only());
  }
  if (from.inactive_only() != 0) {
    _internal_set_inactive_only(from._internal_inactive_only());
  }
  if (from.public_only() != 0) {
    _internal_set_public_only(from._internal_public_only());
  }
  if (from.private_only() != 0) {
    _internal_set_private_only(from._internal_private_only());
  }
}

void ListChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelsRequest::CopyFrom(const ListChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelsRequest::IsInitialized() const {
  return true;
}

void ListChannelsRequest::InternalSwap(ListChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peer_.Swap(&other->peer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_only_, other->active_only_);
  swap(inactive_only_, other->inactive_only_);
  swap(public_only_, other->public_only_);
  swap(private_only_, other->private_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListChannelsResponse::InitAsDefaultInstance() {
}
class ListChannelsResponse::_Internal {
 public:
};

ListChannelsResponse::ListChannelsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListChannelsResponse)
}
ListChannelsResponse::ListChannelsResponse(const ListChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListChannelsResponse)
}

void ListChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListChannelsResponse_rpc_2eproto.base);
}

ListChannelsResponse::~ListChannelsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListChannelsResponse)
  SharedDtor();
}

void ListChannelsResponse::SharedDtor() {
}

void ListChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListChannelsResponse& ListChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListChannelsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

const char* ListChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Channel channels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Channel channels = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListChannelsResponse)
  return target;
}

size_t ListChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Channel channels = 11;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListChannelsResponse)
    MergeFrom(*source);
  }
}

void ListChannelsResponse::MergeFrom(const ListChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void ListChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListChannelsResponse::CopyFrom(const ListChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelsResponse::IsInitialized() const {
  return true;
}

void ListChannelsResponse::InternalSwap(ListChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelCloseSummary::InitAsDefaultInstance() {
}
class ChannelCloseSummary::_Internal {
 public:
};

ChannelCloseSummary::ChannelCloseSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelCloseSummary)
}
ChannelCloseSummary::ChannelCloseSummary(const ChannelCloseSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      resolutions_(from.resolutions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_point().empty()) {
    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_hash().empty()) {
    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  closing_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closing_tx_hash().empty()) {
    closing_tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_tx_hash_);
  }
  remote_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_pubkey().empty()) {
    remote_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pubkey_);
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&close_initiator_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(close_initiator_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelCloseSummary)
}

void ChannelCloseSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelCloseSummary_rpc_2eproto.base);
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closing_tx_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_initiator_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(close_initiator_));
}

ChannelCloseSummary::~ChannelCloseSummary() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelCloseSummary)
  SharedDtor();
}

void ChannelCloseSummary::SharedDtor() {
  channel_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closing_tx_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelCloseSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelCloseSummary& ChannelCloseSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelCloseSummary_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelCloseSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelCloseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resolutions_.Clear();
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closing_tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&close_initiator_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(close_initiator_));
  _internal_metadata_.Clear();
}

const char* ChannelCloseSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelCloseSummary.channel_point"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chain_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_chain_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelCloseSummary.chain_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string closing_tx_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_closing_tx_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelCloseSummary.closing_tx_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_pubkey = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_remote_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelCloseSummary.remote_pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 close_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          close_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 settled_balance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          settled_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_locked_balance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          time_locked_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_close_type(static_cast<::lnrpc::ChannelCloseSummary_ClosureType>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.Initiator open_initiator = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_open_initiator(static_cast<::lnrpc::Initiator>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.Initiator close_initiator = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_close_initiator(static_cast<::lnrpc::Initiator>(val));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.Resolution resolutions = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resolutions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelCloseSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelCloseSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_point = 1;
  if (this->channel_point().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_point().data(), static_cast<int>(this->_internal_channel_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelCloseSummary.channel_point");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_point(), target);
  }

  // uint64 chan_id = 2 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chan_id(), target);
  }

  // string chain_hash = 3;
  if (this->chain_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_hash().data(), static_cast<int>(this->_internal_chain_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelCloseSummary.chain_hash");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_chain_hash(), target);
  }

  // string closing_tx_hash = 4;
  if (this->closing_tx_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closing_tx_hash().data(), static_cast<int>(this->_internal_closing_tx_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelCloseSummary.closing_tx_hash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_closing_tx_hash(), target);
  }

  // string remote_pubkey = 5;
  if (this->remote_pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_pubkey().data(), static_cast<int>(this->_internal_remote_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelCloseSummary.remote_pubkey");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_remote_pubkey(), target);
  }

  // int64 capacity = 6;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_capacity(), target);
  }

  // uint32 close_height = 7;
  if (this->close_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_close_height(), target);
  }

  // int64 settled_balance = 8;
  if (this->settled_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_settled_balance(), target);
  }

  // int64 time_locked_balance = 9;
  if (this->time_locked_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_time_locked_balance(), target);
  }

  // .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;
  if (this->close_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_close_type(), target);
  }

  // .lnrpc.Initiator open_initiator = 11;
  if (this->open_initiator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_open_initiator(), target);
  }

  // .lnrpc.Initiator close_initiator = 12;
  if (this->close_initiator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_close_initiator(), target);
  }

  // repeated .lnrpc.Resolution resolutions = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resolutions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_resolutions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelCloseSummary)
  return target;
}

size_t ChannelCloseSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelCloseSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Resolution resolutions = 13;
  total_size += 1UL * this->_internal_resolutions_size();
  for (const auto& msg : this->resolutions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string channel_point = 1;
  if (this->channel_point().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_point());
  }

  // string chain_hash = 3;
  if (this->chain_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_hash());
  }

  // string closing_tx_hash = 4;
  if (this->closing_tx_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closing_tx_hash());
  }

  // string remote_pubkey = 5;
  if (this->remote_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_pubkey());
  }

  // uint64 chan_id = 2 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // int64 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // int64 settled_balance = 8;
  if (this->settled_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_settled_balance());
  }

  // uint32 close_height = 7;
  if (this->close_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_close_height());
  }

  // .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;
  if (this->close_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_close_type());
  }

  // int64 time_locked_balance = 9;
  if (this->time_locked_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_locked_balance());
  }

  // .lnrpc.Initiator open_initiator = 11;
  if (this->open_initiator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_open_initiator());
  }

  // .lnrpc.Initiator close_initiator = 12;
  if (this->close_initiator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_close_initiator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelCloseSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelCloseSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelCloseSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelCloseSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelCloseSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelCloseSummary)
    MergeFrom(*source);
  }
}

void ChannelCloseSummary::MergeFrom(const ChannelCloseSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelCloseSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resolutions_.MergeFrom(from.resolutions_);
  if (from.channel_point().size() > 0) {

    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  if (from.chain_hash().size() > 0) {

    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  if (from.closing_tx_hash().size() > 0) {

    closing_tx_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_tx_hash_);
  }
  if (from.remote_pubkey().size() > 0) {

    remote_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pubkey_);
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.settled_balance() != 0) {
    _internal_set_settled_balance(from._internal_settled_balance());
  }
  if (from.close_height() != 0) {
    _internal_set_close_height(from._internal_close_height());
  }
  if (from.close_type() != 0) {
    _internal_set_close_type(from._internal_close_type());
  }
  if (from.time_locked_balance() != 0) {
    _internal_set_time_locked_balance(from._internal_time_locked_balance());
  }
  if (from.open_initiator() != 0) {
    _internal_set_open_initiator(from._internal_open_initiator());
  }
  if (from.close_initiator() != 0) {
    _internal_set_close_initiator(from._internal_close_initiator());
  }
}

void ChannelCloseSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelCloseSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelCloseSummary::CopyFrom(const ChannelCloseSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelCloseSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCloseSummary::IsInitialized() const {
  return true;
}

void ChannelCloseSummary::InternalSwap(ChannelCloseSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  resolutions_.InternalSwap(&other->resolutions_);
  channel_point_.Swap(&other->channel_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chain_hash_.Swap(&other->chain_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  closing_tx_hash_.Swap(&other->closing_tx_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_pubkey_.Swap(&other->remote_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_id_, other->chan_id_);
  swap(capacity_, other->capacity_);
  swap(settled_balance_, other->settled_balance_);
  swap(close_height_, other->close_height_);
  swap(close_type_, other->close_type_);
  swap(time_locked_balance_, other->time_locked_balance_);
  swap(open_initiator_, other->open_initiator_);
  swap(close_initiator_, other->close_initiator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelCloseSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resolution::InitAsDefaultInstance() {
  ::lnrpc::_Resolution_default_instance_._instance.get_mutable()->outpoint_ = const_cast< ::lnrpc::OutPoint*>(
      ::lnrpc::OutPoint::internal_default_instance());
}
class Resolution::_Internal {
 public:
  static const ::lnrpc::OutPoint& outpoint(const Resolution* msg);
};

const ::lnrpc::OutPoint&
Resolution::_Internal::outpoint(const Resolution* msg) {
  return *msg->outpoint_;
}
Resolution::Resolution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Resolution)
}
Resolution::Resolution(const Resolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sweep_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sweep_txid().empty()) {
    sweep_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sweep_txid_);
  }
  if (from._internal_has_outpoint()) {
    outpoint_ = new ::lnrpc::OutPoint(*from.outpoint_);
  } else {
    outpoint_ = nullptr;
  }
  ::memcpy(&resolution_type_, &from.resolution_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&amount_sat_) -
    reinterpret_cast<char*>(&resolution_type_)) + sizeof(amount_sat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Resolution)
}

void Resolution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Resolution_rpc_2eproto.base);
  sweep_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&outpoint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_sat_) -
      reinterpret_cast<char*>(&outpoint_)) + sizeof(amount_sat_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:lnrpc.Resolution)
  SharedDtor();
}

void Resolution::SharedDtor() {
  sweep_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete outpoint_;
}

void Resolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resolution& Resolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resolution_rpc_2eproto.base);
  return *internal_default_instance();
}


void Resolution::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Resolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sweep_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
  ::memset(&resolution_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_sat_) -
      reinterpret_cast<char*>(&resolution_type_)) + sizeof(amount_sat_));
  _internal_metadata_.Clear();
}

const char* Resolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ResolutionType resolution_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_resolution_type(static_cast<::lnrpc::ResolutionType>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.ResolutionOutcome outcome = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_outcome(static_cast<::lnrpc::ResolutionOutcome>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.OutPoint outpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_outpoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amount_sat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          amount_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sweep_txid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_sweep_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Resolution.sweep_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Resolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ResolutionType resolution_type = 1;
  if (this->resolution_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_resolution_type(), target);
  }

  // .lnrpc.ResolutionOutcome outcome = 2;
  if (this->outcome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_outcome(), target);
  }

  // .lnrpc.OutPoint outpoint = 3;
  if (this->has_outpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::outpoint(this), target, stream);
  }

  // uint64 amount_sat = 4;
  if (this->amount_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_amount_sat(), target);
  }

  // string sweep_txid = 5;
  if (this->sweep_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sweep_txid().data(), static_cast<int>(this->_internal_sweep_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Resolution.sweep_txid");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sweep_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Resolution)
  return target;
}

size_t Resolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Resolution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sweep_txid = 5;
  if (this->sweep_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sweep_txid());
  }

  // .lnrpc.OutPoint outpoint = 3;
  if (this->has_outpoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *outpoint_);
  }

  // .lnrpc.ResolutionType resolution_type = 1;
  if (this->resolution_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_resolution_type());
  }

  // .lnrpc.ResolutionOutcome outcome = 2;
  if (this->outcome() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_outcome());
  }

  // uint64 amount_sat = 4;
  if (this->amount_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amount_sat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  const Resolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Resolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Resolution)
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sweep_txid().size() > 0) {

    sweep_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sweep_txid_);
  }
  if (from.has_outpoint()) {
    _internal_mutable_outpoint()->::lnrpc::OutPoint::MergeFrom(from._internal_outpoint());
  }
  if (from.resolution_type() != 0) {
    _internal_set_resolution_type(from._internal_resolution_type());
  }
  if (from.outcome() != 0) {
    _internal_set_outcome(from._internal_outcome());
  }
  if (from.amount_sat() != 0) {
    _internal_set_amount_sat(from._internal_amount_sat());
  }
}

void Resolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  return true;
}

void Resolution::InternalSwap(Resolution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sweep_txid_.Swap(&other->sweep_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outpoint_, other->outpoint_);
  swap(resolution_type_, other->resolution_type_);
  swap(outcome_, other->outcome_);
  swap(amount_sat_, other->amount_sat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Resolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClosedChannelsRequest::InitAsDefaultInstance() {
}
class ClosedChannelsRequest::_Internal {
 public:
};

ClosedChannelsRequest::ClosedChannelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ClosedChannelsRequest)
}
ClosedChannelsRequest::ClosedChannelsRequest(const ClosedChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cooperative_, &from.cooperative_,
    static_cast<size_t>(reinterpret_cast<char*>(&abandoned_) -
    reinterpret_cast<char*>(&cooperative_)) + sizeof(abandoned_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ClosedChannelsRequest)
}

void ClosedChannelsRequest::SharedCtor() {
  ::memset(&cooperative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abandoned_) -
      reinterpret_cast<char*>(&cooperative_)) + sizeof(abandoned_));
}

ClosedChannelsRequest::~ClosedChannelsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ClosedChannelsRequest)
  SharedDtor();
}

void ClosedChannelsRequest::SharedDtor() {
}

void ClosedChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosedChannelsRequest& ClosedChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClosedChannelsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ClosedChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ClosedChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&cooperative_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&abandoned_) -
      reinterpret_cast<char*>(&cooperative_)) + sizeof(abandoned_));
  _internal_metadata_.Clear();
}

const char* ClosedChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool cooperative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          cooperative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool local_force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          local_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool remote_force = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          remote_force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool breach = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          breach_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool funding_canceled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          funding_canceled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool abandoned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          abandoned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosedChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ClosedChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool cooperative = 1;
  if (this->cooperative() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_cooperative(), target);
  }

  // bool local_force = 2;
  if (this->local_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_local_force(), target);
  }

  // bool remote_force = 3;
  if (this->remote_force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_remote_force(), target);
  }

  // bool breach = 4;
  if (this->breach() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_breach(), target);
  }

  // bool funding_canceled = 5;
  if (this->funding_canceled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_funding_canceled(), target);
  }

  // bool abandoned = 6;
  if (this->abandoned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_abandoned(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ClosedChannelsRequest)
  return target;
}

size_t ClosedChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ClosedChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool cooperative = 1;
  if (this->cooperative() != 0) {
    total_size += 1 + 1;
  }

  // bool local_force = 2;
  if (this->local_force() != 0) {
    total_size += 1 + 1;
  }

  // bool remote_force = 3;
  if (this->remote_force() != 0) {
    total_size += 1 + 1;
  }

  // bool breach = 4;
  if (this->breach() != 0) {
    total_size += 1 + 1;
  }

  // bool funding_canceled = 5;
  if (this->funding_canceled() != 0) {
    total_size += 1 + 1;
  }

  // bool abandoned = 6;
  if (this->abandoned() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosedChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ClosedChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosedChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosedChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ClosedChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ClosedChannelsRequest)
    MergeFrom(*source);
  }
}

void ClosedChannelsRequest::MergeFrom(const ClosedChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ClosedChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.cooperative() != 0) {
    _internal_set_cooperative(from._internal_cooperative());
  }
  if (from.local_force() != 0) {
    _internal_set_local_force(from._internal_local_force());
  }
  if (from.remote_force() != 0) {
    _internal_set_remote_force(from._internal_remote_force());
  }
  if (from.breach() != 0) {
    _internal_set_breach(from._internal_breach());
  }
  if (from.funding_canceled() != 0) {
    _internal_set_funding_canceled(from._internal_funding_canceled());
  }
  if (from.abandoned() != 0) {
    _internal_set_abandoned(from._internal_abandoned());
  }
}

void ClosedChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ClosedChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosedChannelsRequest::CopyFrom(const ClosedChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ClosedChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosedChannelsRequest::IsInitialized() const {
  return true;
}

void ClosedChannelsRequest::InternalSwap(ClosedChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(cooperative_, other->cooperative_);
  swap(local_force_, other->local_force_);
  swap(remote_force_, other->remote_force_);
  swap(breach_, other->breach_);
  swap(funding_canceled_, other->funding_canceled_);
  swap(abandoned_, other->abandoned_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosedChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClosedChannelsResponse::InitAsDefaultInstance() {
}
class ClosedChannelsResponse::_Internal {
 public:
};

ClosedChannelsResponse::ClosedChannelsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ClosedChannelsResponse)
}
ClosedChannelsResponse::ClosedChannelsResponse(const ClosedChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ClosedChannelsResponse)
}

void ClosedChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClosedChannelsResponse_rpc_2eproto.base);
}

ClosedChannelsResponse::~ClosedChannelsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ClosedChannelsResponse)
  SharedDtor();
}

void ClosedChannelsResponse::SharedDtor() {
}

void ClosedChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosedChannelsResponse& ClosedChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClosedChannelsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ClosedChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ClosedChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear();
}

const char* ClosedChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.ChannelCloseSummary channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosedChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ClosedChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelCloseSummary channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ClosedChannelsResponse)
  return target;
}

size_t ClosedChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ClosedChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelCloseSummary channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosedChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ClosedChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosedChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosedChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ClosedChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ClosedChannelsResponse)
    MergeFrom(*source);
  }
}

void ClosedChannelsResponse::MergeFrom(const ClosedChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ClosedChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void ClosedChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ClosedChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosedChannelsResponse::CopyFrom(const ClosedChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ClosedChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosedChannelsResponse::IsInitialized() const {
  return true;
}

void ClosedChannelsResponse::InternalSwap(ClosedChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosedChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Peer_FeaturesEntry_DoNotUse::Peer_FeaturesEntry_DoNotUse() {}
Peer_FeaturesEntry_DoNotUse::Peer_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Peer_FeaturesEntry_DoNotUse::MergeFrom(const Peer_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Peer_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Peer_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Peer::InitAsDefaultInstance() {
}
class Peer::_Internal {
 public:
};

Peer::Peer()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Peer)
}
Peer::Peer(const Peer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&bytes_sent_, &from.bytes_sent_,
    static_cast<size_t>(reinterpret_cast<char*>(&flap_count_) -
    reinterpret_cast<char*>(&bytes_sent_)) + sizeof(flap_count_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Peer)
}

void Peer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Peer_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bytes_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flap_count_) -
      reinterpret_cast<char*>(&bytes_sent_)) + sizeof(flap_count_));
}

Peer::~Peer() {
  // @@protoc_insertion_point(destructor:lnrpc.Peer)
  SharedDtor();
}

void Peer::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Peer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Peer& Peer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Peer_rpc_2eproto.base);
  return *internal_default_instance();
}


void Peer::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  errors_.Clear();
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&bytes_sent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flap_count_) -
      reinterpret_cast<char*>(&bytes_sent_)) + sizeof(flap_count_));
  _internal_metadata_.Clear();
}

const char* Peer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Peer.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Peer.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bytes_sent = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          bytes_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bytes_recv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bytes_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_sent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sat_sent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_recv = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sat_recv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool inbound = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          inbound_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ping_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ping_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Peer.SyncType sync_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_sync_type(static_cast<::lnrpc::Peer_SyncType>(val));
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.TimestampedError errors = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 flap_count = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          flap_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 last_flap_ns = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          last_flap_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Peer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Peer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Peer.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // string address = 3;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Peer.address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_address(), target);
  }

  // uint64 bytes_sent = 4;
  if (this->bytes_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_bytes_sent(), target);
  }

  // uint64 bytes_recv = 5;
  if (this->bytes_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bytes_recv(), target);
  }

  // int64 sat_sent = 6;
  if (this->sat_sent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_sat_sent(), target);
  }

  // int64 sat_recv = 7;
  if (this->sat_recv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_sat_recv(), target);
  }

  // bool inbound = 8;
  if (this->inbound() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_inbound(), target);
  }

  // int64 ping_time = 9;
  if (this->ping_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_ping_time(), target);
  }

  // .lnrpc.Peer.SyncType sync_type = 10;
  if (this->sync_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_sync_type(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 11;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Peer_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = Peer_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // repeated .lnrpc.TimestampedError errors = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_errors(i), target, stream);
  }

  // int32 flap_count = 13;
  if (this->flap_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_flap_count(), target);
  }

  // int64 last_flap_ns = 14;
  if (this->last_flap_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(14, this->_internal_last_flap_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Peer)
  return target;
}

size_t Peer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Peer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .lnrpc.Feature> features = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += Peer_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .lnrpc.TimestampedError errors = 12;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string address = 3;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // uint64 bytes_sent = 4;
  if (this->bytes_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bytes_sent());
  }

  // uint64 bytes_recv = 5;
  if (this->bytes_recv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bytes_recv());
  }

  // int64 sat_sent = 6;
  if (this->sat_sent() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_sent());
  }

  // int64 sat_recv = 7;
  if (this->sat_recv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_recv());
  }

  // int64 ping_time = 9;
  if (this->ping_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ping_time());
  }

  // bool inbound = 8;
  if (this->inbound() != 0) {
    total_size += 1 + 1;
  }

  // .lnrpc.Peer.SyncType sync_type = 10;
  if (this->sync_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sync_type());
  }

  // int64 last_flap_ns = 14;
  if (this->last_flap_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_last_flap_ns());
  }

  // int32 flap_count = 13;
  if (this->flap_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flap_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Peer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  const Peer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Peer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Peer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Peer)
    MergeFrom(*source);
  }
}

void Peer::MergeFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Peer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  errors_.MergeFrom(from.errors_);
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  if (from.bytes_sent() != 0) {
    _internal_set_bytes_sent(from._internal_bytes_sent());
  }
  if (from.bytes_recv() != 0) {
    _internal_set_bytes_recv(from._internal_bytes_recv());
  }
  if (from.sat_sent() != 0) {
    _internal_set_sat_sent(from._internal_sat_sent());
  }
  if (from.sat_recv() != 0) {
    _internal_set_sat_recv(from._internal_sat_recv());
  }
  if (from.ping_time() != 0) {
    _internal_set_ping_time(from._internal_ping_time());
  }
  if (from.inbound() != 0) {
    _internal_set_inbound(from._internal_inbound());
  }
  if (from.sync_type() != 0) {
    _internal_set_sync_type(from._internal_sync_type());
  }
  if (from.last_flap_ns() != 0) {
    _internal_set_last_flap_ns(from._internal_last_flap_ns());
  }
  if (from.flap_count() != 0) {
    _internal_set_flap_count(from._internal_flap_count());
  }
}

void Peer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Peer::CopyFrom(const Peer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Peer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Peer::IsInitialized() const {
  return true;
}

void Peer::InternalSwap(Peer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  features_.Swap(&other->features_);
  errors_.InternalSwap(&other->errors_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bytes_sent_, other->bytes_sent_);
  swap(bytes_recv_, other->bytes_recv_);
  swap(sat_sent_, other->sat_sent_);
  swap(sat_recv_, other->sat_recv_);
  swap(ping_time_, other->ping_time_);
  swap(inbound_, other->inbound_);
  swap(sync_type_, other->sync_type_);
  swap(last_flap_ns_, other->last_flap_ns_);
  swap(flap_count_, other->flap_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Peer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimestampedError::InitAsDefaultInstance() {
}
class TimestampedError::_Internal {
 public:
};

TimestampedError::TimestampedError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.TimestampedError)
}
TimestampedError::TimestampedError(const TimestampedError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.TimestampedError)
}

void TimestampedError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimestampedError_rpc_2eproto.base);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
}

TimestampedError::~TimestampedError() {
  // @@protoc_insertion_point(destructor:lnrpc.TimestampedError)
  SharedDtor();
}

void TimestampedError::SharedDtor() {
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimestampedError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimestampedError& TimestampedError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimestampedError_rpc_2eproto.base);
  return *internal_default_instance();
}


void TimestampedError::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.TimestampedError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* TimestampedError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.TimestampedError.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampedError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.TimestampedError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // string error = 2;
  if (this->error().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.TimestampedError.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.TimestampedError)
  return target;
}

size_t TimestampedError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.TimestampedError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (this->error().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // uint64 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimestampedError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.TimestampedError)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampedError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimestampedError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.TimestampedError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.TimestampedError)
    MergeFrom(*source);
  }
}

void TimestampedError::MergeFrom(const TimestampedError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.TimestampedError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error().size() > 0) {

    error_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.error_);
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
}

void TimestampedError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.TimestampedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampedError::CopyFrom(const TimestampedError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.TimestampedError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampedError::IsInitialized() const {
  return true;
}

void TimestampedError::InternalSwap(TimestampedError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  error_.Swap(&other->error_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampedError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeersRequest::InitAsDefaultInstance() {
}
class ListPeersRequest::_Internal {
 public:
};

ListPeersRequest::ListPeersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPeersRequest)
}
ListPeersRequest::ListPeersRequest(const ListPeersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  latest_error_ = from.latest_error_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPeersRequest)
}

void ListPeersRequest::SharedCtor() {
  latest_error_ = false;
}

ListPeersRequest::~ListPeersRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPeersRequest)
  SharedDtor();
}

void ListPeersRequest::SharedDtor() {
}

void ListPeersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeersRequest& ListPeersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeersRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPeersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  latest_error_ = false;
  _internal_metadata_.Clear();
}

const char* ListPeersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool latest_error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          latest_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPeersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool latest_error = 1;
  if (this->latest_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_latest_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPeersRequest)
  return target;
}

size_t ListPeersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPeersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool latest_error = 1;
  if (this->latest_error() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPeersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPeersRequest)
    MergeFrom(*source);
  }
}

void ListPeersRequest::MergeFrom(const ListPeersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPeersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.latest_error() != 0) {
    _internal_set_latest_error(from._internal_latest_error());
  }
}

void ListPeersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeersRequest::CopyFrom(const ListPeersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPeersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeersRequest::IsInitialized() const {
  return true;
}

void ListPeersRequest::InternalSwap(ListPeersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latest_error_, other->latest_error_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPeersResponse::InitAsDefaultInstance() {
}
class ListPeersResponse::_Internal {
 public:
};

ListPeersResponse::ListPeersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPeersResponse)
}
ListPeersResponse::ListPeersResponse(const ListPeersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      peers_(from.peers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPeersResponse)
}

void ListPeersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPeersResponse_rpc_2eproto.base);
}

ListPeersResponse::~ListPeersResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPeersResponse)
  SharedDtor();
}

void ListPeersResponse::SharedDtor() {
}

void ListPeersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPeersResponse& ListPeersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPeersResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPeersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  peers_.Clear();
  _internal_metadata_.Clear();
}

const char* ListPeersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Peer peers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_peers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPeersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPeersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Peer peers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_peers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_peers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPeersResponse)
  return target;
}

size_t ListPeersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPeersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Peer peers = 1;
  total_size += 1UL * this->_internal_peers_size();
  for (const auto& msg : this->peers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPeersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPeersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPeersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPeersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPeersResponse)
    MergeFrom(*source);
  }
}

void ListPeersResponse::MergeFrom(const ListPeersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPeersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  peers_.MergeFrom(from.peers_);
}

void ListPeersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPeersResponse::CopyFrom(const ListPeersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPeersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPeersResponse::IsInitialized() const {
  return true;
}

void ListPeersResponse::InternalSwap(ListPeersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  peers_.InternalSwap(&other->peers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPeersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerEventSubscription::InitAsDefaultInstance() {
}
class PeerEventSubscription::_Internal {
 public:
};

PeerEventSubscription::PeerEventSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PeerEventSubscription)
}
PeerEventSubscription::PeerEventSubscription(const PeerEventSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.PeerEventSubscription)
}

void PeerEventSubscription::SharedCtor() {
}

PeerEventSubscription::~PeerEventSubscription() {
  // @@protoc_insertion_point(destructor:lnrpc.PeerEventSubscription)
  SharedDtor();
}

void PeerEventSubscription::SharedDtor() {
}

void PeerEventSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerEventSubscription& PeerEventSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerEventSubscription_rpc_2eproto.base);
  return *internal_default_instance();
}


void PeerEventSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PeerEventSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PeerEventSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerEventSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PeerEventSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PeerEventSubscription)
  return target;
}

size_t PeerEventSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PeerEventSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerEventSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PeerEventSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerEventSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerEventSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PeerEventSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PeerEventSubscription)
    MergeFrom(*source);
  }
}

void PeerEventSubscription::MergeFrom(const PeerEventSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PeerEventSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PeerEventSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PeerEventSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerEventSubscription::CopyFrom(const PeerEventSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PeerEventSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerEventSubscription::IsInitialized() const {
  return true;
}

void PeerEventSubscription::InternalSwap(PeerEventSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerEventSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeerEvent::InitAsDefaultInstance() {
}
class PeerEvent::_Internal {
 public:
};

PeerEvent::PeerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PeerEvent)
}
PeerEvent::PeerEvent(const PeerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.PeerEvent)
}

void PeerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeerEvent_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

PeerEvent::~PeerEvent() {
  // @@protoc_insertion_point(destructor:lnrpc.PeerEvent)
  SharedDtor();
}

void PeerEvent::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeerEvent& PeerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeerEvent_rpc_2eproto.base);
  return *internal_default_instance();
}


void PeerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* PeerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PeerEvent.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.PeerEvent.EventType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lnrpc::PeerEvent_EventType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PeerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PeerEvent.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // .lnrpc.PeerEvent.EventType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PeerEvent)
  return target;
}

size_t PeerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PeerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // .lnrpc.PeerEvent.EventType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const PeerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PeerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PeerEvent)
    MergeFrom(*source);
  }
}

void PeerEvent::MergeFrom(const PeerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PeerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PeerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeerEvent::CopyFrom(const PeerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PeerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerEvent::IsInitialized() const {
  return true;
}

void PeerEvent::InternalSwap(PeerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetInfoRequest::InitAsDefaultInstance() {
}
class GetInfoRequest::_Internal {
 public:
};

GetInfoRequest::GetInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GetInfoRequest)
}
GetInfoRequest::GetInfoRequest(const GetInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.GetInfoRequest)
}

void GetInfoRequest::SharedCtor() {
}

GetInfoRequest::~GetInfoRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.GetInfoRequest)
  SharedDtor();
}

void GetInfoRequest::SharedDtor() {
}

void GetInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoRequest& GetInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void GetInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GetInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GetInfoRequest)
  return target;
}

size_t GetInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GetInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GetInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GetInfoRequest)
    MergeFrom(*source);
  }
}

void GetInfoRequest::MergeFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GetInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoRequest::CopyFrom(const GetInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GetInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoRequest::IsInitialized() const {
  return true;
}

void GetInfoRequest::InternalSwap(GetInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetInfoResponse_FeaturesEntry_DoNotUse::GetInfoResponse_FeaturesEntry_DoNotUse() {}
GetInfoResponse_FeaturesEntry_DoNotUse::GetInfoResponse_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetInfoResponse_FeaturesEntry_DoNotUse::MergeFrom(const GetInfoResponse_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResponse_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetInfoResponse_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetInfoResponse::InitAsDefaultInstance() {
}
class GetInfoResponse::_Internal {
 public:
};

GetInfoResponse::GetInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GetInfoResponse)
}
GetInfoResponse::GetInfoResponse(const GetInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      uris_(from.uris_),
      chains_(from.chains_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  identity_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity_pubkey().empty()) {
    identity_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_pubkey_);
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_hash().empty()) {
    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  commit_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_commit_hash().empty()) {
    commit_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commit_hash_);
  }
  ::memcpy(&num_pending_channels_, &from.num_pending_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_inactive_channels_) -
    reinterpret_cast<char*>(&num_pending_channels_)) + sizeof(num_inactive_channels_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.GetInfoResponse)
}

void GetInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetInfoResponse_rpc_2eproto.base);
  identity_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commit_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_pending_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_inactive_channels_) -
      reinterpret_cast<char*>(&num_pending_channels_)) + sizeof(num_inactive_channels_));
}

GetInfoResponse::~GetInfoResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.GetInfoResponse)
  SharedDtor();
}

void GetInfoResponse::SharedDtor() {
  identity_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commit_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetInfoResponse& GetInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetInfoResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void GetInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uris_.Clear();
  chains_.Clear();
  features_.Clear();
  identity_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commit_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_pending_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_inactive_channels_) -
      reinterpret_cast<char*>(&num_pending_channels_)) + sizeof(num_inactive_channels_));
  _internal_metadata_.Clear();
}

const char* GetInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string identity_pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_identity_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.identity_pubkey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_pending_channels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_pending_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_active_channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_active_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_peers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_peers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 block_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string block_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.block_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool synced_to_chain = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          synced_to_chain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool testnet = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          testnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string uris = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_uris();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.uris"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 best_header_timestamp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          best_header_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_inactive_channels = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          num_inactive_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.Chain chains = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_chains(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // string color = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool synced_to_graph = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          synced_to_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // string commit_hash = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_commit_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.GetInfoResponse.commit_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GetInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string identity_pubkey = 1;
  if (this->identity_pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity_pubkey().data(), static_cast<int>(this->_internal_identity_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.identity_pubkey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identity_pubkey(), target);
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.alias");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_alias(), target);
  }

  // uint32 num_pending_channels = 3;
  if (this->num_pending_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_pending_channels(), target);
  }

  // uint32 num_active_channels = 4;
  if (this->num_active_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_active_channels(), target);
  }

  // uint32 num_peers = 5;
  if (this->num_peers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_peers(), target);
  }

  // uint32 block_height = 6;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_block_height(), target);
  }

  // string block_hash = 8;
  if (this->block_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_block_hash().data(), static_cast<int>(this->_internal_block_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.block_hash");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_block_hash(), target);
  }

  // bool synced_to_chain = 9;
  if (this->synced_to_chain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_synced_to_chain(), target);
  }

  // bool testnet = 10 [deprecated = true];
  if (this->testnet() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_testnet(), target);
  }

  // repeated string uris = 12;
  for (int i = 0, n = this->_internal_uris_size(); i < n; i++) {
    const auto& s = this->_internal_uris(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.uris");
    target = stream->WriteString(12, s, target);
  }

  // int64 best_header_timestamp = 13;
  if (this->best_header_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_best_header_timestamp(), target);
  }

  // string version = 14;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.version");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_version(), target);
  }

  // uint32 num_inactive_channels = 15;
  if (this->num_inactive_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_num_inactive_channels(), target);
  }

  // repeated .lnrpc.Chain chains = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chains_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_chains(i), target, stream);
  }

  // string color = 17;
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.color");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_color(), target);
  }

  // bool synced_to_graph = 18;
  if (this->synced_to_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_synced_to_graph(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 19;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetInfoResponse_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(19, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = GetInfoResponse_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(19, it->first, it->second, target, stream);
      }
    }
  }

  // string commit_hash = 20;
  if (this->commit_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_commit_hash().data(), static_cast<int>(this->_internal_commit_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.GetInfoResponse.commit_hash");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_commit_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GetInfoResponse)
  return target;
}

size_t GetInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GetInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string uris = 12;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(uris_.size());
  for (int i = 0, n = uris_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      uris_.Get(i));
  }

  // repeated .lnrpc.Chain chains = 16;
  total_size += 2UL * this->_internal_chains_size();
  for (const auto& msg : this->chains_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, .lnrpc.Feature> features = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += GetInfoResponse_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string identity_pubkey = 1;
  if (this->identity_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity_pubkey());
  }

  // string alias = 2;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string block_hash = 8;
  if (this->block_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_block_hash());
  }

  // string version = 14;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string color = 17;
  if (this->color().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // string commit_hash = 20;
  if (this->commit_hash().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commit_hash());
  }

  // uint32 num_pending_channels = 3;
  if (this->num_pending_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_pending_channels());
  }

  // uint32 num_active_channels = 4;
  if (this->num_active_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_active_channels());
  }

  // uint32 num_peers = 5;
  if (this->num_peers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_peers());
  }

  // uint32 block_height = 6;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_block_height());
  }

  // int64 best_header_timestamp = 13;
  if (this->best_header_timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_best_header_timestamp());
  }

  // bool synced_to_chain = 9;
  if (this->synced_to_chain() != 0) {
    total_size += 1 + 1;
  }

  // bool synced_to_graph = 18;
  if (this->synced_to_graph() != 0) {
    total_size += 2 + 1;
  }

  // bool testnet = 10 [deprecated = true];
  if (this->testnet() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_inactive_channels = 15;
  if (this->num_inactive_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_inactive_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GetInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GetInfoResponse)
    MergeFrom(*source);
  }
}

void GetInfoResponse::MergeFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GetInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  uris_.MergeFrom(from.uris_);
  chains_.MergeFrom(from.chains_);
  features_.MergeFrom(from.features_);
  if (from.identity_pubkey().size() > 0) {

    identity_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_pubkey_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.block_hash().size() > 0) {

    block_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_hash_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.commit_hash().size() > 0) {

    commit_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.commit_hash_);
  }
  if (from.num_pending_channels() != 0) {
    _internal_set_num_pending_channels(from._internal_num_pending_channels());
  }
  if (from.num_active_channels() != 0) {
    _internal_set_num_active_channels(from._internal_num_active_channels());
  }
  if (from.num_peers() != 0) {
    _internal_set_num_peers(from._internal_num_peers());
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.best_header_timestamp() != 0) {
    _internal_set_best_header_timestamp(from._internal_best_header_timestamp());
  }
  if (from.synced_to_chain() != 0) {
    _internal_set_synced_to_chain(from._internal_synced_to_chain());
  }
  if (from.synced_to_graph() != 0) {
    _internal_set_synced_to_graph(from._internal_synced_to_graph());
  }
  if (from.testnet() != 0) {
    _internal_set_testnet(from._internal_testnet());
  }
  if (from.num_inactive_channels() != 0) {
    _internal_set_num_inactive_channels(from._internal_num_inactive_channels());
  }
}

void GetInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInfoResponse::CopyFrom(const GetInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GetInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInfoResponse::IsInitialized() const {
  return true;
}

void GetInfoResponse::InternalSwap(GetInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  uris_.InternalSwap(&other->uris_);
  chains_.InternalSwap(&other->chains_);
  features_.Swap(&other->features_);
  identity_pubkey_.Swap(&other->identity_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  block_hash_.Swap(&other->block_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  commit_hash_.Swap(&other->commit_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_pending_channels_, other->num_pending_channels_);
  swap(num_active_channels_, other->num_active_channels_);
  swap(num_peers_, other->num_peers_);
  swap(block_height_, other->block_height_);
  swap(best_header_timestamp_, other->best_header_timestamp_);
  swap(synced_to_chain_, other->synced_to_chain_);
  swap(synced_to_graph_, other->synced_to_graph_);
  swap(testnet_, other->testnet_);
  swap(num_inactive_channels_, other->num_inactive_channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRecoveryInfoRequest::InitAsDefaultInstance() {
}
class GetRecoveryInfoRequest::_Internal {
 public:
};

GetRecoveryInfoRequest::GetRecoveryInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GetRecoveryInfoRequest)
}
GetRecoveryInfoRequest::GetRecoveryInfoRequest(const GetRecoveryInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.GetRecoveryInfoRequest)
}

void GetRecoveryInfoRequest::SharedCtor() {
}

GetRecoveryInfoRequest::~GetRecoveryInfoRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.GetRecoveryInfoRequest)
  SharedDtor();
}

void GetRecoveryInfoRequest::SharedDtor() {
}

void GetRecoveryInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRecoveryInfoRequest& GetRecoveryInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRecoveryInfoRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void GetRecoveryInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GetRecoveryInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetRecoveryInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRecoveryInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GetRecoveryInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GetRecoveryInfoRequest)
  return target;
}

size_t GetRecoveryInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GetRecoveryInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRecoveryInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GetRecoveryInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecoveryInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRecoveryInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GetRecoveryInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GetRecoveryInfoRequest)
    MergeFrom(*source);
  }
}

void GetRecoveryInfoRequest::MergeFrom(const GetRecoveryInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GetRecoveryInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetRecoveryInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GetRecoveryInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecoveryInfoRequest::CopyFrom(const GetRecoveryInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GetRecoveryInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoRequest::IsInitialized() const {
  return true;
}

void GetRecoveryInfoRequest::InternalSwap(GetRecoveryInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRecoveryInfoResponse::InitAsDefaultInstance() {
}
class GetRecoveryInfoResponse::_Internal {
 public:
};

GetRecoveryInfoResponse::GetRecoveryInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GetRecoveryInfoResponse)
}
GetRecoveryInfoResponse::GetRecoveryInfoResponse(const GetRecoveryInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&progress_, &from.progress_,
    static_cast<size_t>(reinterpret_cast<char*>(&recovery_finished_) -
    reinterpret_cast<char*>(&progress_)) + sizeof(recovery_finished_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.GetRecoveryInfoResponse)
}

void GetRecoveryInfoResponse::SharedCtor() {
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recovery_finished_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(recovery_finished_));
}

GetRecoveryInfoResponse::~GetRecoveryInfoResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.GetRecoveryInfoResponse)
  SharedDtor();
}

void GetRecoveryInfoResponse::SharedDtor() {
}

void GetRecoveryInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRecoveryInfoResponse& GetRecoveryInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRecoveryInfoResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void GetRecoveryInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GetRecoveryInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recovery_finished_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(recovery_finished_));
  _internal_metadata_.Clear();
}

const char* GetRecoveryInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool recovery_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          recovery_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool recovery_finished = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          recovery_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          progress_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRecoveryInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GetRecoveryInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool recovery_mode = 1;
  if (this->recovery_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_recovery_mode(), target);
  }

  // bool recovery_finished = 2;
  if (this->recovery_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_recovery_finished(), target);
  }

  // double progress = 3;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_progress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GetRecoveryInfoResponse)
  return target;
}

size_t GetRecoveryInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GetRecoveryInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double progress = 3;
  if (!(this->progress() <= 0 && this->progress() >= 0)) {
    total_size += 1 + 8;
  }

  // bool recovery_mode = 1;
  if (this->recovery_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool recovery_finished = 2;
  if (this->recovery_finished() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRecoveryInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GetRecoveryInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRecoveryInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRecoveryInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GetRecoveryInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GetRecoveryInfoResponse)
    MergeFrom(*source);
  }
}

void GetRecoveryInfoResponse::MergeFrom(const GetRecoveryInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GetRecoveryInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.progress() <= 0 && from.progress() >= 0)) {
    _internal_set_progress(from._internal_progress());
  }
  if (from.recovery_mode() != 0) {
    _internal_set_recovery_mode(from._internal_recovery_mode());
  }
  if (from.recovery_finished() != 0) {
    _internal_set_recovery_finished(from._internal_recovery_finished());
  }
}

void GetRecoveryInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GetRecoveryInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRecoveryInfoResponse::CopyFrom(const GetRecoveryInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GetRecoveryInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRecoveryInfoResponse::IsInitialized() const {
  return true;
}

void GetRecoveryInfoResponse::InternalSwap(GetRecoveryInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(progress_, other->progress_);
  swap(recovery_mode_, other->recovery_mode_);
  swap(recovery_finished_, other->recovery_finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRecoveryInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Chain::InitAsDefaultInstance() {
}
class Chain::_Internal {
 public:
};

Chain::Chain()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Chain)
}
Chain::Chain(const Chain& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain().empty()) {
    chain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_);
  }
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.Chain)
}

void Chain::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Chain_rpc_2eproto.base);
  chain_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Chain::~Chain() {
  // @@protoc_insertion_point(destructor:lnrpc.Chain)
  SharedDtor();
}

void Chain::SharedDtor() {
  chain_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Chain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Chain& Chain::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Chain_rpc_2eproto.base);
  return *internal_default_instance();
}


void Chain::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Chain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  network_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Chain::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string chain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_chain();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Chain.chain"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Chain.network"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Chain::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Chain)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string chain = 1;
  if (this->chain().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain().data(), static_cast<int>(this->_internal_chain().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Chain.chain");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_chain(), target);
  }

  // string network = 2;
  if (this->network().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Chain.network");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Chain)
  return target;
}

size_t Chain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Chain)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chain = 1;
  if (this->chain().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain());
  }

  // string network = 2;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chain::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Chain)
  GOOGLE_DCHECK_NE(&from, this);
  const Chain* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Chain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Chain)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Chain)
    MergeFrom(*source);
  }
}

void Chain::MergeFrom(const Chain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Chain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chain().size() > 0) {

    chain_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_);
  }
  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
}

void Chain::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Chain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chain::CopyFrom(const Chain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Chain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chain::IsInitialized() const {
  return true;
}

void Chain::InternalSwap(Chain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chain_.Swap(&other->chain_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  network_.Swap(&other->network_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Chain::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConfirmationUpdate::InitAsDefaultInstance() {
}
class ConfirmationUpdate::_Internal {
 public:
};

ConfirmationUpdate::ConfirmationUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ConfirmationUpdate)
}
ConfirmationUpdate::ConfirmationUpdate(const ConfirmationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block_sha().empty()) {
    block_sha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_sha_);
  }
  ::memcpy(&block_height_, &from.block_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_confs_left_) -
    reinterpret_cast<char*>(&block_height_)) + sizeof(num_confs_left_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ConfirmationUpdate)
}

void ConfirmationUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfirmationUpdate_rpc_2eproto.base);
  block_sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_confs_left_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(num_confs_left_));
}

ConfirmationUpdate::~ConfirmationUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ConfirmationUpdate)
  SharedDtor();
}

void ConfirmationUpdate::SharedDtor() {
  block_sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfirmationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfirmationUpdate& ConfirmationUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfirmationUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ConfirmationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ConfirmationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_sha_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_confs_left_) -
      reinterpret_cast<char*>(&block_height_)) + sizeof(num_confs_left_));
  _internal_metadata_.Clear();
}

const char* ConfirmationUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block_sha = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 block_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_confs_left = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_confs_left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfirmationUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ConfirmationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block_sha = 1;
  if (this->block_sha().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block_sha(), target);
  }

  // int32 block_height = 2;
  if (this->block_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_block_height(), target);
  }

  // uint32 num_confs_left = 3;
  if (this->num_confs_left() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_confs_left(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ConfirmationUpdate)
  return target;
}

size_t ConfirmationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ConfirmationUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block_sha = 1;
  if (this->block_sha().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block_sha());
  }

  // int32 block_height = 2;
  if (this->block_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_block_height());
  }

  // uint32 num_confs_left = 3;
  if (this->num_confs_left() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_confs_left());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfirmationUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ConfirmationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfirmationUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfirmationUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ConfirmationUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ConfirmationUpdate)
    MergeFrom(*source);
  }
}

void ConfirmationUpdate::MergeFrom(const ConfirmationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ConfirmationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block_sha().size() > 0) {

    block_sha_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_sha_);
  }
  if (from.block_height() != 0) {
    _internal_set_block_height(from._internal_block_height());
  }
  if (from.num_confs_left() != 0) {
    _internal_set_num_confs_left(from._internal_num_confs_left());
  }
}

void ConfirmationUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ConfirmationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfirmationUpdate::CopyFrom(const ConfirmationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ConfirmationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfirmationUpdate::IsInitialized() const {
  return true;
}

void ConfirmationUpdate::InternalSwap(ConfirmationUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_sha_.Swap(&other->block_sha_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(block_height_, other->block_height_);
  swap(num_confs_left_, other->num_confs_left_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfirmationUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelOpenUpdate::InitAsDefaultInstance() {
  ::lnrpc::_ChannelOpenUpdate_default_instance_._instance.get_mutable()->channel_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class ChannelOpenUpdate::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& channel_point(const ChannelOpenUpdate* msg);
};

const ::lnrpc::ChannelPoint&
ChannelOpenUpdate::_Internal::channel_point(const ChannelOpenUpdate* msg) {
  return *msg->channel_point_;
}
ChannelOpenUpdate::ChannelOpenUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelOpenUpdate)
}
ChannelOpenUpdate::ChannelOpenUpdate(const ChannelOpenUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_channel_point()) {
    channel_point_ = new ::lnrpc::ChannelPoint(*from.channel_point_);
  } else {
    channel_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelOpenUpdate)
}

void ChannelOpenUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelOpenUpdate_rpc_2eproto.base);
  channel_point_ = nullptr;
}

ChannelOpenUpdate::~ChannelOpenUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelOpenUpdate)
  SharedDtor();
}

void ChannelOpenUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete channel_point_;
}

void ChannelOpenUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelOpenUpdate& ChannelOpenUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelOpenUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelOpenUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelOpenUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ChannelOpenUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelPoint channel_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelOpenUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelOpenUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelOpenUpdate)
  return target;
}

size_t ChannelOpenUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelOpenUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelOpenUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelOpenUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelOpenUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelOpenUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelOpenUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelOpenUpdate)
    MergeFrom(*source);
  }
}

void ChannelOpenUpdate::MergeFrom(const ChannelOpenUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelOpenUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_point()) {
    _internal_mutable_channel_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_channel_point());
  }
}

void ChannelOpenUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelOpenUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelOpenUpdate::CopyFrom(const ChannelOpenUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelOpenUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelOpenUpdate::IsInitialized() const {
  return true;
}

void ChannelOpenUpdate::InternalSwap(ChannelOpenUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_point_, other->channel_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelOpenUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelCloseUpdate::InitAsDefaultInstance() {
}
class ChannelCloseUpdate::_Internal {
 public:
};

ChannelCloseUpdate::ChannelCloseUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelCloseUpdate)
}
ChannelCloseUpdate::ChannelCloseUpdate(const ChannelCloseUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closing_txid().empty()) {
    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelCloseUpdate)
}

void ChannelCloseUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelCloseUpdate_rpc_2eproto.base);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
}

ChannelCloseUpdate::~ChannelCloseUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelCloseUpdate)
  SharedDtor();
}

void ChannelCloseUpdate::SharedDtor() {
  closing_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelCloseUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelCloseUpdate& ChannelCloseUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelCloseUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelCloseUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelCloseUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  success_ = false;
  _internal_metadata_.Clear();
}

const char* ChannelCloseUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes closing_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_closing_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelCloseUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelCloseUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes closing_txid = 1;
  if (this->closing_txid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_closing_txid(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelCloseUpdate)
  return target;
}

size_t ChannelCloseUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelCloseUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes closing_txid = 1;
  if (this->closing_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_closing_txid());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelCloseUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelCloseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelCloseUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelCloseUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelCloseUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelCloseUpdate)
    MergeFrom(*source);
  }
}

void ChannelCloseUpdate::MergeFrom(const ChannelCloseUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelCloseUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closing_txid().size() > 0) {

    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void ChannelCloseUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelCloseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelCloseUpdate::CopyFrom(const ChannelCloseUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelCloseUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCloseUpdate::IsInitialized() const {
  return true;
}

void ChannelCloseUpdate::InternalSwap(ChannelCloseUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  closing_txid_.Swap(&other->closing_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelCloseUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseChannelRequest::InitAsDefaultInstance() {
  ::lnrpc::_CloseChannelRequest_default_instance_._instance.get_mutable()->channel_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class CloseChannelRequest::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& channel_point(const CloseChannelRequest* msg);
};

const ::lnrpc::ChannelPoint&
CloseChannelRequest::_Internal::channel_point(const CloseChannelRequest* msg) {
  return *msg->channel_point_;
}
CloseChannelRequest::CloseChannelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.CloseChannelRequest)
}
CloseChannelRequest::CloseChannelRequest(const CloseChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  delivery_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_delivery_address().empty()) {
    delivery_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delivery_address_);
  }
  if (from._internal_has_channel_point()) {
    channel_point_ = new ::lnrpc::ChannelPoint(*from.channel_point_);
  } else {
    channel_point_ = nullptr;
  }
  ::memcpy(&force_, &from.force_,
    static_cast<size_t>(reinterpret_cast<char*>(&sat_per_vbyte_) -
    reinterpret_cast<char*>(&force_)) + sizeof(sat_per_vbyte_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.CloseChannelRequest)
}

void CloseChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseChannelRequest_rpc_2eproto.base);
  delivery_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sat_per_vbyte_) -
      reinterpret_cast<char*>(&channel_point_)) + sizeof(sat_per_vbyte_));
}

CloseChannelRequest::~CloseChannelRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.CloseChannelRequest)
  SharedDtor();
}

void CloseChannelRequest::SharedDtor() {
  delivery_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_point_;
}

void CloseChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseChannelRequest& CloseChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseChannelRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void CloseChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.CloseChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  delivery_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
  ::memset(&force_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sat_per_vbyte_) -
      reinterpret_cast<char*>(&force_)) + sizeof(sat_per_vbyte_));
  _internal_metadata_.Clear();
}

const char* CloseChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelPoint channel_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool force = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          force_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_conf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          target_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_per_byte = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string delivery_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_delivery_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.CloseChannelRequest.delivery_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sat_per_vbyte = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sat_per_vbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.CloseChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_point(this), target, stream);
  }

  // bool force = 2;
  if (this->force() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_force(), target);
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_conf(), target);
  }

  // int64 sat_per_byte = 4 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_sat_per_byte(), target);
  }

  // string delivery_address = 5;
  if (this->delivery_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_delivery_address().data(), static_cast<int>(this->_internal_delivery_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.CloseChannelRequest.delivery_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_delivery_address(), target);
  }

  // uint64 sat_per_vbyte = 6;
  if (this->sat_per_vbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_sat_per_vbyte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.CloseChannelRequest)
  return target;
}

size_t CloseChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.CloseChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string delivery_address = 5;
  if (this->delivery_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_delivery_address());
  }

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_point_);
  }

  // bool force = 2;
  if (this->force() != 0) {
    total_size += 1 + 1;
  }

  // int32 target_conf = 3;
  if (this->target_conf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_conf());
  }

  // int64 sat_per_byte = 4 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_per_byte());
  }

  // uint64 sat_per_vbyte = 6;
  if (this->sat_per_vbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat_per_vbyte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.CloseChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.CloseChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.CloseChannelRequest)
    MergeFrom(*source);
  }
}

void CloseChannelRequest::MergeFrom(const CloseChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.CloseChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.delivery_address().size() > 0) {

    delivery_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.delivery_address_);
  }
  if (from.has_channel_point()) {
    _internal_mutable_channel_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_channel_point());
  }
  if (from.force() != 0) {
    _internal_set_force(from._internal_force());
  }
  if (from.target_conf() != 0) {
    _internal_set_target_conf(from._internal_target_conf());
  }
  if (from.sat_per_byte() != 0) {
    _internal_set_sat_per_byte(from._internal_sat_per_byte());
  }
  if (from.sat_per_vbyte() != 0) {
    _internal_set_sat_per_vbyte(from._internal_sat_per_vbyte());
  }
}

void CloseChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.CloseChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseChannelRequest::CopyFrom(const CloseChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.CloseChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseChannelRequest::IsInitialized() const {
  return true;
}

void CloseChannelRequest::InternalSwap(CloseChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  delivery_address_.Swap(&other->delivery_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_point_, other->channel_point_);
  swap(force_, other->force_);
  swap(target_conf_, other->target_conf_);
  swap(sat_per_byte_, other->sat_per_byte_);
  swap(sat_per_vbyte_, other->sat_per_vbyte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseStatusUpdate::InitAsDefaultInstance() {
  ::lnrpc::_CloseStatusUpdate_default_instance_.close_pending_ = const_cast< ::lnrpc::PendingUpdate*>(
      ::lnrpc::PendingUpdate::internal_default_instance());
  ::lnrpc::_CloseStatusUpdate_default_instance_.chan_close_ = const_cast< ::lnrpc::ChannelCloseUpdate*>(
      ::lnrpc::ChannelCloseUpdate::internal_default_instance());
}
class CloseStatusUpdate::_Internal {
 public:
  static const ::lnrpc::PendingUpdate& close_pending(const CloseStatusUpdate* msg);
  static const ::lnrpc::ChannelCloseUpdate& chan_close(const CloseStatusUpdate* msg);
};

const ::lnrpc::PendingUpdate&
CloseStatusUpdate::_Internal::close_pending(const CloseStatusUpdate* msg) {
  return *msg->update_.close_pending_;
}
const ::lnrpc::ChannelCloseUpdate&
CloseStatusUpdate::_Internal::chan_close(const CloseStatusUpdate* msg) {
  return *msg->update_.chan_close_;
}
void CloseStatusUpdate::set_allocated_close_pending(::lnrpc::PendingUpdate* close_pending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (close_pending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      close_pending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_pending, submessage_arena);
    }
    set_has_close_pending();
    update_.close_pending_ = close_pending;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.CloseStatusUpdate.close_pending)
}
void CloseStatusUpdate::set_allocated_chan_close(::lnrpc::ChannelCloseUpdate* chan_close) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (chan_close) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_close = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_close, submessage_arena);
    }
    set_has_chan_close();
    update_.chan_close_ = chan_close;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.CloseStatusUpdate.chan_close)
}
CloseStatusUpdate::CloseStatusUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.CloseStatusUpdate)
}
CloseStatusUpdate::CloseStatusUpdate(const CloseStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kClosePending: {
      _internal_mutable_close_pending()->::lnrpc::PendingUpdate::MergeFrom(from._internal_close_pending());
      break;
    }
    case kChanClose: {
      _internal_mutable_chan_close()->::lnrpc::ChannelCloseUpdate::MergeFrom(from._internal_chan_close());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.CloseStatusUpdate)
}

void CloseStatusUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseStatusUpdate_rpc_2eproto.base);
  clear_has_update();
}

CloseStatusUpdate::~CloseStatusUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.CloseStatusUpdate)
  SharedDtor();
}

void CloseStatusUpdate::SharedDtor() {
  if (has_update()) {
    clear_update();
  }
}

void CloseStatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseStatusUpdate& CloseStatusUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseStatusUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void CloseStatusUpdate::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.CloseStatusUpdate)
  switch (update_case()) {
    case kClosePending: {
      delete update_.close_pending_;
      break;
    }
    case kChanClose: {
      delete update_.chan_close_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void CloseStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.CloseStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear();
}

const char* CloseStatusUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingUpdate close_pending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_pending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelCloseUpdate chan_close = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseStatusUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.CloseStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingUpdate close_pending = 1;
  if (_internal_has_close_pending()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::close_pending(this), target, stream);
  }

  // .lnrpc.ChannelCloseUpdate chan_close = 3;
  if (_internal_has_chan_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chan_close(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.CloseStatusUpdate)
  return target;
}

size_t CloseStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.CloseStatusUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .lnrpc.PendingUpdate close_pending = 1;
    case kClosePending: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.close_pending_);
      break;
    }
    // .lnrpc.ChannelCloseUpdate chan_close = 3;
    case kChanClose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.chan_close_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseStatusUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.CloseStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseStatusUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseStatusUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.CloseStatusUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.CloseStatusUpdate)
    MergeFrom(*source);
  }
}

void CloseStatusUpdate::MergeFrom(const CloseStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.CloseStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kClosePending: {
      _internal_mutable_close_pending()->::lnrpc::PendingUpdate::MergeFrom(from._internal_close_pending());
      break;
    }
    case kChanClose: {
      _internal_mutable_chan_close()->::lnrpc::ChannelCloseUpdate::MergeFrom(from._internal_chan_close());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void CloseStatusUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.CloseStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseStatusUpdate::CopyFrom(const CloseStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.CloseStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseStatusUpdate::IsInitialized() const {
  return true;
}

void CloseStatusUpdate::InternalSwap(CloseStatusUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseStatusUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingUpdate::InitAsDefaultInstance() {
}
class PendingUpdate::_Internal {
 public:
};

PendingUpdate::PendingUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingUpdate)
}
PendingUpdate::PendingUpdate(const PendingUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  output_index_ = from.output_index_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingUpdate)
}

void PendingUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingUpdate_rpc_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_index_ = 0u;
}

PendingUpdate::~PendingUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingUpdate)
  SharedDtor();
}

void PendingUpdate::SharedDtor() {
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingUpdate& PendingUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  output_index_ = 0u;
  _internal_metadata_.Clear();
}

const char* PendingUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 output_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          output_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_txid(), target);
  }

  // uint32 output_index = 2;
  if (this->output_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_output_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingUpdate)
  return target;
}

size_t PendingUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes txid = 1;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_txid());
  }

  // uint32 output_index = 2;
  if (this->output_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_output_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingUpdate)
    MergeFrom(*source);
  }
}

void PendingUpdate::MergeFrom(const PendingUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.output_index() != 0) {
    _internal_set_output_index(from._internal_output_index());
  }
}

void PendingUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingUpdate::CopyFrom(const PendingUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingUpdate::IsInitialized() const {
  return true;
}

void PendingUpdate::InternalSwap(PendingUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(output_index_, other->output_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReadyForPsbtFunding::InitAsDefaultInstance() {
}
class ReadyForPsbtFunding::_Internal {
 public:
};

ReadyForPsbtFunding::ReadyForPsbtFunding()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ReadyForPsbtFunding)
}
ReadyForPsbtFunding::ReadyForPsbtFunding(const ReadyForPsbtFunding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funding_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_funding_address().empty()) {
    funding_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funding_address_);
  }
  psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_psbt().empty()) {
    psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psbt_);
  }
  funding_amount_ = from.funding_amount_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ReadyForPsbtFunding)
}

void ReadyForPsbtFunding::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReadyForPsbtFunding_rpc_2eproto.base);
  funding_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funding_amount_ = PROTOBUF_LONGLONG(0);
}

ReadyForPsbtFunding::~ReadyForPsbtFunding() {
  // @@protoc_insertion_point(destructor:lnrpc.ReadyForPsbtFunding)
  SharedDtor();
}

void ReadyForPsbtFunding::SharedDtor() {
  funding_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psbt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReadyForPsbtFunding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReadyForPsbtFunding& ReadyForPsbtFunding::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReadyForPsbtFunding_rpc_2eproto.base);
  return *internal_default_instance();
}


void ReadyForPsbtFunding::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ReadyForPsbtFunding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funding_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  funding_amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ReadyForPsbtFunding::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string funding_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_funding_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ReadyForPsbtFunding.funding_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 funding_amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          funding_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes psbt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_psbt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReadyForPsbtFunding::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ReadyForPsbtFunding)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string funding_address = 1;
  if (this->funding_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_funding_address().data(), static_cast<int>(this->_internal_funding_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ReadyForPsbtFunding.funding_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_funding_address(), target);
  }

  // int64 funding_amount = 2;
  if (this->funding_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_funding_amount(), target);
  }

  // bytes psbt = 3;
  if (this->psbt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_psbt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ReadyForPsbtFunding)
  return target;
}

size_t ReadyForPsbtFunding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ReadyForPsbtFunding)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string funding_address = 1;
  if (this->funding_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_funding_address());
  }

  // bytes psbt = 3;
  if (this->psbt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_psbt());
  }

  // int64 funding_amount = 2;
  if (this->funding_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_funding_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReadyForPsbtFunding::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ReadyForPsbtFunding)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadyForPsbtFunding* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReadyForPsbtFunding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ReadyForPsbtFunding)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ReadyForPsbtFunding)
    MergeFrom(*source);
  }
}

void ReadyForPsbtFunding::MergeFrom(const ReadyForPsbtFunding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ReadyForPsbtFunding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.funding_address().size() > 0) {

    funding_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funding_address_);
  }
  if (from.psbt().size() > 0) {

    psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.psbt_);
  }
  if (from.funding_amount() != 0) {
    _internal_set_funding_amount(from._internal_funding_amount());
  }
}

void ReadyForPsbtFunding::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ReadyForPsbtFunding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyForPsbtFunding::CopyFrom(const ReadyForPsbtFunding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ReadyForPsbtFunding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyForPsbtFunding::IsInitialized() const {
  return true;
}

void ReadyForPsbtFunding::InternalSwap(ReadyForPsbtFunding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  funding_address_.Swap(&other->funding_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  psbt_.Swap(&other->psbt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funding_amount_, other->funding_amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReadyForPsbtFunding::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenChannelRequest::InitAsDefaultInstance() {
  ::lnrpc::_OpenChannelRequest_default_instance_._instance.get_mutable()->funding_shim_ = const_cast< ::lnrpc::FundingShim*>(
      ::lnrpc::FundingShim::internal_default_instance());
}
class OpenChannelRequest::_Internal {
 public:
  static const ::lnrpc::FundingShim& funding_shim(const OpenChannelRequest* msg);
};

const ::lnrpc::FundingShim&
OpenChannelRequest::_Internal::funding_shim(const OpenChannelRequest* msg) {
  return *msg->funding_shim_;
}
OpenChannelRequest::OpenChannelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.OpenChannelRequest)
}
OpenChannelRequest::OpenChannelRequest(const OpenChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_pubkey().empty()) {
    node_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_);
  }
  node_pubkey_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_pubkey_string().empty()) {
    node_pubkey_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_string_);
  }
  close_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_close_address().empty()) {
    close_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_address_);
  }
  if (from._internal_has_funding_shim()) {
    funding_shim_ = new ::lnrpc::FundingShim(*from.funding_shim_);
  } else {
    funding_shim_ = nullptr;
  }
  ::memcpy(&sat_per_vbyte_, &from.sat_per_vbyte_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_local_csv_) -
    reinterpret_cast<char*>(&sat_per_vbyte_)) + sizeof(max_local_csv_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.OpenChannelRequest)
}

void OpenChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenChannelRequest_rpc_2eproto.base);
  node_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_pubkey_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funding_shim_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_local_csv_) -
      reinterpret_cast<char*>(&funding_shim_)) + sizeof(max_local_csv_));
}

OpenChannelRequest::~OpenChannelRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.OpenChannelRequest)
  SharedDtor();
}

void OpenChannelRequest::SharedDtor() {
  node_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_pubkey_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funding_shim_;
}

void OpenChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenChannelRequest& OpenChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenChannelRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void OpenChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.OpenChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_pubkey_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  close_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funding_shim_ != nullptr) {
    delete funding_shim_;
  }
  funding_shim_ = nullptr;
  ::memset(&sat_per_vbyte_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_local_csv_) -
      reinterpret_cast<char*>(&sat_per_vbyte_)) + sizeof(max_local_csv_));
  _internal_metadata_.Clear();
}

const char* OpenChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sat_per_vbyte = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sat_per_vbyte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes node_pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_pubkey_string = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_node_pubkey_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.OpenChannelRequest.node_pubkey_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_funding_amount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_funding_amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 push_sat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          push_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 target_conf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          target_conf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 sat_per_byte = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_htlc_msat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          min_htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_csv_delay = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          remote_csv_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_confs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          min_confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool spend_unconfirmed = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          spend_unconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string close_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_close_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.OpenChannelRequest.close_address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FundingShim funding_shim = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_funding_shim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remote_max_value_in_flight_msat = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          remote_max_value_in_flight_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 remote_max_htlcs = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          remote_max_htlcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_local_csv = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_local_csv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool subtract_fees = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          subtract_fees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.OpenChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sat_per_vbyte = 1;
  if (this->sat_per_vbyte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sat_per_vbyte(), target);
  }

  // bytes node_pubkey = 2;
  if (this->node_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_node_pubkey(), target);
  }

  // string node_pubkey_string = 3 [deprecated = true];
  if (this->node_pubkey_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_pubkey_string().data(), static_cast<int>(this->_internal_node_pubkey_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.OpenChannelRequest.node_pubkey_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_node_pubkey_string(), target);
  }

  // int64 local_funding_amount = 4;
  if (this->local_funding_amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_local_funding_amount(), target);
  }

  // int64 push_sat = 5;
  if (this->push_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_push_sat(), target);
  }

  // int32 target_conf = 6;
  if (this->target_conf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_target_conf(), target);
  }

  // int64 sat_per_byte = 7 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_sat_per_byte(), target);
  }

  // bool private = 8;
  if (this->private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_private_(), target);
  }

  // int64 min_htlc_msat = 9;
  if (this->min_htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_min_htlc_msat(), target);
  }

  // uint32 remote_csv_delay = 10;
  if (this->remote_csv_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_remote_csv_delay(), target);
  }

  // int32 min_confs = 11;
  if (this->min_confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_min_confs(), target);
  }

  // bool spend_unconfirmed = 12;
  if (this->spend_unconfirmed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_spend_unconfirmed(), target);
  }

  // string close_address = 13;
  if (this->close_address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_close_address().data(), static_cast<int>(this->_internal_close_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.OpenChannelRequest.close_address");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_close_address(), target);
  }

  // .lnrpc.FundingShim funding_shim = 14;
  if (this->has_funding_shim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::funding_shim(this), target, stream);
  }

  // uint64 remote_max_value_in_flight_msat = 15;
  if (this->remote_max_value_in_flight_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_remote_max_value_in_flight_msat(), target);
  }

  // uint32 remote_max_htlcs = 16;
  if (this->remote_max_htlcs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_remote_max_htlcs(), target);
  }

  // uint32 max_local_csv = 17;
  if (this->max_local_csv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_local_csv(), target);
  }

  // bool subtract_fees = 18;
  if (this->subtract_fees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_subtract_fees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.OpenChannelRequest)
  return target;
}

size_t OpenChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.OpenChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_pubkey = 2;
  if (this->node_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_pubkey());
  }

  // string node_pubkey_string = 3 [deprecated = true];
  if (this->node_pubkey_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_pubkey_string());
  }

  // string close_address = 13;
  if (this->close_address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_close_address());
  }

  // .lnrpc.FundingShim funding_shim = 14;
  if (this->has_funding_shim()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funding_shim_);
  }

  // uint64 sat_per_vbyte = 1;
  if (this->sat_per_vbyte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat_per_vbyte());
  }

  // int64 local_funding_amount = 4;
  if (this->local_funding_amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_funding_amount());
  }

  // int64 push_sat = 5;
  if (this->push_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_push_sat());
  }

  // int64 sat_per_byte = 7 [deprecated = true];
  if (this->sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_sat_per_byte());
  }

  // int32 target_conf = 6;
  if (this->target_conf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_target_conf());
  }

  // uint32 remote_csv_delay = 10;
  if (this->remote_csv_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_csv_delay());
  }

  // int64 min_htlc_msat = 9;
  if (this->min_htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_htlc_msat());
  }

  // int32 min_confs = 11;
  if (this->min_confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_confs());
  }

  // bool private = 8;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // bool spend_unconfirmed = 12;
  if (this->spend_unconfirmed() != 0) {
    total_size += 1 + 1;
  }

  // bool subtract_fees = 18;
  if (this->subtract_fees() != 0) {
    total_size += 2 + 1;
  }

  // uint64 remote_max_value_in_flight_msat = 15;
  if (this->remote_max_value_in_flight_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remote_max_value_in_flight_msat());
  }

  // uint32 remote_max_htlcs = 16;
  if (this->remote_max_htlcs() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_remote_max_htlcs());
  }

  // uint32 max_local_csv = 17;
  if (this->max_local_csv() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_local_csv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.OpenChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.OpenChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.OpenChannelRequest)
    MergeFrom(*source);
  }
}

void OpenChannelRequest::MergeFrom(const OpenChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.OpenChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_pubkey().size() > 0) {

    node_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_);
  }
  if (from.node_pubkey_string().size() > 0) {

    node_pubkey_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_pubkey_string_);
  }
  if (from.close_address().size() > 0) {

    close_address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.close_address_);
  }
  if (from.has_funding_shim()) {
    _internal_mutable_funding_shim()->::lnrpc::FundingShim::MergeFrom(from._internal_funding_shim());
  }
  if (from.sat_per_vbyte() != 0) {
    _internal_set_sat_per_vbyte(from._internal_sat_per_vbyte());
  }
  if (from.local_funding_amount() != 0) {
    _internal_set_local_funding_amount(from._internal_local_funding_amount());
  }
  if (from.push_sat() != 0) {
    _internal_set_push_sat(from._internal_push_sat());
  }
  if (from.sat_per_byte() != 0) {
    _internal_set_sat_per_byte(from._internal_sat_per_byte());
  }
  if (from.target_conf() != 0) {
    _internal_set_target_conf(from._internal_target_conf());
  }
  if (from.remote_csv_delay() != 0) {
    _internal_set_remote_csv_delay(from._internal_remote_csv_delay());
  }
  if (from.min_htlc_msat() != 0) {
    _internal_set_min_htlc_msat(from._internal_min_htlc_msat());
  }
  if (from.min_confs() != 0) {
    _internal_set_min_confs(from._internal_min_confs());
  }
  if (from.private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from.spend_unconfirmed() != 0) {
    _internal_set_spend_unconfirmed(from._internal_spend_unconfirmed());
  }
  if (from.subtract_fees() != 0) {
    _internal_set_subtract_fees(from._internal_subtract_fees());
  }
  if (from.remote_max_value_in_flight_msat() != 0) {
    _internal_set_remote_max_value_in_flight_msat(from._internal_remote_max_value_in_flight_msat());
  }
  if (from.remote_max_htlcs() != 0) {
    _internal_set_remote_max_htlcs(from._internal_remote_max_htlcs());
  }
  if (from.max_local_csv() != 0) {
    _internal_set_max_local_csv(from._internal_max_local_csv());
  }
}

void OpenChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.OpenChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenChannelRequest::CopyFrom(const OpenChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.OpenChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenChannelRequest::IsInitialized() const {
  return true;
}

void OpenChannelRequest::InternalSwap(OpenChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_pubkey_.Swap(&other->node_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_pubkey_string_.Swap(&other->node_pubkey_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  close_address_.Swap(&other->close_address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funding_shim_, other->funding_shim_);
  swap(sat_per_vbyte_, other->sat_per_vbyte_);
  swap(local_funding_amount_, other->local_funding_amount_);
  swap(push_sat_, other->push_sat_);
  swap(sat_per_byte_, other->sat_per_byte_);
  swap(target_conf_, other->target_conf_);
  swap(remote_csv_delay_, other->remote_csv_delay_);
  swap(min_htlc_msat_, other->min_htlc_msat_);
  swap(min_confs_, other->min_confs_);
  swap(private__, other->private__);
  swap(spend_unconfirmed_, other->spend_unconfirmed_);
  swap(subtract_fees_, other->subtract_fees_);
  swap(remote_max_value_in_flight_msat_, other->remote_max_value_in_flight_msat_);
  swap(remote_max_htlcs_, other->remote_max_htlcs_);
  swap(max_local_csv_, other->max_local_csv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OpenStatusUpdate::InitAsDefaultInstance() {
  ::lnrpc::_OpenStatusUpdate_default_instance_.chan_pending_ = const_cast< ::lnrpc::PendingUpdate*>(
      ::lnrpc::PendingUpdate::internal_default_instance());
  ::lnrpc::_OpenStatusUpdate_default_instance_.chan_open_ = const_cast< ::lnrpc::ChannelOpenUpdate*>(
      ::lnrpc::ChannelOpenUpdate::internal_default_instance());
  ::lnrpc::_OpenStatusUpdate_default_instance_.psbt_fund_ = const_cast< ::lnrpc::ReadyForPsbtFunding*>(
      ::lnrpc::ReadyForPsbtFunding::internal_default_instance());
}
class OpenStatusUpdate::_Internal {
 public:
  static const ::lnrpc::PendingUpdate& chan_pending(const OpenStatusUpdate* msg);
  static const ::lnrpc::ChannelOpenUpdate& chan_open(const OpenStatusUpdate* msg);
  static const ::lnrpc::ReadyForPsbtFunding& psbt_fund(const OpenStatusUpdate* msg);
};

const ::lnrpc::PendingUpdate&
OpenStatusUpdate::_Internal::chan_pending(const OpenStatusUpdate* msg) {
  return *msg->update_.chan_pending_;
}
const ::lnrpc::ChannelOpenUpdate&
OpenStatusUpdate::_Internal::chan_open(const OpenStatusUpdate* msg) {
  return *msg->update_.chan_open_;
}
const ::lnrpc::ReadyForPsbtFunding&
OpenStatusUpdate::_Internal::psbt_fund(const OpenStatusUpdate* msg) {
  return *msg->update_.psbt_fund_;
}
void OpenStatusUpdate::set_allocated_chan_pending(::lnrpc::PendingUpdate* chan_pending) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (chan_pending) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_pending = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_pending, submessage_arena);
    }
    set_has_chan_pending();
    update_.chan_pending_ = chan_pending;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenStatusUpdate.chan_pending)
}
void OpenStatusUpdate::set_allocated_chan_open(::lnrpc::ChannelOpenUpdate* chan_open) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (chan_open) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_open = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_open, submessage_arena);
    }
    set_has_chan_open();
    update_.chan_open_ = chan_open;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenStatusUpdate.chan_open)
}
void OpenStatusUpdate::set_allocated_psbt_fund(::lnrpc::ReadyForPsbtFunding* psbt_fund) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_update();
  if (psbt_fund) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psbt_fund = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psbt_fund, submessage_arena);
    }
    set_has_psbt_fund();
    update_.psbt_fund_ = psbt_fund;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenStatusUpdate.psbt_fund)
}
OpenStatusUpdate::OpenStatusUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.OpenStatusUpdate)
}
OpenStatusUpdate::OpenStatusUpdate(const OpenStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  clear_has_update();
  switch (from.update_case()) {
    case kChanPending: {
      _internal_mutable_chan_pending()->::lnrpc::PendingUpdate::MergeFrom(from._internal_chan_pending());
      break;
    }
    case kChanOpen: {
      _internal_mutable_chan_open()->::lnrpc::ChannelOpenUpdate::MergeFrom(from._internal_chan_open());
      break;
    }
    case kPsbtFund: {
      _internal_mutable_psbt_fund()->::lnrpc::ReadyForPsbtFunding::MergeFrom(from._internal_psbt_fund());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.OpenStatusUpdate)
}

void OpenStatusUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpenStatusUpdate_rpc_2eproto.base);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_update();
}

OpenStatusUpdate::~OpenStatusUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.OpenStatusUpdate)
  SharedDtor();
}

void OpenStatusUpdate::SharedDtor() {
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_update()) {
    clear_update();
  }
}

void OpenStatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpenStatusUpdate& OpenStatusUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpenStatusUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void OpenStatusUpdate::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.OpenStatusUpdate)
  switch (update_case()) {
    case kChanPending: {
      delete update_.chan_pending_;
      break;
    }
    case kChanOpen: {
      delete update_.chan_open_;
      break;
    }
    case kPsbtFund: {
      delete update_.psbt_fund_;
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPDATE_NOT_SET;
}


void OpenStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.OpenStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_update();
  _internal_metadata_.Clear();
}

const char* OpenStatusUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingUpdate chan_pending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_pending(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelOpenUpdate chan_open = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ReadyForPsbtFunding psbt_fund = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_psbt_fund(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpenStatusUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.OpenStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingUpdate chan_pending = 1;
  if (_internal_has_chan_pending()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chan_pending(this), target, stream);
  }

  // .lnrpc.ChannelOpenUpdate chan_open = 3;
  if (_internal_has_chan_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::chan_open(this), target, stream);
  }

  // bytes pending_chan_id = 4;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_pending_chan_id(), target);
  }

  // .lnrpc.ReadyForPsbtFunding psbt_fund = 5;
  if (_internal_has_psbt_fund()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::psbt_fund(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.OpenStatusUpdate)
  return target;
}

size_t OpenStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.OpenStatusUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pending_chan_id = 4;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  switch (update_case()) {
    // .lnrpc.PendingUpdate chan_pending = 1;
    case kChanPending: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.chan_pending_);
      break;
    }
    // .lnrpc.ChannelOpenUpdate chan_open = 3;
    case kChanOpen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.chan_open_);
      break;
    }
    // .lnrpc.ReadyForPsbtFunding psbt_fund = 5;
    case kPsbtFund: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *update_.psbt_fund_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenStatusUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.OpenStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenStatusUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpenStatusUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.OpenStatusUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.OpenStatusUpdate)
    MergeFrom(*source);
  }
}

void OpenStatusUpdate::MergeFrom(const OpenStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.OpenStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  switch (from.update_case()) {
    case kChanPending: {
      _internal_mutable_chan_pending()->::lnrpc::PendingUpdate::MergeFrom(from._internal_chan_pending());
      break;
    }
    case kChanOpen: {
      _internal_mutable_chan_open()->::lnrpc::ChannelOpenUpdate::MergeFrom(from._internal_chan_open());
      break;
    }
    case kPsbtFund: {
      _internal_mutable_psbt_fund()->::lnrpc::ReadyForPsbtFunding::MergeFrom(from._internal_psbt_fund());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
}

void OpenStatusUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.OpenStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenStatusUpdate::CopyFrom(const OpenStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.OpenStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenStatusUpdate::IsInitialized() const {
  return true;
}

void OpenStatusUpdate::InternalSwap(OpenStatusUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(update_, other->update_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenStatusUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyLocator::InitAsDefaultInstance() {
}
class KeyLocator::_Internal {
 public:
};

KeyLocator::KeyLocator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.KeyLocator)
}
KeyLocator::KeyLocator(const KeyLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_family_, &from.key_family_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_index_) -
    reinterpret_cast<char*>(&key_family_)) + sizeof(key_index_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.KeyLocator)
}

void KeyLocator::SharedCtor() {
  ::memset(&key_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_index_) -
      reinterpret_cast<char*>(&key_family_)) + sizeof(key_index_));
}

KeyLocator::~KeyLocator() {
  // @@protoc_insertion_point(destructor:lnrpc.KeyLocator)
  SharedDtor();
}

void KeyLocator::SharedDtor() {
}

void KeyLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyLocator& KeyLocator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyLocator_rpc_2eproto.base);
  return *internal_default_instance();
}


void KeyLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.KeyLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_family_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_index_) -
      reinterpret_cast<char*>(&key_family_)) + sizeof(key_index_));
  _internal_metadata_.Clear();
}

const char* KeyLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 key_family = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_family_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 key_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          key_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyLocator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.KeyLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 key_family = 1;
  if (this->key_family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_family(), target);
  }

  // int32 key_index = 2;
  if (this->key_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_key_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.KeyLocator)
  return target;
}

size_t KeyLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.KeyLocator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 key_family = 1;
  if (this->key_family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_family());
  }

  // int32 key_index = 2;
  if (this->key_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_key_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyLocator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.KeyLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyLocator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyLocator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.KeyLocator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.KeyLocator)
    MergeFrom(*source);
  }
}

void KeyLocator::MergeFrom(const KeyLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.KeyLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_family() != 0) {
    _internal_set_key_family(from._internal_key_family());
  }
  if (from.key_index() != 0) {
    _internal_set_key_index(from._internal_key_index());
  }
}

void KeyLocator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.KeyLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyLocator::CopyFrom(const KeyLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.KeyLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyLocator::IsInitialized() const {
  return true;
}

void KeyLocator::InternalSwap(KeyLocator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(key_family_, other->key_family_);
  swap(key_index_, other->key_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyLocator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyDescriptor::InitAsDefaultInstance() {
  ::lnrpc::_KeyDescriptor_default_instance_._instance.get_mutable()->key_loc_ = const_cast< ::lnrpc::KeyLocator*>(
      ::lnrpc::KeyLocator::internal_default_instance());
}
class KeyDescriptor::_Internal {
 public:
  static const ::lnrpc::KeyLocator& key_loc(const KeyDescriptor* msg);
};

const ::lnrpc::KeyLocator&
KeyDescriptor::_Internal::key_loc(const KeyDescriptor* msg) {
  return *msg->key_loc_;
}
KeyDescriptor::KeyDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.KeyDescriptor)
}
KeyDescriptor::KeyDescriptor(const KeyDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  raw_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_raw_key_bytes().empty()) {
    raw_key_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_key_bytes_);
  }
  if (from._internal_has_key_loc()) {
    key_loc_ = new ::lnrpc::KeyLocator(*from.key_loc_);
  } else {
    key_loc_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.KeyDescriptor)
}

void KeyDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyDescriptor_rpc_2eproto.base);
  raw_key_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_loc_ = nullptr;
}

KeyDescriptor::~KeyDescriptor() {
  // @@protoc_insertion_point(destructor:lnrpc.KeyDescriptor)
  SharedDtor();
}

void KeyDescriptor::SharedDtor() {
  raw_key_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete key_loc_;
}

void KeyDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyDescriptor& KeyDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyDescriptor_rpc_2eproto.base);
  return *internal_default_instance();
}


void KeyDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.KeyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_key_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && key_loc_ != nullptr) {
    delete key_loc_;
  }
  key_loc_ = nullptr;
  _internal_metadata_.Clear();
}

const char* KeyDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes raw_key_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_raw_key_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.KeyLocator key_loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_loc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.KeyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes raw_key_bytes = 1;
  if (this->raw_key_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_raw_key_bytes(), target);
  }

  // .lnrpc.KeyLocator key_loc = 2;
  if (this->has_key_loc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::key_loc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.KeyDescriptor)
  return target;
}

size_t KeyDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.KeyDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes raw_key_bytes = 1;
  if (this->raw_key_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_raw_key_bytes());
  }

  // .lnrpc.KeyLocator key_loc = 2;
  if (this->has_key_loc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_loc_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.KeyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.KeyDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.KeyDescriptor)
    MergeFrom(*source);
  }
}

void KeyDescriptor::MergeFrom(const KeyDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.KeyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.raw_key_bytes().size() > 0) {

    raw_key_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.raw_key_bytes_);
  }
  if (from.has_key_loc()) {
    _internal_mutable_key_loc()->::lnrpc::KeyLocator::MergeFrom(from._internal_key_loc());
  }
}

void KeyDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.KeyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDescriptor::CopyFrom(const KeyDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.KeyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDescriptor::IsInitialized() const {
  return true;
}

void KeyDescriptor::InternalSwap(KeyDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  raw_key_bytes_.Swap(&other->raw_key_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(key_loc_, other->key_loc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChanPointShim::InitAsDefaultInstance() {
  ::lnrpc::_ChanPointShim_default_instance_._instance.get_mutable()->chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
  ::lnrpc::_ChanPointShim_default_instance_._instance.get_mutable()->local_key_ = const_cast< ::lnrpc::KeyDescriptor*>(
      ::lnrpc::KeyDescriptor::internal_default_instance());
}
class ChanPointShim::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const ChanPointShim* msg);
  static const ::lnrpc::KeyDescriptor& local_key(const ChanPointShim* msg);
};

const ::lnrpc::ChannelPoint&
ChanPointShim::_Internal::chan_point(const ChanPointShim* msg) {
  return *msg->chan_point_;
}
const ::lnrpc::KeyDescriptor&
ChanPointShim::_Internal::local_key(const ChanPointShim* msg) {
  return *msg->local_key_;
}
ChanPointShim::ChanPointShim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChanPointShim)
}
ChanPointShim::ChanPointShim(const ChanPointShim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_key().empty()) {
    remote_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_key_);
  }
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from._internal_has_chan_point()) {
    chan_point_ = new ::lnrpc::ChannelPoint(*from.chan_point_);
  } else {
    chan_point_ = nullptr;
  }
  if (from._internal_has_local_key()) {
    local_key_ = new ::lnrpc::KeyDescriptor(*from.local_key_);
  } else {
    local_key_ = nullptr;
  }
  ::memcpy(&amt_, &from.amt_,
    static_cast<size_t>(reinterpret_cast<char*>(&thaw_height_) -
    reinterpret_cast<char*>(&amt_)) + sizeof(thaw_height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChanPointShim)
}

void ChanPointShim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChanPointShim_rpc_2eproto.base);
  remote_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thaw_height_) -
      reinterpret_cast<char*>(&chan_point_)) + sizeof(thaw_height_));
}

ChanPointShim::~ChanPointShim() {
  // @@protoc_insertion_point(destructor:lnrpc.ChanPointShim)
  SharedDtor();
}

void ChanPointShim::SharedDtor() {
  remote_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chan_point_;
  if (this != internal_default_instance()) delete local_key_;
}

void ChanPointShim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChanPointShim& ChanPointShim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChanPointShim_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChanPointShim::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChanPointShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && local_key_ != nullptr) {
    delete local_key_;
  }
  local_key_ = nullptr;
  ::memset(&amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&thaw_height_) -
      reinterpret_cast<char*>(&amt_)) + sizeof(thaw_height_));
  _internal_metadata_.Clear();
}

const char* ChanPointShim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint chan_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.KeyDescriptor local_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes remote_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_remote_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 thaw_height = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          thaw_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChanPointShim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChanPointShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amt = 1;
  if (this->amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amt(), target);
  }

  // .lnrpc.ChannelPoint chan_point = 2;
  if (this->has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chan_point(this), target, stream);
  }

  // .lnrpc.KeyDescriptor local_key = 3;
  if (this->has_local_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_key(this), target, stream);
  }

  // bytes remote_key = 4;
  if (this->remote_key().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_remote_key(), target);
  }

  // bytes pending_chan_id = 5;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_pending_chan_id(), target);
  }

  // uint32 thaw_height = 6;
  if (this->thaw_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_thaw_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChanPointShim)
  return target;
}

size_t ChanPointShim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChanPointShim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes remote_key = 4;
  if (this->remote_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_remote_key());
  }

  // bytes pending_chan_id = 5;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  // .lnrpc.ChannelPoint chan_point = 2;
  if (this->has_chan_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chan_point_);
  }

  // .lnrpc.KeyDescriptor local_key = 3;
  if (this->has_local_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_key_);
  }

  // int64 amt = 1;
  if (this->amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt());
  }

  // uint32 thaw_height = 6;
  if (this->thaw_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_thaw_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChanPointShim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChanPointShim)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanPointShim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChanPointShim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChanPointShim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChanPointShim)
    MergeFrom(*source);
  }
}

void ChanPointShim::MergeFrom(const ChanPointShim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChanPointShim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_key().size() > 0) {

    remote_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_key_);
  }
  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from.has_chan_point()) {
    _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
  }
  if (from.has_local_key()) {
    _internal_mutable_local_key()->::lnrpc::KeyDescriptor::MergeFrom(from._internal_local_key());
  }
  if (from.amt() != 0) {
    _internal_set_amt(from._internal_amt());
  }
  if (from.thaw_height() != 0) {
    _internal_set_thaw_height(from._internal_thaw_height());
  }
}

void ChanPointShim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChanPointShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanPointShim::CopyFrom(const ChanPointShim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChanPointShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanPointShim::IsInitialized() const {
  return true;
}

void ChanPointShim::InternalSwap(ChanPointShim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_key_.Swap(&other->remote_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_point_, other->chan_point_);
  swap(local_key_, other->local_key_);
  swap(amt_, other->amt_);
  swap(thaw_height_, other->thaw_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChanPointShim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PsbtShim::InitAsDefaultInstance() {
}
class PsbtShim::_Internal {
 public:
};

PsbtShim::PsbtShim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PsbtShim)
}
PsbtShim::PsbtShim(const PsbtShim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  base_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_psbt().empty()) {
    base_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_psbt_);
  }
  no_publish_ = from.no_publish_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.PsbtShim)
}

void PsbtShim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PsbtShim_rpc_2eproto.base);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  no_publish_ = false;
}

PsbtShim::~PsbtShim() {
  // @@protoc_insertion_point(destructor:lnrpc.PsbtShim)
  SharedDtor();
}

void PsbtShim::SharedDtor() {
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_psbt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PsbtShim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PsbtShim& PsbtShim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PsbtShim_rpc_2eproto.base);
  return *internal_default_instance();
}


void PsbtShim::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PsbtShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  no_publish_ = false;
  _internal_metadata_.Clear();
}

const char* PsbtShim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pending_chan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes base_psbt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_base_psbt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_publish = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          no_publish_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PsbtShim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PsbtShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pending_chan_id = 1;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pending_chan_id(), target);
  }

  // bytes base_psbt = 2;
  if (this->base_psbt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_base_psbt(), target);
  }

  // bool no_publish = 3;
  if (this->no_publish() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_no_publish(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PsbtShim)
  return target;
}

size_t PsbtShim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PsbtShim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pending_chan_id = 1;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  // bytes base_psbt = 2;
  if (this->base_psbt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_base_psbt());
  }

  // bool no_publish = 3;
  if (this->no_publish() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PsbtShim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PsbtShim)
  GOOGLE_DCHECK_NE(&from, this);
  const PsbtShim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PsbtShim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PsbtShim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PsbtShim)
    MergeFrom(*source);
  }
}

void PsbtShim::MergeFrom(const PsbtShim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PsbtShim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from.base_psbt().size() > 0) {

    base_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.base_psbt_);
  }
  if (from.no_publish() != 0) {
    _internal_set_no_publish(from._internal_no_publish());
  }
}

void PsbtShim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PsbtShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PsbtShim::CopyFrom(const PsbtShim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PsbtShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PsbtShim::IsInitialized() const {
  return true;
}

void PsbtShim::InternalSwap(PsbtShim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  base_psbt_.Swap(&other->base_psbt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(no_publish_, other->no_publish_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PsbtShim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingShim::InitAsDefaultInstance() {
  ::lnrpc::_FundingShim_default_instance_.chan_point_shim_ = const_cast< ::lnrpc::ChanPointShim*>(
      ::lnrpc::ChanPointShim::internal_default_instance());
  ::lnrpc::_FundingShim_default_instance_.psbt_shim_ = const_cast< ::lnrpc::PsbtShim*>(
      ::lnrpc::PsbtShim::internal_default_instance());
}
class FundingShim::_Internal {
 public:
  static const ::lnrpc::ChanPointShim& chan_point_shim(const FundingShim* msg);
  static const ::lnrpc::PsbtShim& psbt_shim(const FundingShim* msg);
};

const ::lnrpc::ChanPointShim&
FundingShim::_Internal::chan_point_shim(const FundingShim* msg) {
  return *msg->shim_.chan_point_shim_;
}
const ::lnrpc::PsbtShim&
FundingShim::_Internal::psbt_shim(const FundingShim* msg) {
  return *msg->shim_.psbt_shim_;
}
void FundingShim::set_allocated_chan_point_shim(::lnrpc::ChanPointShim* chan_point_shim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_shim();
  if (chan_point_shim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point_shim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point_shim, submessage_arena);
    }
    set_has_chan_point_shim();
    shim_.chan_point_shim_ = chan_point_shim;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingShim.chan_point_shim)
}
void FundingShim::set_allocated_psbt_shim(::lnrpc::PsbtShim* psbt_shim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_shim();
  if (psbt_shim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psbt_shim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psbt_shim, submessage_arena);
    }
    set_has_psbt_shim();
    shim_.psbt_shim_ = psbt_shim;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingShim.psbt_shim)
}
FundingShim::FundingShim()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingShim)
}
FundingShim::FundingShim(const FundingShim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_shim();
  switch (from.shim_case()) {
    case kChanPointShim: {
      _internal_mutable_chan_point_shim()->::lnrpc::ChanPointShim::MergeFrom(from._internal_chan_point_shim());
      break;
    }
    case kPsbtShim: {
      _internal_mutable_psbt_shim()->::lnrpc::PsbtShim::MergeFrom(from._internal_psbt_shim());
      break;
    }
    case SHIM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingShim)
}

void FundingShim::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundingShim_rpc_2eproto.base);
  clear_has_shim();
}

FundingShim::~FundingShim() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingShim)
  SharedDtor();
}

void FundingShim::SharedDtor() {
  if (has_shim()) {
    clear_shim();
  }
}

void FundingShim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingShim& FundingShim::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingShim_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingShim::clear_shim() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.FundingShim)
  switch (shim_case()) {
    case kChanPointShim: {
      delete shim_.chan_point_shim_;
      break;
    }
    case kPsbtShim: {
      delete shim_.psbt_shim_;
      break;
    }
    case SHIM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SHIM_NOT_SET;
}


void FundingShim::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_shim();
  _internal_metadata_.Clear();
}

const char* FundingShim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChanPointShim chan_point_shim = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point_shim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.PsbtShim psbt_shim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_psbt_shim(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingShim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingShim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChanPointShim chan_point_shim = 1;
  if (_internal_has_chan_point_shim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chan_point_shim(this), target, stream);
  }

  // .lnrpc.PsbtShim psbt_shim = 2;
  if (_internal_has_psbt_shim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::psbt_shim(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingShim)
  return target;
}

size_t FundingShim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingShim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (shim_case()) {
    // .lnrpc.ChanPointShim chan_point_shim = 1;
    case kChanPointShim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shim_.chan_point_shim_);
      break;
    }
    // .lnrpc.PsbtShim psbt_shim = 2;
    case kPsbtShim: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shim_.psbt_shim_);
      break;
    }
    case SHIM_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingShim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingShim)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingShim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingShim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingShim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingShim)
    MergeFrom(*source);
  }
}

void FundingShim::MergeFrom(const FundingShim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingShim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.shim_case()) {
    case kChanPointShim: {
      _internal_mutable_chan_point_shim()->::lnrpc::ChanPointShim::MergeFrom(from._internal_chan_point_shim());
      break;
    }
    case kPsbtShim: {
      _internal_mutable_psbt_shim()->::lnrpc::PsbtShim::MergeFrom(from._internal_psbt_shim());
      break;
    }
    case SHIM_NOT_SET: {
      break;
    }
  }
}

void FundingShim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingShim::CopyFrom(const FundingShim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingShim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingShim::IsInitialized() const {
  return true;
}

void FundingShim::InternalSwap(FundingShim* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shim_, other->shim_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingShim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingShimCancel::InitAsDefaultInstance() {
}
class FundingShimCancel::_Internal {
 public:
};

FundingShimCancel::FundingShimCancel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingShimCancel)
}
FundingShimCancel::FundingShimCancel(const FundingShimCancel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingShimCancel)
}

void FundingShimCancel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundingShimCancel_rpc_2eproto.base);
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FundingShimCancel::~FundingShimCancel() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingShimCancel)
  SharedDtor();
}

void FundingShimCancel::SharedDtor() {
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FundingShimCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingShimCancel& FundingShimCancel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingShimCancel_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingShimCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingShimCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FundingShimCancel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pending_chan_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingShimCancel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingShimCancel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pending_chan_id = 1;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pending_chan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingShimCancel)
  return target;
}

size_t FundingShimCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingShimCancel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pending_chan_id = 1;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingShimCancel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingShimCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingShimCancel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingShimCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingShimCancel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingShimCancel)
    MergeFrom(*source);
  }
}

void FundingShimCancel::MergeFrom(const FundingShimCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingShimCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
}

void FundingShimCancel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingShimCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingShimCancel::CopyFrom(const FundingShimCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingShimCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingShimCancel::IsInitialized() const {
  return true;
}

void FundingShimCancel::InternalSwap(FundingShimCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingShimCancel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingPsbtVerify::InitAsDefaultInstance() {
}
class FundingPsbtVerify::_Internal {
 public:
};

FundingPsbtVerify::FundingPsbtVerify()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingPsbtVerify)
}
FundingPsbtVerify::FundingPsbtVerify(const FundingPsbtVerify& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  funded_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_funded_psbt().empty()) {
    funded_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funded_psbt_);
  }
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingPsbtVerify)
}

void FundingPsbtVerify::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundingPsbtVerify_rpc_2eproto.base);
  funded_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FundingPsbtVerify::~FundingPsbtVerify() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingPsbtVerify)
  SharedDtor();
}

void FundingPsbtVerify::SharedDtor() {
  funded_psbt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FundingPsbtVerify::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingPsbtVerify& FundingPsbtVerify::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingPsbtVerify_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingPsbtVerify::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingPsbtVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  funded_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FundingPsbtVerify::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes funded_psbt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_funded_psbt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingPsbtVerify::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingPsbtVerify)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes funded_psbt = 1;
  if (this->funded_psbt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_funded_psbt(), target);
  }

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pending_chan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingPsbtVerify)
  return target;
}

size_t FundingPsbtVerify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingPsbtVerify)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes funded_psbt = 1;
  if (this->funded_psbt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_funded_psbt());
  }

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingPsbtVerify::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingPsbtVerify)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingPsbtVerify* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingPsbtVerify>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingPsbtVerify)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingPsbtVerify)
    MergeFrom(*source);
  }
}

void FundingPsbtVerify::MergeFrom(const FundingPsbtVerify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingPsbtVerify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.funded_psbt().size() > 0) {

    funded_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.funded_psbt_);
  }
  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
}

void FundingPsbtVerify::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingPsbtVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingPsbtVerify::CopyFrom(const FundingPsbtVerify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingPsbtVerify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingPsbtVerify::IsInitialized() const {
  return true;
}

void FundingPsbtVerify::InternalSwap(FundingPsbtVerify* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  funded_psbt_.Swap(&other->funded_psbt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingPsbtVerify::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingPsbtFinalize::InitAsDefaultInstance() {
}
class FundingPsbtFinalize::_Internal {
 public:
};

FundingPsbtFinalize::FundingPsbtFinalize()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingPsbtFinalize)
}
FundingPsbtFinalize::FundingPsbtFinalize(const FundingPsbtFinalize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signed_psbt().empty()) {
    signed_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signed_psbt_);
  }
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pending_chan_id().empty()) {
    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  final_raw_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_final_raw_tx().empty()) {
    final_raw_tx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.final_raw_tx_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingPsbtFinalize)
}

void FundingPsbtFinalize::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundingPsbtFinalize_rpc_2eproto.base);
  signed_psbt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  final_raw_tx_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FundingPsbtFinalize::~FundingPsbtFinalize() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingPsbtFinalize)
  SharedDtor();
}

void FundingPsbtFinalize::SharedDtor() {
  signed_psbt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  final_raw_tx_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FundingPsbtFinalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingPsbtFinalize& FundingPsbtFinalize::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingPsbtFinalize_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingPsbtFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingPsbtFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signed_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  final_raw_tx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FundingPsbtFinalize::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signed_psbt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signed_psbt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pending_chan_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pending_chan_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes final_raw_tx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_final_raw_tx();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingPsbtFinalize::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingPsbtFinalize)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signed_psbt = 1;
  if (this->signed_psbt().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signed_psbt(), target);
  }

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pending_chan_id(), target);
  }

  // bytes final_raw_tx = 3;
  if (this->final_raw_tx().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_final_raw_tx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingPsbtFinalize)
  return target;
}

size_t FundingPsbtFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingPsbtFinalize)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signed_psbt = 1;
  if (this->signed_psbt().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signed_psbt());
  }

  // bytes pending_chan_id = 2;
  if (this->pending_chan_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pending_chan_id());
  }

  // bytes final_raw_tx = 3;
  if (this->final_raw_tx().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_final_raw_tx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingPsbtFinalize::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingPsbtFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingPsbtFinalize* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingPsbtFinalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingPsbtFinalize)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingPsbtFinalize)
    MergeFrom(*source);
  }
}

void FundingPsbtFinalize::MergeFrom(const FundingPsbtFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingPsbtFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signed_psbt().size() > 0) {

    signed_psbt_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signed_psbt_);
  }
  if (from.pending_chan_id().size() > 0) {

    pending_chan_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pending_chan_id_);
  }
  if (from.final_raw_tx().size() > 0) {

    final_raw_tx_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.final_raw_tx_);
  }
}

void FundingPsbtFinalize::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingPsbtFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingPsbtFinalize::CopyFrom(const FundingPsbtFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingPsbtFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingPsbtFinalize::IsInitialized() const {
  return true;
}

void FundingPsbtFinalize::InternalSwap(FundingPsbtFinalize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signed_psbt_.Swap(&other->signed_psbt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pending_chan_id_.Swap(&other->pending_chan_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  final_raw_tx_.Swap(&other->final_raw_tx_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingPsbtFinalize::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingTransitionMsg::InitAsDefaultInstance() {
  ::lnrpc::_FundingTransitionMsg_default_instance_.shim_register_ = const_cast< ::lnrpc::FundingShim*>(
      ::lnrpc::FundingShim::internal_default_instance());
  ::lnrpc::_FundingTransitionMsg_default_instance_.shim_cancel_ = const_cast< ::lnrpc::FundingShimCancel*>(
      ::lnrpc::FundingShimCancel::internal_default_instance());
  ::lnrpc::_FundingTransitionMsg_default_instance_.psbt_verify_ = const_cast< ::lnrpc::FundingPsbtVerify*>(
      ::lnrpc::FundingPsbtVerify::internal_default_instance());
  ::lnrpc::_FundingTransitionMsg_default_instance_.psbt_finalize_ = const_cast< ::lnrpc::FundingPsbtFinalize*>(
      ::lnrpc::FundingPsbtFinalize::internal_default_instance());
}
class FundingTransitionMsg::_Internal {
 public:
  static const ::lnrpc::FundingShim& shim_register(const FundingTransitionMsg* msg);
  static const ::lnrpc::FundingShimCancel& shim_cancel(const FundingTransitionMsg* msg);
  static const ::lnrpc::FundingPsbtVerify& psbt_verify(const FundingTransitionMsg* msg);
  static const ::lnrpc::FundingPsbtFinalize& psbt_finalize(const FundingTransitionMsg* msg);
};

const ::lnrpc::FundingShim&
FundingTransitionMsg::_Internal::shim_register(const FundingTransitionMsg* msg) {
  return *msg->trigger_.shim_register_;
}
const ::lnrpc::FundingShimCancel&
FundingTransitionMsg::_Internal::shim_cancel(const FundingTransitionMsg* msg) {
  return *msg->trigger_.shim_cancel_;
}
const ::lnrpc::FundingPsbtVerify&
FundingTransitionMsg::_Internal::psbt_verify(const FundingTransitionMsg* msg) {
  return *msg->trigger_.psbt_verify_;
}
const ::lnrpc::FundingPsbtFinalize&
FundingTransitionMsg::_Internal::psbt_finalize(const FundingTransitionMsg* msg) {
  return *msg->trigger_.psbt_finalize_;
}
void FundingTransitionMsg::set_allocated_shim_register(::lnrpc::FundingShim* shim_register) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (shim_register) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shim_register = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shim_register, submessage_arena);
    }
    set_has_shim_register();
    trigger_.shim_register_ = shim_register;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingTransitionMsg.shim_register)
}
void FundingTransitionMsg::set_allocated_shim_cancel(::lnrpc::FundingShimCancel* shim_cancel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (shim_cancel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shim_cancel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shim_cancel, submessage_arena);
    }
    set_has_shim_cancel();
    trigger_.shim_cancel_ = shim_cancel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingTransitionMsg.shim_cancel)
}
void FundingTransitionMsg::set_allocated_psbt_verify(::lnrpc::FundingPsbtVerify* psbt_verify) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (psbt_verify) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psbt_verify = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psbt_verify, submessage_arena);
    }
    set_has_psbt_verify();
    trigger_.psbt_verify_ = psbt_verify;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingTransitionMsg.psbt_verify)
}
void FundingTransitionMsg::set_allocated_psbt_finalize(::lnrpc::FundingPsbtFinalize* psbt_finalize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_trigger();
  if (psbt_finalize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      psbt_finalize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psbt_finalize, submessage_arena);
    }
    set_has_psbt_finalize();
    trigger_.psbt_finalize_ = psbt_finalize;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingTransitionMsg.psbt_finalize)
}
FundingTransitionMsg::FundingTransitionMsg()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingTransitionMsg)
}
FundingTransitionMsg::FundingTransitionMsg(const FundingTransitionMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_trigger();
  switch (from.trigger_case()) {
    case kShimRegister: {
      _internal_mutable_shim_register()->::lnrpc::FundingShim::MergeFrom(from._internal_shim_register());
      break;
    }
    case kShimCancel: {
      _internal_mutable_shim_cancel()->::lnrpc::FundingShimCancel::MergeFrom(from._internal_shim_cancel());
      break;
    }
    case kPsbtVerify: {
      _internal_mutable_psbt_verify()->::lnrpc::FundingPsbtVerify::MergeFrom(from._internal_psbt_verify());
      break;
    }
    case kPsbtFinalize: {
      _internal_mutable_psbt_finalize()->::lnrpc::FundingPsbtFinalize::MergeFrom(from._internal_psbt_finalize());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingTransitionMsg)
}

void FundingTransitionMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FundingTransitionMsg_rpc_2eproto.base);
  clear_has_trigger();
}

FundingTransitionMsg::~FundingTransitionMsg() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingTransitionMsg)
  SharedDtor();
}

void FundingTransitionMsg::SharedDtor() {
  if (has_trigger()) {
    clear_trigger();
  }
}

void FundingTransitionMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingTransitionMsg& FundingTransitionMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingTransitionMsg_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingTransitionMsg::clear_trigger() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.FundingTransitionMsg)
  switch (trigger_case()) {
    case kShimRegister: {
      delete trigger_.shim_register_;
      break;
    }
    case kShimCancel: {
      delete trigger_.shim_cancel_;
      break;
    }
    case kPsbtVerify: {
      delete trigger_.psbt_verify_;
      break;
    }
    case kPsbtFinalize: {
      delete trigger_.psbt_finalize_;
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRIGGER_NOT_SET;
}


void FundingTransitionMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingTransitionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_trigger();
  _internal_metadata_.Clear();
}

const char* FundingTransitionMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.FundingShim shim_register = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shim_register(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FundingShimCancel shim_cancel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shim_cancel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FundingPsbtVerify psbt_verify = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_psbt_verify(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FundingPsbtFinalize psbt_finalize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_psbt_finalize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingTransitionMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingTransitionMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.FundingShim shim_register = 1;
  if (_internal_has_shim_register()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::shim_register(this), target, stream);
  }

  // .lnrpc.FundingShimCancel shim_cancel = 2;
  if (_internal_has_shim_cancel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shim_cancel(this), target, stream);
  }

  // .lnrpc.FundingPsbtVerify psbt_verify = 3;
  if (_internal_has_psbt_verify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::psbt_verify(this), target, stream);
  }

  // .lnrpc.FundingPsbtFinalize psbt_finalize = 4;
  if (_internal_has_psbt_finalize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::psbt_finalize(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingTransitionMsg)
  return target;
}

size_t FundingTransitionMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingTransitionMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (trigger_case()) {
    // .lnrpc.FundingShim shim_register = 1;
    case kShimRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.shim_register_);
      break;
    }
    // .lnrpc.FundingShimCancel shim_cancel = 2;
    case kShimCancel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.shim_cancel_);
      break;
    }
    // .lnrpc.FundingPsbtVerify psbt_verify = 3;
    case kPsbtVerify: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.psbt_verify_);
      break;
    }
    // .lnrpc.FundingPsbtFinalize psbt_finalize = 4;
    case kPsbtFinalize: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *trigger_.psbt_finalize_);
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingTransitionMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingTransitionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingTransitionMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingTransitionMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingTransitionMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingTransitionMsg)
    MergeFrom(*source);
  }
}

void FundingTransitionMsg::MergeFrom(const FundingTransitionMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingTransitionMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.trigger_case()) {
    case kShimRegister: {
      _internal_mutable_shim_register()->::lnrpc::FundingShim::MergeFrom(from._internal_shim_register());
      break;
    }
    case kShimCancel: {
      _internal_mutable_shim_cancel()->::lnrpc::FundingShimCancel::MergeFrom(from._internal_shim_cancel());
      break;
    }
    case kPsbtVerify: {
      _internal_mutable_psbt_verify()->::lnrpc::FundingPsbtVerify::MergeFrom(from._internal_psbt_verify());
      break;
    }
    case kPsbtFinalize: {
      _internal_mutable_psbt_finalize()->::lnrpc::FundingPsbtFinalize::MergeFrom(from._internal_psbt_finalize());
      break;
    }
    case TRIGGER_NOT_SET: {
      break;
    }
  }
}

void FundingTransitionMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingTransitionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingTransitionMsg::CopyFrom(const FundingTransitionMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingTransitionMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingTransitionMsg::IsInitialized() const {
  return true;
}

void FundingTransitionMsg::InternalSwap(FundingTransitionMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trigger_, other->trigger_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingTransitionMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FundingStateStepResp::InitAsDefaultInstance() {
}
class FundingStateStepResp::_Internal {
 public:
};

FundingStateStepResp::FundingStateStepResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FundingStateStepResp)
}
FundingStateStepResp::FundingStateStepResp(const FundingStateStepResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.FundingStateStepResp)
}

void FundingStateStepResp::SharedCtor() {
}

FundingStateStepResp::~FundingStateStepResp() {
  // @@protoc_insertion_point(destructor:lnrpc.FundingStateStepResp)
  SharedDtor();
}

void FundingStateStepResp::SharedDtor() {
}

void FundingStateStepResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FundingStateStepResp& FundingStateStepResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FundingStateStepResp_rpc_2eproto.base);
  return *internal_default_instance();
}


void FundingStateStepResp::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FundingStateStepResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FundingStateStepResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FundingStateStepResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FundingStateStepResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FundingStateStepResp)
  return target;
}

size_t FundingStateStepResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FundingStateStepResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FundingStateStepResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FundingStateStepResp)
  GOOGLE_DCHECK_NE(&from, this);
  const FundingStateStepResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FundingStateStepResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FundingStateStepResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FundingStateStepResp)
    MergeFrom(*source);
  }
}

void FundingStateStepResp::MergeFrom(const FundingStateStepResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FundingStateStepResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FundingStateStepResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FundingStateStepResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FundingStateStepResp::CopyFrom(const FundingStateStepResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FundingStateStepResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FundingStateStepResp::IsInitialized() const {
  return true;
}

void FundingStateStepResp::InternalSwap(FundingStateStepResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FundingStateStepResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingHTLC::InitAsDefaultInstance() {
}
class PendingHTLC::_Internal {
 public:
};

PendingHTLC::PendingHTLC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingHTLC)
}
PendingHTLC::PendingHTLC(const PendingHTLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  outpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_outpoint().empty()) {
    outpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outpoint_);
  }
  ::memcpy(&amount_, &from.amount_,
    static_cast<size_t>(reinterpret_cast<char*>(&stage_) -
    reinterpret_cast<char*>(&amount_)) + sizeof(stage_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingHTLC)
}

void PendingHTLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingHTLC_rpc_2eproto.base);
  outpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(stage_));
}

PendingHTLC::~PendingHTLC() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingHTLC)
  SharedDtor();
}

void PendingHTLC::SharedDtor() {
  outpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingHTLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingHTLC& PendingHTLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingHTLC_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingHTLC::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingHTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  outpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stage_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(stage_));
  _internal_metadata_.Clear();
}

const char* PendingHTLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool incoming = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          incoming_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string outpoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_outpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingHTLC.outpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maturity_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blocks_til_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blocks_til_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          stage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingHTLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingHTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool incoming = 1;
  if (this->incoming() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_incoming(), target);
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amount(), target);
  }

  // string outpoint = 3;
  if (this->outpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outpoint().data(), static_cast<int>(this->_internal_outpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingHTLC.outpoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_outpoint(), target);
  }

  // uint32 maturity_height = 4;
  if (this->maturity_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity_height(), target);
  }

  // int32 blocks_til_maturity = 5;
  if (this->blocks_til_maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_blocks_til_maturity(), target);
  }

  // uint32 stage = 6;
  if (this->stage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_stage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingHTLC)
  return target;
}

size_t PendingHTLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingHTLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string outpoint = 3;
  if (this->outpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outpoint());
  }

  // int64 amount = 2;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  // bool incoming = 1;
  if (this->incoming() != 0) {
    total_size += 1 + 1;
  }

  // uint32 maturity_height = 4;
  if (this->maturity_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity_height());
  }

  // int32 blocks_til_maturity = 5;
  if (this->blocks_til_maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocks_til_maturity());
  }

  // uint32 stage = 6;
  if (this->stage() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stage());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingHTLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingHTLC)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingHTLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingHTLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingHTLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingHTLC)
    MergeFrom(*source);
  }
}

void PendingHTLC::MergeFrom(const PendingHTLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingHTLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.outpoint().size() > 0) {

    outpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.outpoint_);
  }
  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
  if (from.incoming() != 0) {
    _internal_set_incoming(from._internal_incoming());
  }
  if (from.maturity_height() != 0) {
    _internal_set_maturity_height(from._internal_maturity_height());
  }
  if (from.blocks_til_maturity() != 0) {
    _internal_set_blocks_til_maturity(from._internal_blocks_til_maturity());
  }
  if (from.stage() != 0) {
    _internal_set_stage(from._internal_stage());
  }
}

void PendingHTLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingHTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingHTLC::CopyFrom(const PendingHTLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingHTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingHTLC::IsInitialized() const {
  return true;
}

void PendingHTLC::InternalSwap(PendingHTLC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  outpoint_.Swap(&other->outpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(incoming_, other->incoming_);
  swap(maturity_height_, other->maturity_height_);
  swap(blocks_til_maturity_, other->blocks_til_maturity_);
  swap(stage_, other->stage_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingHTLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsRequest::InitAsDefaultInstance() {
}
class PendingChannelsRequest::_Internal {
 public:
};

PendingChannelsRequest::PendingChannelsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsRequest)
}
PendingChannelsRequest::PendingChannelsRequest(const PendingChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsRequest)
}

void PendingChannelsRequest::SharedCtor() {
}

PendingChannelsRequest::~PendingChannelsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsRequest)
  SharedDtor();
}

void PendingChannelsRequest::SharedDtor() {
}

void PendingChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsRequest& PendingChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PendingChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsRequest)
  return target;
}

size_t PendingChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsRequest)
    MergeFrom(*source);
  }
}

void PendingChannelsRequest::MergeFrom(const PendingChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PendingChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsRequest::CopyFrom(const PendingChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsRequest::IsInitialized() const {
  return true;
}

void PendingChannelsRequest::InternalSwap(PendingChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_PendingChannel::InitAsDefaultInstance() {
}
class PendingChannelsResponse_PendingChannel::_Internal {
 public:
};

PendingChannelsResponse_PendingChannel::PendingChannelsResponse_PendingChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.PendingChannel)
}
PendingChannelsResponse_PendingChannel::PendingChannelsResponse_PendingChannel(const PendingChannelsResponse_PendingChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remote_node_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_node_pub().empty()) {
    remote_node_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_node_pub_);
  }
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_point().empty()) {
    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  ::memcpy(&capacity_, &from.capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitment_type_) -
    reinterpret_cast<char*>(&capacity_)) + sizeof(commitment_type_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.PendingChannel)
}

void PendingChannelsResponse_PendingChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base);
  remote_node_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitment_type_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(commitment_type_));
}

PendingChannelsResponse_PendingChannel::~PendingChannelsResponse_PendingChannel() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.PendingChannel)
  SharedDtor();
}

void PendingChannelsResponse_PendingChannel::SharedDtor() {
  remote_node_pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingChannelsResponse_PendingChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_PendingChannel& PendingChannelsResponse_PendingChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_PendingChannel_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_PendingChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.PendingChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remote_node_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitment_type_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(commitment_type_));
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_PendingChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remote_node_pub = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_remote_node_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channel_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channel_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.PendingChannel.channel_point"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remote_balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remote_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 local_chan_reserve_sat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          local_chan_reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 remote_chan_reserve_sat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          remote_chan_reserve_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Initiator initiator = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_initiator(static_cast<::lnrpc::Initiator>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.CommitmentType commitment_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_commitment_type(static_cast<::lnrpc::CommitmentType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_PendingChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.PendingChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remote_node_pub = 1;
  if (this->remote_node_pub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_node_pub().data(), static_cast<int>(this->_internal_remote_node_pub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remote_node_pub(), target);
  }

  // string channel_point = 2;
  if (this->channel_point().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_point().data(), static_cast<int>(this->_internal_channel_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.PendingChannel.channel_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channel_point(), target);
  }

  // int64 capacity = 3;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_capacity(), target);
  }

  // int64 local_balance = 4;
  if (this->local_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_local_balance(), target);
  }

  // int64 remote_balance = 5;
  if (this->remote_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_remote_balance(), target);
  }

  // int64 local_chan_reserve_sat = 6;
  if (this->local_chan_reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_local_chan_reserve_sat(), target);
  }

  // int64 remote_chan_reserve_sat = 7;
  if (this->remote_chan_reserve_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_remote_chan_reserve_sat(), target);
  }

  // .lnrpc.Initiator initiator = 8;
  if (this->initiator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_initiator(), target);
  }

  // .lnrpc.CommitmentType commitment_type = 9;
  if (this->commitment_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_commitment_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.PendingChannel)
  return target;
}

size_t PendingChannelsResponse_PendingChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.PendingChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remote_node_pub = 1;
  if (this->remote_node_pub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_node_pub());
  }

  // string channel_point = 2;
  if (this->channel_point().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_point());
  }

  // int64 capacity = 3;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // int64 local_balance = 4;
  if (this->local_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_balance());
  }

  // int64 remote_balance = 5;
  if (this->remote_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remote_balance());
  }

  // int64 local_chan_reserve_sat = 6;
  if (this->local_chan_reserve_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_local_chan_reserve_sat());
  }

  // int64 remote_chan_reserve_sat = 7;
  if (this->remote_chan_reserve_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_remote_chan_reserve_sat());
  }

  // .lnrpc.Initiator initiator = 8;
  if (this->initiator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_initiator());
  }

  // .lnrpc.CommitmentType commitment_type = 9;
  if (this->commitment_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commitment_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_PendingChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.PendingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_PendingChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_PendingChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.PendingChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.PendingChannel)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_PendingChannel::MergeFrom(const PendingChannelsResponse_PendingChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.PendingChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remote_node_pub().size() > 0) {

    remote_node_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_node_pub_);
  }
  if (from.channel_point().size() > 0) {

    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.local_balance() != 0) {
    _internal_set_local_balance(from._internal_local_balance());
  }
  if (from.remote_balance() != 0) {
    _internal_set_remote_balance(from._internal_remote_balance());
  }
  if (from.local_chan_reserve_sat() != 0) {
    _internal_set_local_chan_reserve_sat(from._internal_local_chan_reserve_sat());
  }
  if (from.remote_chan_reserve_sat() != 0) {
    _internal_set_remote_chan_reserve_sat(from._internal_remote_chan_reserve_sat());
  }
  if (from.initiator() != 0) {
    _internal_set_initiator(from._internal_initiator());
  }
  if (from.commitment_type() != 0) {
    _internal_set_commitment_type(from._internal_commitment_type());
  }
}

void PendingChannelsResponse_PendingChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.PendingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_PendingChannel::CopyFrom(const PendingChannelsResponse_PendingChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.PendingChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_PendingChannel::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_PendingChannel::InternalSwap(PendingChannelsResponse_PendingChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remote_node_pub_.Swap(&other->remote_node_pub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channel_point_.Swap(&other->channel_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(local_balance_, other->local_balance_);
  swap(remote_balance_, other->remote_balance_);
  swap(local_chan_reserve_sat_, other->local_chan_reserve_sat_);
  swap(remote_chan_reserve_sat_, other->remote_chan_reserve_sat_);
  swap(initiator_, other->initiator_);
  swap(commitment_type_, other->commitment_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_PendingChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_PendingOpenChannel::InitAsDefaultInstance() {
  ::lnrpc::_PendingChannelsResponse_PendingOpenChannel_default_instance_._instance.get_mutable()->channel_ = const_cast< ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      ::lnrpc::PendingChannelsResponse_PendingChannel::internal_default_instance());
}
class PendingChannelsResponse_PendingOpenChannel::_Internal {
 public:
  static const ::lnrpc::PendingChannelsResponse_PendingChannel& channel(const PendingChannelsResponse_PendingOpenChannel* msg);
};

const ::lnrpc::PendingChannelsResponse_PendingChannel&
PendingChannelsResponse_PendingOpenChannel::_Internal::channel(const PendingChannelsResponse_PendingOpenChannel* msg) {
  return *msg->channel_;
}
PendingChannelsResponse_PendingOpenChannel::PendingChannelsResponse_PendingOpenChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.PendingOpenChannel)
}
PendingChannelsResponse_PendingOpenChannel::PendingChannelsResponse_PendingOpenChannel(const PendingChannelsResponse_PendingOpenChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::lnrpc::PendingChannelsResponse_PendingChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&commit_fee_, &from.commit_fee_,
    static_cast<size_t>(reinterpret_cast<char*>(&confirmation_height_) -
    reinterpret_cast<char*>(&commit_fee_)) + sizeof(confirmation_height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.PendingOpenChannel)
}

void PendingChannelsResponse_PendingOpenChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmation_height_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(confirmation_height_));
}

PendingChannelsResponse_PendingOpenChannel::~PendingChannelsResponse_PendingOpenChannel() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  SharedDtor();
}

void PendingChannelsResponse_PendingOpenChannel::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
}

void PendingChannelsResponse_PendingOpenChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_PendingOpenChannel& PendingChannelsResponse_PendingOpenChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_PendingOpenChannel_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_PendingOpenChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&commit_fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&confirmation_height_) -
      reinterpret_cast<char*>(&commit_fee_)) + sizeof(confirmation_height_));
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_PendingOpenChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 confirmation_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confirmation_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 commit_fee = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          commit_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 commit_weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          commit_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_per_kw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          fee_per_kw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_PendingOpenChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // uint32 confirmation_height = 2;
  if (this->confirmation_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_confirmation_height(), target);
  }

  // int64 commit_fee = 4;
  if (this->commit_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_commit_fee(), target);
  }

  // int64 commit_weight = 5;
  if (this->commit_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_commit_weight(), target);
  }

  // int64 fee_per_kw = 6;
  if (this->fee_per_kw() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_fee_per_kw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  return target;
}

size_t PendingChannelsResponse_PendingOpenChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int64 commit_fee = 4;
  if (this->commit_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commit_fee());
  }

  // int64 commit_weight = 5;
  if (this->commit_weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_commit_weight());
  }

  // int64 fee_per_kw = 6;
  if (this->fee_per_kw() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_per_kw());
  }

  // uint32 confirmation_height = 2;
  if (this->confirmation_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_confirmation_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_PendingOpenChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_PendingOpenChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_PendingOpenChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.PendingOpenChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.PendingOpenChannel)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_PendingOpenChannel::MergeFrom(const PendingChannelsResponse_PendingOpenChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::lnrpc::PendingChannelsResponse_PendingChannel::MergeFrom(from._internal_channel());
  }
  if (from.commit_fee() != 0) {
    _internal_set_commit_fee(from._internal_commit_fee());
  }
  if (from.commit_weight() != 0) {
    _internal_set_commit_weight(from._internal_commit_weight());
  }
  if (from.fee_per_kw() != 0) {
    _internal_set_fee_per_kw(from._internal_fee_per_kw());
  }
  if (from.confirmation_height() != 0) {
    _internal_set_confirmation_height(from._internal_confirmation_height());
  }
}

void PendingChannelsResponse_PendingOpenChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_PendingOpenChannel::CopyFrom(const PendingChannelsResponse_PendingOpenChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.PendingOpenChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_PendingOpenChannel::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_PendingOpenChannel::InternalSwap(PendingChannelsResponse_PendingOpenChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
  swap(commit_fee_, other->commit_fee_);
  swap(commit_weight_, other->commit_weight_);
  swap(fee_per_kw_, other->fee_per_kw_);
  swap(confirmation_height_, other->confirmation_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_PendingOpenChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_WaitingCloseChannel::InitAsDefaultInstance() {
  ::lnrpc::_PendingChannelsResponse_WaitingCloseChannel_default_instance_._instance.get_mutable()->channel_ = const_cast< ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      ::lnrpc::PendingChannelsResponse_PendingChannel::internal_default_instance());
  ::lnrpc::_PendingChannelsResponse_WaitingCloseChannel_default_instance_._instance.get_mutable()->commitments_ = const_cast< ::lnrpc::PendingChannelsResponse_Commitments*>(
      ::lnrpc::PendingChannelsResponse_Commitments::internal_default_instance());
}
class PendingChannelsResponse_WaitingCloseChannel::_Internal {
 public:
  static const ::lnrpc::PendingChannelsResponse_PendingChannel& channel(const PendingChannelsResponse_WaitingCloseChannel* msg);
  static const ::lnrpc::PendingChannelsResponse_Commitments& commitments(const PendingChannelsResponse_WaitingCloseChannel* msg);
};

const ::lnrpc::PendingChannelsResponse_PendingChannel&
PendingChannelsResponse_WaitingCloseChannel::_Internal::channel(const PendingChannelsResponse_WaitingCloseChannel* msg) {
  return *msg->channel_;
}
const ::lnrpc::PendingChannelsResponse_Commitments&
PendingChannelsResponse_WaitingCloseChannel::_Internal::commitments(const PendingChannelsResponse_WaitingCloseChannel* msg) {
  return *msg->commitments_;
}
PendingChannelsResponse_WaitingCloseChannel::PendingChannelsResponse_WaitingCloseChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
}
PendingChannelsResponse_WaitingCloseChannel::PendingChannelsResponse_WaitingCloseChannel(const PendingChannelsResponse_WaitingCloseChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::lnrpc::PendingChannelsResponse_PendingChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  if (from._internal_has_commitments()) {
    commitments_ = new ::lnrpc::PendingChannelsResponse_Commitments(*from.commitments_);
  } else {
    commitments_ = nullptr;
  }
  limbo_balance_ = from.limbo_balance_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
}

void PendingChannelsResponse_WaitingCloseChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto.base);
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limbo_balance_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(limbo_balance_));
}

PendingChannelsResponse_WaitingCloseChannel::~PendingChannelsResponse_WaitingCloseChannel() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  SharedDtor();
}

void PendingChannelsResponse_WaitingCloseChannel::SharedDtor() {
  if (this != internal_default_instance()) delete channel_;
  if (this != internal_default_instance()) delete commitments_;
}

void PendingChannelsResponse_WaitingCloseChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_WaitingCloseChannel& PendingChannelsResponse_WaitingCloseChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_WaitingCloseChannel_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_WaitingCloseChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && commitments_ != nullptr) {
    delete commitments_;
  }
  commitments_ = nullptr;
  limbo_balance_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_WaitingCloseChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limbo_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          limbo_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.PendingChannelsResponse.Commitments commitments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commitments(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_WaitingCloseChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // int64 limbo_balance = 2;
  if (this->limbo_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_limbo_balance(), target);
  }

  // .lnrpc.PendingChannelsResponse.Commitments commitments = 3;
  if (this->has_commitments()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commitments(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  return target;
}

size_t PendingChannelsResponse_WaitingCloseChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .lnrpc.PendingChannelsResponse.Commitments commitments = 3;
  if (this->has_commitments()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commitments_);
  }

  // int64 limbo_balance = 2;
  if (this->limbo_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limbo_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_WaitingCloseChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_WaitingCloseChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_WaitingCloseChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_WaitingCloseChannel::MergeFrom(const PendingChannelsResponse_WaitingCloseChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel()) {
    _internal_mutable_channel()->::lnrpc::PendingChannelsResponse_PendingChannel::MergeFrom(from._internal_channel());
  }
  if (from.has_commitments()) {
    _internal_mutable_commitments()->::lnrpc::PendingChannelsResponse_Commitments::MergeFrom(from._internal_commitments());
  }
  if (from.limbo_balance() != 0) {
    _internal_set_limbo_balance(from._internal_limbo_balance());
  }
}

void PendingChannelsResponse_WaitingCloseChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_WaitingCloseChannel::CopyFrom(const PendingChannelsResponse_WaitingCloseChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_WaitingCloseChannel::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_WaitingCloseChannel::InternalSwap(PendingChannelsResponse_WaitingCloseChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
  swap(commitments_, other->commitments_);
  swap(limbo_balance_, other->limbo_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_WaitingCloseChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_Commitments::InitAsDefaultInstance() {
}
class PendingChannelsResponse_Commitments::_Internal {
 public:
};

PendingChannelsResponse_Commitments::PendingChannelsResponse_Commitments()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.Commitments)
}
PendingChannelsResponse_Commitments::PendingChannelsResponse_Commitments(const PendingChannelsResponse_Commitments& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  local_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_txid().empty()) {
    local_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_txid_);
  }
  remote_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_txid().empty()) {
    remote_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_txid_);
  }
  remote_pending_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_pending_txid().empty()) {
    remote_pending_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pending_txid_);
  }
  ::memcpy(&local_commit_fee_sat_, &from.local_commit_fee_sat_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_pending_commit_fee_sat_) -
    reinterpret_cast<char*>(&local_commit_fee_sat_)) + sizeof(remote_pending_commit_fee_sat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.Commitments)
}

void PendingChannelsResponse_Commitments::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_Commitments_rpc_2eproto.base);
  local_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pending_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_commit_fee_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_pending_commit_fee_sat_) -
      reinterpret_cast<char*>(&local_commit_fee_sat_)) + sizeof(remote_pending_commit_fee_sat_));
}

PendingChannelsResponse_Commitments::~PendingChannelsResponse_Commitments() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.Commitments)
  SharedDtor();
}

void PendingChannelsResponse_Commitments::SharedDtor() {
  local_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pending_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PendingChannelsResponse_Commitments::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_Commitments& PendingChannelsResponse_Commitments::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_Commitments_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_Commitments::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.Commitments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  local_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_pending_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&local_commit_fee_sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_pending_commit_fee_sat_) -
      reinterpret_cast<char*>(&local_commit_fee_sat_)) + sizeof(remote_pending_commit_fee_sat_));
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_Commitments::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string local_txid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_local_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.Commitments.local_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_remote_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.Commitments.remote_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_pending_txid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_remote_pending_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 local_commit_fee_sat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          local_commit_fee_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remote_commit_fee_sat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          remote_commit_fee_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 remote_pending_commit_fee_sat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          remote_pending_commit_fee_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_Commitments::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.Commitments)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string local_txid = 1;
  if (this->local_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_txid().data(), static_cast<int>(this->_internal_local_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.Commitments.local_txid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_local_txid(), target);
  }

  // string remote_txid = 2;
  if (this->remote_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_txid().data(), static_cast<int>(this->_internal_remote_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.Commitments.remote_txid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_remote_txid(), target);
  }

  // string remote_pending_txid = 3;
  if (this->remote_pending_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_pending_txid().data(), static_cast<int>(this->_internal_remote_pending_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_remote_pending_txid(), target);
  }

  // uint64 local_commit_fee_sat = 4;
  if (this->local_commit_fee_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_local_commit_fee_sat(), target);
  }

  // uint64 remote_commit_fee_sat = 5;
  if (this->remote_commit_fee_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_remote_commit_fee_sat(), target);
  }

  // uint64 remote_pending_commit_fee_sat = 6;
  if (this->remote_pending_commit_fee_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_remote_pending_commit_fee_sat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.Commitments)
  return target;
}

size_t PendingChannelsResponse_Commitments::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.Commitments)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_txid = 1;
  if (this->local_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_txid());
  }

  // string remote_txid = 2;
  if (this->remote_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_txid());
  }

  // string remote_pending_txid = 3;
  if (this->remote_pending_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_pending_txid());
  }

  // uint64 local_commit_fee_sat = 4;
  if (this->local_commit_fee_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_local_commit_fee_sat());
  }

  // uint64 remote_commit_fee_sat = 5;
  if (this->remote_commit_fee_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remote_commit_fee_sat());
  }

  // uint64 remote_pending_commit_fee_sat = 6;
  if (this->remote_pending_commit_fee_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_remote_pending_commit_fee_sat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_Commitments::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.Commitments)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_Commitments* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_Commitments>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.Commitments)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.Commitments)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_Commitments::MergeFrom(const PendingChannelsResponse_Commitments& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.Commitments)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.local_txid().size() > 0) {

    local_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.local_txid_);
  }
  if (from.remote_txid().size() > 0) {

    remote_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_txid_);
  }
  if (from.remote_pending_txid().size() > 0) {

    remote_pending_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_pending_txid_);
  }
  if (from.local_commit_fee_sat() != 0) {
    _internal_set_local_commit_fee_sat(from._internal_local_commit_fee_sat());
  }
  if (from.remote_commit_fee_sat() != 0) {
    _internal_set_remote_commit_fee_sat(from._internal_remote_commit_fee_sat());
  }
  if (from.remote_pending_commit_fee_sat() != 0) {
    _internal_set_remote_pending_commit_fee_sat(from._internal_remote_pending_commit_fee_sat());
  }
}

void PendingChannelsResponse_Commitments::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.Commitments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_Commitments::CopyFrom(const PendingChannelsResponse_Commitments& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.Commitments)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_Commitments::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_Commitments::InternalSwap(PendingChannelsResponse_Commitments* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  local_txid_.Swap(&other->local_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_txid_.Swap(&other->remote_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_pending_txid_.Swap(&other->remote_pending_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(local_commit_fee_sat_, other->local_commit_fee_sat_);
  swap(remote_commit_fee_sat_, other->remote_commit_fee_sat_);
  swap(remote_pending_commit_fee_sat_, other->remote_pending_commit_fee_sat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_Commitments::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_ClosedChannel::InitAsDefaultInstance() {
  ::lnrpc::_PendingChannelsResponse_ClosedChannel_default_instance_._instance.get_mutable()->channel_ = const_cast< ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      ::lnrpc::PendingChannelsResponse_PendingChannel::internal_default_instance());
}
class PendingChannelsResponse_ClosedChannel::_Internal {
 public:
  static const ::lnrpc::PendingChannelsResponse_PendingChannel& channel(const PendingChannelsResponse_ClosedChannel* msg);
};

const ::lnrpc::PendingChannelsResponse_PendingChannel&
PendingChannelsResponse_ClosedChannel::_Internal::channel(const PendingChannelsResponse_ClosedChannel* msg) {
  return *msg->channel_;
}
PendingChannelsResponse_ClosedChannel::PendingChannelsResponse_ClosedChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.ClosedChannel)
}
PendingChannelsResponse_ClosedChannel::PendingChannelsResponse_ClosedChannel(const PendingChannelsResponse_ClosedChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closing_txid().empty()) {
    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::lnrpc::PendingChannelsResponse_PendingChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.ClosedChannel)
}

void PendingChannelsResponse_ClosedChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto.base);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channel_ = nullptr;
}

PendingChannelsResponse_ClosedChannel::~PendingChannelsResponse_ClosedChannel() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.ClosedChannel)
  SharedDtor();
}

void PendingChannelsResponse_ClosedChannel::SharedDtor() {
  closing_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PendingChannelsResponse_ClosedChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_ClosedChannel& PendingChannelsResponse_ClosedChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_ClosedChannel_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_ClosedChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_ClosedChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string closing_txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_closing_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_ClosedChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // string closing_txid = 2;
  if (this->closing_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closing_txid().data(), static_cast<int>(this->_internal_closing_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_closing_txid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.ClosedChannel)
  return target;
}

size_t PendingChannelsResponse_ClosedChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string closing_txid = 2;
  if (this->closing_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closing_txid());
  }

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_ClosedChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_ClosedChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_ClosedChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.ClosedChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.ClosedChannel)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_ClosedChannel::MergeFrom(const PendingChannelsResponse_ClosedChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.closing_txid().size() > 0) {

    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::lnrpc::PendingChannelsResponse_PendingChannel::MergeFrom(from._internal_channel());
  }
}

void PendingChannelsResponse_ClosedChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_ClosedChannel::CopyFrom(const PendingChannelsResponse_ClosedChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.ClosedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_ClosedChannel::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_ClosedChannel::InternalSwap(PendingChannelsResponse_ClosedChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  closing_txid_.Swap(&other->closing_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_ClosedChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse_ForceClosedChannel::InitAsDefaultInstance() {
  ::lnrpc::_PendingChannelsResponse_ForceClosedChannel_default_instance_._instance.get_mutable()->channel_ = const_cast< ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      ::lnrpc::PendingChannelsResponse_PendingChannel::internal_default_instance());
}
class PendingChannelsResponse_ForceClosedChannel::_Internal {
 public:
  static const ::lnrpc::PendingChannelsResponse_PendingChannel& channel(const PendingChannelsResponse_ForceClosedChannel* msg);
};

const ::lnrpc::PendingChannelsResponse_PendingChannel&
PendingChannelsResponse_ForceClosedChannel::_Internal::channel(const PendingChannelsResponse_ForceClosedChannel* msg) {
  return *msg->channel_;
}
PendingChannelsResponse_ForceClosedChannel::PendingChannelsResponse_ForceClosedChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse.ForceClosedChannel)
}
PendingChannelsResponse_ForceClosedChannel::PendingChannelsResponse_ForceClosedChannel(const PendingChannelsResponse_ForceClosedChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pending_htlcs_(from.pending_htlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closing_txid().empty()) {
    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::lnrpc::PendingChannelsResponse_PendingChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  ::memcpy(&limbo_balance_, &from.limbo_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&anchor_) -
    reinterpret_cast<char*>(&limbo_balance_)) + sizeof(anchor_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse.ForceClosedChannel)
}

void PendingChannelsResponse_ForceClosedChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto.base);
  closing_txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(anchor_));
}

PendingChannelsResponse_ForceClosedChannel::~PendingChannelsResponse_ForceClosedChannel() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  SharedDtor();
}

void PendingChannelsResponse_ForceClosedChannel::SharedDtor() {
  closing_txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void PendingChannelsResponse_ForceClosedChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse_ForceClosedChannel& PendingChannelsResponse_ForceClosedChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_ForceClosedChannel_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse_ForceClosedChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_htlcs_.Clear();
  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  ::memset(&limbo_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&anchor_) -
      reinterpret_cast<char*>(&limbo_balance_)) + sizeof(anchor_));
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse_ForceClosedChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string closing_txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_closing_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limbo_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limbo_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maturity_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maturity_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 blocks_til_maturity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          blocks_til_maturity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 recovered_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          recovered_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.PendingHTLC pending_htlcs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_htlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState anchor = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_anchor(static_cast<::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse_ForceClosedChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  // string closing_txid = 2;
  if (this->closing_txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closing_txid().data(), static_cast<int>(this->_internal_closing_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_closing_txid(), target);
  }

  // int64 limbo_balance = 3;
  if (this->limbo_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limbo_balance(), target);
  }

  // uint32 maturity_height = 4;
  if (this->maturity_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maturity_height(), target);
  }

  // int32 blocks_til_maturity = 5;
  if (this->blocks_til_maturity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_blocks_til_maturity(), target);
  }

  // int64 recovered_balance = 6;
  if (this->recovered_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_recovered_balance(), target);
  }

  // repeated .lnrpc.PendingHTLC pending_htlcs = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_htlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pending_htlcs(i), target, stream);
  }

  // .lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState anchor = 9;
  if (this->anchor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_anchor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  return target;
}

size_t PendingChannelsResponse_ForceClosedChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.PendingHTLC pending_htlcs = 8;
  total_size += 1UL * this->_internal_pending_htlcs_size();
  for (const auto& msg : this->pending_htlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string closing_txid = 2;
  if (this->closing_txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closing_txid());
  }

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int64 limbo_balance = 3;
  if (this->limbo_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limbo_balance());
  }

  // uint32 maturity_height = 4;
  if (this->maturity_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maturity_height());
  }

  // int32 blocks_til_maturity = 5;
  if (this->blocks_til_maturity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_blocks_til_maturity());
  }

  // int64 recovered_balance = 6;
  if (this->recovered_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_recovered_balance());
  }

  // .lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState anchor = 9;
  if (this->anchor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_anchor());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse_ForceClosedChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse_ForceClosedChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse_ForceClosedChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse.ForceClosedChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse.ForceClosedChannel)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse_ForceClosedChannel::MergeFrom(const PendingChannelsResponse_ForceClosedChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_htlcs_.MergeFrom(from.pending_htlcs_);
  if (from.closing_txid().size() > 0) {

    closing_txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closing_txid_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::lnrpc::PendingChannelsResponse_PendingChannel::MergeFrom(from._internal_channel());
  }
  if (from.limbo_balance() != 0) {
    _internal_set_limbo_balance(from._internal_limbo_balance());
  }
  if (from.maturity_height() != 0) {
    _internal_set_maturity_height(from._internal_maturity_height());
  }
  if (from.blocks_til_maturity() != 0) {
    _internal_set_blocks_til_maturity(from._internal_blocks_til_maturity());
  }
  if (from.recovered_balance() != 0) {
    _internal_set_recovered_balance(from._internal_recovered_balance());
  }
  if (from.anchor() != 0) {
    _internal_set_anchor(from._internal_anchor());
  }
}

void PendingChannelsResponse_ForceClosedChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse_ForceClosedChannel::CopyFrom(const PendingChannelsResponse_ForceClosedChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse.ForceClosedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse_ForceClosedChannel::IsInitialized() const {
  return true;
}

void PendingChannelsResponse_ForceClosedChannel::InternalSwap(PendingChannelsResponse_ForceClosedChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_htlcs_.InternalSwap(&other->pending_htlcs_);
  closing_txid_.Swap(&other->closing_txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(limbo_balance_, other->limbo_balance_);
  swap(maturity_height_, other->maturity_height_);
  swap(blocks_til_maturity_, other->blocks_til_maturity_);
  swap(recovered_balance_, other->recovered_balance_);
  swap(anchor_, other->anchor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse_ForceClosedChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PendingChannelsResponse::InitAsDefaultInstance() {
}
class PendingChannelsResponse::_Internal {
 public:
};

PendingChannelsResponse::PendingChannelsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PendingChannelsResponse)
}
PendingChannelsResponse::PendingChannelsResponse(const PendingChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pending_open_channels_(from.pending_open_channels_),
      pending_closing_channels_(from.pending_closing_channels_),
      pending_force_closing_channels_(from.pending_force_closing_channels_),
      waiting_close_channels_(from.waiting_close_channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_limbo_balance_ = from.total_limbo_balance_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.PendingChannelsResponse)
}

void PendingChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PendingChannelsResponse_rpc_2eproto.base);
  total_limbo_balance_ = PROTOBUF_LONGLONG(0);
}

PendingChannelsResponse::~PendingChannelsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.PendingChannelsResponse)
  SharedDtor();
}

void PendingChannelsResponse::SharedDtor() {
}

void PendingChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PendingChannelsResponse& PendingChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PendingChannelsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void PendingChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PendingChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pending_open_channels_.Clear();
  pending_closing_channels_.Clear();
  pending_force_closing_channels_.Clear();
  waiting_close_channels_.Clear();
  total_limbo_balance_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* PendingChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total_limbo_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_limbo_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_open_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_closing_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pending_force_closing_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waiting_close_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PendingChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PendingChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_limbo_balance = 1;
  if (this->total_limbo_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_limbo_balance(), target);
  }

  // repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_open_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pending_open_channels(i), target, stream);
  }

  // repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_closing_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pending_closing_channels(i), target, stream);
  }

  // repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pending_force_closing_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_pending_force_closing_channels(i), target, stream);
  }

  // repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waiting_close_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_waiting_close_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PendingChannelsResponse)
  return target;
}

size_t PendingChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PendingChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;
  total_size += 1UL * this->_internal_pending_open_channels_size();
  for (const auto& msg : this->pending_open_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3 [deprecated = true];
  total_size += 1UL * this->_internal_pending_closing_channels_size();
  for (const auto& msg : this->pending_closing_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;
  total_size += 1UL * this->_internal_pending_force_closing_channels_size();
  for (const auto& msg : this->pending_force_closing_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;
  total_size += 1UL * this->_internal_waiting_close_channels_size();
  for (const auto& msg : this->waiting_close_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 total_limbo_balance = 1;
  if (this->total_limbo_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_limbo_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PendingChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PendingChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PendingChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PendingChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PendingChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PendingChannelsResponse)
    MergeFrom(*source);
  }
}

void PendingChannelsResponse::MergeFrom(const PendingChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PendingChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pending_open_channels_.MergeFrom(from.pending_open_channels_);
  pending_closing_channels_.MergeFrom(from.pending_closing_channels_);
  pending_force_closing_channels_.MergeFrom(from.pending_force_closing_channels_);
  waiting_close_channels_.MergeFrom(from.waiting_close_channels_);
  if (from.total_limbo_balance() != 0) {
    _internal_set_total_limbo_balance(from._internal_total_limbo_balance());
  }
}

void PendingChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PendingChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PendingChannelsResponse::CopyFrom(const PendingChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PendingChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PendingChannelsResponse::IsInitialized() const {
  return true;
}

void PendingChannelsResponse::InternalSwap(PendingChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pending_open_channels_.InternalSwap(&other->pending_open_channels_);
  pending_closing_channels_.InternalSwap(&other->pending_closing_channels_);
  pending_force_closing_channels_.InternalSwap(&other->pending_force_closing_channels_);
  waiting_close_channels_.InternalSwap(&other->waiting_close_channels_);
  swap(total_limbo_balance_, other->total_limbo_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PendingChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelEventSubscription::InitAsDefaultInstance() {
}
class ChannelEventSubscription::_Internal {
 public:
};

ChannelEventSubscription::ChannelEventSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelEventSubscription)
}
ChannelEventSubscription::ChannelEventSubscription(const ChannelEventSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelEventSubscription)
}

void ChannelEventSubscription::SharedCtor() {
}

ChannelEventSubscription::~ChannelEventSubscription() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelEventSubscription)
  SharedDtor();
}

void ChannelEventSubscription::SharedDtor() {
}

void ChannelEventSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelEventSubscription& ChannelEventSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelEventSubscription_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelEventSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelEventSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ChannelEventSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelEventSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelEventSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelEventSubscription)
  return target;
}

size_t ChannelEventSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelEventSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelEventSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelEventSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelEventSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelEventSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelEventSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelEventSubscription)
    MergeFrom(*source);
  }
}

void ChannelEventSubscription::MergeFrom(const ChannelEventSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelEventSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelEventSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelEventSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelEventSubscription::CopyFrom(const ChannelEventSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelEventSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelEventSubscription::IsInitialized() const {
  return true;
}

void ChannelEventSubscription::InternalSwap(ChannelEventSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelEventSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelEventUpdate::InitAsDefaultInstance() {
  ::lnrpc::_ChannelEventUpdate_default_instance_.open_channel_ = const_cast< ::lnrpc::Channel*>(
      ::lnrpc::Channel::internal_default_instance());
  ::lnrpc::_ChannelEventUpdate_default_instance_.closed_channel_ = const_cast< ::lnrpc::ChannelCloseSummary*>(
      ::lnrpc::ChannelCloseSummary::internal_default_instance());
  ::lnrpc::_ChannelEventUpdate_default_instance_.active_channel_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
  ::lnrpc::_ChannelEventUpdate_default_instance_.inactive_channel_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
  ::lnrpc::_ChannelEventUpdate_default_instance_.pending_open_channel_ = const_cast< ::lnrpc::PendingUpdate*>(
      ::lnrpc::PendingUpdate::internal_default_instance());
}
class ChannelEventUpdate::_Internal {
 public:
  static const ::lnrpc::Channel& open_channel(const ChannelEventUpdate* msg);
  static const ::lnrpc::ChannelCloseSummary& closed_channel(const ChannelEventUpdate* msg);
  static const ::lnrpc::ChannelPoint& active_channel(const ChannelEventUpdate* msg);
  static const ::lnrpc::ChannelPoint& inactive_channel(const ChannelEventUpdate* msg);
  static const ::lnrpc::PendingUpdate& pending_open_channel(const ChannelEventUpdate* msg);
};

const ::lnrpc::Channel&
ChannelEventUpdate::_Internal::open_channel(const ChannelEventUpdate* msg) {
  return *msg->channel_.open_channel_;
}
const ::lnrpc::ChannelCloseSummary&
ChannelEventUpdate::_Internal::closed_channel(const ChannelEventUpdate* msg) {
  return *msg->channel_.closed_channel_;
}
const ::lnrpc::ChannelPoint&
ChannelEventUpdate::_Internal::active_channel(const ChannelEventUpdate* msg) {
  return *msg->channel_.active_channel_;
}
const ::lnrpc::ChannelPoint&
ChannelEventUpdate::_Internal::inactive_channel(const ChannelEventUpdate* msg) {
  return *msg->channel_.inactive_channel_;
}
const ::lnrpc::PendingUpdate&
ChannelEventUpdate::_Internal::pending_open_channel(const ChannelEventUpdate* msg) {
  return *msg->channel_.pending_open_channel_;
}
void ChannelEventUpdate::set_allocated_open_channel(::lnrpc::Channel* open_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel();
  if (open_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_channel, submessage_arena);
    }
    set_has_open_channel();
    channel_.open_channel_ = open_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEventUpdate.open_channel)
}
void ChannelEventUpdate::set_allocated_closed_channel(::lnrpc::ChannelCloseSummary* closed_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel();
  if (closed_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      closed_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, closed_channel, submessage_arena);
    }
    set_has_closed_channel();
    channel_.closed_channel_ = closed_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEventUpdate.closed_channel)
}
void ChannelEventUpdate::set_allocated_active_channel(::lnrpc::ChannelPoint* active_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel();
  if (active_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      active_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active_channel, submessage_arena);
    }
    set_has_active_channel();
    channel_.active_channel_ = active_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEventUpdate.active_channel)
}
void ChannelEventUpdate::set_allocated_inactive_channel(::lnrpc::ChannelPoint* inactive_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel();
  if (inactive_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      inactive_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inactive_channel, submessage_arena);
    }
    set_has_inactive_channel();
    channel_.inactive_channel_ = inactive_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEventUpdate.inactive_channel)
}
void ChannelEventUpdate::set_allocated_pending_open_channel(::lnrpc::PendingUpdate* pending_open_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_channel();
  if (pending_open_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_open_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_open_channel, submessage_arena);
    }
    set_has_pending_open_channel();
    channel_.pending_open_channel_ = pending_open_channel;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEventUpdate.pending_open_channel)
}
ChannelEventUpdate::ChannelEventUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelEventUpdate)
}
ChannelEventUpdate::ChannelEventUpdate(const ChannelEventUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  clear_has_channel();
  switch (from.channel_case()) {
    case kOpenChannel: {
      _internal_mutable_open_channel()->::lnrpc::Channel::MergeFrom(from._internal_open_channel());
      break;
    }
    case kClosedChannel: {
      _internal_mutable_closed_channel()->::lnrpc::ChannelCloseSummary::MergeFrom(from._internal_closed_channel());
      break;
    }
    case kActiveChannel: {
      _internal_mutable_active_channel()->::lnrpc::ChannelPoint::MergeFrom(from._internal_active_channel());
      break;
    }
    case kInactiveChannel: {
      _internal_mutable_inactive_channel()->::lnrpc::ChannelPoint::MergeFrom(from._internal_inactive_channel());
      break;
    }
    case kPendingOpenChannel: {
      _internal_mutable_pending_open_channel()->::lnrpc::PendingUpdate::MergeFrom(from._internal_pending_open_channel());
      break;
    }
    case CHANNEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelEventUpdate)
}

void ChannelEventUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelEventUpdate_rpc_2eproto.base);
  type_ = 0;
  clear_has_channel();
}

ChannelEventUpdate::~ChannelEventUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelEventUpdate)
  SharedDtor();
}

void ChannelEventUpdate::SharedDtor() {
  if (has_channel()) {
    clear_channel();
  }
}

void ChannelEventUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelEventUpdate& ChannelEventUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelEventUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelEventUpdate::clear_channel() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.ChannelEventUpdate)
  switch (channel_case()) {
    case kOpenChannel: {
      delete channel_.open_channel_;
      break;
    }
    case kClosedChannel: {
      delete channel_.closed_channel_;
      break;
    }
    case kActiveChannel: {
      delete channel_.active_channel_;
      break;
    }
    case kInactiveChannel: {
      delete channel_.inactive_channel_;
      break;
    }
    case kPendingOpenChannel: {
      delete channel_.pending_open_channel_;
      break;
    }
    case CHANNEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CHANNEL_NOT_SET;
}


void ChannelEventUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelEventUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_channel();
  _internal_metadata_.Clear();
}

const char* ChannelEventUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.Channel open_channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelCloseSummary closed_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_closed_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint active_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_active_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint inactive_channel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inactive_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelEventUpdate.UpdateType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::lnrpc::ChannelEventUpdate_UpdateType>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.PendingUpdate pending_open_channel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_open_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelEventUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelEventUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.Channel open_channel = 1;
  if (_internal_has_open_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::open_channel(this), target, stream);
  }

  // .lnrpc.ChannelCloseSummary closed_channel = 2;
  if (_internal_has_closed_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::closed_channel(this), target, stream);
  }

  // .lnrpc.ChannelPoint active_channel = 3;
  if (_internal_has_active_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::active_channel(this), target, stream);
  }

  // .lnrpc.ChannelPoint inactive_channel = 4;
  if (_internal_has_inactive_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::inactive_channel(this), target, stream);
  }

  // .lnrpc.ChannelEventUpdate.UpdateType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .lnrpc.PendingUpdate pending_open_channel = 6;
  if (_internal_has_pending_open_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pending_open_channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelEventUpdate)
  return target;
}

size_t ChannelEventUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelEventUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelEventUpdate.UpdateType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (channel_case()) {
    // .lnrpc.Channel open_channel = 1;
    case kOpenChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_.open_channel_);
      break;
    }
    // .lnrpc.ChannelCloseSummary closed_channel = 2;
    case kClosedChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_.closed_channel_);
      break;
    }
    // .lnrpc.ChannelPoint active_channel = 3;
    case kActiveChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_.active_channel_);
      break;
    }
    // .lnrpc.ChannelPoint inactive_channel = 4;
    case kInactiveChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_.inactive_channel_);
      break;
    }
    // .lnrpc.PendingUpdate pending_open_channel = 6;
    case kPendingOpenChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *channel_.pending_open_channel_);
      break;
    }
    case CHANNEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelEventUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelEventUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelEventUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelEventUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelEventUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelEventUpdate)
    MergeFrom(*source);
  }
}

void ChannelEventUpdate::MergeFrom(const ChannelEventUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelEventUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.channel_case()) {
    case kOpenChannel: {
      _internal_mutable_open_channel()->::lnrpc::Channel::MergeFrom(from._internal_open_channel());
      break;
    }
    case kClosedChannel: {
      _internal_mutable_closed_channel()->::lnrpc::ChannelCloseSummary::MergeFrom(from._internal_closed_channel());
      break;
    }
    case kActiveChannel: {
      _internal_mutable_active_channel()->::lnrpc::ChannelPoint::MergeFrom(from._internal_active_channel());
      break;
    }
    case kInactiveChannel: {
      _internal_mutable_inactive_channel()->::lnrpc::ChannelPoint::MergeFrom(from._internal_inactive_channel());
      break;
    }
    case kPendingOpenChannel: {
      _internal_mutable_pending_open_channel()->::lnrpc::PendingUpdate::MergeFrom(from._internal_pending_open_channel());
      break;
    }
    case CHANNEL_NOT_SET: {
      break;
    }
  }
}

void ChannelEventUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelEventUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelEventUpdate::CopyFrom(const ChannelEventUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelEventUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelEventUpdate::IsInitialized() const {
  return true;
}

void ChannelEventUpdate::InternalSwap(ChannelEventUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(channel_, other->channel_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelEventUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WalletAccountBalance::InitAsDefaultInstance() {
}
class WalletAccountBalance::_Internal {
 public:
};

WalletAccountBalance::WalletAccountBalance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.WalletAccountBalance)
}
WalletAccountBalance::WalletAccountBalance(const WalletAccountBalance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&confirmed_balance_, &from.confirmed_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&unconfirmed_balance_) -
    reinterpret_cast<char*>(&confirmed_balance_)) + sizeof(unconfirmed_balance_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.WalletAccountBalance)
}

void WalletAccountBalance::SharedCtor() {
  ::memset(&confirmed_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmed_balance_) -
      reinterpret_cast<char*>(&confirmed_balance_)) + sizeof(unconfirmed_balance_));
}

WalletAccountBalance::~WalletAccountBalance() {
  // @@protoc_insertion_point(destructor:lnrpc.WalletAccountBalance)
  SharedDtor();
}

void WalletAccountBalance::SharedDtor() {
}

void WalletAccountBalance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletAccountBalance& WalletAccountBalance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletAccountBalance_rpc_2eproto.base);
  return *internal_default_instance();
}


void WalletAccountBalance::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.WalletAccountBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confirmed_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmed_balance_) -
      reinterpret_cast<char*>(&confirmed_balance_)) + sizeof(unconfirmed_balance_));
  _internal_metadata_.Clear();
}

const char* WalletAccountBalance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 confirmed_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confirmed_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unconfirmed_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          unconfirmed_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalletAccountBalance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.WalletAccountBalance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 confirmed_balance = 1;
  if (this->confirmed_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_confirmed_balance(), target);
  }

  // int64 unconfirmed_balance = 2;
  if (this->unconfirmed_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_unconfirmed_balance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.WalletAccountBalance)
  return target;
}

size_t WalletAccountBalance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.WalletAccountBalance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 confirmed_balance = 1;
  if (this->confirmed_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_confirmed_balance());
  }

  // int64 unconfirmed_balance = 2;
  if (this->unconfirmed_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unconfirmed_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletAccountBalance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.WalletAccountBalance)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletAccountBalance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WalletAccountBalance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.WalletAccountBalance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.WalletAccountBalance)
    MergeFrom(*source);
  }
}

void WalletAccountBalance::MergeFrom(const WalletAccountBalance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.WalletAccountBalance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confirmed_balance() != 0) {
    _internal_set_confirmed_balance(from._internal_confirmed_balance());
  }
  if (from.unconfirmed_balance() != 0) {
    _internal_set_unconfirmed_balance(from._internal_unconfirmed_balance());
  }
}

void WalletAccountBalance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.WalletAccountBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletAccountBalance::CopyFrom(const WalletAccountBalance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.WalletAccountBalance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletAccountBalance::IsInitialized() const {
  return true;
}

void WalletAccountBalance::InternalSwap(WalletAccountBalance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confirmed_balance_, other->confirmed_balance_);
  swap(unconfirmed_balance_, other->unconfirmed_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletAccountBalance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WalletBalanceRequest::InitAsDefaultInstance() {
}
class WalletBalanceRequest::_Internal {
 public:
};

WalletBalanceRequest::WalletBalanceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.WalletBalanceRequest)
}
WalletBalanceRequest::WalletBalanceRequest(const WalletBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.WalletBalanceRequest)
}

void WalletBalanceRequest::SharedCtor() {
}

WalletBalanceRequest::~WalletBalanceRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.WalletBalanceRequest)
  SharedDtor();
}

void WalletBalanceRequest::SharedDtor() {
}

void WalletBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletBalanceRequest& WalletBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletBalanceRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void WalletBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.WalletBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* WalletBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalletBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.WalletBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.WalletBalanceRequest)
  return target;
}

size_t WalletBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.WalletBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.WalletBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WalletBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.WalletBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.WalletBalanceRequest)
    MergeFrom(*source);
  }
}

void WalletBalanceRequest::MergeFrom(const WalletBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.WalletBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void WalletBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.WalletBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletBalanceRequest::CopyFrom(const WalletBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.WalletBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletBalanceRequest::IsInitialized() const {
  return true;
}

void WalletBalanceRequest::InternalSwap(WalletBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

WalletBalanceResponse_AccountBalanceEntry_DoNotUse::WalletBalanceResponse_AccountBalanceEntry_DoNotUse() {}
WalletBalanceResponse_AccountBalanceEntry_DoNotUse::WalletBalanceResponse_AccountBalanceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WalletBalanceResponse_AccountBalanceEntry_DoNotUse::MergeFrom(const WalletBalanceResponse_AccountBalanceEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WalletBalanceResponse_AccountBalanceEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WalletBalanceResponse_AccountBalanceEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void WalletBalanceResponse::InitAsDefaultInstance() {
}
class WalletBalanceResponse::_Internal {
 public:
};

WalletBalanceResponse::WalletBalanceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.WalletBalanceResponse)
}
WalletBalanceResponse::WalletBalanceResponse(const WalletBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_balance_.MergeFrom(from.account_balance_);
  ::memcpy(&total_balance_, &from.total_balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&unconfirmed_balance_) -
    reinterpret_cast<char*>(&total_balance_)) + sizeof(unconfirmed_balance_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.WalletBalanceResponse)
}

void WalletBalanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WalletBalanceResponse_rpc_2eproto.base);
  ::memset(&total_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmed_balance_) -
      reinterpret_cast<char*>(&total_balance_)) + sizeof(unconfirmed_balance_));
}

WalletBalanceResponse::~WalletBalanceResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.WalletBalanceResponse)
  SharedDtor();
}

void WalletBalanceResponse::SharedDtor() {
}

void WalletBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WalletBalanceResponse& WalletBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WalletBalanceResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void WalletBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.WalletBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_balance_.Clear();
  ::memset(&total_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unconfirmed_balance_) -
      reinterpret_cast<char*>(&total_balance_)) + sizeof(unconfirmed_balance_));
  _internal_metadata_.Clear();
}

const char* WalletBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total_balance = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 confirmed_balance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          confirmed_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 unconfirmed_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unconfirmed_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .lnrpc.WalletAccountBalance> account_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&account_balance_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WalletBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.WalletBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_balance = 1;
  if (this->total_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_total_balance(), target);
  }

  // int64 confirmed_balance = 2;
  if (this->confirmed_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_confirmed_balance(), target);
  }

  // int64 unconfirmed_balance = 3;
  if (this->unconfirmed_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_unconfirmed_balance(), target);
  }

  // map<string, .lnrpc.WalletAccountBalance> account_balance = 4;
  if (!this->_internal_account_balance().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lnrpc.WalletBalanceResponse.AccountBalanceEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_account_balance().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_account_balance().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >::const_iterator
          it = this->_internal_account_balance().begin();
          it != this->_internal_account_balance().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WalletBalanceResponse_AccountBalanceEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >::const_iterator
          it = this->_internal_account_balance().begin();
          it != this->_internal_account_balance().end(); ++it) {
        target = WalletBalanceResponse_AccountBalanceEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.WalletBalanceResponse)
  return target;
}

size_t WalletBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.WalletBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .lnrpc.WalletAccountBalance> account_balance = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_account_balance_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >::const_iterator
      it = this->_internal_account_balance().begin();
      it != this->_internal_account_balance().end(); ++it) {
    total_size += WalletBalanceResponse_AccountBalanceEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int64 total_balance = 1;
  if (this->total_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_balance());
  }

  // int64 confirmed_balance = 2;
  if (this->confirmed_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_confirmed_balance());
  }

  // int64 unconfirmed_balance = 3;
  if (this->unconfirmed_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_unconfirmed_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WalletBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.WalletBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const WalletBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WalletBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.WalletBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.WalletBalanceResponse)
    MergeFrom(*source);
  }
}

void WalletBalanceResponse::MergeFrom(const WalletBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.WalletBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_balance_.MergeFrom(from.account_balance_);
  if (from.total_balance() != 0) {
    _internal_set_total_balance(from._internal_total_balance());
  }
  if (from.confirmed_balance() != 0) {
    _internal_set_confirmed_balance(from._internal_confirmed_balance());
  }
  if (from.unconfirmed_balance() != 0) {
    _internal_set_unconfirmed_balance(from._internal_unconfirmed_balance());
  }
}

void WalletBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.WalletBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WalletBalanceResponse::CopyFrom(const WalletBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.WalletBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WalletBalanceResponse::IsInitialized() const {
  return true;
}

void WalletBalanceResponse::InternalSwap(WalletBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  account_balance_.Swap(&other->account_balance_);
  swap(total_balance_, other->total_balance_);
  swap(confirmed_balance_, other->confirmed_balance_);
  swap(unconfirmed_balance_, other->unconfirmed_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WalletBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Amount::InitAsDefaultInstance() {
}
class Amount::_Internal {
 public:
};

Amount::Amount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Amount)
}
Amount::Amount(const Amount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sat_, &from.sat_,
    static_cast<size_t>(reinterpret_cast<char*>(&msat_) -
    reinterpret_cast<char*>(&sat_)) + sizeof(msat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Amount)
}

void Amount::SharedCtor() {
  ::memset(&sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msat_) -
      reinterpret_cast<char*>(&sat_)) + sizeof(msat_));
}

Amount::~Amount() {
  // @@protoc_insertion_point(destructor:lnrpc.Amount)
  SharedDtor();
}

void Amount::SharedDtor() {
}

void Amount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Amount& Amount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Amount_rpc_2eproto.base);
  return *internal_default_instance();
}


void Amount::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msat_) -
      reinterpret_cast<char*>(&sat_)) + sizeof(msat_));
  _internal_metadata_.Clear();
}

const char* Amount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 sat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 msat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Amount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Amount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 sat = 1;
  if (this->sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_sat(), target);
  }

  // uint64 msat = 2;
  if (this->msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Amount)
  return target;
}

size_t Amount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Amount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 sat = 1;
  if (this->sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_sat());
  }

  // uint64 msat = 2;
  if (this->msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Amount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  const Amount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Amount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Amount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Amount)
    MergeFrom(*source);
  }
}

void Amount::MergeFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Amount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sat() != 0) {
    _internal_set_sat(from._internal_sat());
  }
  if (from.msat() != 0) {
    _internal_set_msat(from._internal_msat());
  }
}

void Amount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Amount::CopyFrom(const Amount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Amount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Amount::IsInitialized() const {
  return true;
}

void Amount::InternalSwap(Amount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sat_, other->sat_);
  swap(msat_, other->msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Amount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBalanceRequest::InitAsDefaultInstance() {
}
class ChannelBalanceRequest::_Internal {
 public:
};

ChannelBalanceRequest::ChannelBalanceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelBalanceRequest)
}
ChannelBalanceRequest::ChannelBalanceRequest(const ChannelBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelBalanceRequest)
}

void ChannelBalanceRequest::SharedCtor() {
}

ChannelBalanceRequest::~ChannelBalanceRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelBalanceRequest)
  SharedDtor();
}

void ChannelBalanceRequest::SharedDtor() {
}

void ChannelBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBalanceRequest& ChannelBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBalanceRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ChannelBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelBalanceRequest)
  return target;
}

size_t ChannelBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelBalanceRequest)
    MergeFrom(*source);
  }
}

void ChannelBalanceRequest::MergeFrom(const ChannelBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBalanceRequest::CopyFrom(const ChannelBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBalanceRequest::IsInitialized() const {
  return true;
}

void ChannelBalanceRequest::InternalSwap(ChannelBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBalanceResponse::InitAsDefaultInstance() {
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->local_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->remote_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->unsettled_local_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->unsettled_remote_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->pending_open_local_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
  ::lnrpc::_ChannelBalanceResponse_default_instance_._instance.get_mutable()->pending_open_remote_balance_ = const_cast< ::lnrpc::Amount*>(
      ::lnrpc::Amount::internal_default_instance());
}
class ChannelBalanceResponse::_Internal {
 public:
  static const ::lnrpc::Amount& local_balance(const ChannelBalanceResponse* msg);
  static const ::lnrpc::Amount& remote_balance(const ChannelBalanceResponse* msg);
  static const ::lnrpc::Amount& unsettled_local_balance(const ChannelBalanceResponse* msg);
  static const ::lnrpc::Amount& unsettled_remote_balance(const ChannelBalanceResponse* msg);
  static const ::lnrpc::Amount& pending_open_local_balance(const ChannelBalanceResponse* msg);
  static const ::lnrpc::Amount& pending_open_remote_balance(const ChannelBalanceResponse* msg);
};

const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::local_balance(const ChannelBalanceResponse* msg) {
  return *msg->local_balance_;
}
const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::remote_balance(const ChannelBalanceResponse* msg) {
  return *msg->remote_balance_;
}
const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::unsettled_local_balance(const ChannelBalanceResponse* msg) {
  return *msg->unsettled_local_balance_;
}
const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::unsettled_remote_balance(const ChannelBalanceResponse* msg) {
  return *msg->unsettled_remote_balance_;
}
const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::pending_open_local_balance(const ChannelBalanceResponse* msg) {
  return *msg->pending_open_local_balance_;
}
const ::lnrpc::Amount&
ChannelBalanceResponse::_Internal::pending_open_remote_balance(const ChannelBalanceResponse* msg) {
  return *msg->pending_open_remote_balance_;
}
ChannelBalanceResponse::ChannelBalanceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelBalanceResponse)
}
ChannelBalanceResponse::ChannelBalanceResponse(const ChannelBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_local_balance()) {
    local_balance_ = new ::lnrpc::Amount(*from.local_balance_);
  } else {
    local_balance_ = nullptr;
  }
  if (from._internal_has_remote_balance()) {
    remote_balance_ = new ::lnrpc::Amount(*from.remote_balance_);
  } else {
    remote_balance_ = nullptr;
  }
  if (from._internal_has_unsettled_local_balance()) {
    unsettled_local_balance_ = new ::lnrpc::Amount(*from.unsettled_local_balance_);
  } else {
    unsettled_local_balance_ = nullptr;
  }
  if (from._internal_has_unsettled_remote_balance()) {
    unsettled_remote_balance_ = new ::lnrpc::Amount(*from.unsettled_remote_balance_);
  } else {
    unsettled_remote_balance_ = nullptr;
  }
  if (from._internal_has_pending_open_local_balance()) {
    pending_open_local_balance_ = new ::lnrpc::Amount(*from.pending_open_local_balance_);
  } else {
    pending_open_local_balance_ = nullptr;
  }
  if (from._internal_has_pending_open_remote_balance()) {
    pending_open_remote_balance_ = new ::lnrpc::Amount(*from.pending_open_remote_balance_);
  } else {
    pending_open_remote_balance_ = nullptr;
  }
  ::memcpy(&balance_, &from.balance_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_open_balance_) -
    reinterpret_cast<char*>(&balance_)) + sizeof(pending_open_balance_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelBalanceResponse)
}

void ChannelBalanceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelBalanceResponse_rpc_2eproto.base);
  ::memset(&local_balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_open_balance_) -
      reinterpret_cast<char*>(&local_balance_)) + sizeof(pending_open_balance_));
}

ChannelBalanceResponse::~ChannelBalanceResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelBalanceResponse)
  SharedDtor();
}

void ChannelBalanceResponse::SharedDtor() {
  if (this != internal_default_instance()) delete local_balance_;
  if (this != internal_default_instance()) delete remote_balance_;
  if (this != internal_default_instance()) delete unsettled_local_balance_;
  if (this != internal_default_instance()) delete unsettled_remote_balance_;
  if (this != internal_default_instance()) delete pending_open_local_balance_;
  if (this != internal_default_instance()) delete pending_open_remote_balance_;
}

void ChannelBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBalanceResponse& ChannelBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBalanceResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && local_balance_ != nullptr) {
    delete local_balance_;
  }
  local_balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && remote_balance_ != nullptr) {
    delete remote_balance_;
  }
  remote_balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unsettled_local_balance_ != nullptr) {
    delete unsettled_local_balance_;
  }
  unsettled_local_balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && unsettled_remote_balance_ != nullptr) {
    delete unsettled_remote_balance_;
  }
  unsettled_remote_balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pending_open_local_balance_ != nullptr) {
    delete pending_open_local_balance_;
  }
  pending_open_local_balance_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && pending_open_remote_balance_ != nullptr) {
    delete pending_open_remote_balance_;
  }
  pending_open_remote_balance_ = nullptr;
  ::memset(&balance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_open_balance_) -
      reinterpret_cast<char*>(&balance_)) + sizeof(pending_open_balance_));
  _internal_metadata_.Clear();
}

const char* ChannelBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 balance = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pending_open_balance = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_open_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount local_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount remote_balance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount unsettled_local_balance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsettled_local_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount unsettled_remote_balance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsettled_remote_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount pending_open_local_balance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_open_local_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Amount pending_open_remote_balance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_open_remote_balance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 balance = 1 [deprecated = true];
  if (this->balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_balance(), target);
  }

  // int64 pending_open_balance = 2 [deprecated = true];
  if (this->pending_open_balance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_pending_open_balance(), target);
  }

  // .lnrpc.Amount local_balance = 3;
  if (this->has_local_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::local_balance(this), target, stream);
  }

  // .lnrpc.Amount remote_balance = 4;
  if (this->has_remote_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::remote_balance(this), target, stream);
  }

  // .lnrpc.Amount unsettled_local_balance = 5;
  if (this->has_unsettled_local_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::unsettled_local_balance(this), target, stream);
  }

  // .lnrpc.Amount unsettled_remote_balance = 6;
  if (this->has_unsettled_remote_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unsettled_remote_balance(this), target, stream);
  }

  // .lnrpc.Amount pending_open_local_balance = 7;
  if (this->has_pending_open_local_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pending_open_local_balance(this), target, stream);
  }

  // .lnrpc.Amount pending_open_remote_balance = 8;
  if (this->has_pending_open_remote_balance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pending_open_remote_balance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelBalanceResponse)
  return target;
}

size_t ChannelBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.Amount local_balance = 3;
  if (this->has_local_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_balance_);
  }

  // .lnrpc.Amount remote_balance = 4;
  if (this->has_remote_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_balance_);
  }

  // .lnrpc.Amount unsettled_local_balance = 5;
  if (this->has_unsettled_local_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsettled_local_balance_);
  }

  // .lnrpc.Amount unsettled_remote_balance = 6;
  if (this->has_unsettled_remote_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *unsettled_remote_balance_);
  }

  // .lnrpc.Amount pending_open_local_balance = 7;
  if (this->has_pending_open_local_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pending_open_local_balance_);
  }

  // .lnrpc.Amount pending_open_remote_balance = 8;
  if (this->has_pending_open_remote_balance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pending_open_remote_balance_);
  }

  // int64 balance = 1 [deprecated = true];
  if (this->balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_balance());
  }

  // int64 pending_open_balance = 2 [deprecated = true];
  if (this->pending_open_balance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pending_open_balance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelBalanceResponse)
    MergeFrom(*source);
  }
}

void ChannelBalanceResponse::MergeFrom(const ChannelBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_balance()) {
    _internal_mutable_local_balance()->::lnrpc::Amount::MergeFrom(from._internal_local_balance());
  }
  if (from.has_remote_balance()) {
    _internal_mutable_remote_balance()->::lnrpc::Amount::MergeFrom(from._internal_remote_balance());
  }
  if (from.has_unsettled_local_balance()) {
    _internal_mutable_unsettled_local_balance()->::lnrpc::Amount::MergeFrom(from._internal_unsettled_local_balance());
  }
  if (from.has_unsettled_remote_balance()) {
    _internal_mutable_unsettled_remote_balance()->::lnrpc::Amount::MergeFrom(from._internal_unsettled_remote_balance());
  }
  if (from.has_pending_open_local_balance()) {
    _internal_mutable_pending_open_local_balance()->::lnrpc::Amount::MergeFrom(from._internal_pending_open_local_balance());
  }
  if (from.has_pending_open_remote_balance()) {
    _internal_mutable_pending_open_remote_balance()->::lnrpc::Amount::MergeFrom(from._internal_pending_open_remote_balance());
  }
  if (from.balance() != 0) {
    _internal_set_balance(from._internal_balance());
  }
  if (from.pending_open_balance() != 0) {
    _internal_set_pending_open_balance(from._internal_pending_open_balance());
  }
}

void ChannelBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBalanceResponse::CopyFrom(const ChannelBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBalanceResponse::IsInitialized() const {
  return true;
}

void ChannelBalanceResponse::InternalSwap(ChannelBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(local_balance_, other->local_balance_);
  swap(remote_balance_, other->remote_balance_);
  swap(unsettled_local_balance_, other->unsettled_local_balance_);
  swap(unsettled_remote_balance_, other->unsettled_remote_balance_);
  swap(pending_open_local_balance_, other->pending_open_local_balance_);
  swap(pending_open_remote_balance_, other->pending_open_remote_balance_);
  swap(balance_, other->balance_);
  swap(pending_open_balance_, other->pending_open_balance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse() {}
QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(const QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void QueryRoutesRequest::InitAsDefaultInstance() {
  ::lnrpc::_QueryRoutesRequest_default_instance_._instance.get_mutable()->fee_limit_ = const_cast< ::lnrpc::FeeLimit*>(
      ::lnrpc::FeeLimit::internal_default_instance());
}
class QueryRoutesRequest::_Internal {
 public:
  static const ::lnrpc::FeeLimit& fee_limit(const QueryRoutesRequest* msg);
};

const ::lnrpc::FeeLimit&
QueryRoutesRequest::_Internal::fee_limit(const QueryRoutesRequest* msg) {
  return *msg->fee_limit_;
}
QueryRoutesRequest::QueryRoutesRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.QueryRoutesRequest)
}
QueryRoutesRequest::QueryRoutesRequest(const QueryRoutesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ignored_nodes_(from.ignored_nodes_),
      ignored_edges_(from.ignored_edges_),
      ignored_pairs_(from.ignored_pairs_),
      route_hints_(from.route_hints_),
      dest_features_(from.dest_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  source_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_pub_key().empty()) {
    source_pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_pub_key_);
  }
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_hop_pubkey().empty()) {
    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  if (from._internal_has_fee_limit()) {
    fee_limit_ = new ::lnrpc::FeeLimit(*from.fee_limit_);
  } else {
    fee_limit_ = nullptr;
  }
  ::memcpy(&amt_, &from.amt_,
    static_cast<size_t>(reinterpret_cast<char*>(&cltv_limit_) -
    reinterpret_cast<char*>(&amt_)) + sizeof(cltv_limit_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.QueryRoutesRequest)
}

void QueryRoutesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryRoutesRequest_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&fee_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cltv_limit_) -
      reinterpret_cast<char*>(&fee_limit_)) + sizeof(cltv_limit_));
}

QueryRoutesRequest::~QueryRoutesRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.QueryRoutesRequest)
  SharedDtor();
}

void QueryRoutesRequest::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete fee_limit_;
}

void QueryRoutesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRoutesRequest& QueryRoutesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRoutesRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void QueryRoutesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.QueryRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_nodes_.Clear();
  ignored_edges_.Clear();
  ignored_pairs_.Clear();
  dest_custom_records_.Clear();
  route_hints_.Clear();
  dest_features_.Clear();
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && fee_limit_ != nullptr) {
    delete fee_limit_;
  }
  fee_limit_ = nullptr;
  ::memset(&amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cltv_limit_) -
      reinterpret_cast<char*>(&amt_)) + sizeof(cltv_limit_));
  _internal_metadata_.Clear();
}

const char* QueryRoutesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.QueryRoutesRequest.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 final_cltv_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          final_cltv_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.FeeLimit fee_limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee_limit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes ignored_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ignored_nodes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ignored_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string source_pub_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_source_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.QueryRoutesRequest.source_pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_mission_control = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          use_mission_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.NodePair ignored_pairs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ignored_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 cltv_limit = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cltv_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_msat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, bytes> dest_custom_records = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dest_custom_records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_chan_id = 14 [jstype = JS_STRING];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          outgoing_chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes last_hop_pubkey = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_last_hop_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.RouteHint route_hints = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_route_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.FeatureBit dest_features = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dest_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_dest_features(static_cast<::lnrpc::FeatureBit>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRoutesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.QueryRoutesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.QueryRoutesRequest.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // int64 amt = 2;
  if (this->amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amt(), target);
  }

  // int32 final_cltv_delta = 4;
  if (this->final_cltv_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_final_cltv_delta(), target);
  }

  // .lnrpc.FeeLimit fee_limit = 5;
  if (this->has_fee_limit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::fee_limit(this), target, stream);
  }

  // repeated bytes ignored_nodes = 6;
  for (int i = 0, n = this->_internal_ignored_nodes_size(); i < n; i++) {
    const auto& s = this->_internal_ignored_nodes(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ignored_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_ignored_edges(i), target, stream);
  }

  // string source_pub_key = 8;
  if (this->source_pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_pub_key().data(), static_cast<int>(this->_internal_source_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.QueryRoutesRequest.source_pub_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_source_pub_key(), target);
  }

  // bool use_mission_control = 9;
  if (this->use_mission_control() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_use_mission_control(), target);
  }

  // repeated .lnrpc.NodePair ignored_pairs = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ignored_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_ignored_pairs(i), target, stream);
  }

  // uint32 cltv_limit = 11;
  if (this->cltv_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_cltv_limit(), target);
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_amt_msat(), target);
  }

  // map<uint64, bytes> dest_custom_records = 13;
  if (!this->_internal_dest_custom_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dest_custom_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dest_custom_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it) {
        target = QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
      }
    }
  }

  // uint64 outgoing_chan_id = 14 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_outgoing_chan_id(), target);
  }

  // bytes last_hop_pubkey = 15;
  if (this->last_hop_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_last_hop_pubkey(), target);
  }

  // repeated .lnrpc.RouteHint route_hints = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_route_hints(i), target, stream);
  }

  // repeated .lnrpc.FeatureBit dest_features = 17;
  {
    int byte_size = _dest_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          17, dest_features_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.QueryRoutesRequest)
  return target;
}

size_t QueryRoutesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.QueryRoutesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes ignored_nodes = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ignored_nodes_.size());
  for (int i = 0, n = ignored_nodes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      ignored_nodes_.Get(i));
  }

  // repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];
  total_size += 1UL * this->_internal_ignored_edges_size();
  for (const auto& msg : this->ignored_edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.NodePair ignored_pairs = 10;
  total_size += 1UL * this->_internal_ignored_pairs_size();
  for (const auto& msg : this->ignored_pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, bytes> dest_custom_records = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dest_custom_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_dest_custom_records().begin();
      it != this->_internal_dest_custom_records().end(); ++it) {
    total_size += QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .lnrpc.RouteHint route_hints = 16;
  total_size += 2UL * this->_internal_route_hints_size();
  for (const auto& msg : this->route_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.FeatureBit dest_features = 17;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dest_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_dest_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dest_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string source_pub_key = 8;
  if (this->source_pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_pub_key());
  }

  // bytes last_hop_pubkey = 15;
  if (this->last_hop_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_hop_pubkey());
  }

  // .lnrpc.FeeLimit fee_limit = 5;
  if (this->has_fee_limit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_limit_);
  }

  // int64 amt = 2;
  if (this->amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt());
  }

  // int32 final_cltv_delta = 4;
  if (this->final_cltv_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_cltv_delta());
  }

  // bool use_mission_control = 9;
  if (this->use_mission_control() != 0) {
    total_size += 1 + 1;
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_msat());
  }

  // uint64 outgoing_chan_id = 14 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_chan_id());
  }

  // uint32 cltv_limit = 11;
  if (this->cltv_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cltv_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRoutesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.QueryRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoutesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRoutesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.QueryRoutesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.QueryRoutesRequest)
    MergeFrom(*source);
  }
}

void QueryRoutesRequest::MergeFrom(const QueryRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.QueryRoutesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ignored_nodes_.MergeFrom(from.ignored_nodes_);
  ignored_edges_.MergeFrom(from.ignored_edges_);
  ignored_pairs_.MergeFrom(from.ignored_pairs_);
  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  route_hints_.MergeFrom(from.route_hints_);
  dest_features_.MergeFrom(from.dest_features_);
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.source_pub_key().size() > 0) {

    source_pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_pub_key_);
  }
  if (from.last_hop_pubkey().size() > 0) {

    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  if (from.has_fee_limit()) {
    _internal_mutable_fee_limit()->::lnrpc::FeeLimit::MergeFrom(from._internal_fee_limit());
  }
  if (from.amt() != 0) {
    _internal_set_amt(from._internal_amt());
  }
  if (from.final_cltv_delta() != 0) {
    _internal_set_final_cltv_delta(from._internal_final_cltv_delta());
  }
  if (from.use_mission_control() != 0) {
    _internal_set_use_mission_control(from._internal_use_mission_control());
  }
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
  if (from.outgoing_chan_id() != 0) {
    _internal_set_outgoing_chan_id(from._internal_outgoing_chan_id());
  }
  if (from.cltv_limit() != 0) {
    _internal_set_cltv_limit(from._internal_cltv_limit());
  }
}

void QueryRoutesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.QueryRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoutesRequest::CopyFrom(const QueryRoutesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.QueryRoutesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoutesRequest::IsInitialized() const {
  return true;
}

void QueryRoutesRequest::InternalSwap(QueryRoutesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ignored_nodes_.InternalSwap(&other->ignored_nodes_);
  ignored_edges_.InternalSwap(&other->ignored_edges_);
  ignored_pairs_.InternalSwap(&other->ignored_pairs_);
  dest_custom_records_.Swap(&other->dest_custom_records_);
  route_hints_.InternalSwap(&other->route_hints_);
  dest_features_.InternalSwap(&other->dest_features_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_pub_key_.Swap(&other->source_pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_hop_pubkey_.Swap(&other->last_hop_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(fee_limit_, other->fee_limit_);
  swap(amt_, other->amt_);
  swap(final_cltv_delta_, other->final_cltv_delta_);
  swap(use_mission_control_, other->use_mission_control_);
  swap(amt_msat_, other->amt_msat_);
  swap(outgoing_chan_id_, other->outgoing_chan_id_);
  swap(cltv_limit_, other->cltv_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRoutesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodePair::InitAsDefaultInstance() {
}
class NodePair::_Internal {
 public:
};

NodePair::NodePair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodePair)
}
NodePair::NodePair(const NodePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodePair)
}

void NodePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodePair_rpc_2eproto.base);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodePair::~NodePair() {
  // @@protoc_insertion_point(destructor:lnrpc.NodePair)
  SharedDtor();
}

void NodePair::SharedDtor() {
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodePair& NodePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodePair_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodePair::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NodePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodePair)
  return target;
}

size_t NodePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodePair)
  GOOGLE_DCHECK_NE(&from, this);
  const NodePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodePair)
    MergeFrom(*source);
  }
}

void NodePair::MergeFrom(const NodePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {

    from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_);
  }
  if (from.to().size() > 0) {

    to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_);
  }
}

void NodePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodePair::CopyFrom(const NodePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodePair::IsInitialized() const {
  return true;
}

void NodePair::InternalSwap(NodePair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EdgeLocator::InitAsDefaultInstance() {
}
class EdgeLocator::_Internal {
 public:
};

EdgeLocator::EdgeLocator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.EdgeLocator)
}
EdgeLocator::EdgeLocator(const EdgeLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_reverse_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(direction_reverse_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.EdgeLocator)
}

void EdgeLocator::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_reverse_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(direction_reverse_));
}

EdgeLocator::~EdgeLocator() {
  // @@protoc_insertion_point(destructor:lnrpc.EdgeLocator)
  SharedDtor();
}

void EdgeLocator::SharedDtor() {
}

void EdgeLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EdgeLocator& EdgeLocator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EdgeLocator_rpc_2eproto.base);
  return *internal_default_instance();
}


void EdgeLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.EdgeLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_reverse_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(direction_reverse_));
  _internal_metadata_.Clear();
}

const char* EdgeLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool direction_reverse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          direction_reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgeLocator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.EdgeLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // bool direction_reverse = 2;
  if (this->direction_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_direction_reverse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.EdgeLocator)
  return target;
}

size_t EdgeLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.EdgeLocator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // bool direction_reverse = 2;
  if (this->direction_reverse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgeLocator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.EdgeLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgeLocator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgeLocator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.EdgeLocator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.EdgeLocator)
    MergeFrom(*source);
  }
}

void EdgeLocator::MergeFrom(const EdgeLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.EdgeLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.direction_reverse() != 0) {
    _internal_set_direction_reverse(from._internal_direction_reverse());
  }
}

void EdgeLocator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.EdgeLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgeLocator::CopyFrom(const EdgeLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.EdgeLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeLocator::IsInitialized() const {
  return true;
}

void EdgeLocator::InternalSwap(EdgeLocator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_id_, other->channel_id_);
  swap(direction_reverse_, other->direction_reverse_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeLocator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryRoutesResponse::InitAsDefaultInstance() {
}
class QueryRoutesResponse::_Internal {
 public:
};

QueryRoutesResponse::QueryRoutesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.QueryRoutesResponse)
}
QueryRoutesResponse::QueryRoutesResponse(const QueryRoutesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      routes_(from.routes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_prob_ = from.success_prob_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.QueryRoutesResponse)
}

void QueryRoutesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryRoutesResponse_rpc_2eproto.base);
  success_prob_ = 0;
}

QueryRoutesResponse::~QueryRoutesResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.QueryRoutesResponse)
  SharedDtor();
}

void QueryRoutesResponse::SharedDtor() {
}

void QueryRoutesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryRoutesResponse& QueryRoutesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryRoutesResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void QueryRoutesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.QueryRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  routes_.Clear();
  success_prob_ = 0;
  _internal_metadata_.Clear();
}

const char* QueryRoutesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Route routes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // double success_prob = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          success_prob_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRoutesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.QueryRoutesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Route routes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_routes(i), target, stream);
  }

  // double success_prob = 2;
  if (!(this->success_prob() <= 0 && this->success_prob() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_success_prob(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.QueryRoutesResponse)
  return target;
}

size_t QueryRoutesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.QueryRoutesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Route routes = 1;
  total_size += 1UL * this->_internal_routes_size();
  for (const auto& msg : this->routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double success_prob = 2;
  if (!(this->success_prob() <= 0 && this->success_prob() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRoutesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.QueryRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRoutesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRoutesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.QueryRoutesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.QueryRoutesResponse)
    MergeFrom(*source);
  }
}

void QueryRoutesResponse::MergeFrom(const QueryRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.QueryRoutesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  routes_.MergeFrom(from.routes_);
  if (!(from.success_prob() <= 0 && from.success_prob() >= 0)) {
    _internal_set_success_prob(from._internal_success_prob());
  }
}

void QueryRoutesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.QueryRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRoutesResponse::CopyFrom(const QueryRoutesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.QueryRoutesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRoutesResponse::IsInitialized() const {
  return true;
}

void QueryRoutesResponse::InternalSwap(QueryRoutesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  routes_.InternalSwap(&other->routes_);
  swap(success_prob_, other->success_prob_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRoutesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Hop_CustomRecordsEntry_DoNotUse::Hop_CustomRecordsEntry_DoNotUse() {}
Hop_CustomRecordsEntry_DoNotUse::Hop_CustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Hop_CustomRecordsEntry_DoNotUse::MergeFrom(const Hop_CustomRecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Hop_CustomRecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Hop_CustomRecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Hop::InitAsDefaultInstance() {
  ::lnrpc::_Hop_default_instance_._instance.get_mutable()->mpp_record_ = const_cast< ::lnrpc::MPPRecord*>(
      ::lnrpc::MPPRecord::internal_default_instance());
}
class Hop::_Internal {
 public:
  static const ::lnrpc::MPPRecord& mpp_record(const Hop* msg);
};

const ::lnrpc::MPPRecord&
Hop::_Internal::mpp_record(const Hop* msg) {
  return *msg->mpp_record_;
}
Hop::Hop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Hop)
}
Hop::Hop(const Hop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_records_.MergeFrom(from.custom_records_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from._internal_has_mpp_record()) {
    mpp_record_ = new ::lnrpc::MPPRecord(*from.mpp_record_);
  } else {
    mpp_record_ = nullptr;
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tlv_payload_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(tlv_payload_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Hop)
}

void Hop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Hop_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mpp_record_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlv_payload_) -
      reinterpret_cast<char*>(&mpp_record_)) + sizeof(tlv_payload_));
}

Hop::~Hop() {
  // @@protoc_insertion_point(destructor:lnrpc.Hop)
  SharedDtor();
}

void Hop::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mpp_record_;
}

void Hop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hop& Hop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hop_rpc_2eproto.base);
  return *internal_default_instance();
}


void Hop::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Hop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_records_.Clear();
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && mpp_record_ != nullptr) {
    delete mpp_record_;
  }
  mpp_record_ = nullptr;
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tlv_payload_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(tlv_payload_));
  _internal_metadata_.Clear();
}

const char* Hop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chan_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 chan_capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chan_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_to_forward = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amt_to_forward_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_to_forward_msat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          amt_to_forward_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_msat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Hop.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool tlv_payload = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tlv_payload_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.MPPRecord mpp_record = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mpp_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint64, bytes> custom_records = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&custom_records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Hop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chan_id(), target);
  }

  // int64 chan_capacity = 2;
  if (this->chan_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_chan_capacity(), target);
  }

  // int64 amt_to_forward = 3 [deprecated = true];
  if (this->amt_to_forward() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amt_to_forward(), target);
  }

  // int64 fee = 4 [deprecated = true];
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee(), target);
  }

  // uint32 expiry = 5;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_expiry(), target);
  }

  // int64 amt_to_forward_msat = 6;
  if (this->amt_to_forward_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_amt_to_forward_msat(), target);
  }

  // int64 fee_msat = 7;
  if (this->fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_fee_msat(), target);
  }

  // string pub_key = 8;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Hop.pub_key");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_pub_key(), target);
  }

  // bool tlv_payload = 9;
  if (this->tlv_payload() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_tlv_payload(), target);
  }

  // .lnrpc.MPPRecord mpp_record = 10;
  if (this->has_mpp_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mpp_record(this), target, stream);
  }

  // map<uint64, bytes> custom_records = 11;
  if (!this->_internal_custom_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_custom_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_custom_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_custom_records().begin();
          it != this->_internal_custom_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Hop_CustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_custom_records().begin();
          it != this->_internal_custom_records().end(); ++it) {
        target = Hop_CustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Hop)
  return target;
}

size_t Hop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Hop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, bytes> custom_records = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_custom_records().begin();
      it != this->_internal_custom_records().end(); ++it) {
    total_size += Hop_CustomRecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pub_key = 8;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // .lnrpc.MPPRecord mpp_record = 10;
  if (this->has_mpp_record()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mpp_record_);
  }

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // int64 chan_capacity = 2;
  if (this->chan_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_chan_capacity());
  }

  // int64 amt_to_forward = 3 [deprecated = true];
  if (this->amt_to_forward() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_to_forward());
  }

  // int64 fee = 4 [deprecated = true];
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 amt_to_forward_msat = 6;
  if (this->amt_to_forward_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_to_forward_msat());
  }

  // int64 fee_msat = 7;
  if (this->fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_msat());
  }

  // uint32 expiry = 5;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // bool tlv_payload = 9;
  if (this->tlv_payload() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Hop)
  GOOGLE_DCHECK_NE(&from, this);
  const Hop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Hop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Hop)
    MergeFrom(*source);
  }
}

void Hop::MergeFrom(const Hop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Hop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_records_.MergeFrom(from.custom_records_);
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.has_mpp_record()) {
    _internal_mutable_mpp_record()->::lnrpc::MPPRecord::MergeFrom(from._internal_mpp_record());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.chan_capacity() != 0) {
    _internal_set_chan_capacity(from._internal_chan_capacity());
  }
  if (from.amt_to_forward() != 0) {
    _internal_set_amt_to_forward(from._internal_amt_to_forward());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.amt_to_forward_msat() != 0) {
    _internal_set_amt_to_forward_msat(from._internal_amt_to_forward_msat());
  }
  if (from.fee_msat() != 0) {
    _internal_set_fee_msat(from._internal_fee_msat());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.tlv_payload() != 0) {
    _internal_set_tlv_payload(from._internal_tlv_payload());
  }
}

void Hop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Hop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hop::CopyFrom(const Hop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Hop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hop::IsInitialized() const {
  return true;
}

void Hop::InternalSwap(Hop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_records_.Swap(&other->custom_records_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mpp_record_, other->mpp_record_);
  swap(chan_id_, other->chan_id_);
  swap(chan_capacity_, other->chan_capacity_);
  swap(amt_to_forward_, other->amt_to_forward_);
  swap(fee_, other->fee_);
  swap(amt_to_forward_msat_, other->amt_to_forward_msat_);
  swap(fee_msat_, other->fee_msat_);
  swap(expiry_, other->expiry_);
  swap(tlv_payload_, other->tlv_payload_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MPPRecord::InitAsDefaultInstance() {
}
class MPPRecord::_Internal {
 public:
};

MPPRecord::MPPRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.MPPRecord)
}
MPPRecord::MPPRecord(const MPPRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_addr().empty()) {
    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  total_amt_msat_ = from.total_amt_msat_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.MPPRecord)
}

void MPPRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MPPRecord_rpc_2eproto.base);
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_amt_msat_ = PROTOBUF_LONGLONG(0);
}

MPPRecord::~MPPRecord() {
  // @@protoc_insertion_point(destructor:lnrpc.MPPRecord)
  SharedDtor();
}

void MPPRecord::SharedDtor() {
  payment_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MPPRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MPPRecord& MPPRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MPPRecord_rpc_2eproto.base);
  return *internal_default_instance();
}


void MPPRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.MPPRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  total_amt_msat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* MPPRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 total_amt_msat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          total_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_payment_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MPPRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.MPPRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total_amt_msat = 10;
  if (this->total_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_total_amt_msat(), target);
  }

  // bytes payment_addr = 11;
  if (this->payment_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_payment_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.MPPRecord)
  return target;
}

size_t MPPRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.MPPRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payment_addr = 11;
  if (this->payment_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_addr());
  }

  // int64 total_amt_msat = 10;
  if (this->total_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_amt_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MPPRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.MPPRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const MPPRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MPPRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.MPPRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.MPPRecord)
    MergeFrom(*source);
  }
}

void MPPRecord::MergeFrom(const MPPRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.MPPRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_addr().size() > 0) {

    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from.total_amt_msat() != 0) {
    _internal_set_total_amt_msat(from._internal_total_amt_msat());
  }
}

void MPPRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.MPPRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPPRecord::CopyFrom(const MPPRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.MPPRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPPRecord::IsInitialized() const {
  return true;
}

void MPPRecord::InternalSwap(MPPRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_addr_.Swap(&other->payment_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(total_amt_msat_, other->total_amt_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MPPRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Route::InitAsDefaultInstance() {
}
class Route::_Internal {
 public:
};

Route::Route()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hops_(from.hops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_fees_, &from.total_fees_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_time_lock_) -
    reinterpret_cast<char*>(&total_fees_)) + sizeof(total_time_lock_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Route)
}

void Route::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Route_rpc_2eproto.base);
  ::memset(&total_fees_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_lock_) -
      reinterpret_cast<char*>(&total_fees_)) + sizeof(total_time_lock_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:lnrpc.Route)
  SharedDtor();
}

void Route::SharedDtor() {
}

void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Route& Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Route_rpc_2eproto.base);
  return *internal_default_instance();
}


void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hops_.Clear();
  ::memset(&total_fees_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_time_lock_) -
      reinterpret_cast<char*>(&total_fees_)) + sizeof(total_time_lock_));
  _internal_metadata_.Clear();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 total_time_lock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          total_time_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_fees = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          total_fees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_amt = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.Hop hops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 total_fees_msat = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          total_fees_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_amt_msat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Route::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 total_time_lock = 1;
  if (this->total_time_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_total_time_lock(), target);
  }

  // int64 total_fees = 2 [deprecated = true];
  if (this->total_fees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_fees(), target);
  }

  // int64 total_amt = 3 [deprecated = true];
  if (this->total_amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_amt(), target);
  }

  // repeated .lnrpc.Hop hops = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_hops(i), target, stream);
  }

  // int64 total_fees_msat = 5;
  if (this->total_fees_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_fees_msat(), target);
  }

  // int64 total_amt_msat = 6;
  if (this->total_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_amt_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Hop hops = 4;
  total_size += 1UL * this->_internal_hops_size();
  for (const auto& msg : this->hops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 total_fees = 2 [deprecated = true];
  if (this->total_fees() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_fees());
  }

  // int64 total_amt = 3 [deprecated = true];
  if (this->total_amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_amt());
  }

  // int64 total_fees_msat = 5;
  if (this->total_fees_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_fees_msat());
  }

  // int64 total_amt_msat = 6;
  if (this->total_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_amt_msat());
  }

  // uint32 total_time_lock = 1;
  if (this->total_time_lock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_time_lock());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Route)
    MergeFrom(*source);
  }
}

void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hops_.MergeFrom(from.hops_);
  if (from.total_fees() != 0) {
    _internal_set_total_fees(from._internal_total_fees());
  }
  if (from.total_amt() != 0) {
    _internal_set_total_amt(from._internal_total_amt());
  }
  if (from.total_fees_msat() != 0) {
    _internal_set_total_fees_msat(from._internal_total_fees_msat());
  }
  if (from.total_amt_msat() != 0) {
    _internal_set_total_amt_msat(from._internal_total_amt_msat());
  }
  if (from.total_time_lock() != 0) {
    _internal_set_total_time_lock(from._internal_total_time_lock());
  }
}

void Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hops_.InternalSwap(&other->hops_);
  swap(total_fees_, other->total_fees_);
  swap(total_amt_, other->total_amt_);
  swap(total_fees_msat_, other->total_fees_msat_);
  swap(total_amt_msat_, other->total_amt_msat_);
  swap(total_time_lock_, other->total_time_lock_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfoRequest::InitAsDefaultInstance() {
}
class NodeInfoRequest::_Internal {
 public:
};

NodeInfoRequest::NodeInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeInfoRequest)
}
NodeInfoRequest::NodeInfoRequest(const NodeInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  include_channels_ = from.include_channels_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeInfoRequest)
}

void NodeInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfoRequest_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_channels_ = false;
}

NodeInfoRequest::~NodeInfoRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeInfoRequest)
  SharedDtor();
}

void NodeInfoRequest::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfoRequest& NodeInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfoRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_channels_ = false;
  _internal_metadata_.Clear();
}

const char* NodeInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pub_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeInfoRequest.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeInfoRequest.pub_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pub_key(), target);
  }

  // bool include_channels = 2;
  if (this->include_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_channels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeInfoRequest)
  return target;
}

size_t NodeInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pub_key = 1;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // bool include_channels = 2;
  if (this->include_channels() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeInfoRequest)
    MergeFrom(*source);
  }
}

void NodeInfoRequest::MergeFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.include_channels() != 0) {
    _internal_set_include_channels(from._internal_include_channels());
  }
}

void NodeInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfoRequest::CopyFrom(const NodeInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfoRequest::IsInitialized() const {
  return true;
}

void NodeInfoRequest::InternalSwap(NodeInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(include_channels_, other->include_channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeInfo::InitAsDefaultInstance() {
  ::lnrpc::_NodeInfo_default_instance_._instance.get_mutable()->node_ = const_cast< ::lnrpc::LightningNode*>(
      ::lnrpc::LightningNode::internal_default_instance());
}
class NodeInfo::_Internal {
 public:
  static const ::lnrpc::LightningNode& node(const NodeInfo* msg);
};

const ::lnrpc::LightningNode&
NodeInfo::_Internal::node(const NodeInfo* msg) {
  return *msg->node_;
}
NodeInfo::NodeInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeInfo)
}
NodeInfo::NodeInfo(const NodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_node()) {
    node_ = new ::lnrpc::LightningNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  ::memcpy(&total_capacity_, &from.total_capacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_channels_) -
    reinterpret_cast<char*>(&total_capacity_)) + sizeof(num_channels_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeInfo)
}

void NodeInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeInfo_rpc_2eproto.base);
  ::memset(&node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_channels_) -
      reinterpret_cast<char*>(&node_)) + sizeof(num_channels_));
}

NodeInfo::~NodeInfo() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeInfo)
  SharedDtor();
}

void NodeInfo::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeInfo& NodeInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeInfo_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
  ::memset(&total_capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_channels_) -
      reinterpret_cast<char*>(&total_capacity_)) + sizeof(num_channels_));
  _internal_metadata_.Clear();
}

const char* NodeInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.LightningNode node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.ChannelEdge channels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.LightningNode node = 1;
  if (this->has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::node(this), target, stream);
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_channels(), target);
  }

  // int64 total_capacity = 3;
  if (this->total_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_capacity(), target);
  }

  // repeated .lnrpc.ChannelEdge channels = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeInfo)
  return target;
}

size_t NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelEdge channels = 4;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .lnrpc.LightningNode node = 1;
  if (this->has_node()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node_);
  }

  // int64 total_capacity = 3;
  if (this->total_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_capacity());
  }

  // uint32 num_channels = 2;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_channels());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeInfo)
    MergeFrom(*source);
  }
}

void NodeInfo::MergeFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (from.has_node()) {
    _internal_mutable_node()->::lnrpc::LightningNode::MergeFrom(from._internal_node());
  }
  if (from.total_capacity() != 0) {
    _internal_set_total_capacity(from._internal_total_capacity());
  }
  if (from.num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
}

void NodeInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeInfo::CopyFrom(const NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeInfo::IsInitialized() const {
  return true;
}

void NodeInfo::InternalSwap(NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  swap(node_, other->node_);
  swap(total_capacity_, other->total_capacity_);
  swap(num_channels_, other->num_channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

LightningNode_FeaturesEntry_DoNotUse::LightningNode_FeaturesEntry_DoNotUse() {}
LightningNode_FeaturesEntry_DoNotUse::LightningNode_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LightningNode_FeaturesEntry_DoNotUse::MergeFrom(const LightningNode_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LightningNode_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LightningNode_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LightningNode::InitAsDefaultInstance() {
}
class LightningNode::_Internal {
 public:
};

LightningNode::LightningNode()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.LightningNode)
}
LightningNode::LightningNode(const LightningNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pub_key().empty()) {
    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  last_update_ = from.last_update_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.LightningNode)
}

void LightningNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LightningNode_rpc_2eproto.base);
  pub_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_update_ = 0u;
}

LightningNode::~LightningNode() {
  // @@protoc_insertion_point(destructor:lnrpc.LightningNode)
  SharedDtor();
}

void LightningNode::SharedDtor() {
  pub_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LightningNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LightningNode& LightningNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LightningNode_rpc_2eproto.base);
  return *internal_default_instance();
}


void LightningNode::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.LightningNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  features_.Clear();
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_update_ = 0u;
  _internal_metadata_.Clear();
}

const char* LightningNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 last_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pub_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pub_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.LightningNode.pub_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.LightningNode.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.NodeAddress addresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.LightningNode.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LightningNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.LightningNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 last_update = 1;
  if (this->last_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_last_update(), target);
  }

  // string pub_key = 2;
  if (this->pub_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pub_key().data(), static_cast<int>(this->_internal_pub_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.LightningNode.pub_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pub_key(), target);
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.LightningNode.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // repeated .lnrpc.NodeAddress addresses = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_addresses(i), target, stream);
  }

  // string color = 5;
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.LightningNode.color");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_color(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 6;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LightningNode_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = LightningNode_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.LightningNode)
  return target;
}

size_t LightningNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.LightningNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.NodeAddress addresses = 4;
  total_size += 1UL * this->_internal_addresses_size();
  for (const auto& msg : this->addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, .lnrpc.Feature> features = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += LightningNode_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string pub_key = 2;
  if (this->pub_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pub_key());
  }

  // string alias = 3;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string color = 5;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // uint32 last_update = 1;
  if (this->last_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LightningNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.LightningNode)
  GOOGLE_DCHECK_NE(&from, this);
  const LightningNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LightningNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.LightningNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.LightningNode)
    MergeFrom(*source);
  }
}

void LightningNode::MergeFrom(const LightningNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.LightningNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  features_.MergeFrom(from.features_);
  if (from.pub_key().size() > 0) {

    pub_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pub_key_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  if (from.last_update() != 0) {
    _internal_set_last_update(from._internal_last_update());
  }
}

void LightningNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.LightningNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightningNode::CopyFrom(const LightningNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.LightningNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LightningNode::IsInitialized() const {
  return true;
}

void LightningNode::InternalSwap(LightningNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  features_.Swap(&other->features_);
  pub_key_.Swap(&other->pub_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(last_update_, other->last_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LightningNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeAddress::InitAsDefaultInstance() {
}
class NodeAddress::_Internal {
 public:
};

NodeAddress::NodeAddress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeAddress)
}
NodeAddress::NodeAddress(const NodeAddress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_network().empty()) {
    network_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_addr().empty()) {
    addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeAddress)
}

void NodeAddress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeAddress_rpc_2eproto.base);
  network_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeAddress::~NodeAddress() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeAddress)
  SharedDtor();
}

void NodeAddress::SharedDtor() {
  network_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeAddress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeAddress& NodeAddress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeAddress_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NodeAddress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string network = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_network();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeAddress.network"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeAddress.addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeAddress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeAddress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string network = 1;
  if (this->network().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_network().data(), static_cast<int>(this->_internal_network().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeAddress.network");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_network(), target);
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeAddress.addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeAddress)
  return target;
}

size_t NodeAddress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeAddress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string network = 1;
  if (this->network().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_network());
  }

  // string addr = 2;
  if (this->addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeAddress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeAddress)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeAddress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeAddress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeAddress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeAddress)
    MergeFrom(*source);
  }
}

void NodeAddress::MergeFrom(const NodeAddress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeAddress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.network().size() > 0) {

    network_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.network_);
  }
  if (from.addr().size() > 0) {

    addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.addr_);
  }
}

void NodeAddress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeAddress::CopyFrom(const NodeAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAddress::IsInitialized() const {
  return true;
}

void NodeAddress::InternalSwap(NodeAddress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  network_.Swap(&other->network_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  addr_.Swap(&other->addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeAddress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RoutingPolicy::InitAsDefaultInstance() {
}
class RoutingPolicy::_Internal {
 public:
};

RoutingPolicy::RoutingPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.RoutingPolicy)
}
RoutingPolicy::RoutingPolicy(const RoutingPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_htlc_, &from.min_htlc_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_update_) -
    reinterpret_cast<char*>(&min_htlc_)) + sizeof(last_update_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.RoutingPolicy)
}

void RoutingPolicy::SharedCtor() {
  ::memset(&min_htlc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_) -
      reinterpret_cast<char*>(&min_htlc_)) + sizeof(last_update_));
}

RoutingPolicy::~RoutingPolicy() {
  // @@protoc_insertion_point(destructor:lnrpc.RoutingPolicy)
  SharedDtor();
}

void RoutingPolicy::SharedDtor() {
}

void RoutingPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoutingPolicy& RoutingPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoutingPolicy_rpc_2eproto.base);
  return *internal_default_instance();
}


void RoutingPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_htlc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_) -
      reinterpret_cast<char*>(&min_htlc_)) + sizeof(last_update_));
  _internal_metadata_.Clear();
}

const char* RoutingPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 time_lock_delta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_lock_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 min_htlc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_htlc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_base_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_base_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_rate_milli_msat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_rate_milli_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_htlc_msat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_update = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingPolicy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.RoutingPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 time_lock_delta = 1;
  if (this->time_lock_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_time_lock_delta(), target);
  }

  // int64 min_htlc = 2;
  if (this->min_htlc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_min_htlc(), target);
  }

  // int64 fee_base_msat = 3;
  if (this->fee_base_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee_base_msat(), target);
  }

  // int64 fee_rate_milli_msat = 4;
  if (this->fee_rate_milli_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fee_rate_milli_msat(), target);
  }

  // bool disabled = 5;
  if (this->disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_disabled(), target);
  }

  // uint64 max_htlc_msat = 6;
  if (this->max_htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_max_htlc_msat(), target);
  }

  // uint32 last_update = 7;
  if (this->last_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_last_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.RoutingPolicy)
  return target;
}

size_t RoutingPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.RoutingPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 min_htlc = 2;
  if (this->min_htlc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_htlc());
  }

  // int64 fee_base_msat = 3;
  if (this->fee_base_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_base_msat());
  }

  // uint32 time_lock_delta = 1;
  if (this->time_lock_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_lock_delta());
  }

  // bool disabled = 5;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  // int64 fee_rate_milli_msat = 4;
  if (this->fee_rate_milli_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_rate_milli_msat());
  }

  // uint64 max_htlc_msat = 6;
  if (this->max_htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_htlc_msat());
  }

  // uint32 last_update = 7;
  if (this->last_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.RoutingPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.RoutingPolicy)
    MergeFrom(*source);
  }
}

void RoutingPolicy::MergeFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.RoutingPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_htlc() != 0) {
    _internal_set_min_htlc(from._internal_min_htlc());
  }
  if (from.fee_base_msat() != 0) {
    _internal_set_fee_base_msat(from._internal_fee_base_msat());
  }
  if (from.time_lock_delta() != 0) {
    _internal_set_time_lock_delta(from._internal_time_lock_delta());
  }
  if (from.disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
  if (from.fee_rate_milli_msat() != 0) {
    _internal_set_fee_rate_milli_msat(from._internal_fee_rate_milli_msat());
  }
  if (from.max_htlc_msat() != 0) {
    _internal_set_max_htlc_msat(from._internal_max_htlc_msat());
  }
  if (from.last_update() != 0) {
    _internal_set_last_update(from._internal_last_update());
  }
}

void RoutingPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingPolicy::CopyFrom(const RoutingPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.RoutingPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingPolicy::IsInitialized() const {
  return true;
}

void RoutingPolicy::InternalSwap(RoutingPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_htlc_, other->min_htlc_);
  swap(fee_base_msat_, other->fee_base_msat_);
  swap(time_lock_delta_, other->time_lock_delta_);
  swap(disabled_, other->disabled_);
  swap(fee_rate_milli_msat_, other->fee_rate_milli_msat_);
  swap(max_htlc_msat_, other->max_htlc_msat_);
  swap(last_update_, other->last_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelEdge::InitAsDefaultInstance() {
  ::lnrpc::_ChannelEdge_default_instance_._instance.get_mutable()->node1_policy_ = const_cast< ::lnrpc::RoutingPolicy*>(
      ::lnrpc::RoutingPolicy::internal_default_instance());
  ::lnrpc::_ChannelEdge_default_instance_._instance.get_mutable()->node2_policy_ = const_cast< ::lnrpc::RoutingPolicy*>(
      ::lnrpc::RoutingPolicy::internal_default_instance());
}
class ChannelEdge::_Internal {
 public:
  static const ::lnrpc::RoutingPolicy& node1_policy(const ChannelEdge* msg);
  static const ::lnrpc::RoutingPolicy& node2_policy(const ChannelEdge* msg);
};

const ::lnrpc::RoutingPolicy&
ChannelEdge::_Internal::node1_policy(const ChannelEdge* msg) {
  return *msg->node1_policy_;
}
const ::lnrpc::RoutingPolicy&
ChannelEdge::_Internal::node2_policy(const ChannelEdge* msg) {
  return *msg->node2_policy_;
}
ChannelEdge::ChannelEdge()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelEdge)
}
ChannelEdge::ChannelEdge(const ChannelEdge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chan_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chan_point().empty()) {
    chan_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_point_);
  }
  node1_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node1_pub().empty()) {
    node1_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node1_pub_);
  }
  node2_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node2_pub().empty()) {
    node2_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node2_pub_);
  }
  if (from._internal_has_node1_policy()) {
    node1_policy_ = new ::lnrpc::RoutingPolicy(*from.node1_policy_);
  } else {
    node1_policy_ = nullptr;
  }
  if (from._internal_has_node2_policy()) {
    node2_policy_ = new ::lnrpc::RoutingPolicy(*from.node2_policy_);
  } else {
    node2_policy_ = nullptr;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_update_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(last_update_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelEdge)
}

void ChannelEdge::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelEdge_rpc_2eproto.base);
  chan_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node1_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node2_pub_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&node1_policy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_) -
      reinterpret_cast<char*>(&node1_policy_)) + sizeof(last_update_));
}

ChannelEdge::~ChannelEdge() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelEdge)
  SharedDtor();
}

void ChannelEdge::SharedDtor() {
  chan_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node1_pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node2_pub_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete node1_policy_;
  if (this != internal_default_instance()) delete node2_policy_;
}

void ChannelEdge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelEdge& ChannelEdge::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelEdge_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node1_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node2_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && node1_policy_ != nullptr) {
    delete node1_policy_;
  }
  node1_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && node2_policy_ != nullptr) {
    delete node2_policy_;
  }
  node2_policy_ = nullptr;
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_update_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(last_update_));
  _internal_metadata_.Clear();
}

const char* ChannelEdge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 channel_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string chan_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chan_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelEdge.chan_point"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 last_update = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_update_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node1_pub = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_node1_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelEdge.node1_pub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node2_pub = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_node2_pub();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelEdge.node2_pub"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.RoutingPolicy node1_policy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_node1_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.RoutingPolicy node2_policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_node2_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelEdge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelEdge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_channel_id(), target);
  }

  // string chan_point = 2;
  if (this->chan_point().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chan_point().data(), static_cast<int>(this->_internal_chan_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelEdge.chan_point");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chan_point(), target);
  }

  // uint32 last_update = 3 [deprecated = true];
  if (this->last_update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_last_update(), target);
  }

  // string node1_pub = 4;
  if (this->node1_pub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node1_pub().data(), static_cast<int>(this->_internal_node1_pub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelEdge.node1_pub");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_node1_pub(), target);
  }

  // string node2_pub = 5;
  if (this->node2_pub().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node2_pub().data(), static_cast<int>(this->_internal_node2_pub().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelEdge.node2_pub");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_node2_pub(), target);
  }

  // int64 capacity = 6;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_capacity(), target);
  }

  // .lnrpc.RoutingPolicy node1_policy = 7;
  if (this->has_node1_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::node1_policy(this), target, stream);
  }

  // .lnrpc.RoutingPolicy node2_policy = 8;
  if (this->has_node2_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::node2_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelEdge)
  return target;
}

size_t ChannelEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelEdge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chan_point = 2;
  if (this->chan_point().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chan_point());
  }

  // string node1_pub = 4;
  if (this->node1_pub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node1_pub());
  }

  // string node2_pub = 5;
  if (this->node2_pub().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node2_pub());
  }

  // .lnrpc.RoutingPolicy node1_policy = 7;
  if (this->has_node1_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node1_policy_);
  }

  // .lnrpc.RoutingPolicy node2_policy = 8;
  if (this->has_node2_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *node2_policy_);
  }

  // uint64 channel_id = 1 [jstype = JS_STRING];
  if (this->channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_channel_id());
  }

  // int64 capacity = 6;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // uint32 last_update = 3 [deprecated = true];
  if (this->last_update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelEdge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelEdge)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelEdge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelEdge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelEdge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelEdge)
    MergeFrom(*source);
  }
}

void ChannelEdge::MergeFrom(const ChannelEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chan_point().size() > 0) {

    chan_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_point_);
  }
  if (from.node1_pub().size() > 0) {

    node1_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node1_pub_);
  }
  if (from.node2_pub().size() > 0) {

    node2_pub_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node2_pub_);
  }
  if (from.has_node1_policy()) {
    _internal_mutable_node1_policy()->::lnrpc::RoutingPolicy::MergeFrom(from._internal_node1_policy());
  }
  if (from.has_node2_policy()) {
    _internal_mutable_node2_policy()->::lnrpc::RoutingPolicy::MergeFrom(from._internal_node2_policy());
  }
  if (from.channel_id() != 0) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.last_update() != 0) {
    _internal_set_last_update(from._internal_last_update());
  }
}

void ChannelEdge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelEdge::CopyFrom(const ChannelEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelEdge::IsInitialized() const {
  return true;
}

void ChannelEdge::InternalSwap(ChannelEdge* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chan_point_.Swap(&other->chan_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node1_pub_.Swap(&other->node1_pub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node2_pub_.Swap(&other->node2_pub_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node1_policy_, other->node1_policy_);
  swap(node2_policy_, other->node2_policy_);
  swap(channel_id_, other->channel_id_);
  swap(capacity_, other->capacity_);
  swap(last_update_, other->last_update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelEdge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelGraphRequest::InitAsDefaultInstance() {
}
class ChannelGraphRequest::_Internal {
 public:
};

ChannelGraphRequest::ChannelGraphRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelGraphRequest)
}
ChannelGraphRequest::ChannelGraphRequest(const ChannelGraphRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_unannounced_ = from.include_unannounced_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelGraphRequest)
}

void ChannelGraphRequest::SharedCtor() {
  include_unannounced_ = false;
}

ChannelGraphRequest::~ChannelGraphRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelGraphRequest)
  SharedDtor();
}

void ChannelGraphRequest::SharedDtor() {
}

void ChannelGraphRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelGraphRequest& ChannelGraphRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelGraphRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelGraphRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_unannounced_ = false;
  _internal_metadata_.Clear();
}

const char* ChannelGraphRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_unannounced = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_unannounced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelGraphRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelGraphRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_unannounced = 1;
  if (this->include_unannounced() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_unannounced(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelGraphRequest)
  return target;
}

size_t ChannelGraphRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelGraphRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_unannounced = 1;
  if (this->include_unannounced() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelGraphRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelGraphRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelGraphRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelGraphRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelGraphRequest)
    MergeFrom(*source);
  }
}

void ChannelGraphRequest::MergeFrom(const ChannelGraphRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelGraphRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_unannounced() != 0) {
    _internal_set_include_unannounced(from._internal_include_unannounced());
  }
}

void ChannelGraphRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelGraphRequest::CopyFrom(const ChannelGraphRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelGraphRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelGraphRequest::IsInitialized() const {
  return true;
}

void ChannelGraphRequest::InternalSwap(ChannelGraphRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(include_unannounced_, other->include_unannounced_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelGraphRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelGraph::InitAsDefaultInstance() {
}
class ChannelGraph::_Internal {
 public:
};

ChannelGraph::ChannelGraph()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelGraph)
}
ChannelGraph::ChannelGraph(const ChannelGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      nodes_(from.nodes_),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelGraph)
}

void ChannelGraph::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelGraph_rpc_2eproto.base);
}

ChannelGraph::~ChannelGraph() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelGraph)
  SharedDtor();
}

void ChannelGraph::SharedDtor() {
}

void ChannelGraph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelGraph& ChannelGraph::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelGraph_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  edges_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelGraph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.LightningNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.ChannelEdge edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelGraph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelGraph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.LightningNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  // repeated .lnrpc.ChannelEdge edges = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelGraph)
  return target;
}

size_t ChannelGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelGraph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.LightningNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.ChannelEdge edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelGraph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelGraph)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelGraph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelGraph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelGraph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelGraph)
    MergeFrom(*source);
  }
}

void ChannelGraph::MergeFrom(const ChannelGraph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelGraph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  edges_.MergeFrom(from.edges_);
}

void ChannelGraph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelGraph::CopyFrom(const ChannelGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelGraph::IsInitialized() const {
  return true;
}

void ChannelGraph::InternalSwap(ChannelGraph* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelGraph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NodeMetricsRequest::InitAsDefaultInstance() {
}
class NodeMetricsRequest::_Internal {
 public:
};

NodeMetricsRequest::NodeMetricsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeMetricsRequest)
}
NodeMetricsRequest::NodeMetricsRequest(const NodeMetricsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      types_(from.types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeMetricsRequest)
}

void NodeMetricsRequest::SharedCtor() {
}

NodeMetricsRequest::~NodeMetricsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeMetricsRequest)
  SharedDtor();
}

void NodeMetricsRequest::SharedDtor() {
}

void NodeMetricsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeMetricsRequest& NodeMetricsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeMetricsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeMetricsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  _internal_metadata_.Clear();
}

const char* NodeMetricsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.NodeMetricType types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::lnrpc::NodeMetricType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeMetricsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeMetricsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.NodeMetricType types = 1;
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, types_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeMetricsRequest)
  return target;
}

size_t NodeMetricsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeMetricsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.NodeMetricType types = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeMetricsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetricsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeMetricsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeMetricsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeMetricsRequest)
    MergeFrom(*source);
  }
}

void NodeMetricsRequest::MergeFrom(const NodeMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeMetricsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
}

void NodeMetricsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetricsRequest::CopyFrom(const NodeMetricsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeMetricsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetricsRequest::IsInitialized() const {
  return true;
}

void NodeMetricsRequest::InternalSwap(NodeMetricsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeMetricsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse() {}
NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::MergeFrom(const NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NodeMetricsResponse::InitAsDefaultInstance() {
}
class NodeMetricsResponse::_Internal {
 public:
};

NodeMetricsResponse::NodeMetricsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeMetricsResponse)
}
NodeMetricsResponse::NodeMetricsResponse(const NodeMetricsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  betweenness_centrality_.MergeFrom(from.betweenness_centrality_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeMetricsResponse)
}

void NodeMetricsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeMetricsResponse_rpc_2eproto.base);
}

NodeMetricsResponse::~NodeMetricsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeMetricsResponse)
  SharedDtor();
}

void NodeMetricsResponse::SharedDtor() {
}

void NodeMetricsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeMetricsResponse& NodeMetricsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeMetricsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeMetricsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  betweenness_centrality_.Clear();
  _internal_metadata_.Clear();
}

const char* NodeMetricsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .lnrpc.FloatMetric> betweenness_centrality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&betweenness_centrality_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeMetricsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeMetricsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .lnrpc.FloatMetric> betweenness_centrality = 1;
  if (!this->_internal_betweenness_centrality().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lnrpc.NodeMetricsResponse.BetweennessCentralityEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_betweenness_centrality().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_betweenness_centrality().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >::const_iterator
          it = this->_internal_betweenness_centrality().begin();
          it != this->_internal_betweenness_centrality().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >::const_iterator
          it = this->_internal_betweenness_centrality().begin();
          it != this->_internal_betweenness_centrality().end(); ++it) {
        target = NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeMetricsResponse)
  return target;
}

size_t NodeMetricsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeMetricsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .lnrpc.FloatMetric> betweenness_centrality = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_betweenness_centrality_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >::const_iterator
      it = this->_internal_betweenness_centrality().begin();
      it != this->_internal_betweenness_centrality().end(); ++it) {
    total_size += NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeMetricsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeMetricsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeMetricsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeMetricsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeMetricsResponse)
    MergeFrom(*source);
  }
}

void NodeMetricsResponse::MergeFrom(const NodeMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeMetricsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  betweenness_centrality_.MergeFrom(from.betweenness_centrality_);
}

void NodeMetricsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeMetricsResponse::CopyFrom(const NodeMetricsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeMetricsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeMetricsResponse::IsInitialized() const {
  return true;
}

void NodeMetricsResponse::InternalSwap(NodeMetricsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  betweenness_centrality_.Swap(&other->betweenness_centrality_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeMetricsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FloatMetric::InitAsDefaultInstance() {
}
class FloatMetric::_Internal {
 public:
};

FloatMetric::FloatMetric()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FloatMetric)
}
FloatMetric::FloatMetric(const FloatMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&normalized_value_) -
    reinterpret_cast<char*>(&value_)) + sizeof(normalized_value_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.FloatMetric)
}

void FloatMetric::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalized_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(normalized_value_));
}

FloatMetric::~FloatMetric() {
  // @@protoc_insertion_point(destructor:lnrpc.FloatMetric)
  SharedDtor();
}

void FloatMetric::SharedDtor() {
}

void FloatMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FloatMetric& FloatMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FloatMetric_rpc_2eproto.base);
  return *internal_default_instance();
}


void FloatMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FloatMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&normalized_value_) -
      reinterpret_cast<char*>(&value_)) + sizeof(normalized_value_));
  _internal_metadata_.Clear();
}

const char* FloatMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double normalized_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          normalized_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FloatMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FloatMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // double normalized_value = 2;
  if (!(this->normalized_value() <= 0 && this->normalized_value() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_normalized_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FloatMetric)
  return target;
}

size_t FloatMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FloatMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value = 1;
  if (!(this->value() <= 0 && this->value() >= 0)) {
    total_size += 1 + 8;
  }

  // double normalized_value = 2;
  if (!(this->normalized_value() <= 0 && this->normalized_value() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FloatMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const FloatMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FloatMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FloatMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FloatMetric)
    MergeFrom(*source);
  }
}

void FloatMetric::MergeFrom(const FloatMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FloatMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value() <= 0 && from.value() >= 0)) {
    _internal_set_value(from._internal_value());
  }
  if (!(from.normalized_value() <= 0 && from.normalized_value() >= 0)) {
    _internal_set_normalized_value(from._internal_normalized_value());
  }
}

void FloatMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FloatMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FloatMetric::CopyFrom(const FloatMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FloatMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatMetric::IsInitialized() const {
  return true;
}

void FloatMetric::InternalSwap(FloatMetric* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(normalized_value_, other->normalized_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FloatMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChanInfoRequest::InitAsDefaultInstance() {
}
class ChanInfoRequest::_Internal {
 public:
};

ChanInfoRequest::ChanInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChanInfoRequest)
}
ChanInfoRequest::ChanInfoRequest(const ChanInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chan_id_ = from.chan_id_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChanInfoRequest)
}

void ChanInfoRequest::SharedCtor() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}

ChanInfoRequest::~ChanInfoRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ChanInfoRequest)
  SharedDtor();
}

void ChanInfoRequest::SharedDtor() {
}

void ChanInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChanInfoRequest& ChanInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChanInfoRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChanInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChanInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ChanInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chan_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChanInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChanInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChanInfoRequest)
  return target;
}

size_t ChanInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChanInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChanInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChanInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChanInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChanInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChanInfoRequest)
    MergeFrom(*source);
  }
}

void ChanInfoRequest::MergeFrom(const ChanInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChanInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
}

void ChanInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChanInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanInfoRequest::CopyFrom(const ChanInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChanInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanInfoRequest::IsInitialized() const {
  return true;
}

void ChanInfoRequest::InternalSwap(ChanInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chan_id_, other->chan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChanInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkInfoRequest::InitAsDefaultInstance() {
}
class NetworkInfoRequest::_Internal {
 public:
};

NetworkInfoRequest::NetworkInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NetworkInfoRequest)
}
NetworkInfoRequest::NetworkInfoRequest(const NetworkInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.NetworkInfoRequest)
}

void NetworkInfoRequest::SharedCtor() {
}

NetworkInfoRequest::~NetworkInfoRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.NetworkInfoRequest)
  SharedDtor();
}

void NetworkInfoRequest::SharedDtor() {
}

void NetworkInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInfoRequest& NetworkInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkInfoRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void NetworkInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NetworkInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* NetworkInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NetworkInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NetworkInfoRequest)
  return target;
}

size_t NetworkInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NetworkInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NetworkInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NetworkInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NetworkInfoRequest)
    MergeFrom(*source);
  }
}

void NetworkInfoRequest::MergeFrom(const NetworkInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NetworkInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NetworkInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NetworkInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfoRequest::CopyFrom(const NetworkInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NetworkInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfoRequest::IsInitialized() const {
  return true;
}

void NetworkInfoRequest::InternalSwap(NetworkInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkInfo::InitAsDefaultInstance() {
}
class NetworkInfo::_Internal {
 public:
};

NetworkInfo::NetworkInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&avg_out_degree_, &from.avg_out_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_zombie_chans_) -
    reinterpret_cast<char*>(&avg_out_degree_)) + sizeof(num_zombie_chans_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.NetworkInfo)
}

void NetworkInfo::SharedCtor() {
  ::memset(&avg_out_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_zombie_chans_) -
      reinterpret_cast<char*>(&avg_out_degree_)) + sizeof(num_zombie_chans_));
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:lnrpc.NetworkInfo)
  SharedDtor();
}

void NetworkInfo::SharedDtor() {
}

void NetworkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkInfo& NetworkInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkInfo_rpc_2eproto.base);
  return *internal_default_instance();
}


void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NetworkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&avg_out_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_zombie_chans_) -
      reinterpret_cast<char*>(&avg_out_degree_)) + sizeof(num_zombie_chans_));
  _internal_metadata_.Clear();
}

const char* NetworkInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 graph_diameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          graph_diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avg_out_degree = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          avg_out_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 max_out_degree = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_out_degree_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_nodes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_channels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 total_network_capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_network_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double avg_channel_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          avg_channel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 min_channel_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_channel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_channel_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          max_channel_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 median_channel_size_sat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          median_channel_size_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_zombie_chans = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          num_zombie_chans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NetworkInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 graph_diameter = 1;
  if (this->graph_diameter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_graph_diameter(), target);
  }

  // double avg_out_degree = 2;
  if (!(this->avg_out_degree() <= 0 && this->avg_out_degree() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_avg_out_degree(), target);
  }

  // uint32 max_out_degree = 3;
  if (this->max_out_degree() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_out_degree(), target);
  }

  // uint32 num_nodes = 4;
  if (this->num_nodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_nodes(), target);
  }

  // uint32 num_channels = 5;
  if (this->num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_channels(), target);
  }

  // int64 total_network_capacity = 6;
  if (this->total_network_capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_total_network_capacity(), target);
  }

  // double avg_channel_size = 7;
  if (!(this->avg_channel_size() <= 0 && this->avg_channel_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_avg_channel_size(), target);
  }

  // int64 min_channel_size = 8;
  if (this->min_channel_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_min_channel_size(), target);
  }

  // int64 max_channel_size = 9;
  if (this->max_channel_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_max_channel_size(), target);
  }

  // int64 median_channel_size_sat = 10;
  if (this->median_channel_size_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_median_channel_size_sat(), target);
  }

  // uint64 num_zombie_chans = 11;
  if (this->num_zombie_chans() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_num_zombie_chans(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NetworkInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double avg_out_degree = 2;
  if (!(this->avg_out_degree() <= 0 && this->avg_out_degree() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 graph_diameter = 1;
  if (this->graph_diameter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_graph_diameter());
  }

  // uint32 max_out_degree = 3;
  if (this->max_out_degree() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_out_degree());
  }

  // uint32 num_nodes = 4;
  if (this->num_nodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_nodes());
  }

  // uint32 num_channels = 5;
  if (this->num_channels() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_channels());
  }

  // int64 total_network_capacity = 6;
  if (this->total_network_capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_total_network_capacity());
  }

  // double avg_channel_size = 7;
  if (!(this->avg_channel_size() <= 0 && this->avg_channel_size() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 min_channel_size = 8;
  if (this->min_channel_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_channel_size());
  }

  // int64 max_channel_size = 9;
  if (this->max_channel_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_channel_size());
  }

  // int64 median_channel_size_sat = 10;
  if (this->median_channel_size_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_median_channel_size_sat());
  }

  // uint64 num_zombie_chans = 11;
  if (this->num_zombie_chans() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_zombie_chans());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NetworkInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NetworkInfo)
    MergeFrom(*source);
  }
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.avg_out_degree() <= 0 && from.avg_out_degree() >= 0)) {
    _internal_set_avg_out_degree(from._internal_avg_out_degree());
  }
  if (from.graph_diameter() != 0) {
    _internal_set_graph_diameter(from._internal_graph_diameter());
  }
  if (from.max_out_degree() != 0) {
    _internal_set_max_out_degree(from._internal_max_out_degree());
  }
  if (from.num_nodes() != 0) {
    _internal_set_num_nodes(from._internal_num_nodes());
  }
  if (from.num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
  if (from.total_network_capacity() != 0) {
    _internal_set_total_network_capacity(from._internal_total_network_capacity());
  }
  if (!(from.avg_channel_size() <= 0 && from.avg_channel_size() >= 0)) {
    _internal_set_avg_channel_size(from._internal_avg_channel_size());
  }
  if (from.min_channel_size() != 0) {
    _internal_set_min_channel_size(from._internal_min_channel_size());
  }
  if (from.max_channel_size() != 0) {
    _internal_set_max_channel_size(from._internal_max_channel_size());
  }
  if (from.median_channel_size_sat() != 0) {
    _internal_set_median_channel_size_sat(from._internal_median_channel_size_sat());
  }
  if (from.num_zombie_chans() != 0) {
    _internal_set_num_zombie_chans(from._internal_num_zombie_chans());
  }
}

void NetworkInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(avg_out_degree_, other->avg_out_degree_);
  swap(graph_diameter_, other->graph_diameter_);
  swap(max_out_degree_, other->max_out_degree_);
  swap(num_nodes_, other->num_nodes_);
  swap(num_channels_, other->num_channels_);
  swap(total_network_capacity_, other->total_network_capacity_);
  swap(avg_channel_size_, other->avg_channel_size_);
  swap(min_channel_size_, other->min_channel_size_);
  swap(max_channel_size_, other->max_channel_size_);
  swap(median_channel_size_sat_, other->median_channel_size_sat_);
  swap(num_zombie_chans_, other->num_zombie_chans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopRequest::InitAsDefaultInstance() {
}
class StopRequest::_Internal {
 public:
};

StopRequest::StopRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.StopRequest)
}

void StopRequest::SharedCtor() {
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.StopRequest)
  SharedDtor();
}

void StopRequest::SharedDtor() {
}

void StopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopRequest& StopRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StopRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.StopRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.StopRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.StopRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.StopRequest)
    MergeFrom(*source);
  }
}

void StopRequest::MergeFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.StopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopResponse::InitAsDefaultInstance() {
}
class StopResponse::_Internal {
 public:
};

StopResponse::StopResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.StopResponse)
}

void StopResponse::SharedCtor() {
}

StopResponse::~StopResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.StopResponse)
  SharedDtor();
}

void StopResponse::SharedDtor() {
}

void StopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopResponse& StopResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void StopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StopResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.StopResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.StopResponse)
  return target;
}

size_t StopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.StopResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.StopResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.StopResponse)
    MergeFrom(*source);
  }
}

void StopResponse::MergeFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.StopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopResponse::CopyFrom(const StopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.StopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopResponse::IsInitialized() const {
  return true;
}

void StopResponse::InternalSwap(StopResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTopologySubscription::InitAsDefaultInstance() {
}
class GraphTopologySubscription::_Internal {
 public:
};

GraphTopologySubscription::GraphTopologySubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GraphTopologySubscription)
}
GraphTopologySubscription::GraphTopologySubscription(const GraphTopologySubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.GraphTopologySubscription)
}

void GraphTopologySubscription::SharedCtor() {
}

GraphTopologySubscription::~GraphTopologySubscription() {
  // @@protoc_insertion_point(destructor:lnrpc.GraphTopologySubscription)
  SharedDtor();
}

void GraphTopologySubscription::SharedDtor() {
}

void GraphTopologySubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTopologySubscription& GraphTopologySubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTopologySubscription_rpc_2eproto.base);
  return *internal_default_instance();
}


void GraphTopologySubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GraphTopologySubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GraphTopologySubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTopologySubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GraphTopologySubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GraphTopologySubscription)
  return target;
}

size_t GraphTopologySubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GraphTopologySubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTopologySubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GraphTopologySubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTopologySubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTopologySubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GraphTopologySubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GraphTopologySubscription)
    MergeFrom(*source);
  }
}

void GraphTopologySubscription::MergeFrom(const GraphTopologySubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GraphTopologySubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GraphTopologySubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GraphTopologySubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTopologySubscription::CopyFrom(const GraphTopologySubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GraphTopologySubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTopologySubscription::IsInitialized() const {
  return true;
}

void GraphTopologySubscription::InternalSwap(GraphTopologySubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTopologySubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GraphTopologyUpdate::InitAsDefaultInstance() {
}
class GraphTopologyUpdate::_Internal {
 public:
};

GraphTopologyUpdate::GraphTopologyUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.GraphTopologyUpdate)
}
GraphTopologyUpdate::GraphTopologyUpdate(const GraphTopologyUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      node_updates_(from.node_updates_),
      channel_updates_(from.channel_updates_),
      closed_chans_(from.closed_chans_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.GraphTopologyUpdate)
}

void GraphTopologyUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GraphTopologyUpdate_rpc_2eproto.base);
}

GraphTopologyUpdate::~GraphTopologyUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.GraphTopologyUpdate)
  SharedDtor();
}

void GraphTopologyUpdate::SharedDtor() {
}

void GraphTopologyUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GraphTopologyUpdate& GraphTopologyUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GraphTopologyUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void GraphTopologyUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.GraphTopologyUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_updates_.Clear();
  channel_updates_.Clear();
  closed_chans_.Clear();
  _internal_metadata_.Clear();
}

const char* GraphTopologyUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.NodeUpdate node_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_closed_chans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GraphTopologyUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.GraphTopologyUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.NodeUpdate node_updates = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_node_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_node_updates(i), target, stream);
  }

  // repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_channel_updates(i), target, stream);
  }

  // repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_closed_chans_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_closed_chans(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.GraphTopologyUpdate)
  return target;
}

size_t GraphTopologyUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.GraphTopologyUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.NodeUpdate node_updates = 1;
  total_size += 1UL * this->_internal_node_updates_size();
  for (const auto& msg : this->node_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;
  total_size += 1UL * this->_internal_channel_updates_size();
  for (const auto& msg : this->channel_updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;
  total_size += 1UL * this->_internal_closed_chans_size();
  for (const auto& msg : this->closed_chans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphTopologyUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.GraphTopologyUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphTopologyUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GraphTopologyUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.GraphTopologyUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.GraphTopologyUpdate)
    MergeFrom(*source);
  }
}

void GraphTopologyUpdate::MergeFrom(const GraphTopologyUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.GraphTopologyUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_updates_.MergeFrom(from.node_updates_);
  channel_updates_.MergeFrom(from.channel_updates_);
  closed_chans_.MergeFrom(from.closed_chans_);
}

void GraphTopologyUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.GraphTopologyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphTopologyUpdate::CopyFrom(const GraphTopologyUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.GraphTopologyUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTopologyUpdate::IsInitialized() const {
  return true;
}

void GraphTopologyUpdate::InternalSwap(GraphTopologyUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_updates_.InternalSwap(&other->node_updates_);
  channel_updates_.InternalSwap(&other->channel_updates_);
  closed_chans_.InternalSwap(&other->closed_chans_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTopologyUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

NodeUpdate_FeaturesEntry_DoNotUse::NodeUpdate_FeaturesEntry_DoNotUse() {}
NodeUpdate_FeaturesEntry_DoNotUse::NodeUpdate_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void NodeUpdate_FeaturesEntry_DoNotUse::MergeFrom(const NodeUpdate_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata NodeUpdate_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void NodeUpdate_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void NodeUpdate::InitAsDefaultInstance() {
}
class NodeUpdate::_Internal {
 public:
};

NodeUpdate::NodeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.NodeUpdate)
}
NodeUpdate::NodeUpdate(const NodeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identity_key().empty()) {
    identity_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_key_);
  }
  global_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_global_features().empty()) {
    global_features_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.global_features_);
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.NodeUpdate)
}

void NodeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NodeUpdate_rpc_2eproto.base);
  identity_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_features_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NodeUpdate::~NodeUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.NodeUpdate)
  SharedDtor();
}

void NodeUpdate::SharedDtor() {
  identity_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_features_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NodeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NodeUpdate& NodeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NodeUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void NodeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.NodeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  features_.Clear();
  identity_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  global_features_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NodeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string addresses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeUpdate.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string identity_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identity_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeUpdate.identity_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes global_features = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_global_features();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeUpdate.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.NodeUpdate.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NodeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.NodeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string addresses = 1;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeUpdate.addresses");
    target = stream->WriteString(1, s, target);
  }

  // string identity_key = 2;
  if (this->identity_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identity_key().data(), static_cast<int>(this->_internal_identity_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeUpdate.identity_key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identity_key(), target);
  }

  // bytes global_features = 3 [deprecated = true];
  if (this->global_features().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_global_features(), target);
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeUpdate.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  // string color = 5;
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.NodeUpdate.color");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_color(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 6;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = NodeUpdate_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = NodeUpdate_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.NodeUpdate)
  return target;
}

size_t NodeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.NodeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // map<uint32, .lnrpc.Feature> features = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += NodeUpdate_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string identity_key = 2;
  if (this->identity_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identity_key());
  }

  // bytes global_features = 3 [deprecated = true];
  if (this->global_features().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_global_features());
  }

  // string alias = 4;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string color = 5;
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.NodeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NodeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.NodeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.NodeUpdate)
    MergeFrom(*source);
  }
}

void NodeUpdate::MergeFrom(const NodeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.NodeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  features_.MergeFrom(from.features_);
  if (from.identity_key().size() > 0) {

    identity_key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identity_key_);
  }
  if (from.global_features().size() > 0) {

    global_features_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.global_features_);
  }
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.color().size() > 0) {

    color_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.color_);
  }
}

void NodeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.NodeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeUpdate::CopyFrom(const NodeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.NodeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeUpdate::IsInitialized() const {
  return true;
}

void NodeUpdate::InternalSwap(NodeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  features_.Swap(&other->features_);
  identity_key_.Swap(&other->identity_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  global_features_.Swap(&other->global_features_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NodeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelEdgeUpdate::InitAsDefaultInstance() {
  ::lnrpc::_ChannelEdgeUpdate_default_instance_._instance.get_mutable()->chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
  ::lnrpc::_ChannelEdgeUpdate_default_instance_._instance.get_mutable()->routing_policy_ = const_cast< ::lnrpc::RoutingPolicy*>(
      ::lnrpc::RoutingPolicy::internal_default_instance());
}
class ChannelEdgeUpdate::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const ChannelEdgeUpdate* msg);
  static const ::lnrpc::RoutingPolicy& routing_policy(const ChannelEdgeUpdate* msg);
};

const ::lnrpc::ChannelPoint&
ChannelEdgeUpdate::_Internal::chan_point(const ChannelEdgeUpdate* msg) {
  return *msg->chan_point_;
}
const ::lnrpc::RoutingPolicy&
ChannelEdgeUpdate::_Internal::routing_policy(const ChannelEdgeUpdate* msg) {
  return *msg->routing_policy_;
}
ChannelEdgeUpdate::ChannelEdgeUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelEdgeUpdate)
}
ChannelEdgeUpdate::ChannelEdgeUpdate(const ChannelEdgeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  advertising_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_advertising_node().empty()) {
    advertising_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.advertising_node_);
  }
  connecting_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connecting_node().empty()) {
    connecting_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connecting_node_);
  }
  if (from._internal_has_chan_point()) {
    chan_point_ = new ::lnrpc::ChannelPoint(*from.chan_point_);
  } else {
    chan_point_ = nullptr;
  }
  if (from._internal_has_routing_policy()) {
    routing_policy_ = new ::lnrpc::RoutingPolicy(*from.routing_policy_);
  } else {
    routing_policy_ = nullptr;
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacity_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(capacity_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelEdgeUpdate)
}

void ChannelEdgeUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelEdgeUpdate_rpc_2eproto.base);
  advertising_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connecting_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&chan_point_)) + sizeof(capacity_));
}

ChannelEdgeUpdate::~ChannelEdgeUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelEdgeUpdate)
  SharedDtor();
}

void ChannelEdgeUpdate::SharedDtor() {
  advertising_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connecting_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chan_point_;
  if (this != internal_default_instance()) delete routing_policy_;
}

void ChannelEdgeUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelEdgeUpdate& ChannelEdgeUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelEdgeUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelEdgeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelEdgeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  advertising_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connecting_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && routing_policy_ != nullptr) {
    delete routing_policy_;
  }
  routing_policy_ = nullptr;
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacity_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(capacity_));
  _internal_metadata_.Clear();
}

const char* ChannelEdgeUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chan_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint chan_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.RoutingPolicy routing_policy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string advertising_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_advertising_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelEdgeUpdate.advertising_node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connecting_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_connecting_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelEdgeUpdate.connecting_node"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelEdgeUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelEdgeUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chan_id(), target);
  }

  // .lnrpc.ChannelPoint chan_point = 2;
  if (this->has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chan_point(this), target, stream);
  }

  // int64 capacity = 3;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_capacity(), target);
  }

  // .lnrpc.RoutingPolicy routing_policy = 4;
  if (this->has_routing_policy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::routing_policy(this), target, stream);
  }

  // string advertising_node = 5;
  if (this->advertising_node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_advertising_node().data(), static_cast<int>(this->_internal_advertising_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelEdgeUpdate.advertising_node");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_advertising_node(), target);
  }

  // string connecting_node = 6;
  if (this->connecting_node().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connecting_node().data(), static_cast<int>(this->_internal_connecting_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelEdgeUpdate.connecting_node");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_connecting_node(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelEdgeUpdate)
  return target;
}

size_t ChannelEdgeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelEdgeUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string advertising_node = 5;
  if (this->advertising_node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_advertising_node());
  }

  // string connecting_node = 6;
  if (this->connecting_node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connecting_node());
  }

  // .lnrpc.ChannelPoint chan_point = 2;
  if (this->has_chan_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chan_point_);
  }

  // .lnrpc.RoutingPolicy routing_policy = 4;
  if (this->has_routing_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_policy_);
  }

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // int64 capacity = 3;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelEdgeUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelEdgeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelEdgeUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelEdgeUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelEdgeUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelEdgeUpdate)
    MergeFrom(*source);
  }
}

void ChannelEdgeUpdate::MergeFrom(const ChannelEdgeUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelEdgeUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.advertising_node().size() > 0) {

    advertising_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.advertising_node_);
  }
  if (from.connecting_node().size() > 0) {

    connecting_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connecting_node_);
  }
  if (from.has_chan_point()) {
    _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
  }
  if (from.has_routing_policy()) {
    _internal_mutable_routing_policy()->::lnrpc::RoutingPolicy::MergeFrom(from._internal_routing_policy());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
}

void ChannelEdgeUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelEdgeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelEdgeUpdate::CopyFrom(const ChannelEdgeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelEdgeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelEdgeUpdate::IsInitialized() const {
  return true;
}

void ChannelEdgeUpdate::InternalSwap(ChannelEdgeUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  advertising_node_.Swap(&other->advertising_node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  connecting_node_.Swap(&other->connecting_node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_point_, other->chan_point_);
  swap(routing_policy_, other->routing_policy_);
  swap(chan_id_, other->chan_id_);
  swap(capacity_, other->capacity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelEdgeUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClosedChannelUpdate::InitAsDefaultInstance() {
  ::lnrpc::_ClosedChannelUpdate_default_instance_._instance.get_mutable()->chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class ClosedChannelUpdate::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const ClosedChannelUpdate* msg);
};

const ::lnrpc::ChannelPoint&
ClosedChannelUpdate::_Internal::chan_point(const ClosedChannelUpdate* msg) {
  return *msg->chan_point_;
}
ClosedChannelUpdate::ClosedChannelUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ClosedChannelUpdate)
}
ClosedChannelUpdate::ClosedChannelUpdate(const ClosedChannelUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_chan_point()) {
    chan_point_ = new ::lnrpc::ChannelPoint(*from.chan_point_);
  } else {
    chan_point_ = nullptr;
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&closed_height_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(closed_height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ClosedChannelUpdate)
}

void ClosedChannelUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClosedChannelUpdate_rpc_2eproto.base);
  ::memset(&chan_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closed_height_) -
      reinterpret_cast<char*>(&chan_point_)) + sizeof(closed_height_));
}

ClosedChannelUpdate::~ClosedChannelUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ClosedChannelUpdate)
  SharedDtor();
}

void ClosedChannelUpdate::SharedDtor() {
  if (this != internal_default_instance()) delete chan_point_;
}

void ClosedChannelUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClosedChannelUpdate& ClosedChannelUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClosedChannelUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ClosedChannelUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ClosedChannelUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closed_height_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(closed_height_));
  _internal_metadata_.Clear();
}

const char* ClosedChannelUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chan_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 closed_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          closed_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint chan_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClosedChannelUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ClosedChannelUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chan_id(), target);
  }

  // int64 capacity = 2;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_capacity(), target);
  }

  // uint32 closed_height = 3;
  if (this->closed_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_closed_height(), target);
  }

  // .lnrpc.ChannelPoint chan_point = 4;
  if (this->has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::chan_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ClosedChannelUpdate)
  return target;
}

size_t ClosedChannelUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ClosedChannelUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint chan_point = 4;
  if (this->has_chan_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chan_point_);
  }

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // int64 capacity = 2;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // uint32 closed_height = 3;
  if (this->closed_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_closed_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClosedChannelUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ClosedChannelUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ClosedChannelUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClosedChannelUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ClosedChannelUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ClosedChannelUpdate)
    MergeFrom(*source);
  }
}

void ClosedChannelUpdate::MergeFrom(const ClosedChannelUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ClosedChannelUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chan_point()) {
    _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.closed_height() != 0) {
    _internal_set_closed_height(from._internal_closed_height());
  }
}

void ClosedChannelUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ClosedChannelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClosedChannelUpdate::CopyFrom(const ClosedChannelUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ClosedChannelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClosedChannelUpdate::IsInitialized() const {
  return true;
}

void ClosedChannelUpdate::InternalSwap(ClosedChannelUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chan_point_, other->chan_point_);
  swap(chan_id_, other->chan_id_);
  swap(capacity_, other->capacity_);
  swap(closed_height_, other->closed_height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClosedChannelUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HopHint::InitAsDefaultInstance() {
}
class HopHint::_Internal {
 public:
};

HopHint::HopHint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.HopHint)
}
HopHint::HopHint(const HopHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cltv_expiry_delta_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(cltv_expiry_delta_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.HopHint)
}

void HopHint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HopHint_rpc_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cltv_expiry_delta_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(cltv_expiry_delta_));
}

HopHint::~HopHint() {
  // @@protoc_insertion_point(destructor:lnrpc.HopHint)
  SharedDtor();
}

void HopHint::SharedDtor() {
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HopHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HopHint& HopHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HopHint_rpc_2eproto.base);
  return *internal_default_instance();
}


void HopHint::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.HopHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cltv_expiry_delta_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(cltv_expiry_delta_));
  _internal_metadata_.Clear();
}

const char* HopHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.HopHint.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fee_base_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_base_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fee_proportional_millionths = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fee_proportional_millionths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cltv_expiry_delta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          cltv_expiry_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HopHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.HopHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.HopHint.node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_id(), target);
  }

  // uint64 chan_id = 2 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chan_id(), target);
  }

  // uint32 fee_base_msat = 3;
  if (this->fee_base_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_fee_base_msat(), target);
  }

  // uint32 fee_proportional_millionths = 4;
  if (this->fee_proportional_millionths() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_fee_proportional_millionths(), target);
  }

  // uint32 cltv_expiry_delta = 5;
  if (this->cltv_expiry_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cltv_expiry_delta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.HopHint)
  return target;
}

size_t HopHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.HopHint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 1;
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // uint64 chan_id = 2 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // uint32 fee_base_msat = 3;
  if (this->fee_base_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fee_base_msat());
  }

  // uint32 fee_proportional_millionths = 4;
  if (this->fee_proportional_millionths() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fee_proportional_millionths());
  }

  // uint32 cltv_expiry_delta = 5;
  if (this->cltv_expiry_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cltv_expiry_delta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HopHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.HopHint)
  GOOGLE_DCHECK_NE(&from, this);
  const HopHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HopHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.HopHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.HopHint)
    MergeFrom(*source);
  }
}

void HopHint::MergeFrom(const HopHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.HopHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {

    node_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_id_);
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.fee_base_msat() != 0) {
    _internal_set_fee_base_msat(from._internal_fee_base_msat());
  }
  if (from.fee_proportional_millionths() != 0) {
    _internal_set_fee_proportional_millionths(from._internal_fee_proportional_millionths());
  }
  if (from.cltv_expiry_delta() != 0) {
    _internal_set_cltv_expiry_delta(from._internal_cltv_expiry_delta());
  }
}

void HopHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.HopHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HopHint::CopyFrom(const HopHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.HopHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HopHint::IsInitialized() const {
  return true;
}

void HopHint::InternalSwap(HopHint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_id_, other->chan_id_);
  swap(fee_base_msat_, other->fee_base_msat_);
  swap(fee_proportional_millionths_, other->fee_proportional_millionths_);
  swap(cltv_expiry_delta_, other->cltv_expiry_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HopHint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteHint::InitAsDefaultInstance() {
}
class RouteHint::_Internal {
 public:
};

RouteHint::RouteHint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.RouteHint)
}
RouteHint::RouteHint(const RouteHint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hop_hints_(from.hop_hints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.RouteHint)
}

void RouteHint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteHint_rpc_2eproto.base);
}

RouteHint::~RouteHint() {
  // @@protoc_insertion_point(destructor:lnrpc.RouteHint)
  SharedDtor();
}

void RouteHint::SharedDtor() {
}

void RouteHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteHint& RouteHint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteHint_rpc_2eproto.base);
  return *internal_default_instance();
}


void RouteHint::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.RouteHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_hints_.Clear();
  _internal_metadata_.Clear();
}

const char* RouteHint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.HopHint hop_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hop_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteHint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.RouteHint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.HopHint hop_hints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hop_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_hop_hints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.RouteHint)
  return target;
}

size_t RouteHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.RouteHint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.HopHint hop_hints = 1;
  total_size += 1UL * this->_internal_hop_hints_size();
  for (const auto& msg : this->hop_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteHint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.RouteHint)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteHint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteHint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.RouteHint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.RouteHint)
    MergeFrom(*source);
  }
}

void RouteHint::MergeFrom(const RouteHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.RouteHint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_hints_.MergeFrom(from.hop_hints_);
}

void RouteHint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.RouteHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteHint::CopyFrom(const RouteHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.RouteHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteHint::IsInitialized() const {
  return true;
}

void RouteHint::InternalSwap(RouteHint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hop_hints_.InternalSwap(&other->hop_hints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteHint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Invoice_FeaturesEntry_DoNotUse::Invoice_FeaturesEntry_DoNotUse() {}
Invoice_FeaturesEntry_DoNotUse::Invoice_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Invoice_FeaturesEntry_DoNotUse::MergeFrom(const Invoice_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Invoice_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Invoice_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Invoice::InitAsDefaultInstance() {
}
class Invoice::_Internal {
 public:
};

Invoice::Invoice()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Invoice)
}
Invoice::Invoice(const Invoice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      route_hints_(from.route_hints_),
      htlcs_(from.htlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memo().empty()) {
    memo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  r_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_preimage().empty()) {
    r_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_preimage_);
  }
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_hash().empty()) {
    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_request().empty()) {
    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  description_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description_hash().empty()) {
    description_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
  }
  fallback_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fallback_addr().empty()) {
    fallback_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fallback_addr_);
  }
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_addr().empty()) {
    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_msat_) -
    reinterpret_cast<char*>(&value_)) + sizeof(value_msat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Invoice)
}

void Invoice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Invoice_rpc_2eproto.base);
  memo_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_msat_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_msat_));
}

Invoice::~Invoice() {
  // @@protoc_insertion_point(destructor:lnrpc.Invoice)
  SharedDtor();
}

void Invoice::SharedDtor() {
  memo_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Invoice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Invoice& Invoice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Invoice_rpc_2eproto.base);
  return *internal_default_instance();
}


void Invoice::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Invoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_hints_.Clear();
  htlcs_.Clear();
  features_.Clear();
  memo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_msat_) -
      reinterpret_cast<char*>(&value_)) + sizeof(value_msat_));
  _internal_metadata_.Clear();
}

const char* Invoice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string memo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_memo();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Invoice.memo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes r_preimage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_r_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes r_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_r_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool settled = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          settled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creation_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          creation_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 settle_date = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          settle_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_payment_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Invoice.payment_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes description_hash = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_description_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fallback_addr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_fallback_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Invoice.fallback_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 cltv_expiry = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          cltv_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.RouteHint route_hints = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // bool private = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 add_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          add_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 settle_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          settle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_paid = 18 [deprecated = true];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          amt_paid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_paid_sat = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          amt_paid_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_paid_msat = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          amt_paid_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Invoice.InvoiceState state = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::lnrpc::Invoice_InvoiceState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.InvoiceHTLC htlcs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_htlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 value_msat = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          value_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_keysend = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          is_keysend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_addr = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_payment_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Invoice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Invoice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string memo = 1;
  if (this->memo().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memo().data(), static_cast<int>(this->_internal_memo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Invoice.memo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_memo(), target);
  }

  // bytes r_preimage = 3;
  if (this->r_preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_r_preimage(), target);
  }

  // bytes r_hash = 4;
  if (this->r_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_r_hash(), target);
  }

  // int64 value = 5;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_value(), target);
  }

  // bool settled = 6 [deprecated = true];
  if (this->settled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_settled(), target);
  }

  // int64 creation_date = 7;
  if (this->creation_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_creation_date(), target);
  }

  // int64 settle_date = 8;
  if (this->settle_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_settle_date(), target);
  }

  // string payment_request = 9;
  if (this->payment_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_request().data(), static_cast<int>(this->_internal_payment_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Invoice.payment_request");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_payment_request(), target);
  }

  // bytes description_hash = 10;
  if (this->description_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_description_hash(), target);
  }

  // int64 expiry = 11;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_expiry(), target);
  }

  // string fallback_addr = 12;
  if (this->fallback_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fallback_addr().data(), static_cast<int>(this->_internal_fallback_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Invoice.fallback_addr");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_fallback_addr(), target);
  }

  // uint64 cltv_expiry = 13;
  if (this->cltv_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_cltv_expiry(), target);
  }

  // repeated .lnrpc.RouteHint route_hints = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_route_hints(i), target, stream);
  }

  // bool private = 15;
  if (this->private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_private_(), target);
  }

  // uint64 add_index = 16;
  if (this->add_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_add_index(), target);
  }

  // uint64 settle_index = 17;
  if (this->settle_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_settle_index(), target);
  }

  // int64 amt_paid = 18 [deprecated = true];
  if (this->amt_paid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(18, this->_internal_amt_paid(), target);
  }

  // int64 amt_paid_sat = 19;
  if (this->amt_paid_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_amt_paid_sat(), target);
  }

  // int64 amt_paid_msat = 20;
  if (this->amt_paid_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(20, this->_internal_amt_paid_msat(), target);
  }

  // .lnrpc.Invoice.InvoiceState state = 21;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_state(), target);
  }

  // repeated .lnrpc.InvoiceHTLC htlcs = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_htlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_htlcs(i), target, stream);
  }

  // int64 value_msat = 23;
  if (this->value_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(23, this->_internal_value_msat(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 24;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Invoice_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(24, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = Invoice_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(24, it->first, it->second, target, stream);
      }
    }
  }

  // bool is_keysend = 25;
  if (this->is_keysend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(25, this->_internal_is_keysend(), target);
  }

  // bytes payment_addr = 26;
  if (this->payment_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        26, this->_internal_payment_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Invoice)
  return target;
}

size_t Invoice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Invoice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.RouteHint route_hints = 14;
  total_size += 1UL * this->_internal_route_hints_size();
  for (const auto& msg : this->route_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .lnrpc.InvoiceHTLC htlcs = 22;
  total_size += 2UL * this->_internal_htlcs_size();
  for (const auto& msg : this->htlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, .lnrpc.Feature> features = 24;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += Invoice_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string memo = 1;
  if (this->memo().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memo());
  }

  // bytes r_preimage = 3;
  if (this->r_preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r_preimage());
  }

  // bytes r_hash = 4;
  if (this->r_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r_hash());
  }

  // string payment_request = 9;
  if (this->payment_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_request());
  }

  // bytes description_hash = 10;
  if (this->description_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_description_hash());
  }

  // string fallback_addr = 12;
  if (this->fallback_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fallback_addr());
  }

  // bytes payment_addr = 26;
  if (this->payment_addr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_addr());
  }

  // int64 value = 5;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int64 creation_date = 7;
  if (this->creation_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_date());
  }

  // int64 settle_date = 8;
  if (this->settle_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_settle_date());
  }

  // int64 expiry = 11;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  // uint64 cltv_expiry = 13;
  if (this->cltv_expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_cltv_expiry());
  }

  // uint64 add_index = 16;
  if (this->add_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_add_index());
  }

  // bool settled = 6 [deprecated = true];
  if (this->settled() != 0) {
    total_size += 1 + 1;
  }

  // bool private = 15;
  if (this->private_() != 0) {
    total_size += 1 + 1;
  }

  // bool is_keysend = 25;
  if (this->is_keysend() != 0) {
    total_size += 2 + 1;
  }

  // .lnrpc.Invoice.InvoiceState state = 21;
  if (this->state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint64 settle_index = 17;
  if (this->settle_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_settle_index());
  }

  // int64 amt_paid = 18 [deprecated = true];
  if (this->amt_paid() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_paid());
  }

  // int64 amt_paid_sat = 19;
  if (this->amt_paid_sat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_paid_sat());
  }

  // int64 amt_paid_msat = 20;
  if (this->amt_paid_msat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_paid_msat());
  }

  // int64 value_msat = 23;
  if (this->value_msat() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Invoice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Invoice)
  GOOGLE_DCHECK_NE(&from, this);
  const Invoice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Invoice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Invoice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Invoice)
    MergeFrom(*source);
  }
}

void Invoice::MergeFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Invoice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_hints_.MergeFrom(from.route_hints_);
  htlcs_.MergeFrom(from.htlcs_);
  features_.MergeFrom(from.features_);
  if (from.memo().size() > 0) {

    memo_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memo_);
  }
  if (from.r_preimage().size() > 0) {

    r_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_preimage_);
  }
  if (from.r_hash().size() > 0) {

    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  if (from.payment_request().size() > 0) {

    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  if (from.description_hash().size() > 0) {

    description_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
  }
  if (from.fallback_addr().size() > 0) {

    fallback_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fallback_addr_);
  }
  if (from.payment_addr().size() > 0) {

    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.creation_date() != 0) {
    _internal_set_creation_date(from._internal_creation_date());
  }
  if (from.settle_date() != 0) {
    _internal_set_settle_date(from._internal_settle_date());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.cltv_expiry() != 0) {
    _internal_set_cltv_expiry(from._internal_cltv_expiry());
  }
  if (from.add_index() != 0) {
    _internal_set_add_index(from._internal_add_index());
  }
  if (from.settled() != 0) {
    _internal_set_settled(from._internal_settled());
  }
  if (from.private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from.is_keysend() != 0) {
    _internal_set_is_keysend(from._internal_is_keysend());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.settle_index() != 0) {
    _internal_set_settle_index(from._internal_settle_index());
  }
  if (from.amt_paid() != 0) {
    _internal_set_amt_paid(from._internal_amt_paid());
  }
  if (from.amt_paid_sat() != 0) {
    _internal_set_amt_paid_sat(from._internal_amt_paid_sat());
  }
  if (from.amt_paid_msat() != 0) {
    _internal_set_amt_paid_msat(from._internal_amt_paid_msat());
  }
  if (from.value_msat() != 0) {
    _internal_set_value_msat(from._internal_value_msat());
  }
}

void Invoice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Invoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invoice::CopyFrom(const Invoice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Invoice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invoice::IsInitialized() const {
  return true;
}

void Invoice::InternalSwap(Invoice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_hints_.InternalSwap(&other->route_hints_);
  htlcs_.InternalSwap(&other->htlcs_);
  features_.Swap(&other->features_);
  memo_.Swap(&other->memo_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_preimage_.Swap(&other->r_preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_hash_.Swap(&other->r_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_request_.Swap(&other->payment_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_hash_.Swap(&other->description_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fallback_addr_.Swap(&other->fallback_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_addr_.Swap(&other->payment_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(creation_date_, other->creation_date_);
  swap(settle_date_, other->settle_date_);
  swap(expiry_, other->expiry_);
  swap(cltv_expiry_, other->cltv_expiry_);
  swap(add_index_, other->add_index_);
  swap(settled_, other->settled_);
  swap(private__, other->private__);
  swap(is_keysend_, other->is_keysend_);
  swap(state_, other->state_);
  swap(settle_index_, other->settle_index_);
  swap(amt_paid_, other->amt_paid_);
  swap(amt_paid_sat_, other->amt_paid_sat_);
  swap(amt_paid_msat_, other->amt_paid_msat_);
  swap(value_msat_, other->value_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Invoice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InvoiceHTLC_CustomRecordsEntry_DoNotUse::InvoiceHTLC_CustomRecordsEntry_DoNotUse() {}
InvoiceHTLC_CustomRecordsEntry_DoNotUse::InvoiceHTLC_CustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InvoiceHTLC_CustomRecordsEntry_DoNotUse::MergeFrom(const InvoiceHTLC_CustomRecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InvoiceHTLC_CustomRecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InvoiceHTLC_CustomRecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InvoiceHTLC::InitAsDefaultInstance() {
  ::lnrpc::_InvoiceHTLC_default_instance_._instance.get_mutable()->amp_ = const_cast< ::lnrpc::AMP*>(
      ::lnrpc::AMP::internal_default_instance());
}
class InvoiceHTLC::_Internal {
 public:
  static const ::lnrpc::AMP& amp(const InvoiceHTLC* msg);
};

const ::lnrpc::AMP&
InvoiceHTLC::_Internal::amp(const InvoiceHTLC* msg) {
  return *msg->amp_;
}
InvoiceHTLC::InvoiceHTLC()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.InvoiceHTLC)
}
InvoiceHTLC::InvoiceHTLC(const InvoiceHTLC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  custom_records_.MergeFrom(from.custom_records_);
  if (from._internal_has_amp()) {
    amp_ = new ::lnrpc::AMP(*from.amp_);
  } else {
    amp_ = nullptr;
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.InvoiceHTLC)
}

void InvoiceHTLC::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvoiceHTLC_rpc_2eproto.base);
  ::memset(&amp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&amp_)) + sizeof(state_));
}

InvoiceHTLC::~InvoiceHTLC() {
  // @@protoc_insertion_point(destructor:lnrpc.InvoiceHTLC)
  SharedDtor();
}

void InvoiceHTLC::SharedDtor() {
  if (this != internal_default_instance()) delete amp_;
}

void InvoiceHTLC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvoiceHTLC& InvoiceHTLC::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvoiceHTLC_rpc_2eproto.base);
  return *internal_default_instance();
}


void InvoiceHTLC::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.InvoiceHTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_records_.Clear();
  if (GetArenaNoVirtual() == nullptr && amp_ != nullptr) {
    delete amp_;
  }
  amp_ = nullptr;
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(state_));
  _internal_metadata_.Clear();
}

const char* InvoiceHTLC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chan_id = 1 [jstype = JS_STRING];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 htlc_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          htlc_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amt_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 accept_height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          accept_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 accept_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          accept_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 resolve_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          resolve_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 expiry_height = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          expiry_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.InvoiceHTLCState state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::lnrpc::InvoiceHTLCState>(val));
        } else goto handle_unusual;
        continue;
      // map<uint64, bytes> custom_records = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&custom_records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 mpp_total_amt_msat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          mpp_total_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.AMP amp = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_amp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvoiceHTLC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.InvoiceHTLC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chan_id(), target);
  }

  // uint64 htlc_index = 2;
  if (this->htlc_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_htlc_index(), target);
  }

  // uint64 amt_msat = 3;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_amt_msat(), target);
  }

  // int32 accept_height = 4;
  if (this->accept_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_accept_height(), target);
  }

  // int64 accept_time = 5;
  if (this->accept_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_accept_time(), target);
  }

  // int64 resolve_time = 6;
  if (this->resolve_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_resolve_time(), target);
  }

  // int32 expiry_height = 7;
  if (this->expiry_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_expiry_height(), target);
  }

  // .lnrpc.InvoiceHTLCState state = 8;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_state(), target);
  }

  // map<uint64, bytes> custom_records = 9;
  if (!this->_internal_custom_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_custom_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_custom_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_custom_records().begin();
          it != this->_internal_custom_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InvoiceHTLC_CustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_custom_records().begin();
          it != this->_internal_custom_records().end(); ++it) {
        target = InvoiceHTLC_CustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
      }
    }
  }

  // uint64 mpp_total_amt_msat = 10;
  if (this->mpp_total_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_mpp_total_amt_msat(), target);
  }

  // .lnrpc.AMP amp = 11;
  if (this->has_amp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::amp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.InvoiceHTLC)
  return target;
}

size_t InvoiceHTLC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.InvoiceHTLC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, bytes> custom_records = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_custom_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_custom_records().begin();
      it != this->_internal_custom_records().end(); ++it) {
    total_size += InvoiceHTLC_CustomRecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .lnrpc.AMP amp = 11;
  if (this->has_amp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amp_);
  }

  // uint64 chan_id = 1 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // uint64 htlc_index = 2;
  if (this->htlc_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_htlc_index());
  }

  // uint64 amt_msat = 3;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amt_msat());
  }

  // int64 accept_time = 5;
  if (this->accept_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_accept_time());
  }

  // int32 accept_height = 4;
  if (this->accept_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_accept_height());
  }

  // int32 expiry_height = 7;
  if (this->expiry_height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_expiry_height());
  }

  // int64 resolve_time = 6;
  if (this->resolve_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resolve_time());
  }

  // uint64 mpp_total_amt_msat = 10;
  if (this->mpp_total_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_mpp_total_amt_msat());
  }

  // .lnrpc.InvoiceHTLCState state = 8;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvoiceHTLC::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.InvoiceHTLC)
  GOOGLE_DCHECK_NE(&from, this);
  const InvoiceHTLC* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvoiceHTLC>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.InvoiceHTLC)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.InvoiceHTLC)
    MergeFrom(*source);
  }
}

void InvoiceHTLC::MergeFrom(const InvoiceHTLC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.InvoiceHTLC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_records_.MergeFrom(from.custom_records_);
  if (from.has_amp()) {
    _internal_mutable_amp()->::lnrpc::AMP::MergeFrom(from._internal_amp());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.htlc_index() != 0) {
    _internal_set_htlc_index(from._internal_htlc_index());
  }
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
  if (from.accept_time() != 0) {
    _internal_set_accept_time(from._internal_accept_time());
  }
  if (from.accept_height() != 0) {
    _internal_set_accept_height(from._internal_accept_height());
  }
  if (from.expiry_height() != 0) {
    _internal_set_expiry_height(from._internal_expiry_height());
  }
  if (from.resolve_time() != 0) {
    _internal_set_resolve_time(from._internal_resolve_time());
  }
  if (from.mpp_total_amt_msat() != 0) {
    _internal_set_mpp_total_amt_msat(from._internal_mpp_total_amt_msat());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void InvoiceHTLC::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.InvoiceHTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceHTLC::CopyFrom(const InvoiceHTLC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.InvoiceHTLC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceHTLC::IsInitialized() const {
  return true;
}

void InvoiceHTLC::InternalSwap(InvoiceHTLC* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  custom_records_.Swap(&other->custom_records_);
  swap(amp_, other->amp_);
  swap(chan_id_, other->chan_id_);
  swap(htlc_index_, other->htlc_index_);
  swap(amt_msat_, other->amt_msat_);
  swap(accept_time_, other->accept_time_);
  swap(accept_height_, other->accept_height_);
  swap(expiry_height_, other->expiry_height_);
  swap(resolve_time_, other->resolve_time_);
  swap(mpp_total_amt_msat_, other->mpp_total_amt_msat_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceHTLC::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AMP::InitAsDefaultInstance() {
}
class AMP::_Internal {
 public:
};

AMP::AMP()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.AMP)
}
AMP::AMP(const AMP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_root_share().empty()) {
    root_share_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_share_);
  }
  set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_set_id().empty()) {
    set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.set_id_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preimage().empty()) {
    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  child_index_ = from.child_index_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.AMP)
}

void AMP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AMP_rpc_2eproto.base);
  root_share_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_index_ = 0u;
}

AMP::~AMP() {
  // @@protoc_insertion_point(destructor:lnrpc.AMP)
  SharedDtor();
}

void AMP::SharedDtor() {
  root_share_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AMP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AMP& AMP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AMP_rpc_2eproto.base);
  return *internal_default_instance();
}


void AMP::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.AMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_share_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  child_index_ = 0u;
  _internal_metadata_.Clear();
}

const char* AMP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes root_share = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_root_share();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes set_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_set_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 child_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          child_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes preimage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AMP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.AMP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes root_share = 1;
  if (this->root_share().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_root_share(), target);
  }

  // bytes set_id = 2;
  if (this->set_id().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_set_id(), target);
  }

  // uint32 child_index = 3;
  if (this->child_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_child_index(), target);
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_hash(), target);
  }

  // bytes preimage = 5;
  if (this->preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_preimage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.AMP)
  return target;
}

size_t AMP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.AMP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes root_share = 1;
  if (this->root_share().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_root_share());
  }

  // bytes set_id = 2;
  if (this->set_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_set_id());
  }

  // bytes hash = 4;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes preimage = 5;
  if (this->preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimage());
  }

  // uint32 child_index = 3;
  if (this->child_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_child_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AMP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.AMP)
  GOOGLE_DCHECK_NE(&from, this);
  const AMP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AMP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.AMP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.AMP)
    MergeFrom(*source);
  }
}

void AMP::MergeFrom(const AMP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.AMP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root_share().size() > 0) {

    root_share_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.root_share_);
  }
  if (from.set_id().size() > 0) {

    set_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.set_id_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.preimage().size() > 0) {

    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from.child_index() != 0) {
    _internal_set_child_index(from._internal_child_index());
  }
}

void AMP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.AMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AMP::CopyFrom(const AMP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.AMP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AMP::IsInitialized() const {
  return true;
}

void AMP::InternalSwap(AMP* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  root_share_.Swap(&other->root_share_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  set_id_.Swap(&other->set_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  preimage_.Swap(&other->preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(child_index_, other->child_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AMP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddInvoiceResponse::InitAsDefaultInstance() {
}
class AddInvoiceResponse::_Internal {
 public:
};

AddInvoiceResponse::AddInvoiceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.AddInvoiceResponse)
}
AddInvoiceResponse::AddInvoiceResponse(const AddInvoiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_hash().empty()) {
    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_request().empty()) {
    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_addr().empty()) {
    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  add_index_ = from.add_index_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.AddInvoiceResponse)
}

void AddInvoiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddInvoiceResponse_rpc_2eproto.base);
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_index_ = PROTOBUF_ULONGLONG(0);
}

AddInvoiceResponse::~AddInvoiceResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.AddInvoiceResponse)
  SharedDtor();
}

void AddInvoiceResponse::SharedDtor() {
  r_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddInvoiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddInvoiceResponse& AddInvoiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddInvoiceResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AddInvoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.AddInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  add_index_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* AddInvoiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes r_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_r_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.AddInvoiceResponse.payment_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 add_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          add_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_addr = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_payment_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddInvoiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.AddInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes r_hash = 1;
  if (this->r_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_r_hash(), target);
  }

  // string payment_request = 2;
  if (this->payment_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_request().data(), static_cast<int>(this->_internal_payment_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.AddInvoiceResponse.payment_request");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_request(), target);
  }

  // uint64 add_index = 16;
  if (this->add_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_add_index(), target);
  }

  // bytes payment_addr = 17;
  if (this->payment_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        17, this->_internal_payment_addr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.AddInvoiceResponse)
  return target;
}

size_t AddInvoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.AddInvoiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes r_hash = 1;
  if (this->r_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r_hash());
  }

  // string payment_request = 2;
  if (this->payment_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_request());
  }

  // bytes payment_addr = 17;
  if (this->payment_addr().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_addr());
  }

  // uint64 add_index = 16;
  if (this->add_index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_add_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddInvoiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.AddInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddInvoiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddInvoiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.AddInvoiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.AddInvoiceResponse)
    MergeFrom(*source);
  }
}

void AddInvoiceResponse::MergeFrom(const AddInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.AddInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r_hash().size() > 0) {

    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  if (from.payment_request().size() > 0) {

    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  if (from.payment_addr().size() > 0) {

    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from.add_index() != 0) {
    _internal_set_add_index(from._internal_add_index());
  }
}

void AddInvoiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.AddInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddInvoiceResponse::CopyFrom(const AddInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.AddInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddInvoiceResponse::IsInitialized() const {
  return true;
}

void AddInvoiceResponse::InternalSwap(AddInvoiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  r_hash_.Swap(&other->r_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_request_.Swap(&other->payment_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_addr_.Swap(&other->payment_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(add_index_, other->add_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddInvoiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentHash::InitAsDefaultInstance() {
}
class PaymentHash::_Internal {
 public:
};

PaymentHash::PaymentHash()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PaymentHash)
}
PaymentHash::PaymentHash(const PaymentHash& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  r_hash_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_hash_str().empty()) {
    r_hash_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_str_);
  }
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r_hash().empty()) {
    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.PaymentHash)
}

void PaymentHash::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentHash_rpc_2eproto.base);
  r_hash_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PaymentHash::~PaymentHash() {
  // @@protoc_insertion_point(destructor:lnrpc.PaymentHash)
  SharedDtor();
}

void PaymentHash::SharedDtor() {
  r_hash_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentHash::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentHash& PaymentHash::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentHash_rpc_2eproto.base);
  return *internal_default_instance();
}


void PaymentHash::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PaymentHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_hash_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PaymentHash::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string r_hash_str = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_r_hash_str();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PaymentHash.r_hash_str"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes r_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_r_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentHash::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PaymentHash)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string r_hash_str = 1 [deprecated = true];
  if (this->r_hash_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_r_hash_str().data(), static_cast<int>(this->_internal_r_hash_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PaymentHash.r_hash_str");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_r_hash_str(), target);
  }

  // bytes r_hash = 2;
  if (this->r_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_r_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PaymentHash)
  return target;
}

size_t PaymentHash::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PaymentHash)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string r_hash_str = 1 [deprecated = true];
  if (this->r_hash_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_r_hash_str());
  }

  // bytes r_hash = 2;
  if (this->r_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentHash::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PaymentHash)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentHash* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentHash>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PaymentHash)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PaymentHash)
    MergeFrom(*source);
  }
}

void PaymentHash::MergeFrom(const PaymentHash& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PaymentHash)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r_hash_str().size() > 0) {

    r_hash_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_str_);
  }
  if (from.r_hash().size() > 0) {

    r_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_hash_);
  }
}

void PaymentHash::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PaymentHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentHash::CopyFrom(const PaymentHash& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PaymentHash)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentHash::IsInitialized() const {
  return true;
}

void PaymentHash::InternalSwap(PaymentHash* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  r_hash_str_.Swap(&other->r_hash_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_hash_.Swap(&other->r_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentHash::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInvoiceRequest::InitAsDefaultInstance() {
}
class ListInvoiceRequest::_Internal {
 public:
};

ListInvoiceRequest::ListInvoiceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListInvoiceRequest)
}
ListInvoiceRequest::ListInvoiceRequest(const ListInvoiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_offset_, &from.index_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&reversed_) -
    reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListInvoiceRequest)
}

void ListInvoiceRequest::SharedCtor() {
  ::memset(&index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
}

ListInvoiceRequest::~ListInvoiceRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListInvoiceRequest)
  SharedDtor();
}

void ListInvoiceRequest::SharedDtor() {
}

void ListInvoiceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInvoiceRequest& ListInvoiceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInvoiceRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListInvoiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListInvoiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
  _internal_metadata_.Clear();
}

const char* ListInvoiceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool pending_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_max_invoices = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_max_invoices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reversed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInvoiceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListInvoiceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool pending_only = 1;
  if (this->pending_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_pending_only(), target);
  }

  // uint64 index_offset = 4;
  if (this->index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_index_offset(), target);
  }

  // uint64 num_max_invoices = 5;
  if (this->num_max_invoices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_num_max_invoices(), target);
  }

  // bool reversed = 6;
  if (this->reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reversed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListInvoiceRequest)
  return target;
}

size_t ListInvoiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListInvoiceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index_offset = 4;
  if (this->index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_offset());
  }

  // uint64 num_max_invoices = 5;
  if (this->num_max_invoices() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_num_max_invoices());
  }

  // bool pending_only = 1;
  if (this->pending_only() != 0) {
    total_size += 1 + 1;
  }

  // bool reversed = 6;
  if (this->reversed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInvoiceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListInvoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInvoiceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInvoiceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListInvoiceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListInvoiceRequest)
    MergeFrom(*source);
  }
}

void ListInvoiceRequest::MergeFrom(const ListInvoiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListInvoiceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_offset() != 0) {
    _internal_set_index_offset(from._internal_index_offset());
  }
  if (from.num_max_invoices() != 0) {
    _internal_set_num_max_invoices(from._internal_num_max_invoices());
  }
  if (from.pending_only() != 0) {
    _internal_set_pending_only(from._internal_pending_only());
  }
  if (from.reversed() != 0) {
    _internal_set_reversed(from._internal_reversed());
  }
}

void ListInvoiceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListInvoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInvoiceRequest::CopyFrom(const ListInvoiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListInvoiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInvoiceRequest::IsInitialized() const {
  return true;
}

void ListInvoiceRequest::InternalSwap(ListInvoiceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_offset_, other->index_offset_);
  swap(num_max_invoices_, other->num_max_invoices_);
  swap(pending_only_, other->pending_only_);
  swap(reversed_, other->reversed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInvoiceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListInvoiceResponse::InitAsDefaultInstance() {
}
class ListInvoiceResponse::_Internal {
 public:
};

ListInvoiceResponse::ListInvoiceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListInvoiceResponse)
}
ListInvoiceResponse::ListInvoiceResponse(const ListInvoiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      invoices_(from.invoices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&last_index_offset_, &from.last_index_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&first_index_offset_) -
    reinterpret_cast<char*>(&last_index_offset_)) + sizeof(first_index_offset_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListInvoiceResponse)
}

void ListInvoiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListInvoiceResponse_rpc_2eproto.base);
  ::memset(&last_index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_index_offset_) -
      reinterpret_cast<char*>(&last_index_offset_)) + sizeof(first_index_offset_));
}

ListInvoiceResponse::~ListInvoiceResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListInvoiceResponse)
  SharedDtor();
}

void ListInvoiceResponse::SharedDtor() {
}

void ListInvoiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListInvoiceResponse& ListInvoiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListInvoiceResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListInvoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  invoices_.Clear();
  ::memset(&last_index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&first_index_offset_) -
      reinterpret_cast<char*>(&last_index_offset_)) + sizeof(first_index_offset_));
  _internal_metadata_.Clear();
}

const char* ListInvoiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Invoice invoices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invoices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 last_index_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 first_index_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListInvoiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Invoice invoices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invoices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_invoices(i), target, stream);
  }

  // uint64 last_index_offset = 2;
  if (this->last_index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_index_offset(), target);
  }

  // uint64 first_index_offset = 3;
  if (this->first_index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_first_index_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListInvoiceResponse)
  return target;
}

size_t ListInvoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListInvoiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Invoice invoices = 1;
  total_size += 1UL * this->_internal_invoices_size();
  for (const auto& msg : this->invoices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 last_index_offset = 2;
  if (this->last_index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_index_offset());
  }

  // uint64 first_index_offset = 3;
  if (this->first_index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_first_index_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListInvoiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListInvoiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListInvoiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListInvoiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListInvoiceResponse)
    MergeFrom(*source);
  }
}

void ListInvoiceResponse::MergeFrom(const ListInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  invoices_.MergeFrom(from.invoices_);
  if (from.last_index_offset() != 0) {
    _internal_set_last_index_offset(from._internal_last_index_offset());
  }
  if (from.first_index_offset() != 0) {
    _internal_set_first_index_offset(from._internal_first_index_offset());
  }
}

void ListInvoiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListInvoiceResponse::CopyFrom(const ListInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListInvoiceResponse::IsInitialized() const {
  return true;
}

void ListInvoiceResponse::InternalSwap(ListInvoiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  invoices_.InternalSwap(&other->invoices_);
  swap(last_index_offset_, other->last_index_offset_);
  swap(first_index_offset_, other->first_index_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListInvoiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvoiceSubscription::InitAsDefaultInstance() {
}
class InvoiceSubscription::_Internal {
 public:
};

InvoiceSubscription::InvoiceSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.InvoiceSubscription)
}
InvoiceSubscription::InvoiceSubscription(const InvoiceSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&add_index_, &from.add_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&settle_index_) -
    reinterpret_cast<char*>(&add_index_)) + sizeof(settle_index_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.InvoiceSubscription)
}

void InvoiceSubscription::SharedCtor() {
  ::memset(&add_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settle_index_) -
      reinterpret_cast<char*>(&add_index_)) + sizeof(settle_index_));
}

InvoiceSubscription::~InvoiceSubscription() {
  // @@protoc_insertion_point(destructor:lnrpc.InvoiceSubscription)
  SharedDtor();
}

void InvoiceSubscription::SharedDtor() {
}

void InvoiceSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvoiceSubscription& InvoiceSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvoiceSubscription_rpc_2eproto.base);
  return *internal_default_instance();
}


void InvoiceSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.InvoiceSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&add_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&settle_index_) -
      reinterpret_cast<char*>(&add_index_)) + sizeof(settle_index_));
  _internal_metadata_.Clear();
}

const char* InvoiceSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 add_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          add_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 settle_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          settle_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvoiceSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.InvoiceSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 add_index = 1;
  if (this->add_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_add_index(), target);
  }

  // uint64 settle_index = 2;
  if (this->settle_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_settle_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.InvoiceSubscription)
  return target;
}

size_t InvoiceSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.InvoiceSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 add_index = 1;
  if (this->add_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_add_index());
  }

  // uint64 settle_index = 2;
  if (this->settle_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_settle_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvoiceSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.InvoiceSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const InvoiceSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvoiceSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.InvoiceSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.InvoiceSubscription)
    MergeFrom(*source);
  }
}

void InvoiceSubscription::MergeFrom(const InvoiceSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.InvoiceSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.add_index() != 0) {
    _internal_set_add_index(from._internal_add_index());
  }
  if (from.settle_index() != 0) {
    _internal_set_settle_index(from._internal_settle_index());
  }
}

void InvoiceSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.InvoiceSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceSubscription::CopyFrom(const InvoiceSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.InvoiceSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceSubscription::IsInitialized() const {
  return true;
}

void InvoiceSubscription::InternalSwap(InvoiceSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(add_index_, other->add_index_);
  swap(settle_index_, other->settle_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Payment::InitAsDefaultInstance() {
}
class Payment::_Internal {
 public:
};

Payment::Payment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Payment)
}
Payment::Payment(const Payment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      htlcs_(from.htlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  payment_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_preimage().empty()) {
    payment_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_preimage_);
  }
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_request().empty()) {
    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&payment_index_) -
    reinterpret_cast<char*>(&value_)) + sizeof(payment_index_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Payment)
}

void Payment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Payment_rpc_2eproto.base);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payment_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(payment_index_));
}

Payment::~Payment() {
  // @@protoc_insertion_point(destructor:lnrpc.Payment)
  SharedDtor();
}

void Payment::SharedDtor() {
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Payment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Payment& Payment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Payment_rpc_2eproto.base);
  return *internal_default_instance();
}


void Payment::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  htlcs_.Clear();
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payment_index_) -
      reinterpret_cast<char*>(&value_)) + sizeof(payment_index_));
  _internal_metadata_.Clear();
}

const char* Payment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string payment_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Payment.payment_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creation_date = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          creation_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_preimage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_payment_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Payment.payment_preimage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value_sat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          value_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value_msat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          value_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_payment_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Payment.payment_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Payment.PaymentStatus status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::lnrpc::Payment_PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 fee_sat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          fee_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_msat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 creation_time_ns = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          creation_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.HTLCAttempt htlcs = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_htlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 payment_index = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          payment_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.PaymentFailureReason failure_reason = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_failure_reason(static_cast<::lnrpc::PaymentFailureReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Payment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Payment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_hash().data(), static_cast<int>(this->_internal_payment_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Payment.payment_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_payment_hash(), target);
  }

  // int64 value = 2 [deprecated = true];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_value(), target);
  }

  // int64 creation_date = 3 [deprecated = true];
  if (this->creation_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_creation_date(), target);
  }

  // int64 fee = 5 [deprecated = true];
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_fee(), target);
  }

  // string payment_preimage = 6;
  if (this->payment_preimage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_preimage().data(), static_cast<int>(this->_internal_payment_preimage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Payment.payment_preimage");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_payment_preimage(), target);
  }

  // int64 value_sat = 7;
  if (this->value_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_value_sat(), target);
  }

  // int64 value_msat = 8;
  if (this->value_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_value_msat(), target);
  }

  // string payment_request = 9;
  if (this->payment_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_request().data(), static_cast<int>(this->_internal_payment_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Payment.payment_request");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_payment_request(), target);
  }

  // .lnrpc.Payment.PaymentStatus status = 10;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // int64 fee_sat = 11;
  if (this->fee_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_fee_sat(), target);
  }

  // int64 fee_msat = 12;
  if (this->fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_fee_msat(), target);
  }

  // int64 creation_time_ns = 13;
  if (this->creation_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_creation_time_ns(), target);
  }

  // repeated .lnrpc.HTLCAttempt htlcs = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_htlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_htlcs(i), target, stream);
  }

  // uint64 payment_index = 15;
  if (this->payment_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_payment_index(), target);
  }

  // .lnrpc.PaymentFailureReason failure_reason = 16;
  if (this->failure_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_failure_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Payment)
  return target;
}

size_t Payment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Payment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.HTLCAttempt htlcs = 14;
  total_size += 1UL * this->_internal_htlcs_size();
  for (const auto& msg : this->htlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_hash());
  }

  // string payment_preimage = 6;
  if (this->payment_preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_preimage());
  }

  // string payment_request = 9;
  if (this->payment_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_request());
  }

  // int64 value = 2 [deprecated = true];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int64 creation_date = 3 [deprecated = true];
  if (this->creation_date() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_date());
  }

  // int64 fee = 5 [deprecated = true];
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  // int64 value_sat = 7;
  if (this->value_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value_sat());
  }

  // int64 value_msat = 8;
  if (this->value_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value_msat());
  }

  // int64 fee_sat = 11;
  if (this->fee_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_sat());
  }

  // int64 fee_msat = 12;
  if (this->fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_msat());
  }

  // int64 creation_time_ns = 13;
  if (this->creation_time_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_creation_time_ns());
  }

  // .lnrpc.Payment.PaymentStatus status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .lnrpc.PaymentFailureReason failure_reason = 16;
  if (this->failure_reason() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failure_reason());
  }

  // uint64 payment_index = 15;
  if (this->payment_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_payment_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Payment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  const Payment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Payment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Payment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Payment)
    MergeFrom(*source);
  }
}

void Payment::MergeFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Payment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  htlcs_.MergeFrom(from.htlcs_);
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.payment_preimage().size() > 0) {

    payment_preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_preimage_);
  }
  if (from.payment_request().size() > 0) {

    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.creation_date() != 0) {
    _internal_set_creation_date(from._internal_creation_date());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.value_sat() != 0) {
    _internal_set_value_sat(from._internal_value_sat());
  }
  if (from.value_msat() != 0) {
    _internal_set_value_msat(from._internal_value_msat());
  }
  if (from.fee_sat() != 0) {
    _internal_set_fee_sat(from._internal_fee_sat());
  }
  if (from.fee_msat() != 0) {
    _internal_set_fee_msat(from._internal_fee_msat());
  }
  if (from.creation_time_ns() != 0) {
    _internal_set_creation_time_ns(from._internal_creation_time_ns());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.failure_reason() != 0) {
    _internal_set_failure_reason(from._internal_failure_reason());
  }
  if (from.payment_index() != 0) {
    _internal_set_payment_index(from._internal_payment_index());
  }
}

void Payment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Payment::CopyFrom(const Payment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Payment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Payment::IsInitialized() const {
  return true;
}

void Payment::InternalSwap(Payment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  htlcs_.InternalSwap(&other->htlcs_);
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_preimage_.Swap(&other->payment_preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_request_.Swap(&other->payment_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(creation_date_, other->creation_date_);
  swap(fee_, other->fee_);
  swap(value_sat_, other->value_sat_);
  swap(value_msat_, other->value_msat_);
  swap(fee_sat_, other->fee_sat_);
  swap(fee_msat_, other->fee_msat_);
  swap(creation_time_ns_, other->creation_time_ns_);
  swap(status_, other->status_);
  swap(failure_reason_, other->failure_reason_);
  swap(payment_index_, other->payment_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Payment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTLCAttempt::InitAsDefaultInstance() {
  ::lnrpc::_HTLCAttempt_default_instance_._instance.get_mutable()->route_ = const_cast< ::lnrpc::Route*>(
      ::lnrpc::Route::internal_default_instance());
  ::lnrpc::_HTLCAttempt_default_instance_._instance.get_mutable()->failure_ = const_cast< ::lnrpc::Failure*>(
      ::lnrpc::Failure::internal_default_instance());
}
class HTLCAttempt::_Internal {
 public:
  static const ::lnrpc::Route& route(const HTLCAttempt* msg);
  static const ::lnrpc::Failure& failure(const HTLCAttempt* msg);
};

const ::lnrpc::Route&
HTLCAttempt::_Internal::route(const HTLCAttempt* msg) {
  return *msg->route_;
}
const ::lnrpc::Failure&
HTLCAttempt::_Internal::failure(const HTLCAttempt* msg) {
  return *msg->failure_;
}
HTLCAttempt::HTLCAttempt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.HTLCAttempt)
}
HTLCAttempt::HTLCAttempt(const HTLCAttempt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preimage().empty()) {
    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from._internal_has_route()) {
    route_ = new ::lnrpc::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  if (from._internal_has_failure()) {
    failure_ = new ::lnrpc::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  ::memcpy(&attempt_time_ns_, &from.attempt_time_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&attempt_time_ns_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.HTLCAttempt)
}

void HTLCAttempt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTLCAttempt_rpc_2eproto.base);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&route_)) + sizeof(status_));
}

HTLCAttempt::~HTLCAttempt() {
  // @@protoc_insertion_point(destructor:lnrpc.HTLCAttempt)
  SharedDtor();
}

void HTLCAttempt::SharedDtor() {
  preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_;
  if (this != internal_default_instance()) delete failure_;
}

void HTLCAttempt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTLCAttempt& HTLCAttempt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTLCAttempt_rpc_2eproto.base);
  return *internal_default_instance();
}


void HTLCAttempt::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.HTLCAttempt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  ::memset(&attempt_time_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&attempt_time_ns_)) + sizeof(status_));
  _internal_metadata_.Clear();
}

const char* HTLCAttempt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.HTLCAttempt.HTLCStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::lnrpc::HTLCAttempt_HTLCStatus>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.Route route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 attempt_time_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          attempt_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 resolve_time_ns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          resolve_time_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Failure failure = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes preimage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 attempt_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          attempt_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTLCAttempt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.HTLCAttempt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.HTLCAttempt.HTLCStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .lnrpc.Route route = 2;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route(this), target, stream);
  }

  // int64 attempt_time_ns = 3;
  if (this->attempt_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_attempt_time_ns(), target);
  }

  // int64 resolve_time_ns = 4;
  if (this->resolve_time_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_resolve_time_ns(), target);
  }

  // .lnrpc.Failure failure = 5;
  if (this->has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::failure(this), target, stream);
  }

  // bytes preimage = 6;
  if (this->preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_preimage(), target);
  }

  // uint64 attempt_id = 7;
  if (this->attempt_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_attempt_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.HTLCAttempt)
  return target;
}

size_t HTLCAttempt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.HTLCAttempt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes preimage = 6;
  if (this->preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimage());
  }

  // .lnrpc.Route route = 2;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  // .lnrpc.Failure failure = 5;
  if (this->has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // int64 attempt_time_ns = 3;
  if (this->attempt_time_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_attempt_time_ns());
  }

  // int64 resolve_time_ns = 4;
  if (this->resolve_time_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_resolve_time_ns());
  }

  // uint64 attempt_id = 7;
  if (this->attempt_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_attempt_id());
  }

  // .lnrpc.HTLCAttempt.HTLCStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTLCAttempt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.HTLCAttempt)
  GOOGLE_DCHECK_NE(&from, this);
  const HTLCAttempt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTLCAttempt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.HTLCAttempt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.HTLCAttempt)
    MergeFrom(*source);
  }
}

void HTLCAttempt::MergeFrom(const HTLCAttempt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.HTLCAttempt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preimage().size() > 0) {

    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from.has_route()) {
    _internal_mutable_route()->::lnrpc::Route::MergeFrom(from._internal_route());
  }
  if (from.has_failure()) {
    _internal_mutable_failure()->::lnrpc::Failure::MergeFrom(from._internal_failure());
  }
  if (from.attempt_time_ns() != 0) {
    _internal_set_attempt_time_ns(from._internal_attempt_time_ns());
  }
  if (from.resolve_time_ns() != 0) {
    _internal_set_resolve_time_ns(from._internal_resolve_time_ns());
  }
  if (from.attempt_id() != 0) {
    _internal_set_attempt_id(from._internal_attempt_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void HTLCAttempt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.HTLCAttempt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTLCAttempt::CopyFrom(const HTLCAttempt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.HTLCAttempt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTLCAttempt::IsInitialized() const {
  return true;
}

void HTLCAttempt::InternalSwap(HTLCAttempt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  preimage_.Swap(&other->preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(route_, other->route_);
  swap(failure_, other->failure_);
  swap(attempt_time_ns_, other->attempt_time_ns_);
  swap(resolve_time_ns_, other->resolve_time_ns_);
  swap(attempt_id_, other->attempt_id_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HTLCAttempt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentsRequest::InitAsDefaultInstance() {
}
class ListPaymentsRequest::_Internal {
 public:
};

ListPaymentsRequest::ListPaymentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPaymentsRequest)
}
ListPaymentsRequest::ListPaymentsRequest(const ListPaymentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_offset_, &from.index_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&reversed_) -
    reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPaymentsRequest)
}

void ListPaymentsRequest::SharedCtor() {
  ::memset(&index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
}

ListPaymentsRequest::~ListPaymentsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPaymentsRequest)
  SharedDtor();
}

void ListPaymentsRequest::SharedDtor() {
}

void ListPaymentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentsRequest& ListPaymentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reversed_) -
      reinterpret_cast<char*>(&index_offset_)) + sizeof(reversed_));
  _internal_metadata_.Clear();
}

const char* ListPaymentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_incomplete = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_incomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 index_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_payments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_payments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reversed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          reversed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_incomplete = 1;
  if (this->include_incomplete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_incomplete(), target);
  }

  // uint64 index_offset = 2;
  if (this->index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index_offset(), target);
  }

  // uint64 max_payments = 3;
  if (this->max_payments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_max_payments(), target);
  }

  // bool reversed = 4;
  if (this->reversed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_reversed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPaymentsRequest)
  return target;
}

size_t ListPaymentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPaymentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 index_offset = 2;
  if (this->index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_index_offset());
  }

  // uint64 max_payments = 3;
  if (this->max_payments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_payments());
  }

  // bool include_incomplete = 1;
  if (this->include_incomplete() != 0) {
    total_size += 1 + 1;
  }

  // bool reversed = 4;
  if (this->reversed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPaymentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPaymentsRequest)
    MergeFrom(*source);
  }
}

void ListPaymentsRequest::MergeFrom(const ListPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_offset() != 0) {
    _internal_set_index_offset(from._internal_index_offset());
  }
  if (from.max_payments() != 0) {
    _internal_set_max_payments(from._internal_max_payments());
  }
  if (from.include_incomplete() != 0) {
    _internal_set_include_incomplete(from._internal_include_incomplete());
  }
  if (from.reversed() != 0) {
    _internal_set_reversed(from._internal_reversed());
  }
}

void ListPaymentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentsRequest::CopyFrom(const ListPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentsRequest::IsInitialized() const {
  return true;
}

void ListPaymentsRequest::InternalSwap(ListPaymentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(index_offset_, other->index_offset_);
  swap(max_payments_, other->max_payments_);
  swap(include_incomplete_, other->include_incomplete_);
  swap(reversed_, other->reversed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPaymentsResponse::InitAsDefaultInstance() {
}
class ListPaymentsResponse::_Internal {
 public:
};

ListPaymentsResponse::ListPaymentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPaymentsResponse)
}
ListPaymentsResponse::ListPaymentsResponse(const ListPaymentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      payments_(from.payments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&first_index_offset_, &from.first_index_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_index_offset_) -
    reinterpret_cast<char*>(&first_index_offset_)) + sizeof(last_index_offset_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPaymentsResponse)
}

void ListPaymentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPaymentsResponse_rpc_2eproto.base);
  ::memset(&first_index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_offset_) -
      reinterpret_cast<char*>(&first_index_offset_)) + sizeof(last_index_offset_));
}

ListPaymentsResponse::~ListPaymentsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPaymentsResponse)
  SharedDtor();
}

void ListPaymentsResponse::SharedDtor() {
}

void ListPaymentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPaymentsResponse& ListPaymentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPaymentsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPaymentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payments_.Clear();
  ::memset(&first_index_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_index_offset_) -
      reinterpret_cast<char*>(&first_index_offset_)) + sizeof(last_index_offset_));
  _internal_metadata_.Clear();
}

const char* ListPaymentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.Payment payments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_payments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 first_index_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          first_index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 last_index_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          last_index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPaymentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.Payment payments = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_payments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_payments(i), target, stream);
  }

  // uint64 first_index_offset = 2;
  if (this->first_index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_first_index_offset(), target);
  }

  // uint64 last_index_offset = 3;
  if (this->last_index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_last_index_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPaymentsResponse)
  return target;
}

size_t ListPaymentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPaymentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Payment payments = 1;
  total_size += 1UL * this->_internal_payments_size();
  for (const auto& msg : this->payments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 first_index_offset = 2;
  if (this->first_index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_first_index_offset());
  }

  // uint64 last_index_offset = 3;
  if (this->last_index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_last_index_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPaymentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPaymentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPaymentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPaymentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPaymentsResponse)
    MergeFrom(*source);
  }
}

void ListPaymentsResponse::MergeFrom(const ListPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  payments_.MergeFrom(from.payments_);
  if (from.first_index_offset() != 0) {
    _internal_set_first_index_offset(from._internal_first_index_offset());
  }
  if (from.last_index_offset() != 0) {
    _internal_set_last_index_offset(from._internal_last_index_offset());
  }
}

void ListPaymentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPaymentsResponse::CopyFrom(const ListPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPaymentsResponse::IsInitialized() const {
  return true;
}

void ListPaymentsResponse::InternalSwap(ListPaymentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payments_.InternalSwap(&other->payments_);
  swap(first_index_offset_, other->first_index_offset_);
  swap(last_index_offset_, other->last_index_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPaymentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAllPaymentsRequest::InitAsDefaultInstance() {
}
class DeleteAllPaymentsRequest::_Internal {
 public:
};

DeleteAllPaymentsRequest::DeleteAllPaymentsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DeleteAllPaymentsRequest)
}
DeleteAllPaymentsRequest::DeleteAllPaymentsRequest(const DeleteAllPaymentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&failed_payments_only_, &from.failed_payments_only_,
    static_cast<size_t>(reinterpret_cast<char*>(&failed_htlcs_only_) -
    reinterpret_cast<char*>(&failed_payments_only_)) + sizeof(failed_htlcs_only_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.DeleteAllPaymentsRequest)
}

void DeleteAllPaymentsRequest::SharedCtor() {
  ::memset(&failed_payments_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_htlcs_only_) -
      reinterpret_cast<char*>(&failed_payments_only_)) + sizeof(failed_htlcs_only_));
}

DeleteAllPaymentsRequest::~DeleteAllPaymentsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.DeleteAllPaymentsRequest)
  SharedDtor();
}

void DeleteAllPaymentsRequest::SharedDtor() {
}

void DeleteAllPaymentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAllPaymentsRequest& DeleteAllPaymentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAllPaymentsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteAllPaymentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DeleteAllPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&failed_payments_only_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failed_htlcs_only_) -
      reinterpret_cast<char*>(&failed_payments_only_)) + sizeof(failed_htlcs_only_));
  _internal_metadata_.Clear();
}

const char* DeleteAllPaymentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool failed_payments_only = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          failed_payments_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool failed_htlcs_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          failed_htlcs_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAllPaymentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DeleteAllPaymentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool failed_payments_only = 1;
  if (this->failed_payments_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_failed_payments_only(), target);
  }

  // bool failed_htlcs_only = 2;
  if (this->failed_htlcs_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_failed_htlcs_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DeleteAllPaymentsRequest)
  return target;
}

size_t DeleteAllPaymentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DeleteAllPaymentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool failed_payments_only = 1;
  if (this->failed_payments_only() != 0) {
    total_size += 1 + 1;
  }

  // bool failed_htlcs_only = 2;
  if (this->failed_htlcs_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAllPaymentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DeleteAllPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAllPaymentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAllPaymentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DeleteAllPaymentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DeleteAllPaymentsRequest)
    MergeFrom(*source);
  }
}

void DeleteAllPaymentsRequest::MergeFrom(const DeleteAllPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DeleteAllPaymentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.failed_payments_only() != 0) {
    _internal_set_failed_payments_only(from._internal_failed_payments_only());
  }
  if (from.failed_htlcs_only() != 0) {
    _internal_set_failed_htlcs_only(from._internal_failed_htlcs_only());
  }
}

void DeleteAllPaymentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DeleteAllPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAllPaymentsRequest::CopyFrom(const DeleteAllPaymentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DeleteAllPaymentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAllPaymentsRequest::IsInitialized() const {
  return true;
}

void DeleteAllPaymentsRequest::InternalSwap(DeleteAllPaymentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(failed_payments_only_, other->failed_payments_only_);
  swap(failed_htlcs_only_, other->failed_htlcs_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAllPaymentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAllPaymentsResponse::InitAsDefaultInstance() {
}
class DeleteAllPaymentsResponse::_Internal {
 public:
};

DeleteAllPaymentsResponse::DeleteAllPaymentsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DeleteAllPaymentsResponse)
}
DeleteAllPaymentsResponse::DeleteAllPaymentsResponse(const DeleteAllPaymentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.DeleteAllPaymentsResponse)
}

void DeleteAllPaymentsResponse::SharedCtor() {
}

DeleteAllPaymentsResponse::~DeleteAllPaymentsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.DeleteAllPaymentsResponse)
  SharedDtor();
}

void DeleteAllPaymentsResponse::SharedDtor() {
}

void DeleteAllPaymentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAllPaymentsResponse& DeleteAllPaymentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAllPaymentsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteAllPaymentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DeleteAllPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* DeleteAllPaymentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAllPaymentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DeleteAllPaymentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DeleteAllPaymentsResponse)
  return target;
}

size_t DeleteAllPaymentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DeleteAllPaymentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAllPaymentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DeleteAllPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAllPaymentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAllPaymentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DeleteAllPaymentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DeleteAllPaymentsResponse)
    MergeFrom(*source);
  }
}

void DeleteAllPaymentsResponse::MergeFrom(const DeleteAllPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DeleteAllPaymentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAllPaymentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DeleteAllPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAllPaymentsResponse::CopyFrom(const DeleteAllPaymentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DeleteAllPaymentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAllPaymentsResponse::IsInitialized() const {
  return true;
}

void DeleteAllPaymentsResponse::InternalSwap(DeleteAllPaymentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAllPaymentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbandonChannelRequest::InitAsDefaultInstance() {
  ::lnrpc::_AbandonChannelRequest_default_instance_._instance.get_mutable()->channel_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class AbandonChannelRequest::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& channel_point(const AbandonChannelRequest* msg);
};

const ::lnrpc::ChannelPoint&
AbandonChannelRequest::_Internal::channel_point(const AbandonChannelRequest* msg) {
  return *msg->channel_point_;
}
AbandonChannelRequest::AbandonChannelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.AbandonChannelRequest)
}
AbandonChannelRequest::AbandonChannelRequest(const AbandonChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_channel_point()) {
    channel_point_ = new ::lnrpc::ChannelPoint(*from.channel_point_);
  } else {
    channel_point_ = nullptr;
  }
  pending_funding_shim_only_ = from.pending_funding_shim_only_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.AbandonChannelRequest)
}

void AbandonChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AbandonChannelRequest_rpc_2eproto.base);
  ::memset(&channel_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_funding_shim_only_) -
      reinterpret_cast<char*>(&channel_point_)) + sizeof(pending_funding_shim_only_));
}

AbandonChannelRequest::~AbandonChannelRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.AbandonChannelRequest)
  SharedDtor();
}

void AbandonChannelRequest::SharedDtor() {
  if (this != internal_default_instance()) delete channel_point_;
}

void AbandonChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbandonChannelRequest& AbandonChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbandonChannelRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void AbandonChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.AbandonChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
  pending_funding_shim_only_ = false;
  _internal_metadata_.Clear();
}

const char* AbandonChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelPoint channel_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool pending_funding_shim_only = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          pending_funding_shim_only_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbandonChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.AbandonChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel_point(this), target, stream);
  }

  // bool pending_funding_shim_only = 2;
  if (this->pending_funding_shim_only() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_pending_funding_shim_only(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.AbandonChannelRequest)
  return target;
}

size_t AbandonChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.AbandonChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint channel_point = 1;
  if (this->has_channel_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_point_);
  }

  // bool pending_funding_shim_only = 2;
  if (this->pending_funding_shim_only() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbandonChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.AbandonChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AbandonChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbandonChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.AbandonChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.AbandonChannelRequest)
    MergeFrom(*source);
  }
}

void AbandonChannelRequest::MergeFrom(const AbandonChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.AbandonChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_point()) {
    _internal_mutable_channel_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_channel_point());
  }
  if (from.pending_funding_shim_only() != 0) {
    _internal_set_pending_funding_shim_only(from._internal_pending_funding_shim_only());
  }
}

void AbandonChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.AbandonChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonChannelRequest::CopyFrom(const AbandonChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.AbandonChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonChannelRequest::IsInitialized() const {
  return true;
}

void AbandonChannelRequest::InternalSwap(AbandonChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_point_, other->channel_point_);
  swap(pending_funding_shim_only_, other->pending_funding_shim_only_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbandonChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbandonChannelResponse::InitAsDefaultInstance() {
}
class AbandonChannelResponse::_Internal {
 public:
};

AbandonChannelResponse::AbandonChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.AbandonChannelResponse)
}
AbandonChannelResponse::AbandonChannelResponse(const AbandonChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.AbandonChannelResponse)
}

void AbandonChannelResponse::SharedCtor() {
}

AbandonChannelResponse::~AbandonChannelResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.AbandonChannelResponse)
  SharedDtor();
}

void AbandonChannelResponse::SharedDtor() {
}

void AbandonChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbandonChannelResponse& AbandonChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbandonChannelResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void AbandonChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.AbandonChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AbandonChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbandonChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.AbandonChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.AbandonChannelResponse)
  return target;
}

size_t AbandonChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.AbandonChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbandonChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.AbandonChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AbandonChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbandonChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.AbandonChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.AbandonChannelResponse)
    MergeFrom(*source);
  }
}

void AbandonChannelResponse::MergeFrom(const AbandonChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.AbandonChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AbandonChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.AbandonChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbandonChannelResponse::CopyFrom(const AbandonChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.AbandonChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbandonChannelResponse::IsInitialized() const {
  return true;
}

void AbandonChannelResponse::InternalSwap(AbandonChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbandonChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugLevelRequest::InitAsDefaultInstance() {
}
class DebugLevelRequest::_Internal {
 public:
};

DebugLevelRequest::DebugLevelRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DebugLevelRequest)
}
DebugLevelRequest::DebugLevelRequest(const DebugLevelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  level_spec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level_spec().empty()) {
    level_spec_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.level_spec_);
  }
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.DebugLevelRequest)
}

void DebugLevelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugLevelRequest_rpc_2eproto.base);
  level_spec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_ = false;
}

DebugLevelRequest::~DebugLevelRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.DebugLevelRequest)
  SharedDtor();
}

void DebugLevelRequest::SharedDtor() {
  level_spec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugLevelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugLevelRequest& DebugLevelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugLevelRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DebugLevelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DebugLevelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  level_spec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  show_ = false;
  _internal_metadata_.Clear();
}

const char* DebugLevelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool show = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_level_spec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.DebugLevelRequest.level_spec"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugLevelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DebugLevelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool show = 1;
  if (this->show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_show(), target);
  }

  // string level_spec = 2;
  if (this->level_spec().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level_spec().data(), static_cast<int>(this->_internal_level_spec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.DebugLevelRequest.level_spec");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_level_spec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DebugLevelRequest)
  return target;
}

size_t DebugLevelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DebugLevelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string level_spec = 2;
  if (this->level_spec().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level_spec());
  }

  // bool show = 1;
  if (this->show() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugLevelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DebugLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugLevelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugLevelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DebugLevelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DebugLevelRequest)
    MergeFrom(*source);
  }
}

void DebugLevelRequest::MergeFrom(const DebugLevelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DebugLevelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.level_spec().size() > 0) {

    level_spec_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.level_spec_);
  }
  if (from.show() != 0) {
    _internal_set_show(from._internal_show());
  }
}

void DebugLevelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DebugLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLevelRequest::CopyFrom(const DebugLevelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DebugLevelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLevelRequest::IsInitialized() const {
  return true;
}

void DebugLevelRequest::InternalSwap(DebugLevelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  level_spec_.Swap(&other->level_spec_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_, other->show_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugLevelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DebugLevelResponse::InitAsDefaultInstance() {
}
class DebugLevelResponse::_Internal {
 public:
};

DebugLevelResponse::DebugLevelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DebugLevelResponse)
}
DebugLevelResponse::DebugLevelResponse(const DebugLevelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sub_systems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sub_systems().empty()) {
    sub_systems_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_systems_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.DebugLevelResponse)
}

void DebugLevelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DebugLevelResponse_rpc_2eproto.base);
  sub_systems_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DebugLevelResponse::~DebugLevelResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.DebugLevelResponse)
  SharedDtor();
}

void DebugLevelResponse::SharedDtor() {
  sub_systems_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DebugLevelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DebugLevelResponse& DebugLevelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DebugLevelResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DebugLevelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DebugLevelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sub_systems_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DebugLevelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sub_systems = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sub_systems();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.DebugLevelResponse.sub_systems"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DebugLevelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DebugLevelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sub_systems = 1;
  if (this->sub_systems().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sub_systems().data(), static_cast<int>(this->_internal_sub_systems().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.DebugLevelResponse.sub_systems");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sub_systems(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DebugLevelResponse)
  return target;
}

size_t DebugLevelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DebugLevelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sub_systems = 1;
  if (this->sub_systems().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sub_systems());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DebugLevelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DebugLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DebugLevelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DebugLevelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DebugLevelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DebugLevelResponse)
    MergeFrom(*source);
  }
}

void DebugLevelResponse::MergeFrom(const DebugLevelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DebugLevelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sub_systems().size() > 0) {

    sub_systems_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sub_systems_);
  }
}

void DebugLevelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DebugLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLevelResponse::CopyFrom(const DebugLevelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DebugLevelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLevelResponse::IsInitialized() const {
  return true;
}

void DebugLevelResponse::InternalSwap(DebugLevelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sub_systems_.Swap(&other->sub_systems_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugLevelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PayReqString::InitAsDefaultInstance() {
}
class PayReqString::_Internal {
 public:
};

PayReqString::PayReqString()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PayReqString)
}
PayReqString::PayReqString(const PayReqString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pay_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pay_req().empty()) {
    pay_req_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pay_req_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.PayReqString)
}

void PayReqString::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PayReqString_rpc_2eproto.base);
  pay_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PayReqString::~PayReqString() {
  // @@protoc_insertion_point(destructor:lnrpc.PayReqString)
  SharedDtor();
}

void PayReqString::SharedDtor() {
  pay_req_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayReqString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayReqString& PayReqString::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayReqString_rpc_2eproto.base);
  return *internal_default_instance();
}


void PayReqString::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PayReqString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pay_req_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PayReqString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pay_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pay_req();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReqString.pay_req"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayReqString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PayReqString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pay_req = 1;
  if (this->pay_req().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pay_req().data(), static_cast<int>(this->_internal_pay_req().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReqString.pay_req");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pay_req(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PayReqString)
  return target;
}

size_t PayReqString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PayReqString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pay_req = 1;
  if (this->pay_req().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pay_req());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayReqString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PayReqString)
  GOOGLE_DCHECK_NE(&from, this);
  const PayReqString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayReqString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PayReqString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PayReqString)
    MergeFrom(*source);
  }
}

void PayReqString::MergeFrom(const PayReqString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PayReqString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pay_req().size() > 0) {

    pay_req_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pay_req_);
  }
}

void PayReqString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PayReqString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayReqString::CopyFrom(const PayReqString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PayReqString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayReqString::IsInitialized() const {
  return true;
}

void PayReqString::InternalSwap(PayReqString* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pay_req_.Swap(&other->pay_req_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PayReqString::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PayReq_FeaturesEntry_DoNotUse::PayReq_FeaturesEntry_DoNotUse() {}
PayReq_FeaturesEntry_DoNotUse::PayReq_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PayReq_FeaturesEntry_DoNotUse::MergeFrom(const PayReq_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PayReq_FeaturesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PayReq_FeaturesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PayReq::InitAsDefaultInstance() {
}
class PayReq::_Internal {
 public:
};

PayReq::PayReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PayReq)
}
PayReq::PayReq(const PayReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      route_hints_(from.route_hints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  description_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description_hash().empty()) {
    description_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
  }
  fallback_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fallback_addr().empty()) {
    fallback_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fallback_addr_);
  }
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_addr().empty()) {
    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  ::memcpy(&num_satoshis_, &from.num_satoshis_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_msat_) -
    reinterpret_cast<char*>(&num_satoshis_)) + sizeof(num_msat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.PayReq)
}

void PayReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PayReq_rpc_2eproto.base);
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_satoshis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_msat_) -
      reinterpret_cast<char*>(&num_satoshis_)) + sizeof(num_msat_));
}

PayReq::~PayReq() {
  // @@protoc_insertion_point(destructor:lnrpc.PayReq)
  SharedDtor();
}

void PayReq::SharedDtor() {
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PayReq& PayReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PayReq_rpc_2eproto.base);
  return *internal_default_instance();
}


void PayReq::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PayReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_hints_.Clear();
  features_.Clear();
  destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fallback_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_satoshis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_msat_) -
      reinterpret_cast<char*>(&num_satoshis_)) + sizeof(num_msat_));
  _internal_metadata_.Clear();
}

const char* PayReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReq.destination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReq.payment_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_satoshis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_satoshis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiry = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReq.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description_hash = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_description_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReq.description_hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fallback_addr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_fallback_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.PayReq.fallback_addr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cltv_expiry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cltv_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.RouteHint route_hints = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes payment_addr = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_payment_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_msat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          num_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<uint32, .lnrpc.Feature> features = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PayReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string destination = 1;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReq.destination");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_destination(), target);
  }

  // string payment_hash = 2;
  if (this->payment_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_hash().data(), static_cast<int>(this->_internal_payment_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReq.payment_hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payment_hash(), target);
  }

  // int64 num_satoshis = 3;
  if (this->num_satoshis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_num_satoshis(), target);
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_expiry(), target);
  }

  // string description = 6;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReq.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // string description_hash = 7;
  if (this->description_hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description_hash().data(), static_cast<int>(this->_internal_description_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReq.description_hash");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_description_hash(), target);
  }

  // string fallback_addr = 8;
  if (this->fallback_addr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fallback_addr().data(), static_cast<int>(this->_internal_fallback_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.PayReq.fallback_addr");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_fallback_addr(), target);
  }

  // int64 cltv_expiry = 9;
  if (this->cltv_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_cltv_expiry(), target);
  }

  // repeated .lnrpc.RouteHint route_hints = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_route_hints(i), target, stream);
  }

  // bytes payment_addr = 11;
  if (this->payment_addr().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        11, this->_internal_payment_addr(), target);
  }

  // int64 num_msat = 12;
  if (this->num_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_num_msat(), target);
  }

  // map<uint32, .lnrpc.Feature> features = 13;
  if (!this->_internal_features().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_features().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_features().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PayReq_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
          it = this->_internal_features().begin();
          it != this->_internal_features().end(); ++it) {
        target = PayReq_FeaturesEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PayReq)
  return target;
}

size_t PayReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PayReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.RouteHint route_hints = 10;
  total_size += 1UL * this->_internal_route_hints_size();
  for (const auto& msg : this->route_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, .lnrpc.Feature> features = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += PayReq_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string destination = 1;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // string payment_hash = 2;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_hash());
  }

  // string description = 6;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string description_hash = 7;
  if (this->description_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description_hash());
  }

  // string fallback_addr = 8;
  if (this->fallback_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fallback_addr());
  }

  // bytes payment_addr = 11;
  if (this->payment_addr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_addr());
  }

  // int64 num_satoshis = 3;
  if (this->num_satoshis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_satoshis());
  }

  // int64 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // int64 expiry = 5;
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiry());
  }

  // int64 cltv_expiry = 9;
  if (this->cltv_expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cltv_expiry());
  }

  // int64 num_msat = 12;
  if (this->num_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PayReq)
  GOOGLE_DCHECK_NE(&from, this);
  const PayReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PayReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PayReq)
    MergeFrom(*source);
  }
}

void PayReq::MergeFrom(const PayReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PayReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_hints_.MergeFrom(from.route_hints_);
  features_.MergeFrom(from.features_);
  if (from.destination().size() > 0) {

    destination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.destination_);
  }
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.description_hash().size() > 0) {

    description_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.description_hash_);
  }
  if (from.fallback_addr().size() > 0) {

    fallback_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fallback_addr_);
  }
  if (from.payment_addr().size() > 0) {

    payment_addr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_addr_);
  }
  if (from.num_satoshis() != 0) {
    _internal_set_num_satoshis(from._internal_num_satoshis());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.cltv_expiry() != 0) {
    _internal_set_cltv_expiry(from._internal_cltv_expiry());
  }
  if (from.num_msat() != 0) {
    _internal_set_num_msat(from._internal_num_msat());
  }
}

void PayReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayReq::CopyFrom(const PayReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PayReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayReq::IsInitialized() const {
  return true;
}

void PayReq::InternalSwap(PayReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_hints_.InternalSwap(&other->route_hints_);
  features_.Swap(&other->features_);
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_hash_.Swap(&other->description_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fallback_addr_.Swap(&other->fallback_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_addr_.Swap(&other->payment_addr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_satoshis_, other->num_satoshis_);
  swap(timestamp_, other->timestamp_);
  swap(expiry_, other->expiry_);
  swap(cltv_expiry_, other->cltv_expiry_);
  swap(num_msat_, other->num_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PayReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feature::InitAsDefaultInstance() {
}
class Feature::_Internal {
 public:
};

Feature::Feature()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&is_required_, &from.is_required_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_known_) -
    reinterpret_cast<char*>(&is_required_)) + sizeof(is_known_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Feature)
}

void Feature::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feature_rpc_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_known_) -
      reinterpret_cast<char*>(&is_required_)) + sizeof(is_known_));
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:lnrpc.Feature)
  SharedDtor();
}

void Feature::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature& Feature::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_rpc_2eproto.base);
  return *internal_default_instance();
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_known_) -
      reinterpret_cast<char*>(&is_required_)) + sizeof(is_known_));
  _internal_metadata_.Clear();
}

const char* Feature::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Feature.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_required = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_known = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_known_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Feature)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Feature.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bool is_required = 3;
  if (this->is_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_required(), target);
  }

  // bool is_known = 4;
  if (this->is_known() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_known(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Feature)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_required = 3;
  if (this->is_required() != 0) {
    total_size += 1 + 1;
  }

  // bool is_known = 4;
  if (this->is_known() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Feature)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Feature)
    MergeFrom(*source);
  }
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.is_required() != 0) {
    _internal_set_is_required(from._internal_is_required());
  }
  if (from.is_known() != 0) {
    _internal_set_is_known(from._internal_is_known());
  }
}

void Feature::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_required_, other->is_required_);
  swap(is_known_, other->is_known_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeReportRequest::InitAsDefaultInstance() {
}
class FeeReportRequest::_Internal {
 public:
};

FeeReportRequest::FeeReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FeeReportRequest)
}
FeeReportRequest::FeeReportRequest(const FeeReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.FeeReportRequest)
}

void FeeReportRequest::SharedCtor() {
}

FeeReportRequest::~FeeReportRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.FeeReportRequest)
  SharedDtor();
}

void FeeReportRequest::SharedDtor() {
}

void FeeReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeReportRequest& FeeReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeReportRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void FeeReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FeeReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FeeReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeReportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FeeReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FeeReportRequest)
  return target;
}

size_t FeeReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FeeReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FeeReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FeeReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FeeReportRequest)
    MergeFrom(*source);
  }
}

void FeeReportRequest::MergeFrom(const FeeReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FeeReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FeeReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FeeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeReportRequest::CopyFrom(const FeeReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FeeReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeReportRequest::IsInitialized() const {
  return true;
}

void FeeReportRequest::InternalSwap(FeeReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelFeeReport::InitAsDefaultInstance() {
}
class ChannelFeeReport::_Internal {
 public:
};

ChannelFeeReport::ChannelFeeReport()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelFeeReport)
}
ChannelFeeReport::ChannelFeeReport(const ChannelFeeReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channel_point().empty()) {
    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  ::memcpy(&base_fee_msat_, &from.base_fee_msat_,
    static_cast<size_t>(reinterpret_cast<char*>(&chan_id_) -
    reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(chan_id_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelFeeReport)
}

void ChannelFeeReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelFeeReport_rpc_2eproto.base);
  channel_point_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_id_) -
      reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(chan_id_));
}

ChannelFeeReport::~ChannelFeeReport() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelFeeReport)
  SharedDtor();
}

void ChannelFeeReport::SharedDtor() {
  channel_point_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelFeeReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelFeeReport& ChannelFeeReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelFeeReport_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelFeeReport::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelFeeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&base_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chan_id_) -
      reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(chan_id_));
  _internal_metadata_.Clear();
}

const char* ChannelFeeReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channel_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channel_point();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.ChannelFeeReport.channel_point"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 base_fee_msat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          base_fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_per_mil = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          fee_per_mil_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fee_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id = 5 [jstype = JS_STRING];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelFeeReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelFeeReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_point = 1;
  if (this->channel_point().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_point().data(), static_cast<int>(this->_internal_channel_point().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.ChannelFeeReport.channel_point");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_point(), target);
  }

  // int64 base_fee_msat = 2;
  if (this->base_fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_base_fee_msat(), target);
  }

  // int64 fee_per_mil = 3;
  if (this->fee_per_mil() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_fee_per_mil(), target);
  }

  // double fee_rate = 4;
  if (!(this->fee_rate() <= 0 && this->fee_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee_rate(), target);
  }

  // uint64 chan_id = 5 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_chan_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelFeeReport)
  return target;
}

size_t ChannelFeeReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelFeeReport)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_point = 1;
  if (this->channel_point().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_point());
  }

  // int64 base_fee_msat = 2;
  if (this->base_fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_base_fee_msat());
  }

  // int64 fee_per_mil = 3;
  if (this->fee_per_mil() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_per_mil());
  }

  // double fee_rate = 4;
  if (!(this->fee_rate() <= 0 && this->fee_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 chan_id = 5 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelFeeReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelFeeReport)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelFeeReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelFeeReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelFeeReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelFeeReport)
    MergeFrom(*source);
  }
}

void ChannelFeeReport::MergeFrom(const ChannelFeeReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelFeeReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel_point().size() > 0) {

    channel_point_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channel_point_);
  }
  if (from.base_fee_msat() != 0) {
    _internal_set_base_fee_msat(from._internal_base_fee_msat());
  }
  if (from.fee_per_mil() != 0) {
    _internal_set_fee_per_mil(from._internal_fee_per_mil());
  }
  if (!(from.fee_rate() <= 0 && from.fee_rate() >= 0)) {
    _internal_set_fee_rate(from._internal_fee_rate());
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
}

void ChannelFeeReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelFeeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelFeeReport::CopyFrom(const ChannelFeeReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelFeeReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelFeeReport::IsInitialized() const {
  return true;
}

void ChannelFeeReport::InternalSwap(ChannelFeeReport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_point_.Swap(&other->channel_point_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_fee_msat_, other->base_fee_msat_);
  swap(fee_per_mil_, other->fee_per_mil_);
  swap(fee_rate_, other->fee_rate_);
  swap(chan_id_, other->chan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelFeeReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeeReportResponse::InitAsDefaultInstance() {
}
class FeeReportResponse::_Internal {
 public:
};

FeeReportResponse::FeeReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.FeeReportResponse)
}
FeeReportResponse::FeeReportResponse(const FeeReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      channel_fees_(from.channel_fees_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&day_fee_sum_, &from.day_fee_sum_,
    static_cast<size_t>(reinterpret_cast<char*>(&month_fee_sum_) -
    reinterpret_cast<char*>(&day_fee_sum_)) + sizeof(month_fee_sum_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.FeeReportResponse)
}

void FeeReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeeReportResponse_rpc_2eproto.base);
  ::memset(&day_fee_sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_fee_sum_) -
      reinterpret_cast<char*>(&day_fee_sum_)) + sizeof(month_fee_sum_));
}

FeeReportResponse::~FeeReportResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.FeeReportResponse)
  SharedDtor();
}

void FeeReportResponse::SharedDtor() {
}

void FeeReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeeReportResponse& FeeReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeeReportResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void FeeReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.FeeReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_fees_.Clear();
  ::memset(&day_fee_sum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&month_fee_sum_) -
      reinterpret_cast<char*>(&day_fee_sum_)) + sizeof(month_fee_sum_));
  _internal_metadata_.Clear();
}

const char* FeeReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.ChannelFeeReport channel_fees = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channel_fees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 day_fee_sum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          day_fee_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 week_fee_sum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          week_fee_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 month_fee_sum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          month_fee_sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeeReportResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.FeeReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelFeeReport channel_fees = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channel_fees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channel_fees(i), target, stream);
  }

  // uint64 day_fee_sum = 2;
  if (this->day_fee_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_day_fee_sum(), target);
  }

  // uint64 week_fee_sum = 3;
  if (this->week_fee_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_week_fee_sum(), target);
  }

  // uint64 month_fee_sum = 4;
  if (this->month_fee_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_month_fee_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.FeeReportResponse)
  return target;
}

size_t FeeReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.FeeReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelFeeReport channel_fees = 1;
  total_size += 1UL * this->_internal_channel_fees_size();
  for (const auto& msg : this->channel_fees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 day_fee_sum = 2;
  if (this->day_fee_sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_day_fee_sum());
  }

  // uint64 week_fee_sum = 3;
  if (this->week_fee_sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_week_fee_sum());
  }

  // uint64 month_fee_sum = 4;
  if (this->month_fee_sum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_month_fee_sum());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeeReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.FeeReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FeeReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeeReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.FeeReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.FeeReportResponse)
    MergeFrom(*source);
  }
}

void FeeReportResponse::MergeFrom(const FeeReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.FeeReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_fees_.MergeFrom(from.channel_fees_);
  if (from.day_fee_sum() != 0) {
    _internal_set_day_fee_sum(from._internal_day_fee_sum());
  }
  if (from.week_fee_sum() != 0) {
    _internal_set_week_fee_sum(from._internal_week_fee_sum());
  }
  if (from.month_fee_sum() != 0) {
    _internal_set_month_fee_sum(from._internal_month_fee_sum());
  }
}

void FeeReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.FeeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeeReportResponse::CopyFrom(const FeeReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.FeeReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeeReportResponse::IsInitialized() const {
  return true;
}

void FeeReportResponse::InternalSwap(FeeReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channel_fees_.InternalSwap(&other->channel_fees_);
  swap(day_fee_sum_, other->day_fee_sum_);
  swap(week_fee_sum_, other->week_fee_sum_);
  swap(month_fee_sum_, other->month_fee_sum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeeReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyUpdateRequest::InitAsDefaultInstance() {
  ::lnrpc::_PolicyUpdateRequest_default_instance_.global_ = false;
  ::lnrpc::_PolicyUpdateRequest_default_instance_.chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class PolicyUpdateRequest::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const PolicyUpdateRequest* msg);
};

const ::lnrpc::ChannelPoint&
PolicyUpdateRequest::_Internal::chan_point(const PolicyUpdateRequest* msg) {
  return *msg->scope_.chan_point_;
}
void PolicyUpdateRequest::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_scope();
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    set_has_chan_point();
    scope_.chan_point_ = chan_point;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PolicyUpdateRequest.chan_point)
}
PolicyUpdateRequest::PolicyUpdateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PolicyUpdateRequest)
}
PolicyUpdateRequest::PolicyUpdateRequest(const PolicyUpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&base_fee_msat_, &from.base_fee_msat_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_htlc_msat_) -
    reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(min_htlc_msat_));
  clear_has_scope();
  switch (from.scope_case()) {
    case kGlobal: {
      _internal_set_global(from._internal_global());
      break;
    }
    case kChanPoint: {
      _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.PolicyUpdateRequest)
}

void PolicyUpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PolicyUpdateRequest_rpc_2eproto.base);
  ::memset(&base_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_htlc_msat_) -
      reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(min_htlc_msat_));
  clear_has_scope();
}

PolicyUpdateRequest::~PolicyUpdateRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.PolicyUpdateRequest)
  SharedDtor();
}

void PolicyUpdateRequest::SharedDtor() {
  if (has_scope()) {
    clear_scope();
  }
}

void PolicyUpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyUpdateRequest& PolicyUpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyUpdateRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void PolicyUpdateRequest::clear_scope() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.PolicyUpdateRequest)
  switch (scope_case()) {
    case kGlobal: {
      // No need to clear
      break;
    }
    case kChanPoint: {
      delete scope_.chan_point_;
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SCOPE_NOT_SET;
}


void PolicyUpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PolicyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&base_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_htlc_msat_) -
      reinterpret_cast<char*>(&base_fee_msat_)) + sizeof(min_htlc_msat_));
  clear_scope();
  _internal_metadata_.Clear();
}

const char* PolicyUpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool global = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_global(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelPoint chan_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 base_fee_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          base_fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double fee_rate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          fee_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 time_lock_delta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          time_lock_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_htlc_msat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 min_htlc_msat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          min_htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool min_htlc_msat_specified = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          min_htlc_msat_specified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyUpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PolicyUpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool global = 1;
  if (_internal_has_global()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_global(), target);
  }

  // .lnrpc.ChannelPoint chan_point = 2;
  if (_internal_has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::chan_point(this), target, stream);
  }

  // int64 base_fee_msat = 3;
  if (this->base_fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_base_fee_msat(), target);
  }

  // double fee_rate = 4;
  if (!(this->fee_rate() <= 0 && this->fee_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_fee_rate(), target);
  }

  // uint32 time_lock_delta = 5;
  if (this->time_lock_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_time_lock_delta(), target);
  }

  // uint64 max_htlc_msat = 6;
  if (this->max_htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_max_htlc_msat(), target);
  }

  // uint64 min_htlc_msat = 7;
  if (this->min_htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_min_htlc_msat(), target);
  }

  // bool min_htlc_msat_specified = 8;
  if (this->min_htlc_msat_specified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_min_htlc_msat_specified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PolicyUpdateRequest)
  return target;
}

size_t PolicyUpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PolicyUpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 base_fee_msat = 3;
  if (this->base_fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_base_fee_msat());
  }

  // double fee_rate = 4;
  if (!(this->fee_rate() <= 0 && this->fee_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 max_htlc_msat = 6;
  if (this->max_htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_htlc_msat());
  }

  // uint32 time_lock_delta = 5;
  if (this->time_lock_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_lock_delta());
  }

  // bool min_htlc_msat_specified = 8;
  if (this->min_htlc_msat_specified() != 0) {
    total_size += 1 + 1;
  }

  // uint64 min_htlc_msat = 7;
  if (this->min_htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_htlc_msat());
  }

  switch (scope_case()) {
    // bool global = 1;
    case kGlobal: {
      total_size += 1 + 1;
      break;
    }
    // .lnrpc.ChannelPoint chan_point = 2;
    case kChanPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *scope_.chan_point_);
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyUpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PolicyUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyUpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyUpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PolicyUpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PolicyUpdateRequest)
    MergeFrom(*source);
  }
}

void PolicyUpdateRequest::MergeFrom(const PolicyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PolicyUpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.base_fee_msat() != 0) {
    _internal_set_base_fee_msat(from._internal_base_fee_msat());
  }
  if (!(from.fee_rate() <= 0 && from.fee_rate() >= 0)) {
    _internal_set_fee_rate(from._internal_fee_rate());
  }
  if (from.max_htlc_msat() != 0) {
    _internal_set_max_htlc_msat(from._internal_max_htlc_msat());
  }
  if (from.time_lock_delta() != 0) {
    _internal_set_time_lock_delta(from._internal_time_lock_delta());
  }
  if (from.min_htlc_msat_specified() != 0) {
    _internal_set_min_htlc_msat_specified(from._internal_min_htlc_msat_specified());
  }
  if (from.min_htlc_msat() != 0) {
    _internal_set_min_htlc_msat(from._internal_min_htlc_msat());
  }
  switch (from.scope_case()) {
    case kGlobal: {
      _internal_set_global(from._internal_global());
      break;
    }
    case kChanPoint: {
      _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
      break;
    }
    case SCOPE_NOT_SET: {
      break;
    }
  }
}

void PolicyUpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PolicyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyUpdateRequest::CopyFrom(const PolicyUpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PolicyUpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyUpdateRequest::IsInitialized() const {
  return true;
}

void PolicyUpdateRequest::InternalSwap(PolicyUpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(base_fee_msat_, other->base_fee_msat_);
  swap(fee_rate_, other->fee_rate_);
  swap(max_htlc_msat_, other->max_htlc_msat_);
  swap(time_lock_delta_, other->time_lock_delta_);
  swap(min_htlc_msat_specified_, other->min_htlc_msat_specified_);
  swap(min_htlc_msat_, other->min_htlc_msat_);
  swap(scope_, other->scope_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyUpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyUpdateResponse::InitAsDefaultInstance() {
}
class PolicyUpdateResponse::_Internal {
 public:
};

PolicyUpdateResponse::PolicyUpdateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.PolicyUpdateResponse)
}
PolicyUpdateResponse::PolicyUpdateResponse(const PolicyUpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.PolicyUpdateResponse)
}

void PolicyUpdateResponse::SharedCtor() {
}

PolicyUpdateResponse::~PolicyUpdateResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.PolicyUpdateResponse)
  SharedDtor();
}

void PolicyUpdateResponse::SharedDtor() {
}

void PolicyUpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyUpdateResponse& PolicyUpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyUpdateResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void PolicyUpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.PolicyUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PolicyUpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyUpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.PolicyUpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.PolicyUpdateResponse)
  return target;
}

size_t PolicyUpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.PolicyUpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyUpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.PolicyUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyUpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyUpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.PolicyUpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.PolicyUpdateResponse)
    MergeFrom(*source);
  }
}

void PolicyUpdateResponse::MergeFrom(const PolicyUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.PolicyUpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PolicyUpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.PolicyUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyUpdateResponse::CopyFrom(const PolicyUpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.PolicyUpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyUpdateResponse::IsInitialized() const {
  return true;
}

void PolicyUpdateResponse::InternalSwap(PolicyUpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyUpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardingHistoryRequest::InitAsDefaultInstance() {
}
class ForwardingHistoryRequest::_Internal {
 public:
};

ForwardingHistoryRequest::ForwardingHistoryRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ForwardingHistoryRequest)
}
ForwardingHistoryRequest::ForwardingHistoryRequest(const ForwardingHistoryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_time_, &from.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_max_events_) -
    reinterpret_cast<char*>(&start_time_)) + sizeof(num_max_events_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ForwardingHistoryRequest)
}

void ForwardingHistoryRequest::SharedCtor() {
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_max_events_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(num_max_events_));
}

ForwardingHistoryRequest::~ForwardingHistoryRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ForwardingHistoryRequest)
  SharedDtor();
}

void ForwardingHistoryRequest::SharedDtor() {
}

void ForwardingHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardingHistoryRequest& ForwardingHistoryRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardingHistoryRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ForwardingHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ForwardingHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_max_events_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(num_max_events_));
  _internal_metadata_.Clear();
}

const char* ForwardingHistoryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 end_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          end_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 index_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          index_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_max_events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_max_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardingHistoryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ForwardingHistoryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_time = 1;
  if (this->start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_time(), target);
  }

  // uint64 end_time = 2;
  if (this->end_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end_time(), target);
  }

  // uint32 index_offset = 3;
  if (this->index_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_index_offset(), target);
  }

  // uint32 num_max_events = 4;
  if (this->num_max_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_max_events(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ForwardingHistoryRequest)
  return target;
}

size_t ForwardingHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ForwardingHistoryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start_time = 1;
  if (this->start_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_start_time());
  }

  // uint64 end_time = 2;
  if (this->end_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_end_time());
  }

  // uint32 index_offset = 3;
  if (this->index_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_index_offset());
  }

  // uint32 num_max_events = 4;
  if (this->num_max_events() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_max_events());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardingHistoryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ForwardingHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardingHistoryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardingHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ForwardingHistoryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ForwardingHistoryRequest)
    MergeFrom(*source);
  }
}

void ForwardingHistoryRequest::MergeFrom(const ForwardingHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ForwardingHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.start_time() != 0) {
    _internal_set_start_time(from._internal_start_time());
  }
  if (from.end_time() != 0) {
    _internal_set_end_time(from._internal_end_time());
  }
  if (from.index_offset() != 0) {
    _internal_set_index_offset(from._internal_index_offset());
  }
  if (from.num_max_events() != 0) {
    _internal_set_num_max_events(from._internal_num_max_events());
  }
}

void ForwardingHistoryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ForwardingHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingHistoryRequest::CopyFrom(const ForwardingHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ForwardingHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingHistoryRequest::IsInitialized() const {
  return true;
}

void ForwardingHistoryRequest::InternalSwap(ForwardingHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(index_offset_, other->index_offset_);
  swap(num_max_events_, other->num_max_events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardingHistoryRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardingEvent::InitAsDefaultInstance() {
}
class ForwardingEvent::_Internal {
 public:
};

ForwardingEvent::ForwardingEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ForwardingEvent)
}
ForwardingEvent::ForwardingEvent(const ForwardingEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_ns_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(timestamp_ns_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ForwardingEvent)
}

void ForwardingEvent::SharedCtor() {
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_ns_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(timestamp_ns_));
}

ForwardingEvent::~ForwardingEvent() {
  // @@protoc_insertion_point(destructor:lnrpc.ForwardingEvent)
  SharedDtor();
}

void ForwardingEvent::SharedDtor() {
}

void ForwardingEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardingEvent& ForwardingEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardingEvent_rpc_2eproto.base);
  return *internal_default_instance();
}


void ForwardingEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ForwardingEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_ns_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(timestamp_ns_));
  _internal_metadata_.Clear();
}

const char* ForwardingEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 timestamp = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id_in = 2 [jstype = JS_STRING];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          chan_id_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id_out = 4 [jstype = JS_STRING];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          chan_id_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amt_in = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          amt_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amt_out = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          amt_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 fee_msat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amt_in_msat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          amt_in_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 amt_out_msat = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          amt_out_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_ns = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardingEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ForwardingEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 timestamp = 1 [deprecated = true];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp(), target);
  }

  // uint64 chan_id_in = 2 [jstype = JS_STRING];
  if (this->chan_id_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_chan_id_in(), target);
  }

  // uint64 chan_id_out = 4 [jstype = JS_STRING];
  if (this->chan_id_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_chan_id_out(), target);
  }

  // uint64 amt_in = 5;
  if (this->amt_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_amt_in(), target);
  }

  // uint64 amt_out = 6;
  if (this->amt_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_amt_out(), target);
  }

  // uint64 fee = 7;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_fee(), target);
  }

  // uint64 fee_msat = 8;
  if (this->fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_fee_msat(), target);
  }

  // uint64 amt_in_msat = 9;
  if (this->amt_in_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_amt_in_msat(), target);
  }

  // uint64 amt_out_msat = 10;
  if (this->amt_out_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_amt_out_msat(), target);
  }

  // uint64 timestamp_ns = 11;
  if (this->timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_timestamp_ns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ForwardingEvent)
  return target;
}

size_t ForwardingEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ForwardingEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 timestamp = 1 [deprecated = true];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp());
  }

  // uint64 chan_id_in = 2 [jstype = JS_STRING];
  if (this->chan_id_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id_in());
  }

  // uint64 chan_id_out = 4 [jstype = JS_STRING];
  if (this->chan_id_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id_out());
  }

  // uint64 amt_in = 5;
  if (this->amt_in() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amt_in());
  }

  // uint64 amt_out = 6;
  if (this->amt_out() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amt_out());
  }

  // uint64 fee = 7;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fee());
  }

  // uint64 fee_msat = 8;
  if (this->fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_fee_msat());
  }

  // uint64 amt_in_msat = 9;
  if (this->amt_in_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amt_in_msat());
  }

  // uint64 amt_out_msat = 10;
  if (this->amt_out_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_amt_out_msat());
  }

  // uint64 timestamp_ns = 11;
  if (this->timestamp_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_ns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardingEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ForwardingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardingEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardingEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ForwardingEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ForwardingEvent)
    MergeFrom(*source);
  }
}

void ForwardingEvent::MergeFrom(const ForwardingEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ForwardingEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.chan_id_in() != 0) {
    _internal_set_chan_id_in(from._internal_chan_id_in());
  }
  if (from.chan_id_out() != 0) {
    _internal_set_chan_id_out(from._internal_chan_id_out());
  }
  if (from.amt_in() != 0) {
    _internal_set_amt_in(from._internal_amt_in());
  }
  if (from.amt_out() != 0) {
    _internal_set_amt_out(from._internal_amt_out());
  }
  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
  if (from.fee_msat() != 0) {
    _internal_set_fee_msat(from._internal_fee_msat());
  }
  if (from.amt_in_msat() != 0) {
    _internal_set_amt_in_msat(from._internal_amt_in_msat());
  }
  if (from.amt_out_msat() != 0) {
    _internal_set_amt_out_msat(from._internal_amt_out_msat());
  }
  if (from.timestamp_ns() != 0) {
    _internal_set_timestamp_ns(from._internal_timestamp_ns());
  }
}

void ForwardingEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ForwardingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingEvent::CopyFrom(const ForwardingEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ForwardingEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingEvent::IsInitialized() const {
  return true;
}

void ForwardingEvent::InternalSwap(ForwardingEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(timestamp_, other->timestamp_);
  swap(chan_id_in_, other->chan_id_in_);
  swap(chan_id_out_, other->chan_id_out_);
  swap(amt_in_, other->amt_in_);
  swap(amt_out_, other->amt_out_);
  swap(fee_, other->fee_);
  swap(fee_msat_, other->fee_msat_);
  swap(amt_in_msat_, other->amt_in_msat_);
  swap(amt_out_msat_, other->amt_out_msat_);
  swap(timestamp_ns_, other->timestamp_ns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardingEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardingHistoryResponse::InitAsDefaultInstance() {
}
class ForwardingHistoryResponse::_Internal {
 public:
};

ForwardingHistoryResponse::ForwardingHistoryResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ForwardingHistoryResponse)
}
ForwardingHistoryResponse::ForwardingHistoryResponse(const ForwardingHistoryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      forwarding_events_(from.forwarding_events_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_offset_index_ = from.last_offset_index_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.ForwardingHistoryResponse)
}

void ForwardingHistoryResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForwardingHistoryResponse_rpc_2eproto.base);
  last_offset_index_ = 0u;
}

ForwardingHistoryResponse::~ForwardingHistoryResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ForwardingHistoryResponse)
  SharedDtor();
}

void ForwardingHistoryResponse::SharedDtor() {
}

void ForwardingHistoryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardingHistoryResponse& ForwardingHistoryResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardingHistoryResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ForwardingHistoryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ForwardingHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forwarding_events_.Clear();
  last_offset_index_ = 0u;
  _internal_metadata_.Clear();
}

const char* ForwardingHistoryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.ForwardingEvent forwarding_events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forwarding_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 last_offset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          last_offset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardingHistoryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ForwardingHistoryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.ForwardingEvent forwarding_events = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_forwarding_events_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_forwarding_events(i), target, stream);
  }

  // uint32 last_offset_index = 2;
  if (this->last_offset_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_last_offset_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ForwardingHistoryResponse)
  return target;
}

size_t ForwardingHistoryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ForwardingHistoryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ForwardingEvent forwarding_events = 1;
  total_size += 1UL * this->_internal_forwarding_events_size();
  for (const auto& msg : this->forwarding_events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 last_offset_index = 2;
  if (this->last_offset_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_last_offset_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardingHistoryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ForwardingHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardingHistoryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardingHistoryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ForwardingHistoryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ForwardingHistoryResponse)
    MergeFrom(*source);
  }
}

void ForwardingHistoryResponse::MergeFrom(const ForwardingHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ForwardingHistoryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forwarding_events_.MergeFrom(from.forwarding_events_);
  if (from.last_offset_index() != 0) {
    _internal_set_last_offset_index(from._internal_last_offset_index());
  }
}

void ForwardingHistoryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ForwardingHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardingHistoryResponse::CopyFrom(const ForwardingHistoryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ForwardingHistoryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardingHistoryResponse::IsInitialized() const {
  return true;
}

void ForwardingHistoryResponse::InternalSwap(ForwardingHistoryResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  forwarding_events_.InternalSwap(&other->forwarding_events_);
  swap(last_offset_index_, other->last_offset_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardingHistoryResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExportChannelBackupRequest::InitAsDefaultInstance() {
  ::lnrpc::_ExportChannelBackupRequest_default_instance_._instance.get_mutable()->chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class ExportChannelBackupRequest::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const ExportChannelBackupRequest* msg);
};

const ::lnrpc::ChannelPoint&
ExportChannelBackupRequest::_Internal::chan_point(const ExportChannelBackupRequest* msg) {
  return *msg->chan_point_;
}
ExportChannelBackupRequest::ExportChannelBackupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ExportChannelBackupRequest)
}
ExportChannelBackupRequest::ExportChannelBackupRequest(const ExportChannelBackupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_chan_point()) {
    chan_point_ = new ::lnrpc::ChannelPoint(*from.chan_point_);
  } else {
    chan_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ExportChannelBackupRequest)
}

void ExportChannelBackupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExportChannelBackupRequest_rpc_2eproto.base);
  chan_point_ = nullptr;
}

ExportChannelBackupRequest::~ExportChannelBackupRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ExportChannelBackupRequest)
  SharedDtor();
}

void ExportChannelBackupRequest::SharedDtor() {
  if (this != internal_default_instance()) delete chan_point_;
}

void ExportChannelBackupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExportChannelBackupRequest& ExportChannelBackupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExportChannelBackupRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ExportChannelBackupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ExportChannelBackupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ExportChannelBackupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelPoint chan_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExportChannelBackupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ExportChannelBackupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint chan_point = 1;
  if (this->has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chan_point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ExportChannelBackupRequest)
  return target;
}

size_t ExportChannelBackupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ExportChannelBackupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint chan_point = 1;
  if (this->has_chan_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chan_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExportChannelBackupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ExportChannelBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExportChannelBackupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExportChannelBackupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ExportChannelBackupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ExportChannelBackupRequest)
    MergeFrom(*source);
  }
}

void ExportChannelBackupRequest::MergeFrom(const ExportChannelBackupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ExportChannelBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_chan_point()) {
    _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
  }
}

void ExportChannelBackupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ExportChannelBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExportChannelBackupRequest::CopyFrom(const ExportChannelBackupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ExportChannelBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExportChannelBackupRequest::IsInitialized() const {
  return true;
}

void ExportChannelBackupRequest::InternalSwap(ExportChannelBackupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(chan_point_, other->chan_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExportChannelBackupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBackup::InitAsDefaultInstance() {
  ::lnrpc::_ChannelBackup_default_instance_._instance.get_mutable()->chan_point_ = const_cast< ::lnrpc::ChannelPoint*>(
      ::lnrpc::ChannelPoint::internal_default_instance());
}
class ChannelBackup::_Internal {
 public:
  static const ::lnrpc::ChannelPoint& chan_point(const ChannelBackup* msg);
};

const ::lnrpc::ChannelPoint&
ChannelBackup::_Internal::chan_point(const ChannelBackup* msg) {
  return *msg->chan_point_;
}
ChannelBackup::ChannelBackup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelBackup)
}
ChannelBackup::ChannelBackup(const ChannelBackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chan_backup().empty()) {
    chan_backup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_backup_);
  }
  if (from._internal_has_chan_point()) {
    chan_point_ = new ::lnrpc::ChannelPoint(*from.chan_point_);
  } else {
    chan_point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelBackup)
}

void ChannelBackup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelBackup_rpc_2eproto.base);
  chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chan_point_ = nullptr;
}

ChannelBackup::~ChannelBackup() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelBackup)
  SharedDtor();
}

void ChannelBackup::SharedDtor() {
  chan_backup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete chan_point_;
}

void ChannelBackup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBackup& ChannelBackup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBackup_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelBackup::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelBackup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_backup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ChannelBackup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelPoint chan_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chan_backup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chan_backup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBackup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelBackup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelPoint chan_point = 1;
  if (this->has_chan_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chan_point(this), target, stream);
  }

  // bytes chan_backup = 2;
  if (this->chan_backup().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chan_backup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelBackup)
  return target;
}

size_t ChannelBackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelBackup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes chan_backup = 2;
  if (this->chan_backup().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chan_backup());
  }

  // .lnrpc.ChannelPoint chan_point = 1;
  if (this->has_chan_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chan_point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBackup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelBackup)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBackup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBackup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelBackup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelBackup)
    MergeFrom(*source);
  }
}

void ChannelBackup::MergeFrom(const ChannelBackup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelBackup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chan_backup().size() > 0) {

    chan_backup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chan_backup_);
  }
  if (from.has_chan_point()) {
    _internal_mutable_chan_point()->::lnrpc::ChannelPoint::MergeFrom(from._internal_chan_point());
  }
}

void ChannelBackup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelBackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBackup::CopyFrom(const ChannelBackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelBackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBackup::IsInitialized() const {
  return true;
}

void ChannelBackup::InternalSwap(ChannelBackup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chan_backup_.Swap(&other->chan_backup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_point_, other->chan_point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBackup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MultiChanBackup::InitAsDefaultInstance() {
}
class MultiChanBackup::_Internal {
 public:
};

MultiChanBackup::MultiChanBackup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.MultiChanBackup)
}
MultiChanBackup::MultiChanBackup(const MultiChanBackup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      chan_points_(from.chan_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_multi_chan_backup().empty()) {
    multi_chan_backup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.multi_chan_backup_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.MultiChanBackup)
}

void MultiChanBackup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MultiChanBackup_rpc_2eproto.base);
  multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MultiChanBackup::~MultiChanBackup() {
  // @@protoc_insertion_point(destructor:lnrpc.MultiChanBackup)
  SharedDtor();
}

void MultiChanBackup::SharedDtor() {
  multi_chan_backup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MultiChanBackup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultiChanBackup& MultiChanBackup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MultiChanBackup_rpc_2eproto.base);
  return *internal_default_instance();
}


void MultiChanBackup::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.MultiChanBackup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_points_.Clear();
  multi_chan_backup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MultiChanBackup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.ChannelPoint chan_points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chan_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bytes multi_chan_backup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_multi_chan_backup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiChanBackup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.MultiChanBackup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelPoint chan_points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chan_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chan_points(i), target, stream);
  }

  // bytes multi_chan_backup = 2;
  if (this->multi_chan_backup().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_multi_chan_backup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.MultiChanBackup)
  return target;
}

size_t MultiChanBackup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.MultiChanBackup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelPoint chan_points = 1;
  total_size += 1UL * this->_internal_chan_points_size();
  for (const auto& msg : this->chan_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes multi_chan_backup = 2;
  if (this->multi_chan_backup().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_multi_chan_backup());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiChanBackup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.MultiChanBackup)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiChanBackup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiChanBackup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.MultiChanBackup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.MultiChanBackup)
    MergeFrom(*source);
  }
}

void MultiChanBackup::MergeFrom(const MultiChanBackup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.MultiChanBackup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chan_points_.MergeFrom(from.chan_points_);
  if (from.multi_chan_backup().size() > 0) {

    multi_chan_backup_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.multi_chan_backup_);
  }
}

void MultiChanBackup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.MultiChanBackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiChanBackup::CopyFrom(const MultiChanBackup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.MultiChanBackup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiChanBackup::IsInitialized() const {
  return true;
}

void MultiChanBackup::InternalSwap(MultiChanBackup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chan_points_.InternalSwap(&other->chan_points_);
  multi_chan_backup_.Swap(&other->multi_chan_backup_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiChanBackup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChanBackupExportRequest::InitAsDefaultInstance() {
}
class ChanBackupExportRequest::_Internal {
 public:
};

ChanBackupExportRequest::ChanBackupExportRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChanBackupExportRequest)
}
ChanBackupExportRequest::ChanBackupExportRequest(const ChanBackupExportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChanBackupExportRequest)
}

void ChanBackupExportRequest::SharedCtor() {
}

ChanBackupExportRequest::~ChanBackupExportRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ChanBackupExportRequest)
  SharedDtor();
}

void ChanBackupExportRequest::SharedDtor() {
}

void ChanBackupExportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChanBackupExportRequest& ChanBackupExportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChanBackupExportRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChanBackupExportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChanBackupExportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ChanBackupExportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChanBackupExportRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChanBackupExportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChanBackupExportRequest)
  return target;
}

size_t ChanBackupExportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChanBackupExportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChanBackupExportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChanBackupExportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanBackupExportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChanBackupExportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChanBackupExportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChanBackupExportRequest)
    MergeFrom(*source);
  }
}

void ChanBackupExportRequest::MergeFrom(const ChanBackupExportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChanBackupExportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChanBackupExportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChanBackupExportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanBackupExportRequest::CopyFrom(const ChanBackupExportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChanBackupExportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanBackupExportRequest::IsInitialized() const {
  return true;
}

void ChanBackupExportRequest::InternalSwap(ChanBackupExportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChanBackupExportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChanBackupSnapshot::InitAsDefaultInstance() {
  ::lnrpc::_ChanBackupSnapshot_default_instance_._instance.get_mutable()->single_chan_backups_ = const_cast< ::lnrpc::ChannelBackups*>(
      ::lnrpc::ChannelBackups::internal_default_instance());
  ::lnrpc::_ChanBackupSnapshot_default_instance_._instance.get_mutable()->multi_chan_backup_ = const_cast< ::lnrpc::MultiChanBackup*>(
      ::lnrpc::MultiChanBackup::internal_default_instance());
}
class ChanBackupSnapshot::_Internal {
 public:
  static const ::lnrpc::ChannelBackups& single_chan_backups(const ChanBackupSnapshot* msg);
  static const ::lnrpc::MultiChanBackup& multi_chan_backup(const ChanBackupSnapshot* msg);
};

const ::lnrpc::ChannelBackups&
ChanBackupSnapshot::_Internal::single_chan_backups(const ChanBackupSnapshot* msg) {
  return *msg->single_chan_backups_;
}
const ::lnrpc::MultiChanBackup&
ChanBackupSnapshot::_Internal::multi_chan_backup(const ChanBackupSnapshot* msg) {
  return *msg->multi_chan_backup_;
}
ChanBackupSnapshot::ChanBackupSnapshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChanBackupSnapshot)
}
ChanBackupSnapshot::ChanBackupSnapshot(const ChanBackupSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_single_chan_backups()) {
    single_chan_backups_ = new ::lnrpc::ChannelBackups(*from.single_chan_backups_);
  } else {
    single_chan_backups_ = nullptr;
  }
  if (from._internal_has_multi_chan_backup()) {
    multi_chan_backup_ = new ::lnrpc::MultiChanBackup(*from.multi_chan_backup_);
  } else {
    multi_chan_backup_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChanBackupSnapshot)
}

void ChanBackupSnapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChanBackupSnapshot_rpc_2eproto.base);
  ::memset(&single_chan_backups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multi_chan_backup_) -
      reinterpret_cast<char*>(&single_chan_backups_)) + sizeof(multi_chan_backup_));
}

ChanBackupSnapshot::~ChanBackupSnapshot() {
  // @@protoc_insertion_point(destructor:lnrpc.ChanBackupSnapshot)
  SharedDtor();
}

void ChanBackupSnapshot::SharedDtor() {
  if (this != internal_default_instance()) delete single_chan_backups_;
  if (this != internal_default_instance()) delete multi_chan_backup_;
}

void ChanBackupSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChanBackupSnapshot& ChanBackupSnapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChanBackupSnapshot_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChanBackupSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChanBackupSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && single_chan_backups_ != nullptr) {
    delete single_chan_backups_;
  }
  single_chan_backups_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && multi_chan_backup_ != nullptr) {
    delete multi_chan_backup_;
  }
  multi_chan_backup_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ChanBackupSnapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelBackups single_chan_backups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_single_chan_backups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.MultiChanBackup multi_chan_backup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_multi_chan_backup(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChanBackupSnapshot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChanBackupSnapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelBackups single_chan_backups = 1;
  if (this->has_single_chan_backups()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::single_chan_backups(this), target, stream);
  }

  // .lnrpc.MultiChanBackup multi_chan_backup = 2;
  if (this->has_multi_chan_backup()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::multi_chan_backup(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChanBackupSnapshot)
  return target;
}

size_t ChanBackupSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChanBackupSnapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.ChannelBackups single_chan_backups = 1;
  if (this->has_single_chan_backups()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *single_chan_backups_);
  }

  // .lnrpc.MultiChanBackup multi_chan_backup = 2;
  if (this->has_multi_chan_backup()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *multi_chan_backup_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChanBackupSnapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChanBackupSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const ChanBackupSnapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChanBackupSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChanBackupSnapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChanBackupSnapshot)
    MergeFrom(*source);
  }
}

void ChanBackupSnapshot::MergeFrom(const ChanBackupSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChanBackupSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_single_chan_backups()) {
    _internal_mutable_single_chan_backups()->::lnrpc::ChannelBackups::MergeFrom(from._internal_single_chan_backups());
  }
  if (from.has_multi_chan_backup()) {
    _internal_mutable_multi_chan_backup()->::lnrpc::MultiChanBackup::MergeFrom(from._internal_multi_chan_backup());
  }
}

void ChanBackupSnapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChanBackupSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChanBackupSnapshot::CopyFrom(const ChanBackupSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChanBackupSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChanBackupSnapshot::IsInitialized() const {
  return true;
}

void ChanBackupSnapshot::InternalSwap(ChanBackupSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(single_chan_backups_, other->single_chan_backups_);
  swap(multi_chan_backup_, other->multi_chan_backup_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChanBackupSnapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBackups::InitAsDefaultInstance() {
}
class ChannelBackups::_Internal {
 public:
};

ChannelBackups::ChannelBackups()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelBackups)
}
ChannelBackups::ChannelBackups(const ChannelBackups& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      chan_backups_(from.chan_backups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelBackups)
}

void ChannelBackups::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelBackups_rpc_2eproto.base);
}

ChannelBackups::~ChannelBackups() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelBackups)
  SharedDtor();
}

void ChannelBackups::SharedDtor() {
}

void ChannelBackups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBackups& ChannelBackups::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBackups_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelBackups::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelBackups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chan_backups_.Clear();
  _internal_metadata_.Clear();
}

const char* ChannelBackups::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.ChannelBackup chan_backups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chan_backups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBackups::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelBackups)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelBackup chan_backups = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chan_backups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chan_backups(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelBackups)
  return target;
}

size_t ChannelBackups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelBackups)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.ChannelBackup chan_backups = 1;
  total_size += 1UL * this->_internal_chan_backups_size();
  for (const auto& msg : this->chan_backups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBackups::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelBackups)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBackups* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBackups>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelBackups)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelBackups)
    MergeFrom(*source);
  }
}

void ChannelBackups::MergeFrom(const ChannelBackups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelBackups)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chan_backups_.MergeFrom(from.chan_backups_);
}

void ChannelBackups::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelBackups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBackups::CopyFrom(const ChannelBackups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelBackups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBackups::IsInitialized() const {
  return true;
}

void ChannelBackups::InternalSwap(ChannelBackups* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  chan_backups_.InternalSwap(&other->chan_backups_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBackups::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreChanBackupRequest::InitAsDefaultInstance() {
  ::lnrpc::_RestoreChanBackupRequest_default_instance_.chan_backups_ = const_cast< ::lnrpc::ChannelBackups*>(
      ::lnrpc::ChannelBackups::internal_default_instance());
  ::lnrpc::_RestoreChanBackupRequest_default_instance_.multi_chan_backup_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class RestoreChanBackupRequest::_Internal {
 public:
  static const ::lnrpc::ChannelBackups& chan_backups(const RestoreChanBackupRequest* msg);
};

const ::lnrpc::ChannelBackups&
RestoreChanBackupRequest::_Internal::chan_backups(const RestoreChanBackupRequest* msg) {
  return *msg->backup_.chan_backups_;
}
void RestoreChanBackupRequest::set_allocated_chan_backups(::lnrpc::ChannelBackups* chan_backups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_backup();
  if (chan_backups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_backups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_backups, submessage_arena);
    }
    set_has_chan_backups();
    backup_.chan_backups_ = chan_backups;
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.RestoreChanBackupRequest.chan_backups)
}
RestoreChanBackupRequest::RestoreChanBackupRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.RestoreChanBackupRequest)
}
RestoreChanBackupRequest::RestoreChanBackupRequest(const RestoreChanBackupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_backup();
  switch (from.backup_case()) {
    case kChanBackups: {
      _internal_mutable_chan_backups()->::lnrpc::ChannelBackups::MergeFrom(from._internal_chan_backups());
      break;
    }
    case kMultiChanBackup: {
      _internal_set_multi_chan_backup(from._internal_multi_chan_backup());
      break;
    }
    case BACKUP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.RestoreChanBackupRequest)
}

void RestoreChanBackupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RestoreChanBackupRequest_rpc_2eproto.base);
  clear_has_backup();
}

RestoreChanBackupRequest::~RestoreChanBackupRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.RestoreChanBackupRequest)
  SharedDtor();
}

void RestoreChanBackupRequest::SharedDtor() {
  if (has_backup()) {
    clear_backup();
  }
}

void RestoreChanBackupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreChanBackupRequest& RestoreChanBackupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreChanBackupRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void RestoreChanBackupRequest::clear_backup() {
// @@protoc_insertion_point(one_of_clear_start:lnrpc.RestoreChanBackupRequest)
  switch (backup_case()) {
    case kChanBackups: {
      delete backup_.chan_backups_;
      break;
    }
    case kMultiChanBackup: {
      backup_.multi_chan_backup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case BACKUP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BACKUP_NOT_SET;
}


void RestoreChanBackupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.RestoreChanBackupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_backup();
  _internal_metadata_.Clear();
}

const char* RestoreChanBackupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.ChannelBackups chan_backups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chan_backups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes multi_chan_backup = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_multi_chan_backup();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreChanBackupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.RestoreChanBackupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.ChannelBackups chan_backups = 1;
  if (_internal_has_chan_backups()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::chan_backups(this), target, stream);
  }

  // bytes multi_chan_backup = 2;
  if (_internal_has_multi_chan_backup()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_multi_chan_backup(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.RestoreChanBackupRequest)
  return target;
}

size_t RestoreChanBackupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.RestoreChanBackupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (backup_case()) {
    // .lnrpc.ChannelBackups chan_backups = 1;
    case kChanBackups: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *backup_.chan_backups_);
      break;
    }
    // bytes multi_chan_backup = 2;
    case kMultiChanBackup: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_multi_chan_backup());
      break;
    }
    case BACKUP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreChanBackupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.RestoreChanBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreChanBackupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreChanBackupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.RestoreChanBackupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.RestoreChanBackupRequest)
    MergeFrom(*source);
  }
}

void RestoreChanBackupRequest::MergeFrom(const RestoreChanBackupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.RestoreChanBackupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.backup_case()) {
    case kChanBackups: {
      _internal_mutable_chan_backups()->::lnrpc::ChannelBackups::MergeFrom(from._internal_chan_backups());
      break;
    }
    case kMultiChanBackup: {
      _internal_set_multi_chan_backup(from._internal_multi_chan_backup());
      break;
    }
    case BACKUP_NOT_SET: {
      break;
    }
  }
}

void RestoreChanBackupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.RestoreChanBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreChanBackupRequest::CopyFrom(const RestoreChanBackupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.RestoreChanBackupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreChanBackupRequest::IsInitialized() const {
  return true;
}

void RestoreChanBackupRequest::InternalSwap(RestoreChanBackupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(backup_, other->backup_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreChanBackupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RestoreBackupResponse::InitAsDefaultInstance() {
}
class RestoreBackupResponse::_Internal {
 public:
};

RestoreBackupResponse::RestoreBackupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.RestoreBackupResponse)
}
RestoreBackupResponse::RestoreBackupResponse(const RestoreBackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.RestoreBackupResponse)
}

void RestoreBackupResponse::SharedCtor() {
}

RestoreBackupResponse::~RestoreBackupResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.RestoreBackupResponse)
  SharedDtor();
}

void RestoreBackupResponse::SharedDtor() {
}

void RestoreBackupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RestoreBackupResponse& RestoreBackupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RestoreBackupResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void RestoreBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.RestoreBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RestoreBackupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RestoreBackupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.RestoreBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.RestoreBackupResponse)
  return target;
}

size_t RestoreBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.RestoreBackupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RestoreBackupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.RestoreBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RestoreBackupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RestoreBackupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.RestoreBackupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.RestoreBackupResponse)
    MergeFrom(*source);
  }
}

void RestoreBackupResponse::MergeFrom(const RestoreBackupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.RestoreBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RestoreBackupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.RestoreBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RestoreBackupResponse::CopyFrom(const RestoreBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.RestoreBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RestoreBackupResponse::IsInitialized() const {
  return true;
}

void RestoreBackupResponse::InternalSwap(RestoreBackupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RestoreBackupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelBackupSubscription::InitAsDefaultInstance() {
}
class ChannelBackupSubscription::_Internal {
 public:
};

ChannelBackupSubscription::ChannelBackupSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelBackupSubscription)
}
ChannelBackupSubscription::ChannelBackupSubscription(const ChannelBackupSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelBackupSubscription)
}

void ChannelBackupSubscription::SharedCtor() {
}

ChannelBackupSubscription::~ChannelBackupSubscription() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelBackupSubscription)
  SharedDtor();
}

void ChannelBackupSubscription::SharedDtor() {
}

void ChannelBackupSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelBackupSubscription& ChannelBackupSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelBackupSubscription_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelBackupSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelBackupSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ChannelBackupSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelBackupSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelBackupSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelBackupSubscription)
  return target;
}

size_t ChannelBackupSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelBackupSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelBackupSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelBackupSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelBackupSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelBackupSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelBackupSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelBackupSubscription)
    MergeFrom(*source);
  }
}

void ChannelBackupSubscription::MergeFrom(const ChannelBackupSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelBackupSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ChannelBackupSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelBackupSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelBackupSubscription::CopyFrom(const ChannelBackupSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelBackupSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelBackupSubscription::IsInitialized() const {
  return true;
}

void ChannelBackupSubscription::InternalSwap(ChannelBackupSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelBackupSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VerifyChanBackupResponse::InitAsDefaultInstance() {
}
class VerifyChanBackupResponse::_Internal {
 public:
};

VerifyChanBackupResponse::VerifyChanBackupResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.VerifyChanBackupResponse)
}
VerifyChanBackupResponse::VerifyChanBackupResponse(const VerifyChanBackupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.VerifyChanBackupResponse)
}

void VerifyChanBackupResponse::SharedCtor() {
}

VerifyChanBackupResponse::~VerifyChanBackupResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.VerifyChanBackupResponse)
  SharedDtor();
}

void VerifyChanBackupResponse::SharedDtor() {
}

void VerifyChanBackupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VerifyChanBackupResponse& VerifyChanBackupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VerifyChanBackupResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void VerifyChanBackupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.VerifyChanBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* VerifyChanBackupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VerifyChanBackupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.VerifyChanBackupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.VerifyChanBackupResponse)
  return target;
}

size_t VerifyChanBackupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.VerifyChanBackupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VerifyChanBackupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.VerifyChanBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VerifyChanBackupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VerifyChanBackupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.VerifyChanBackupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.VerifyChanBackupResponse)
    MergeFrom(*source);
  }
}

void VerifyChanBackupResponse::MergeFrom(const VerifyChanBackupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.VerifyChanBackupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void VerifyChanBackupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.VerifyChanBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyChanBackupResponse::CopyFrom(const VerifyChanBackupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.VerifyChanBackupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyChanBackupResponse::IsInitialized() const {
  return true;
}

void VerifyChanBackupResponse::InternalSwap(VerifyChanBackupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VerifyChanBackupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacaroonPermission::InitAsDefaultInstance() {
}
class MacaroonPermission::_Internal {
 public:
};

MacaroonPermission::MacaroonPermission()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.MacaroonPermission)
}
MacaroonPermission::MacaroonPermission(const MacaroonPermission& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.MacaroonPermission)
}

void MacaroonPermission::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MacaroonPermission_rpc_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MacaroonPermission::~MacaroonPermission() {
  // @@protoc_insertion_point(destructor:lnrpc.MacaroonPermission)
  SharedDtor();
}

void MacaroonPermission::SharedDtor() {
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MacaroonPermission::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacaroonPermission& MacaroonPermission::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacaroonPermission_rpc_2eproto.base);
  return *internal_default_instance();
}


void MacaroonPermission::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.MacaroonPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MacaroonPermission::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.MacaroonPermission.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.MacaroonPermission.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MacaroonPermission::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.MacaroonPermission)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.MacaroonPermission.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // string action = 2;
  if (this->action().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.MacaroonPermission.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.MacaroonPermission)
  return target;
}

size_t MacaroonPermission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.MacaroonPermission)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  // string action = 2;
  if (this->action().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacaroonPermission::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.MacaroonPermission)
  GOOGLE_DCHECK_NE(&from, this);
  const MacaroonPermission* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacaroonPermission>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.MacaroonPermission)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.MacaroonPermission)
    MergeFrom(*source);
  }
}

void MacaroonPermission::MergeFrom(const MacaroonPermission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.MacaroonPermission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.entity().size() > 0) {

    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  if (from.action().size() > 0) {

    action_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
}

void MacaroonPermission::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.MacaroonPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacaroonPermission::CopyFrom(const MacaroonPermission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.MacaroonPermission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacaroonPermission::IsInitialized() const {
  return true;
}

void MacaroonPermission::InternalSwap(MacaroonPermission* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  action_.Swap(&other->action_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MacaroonPermission::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BakeMacaroonRequest::InitAsDefaultInstance() {
}
class BakeMacaroonRequest::_Internal {
 public:
};

BakeMacaroonRequest::BakeMacaroonRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.BakeMacaroonRequest)
}
BakeMacaroonRequest::BakeMacaroonRequest(const BakeMacaroonRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_key_id_ = from.root_key_id_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.BakeMacaroonRequest)
}

void BakeMacaroonRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BakeMacaroonRequest_rpc_2eproto.base);
  root_key_id_ = PROTOBUF_ULONGLONG(0);
}

BakeMacaroonRequest::~BakeMacaroonRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.BakeMacaroonRequest)
  SharedDtor();
}

void BakeMacaroonRequest::SharedDtor() {
}

void BakeMacaroonRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BakeMacaroonRequest& BakeMacaroonRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BakeMacaroonRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void BakeMacaroonRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.BakeMacaroonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  root_key_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* BakeMacaroonRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.MacaroonPermission permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 root_key_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          root_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BakeMacaroonRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.BakeMacaroonRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.MacaroonPermission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_permissions(i), target, stream);
  }

  // uint64 root_key_id = 2;
  if (this->root_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_root_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.BakeMacaroonRequest)
  return target;
}

size_t BakeMacaroonRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.BakeMacaroonRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.MacaroonPermission permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 root_key_id = 2;
  if (this->root_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_root_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BakeMacaroonRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.BakeMacaroonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BakeMacaroonRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BakeMacaroonRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.BakeMacaroonRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.BakeMacaroonRequest)
    MergeFrom(*source);
  }
}

void BakeMacaroonRequest::MergeFrom(const BakeMacaroonRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.BakeMacaroonRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from.root_key_id() != 0) {
    _internal_set_root_key_id(from._internal_root_key_id());
  }
}

void BakeMacaroonRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.BakeMacaroonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakeMacaroonRequest::CopyFrom(const BakeMacaroonRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.BakeMacaroonRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakeMacaroonRequest::IsInitialized() const {
  return true;
}

void BakeMacaroonRequest::InternalSwap(BakeMacaroonRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  swap(root_key_id_, other->root_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BakeMacaroonRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BakeMacaroonResponse::InitAsDefaultInstance() {
}
class BakeMacaroonResponse::_Internal {
 public:
};

BakeMacaroonResponse::BakeMacaroonResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.BakeMacaroonResponse)
}
BakeMacaroonResponse::BakeMacaroonResponse(const BakeMacaroonResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_macaroon().empty()) {
    macaroon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.macaroon_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.BakeMacaroonResponse)
}

void BakeMacaroonResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BakeMacaroonResponse_rpc_2eproto.base);
  macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BakeMacaroonResponse::~BakeMacaroonResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.BakeMacaroonResponse)
  SharedDtor();
}

void BakeMacaroonResponse::SharedDtor() {
  macaroon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BakeMacaroonResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BakeMacaroonResponse& BakeMacaroonResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BakeMacaroonResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void BakeMacaroonResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.BakeMacaroonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  macaroon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BakeMacaroonResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string macaroon = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_macaroon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.BakeMacaroonResponse.macaroon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BakeMacaroonResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.BakeMacaroonResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string macaroon = 1;
  if (this->macaroon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_macaroon().data(), static_cast<int>(this->_internal_macaroon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.BakeMacaroonResponse.macaroon");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_macaroon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.BakeMacaroonResponse)
  return target;
}

size_t BakeMacaroonResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.BakeMacaroonResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string macaroon = 1;
  if (this->macaroon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_macaroon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BakeMacaroonResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.BakeMacaroonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BakeMacaroonResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BakeMacaroonResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.BakeMacaroonResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.BakeMacaroonResponse)
    MergeFrom(*source);
  }
}

void BakeMacaroonResponse::MergeFrom(const BakeMacaroonResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.BakeMacaroonResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.macaroon().size() > 0) {

    macaroon_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.macaroon_);
  }
}

void BakeMacaroonResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.BakeMacaroonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BakeMacaroonResponse::CopyFrom(const BakeMacaroonResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.BakeMacaroonResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BakeMacaroonResponse::IsInitialized() const {
  return true;
}

void BakeMacaroonResponse::InternalSwap(BakeMacaroonResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  macaroon_.Swap(&other->macaroon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BakeMacaroonResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMacaroonIDsRequest::InitAsDefaultInstance() {
}
class ListMacaroonIDsRequest::_Internal {
 public:
};

ListMacaroonIDsRequest::ListMacaroonIDsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListMacaroonIDsRequest)
}
ListMacaroonIDsRequest::ListMacaroonIDsRequest(const ListMacaroonIDsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListMacaroonIDsRequest)
}

void ListMacaroonIDsRequest::SharedCtor() {
}

ListMacaroonIDsRequest::~ListMacaroonIDsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListMacaroonIDsRequest)
  SharedDtor();
}

void ListMacaroonIDsRequest::SharedDtor() {
}

void ListMacaroonIDsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMacaroonIDsRequest& ListMacaroonIDsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMacaroonIDsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListMacaroonIDsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListMacaroonIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListMacaroonIDsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMacaroonIDsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListMacaroonIDsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListMacaroonIDsRequest)
  return target;
}

size_t ListMacaroonIDsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListMacaroonIDsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMacaroonIDsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListMacaroonIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMacaroonIDsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMacaroonIDsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListMacaroonIDsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListMacaroonIDsRequest)
    MergeFrom(*source);
  }
}

void ListMacaroonIDsRequest::MergeFrom(const ListMacaroonIDsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListMacaroonIDsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListMacaroonIDsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListMacaroonIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMacaroonIDsRequest::CopyFrom(const ListMacaroonIDsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListMacaroonIDsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMacaroonIDsRequest::IsInitialized() const {
  return true;
}

void ListMacaroonIDsRequest::InternalSwap(ListMacaroonIDsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMacaroonIDsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListMacaroonIDsResponse::InitAsDefaultInstance() {
}
class ListMacaroonIDsResponse::_Internal {
 public:
};

ListMacaroonIDsResponse::ListMacaroonIDsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListMacaroonIDsResponse)
}
ListMacaroonIDsResponse::ListMacaroonIDsResponse(const ListMacaroonIDsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      root_key_ids_(from.root_key_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListMacaroonIDsResponse)
}

void ListMacaroonIDsResponse::SharedCtor() {
}

ListMacaroonIDsResponse::~ListMacaroonIDsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListMacaroonIDsResponse)
  SharedDtor();
}

void ListMacaroonIDsResponse::SharedDtor() {
}

void ListMacaroonIDsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListMacaroonIDsResponse& ListMacaroonIDsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListMacaroonIDsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListMacaroonIDsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListMacaroonIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_key_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* ListMacaroonIDsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 root_key_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_root_key_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_root_key_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListMacaroonIDsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListMacaroonIDsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 root_key_ids = 1;
  {
    int byte_size = _root_key_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_root_key_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListMacaroonIDsResponse)
  return target;
}

size_t ListMacaroonIDsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListMacaroonIDsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 root_key_ids = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->root_key_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _root_key_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListMacaroonIDsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListMacaroonIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListMacaroonIDsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListMacaroonIDsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListMacaroonIDsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListMacaroonIDsResponse)
    MergeFrom(*source);
  }
}

void ListMacaroonIDsResponse::MergeFrom(const ListMacaroonIDsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListMacaroonIDsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  root_key_ids_.MergeFrom(from.root_key_ids_);
}

void ListMacaroonIDsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListMacaroonIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListMacaroonIDsResponse::CopyFrom(const ListMacaroonIDsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListMacaroonIDsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListMacaroonIDsResponse::IsInitialized() const {
  return true;
}

void ListMacaroonIDsResponse::InternalSwap(ListMacaroonIDsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  root_key_ids_.InternalSwap(&other->root_key_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListMacaroonIDsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMacaroonIDRequest::InitAsDefaultInstance() {
}
class DeleteMacaroonIDRequest::_Internal {
 public:
};

DeleteMacaroonIDRequest::DeleteMacaroonIDRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DeleteMacaroonIDRequest)
}
DeleteMacaroonIDRequest::DeleteMacaroonIDRequest(const DeleteMacaroonIDRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  root_key_id_ = from.root_key_id_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.DeleteMacaroonIDRequest)
}

void DeleteMacaroonIDRequest::SharedCtor() {
  root_key_id_ = PROTOBUF_ULONGLONG(0);
}

DeleteMacaroonIDRequest::~DeleteMacaroonIDRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.DeleteMacaroonIDRequest)
  SharedDtor();
}

void DeleteMacaroonIDRequest::SharedDtor() {
}

void DeleteMacaroonIDRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMacaroonIDRequest& DeleteMacaroonIDRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMacaroonIDRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteMacaroonIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DeleteMacaroonIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  root_key_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* DeleteMacaroonIDRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 root_key_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          root_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMacaroonIDRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DeleteMacaroonIDRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 root_key_id = 1;
  if (this->root_key_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_root_key_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DeleteMacaroonIDRequest)
  return target;
}

size_t DeleteMacaroonIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DeleteMacaroonIDRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 root_key_id = 1;
  if (this->root_key_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_root_key_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMacaroonIDRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DeleteMacaroonIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMacaroonIDRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMacaroonIDRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DeleteMacaroonIDRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DeleteMacaroonIDRequest)
    MergeFrom(*source);
  }
}

void DeleteMacaroonIDRequest::MergeFrom(const DeleteMacaroonIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DeleteMacaroonIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.root_key_id() != 0) {
    _internal_set_root_key_id(from._internal_root_key_id());
  }
}

void DeleteMacaroonIDRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DeleteMacaroonIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMacaroonIDRequest::CopyFrom(const DeleteMacaroonIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DeleteMacaroonIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMacaroonIDRequest::IsInitialized() const {
  return true;
}

void DeleteMacaroonIDRequest::InternalSwap(DeleteMacaroonIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(root_key_id_, other->root_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMacaroonIDRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteMacaroonIDResponse::InitAsDefaultInstance() {
}
class DeleteMacaroonIDResponse::_Internal {
 public:
};

DeleteMacaroonIDResponse::DeleteMacaroonIDResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.DeleteMacaroonIDResponse)
}
DeleteMacaroonIDResponse::DeleteMacaroonIDResponse(const DeleteMacaroonIDResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deleted_ = from.deleted_;
  // @@protoc_insertion_point(copy_constructor:lnrpc.DeleteMacaroonIDResponse)
}

void DeleteMacaroonIDResponse::SharedCtor() {
  deleted_ = false;
}

DeleteMacaroonIDResponse::~DeleteMacaroonIDResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.DeleteMacaroonIDResponse)
  SharedDtor();
}

void DeleteMacaroonIDResponse::SharedDtor() {
}

void DeleteMacaroonIDResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteMacaroonIDResponse& DeleteMacaroonIDResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteMacaroonIDResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void DeleteMacaroonIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.DeleteMacaroonIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deleted_ = false;
  _internal_metadata_.Clear();
}

const char* DeleteMacaroonIDResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool deleted = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteMacaroonIDResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.DeleteMacaroonIDResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool deleted = 1;
  if (this->deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_deleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.DeleteMacaroonIDResponse)
  return target;
}

size_t DeleteMacaroonIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.DeleteMacaroonIDResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool deleted = 1;
  if (this->deleted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteMacaroonIDResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.DeleteMacaroonIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteMacaroonIDResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteMacaroonIDResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.DeleteMacaroonIDResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.DeleteMacaroonIDResponse)
    MergeFrom(*source);
  }
}

void DeleteMacaroonIDResponse::MergeFrom(const DeleteMacaroonIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.DeleteMacaroonIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deleted() != 0) {
    _internal_set_deleted(from._internal_deleted());
  }
}

void DeleteMacaroonIDResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.DeleteMacaroonIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteMacaroonIDResponse::CopyFrom(const DeleteMacaroonIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.DeleteMacaroonIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteMacaroonIDResponse::IsInitialized() const {
  return true;
}

void DeleteMacaroonIDResponse::InternalSwap(DeleteMacaroonIDResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(deleted_, other->deleted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteMacaroonIDResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacaroonPermissionList::InitAsDefaultInstance() {
}
class MacaroonPermissionList::_Internal {
 public:
};

MacaroonPermissionList::MacaroonPermissionList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.MacaroonPermissionList)
}
MacaroonPermissionList::MacaroonPermissionList(const MacaroonPermissionList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.MacaroonPermissionList)
}

void MacaroonPermissionList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MacaroonPermissionList_rpc_2eproto.base);
}

MacaroonPermissionList::~MacaroonPermissionList() {
  // @@protoc_insertion_point(destructor:lnrpc.MacaroonPermissionList)
  SharedDtor();
}

void MacaroonPermissionList::SharedDtor() {
}

void MacaroonPermissionList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacaroonPermissionList& MacaroonPermissionList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacaroonPermissionList_rpc_2eproto.base);
  return *internal_default_instance();
}


void MacaroonPermissionList::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.MacaroonPermissionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  _internal_metadata_.Clear();
}

const char* MacaroonPermissionList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lnrpc.MacaroonPermission permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MacaroonPermissionList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.MacaroonPermissionList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lnrpc.MacaroonPermission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_permissions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.MacaroonPermissionList)
  return target;
}

size_t MacaroonPermissionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.MacaroonPermissionList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.MacaroonPermission permissions = 1;
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacaroonPermissionList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.MacaroonPermissionList)
  GOOGLE_DCHECK_NE(&from, this);
  const MacaroonPermissionList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacaroonPermissionList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.MacaroonPermissionList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.MacaroonPermissionList)
    MergeFrom(*source);
  }
}

void MacaroonPermissionList::MergeFrom(const MacaroonPermissionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.MacaroonPermissionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
}

void MacaroonPermissionList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.MacaroonPermissionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacaroonPermissionList::CopyFrom(const MacaroonPermissionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.MacaroonPermissionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacaroonPermissionList::IsInitialized() const {
  return true;
}

void MacaroonPermissionList::InternalSwap(MacaroonPermissionList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MacaroonPermissionList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPermissionsRequest::InitAsDefaultInstance() {
}
class ListPermissionsRequest::_Internal {
 public:
};

ListPermissionsRequest::ListPermissionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPermissionsRequest)
}
ListPermissionsRequest::ListPermissionsRequest(const ListPermissionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPermissionsRequest)
}

void ListPermissionsRequest::SharedCtor() {
}

ListPermissionsRequest::~ListPermissionsRequest() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPermissionsRequest)
  SharedDtor();
}

void ListPermissionsRequest::SharedDtor() {
}

void ListPermissionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPermissionsRequest& ListPermissionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPermissionsRequest_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ListPermissionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPermissionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPermissionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPermissionsRequest)
  return target;
}

size_t ListPermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPermissionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPermissionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPermissionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPermissionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPermissionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPermissionsRequest)
    MergeFrom(*source);
  }
}

void ListPermissionsRequest::MergeFrom(const ListPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListPermissionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPermissionsRequest::CopyFrom(const ListPermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPermissionsRequest::IsInitialized() const {
  return true;
}

void ListPermissionsRequest::InternalSwap(ListPermissionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPermissionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse() {}
ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::MergeFrom(const ListPermissionsResponse_MethodPermissionsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void ListPermissionsResponse::InitAsDefaultInstance() {
}
class ListPermissionsResponse::_Internal {
 public:
};

ListPermissionsResponse::ListPermissionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ListPermissionsResponse)
}
ListPermissionsResponse::ListPermissionsResponse(const ListPermissionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  method_permissions_.MergeFrom(from.method_permissions_);
  // @@protoc_insertion_point(copy_constructor:lnrpc.ListPermissionsResponse)
}

void ListPermissionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPermissionsResponse_rpc_2eproto.base);
}

ListPermissionsResponse::~ListPermissionsResponse() {
  // @@protoc_insertion_point(destructor:lnrpc.ListPermissionsResponse)
  SharedDtor();
}

void ListPermissionsResponse::SharedDtor() {
}

void ListPermissionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPermissionsResponse& ListPermissionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPermissionsResponse_rpc_2eproto.base);
  return *internal_default_instance();
}


void ListPermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ListPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  method_permissions_.Clear();
  _internal_metadata_.Clear();
}

const char* ListPermissionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .lnrpc.MacaroonPermissionList> method_permissions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&method_permissions_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPermissionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ListPermissionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .lnrpc.MacaroonPermissionList> method_permissions = 1;
  if (!this->_internal_method_permissions().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "lnrpc.ListPermissionsResponse.MethodPermissionsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_method_permissions().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_method_permissions().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >::const_iterator
          it = this->_internal_method_permissions().begin();
          it != this->_internal_method_permissions().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >::const_iterator
          it = this->_internal_method_permissions().begin();
          it != this->_internal_method_permissions().end(); ++it) {
        target = ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ListPermissionsResponse)
  return target;
}

size_t ListPermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ListPermissionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .lnrpc.MacaroonPermissionList> method_permissions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_method_permissions_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >::const_iterator
      it = this->_internal_method_permissions().begin();
      it != this->_internal_method_permissions().end(); ++it) {
    total_size += ListPermissionsResponse_MethodPermissionsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPermissionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ListPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPermissionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPermissionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ListPermissionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ListPermissionsResponse)
    MergeFrom(*source);
  }
}

void ListPermissionsResponse::MergeFrom(const ListPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ListPermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  method_permissions_.MergeFrom(from.method_permissions_);
}

void ListPermissionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ListPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPermissionsResponse::CopyFrom(const ListPermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ListPermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPermissionsResponse::IsInitialized() const {
  return true;
}

void ListPermissionsResponse::InternalSwap(ListPermissionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  method_permissions_.Swap(&other->method_permissions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPermissionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Failure::InitAsDefaultInstance() {
  ::lnrpc::_Failure_default_instance_._instance.get_mutable()->channel_update_ = const_cast< ::lnrpc::ChannelUpdate*>(
      ::lnrpc::ChannelUpdate::internal_default_instance());
}
class Failure::_Internal {
 public:
  static const ::lnrpc::ChannelUpdate& channel_update(const Failure* msg);
};

const ::lnrpc::ChannelUpdate&
Failure::_Internal::channel_update(const Failure* msg) {
  return *msg->channel_update_;
}
Failure::Failure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Failure)
}
Failure::Failure(const Failure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  onion_sha_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_onion_sha_256().empty()) {
    onion_sha_256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onion_sha_256_);
  }
  if (from._internal_has_channel_update()) {
    channel_update_ = new ::lnrpc::ChannelUpdate(*from.channel_update_);
  } else {
    channel_update_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&code_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.Failure)
}

void Failure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Failure_rpc_2eproto.base);
  onion_sha_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&channel_update_)) + sizeof(height_));
}

Failure::~Failure() {
  // @@protoc_insertion_point(destructor:lnrpc.Failure)
  SharedDtor();
}

void Failure::SharedDtor() {
  onion_sha_256_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_update_;
}

void Failure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Failure& Failure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Failure_rpc_2eproto.base);
  return *internal_default_instance();
}


void Failure::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  onion_sha_256_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_update_ != nullptr) {
    delete channel_update_;
  }
  channel_update_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&code_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

const char* Failure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.Failure.FailureCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::lnrpc::Failure_FailureCode>(val));
        } else goto handle_unusual;
        continue;
      // .lnrpc.ChannelUpdate channel_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 htlc_msat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          htlc_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes onion_sha_256 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_onion_sha_256();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cltv_expiry = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          cltv_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 failure_source_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          failure_source_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Failure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Failure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.Failure.FailureCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // .lnrpc.ChannelUpdate channel_update = 3;
  if (this->has_channel_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_update(this), target, stream);
  }

  // uint64 htlc_msat = 4;
  if (this->htlc_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_htlc_msat(), target);
  }

  // bytes onion_sha_256 = 5;
  if (this->onion_sha_256().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_onion_sha_256(), target);
  }

  // uint32 cltv_expiry = 6;
  if (this->cltv_expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_cltv_expiry(), target);
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags(), target);
  }

  // uint32 failure_source_index = 8;
  if (this->failure_source_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_failure_source_index(), target);
  }

  // uint32 height = 9;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Failure)
  return target;
}

size_t Failure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Failure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes onion_sha_256 = 5;
  if (this->onion_sha_256().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_onion_sha_256());
  }

  // .lnrpc.ChannelUpdate channel_update = 3;
  if (this->has_channel_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_update_);
  }

  // .lnrpc.Failure.FailureCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // uint32 cltv_expiry = 6;
  if (this->cltv_expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cltv_expiry());
  }

  // uint64 htlc_msat = 4;
  if (this->htlc_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_htlc_msat());
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  // uint32 failure_source_index = 8;
  if (this->failure_source_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_failure_source_index());
  }

  // uint32 height = 9;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Failure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  const Failure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Failure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Failure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Failure)
    MergeFrom(*source);
  }
}

void Failure::MergeFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Failure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.onion_sha_256().size() > 0) {

    onion_sha_256_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.onion_sha_256_);
  }
  if (from.has_channel_update()) {
    _internal_mutable_channel_update()->::lnrpc::ChannelUpdate::MergeFrom(from._internal_channel_update());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.cltv_expiry() != 0) {
    _internal_set_cltv_expiry(from._internal_cltv_expiry());
  }
  if (from.htlc_msat() != 0) {
    _internal_set_htlc_msat(from._internal_htlc_msat());
  }
  if (from.flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from.failure_source_index() != 0) {
    _internal_set_failure_source_index(from._internal_failure_source_index());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Failure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Failure::CopyFrom(const Failure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Failure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Failure::IsInitialized() const {
  return true;
}

void Failure::InternalSwap(Failure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  onion_sha_256_.Swap(&other->onion_sha_256_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_update_, other->channel_update_);
  swap(code_, other->code_);
  swap(cltv_expiry_, other->cltv_expiry_);
  swap(htlc_msat_, other->htlc_msat_);
  swap(flags_, other->flags_);
  swap(failure_source_index_, other->failure_source_index_);
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Failure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChannelUpdate::InitAsDefaultInstance() {
}
class ChannelUpdate::_Internal {
 public:
};

ChannelUpdate::ChannelUpdate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.ChannelUpdate)
}
ChannelUpdate::ChannelUpdate(const ChannelUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chain_hash().empty()) {
    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  extra_opaque_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extra_opaque_data().empty()) {
    extra_opaque_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_opaque_data_);
  }
  ::memcpy(&chan_id_, &from.chan_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&htlc_maximum_msat_) -
    reinterpret_cast<char*>(&chan_id_)) + sizeof(htlc_maximum_msat_));
  // @@protoc_insertion_point(copy_constructor:lnrpc.ChannelUpdate)
}

void ChannelUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelUpdate_rpc_2eproto.base);
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_opaque_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&htlc_maximum_msat_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(htlc_maximum_msat_));
}

ChannelUpdate::~ChannelUpdate() {
  // @@protoc_insertion_point(destructor:lnrpc.ChannelUpdate)
  SharedDtor();
}

void ChannelUpdate::SharedDtor() {
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_opaque_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChannelUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelUpdate& ChannelUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelUpdate_rpc_2eproto.base);
  return *internal_default_instance();
}


void ChannelUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.ChannelUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extra_opaque_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&chan_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&htlc_maximum_msat_) -
      reinterpret_cast<char*>(&chan_id_)) + sizeof(htlc_maximum_msat_));
  _internal_metadata_.Clear();
}

const char* ChannelUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chain_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_chain_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 chan_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 channel_flags = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          channel_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_lock_delta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          time_lock_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 htlc_minimum_msat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          htlc_minimum_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 base_fee = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          base_fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 fee_rate = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          fee_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 message_flags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          message_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 htlc_maximum_msat = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          htlc_maximum_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes extra_opaque_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_extra_opaque_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.ChannelUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_signature(), target);
  }

  // bytes chain_hash = 2;
  if (this->chain_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_chain_hash(), target);
  }

  // uint64 chan_id = 3 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_chan_id(), target);
  }

  // uint32 timestamp = 4;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timestamp(), target);
  }

  // uint32 channel_flags = 5;
  if (this->channel_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_channel_flags(), target);
  }

  // uint32 time_lock_delta = 6;
  if (this->time_lock_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_time_lock_delta(), target);
  }

  // uint64 htlc_minimum_msat = 7;
  if (this->htlc_minimum_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_htlc_minimum_msat(), target);
  }

  // uint32 base_fee = 8;
  if (this->base_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base_fee(), target);
  }

  // uint32 fee_rate = 9;
  if (this->fee_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_fee_rate(), target);
  }

  // uint32 message_flags = 10;
  if (this->message_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_message_flags(), target);
  }

  // uint64 htlc_maximum_msat = 11;
  if (this->htlc_maximum_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_htlc_maximum_msat(), target);
  }

  // bytes extra_opaque_data = 12;
  if (this->extra_opaque_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        12, this->_internal_extra_opaque_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.ChannelUpdate)
  return target;
}

size_t ChannelUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.ChannelUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes signature = 1;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes chain_hash = 2;
  if (this->chain_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chain_hash());
  }

  // bytes extra_opaque_data = 12;
  if (this->extra_opaque_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_extra_opaque_data());
  }

  // uint64 chan_id = 3 [jstype = JS_STRING];
  if (this->chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chan_id());
  }

  // uint32 timestamp = 4;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timestamp());
  }

  // uint32 channel_flags = 5;
  if (this->channel_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_channel_flags());
  }

  // uint64 htlc_minimum_msat = 7;
  if (this->htlc_minimum_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_htlc_minimum_msat());
  }

  // uint32 time_lock_delta = 6;
  if (this->time_lock_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_lock_delta());
  }

  // uint32 base_fee = 8;
  if (this->base_fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_base_fee());
  }

  // uint32 fee_rate = 9;
  if (this->fee_rate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_fee_rate());
  }

  // uint32 message_flags = 10;
  if (this->message_flags() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_message_flags());
  }

  // uint64 htlc_maximum_msat = 11;
  if (this->htlc_maximum_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_htlc_maximum_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.ChannelUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.ChannelUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.ChannelUpdate)
    MergeFrom(*source);
  }
}

void ChannelUpdate::MergeFrom(const ChannelUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.ChannelUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.chain_hash().size() > 0) {

    chain_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chain_hash_);
  }
  if (from.extra_opaque_data().size() > 0) {

    extra_opaque_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.extra_opaque_data_);
  }
  if (from.chan_id() != 0) {
    _internal_set_chan_id(from._internal_chan_id());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.channel_flags() != 0) {
    _internal_set_channel_flags(from._internal_channel_flags());
  }
  if (from.htlc_minimum_msat() != 0) {
    _internal_set_htlc_minimum_msat(from._internal_htlc_minimum_msat());
  }
  if (from.time_lock_delta() != 0) {
    _internal_set_time_lock_delta(from._internal_time_lock_delta());
  }
  if (from.base_fee() != 0) {
    _internal_set_base_fee(from._internal_base_fee());
  }
  if (from.fee_rate() != 0) {
    _internal_set_fee_rate(from._internal_fee_rate());
  }
  if (from.message_flags() != 0) {
    _internal_set_message_flags(from._internal_message_flags());
  }
  if (from.htlc_maximum_msat() != 0) {
    _internal_set_htlc_maximum_msat(from._internal_htlc_maximum_msat());
  }
}

void ChannelUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.ChannelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelUpdate::CopyFrom(const ChannelUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.ChannelUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelUpdate::IsInitialized() const {
  return true;
}

void ChannelUpdate::InternalSwap(ChannelUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chain_hash_.Swap(&other->chain_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  extra_opaque_data_.Swap(&other->extra_opaque_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chan_id_, other->chan_id_);
  swap(timestamp_, other->timestamp_);
  swap(channel_flags_, other->channel_flags_);
  swap(htlc_minimum_msat_, other->htlc_minimum_msat_);
  swap(time_lock_delta_, other->time_lock_delta_);
  swap(base_fee_, other->base_fee_);
  swap(fee_rate_, other->fee_rate_);
  swap(message_flags_, other->message_flags_);
  swap(htlc_maximum_msat_, other->htlc_maximum_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MacaroonId::InitAsDefaultInstance() {
}
class MacaroonId::_Internal {
 public:
};

MacaroonId::MacaroonId()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.MacaroonId)
}
MacaroonId::MacaroonId(const MacaroonId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nonce().empty()) {
    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  storageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_storageid().empty()) {
    storageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storageid_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.MacaroonId)
}

void MacaroonId::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MacaroonId_rpc_2eproto.base);
  nonce_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MacaroonId::~MacaroonId() {
  // @@protoc_insertion_point(destructor:lnrpc.MacaroonId)
  SharedDtor();
}

void MacaroonId::SharedDtor() {
  nonce_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MacaroonId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MacaroonId& MacaroonId::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MacaroonId_rpc_2eproto.base);
  return *internal_default_instance();
}


void MacaroonId::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.MacaroonId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  storageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MacaroonId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes nonce = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nonce();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes storageId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_storageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.Op ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MacaroonId::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.MacaroonId)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nonce(), target);
  }

  // bytes storageId = 2;
  if (this->storageid().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_storageid(), target);
  }

  // repeated .lnrpc.Op ops = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.MacaroonId)
  return target;
}

size_t MacaroonId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.MacaroonId)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.Op ops = 3;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes nonce = 1;
  if (this->nonce().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nonce());
  }

  // bytes storageId = 2;
  if (this->storageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_storageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MacaroonId::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.MacaroonId)
  GOOGLE_DCHECK_NE(&from, this);
  const MacaroonId* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MacaroonId>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.MacaroonId)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.MacaroonId)
    MergeFrom(*source);
  }
}

void MacaroonId::MergeFrom(const MacaroonId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.MacaroonId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  if (from.nonce().size() > 0) {

    nonce_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nonce_);
  }
  if (from.storageid().size() > 0) {

    storageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.storageid_);
  }
}

void MacaroonId::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.MacaroonId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MacaroonId::CopyFrom(const MacaroonId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.MacaroonId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MacaroonId::IsInitialized() const {
  return true;
}

void MacaroonId::InternalSwap(MacaroonId* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  nonce_.Swap(&other->nonce_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  storageid_.Swap(&other->storageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MacaroonId::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Op::InitAsDefaultInstance() {
}
class Op::_Internal {
 public:
};

Op::Op()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lnrpc.Op)
}
Op::Op(const Op& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_entity().empty()) {
    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
  // @@protoc_insertion_point(copy_constructor:lnrpc.Op)
}

void Op::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Op_rpc_2eproto.base);
  entity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Op::~Op() {
  // @@protoc_insertion_point(destructor:lnrpc.Op)
  SharedDtor();
}

void Op::SharedDtor() {
  entity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Op::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Op& Op::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Op_rpc_2eproto.base);
  return *internal_default_instance();
}


void Op::Clear() {
// @@protoc_insertion_point(message_clear_start:lnrpc.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Op::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string entity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_entity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Op.entity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string actions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_actions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lnrpc.Op.actions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Op::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lnrpc.Op)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string entity = 1;
  if (this->entity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_entity().data(), static_cast<int>(this->_internal_entity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Op.entity");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_entity(), target);
  }

  // repeated string actions = 2;
  for (int i = 0, n = this->_internal_actions_size(); i < n; i++) {
    const auto& s = this->_internal_actions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lnrpc.Op.actions");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lnrpc.Op)
  return target;
}

size_t Op::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lnrpc.Op)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string actions = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(actions_.size());
  for (int i = 0, n = actions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      actions_.Get(i));
  }

  // string entity = 1;
  if (this->entity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_entity());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Op::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lnrpc.Op)
  GOOGLE_DCHECK_NE(&from, this);
  const Op* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Op>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lnrpc.Op)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lnrpc.Op)
    MergeFrom(*source);
  }
}

void Op::MergeFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lnrpc.Op)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.entity().size() > 0) {

    entity_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.entity_);
  }
}

void Op::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lnrpc.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Op::CopyFrom(const Op& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lnrpc.Op)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Op::IsInitialized() const {
  return true;
}

void Op::InternalSwap(Op* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
  entity_.Swap(&other->entity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Op::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lnrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lnrpc::Utxo* Arena::CreateMaybeMessage< ::lnrpc::Utxo >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Utxo >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Transaction* Arena::CreateMaybeMessage< ::lnrpc::Transaction >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetTransactionsRequest* Arena::CreateMaybeMessage< ::lnrpc::GetTransactionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetTransactionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::TransactionDetails* Arena::CreateMaybeMessage< ::lnrpc::TransactionDetails >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::TransactionDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FeeLimit* Arena::CreateMaybeMessage< ::lnrpc::FeeLimit >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FeeLimit >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendRequest* Arena::CreateMaybeMessage< ::lnrpc::SendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendResponse* Arena::CreateMaybeMessage< ::lnrpc::SendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendToRouteRequest* Arena::CreateMaybeMessage< ::lnrpc::SendToRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendToRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelAcceptRequest* Arena::CreateMaybeMessage< ::lnrpc::ChannelAcceptRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelAcceptRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelAcceptResponse* Arena::CreateMaybeMessage< ::lnrpc::ChannelAcceptResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelAcceptResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelPoint* Arena::CreateMaybeMessage< ::lnrpc::ChannelPoint >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::OutPoint* Arena::CreateMaybeMessage< ::lnrpc::OutPoint >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::OutPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::LightningAddress* Arena::CreateMaybeMessage< ::lnrpc::LightningAddress >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::LightningAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::EstimateFeeRequest* Arena::CreateMaybeMessage< ::lnrpc::EstimateFeeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::EstimateFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::EstimateFeeResponse* Arena::CreateMaybeMessage< ::lnrpc::EstimateFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::EstimateFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendManyRequest* Arena::CreateMaybeMessage< ::lnrpc::SendManyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendManyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendManyResponse* Arena::CreateMaybeMessage< ::lnrpc::SendManyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendManyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendCoinsRequest* Arena::CreateMaybeMessage< ::lnrpc::SendCoinsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendCoinsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SendCoinsResponse* Arena::CreateMaybeMessage< ::lnrpc::SendCoinsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SendCoinsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListUnspentRequest* Arena::CreateMaybeMessage< ::lnrpc::ListUnspentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListUnspentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListUnspentResponse* Arena::CreateMaybeMessage< ::lnrpc::ListUnspentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListUnspentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NewAddressRequest* Arena::CreateMaybeMessage< ::lnrpc::NewAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NewAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NewAddressResponse* Arena::CreateMaybeMessage< ::lnrpc::NewAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NewAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SignMessageRequest* Arena::CreateMaybeMessage< ::lnrpc::SignMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SignMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::SignMessageResponse* Arena::CreateMaybeMessage< ::lnrpc::SignMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::SignMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::VerifyMessageRequest* Arena::CreateMaybeMessage< ::lnrpc::VerifyMessageRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::VerifyMessageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::VerifyMessageResponse* Arena::CreateMaybeMessage< ::lnrpc::VerifyMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::VerifyMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ConnectPeerRequest* Arena::CreateMaybeMessage< ::lnrpc::ConnectPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ConnectPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ConnectPeerResponse* Arena::CreateMaybeMessage< ::lnrpc::ConnectPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ConnectPeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DisconnectPeerRequest* Arena::CreateMaybeMessage< ::lnrpc::DisconnectPeerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DisconnectPeerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DisconnectPeerResponse* Arena::CreateMaybeMessage< ::lnrpc::DisconnectPeerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DisconnectPeerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::HTLC* Arena::CreateMaybeMessage< ::lnrpc::HTLC >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::HTLC >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelConstraints* Arena::CreateMaybeMessage< ::lnrpc::ChannelConstraints >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Channel* Arena::CreateMaybeMessage< ::lnrpc::Channel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListChannelsRequest* Arena::CreateMaybeMessage< ::lnrpc::ListChannelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListChannelsResponse* Arena::CreateMaybeMessage< ::lnrpc::ListChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelCloseSummary* Arena::CreateMaybeMessage< ::lnrpc::ChannelCloseSummary >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelCloseSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Resolution* Arena::CreateMaybeMessage< ::lnrpc::Resolution >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Resolution >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ClosedChannelsRequest* Arena::CreateMaybeMessage< ::lnrpc::ClosedChannelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ClosedChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ClosedChannelsResponse* Arena::CreateMaybeMessage< ::lnrpc::ClosedChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ClosedChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Peer_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::Peer_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Peer_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Peer* Arena::CreateMaybeMessage< ::lnrpc::Peer >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Peer >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::TimestampedError* Arena::CreateMaybeMessage< ::lnrpc::TimestampedError >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::TimestampedError >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPeersRequest* Arena::CreateMaybeMessage< ::lnrpc::ListPeersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPeersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPeersResponse* Arena::CreateMaybeMessage< ::lnrpc::ListPeersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPeersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PeerEventSubscription* Arena::CreateMaybeMessage< ::lnrpc::PeerEventSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PeerEventSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PeerEvent* Arena::CreateMaybeMessage< ::lnrpc::PeerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PeerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetInfoRequest* Arena::CreateMaybeMessage< ::lnrpc::GetInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetInfoResponse* Arena::CreateMaybeMessage< ::lnrpc::GetInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetRecoveryInfoRequest* Arena::CreateMaybeMessage< ::lnrpc::GetRecoveryInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetRecoveryInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GetRecoveryInfoResponse* Arena::CreateMaybeMessage< ::lnrpc::GetRecoveryInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GetRecoveryInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Chain* Arena::CreateMaybeMessage< ::lnrpc::Chain >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Chain >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ConfirmationUpdate* Arena::CreateMaybeMessage< ::lnrpc::ConfirmationUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ConfirmationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelOpenUpdate* Arena::CreateMaybeMessage< ::lnrpc::ChannelOpenUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelOpenUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelCloseUpdate* Arena::CreateMaybeMessage< ::lnrpc::ChannelCloseUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelCloseUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::CloseChannelRequest* Arena::CreateMaybeMessage< ::lnrpc::CloseChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::CloseChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::CloseStatusUpdate* Arena::CreateMaybeMessage< ::lnrpc::CloseStatusUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::CloseStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingUpdate* Arena::CreateMaybeMessage< ::lnrpc::PendingUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ReadyForPsbtFunding* Arena::CreateMaybeMessage< ::lnrpc::ReadyForPsbtFunding >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ReadyForPsbtFunding >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::OpenChannelRequest* Arena::CreateMaybeMessage< ::lnrpc::OpenChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::OpenChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::OpenStatusUpdate* Arena::CreateMaybeMessage< ::lnrpc::OpenStatusUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::OpenStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::KeyLocator* Arena::CreateMaybeMessage< ::lnrpc::KeyLocator >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::KeyLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::KeyDescriptor* Arena::CreateMaybeMessage< ::lnrpc::KeyDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::KeyDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChanPointShim* Arena::CreateMaybeMessage< ::lnrpc::ChanPointShim >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChanPointShim >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PsbtShim* Arena::CreateMaybeMessage< ::lnrpc::PsbtShim >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PsbtShim >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingShim* Arena::CreateMaybeMessage< ::lnrpc::FundingShim >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingShim >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingShimCancel* Arena::CreateMaybeMessage< ::lnrpc::FundingShimCancel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingShimCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingPsbtVerify* Arena::CreateMaybeMessage< ::lnrpc::FundingPsbtVerify >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingPsbtVerify >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingPsbtFinalize* Arena::CreateMaybeMessage< ::lnrpc::FundingPsbtFinalize >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingPsbtFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingTransitionMsg* Arena::CreateMaybeMessage< ::lnrpc::FundingTransitionMsg >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingTransitionMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FundingStateStepResp* Arena::CreateMaybeMessage< ::lnrpc::FundingStateStepResp >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FundingStateStepResp >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingHTLC* Arena::CreateMaybeMessage< ::lnrpc::PendingHTLC >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingHTLC >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsRequest* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_PendingChannel* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_PendingChannel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_PendingChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_PendingOpenChannel* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_Commitments* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_Commitments >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_Commitments >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_ClosedChannel* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_ClosedChannel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_ClosedChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse_ForceClosedChannel* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PendingChannelsResponse* Arena::CreateMaybeMessage< ::lnrpc::PendingChannelsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PendingChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelEventSubscription* Arena::CreateMaybeMessage< ::lnrpc::ChannelEventSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelEventSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelEventUpdate* Arena::CreateMaybeMessage< ::lnrpc::ChannelEventUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelEventUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::WalletAccountBalance* Arena::CreateMaybeMessage< ::lnrpc::WalletAccountBalance >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::WalletAccountBalance >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::WalletBalanceRequest* Arena::CreateMaybeMessage< ::lnrpc::WalletBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::WalletBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::WalletBalanceResponse* Arena::CreateMaybeMessage< ::lnrpc::WalletBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::WalletBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Amount* Arena::CreateMaybeMessage< ::lnrpc::Amount >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Amount >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelBalanceRequest* Arena::CreateMaybeMessage< ::lnrpc::ChannelBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelBalanceResponse* Arena::CreateMaybeMessage< ::lnrpc::ChannelBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::QueryRoutesRequest* Arena::CreateMaybeMessage< ::lnrpc::QueryRoutesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::QueryRoutesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodePair* Arena::CreateMaybeMessage< ::lnrpc::NodePair >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodePair >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::EdgeLocator* Arena::CreateMaybeMessage< ::lnrpc::EdgeLocator >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::EdgeLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::QueryRoutesResponse* Arena::CreateMaybeMessage< ::lnrpc::QueryRoutesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::QueryRoutesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Hop_CustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::Hop_CustomRecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Hop_CustomRecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Hop* Arena::CreateMaybeMessage< ::lnrpc::Hop >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Hop >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::MPPRecord* Arena::CreateMaybeMessage< ::lnrpc::MPPRecord >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::MPPRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Route* Arena::CreateMaybeMessage< ::lnrpc::Route >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeInfoRequest* Arena::CreateMaybeMessage< ::lnrpc::NodeInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeInfo* Arena::CreateMaybeMessage< ::lnrpc::NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::LightningNode_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::LightningNode_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::LightningNode_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::LightningNode* Arena::CreateMaybeMessage< ::lnrpc::LightningNode >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::LightningNode >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeAddress* Arena::CreateMaybeMessage< ::lnrpc::NodeAddress >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeAddress >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::RoutingPolicy* Arena::CreateMaybeMessage< ::lnrpc::RoutingPolicy >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::RoutingPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelEdge* Arena::CreateMaybeMessage< ::lnrpc::ChannelEdge >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelEdge >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelGraphRequest* Arena::CreateMaybeMessage< ::lnrpc::ChannelGraphRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelGraphRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelGraph* Arena::CreateMaybeMessage< ::lnrpc::ChannelGraph >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeMetricsRequest* Arena::CreateMaybeMessage< ::lnrpc::NodeMetricsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeMetricsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeMetricsResponse* Arena::CreateMaybeMessage< ::lnrpc::NodeMetricsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeMetricsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FloatMetric* Arena::CreateMaybeMessage< ::lnrpc::FloatMetric >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FloatMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChanInfoRequest* Arena::CreateMaybeMessage< ::lnrpc::ChanInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChanInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NetworkInfoRequest* Arena::CreateMaybeMessage< ::lnrpc::NetworkInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NetworkInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NetworkInfo* Arena::CreateMaybeMessage< ::lnrpc::NetworkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NetworkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::StopRequest* Arena::CreateMaybeMessage< ::lnrpc::StopRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::StopResponse* Arena::CreateMaybeMessage< ::lnrpc::StopResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::StopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GraphTopologySubscription* Arena::CreateMaybeMessage< ::lnrpc::GraphTopologySubscription >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GraphTopologySubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::GraphTopologyUpdate* Arena::CreateMaybeMessage< ::lnrpc::GraphTopologyUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::GraphTopologyUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::NodeUpdate* Arena::CreateMaybeMessage< ::lnrpc::NodeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::NodeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelEdgeUpdate* Arena::CreateMaybeMessage< ::lnrpc::ChannelEdgeUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelEdgeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ClosedChannelUpdate* Arena::CreateMaybeMessage< ::lnrpc::ClosedChannelUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ClosedChannelUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::HopHint* Arena::CreateMaybeMessage< ::lnrpc::HopHint >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::HopHint >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::RouteHint* Arena::CreateMaybeMessage< ::lnrpc::RouteHint >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::RouteHint >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Invoice_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::Invoice_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Invoice_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Invoice* Arena::CreateMaybeMessage< ::lnrpc::Invoice >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Invoice >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::InvoiceHTLC* Arena::CreateMaybeMessage< ::lnrpc::InvoiceHTLC >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::InvoiceHTLC >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::AMP* Arena::CreateMaybeMessage< ::lnrpc::AMP >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::AMP >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::AddInvoiceResponse* Arena::CreateMaybeMessage< ::lnrpc::AddInvoiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::AddInvoiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PaymentHash* Arena::CreateMaybeMessage< ::lnrpc::PaymentHash >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PaymentHash >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListInvoiceRequest* Arena::CreateMaybeMessage< ::lnrpc::ListInvoiceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListInvoiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListInvoiceResponse* Arena::CreateMaybeMessage< ::lnrpc::ListInvoiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListInvoiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::InvoiceSubscription* Arena::CreateMaybeMessage< ::lnrpc::InvoiceSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::InvoiceSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Payment* Arena::CreateMaybeMessage< ::lnrpc::Payment >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Payment >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::HTLCAttempt* Arena::CreateMaybeMessage< ::lnrpc::HTLCAttempt >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::HTLCAttempt >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPaymentsRequest* Arena::CreateMaybeMessage< ::lnrpc::ListPaymentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPaymentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPaymentsResponse* Arena::CreateMaybeMessage< ::lnrpc::ListPaymentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPaymentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DeleteAllPaymentsRequest* Arena::CreateMaybeMessage< ::lnrpc::DeleteAllPaymentsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DeleteAllPaymentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DeleteAllPaymentsResponse* Arena::CreateMaybeMessage< ::lnrpc::DeleteAllPaymentsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DeleteAllPaymentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::AbandonChannelRequest* Arena::CreateMaybeMessage< ::lnrpc::AbandonChannelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::AbandonChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::AbandonChannelResponse* Arena::CreateMaybeMessage< ::lnrpc::AbandonChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::AbandonChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DebugLevelRequest* Arena::CreateMaybeMessage< ::lnrpc::DebugLevelRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DebugLevelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DebugLevelResponse* Arena::CreateMaybeMessage< ::lnrpc::DebugLevelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DebugLevelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PayReqString* Arena::CreateMaybeMessage< ::lnrpc::PayReqString >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PayReqString >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PayReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::PayReq_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PayReq_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PayReq* Arena::CreateMaybeMessage< ::lnrpc::PayReq >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PayReq >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Feature* Arena::CreateMaybeMessage< ::lnrpc::Feature >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FeeReportRequest* Arena::CreateMaybeMessage< ::lnrpc::FeeReportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FeeReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelFeeReport* Arena::CreateMaybeMessage< ::lnrpc::ChannelFeeReport >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelFeeReport >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::FeeReportResponse* Arena::CreateMaybeMessage< ::lnrpc::FeeReportResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::FeeReportResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PolicyUpdateRequest* Arena::CreateMaybeMessage< ::lnrpc::PolicyUpdateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PolicyUpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::PolicyUpdateResponse* Arena::CreateMaybeMessage< ::lnrpc::PolicyUpdateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::PolicyUpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ForwardingHistoryRequest* Arena::CreateMaybeMessage< ::lnrpc::ForwardingHistoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ForwardingHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ForwardingEvent* Arena::CreateMaybeMessage< ::lnrpc::ForwardingEvent >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ForwardingEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ForwardingHistoryResponse* Arena::CreateMaybeMessage< ::lnrpc::ForwardingHistoryResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ForwardingHistoryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ExportChannelBackupRequest* Arena::CreateMaybeMessage< ::lnrpc::ExportChannelBackupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ExportChannelBackupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelBackup* Arena::CreateMaybeMessage< ::lnrpc::ChannelBackup >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelBackup >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::MultiChanBackup* Arena::CreateMaybeMessage< ::lnrpc::MultiChanBackup >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::MultiChanBackup >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChanBackupExportRequest* Arena::CreateMaybeMessage< ::lnrpc::ChanBackupExportRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChanBackupExportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChanBackupSnapshot* Arena::CreateMaybeMessage< ::lnrpc::ChanBackupSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChanBackupSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelBackups* Arena::CreateMaybeMessage< ::lnrpc::ChannelBackups >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelBackups >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::RestoreChanBackupRequest* Arena::CreateMaybeMessage< ::lnrpc::RestoreChanBackupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::RestoreChanBackupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::RestoreBackupResponse* Arena::CreateMaybeMessage< ::lnrpc::RestoreBackupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::RestoreBackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelBackupSubscription* Arena::CreateMaybeMessage< ::lnrpc::ChannelBackupSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelBackupSubscription >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::VerifyChanBackupResponse* Arena::CreateMaybeMessage< ::lnrpc::VerifyChanBackupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::VerifyChanBackupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::MacaroonPermission* Arena::CreateMaybeMessage< ::lnrpc::MacaroonPermission >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::MacaroonPermission >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::BakeMacaroonRequest* Arena::CreateMaybeMessage< ::lnrpc::BakeMacaroonRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::BakeMacaroonRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::BakeMacaroonResponse* Arena::CreateMaybeMessage< ::lnrpc::BakeMacaroonResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::BakeMacaroonResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListMacaroonIDsRequest* Arena::CreateMaybeMessage< ::lnrpc::ListMacaroonIDsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListMacaroonIDsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListMacaroonIDsResponse* Arena::CreateMaybeMessage< ::lnrpc::ListMacaroonIDsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListMacaroonIDsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DeleteMacaroonIDRequest* Arena::CreateMaybeMessage< ::lnrpc::DeleteMacaroonIDRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DeleteMacaroonIDRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::DeleteMacaroonIDResponse* Arena::CreateMaybeMessage< ::lnrpc::DeleteMacaroonIDResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::DeleteMacaroonIDResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::MacaroonPermissionList* Arena::CreateMaybeMessage< ::lnrpc::MacaroonPermissionList >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::MacaroonPermissionList >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPermissionsRequest* Arena::CreateMaybeMessage< ::lnrpc::ListPermissionsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPermissionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse* Arena::CreateMaybeMessage< ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ListPermissionsResponse* Arena::CreateMaybeMessage< ::lnrpc::ListPermissionsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ListPermissionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Failure* Arena::CreateMaybeMessage< ::lnrpc::Failure >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Failure >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::ChannelUpdate* Arena::CreateMaybeMessage< ::lnrpc::ChannelUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::ChannelUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::MacaroonId* Arena::CreateMaybeMessage< ::lnrpc::MacaroonId >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::MacaroonId >(arena);
}
template<> PROTOBUF_NOINLINE ::lnrpc::Op* Arena::CreateMaybeMessage< ::lnrpc::Op >(Arena* arena) {
  return Arena::CreateInternal< ::lnrpc::Op >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
