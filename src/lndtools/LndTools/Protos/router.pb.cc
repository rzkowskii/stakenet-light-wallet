// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#include "router.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Failure_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTLCAttempt_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Route_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rpc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RouteHint_rpc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForwardEvent_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardFailEvent_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HtlcInfo_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinkFailEvent_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PairData_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PairHistory_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_router_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleEvent_router_2eproto;
namespace routerrpc {
class SendPaymentRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPaymentRequest_DestCustomRecordsEntry_DoNotUse> _instance;
} _SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class SendPaymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendPaymentRequest> _instance;
} _SendPaymentRequest_default_instance_;
class TrackPaymentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackPaymentRequest> _instance;
} _TrackPaymentRequest_default_instance_;
class RouteFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteFeeRequest> _instance;
} _RouteFeeRequest_default_instance_;
class RouteFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RouteFeeResponse> _instance;
} _RouteFeeResponse_default_instance_;
class SendToRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToRouteRequest> _instance;
} _SendToRouteRequest_default_instance_;
class SendToRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendToRouteResponse> _instance;
} _SendToRouteResponse_default_instance_;
class ResetMissionControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetMissionControlRequest> _instance;
} _ResetMissionControlRequest_default_instance_;
class ResetMissionControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetMissionControlResponse> _instance;
} _ResetMissionControlResponse_default_instance_;
class QueryMissionControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryMissionControlRequest> _instance;
} _QueryMissionControlRequest_default_instance_;
class QueryMissionControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryMissionControlResponse> _instance;
} _QueryMissionControlResponse_default_instance_;
class PairHistoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PairHistory> _instance;
} _PairHistory_default_instance_;
class PairDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PairData> _instance;
} _PairData_default_instance_;
class QueryProbabilityRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryProbabilityRequest> _instance;
} _QueryProbabilityRequest_default_instance_;
class QueryProbabilityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QueryProbabilityResponse> _instance;
} _QueryProbabilityResponse_default_instance_;
class BuildRouteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildRouteRequest> _instance;
} _BuildRouteRequest_default_instance_;
class BuildRouteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BuildRouteResponse> _instance;
} _BuildRouteResponse_default_instance_;
class SubscribeHtlcEventsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeHtlcEventsRequest> _instance;
} _SubscribeHtlcEventsRequest_default_instance_;
class HtlcEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HtlcEvent> _instance;
  const ::routerrpc::ForwardEvent* forward_event_;
  const ::routerrpc::ForwardFailEvent* forward_fail_event_;
  const ::routerrpc::SettleEvent* settle_event_;
  const ::routerrpc::LinkFailEvent* link_fail_event_;
} _HtlcEvent_default_instance_;
class HtlcInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HtlcInfo> _instance;
} _HtlcInfo_default_instance_;
class ForwardEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardEvent> _instance;
} _ForwardEvent_default_instance_;
class ForwardFailEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ForwardFailEvent> _instance;
} _ForwardFailEvent_default_instance_;
class SettleEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SettleEvent> _instance;
} _SettleEvent_default_instance_;
class LinkFailEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinkFailEvent> _instance;
} _LinkFailEvent_default_instance_;
class PaymentStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentStatus> _instance;
} _PaymentStatus_default_instance_;
}  // namespace routerrpc
static void InitDefaultsscc_info_BuildRouteRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_BuildRouteRequest_default_instance_;
    new (ptr) ::routerrpc::BuildRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::BuildRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BuildRouteRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BuildRouteRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_BuildRouteResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_BuildRouteResponse_default_instance_;
    new (ptr) ::routerrpc::BuildRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::BuildRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BuildRouteResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BuildRouteResponse_router_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,}};

static void InitDefaultsscc_info_ForwardEvent_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_ForwardEvent_default_instance_;
    new (ptr) ::routerrpc::ForwardEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::ForwardEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ForwardEvent_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ForwardEvent_router_2eproto}, {
      &scc_info_HtlcInfo_router_2eproto.base,}};

static void InitDefaultsscc_info_ForwardFailEvent_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_ForwardFailEvent_default_instance_;
    new (ptr) ::routerrpc::ForwardFailEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::ForwardFailEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ForwardFailEvent_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ForwardFailEvent_router_2eproto}, {}};

static void InitDefaultsscc_info_HtlcEvent_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_HtlcEvent_default_instance_;
    new (ptr) ::routerrpc::HtlcEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::HtlcEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_HtlcEvent_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_HtlcEvent_router_2eproto}, {
      &scc_info_ForwardEvent_router_2eproto.base,
      &scc_info_ForwardFailEvent_router_2eproto.base,
      &scc_info_SettleEvent_router_2eproto.base,
      &scc_info_LinkFailEvent_router_2eproto.base,}};

static void InitDefaultsscc_info_HtlcInfo_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_HtlcInfo_default_instance_;
    new (ptr) ::routerrpc::HtlcInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::HtlcInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HtlcInfo_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HtlcInfo_router_2eproto}, {}};

static void InitDefaultsscc_info_LinkFailEvent_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_LinkFailEvent_default_instance_;
    new (ptr) ::routerrpc::LinkFailEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::LinkFailEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LinkFailEvent_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LinkFailEvent_router_2eproto}, {
      &scc_info_HtlcInfo_router_2eproto.base,}};

static void InitDefaultsscc_info_PairData_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_PairData_default_instance_;
    new (ptr) ::routerrpc::PairData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::PairData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PairData_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PairData_router_2eproto}, {}};

static void InitDefaultsscc_info_PairHistory_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_PairHistory_default_instance_;
    new (ptr) ::routerrpc::PairHistory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::PairHistory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PairHistory_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PairHistory_router_2eproto}, {
      &scc_info_PairData_router_2eproto.base,}};

static void InitDefaultsscc_info_PaymentStatus_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_PaymentStatus_default_instance_;
    new (ptr) ::routerrpc::PaymentStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::PaymentStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PaymentStatus_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PaymentStatus_router_2eproto}, {
      &scc_info_HTLCAttempt_rpc_2eproto.base,}};

static void InitDefaultsscc_info_QueryMissionControlRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_QueryMissionControlRequest_default_instance_;
    new (ptr) ::routerrpc::QueryMissionControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::QueryMissionControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryMissionControlRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryMissionControlRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_QueryMissionControlResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_QueryMissionControlResponse_default_instance_;
    new (ptr) ::routerrpc::QueryMissionControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::QueryMissionControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryMissionControlResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryMissionControlResponse_router_2eproto}, {
      &scc_info_PairHistory_router_2eproto.base,}};

static void InitDefaultsscc_info_QueryProbabilityRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_QueryProbabilityRequest_default_instance_;
    new (ptr) ::routerrpc::QueryProbabilityRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::QueryProbabilityRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QueryProbabilityRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QueryProbabilityRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_QueryProbabilityResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_QueryProbabilityResponse_default_instance_;
    new (ptr) ::routerrpc::QueryProbabilityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::QueryProbabilityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_QueryProbabilityResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_QueryProbabilityResponse_router_2eproto}, {
      &scc_info_PairData_router_2eproto.base,}};

static void InitDefaultsscc_info_ResetMissionControlRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_ResetMissionControlRequest_default_instance_;
    new (ptr) ::routerrpc::ResetMissionControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::ResetMissionControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetMissionControlRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetMissionControlRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_ResetMissionControlResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_ResetMissionControlResponse_default_instance_;
    new (ptr) ::routerrpc::ResetMissionControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::ResetMissionControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetMissionControlResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetMissionControlResponse_router_2eproto}, {}};

static void InitDefaultsscc_info_RouteFeeRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_RouteFeeRequest_default_instance_;
    new (ptr) ::routerrpc::RouteFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::RouteFeeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteFeeRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteFeeRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_RouteFeeResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_RouteFeeResponse_default_instance_;
    new (ptr) ::routerrpc::RouteFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::RouteFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RouteFeeResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RouteFeeResponse_router_2eproto}, {}};

static void InitDefaultsscc_info_SendPaymentRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SendPaymentRequest_default_instance_;
    new (ptr) ::routerrpc::SendPaymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::SendPaymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendPaymentRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendPaymentRequest_router_2eproto}, {
      &scc_info_RouteHint_rpc_2eproto.base,
      &scc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto.base,}};

static void InitDefaultsscc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
    new (ptr) ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse();
  }
  ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto}, {}};

static void InitDefaultsscc_info_SendToRouteRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SendToRouteRequest_default_instance_;
    new (ptr) ::routerrpc::SendToRouteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::SendToRouteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendToRouteRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendToRouteRequest_router_2eproto}, {
      &scc_info_Route_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SendToRouteResponse_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SendToRouteResponse_default_instance_;
    new (ptr) ::routerrpc::SendToRouteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::SendToRouteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendToRouteResponse_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendToRouteResponse_router_2eproto}, {
      &scc_info_Failure_rpc_2eproto.base,}};

static void InitDefaultsscc_info_SettleEvent_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SettleEvent_default_instance_;
    new (ptr) ::routerrpc::SettleEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::SettleEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SettleEvent_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SettleEvent_router_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeHtlcEventsRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_SubscribeHtlcEventsRequest_default_instance_;
    new (ptr) ::routerrpc::SubscribeHtlcEventsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::SubscribeHtlcEventsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeHtlcEventsRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeHtlcEventsRequest_router_2eproto}, {}};

static void InitDefaultsscc_info_TrackPaymentRequest_router_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::routerrpc::_TrackPaymentRequest_default_instance_;
    new (ptr) ::routerrpc::TrackPaymentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::routerrpc::TrackPaymentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrackPaymentRequest_router_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrackPaymentRequest_router_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_router_2eproto[25];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_router_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_router_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_router_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, dest_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, amt_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, amt_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, final_cltv_delta_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, payment_request_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, fee_limit_sat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, fee_limit_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, outgoing_chan_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, last_hop_pubkey_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, cltv_limit_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, route_hints_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, dest_custom_records_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, allow_self_payment_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, dest_features_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, max_parts_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendPaymentRequest, no_inflight_updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::TrackPaymentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::TrackPaymentRequest, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::TrackPaymentRequest, no_inflight_updates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeRequest, dest_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeRequest, amt_sat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeResponse, routing_fee_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::RouteFeeResponse, time_lock_delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteRequest, payment_hash_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteRequest, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteResponse, preimage_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::SendToRouteResponse, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::ResetMissionControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::ResetMissionControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryMissionControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryMissionControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryMissionControlResponse, pairs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairHistory, node_from_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairHistory, node_to_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairHistory, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, fail_time_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, fail_amt_sat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, fail_amt_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, success_time_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, success_amt_sat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PairData, success_amt_msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityRequest, from_node_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityRequest, to_node_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityRequest, amt_msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityResponse, probability_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::QueryProbabilityResponse, history_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteRequest, amt_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteRequest, final_cltv_delta_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteRequest, outgoing_chan_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteRequest, hop_pubkeys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::BuildRouteResponse, route_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SubscribeHtlcEventsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, incoming_channel_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, outgoing_channel_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, incoming_htlc_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, outgoing_htlc_id_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, event_type_),
  offsetof(::routerrpc::HtlcEventDefaultTypeInternal, forward_event_),
  offsetof(::routerrpc::HtlcEventDefaultTypeInternal, forward_fail_event_),
  offsetof(::routerrpc::HtlcEventDefaultTypeInternal, settle_event_),
  offsetof(::routerrpc::HtlcEventDefaultTypeInternal, link_fail_event_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcEvent, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcInfo, incoming_timelock_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcInfo, outgoing_timelock_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcInfo, incoming_amt_msat_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::HtlcInfo, outgoing_amt_msat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::ForwardEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::ForwardEvent, info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::ForwardFailEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::SettleEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::LinkFailEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::LinkFailEvent, info_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::LinkFailEvent, wire_failure_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::LinkFailEvent, failure_detail_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::LinkFailEvent, failure_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PaymentStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::routerrpc::PaymentStatus, state_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PaymentStatus, preimage_),
  PROTOBUF_FIELD_OFFSET(::routerrpc::PaymentStatus, htlcs_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse)},
  { 9, -1, sizeof(::routerrpc::SendPaymentRequest)},
  { 32, -1, sizeof(::routerrpc::TrackPaymentRequest)},
  { 39, -1, sizeof(::routerrpc::RouteFeeRequest)},
  { 46, -1, sizeof(::routerrpc::RouteFeeResponse)},
  { 53, -1, sizeof(::routerrpc::SendToRouteRequest)},
  { 60, -1, sizeof(::routerrpc::SendToRouteResponse)},
  { 67, -1, sizeof(::routerrpc::ResetMissionControlRequest)},
  { 72, -1, sizeof(::routerrpc::ResetMissionControlResponse)},
  { 77, -1, sizeof(::routerrpc::QueryMissionControlRequest)},
  { 82, -1, sizeof(::routerrpc::QueryMissionControlResponse)},
  { 88, -1, sizeof(::routerrpc::PairHistory)},
  { 96, -1, sizeof(::routerrpc::PairData)},
  { 107, -1, sizeof(::routerrpc::QueryProbabilityRequest)},
  { 115, -1, sizeof(::routerrpc::QueryProbabilityResponse)},
  { 122, -1, sizeof(::routerrpc::BuildRouteRequest)},
  { 131, -1, sizeof(::routerrpc::BuildRouteResponse)},
  { 137, -1, sizeof(::routerrpc::SubscribeHtlcEventsRequest)},
  { 142, -1, sizeof(::routerrpc::HtlcEvent)},
  { 158, -1, sizeof(::routerrpc::HtlcInfo)},
  { 167, -1, sizeof(::routerrpc::ForwardEvent)},
  { 173, -1, sizeof(::routerrpc::ForwardFailEvent)},
  { 178, -1, sizeof(::routerrpc::SettleEvent)},
  { 183, -1, sizeof(::routerrpc::LinkFailEvent)},
  { 192, -1, sizeof(::routerrpc::PaymentStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SendPaymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_TrackPaymentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_RouteFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_RouteFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SendToRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SendToRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_ResetMissionControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_ResetMissionControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_QueryMissionControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_QueryMissionControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_PairHistory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_PairData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_QueryProbabilityRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_QueryProbabilityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_BuildRouteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_BuildRouteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SubscribeHtlcEventsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_HtlcEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_HtlcInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_ForwardEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_ForwardFailEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_SettleEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_LinkFailEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::routerrpc::_PaymentStatus_default_instance_),
};

const char descriptor_table_protodef_router_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014router.proto\022\trouterrpc\032\trpc.proto\"\307\004\n"
  "\022SendPaymentRequest\022\014\n\004dest\030\001 \001(\014\022\013\n\003amt"
  "\030\002 \001(\003\022\020\n\010amt_msat\030\014 \001(\003\022\024\n\014payment_hash"
  "\030\003 \001(\014\022\030\n\020final_cltv_delta\030\004 \001(\005\022\027\n\017paym"
  "ent_request\030\005 \001(\t\022\027\n\017timeout_seconds\030\006 \001"
  "(\005\022\025\n\rfee_limit_sat\030\007 \001(\003\022\026\n\016fee_limit_m"
  "sat\030\r \001(\003\022\034\n\020outgoing_chan_id\030\010 \001(\004B\0020\001\022"
  "\027\n\017last_hop_pubkey\030\016 \001(\014\022\022\n\ncltv_limit\030\t"
  " \001(\005\022%\n\013route_hints\030\n \003(\0132\020.lnrpc.RouteH"
  "int\022Q\n\023dest_custom_records\030\013 \003(\01324.route"
  "rrpc.SendPaymentRequest.DestCustomRecord"
  "sEntry\022\032\n\022allow_self_payment\030\017 \001(\010\022(\n\rde"
  "st_features\030\020 \003(\0162\021.lnrpc.FeatureBit\022\021\n\t"
  "max_parts\030\021 \001(\r\022\033\n\023no_inflight_updates\030\022"
  " \001(\010\0328\n\026DestCustomRecordsEntry\022\013\n\003key\030\001 "
  "\001(\004\022\r\n\005value\030\002 \001(\014:\0028\001\"H\n\023TrackPaymentRe"
  "quest\022\024\n\014payment_hash\030\001 \001(\014\022\033\n\023no_inflig"
  "ht_updates\030\002 \001(\010\"0\n\017RouteFeeRequest\022\014\n\004d"
  "est\030\001 \001(\014\022\017\n\007amt_sat\030\002 \001(\003\"E\n\020RouteFeeRe"
  "sponse\022\030\n\020routing_fee_msat\030\001 \001(\003\022\027\n\017time"
  "_lock_delay\030\002 \001(\003\"G\n\022SendToRouteRequest\022"
  "\024\n\014payment_hash\030\001 \001(\014\022\033\n\005route\030\002 \001(\0132\014.l"
  "nrpc.Route\"H\n\023SendToRouteResponse\022\020\n\010pre"
  "image\030\001 \001(\014\022\037\n\007failure\030\002 \001(\0132\016.lnrpc.Fai"
  "lure\"\034\n\032ResetMissionControlRequest\"\035\n\033Re"
  "setMissionControlResponse\"\034\n\032QueryMissio"
  "nControlRequest\"J\n\033QueryMissionControlRe"
  "sponse\022%\n\005pairs\030\002 \003(\0132\026.routerrpc.PairHi"
  "storyJ\004\010\001\020\002\"o\n\013PairHistory\022\021\n\tnode_from\030"
  "\001 \001(\014\022\017\n\007node_to\030\002 \001(\014\022$\n\007history\030\007 \001(\0132"
  "\023.routerrpc.PairDataJ\004\010\003\020\004J\004\010\004\020\005J\004\010\005\020\006J\004"
  "\010\006\020\007\"\231\001\n\010PairData\022\021\n\tfail_time\030\001 \001(\003\022\024\n\014"
  "fail_amt_sat\030\002 \001(\003\022\025\n\rfail_amt_msat\030\004 \001("
  "\003\022\024\n\014success_time\030\005 \001(\003\022\027\n\017success_amt_s"
  "at\030\006 \001(\003\022\030\n\020success_amt_msat\030\007 \001(\003J\004\010\003\020\004"
  "\"O\n\027QueryProbabilityRequest\022\021\n\tfrom_node"
  "\030\001 \001(\014\022\017\n\007to_node\030\002 \001(\014\022\020\n\010amt_msat\030\003 \001("
  "\003\"U\n\030QueryProbabilityResponse\022\023\n\013probabi"
  "lity\030\001 \001(\001\022$\n\007history\030\002 \001(\0132\023.routerrpc."
  "PairData\"r\n\021BuildRouteRequest\022\020\n\010amt_msa"
  "t\030\001 \001(\003\022\030\n\020final_cltv_delta\030\002 \001(\005\022\034\n\020out"
  "going_chan_id\030\003 \001(\004B\0020\001\022\023\n\013hop_pubkeys\030\004"
  " \003(\014\"1\n\022BuildRouteResponse\022\033\n\005route\030\001 \001("
  "\0132\014.lnrpc.Route\"\034\n\032SubscribeHtlcEventsRe"
  "quest\"\334\003\n\tHtlcEvent\022\033\n\023incoming_channel_"
  "id\030\001 \001(\004\022\033\n\023outgoing_channel_id\030\002 \001(\004\022\030\n"
  "\020incoming_htlc_id\030\003 \001(\004\022\030\n\020outgoing_htlc"
  "_id\030\004 \001(\004\022\024\n\014timestamp_ns\030\005 \001(\004\0222\n\nevent"
  "_type\030\006 \001(\0162\036.routerrpc.HtlcEvent.EventT"
  "ype\0220\n\rforward_event\030\007 \001(\0132\027.routerrpc.F"
  "orwardEventH\000\0229\n\022forward_fail_event\030\010 \001("
  "\0132\033.routerrpc.ForwardFailEventH\000\022.\n\014sett"
  "le_event\030\t \001(\0132\026.routerrpc.SettleEventH\000"
  "\0223\n\017link_fail_event\030\n \001(\0132\030.routerrpc.Li"
  "nkFailEventH\000\"<\n\tEventType\022\013\n\007UNKNOWN\020\000\022"
  "\010\n\004SEND\020\001\022\013\n\007RECEIVE\020\002\022\013\n\007FORWARD\020\003B\007\n\005e"
  "vent\"v\n\010HtlcInfo\022\031\n\021incoming_timelock\030\001 "
  "\001(\r\022\031\n\021outgoing_timelock\030\002 \001(\r\022\031\n\021incomi"
  "ng_amt_msat\030\003 \001(\004\022\031\n\021outgoing_amt_msat\030\004"
  " \001(\004\"1\n\014ForwardEvent\022!\n\004info\030\001 \001(\0132\023.rou"
  "terrpc.HtlcInfo\"\022\n\020ForwardFailEvent\"\r\n\013S"
  "ettleEvent\"\256\001\n\rLinkFailEvent\022!\n\004info\030\001 \001"
  "(\0132\023.routerrpc.HtlcInfo\0220\n\014wire_failure\030"
  "\002 \001(\0162\032.lnrpc.Failure.FailureCode\0220\n\016fai"
  "lure_detail\030\003 \001(\0162\030.routerrpc.FailureDet"
  "ail\022\026\n\016failure_string\030\004 \001(\t\"r\n\rPaymentSt"
  "atus\022&\n\005state\030\001 \001(\0162\027.routerrpc.PaymentS"
  "tate\022\020\n\010preimage\030\002 \001(\014\022!\n\005htlcs\030\004 \003(\0132\022."
  "lnrpc.HTLCAttemptJ\004\010\003\020\004*\201\004\n\rFailureDetai"
  "l\022\013\n\007UNKNOWN\020\000\022\r\n\tNO_DETAIL\020\001\022\020\n\014ONION_D"
  "ECODE\020\002\022\025\n\021LINK_NOT_ELIGIBLE\020\003\022\024\n\020ON_CHA"
  "IN_TIMEOUT\020\004\022\024\n\020HTLC_EXCEEDS_MAX\020\005\022\030\n\024IN"
  "SUFFICIENT_BALANCE\020\006\022\026\n\022INCOMPLETE_FORWA"
  "RD\020\007\022\023\n\017HTLC_ADD_FAILED\020\010\022\025\n\021FORWARDS_DI"
  "SABLED\020\t\022\024\n\020INVOICE_CANCELED\020\n\022\025\n\021INVOIC"
  "E_UNDERPAID\020\013\022\033\n\027INVOICE_EXPIRY_TOO_SOON"
  "\020\014\022\024\n\020INVOICE_NOT_OPEN\020\r\022\027\n\023MPP_INVOICE_"
  "TIMEOUT\020\016\022\024\n\020ADDRESS_MISMATCH\020\017\022\026\n\022SET_T"
  "OTAL_MISMATCH\020\020\022\025\n\021SET_TOTAL_TOO_LOW\020\021\022\020"
  "\n\014SET_OVERPAID\020\022\022\023\n\017UNKNOWN_INVOICE\020\023\022\023\n"
  "\017INVALID_KEYSEND\020\024\022\023\n\017MPP_IN_PROGRESS\020\025\022"
  "\022\n\016CIRCULAR_ROUTE\020\026*\256\001\n\014PaymentState\022\r\n\t"
  "IN_FLIGHT\020\000\022\r\n\tSUCCEEDED\020\001\022\022\n\016FAILED_TIM"
  "EOUT\020\002\022\023\n\017FAILED_NO_ROUTE\020\003\022\020\n\014FAILED_ER"
  "ROR\020\004\022$\n FAILED_INCORRECT_PAYMENT_DETAIL"
  "S\020\005\022\037\n\033FAILED_INSUFFICIENT_BALANCE\020\0062\223\007\n"
  "\006Router\022@\n\rSendPaymentV2\022\035.routerrpc.Sen"
  "dPaymentRequest\032\016.lnrpc.Payment0\001\022B\n\016Tra"
  "ckPaymentV2\022\036.routerrpc.TrackPaymentRequ"
  "est\032\016.lnrpc.Payment0\001\022K\n\020EstimateRouteFe"
  "e\022\032.routerrpc.RouteFeeRequest\032\033.routerrp"
  "c.RouteFeeResponse\022L\n\013SendToRoute\022\035.rout"
  "errpc.SendToRouteRequest\032\036.routerrpc.Sen"
  "dToRouteResponse\022d\n\023ResetMissionControl\022"
  "%.routerrpc.ResetMissionControlRequest\032&"
  ".routerrpc.ResetMissionControlResponse\022d"
  "\n\023QueryMissionControl\022%.routerrpc.QueryM"
  "issionControlRequest\032&.routerrpc.QueryMi"
  "ssionControlResponse\022[\n\020QueryProbability"
  "\022\".routerrpc.QueryProbabilityRequest\032#.r"
  "outerrpc.QueryProbabilityResponse\022I\n\nBui"
  "ldRoute\022\034.routerrpc.BuildRouteRequest\032\035."
  "routerrpc.BuildRouteResponse\022T\n\023Subscrib"
  "eHtlcEvents\022%.routerrpc.SubscribeHtlcEve"
  "ntsRequest\032\024.routerrpc.HtlcEvent0\001\022M\n\013Se"
  "ndPayment\022\035.routerrpc.SendPaymentRequest"
  "\032\030.routerrpc.PaymentStatus\"\003\210\002\0010\001\022O\n\014Tra"
  "ckPayment\022\036.routerrpc.TrackPaymentReques"
  "t\032\030.routerrpc.PaymentStatus\"\003\210\002\0010\001B1Z/gi"
  "thub.com/lightningnetwork/lnd/lnrpc/rout"
  "errpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_router_2eproto_deps[1] = {
  &::descriptor_table_rpc_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_router_2eproto_sccs[25] = {
  &scc_info_BuildRouteRequest_router_2eproto.base,
  &scc_info_BuildRouteResponse_router_2eproto.base,
  &scc_info_ForwardEvent_router_2eproto.base,
  &scc_info_ForwardFailEvent_router_2eproto.base,
  &scc_info_HtlcEvent_router_2eproto.base,
  &scc_info_HtlcInfo_router_2eproto.base,
  &scc_info_LinkFailEvent_router_2eproto.base,
  &scc_info_PairData_router_2eproto.base,
  &scc_info_PairHistory_router_2eproto.base,
  &scc_info_PaymentStatus_router_2eproto.base,
  &scc_info_QueryMissionControlRequest_router_2eproto.base,
  &scc_info_QueryMissionControlResponse_router_2eproto.base,
  &scc_info_QueryProbabilityRequest_router_2eproto.base,
  &scc_info_QueryProbabilityResponse_router_2eproto.base,
  &scc_info_ResetMissionControlRequest_router_2eproto.base,
  &scc_info_ResetMissionControlResponse_router_2eproto.base,
  &scc_info_RouteFeeRequest_router_2eproto.base,
  &scc_info_RouteFeeResponse_router_2eproto.base,
  &scc_info_SendPaymentRequest_router_2eproto.base,
  &scc_info_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_router_2eproto.base,
  &scc_info_SendToRouteRequest_router_2eproto.base,
  &scc_info_SendToRouteResponse_router_2eproto.base,
  &scc_info_SettleEvent_router_2eproto.base,
  &scc_info_SubscribeHtlcEventsRequest_router_2eproto.base,
  &scc_info_TrackPaymentRequest_router_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_router_2eproto_once;
static bool descriptor_table_router_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto = {
  &descriptor_table_router_2eproto_initialized, descriptor_table_protodef_router_2eproto, "router.proto", 4413,
  &descriptor_table_router_2eproto_once, descriptor_table_router_2eproto_sccs, descriptor_table_router_2eproto_deps, 25, 1,
  schemas, file_default_instances, TableStruct_router_2eproto::offsets,
  file_level_metadata_router_2eproto, 25, file_level_enum_descriptors_router_2eproto, file_level_service_descriptors_router_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_router_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_router_2eproto), true);
namespace routerrpc {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HtlcEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[0];
}
bool HtlcEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr HtlcEvent_EventType HtlcEvent::UNKNOWN;
constexpr HtlcEvent_EventType HtlcEvent::SEND;
constexpr HtlcEvent_EventType HtlcEvent::RECEIVE;
constexpr HtlcEvent_EventType HtlcEvent::FORWARD;
constexpr HtlcEvent_EventType HtlcEvent::EventType_MIN;
constexpr HtlcEvent_EventType HtlcEvent::EventType_MAX;
constexpr int HtlcEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailureDetail_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[1];
}
bool FailureDetail_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_router_2eproto);
  return file_level_enum_descriptors_router_2eproto[2];
}
bool PaymentState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse() {}
SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(const SendPaymentRequest_DestCustomRecordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void SendPaymentRequest::InitAsDefaultInstance() {
}
class SendPaymentRequest::_Internal {
 public:
};

void SendPaymentRequest::clear_route_hints() {
  route_hints_.Clear();
}
SendPaymentRequest::SendPaymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.SendPaymentRequest)
}
SendPaymentRequest::SendPaymentRequest(const SendPaymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      route_hints_(from.route_hints_),
      dest_features_(from.dest_features_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest().empty()) {
    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_request().empty()) {
    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_hop_pubkey().empty()) {
    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  ::memcpy(&amt_, &from.amt_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_parts_) -
    reinterpret_cast<char*>(&amt_)) + sizeof(max_parts_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.SendPaymentRequest)
}

void SendPaymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendPaymentRequest_router_2eproto.base);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_parts_) -
      reinterpret_cast<char*>(&amt_)) + sizeof(max_parts_));
}

SendPaymentRequest::~SendPaymentRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.SendPaymentRequest)
  SharedDtor();
}

void SendPaymentRequest::SharedDtor() {
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendPaymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendPaymentRequest& SendPaymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendPaymentRequest_router_2eproto.base);
  return *internal_default_instance();
}


void SendPaymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.SendPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_hints_.Clear();
  dest_custom_records_.Clear();
  dest_features_.Clear();
  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amt_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_parts_) -
      reinterpret_cast<char*>(&amt_)) + sizeof(max_parts_));
  _internal_metadata_.Clear();
}

const char* SendPaymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes payment_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 final_cltv_delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          final_cltv_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payment_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_payment_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routerrpc.SendPaymentRequest.payment_request"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 timeout_seconds = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit_sat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          fee_limit_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_chan_id = 8 [jstype = JS_STRING];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          outgoing_chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cltv_limit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cltv_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.RouteHint route_hints = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // map<uint64, bytes> dest_custom_records = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&dest_custom_records_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // int64 amt_msat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fee_limit_msat = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          fee_limit_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes last_hop_pubkey = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_last_hop_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allow_self_payment = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          allow_self_payment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.FeatureBit dest_features = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dest_features(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_dest_features(static_cast<::lnrpc::FeatureBit>(val));
        } else goto handle_unusual;
        continue;
      // uint32 max_parts = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          max_parts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_inflight_updates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          no_inflight_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendPaymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.SendPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dest(), target);
  }

  // int64 amt = 2;
  if (this->amt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amt(), target);
  }

  // bytes payment_hash = 3;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payment_hash(), target);
  }

  // int32 final_cltv_delta = 4;
  if (this->final_cltv_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_final_cltv_delta(), target);
  }

  // string payment_request = 5;
  if (this->payment_request().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payment_request().data(), static_cast<int>(this->_internal_payment_request().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routerrpc.SendPaymentRequest.payment_request");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_payment_request(), target);
  }

  // int32 timeout_seconds = 6;
  if (this->timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_timeout_seconds(), target);
  }

  // int64 fee_limit_sat = 7;
  if (this->fee_limit_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_fee_limit_sat(), target);
  }

  // uint64 outgoing_chan_id = 8 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_outgoing_chan_id(), target);
  }

  // int32 cltv_limit = 9;
  if (this->cltv_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_cltv_limit(), target);
  }

  // repeated .lnrpc.RouteHint route_hints = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_hints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_route_hints(i), target, stream);
  }

  // map<uint64, bytes> dest_custom_records = 11;
  if (!this->_internal_dest_custom_records().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_dest_custom_records().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_dest_custom_records().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
          it = this->_internal_dest_custom_records().begin();
          it != this->_internal_dest_custom_records().end(); ++it) {
        target = SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
      }
    }
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_amt_msat(), target);
  }

  // int64 fee_limit_msat = 13;
  if (this->fee_limit_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_fee_limit_msat(), target);
  }

  // bytes last_hop_pubkey = 14;
  if (this->last_hop_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        14, this->_internal_last_hop_pubkey(), target);
  }

  // bool allow_self_payment = 15;
  if (this->allow_self_payment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_allow_self_payment(), target);
  }

  // repeated .lnrpc.FeatureBit dest_features = 16;
  {
    int byte_size = _dest_features_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          16, dest_features_, byte_size, target);
    }
  }

  // uint32 max_parts = 17;
  if (this->max_parts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_max_parts(), target);
  }

  // bool no_inflight_updates = 18;
  if (this->no_inflight_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_no_inflight_updates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.SendPaymentRequest)
  return target;
}

size_t SendPaymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.SendPaymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.RouteHint route_hints = 10;
  total_size += 1UL * this->_internal_route_hints_size();
  for (const auto& msg : this->route_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint64, bytes> dest_custom_records = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dest_custom_records_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >::const_iterator
      it = this->_internal_dest_custom_records().begin();
      it != this->_internal_dest_custom_records().end(); ++it) {
    total_size += SendPaymentRequest_DestCustomRecordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .lnrpc.FeatureBit dest_features = 16;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dest_features_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_dest_features(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dest_features_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest());
  }

  // bytes payment_hash = 3;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // string payment_request = 5;
  if (this->payment_request().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payment_request());
  }

  // bytes last_hop_pubkey = 14;
  if (this->last_hop_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_hop_pubkey());
  }

  // int64 amt = 2;
  if (this->amt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt());
  }

  // int32 final_cltv_delta = 4;
  if (this->final_cltv_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_cltv_delta());
  }

  // int32 timeout_seconds = 6;
  if (this->timeout_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeout_seconds());
  }

  // int64 fee_limit_sat = 7;
  if (this->fee_limit_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_limit_sat());
  }

  // uint64 outgoing_chan_id = 8 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_chan_id());
  }

  // int64 amt_msat = 12;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_msat());
  }

  // int64 fee_limit_msat = 13;
  if (this->fee_limit_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee_limit_msat());
  }

  // int32 cltv_limit = 9;
  if (this->cltv_limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cltv_limit());
  }

  // bool allow_self_payment = 15;
  if (this->allow_self_payment() != 0) {
    total_size += 1 + 1;
  }

  // bool no_inflight_updates = 18;
  if (this->no_inflight_updates() != 0) {
    total_size += 2 + 1;
  }

  // uint32 max_parts = 17;
  if (this->max_parts() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_parts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendPaymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.SendPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendPaymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendPaymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.SendPaymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.SendPaymentRequest)
    MergeFrom(*source);
  }
}

void SendPaymentRequest::MergeFrom(const SendPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.SendPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_hints_.MergeFrom(from.route_hints_);
  dest_custom_records_.MergeFrom(from.dest_custom_records_);
  dest_features_.MergeFrom(from.dest_features_);
  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.payment_request().size() > 0) {

    payment_request_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_request_);
  }
  if (from.last_hop_pubkey().size() > 0) {

    last_hop_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.last_hop_pubkey_);
  }
  if (from.amt() != 0) {
    _internal_set_amt(from._internal_amt());
  }
  if (from.final_cltv_delta() != 0) {
    _internal_set_final_cltv_delta(from._internal_final_cltv_delta());
  }
  if (from.timeout_seconds() != 0) {
    _internal_set_timeout_seconds(from._internal_timeout_seconds());
  }
  if (from.fee_limit_sat() != 0) {
    _internal_set_fee_limit_sat(from._internal_fee_limit_sat());
  }
  if (from.outgoing_chan_id() != 0) {
    _internal_set_outgoing_chan_id(from._internal_outgoing_chan_id());
  }
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
  if (from.fee_limit_msat() != 0) {
    _internal_set_fee_limit_msat(from._internal_fee_limit_msat());
  }
  if (from.cltv_limit() != 0) {
    _internal_set_cltv_limit(from._internal_cltv_limit());
  }
  if (from.allow_self_payment() != 0) {
    _internal_set_allow_self_payment(from._internal_allow_self_payment());
  }
  if (from.no_inflight_updates() != 0) {
    _internal_set_no_inflight_updates(from._internal_no_inflight_updates());
  }
  if (from.max_parts() != 0) {
    _internal_set_max_parts(from._internal_max_parts());
  }
}

void SendPaymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.SendPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendPaymentRequest::CopyFrom(const SendPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.SendPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPaymentRequest::IsInitialized() const {
  return true;
}

void SendPaymentRequest::InternalSwap(SendPaymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  route_hints_.InternalSwap(&other->route_hints_);
  dest_custom_records_.Swap(&other->dest_custom_records_);
  dest_features_.InternalSwap(&other->dest_features_);
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payment_request_.Swap(&other->payment_request_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  last_hop_pubkey_.Swap(&other->last_hop_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amt_, other->amt_);
  swap(final_cltv_delta_, other->final_cltv_delta_);
  swap(timeout_seconds_, other->timeout_seconds_);
  swap(fee_limit_sat_, other->fee_limit_sat_);
  swap(outgoing_chan_id_, other->outgoing_chan_id_);
  swap(amt_msat_, other->amt_msat_);
  swap(fee_limit_msat_, other->fee_limit_msat_);
  swap(cltv_limit_, other->cltv_limit_);
  swap(allow_self_payment_, other->allow_self_payment_);
  swap(no_inflight_updates_, other->no_inflight_updates_);
  swap(max_parts_, other->max_parts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPaymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackPaymentRequest::InitAsDefaultInstance() {
}
class TrackPaymentRequest::_Internal {
 public:
};

TrackPaymentRequest::TrackPaymentRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.TrackPaymentRequest)
}
TrackPaymentRequest::TrackPaymentRequest(const TrackPaymentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  no_inflight_updates_ = from.no_inflight_updates_;
  // @@protoc_insertion_point(copy_constructor:routerrpc.TrackPaymentRequest)
}

void TrackPaymentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackPaymentRequest_router_2eproto.base);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  no_inflight_updates_ = false;
}

TrackPaymentRequest::~TrackPaymentRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.TrackPaymentRequest)
  SharedDtor();
}

void TrackPaymentRequest::SharedDtor() {
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrackPaymentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackPaymentRequest& TrackPaymentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackPaymentRequest_router_2eproto.base);
  return *internal_default_instance();
}


void TrackPaymentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.TrackPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  no_inflight_updates_ = false;
  _internal_metadata_.Clear();
}

const char* TrackPaymentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes payment_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool no_inflight_updates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          no_inflight_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackPaymentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.TrackPaymentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payment_hash(), target);
  }

  // bool no_inflight_updates = 2;
  if (this->no_inflight_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_no_inflight_updates(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.TrackPaymentRequest)
  return target;
}

size_t TrackPaymentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.TrackPaymentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // bool no_inflight_updates = 2;
  if (this->no_inflight_updates() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackPaymentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.TrackPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackPaymentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackPaymentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.TrackPaymentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.TrackPaymentRequest)
    MergeFrom(*source);
  }
}

void TrackPaymentRequest::MergeFrom(const TrackPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.TrackPaymentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.no_inflight_updates() != 0) {
    _internal_set_no_inflight_updates(from._internal_no_inflight_updates());
  }
}

void TrackPaymentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.TrackPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPaymentRequest::CopyFrom(const TrackPaymentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.TrackPaymentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPaymentRequest::IsInitialized() const {
  return true;
}

void TrackPaymentRequest::InternalSwap(TrackPaymentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(no_inflight_updates_, other->no_inflight_updates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPaymentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteFeeRequest::InitAsDefaultInstance() {
}
class RouteFeeRequest::_Internal {
 public:
};

RouteFeeRequest::RouteFeeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.RouteFeeRequest)
}
RouteFeeRequest::RouteFeeRequest(const RouteFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dest().empty()) {
    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  amt_sat_ = from.amt_sat_;
  // @@protoc_insertion_point(copy_constructor:routerrpc.RouteFeeRequest)
}

void RouteFeeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RouteFeeRequest_router_2eproto.base);
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amt_sat_ = PROTOBUF_LONGLONG(0);
}

RouteFeeRequest::~RouteFeeRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.RouteFeeRequest)
  SharedDtor();
}

void RouteFeeRequest::SharedDtor() {
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RouteFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteFeeRequest& RouteFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteFeeRequest_router_2eproto.base);
  return *internal_default_instance();
}


void RouteFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.RouteFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amt_sat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RouteFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_sat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          amt_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteFeeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.RouteFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_dest(), target);
  }

  // int64 amt_sat = 2;
  if (this->amt_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_amt_sat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.RouteFeeRequest)
  return target;
}

size_t RouteFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.RouteFeeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes dest = 1;
  if (this->dest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dest());
  }

  // int64 amt_sat = 2;
  if (this->amt_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_sat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.RouteFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.RouteFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.RouteFeeRequest)
    MergeFrom(*source);
  }
}

void RouteFeeRequest::MergeFrom(const RouteFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.RouteFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dest().size() > 0) {

    dest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  if (from.amt_sat() != 0) {
    _internal_set_amt_sat(from._internal_amt_sat());
  }
}

void RouteFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.RouteFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteFeeRequest::CopyFrom(const RouteFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.RouteFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteFeeRequest::IsInitialized() const {
  return true;
}

void RouteFeeRequest::InternalSwap(RouteFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amt_sat_, other->amt_sat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RouteFeeResponse::InitAsDefaultInstance() {
}
class RouteFeeResponse::_Internal {
 public:
};

RouteFeeResponse::RouteFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.RouteFeeResponse)
}
RouteFeeResponse::RouteFeeResponse(const RouteFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&routing_fee_msat_, &from.routing_fee_msat_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_lock_delay_) -
    reinterpret_cast<char*>(&routing_fee_msat_)) + sizeof(time_lock_delay_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.RouteFeeResponse)
}

void RouteFeeResponse::SharedCtor() {
  ::memset(&routing_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_lock_delay_) -
      reinterpret_cast<char*>(&routing_fee_msat_)) + sizeof(time_lock_delay_));
}

RouteFeeResponse::~RouteFeeResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.RouteFeeResponse)
  SharedDtor();
}

void RouteFeeResponse::SharedDtor() {
}

void RouteFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteFeeResponse& RouteFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RouteFeeResponse_router_2eproto.base);
  return *internal_default_instance();
}


void RouteFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.RouteFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&routing_fee_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_lock_delay_) -
      reinterpret_cast<char*>(&routing_fee_msat_)) + sizeof(time_lock_delay_));
  _internal_metadata_.Clear();
}

const char* RouteFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 routing_fee_msat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          routing_fee_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 time_lock_delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_lock_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RouteFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.RouteFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 routing_fee_msat = 1;
  if (this->routing_fee_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_routing_fee_msat(), target);
  }

  // int64 time_lock_delay = 2;
  if (this->time_lock_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time_lock_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.RouteFeeResponse)
  return target;
}

size_t RouteFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.RouteFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 routing_fee_msat = 1;
  if (this->routing_fee_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_routing_fee_msat());
  }

  // int64 time_lock_delay = 2;
  if (this->time_lock_delay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time_lock_delay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.RouteFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RouteFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RouteFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.RouteFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.RouteFeeResponse)
    MergeFrom(*source);
  }
}

void RouteFeeResponse::MergeFrom(const RouteFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.RouteFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.routing_fee_msat() != 0) {
    _internal_set_routing_fee_msat(from._internal_routing_fee_msat());
  }
  if (from.time_lock_delay() != 0) {
    _internal_set_time_lock_delay(from._internal_time_lock_delay());
  }
}

void RouteFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.RouteFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteFeeResponse::CopyFrom(const RouteFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.RouteFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteFeeResponse::IsInitialized() const {
  return true;
}

void RouteFeeResponse::InternalSwap(RouteFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(routing_fee_msat_, other->routing_fee_msat_);
  swap(time_lock_delay_, other->time_lock_delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RouteFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToRouteRequest::InitAsDefaultInstance() {
  ::routerrpc::_SendToRouteRequest_default_instance_._instance.get_mutable()->route_ = const_cast< ::lnrpc::Route*>(
      ::lnrpc::Route::internal_default_instance());
}
class SendToRouteRequest::_Internal {
 public:
  static const ::lnrpc::Route& route(const SendToRouteRequest* msg);
};

const ::lnrpc::Route&
SendToRouteRequest::_Internal::route(const SendToRouteRequest* msg) {
  return *msg->route_;
}
void SendToRouteRequest::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
SendToRouteRequest::SendToRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.SendToRouteRequest)
}
SendToRouteRequest::SendToRouteRequest(const SendToRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payment_hash().empty()) {
    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from._internal_has_route()) {
    route_ = new ::lnrpc::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.SendToRouteRequest)
}

void SendToRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendToRouteRequest_router_2eproto.base);
  payment_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_ = nullptr;
}

SendToRouteRequest::~SendToRouteRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.SendToRouteRequest)
  SharedDtor();
}

void SendToRouteRequest::SharedDtor() {
  payment_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete route_;
}

void SendToRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToRouteRequest& SendToRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToRouteRequest_router_2eproto.base);
  return *internal_default_instance();
}


void SendToRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.SendToRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SendToRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes payment_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_payment_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Route route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.SendToRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payment_hash(), target);
  }

  // .lnrpc.Route route = 2;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::route(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.SendToRouteRequest)
  return target;
}

size_t SendToRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.SendToRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payment_hash = 1;
  if (this->payment_hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payment_hash());
  }

  // .lnrpc.Route route = 2;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.SendToRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.SendToRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.SendToRouteRequest)
    MergeFrom(*source);
  }
}

void SendToRouteRequest::MergeFrom(const SendToRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.SendToRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payment_hash().size() > 0) {

    payment_hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payment_hash_);
  }
  if (from.has_route()) {
    _internal_mutable_route()->::lnrpc::Route::MergeFrom(from._internal_route());
  }
}

void SendToRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.SendToRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToRouteRequest::CopyFrom(const SendToRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.SendToRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToRouteRequest::IsInitialized() const {
  return true;
}

void SendToRouteRequest::InternalSwap(SendToRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  payment_hash_.Swap(&other->payment_hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendToRouteResponse::InitAsDefaultInstance() {
  ::routerrpc::_SendToRouteResponse_default_instance_._instance.get_mutable()->failure_ = const_cast< ::lnrpc::Failure*>(
      ::lnrpc::Failure::internal_default_instance());
}
class SendToRouteResponse::_Internal {
 public:
  static const ::lnrpc::Failure& failure(const SendToRouteResponse* msg);
};

const ::lnrpc::Failure&
SendToRouteResponse::_Internal::failure(const SendToRouteResponse* msg) {
  return *msg->failure_;
}
void SendToRouteResponse::clear_failure() {
  if (GetArenaNoVirtual() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
SendToRouteResponse::SendToRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.SendToRouteResponse)
}
SendToRouteResponse::SendToRouteResponse(const SendToRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preimage().empty()) {
    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from._internal_has_failure()) {
    failure_ = new ::lnrpc::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.SendToRouteResponse)
}

void SendToRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendToRouteResponse_router_2eproto.base);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failure_ = nullptr;
}

SendToRouteResponse::~SendToRouteResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.SendToRouteResponse)
  SharedDtor();
}

void SendToRouteResponse::SharedDtor() {
  preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete failure_;
}

void SendToRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendToRouteResponse& SendToRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendToRouteResponse_router_2eproto.base);
  return *internal_default_instance();
}


void SendToRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.SendToRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SendToRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes preimage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Failure failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendToRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.SendToRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes preimage = 1;
  if (this->preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_preimage(), target);
  }

  // .lnrpc.Failure failure = 2;
  if (this->has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.SendToRouteResponse)
  return target;
}

size_t SendToRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.SendToRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes preimage = 1;
  if (this->preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimage());
  }

  // .lnrpc.Failure failure = 2;
  if (this->has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendToRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.SendToRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendToRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendToRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.SendToRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.SendToRouteResponse)
    MergeFrom(*source);
  }
}

void SendToRouteResponse::MergeFrom(const SendToRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.SendToRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preimage().size() > 0) {

    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from.has_failure()) {
    _internal_mutable_failure()->::lnrpc::Failure::MergeFrom(from._internal_failure());
  }
}

void SendToRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.SendToRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendToRouteResponse::CopyFrom(const SendToRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.SendToRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendToRouteResponse::IsInitialized() const {
  return true;
}

void SendToRouteResponse::InternalSwap(SendToRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  preimage_.Swap(&other->preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(failure_, other->failure_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendToRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetMissionControlRequest::InitAsDefaultInstance() {
}
class ResetMissionControlRequest::_Internal {
 public:
};

ResetMissionControlRequest::ResetMissionControlRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.ResetMissionControlRequest)
}
ResetMissionControlRequest::ResetMissionControlRequest(const ResetMissionControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.ResetMissionControlRequest)
}

void ResetMissionControlRequest::SharedCtor() {
}

ResetMissionControlRequest::~ResetMissionControlRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.ResetMissionControlRequest)
  SharedDtor();
}

void ResetMissionControlRequest::SharedDtor() {
}

void ResetMissionControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetMissionControlRequest& ResetMissionControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetMissionControlRequest_router_2eproto.base);
  return *internal_default_instance();
}


void ResetMissionControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.ResetMissionControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ResetMissionControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetMissionControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.ResetMissionControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.ResetMissionControlRequest)
  return target;
}

size_t ResetMissionControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.ResetMissionControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetMissionControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.ResetMissionControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetMissionControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetMissionControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.ResetMissionControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.ResetMissionControlRequest)
    MergeFrom(*source);
  }
}

void ResetMissionControlRequest::MergeFrom(const ResetMissionControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.ResetMissionControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetMissionControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.ResetMissionControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetMissionControlRequest::CopyFrom(const ResetMissionControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.ResetMissionControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetMissionControlRequest::IsInitialized() const {
  return true;
}

void ResetMissionControlRequest::InternalSwap(ResetMissionControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetMissionControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetMissionControlResponse::InitAsDefaultInstance() {
}
class ResetMissionControlResponse::_Internal {
 public:
};

ResetMissionControlResponse::ResetMissionControlResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.ResetMissionControlResponse)
}
ResetMissionControlResponse::ResetMissionControlResponse(const ResetMissionControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.ResetMissionControlResponse)
}

void ResetMissionControlResponse::SharedCtor() {
}

ResetMissionControlResponse::~ResetMissionControlResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.ResetMissionControlResponse)
  SharedDtor();
}

void ResetMissionControlResponse::SharedDtor() {
}

void ResetMissionControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetMissionControlResponse& ResetMissionControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetMissionControlResponse_router_2eproto.base);
  return *internal_default_instance();
}


void ResetMissionControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.ResetMissionControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ResetMissionControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetMissionControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.ResetMissionControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.ResetMissionControlResponse)
  return target;
}

size_t ResetMissionControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.ResetMissionControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetMissionControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.ResetMissionControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetMissionControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetMissionControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.ResetMissionControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.ResetMissionControlResponse)
    MergeFrom(*source);
  }
}

void ResetMissionControlResponse::MergeFrom(const ResetMissionControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.ResetMissionControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetMissionControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.ResetMissionControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetMissionControlResponse::CopyFrom(const ResetMissionControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.ResetMissionControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetMissionControlResponse::IsInitialized() const {
  return true;
}

void ResetMissionControlResponse::InternalSwap(ResetMissionControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetMissionControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryMissionControlRequest::InitAsDefaultInstance() {
}
class QueryMissionControlRequest::_Internal {
 public:
};

QueryMissionControlRequest::QueryMissionControlRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.QueryMissionControlRequest)
}
QueryMissionControlRequest::QueryMissionControlRequest(const QueryMissionControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.QueryMissionControlRequest)
}

void QueryMissionControlRequest::SharedCtor() {
}

QueryMissionControlRequest::~QueryMissionControlRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.QueryMissionControlRequest)
  SharedDtor();
}

void QueryMissionControlRequest::SharedDtor() {
}

void QueryMissionControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryMissionControlRequest& QueryMissionControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryMissionControlRequest_router_2eproto.base);
  return *internal_default_instance();
}


void QueryMissionControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.QueryMissionControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* QueryMissionControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryMissionControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.QueryMissionControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.QueryMissionControlRequest)
  return target;
}

size_t QueryMissionControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.QueryMissionControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMissionControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.QueryMissionControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMissionControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryMissionControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.QueryMissionControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.QueryMissionControlRequest)
    MergeFrom(*source);
  }
}

void QueryMissionControlRequest::MergeFrom(const QueryMissionControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.QueryMissionControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void QueryMissionControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.QueryMissionControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMissionControlRequest::CopyFrom(const QueryMissionControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.QueryMissionControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMissionControlRequest::IsInitialized() const {
  return true;
}

void QueryMissionControlRequest::InternalSwap(QueryMissionControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMissionControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryMissionControlResponse::InitAsDefaultInstance() {
}
class QueryMissionControlResponse::_Internal {
 public:
};

QueryMissionControlResponse::QueryMissionControlResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.QueryMissionControlResponse)
}
QueryMissionControlResponse::QueryMissionControlResponse(const QueryMissionControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.QueryMissionControlResponse)
}

void QueryMissionControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryMissionControlResponse_router_2eproto.base);
}

QueryMissionControlResponse::~QueryMissionControlResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.QueryMissionControlResponse)
  SharedDtor();
}

void QueryMissionControlResponse::SharedDtor() {
}

void QueryMissionControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryMissionControlResponse& QueryMissionControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryMissionControlResponse_router_2eproto.base);
  return *internal_default_instance();
}


void QueryMissionControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.QueryMissionControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  _internal_metadata_.Clear();
}

const char* QueryMissionControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .routerrpc.PairHistory pairs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryMissionControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.QueryMissionControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .routerrpc.PairHistory pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_pairs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.QueryMissionControlResponse)
  return target;
}

size_t QueryMissionControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.QueryMissionControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .routerrpc.PairHistory pairs = 2;
  total_size += 1UL * this->_internal_pairs_size();
  for (const auto& msg : this->pairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryMissionControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.QueryMissionControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryMissionControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryMissionControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.QueryMissionControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.QueryMissionControlResponse)
    MergeFrom(*source);
  }
}

void QueryMissionControlResponse::MergeFrom(const QueryMissionControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.QueryMissionControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
}

void QueryMissionControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.QueryMissionControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMissionControlResponse::CopyFrom(const QueryMissionControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.QueryMissionControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMissionControlResponse::IsInitialized() const {
  return true;
}

void QueryMissionControlResponse::InternalSwap(QueryMissionControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairs_.InternalSwap(&other->pairs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryMissionControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PairHistory::InitAsDefaultInstance() {
  ::routerrpc::_PairHistory_default_instance_._instance.get_mutable()->history_ = const_cast< ::routerrpc::PairData*>(
      ::routerrpc::PairData::internal_default_instance());
}
class PairHistory::_Internal {
 public:
  static const ::routerrpc::PairData& history(const PairHistory* msg);
};

const ::routerrpc::PairData&
PairHistory::_Internal::history(const PairHistory* msg) {
  return *msg->history_;
}
PairHistory::PairHistory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.PairHistory)
}
PairHistory::PairHistory(const PairHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_from().empty()) {
    node_from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_from_);
  }
  node_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_to().empty()) {
    node_to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_to_);
  }
  if (from._internal_has_history()) {
    history_ = new ::routerrpc::PairData(*from.history_);
  } else {
    history_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.PairHistory)
}

void PairHistory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PairHistory_router_2eproto.base);
  node_from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  history_ = nullptr;
}

PairHistory::~PairHistory() {
  // @@protoc_insertion_point(destructor:routerrpc.PairHistory)
  SharedDtor();
}

void PairHistory::SharedDtor() {
  node_from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete history_;
}

void PairHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairHistory& PairHistory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PairHistory_router_2eproto.base);
  return *internal_default_instance();
}


void PairHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.PairHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && history_ != nullptr) {
    delete history_;
  }
  history_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PairHistory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes node_from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_node_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes node_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_node_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routerrpc.PairData history = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairHistory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.PairHistory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes node_from = 1;
  if (this->node_from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_node_from(), target);
  }

  // bytes node_to = 2;
  if (this->node_to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_node_to(), target);
  }

  // .routerrpc.PairData history = 7;
  if (this->has_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.PairHistory)
  return target;
}

size_t PairHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.PairHistory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes node_from = 1;
  if (this->node_from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_from());
  }

  // bytes node_to = 2;
  if (this->node_to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_node_to());
  }

  // .routerrpc.PairData history = 7;
  if (this->has_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *history_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairHistory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.PairHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const PairHistory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.PairHistory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.PairHistory)
    MergeFrom(*source);
  }
}

void PairHistory::MergeFrom(const PairHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.PairHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_from().size() > 0) {

    node_from_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_from_);
  }
  if (from.node_to().size() > 0) {

    node_to_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.node_to_);
  }
  if (from.has_history()) {
    _internal_mutable_history()->::routerrpc::PairData::MergeFrom(from._internal_history());
  }
}

void PairHistory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.PairHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairHistory::CopyFrom(const PairHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.PairHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairHistory::IsInitialized() const {
  return true;
}

void PairHistory::InternalSwap(PairHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  node_from_.Swap(&other->node_from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_to_.Swap(&other->node_to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(history_, other->history_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairHistory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PairData::InitAsDefaultInstance() {
}
class PairData::_Internal {
 public:
};

PairData::PairData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.PairData)
}
PairData::PairData(const PairData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fail_time_, &from.fail_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_amt_msat_) -
    reinterpret_cast<char*>(&fail_time_)) + sizeof(success_amt_msat_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.PairData)
}

void PairData::SharedCtor() {
  ::memset(&fail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_amt_msat_) -
      reinterpret_cast<char*>(&fail_time_)) + sizeof(success_amt_msat_));
}

PairData::~PairData() {
  // @@protoc_insertion_point(destructor:routerrpc.PairData)
  SharedDtor();
}

void PairData::SharedDtor() {
}

void PairData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PairData& PairData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PairData_router_2eproto.base);
  return *internal_default_instance();
}


void PairData::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.PairData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&fail_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_amt_msat_) -
      reinterpret_cast<char*>(&fail_time_)) + sizeof(success_amt_msat_));
  _internal_metadata_.Clear();
}

const char* PairData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fail_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fail_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fail_amt_sat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          fail_amt_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 fail_amt_msat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fail_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 success_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          success_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 success_amt_sat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          success_amt_sat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 success_amt_msat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          success_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.PairData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fail_time = 1;
  if (this->fail_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fail_time(), target);
  }

  // int64 fail_amt_sat = 2;
  if (this->fail_amt_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_fail_amt_sat(), target);
  }

  // int64 fail_amt_msat = 4;
  if (this->fail_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_fail_amt_msat(), target);
  }

  // int64 success_time = 5;
  if (this->success_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_success_time(), target);
  }

  // int64 success_amt_sat = 6;
  if (this->success_amt_sat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_success_amt_sat(), target);
  }

  // int64 success_amt_msat = 7;
  if (this->success_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_success_amt_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.PairData)
  return target;
}

size_t PairData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.PairData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fail_time = 1;
  if (this->fail_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fail_time());
  }

  // int64 fail_amt_sat = 2;
  if (this->fail_amt_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fail_amt_sat());
  }

  // int64 fail_amt_msat = 4;
  if (this->fail_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fail_amt_msat());
  }

  // int64 success_time = 5;
  if (this->success_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_success_time());
  }

  // int64 success_amt_sat = 6;
  if (this->success_amt_sat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_success_amt_sat());
  }

  // int64 success_amt_msat = 7;
  if (this->success_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_success_amt_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.PairData)
  GOOGLE_DCHECK_NE(&from, this);
  const PairData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.PairData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.PairData)
    MergeFrom(*source);
  }
}

void PairData::MergeFrom(const PairData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.PairData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fail_time() != 0) {
    _internal_set_fail_time(from._internal_fail_time());
  }
  if (from.fail_amt_sat() != 0) {
    _internal_set_fail_amt_sat(from._internal_fail_amt_sat());
  }
  if (from.fail_amt_msat() != 0) {
    _internal_set_fail_amt_msat(from._internal_fail_amt_msat());
  }
  if (from.success_time() != 0) {
    _internal_set_success_time(from._internal_success_time());
  }
  if (from.success_amt_sat() != 0) {
    _internal_set_success_amt_sat(from._internal_success_amt_sat());
  }
  if (from.success_amt_msat() != 0) {
    _internal_set_success_amt_msat(from._internal_success_amt_msat());
  }
}

void PairData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.PairData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairData::CopyFrom(const PairData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.PairData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairData::IsInitialized() const {
  return true;
}

void PairData::InternalSwap(PairData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fail_time_, other->fail_time_);
  swap(fail_amt_sat_, other->fail_amt_sat_);
  swap(fail_amt_msat_, other->fail_amt_msat_);
  swap(success_time_, other->success_time_);
  swap(success_amt_sat_, other->success_amt_sat_);
  swap(success_amt_msat_, other->success_amt_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryProbabilityRequest::InitAsDefaultInstance() {
}
class QueryProbabilityRequest::_Internal {
 public:
};

QueryProbabilityRequest::QueryProbabilityRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.QueryProbabilityRequest)
}
QueryProbabilityRequest::QueryProbabilityRequest(const QueryProbabilityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  from_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from_node().empty()) {
    from_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_node_);
  }
  to_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to_node().empty()) {
    to_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_node_);
  }
  amt_msat_ = from.amt_msat_;
  // @@protoc_insertion_point(copy_constructor:routerrpc.QueryProbabilityRequest)
}

void QueryProbabilityRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryProbabilityRequest_router_2eproto.base);
  from_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amt_msat_ = PROTOBUF_LONGLONG(0);
}

QueryProbabilityRequest::~QueryProbabilityRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.QueryProbabilityRequest)
  SharedDtor();
}

void QueryProbabilityRequest::SharedDtor() {
  from_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QueryProbabilityRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryProbabilityRequest& QueryProbabilityRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryProbabilityRequest_router_2eproto.base);
  return *internal_default_instance();
}


void QueryProbabilityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.QueryProbabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amt_msat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* QueryProbabilityRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 amt_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryProbabilityRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.QueryProbabilityRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from_node = 1;
  if (this->from_node().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from_node(), target);
  }

  // bytes to_node = 2;
  if (this->to_node().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to_node(), target);
  }

  // int64 amt_msat = 3;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_amt_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.QueryProbabilityRequest)
  return target;
}

size_t QueryProbabilityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.QueryProbabilityRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from_node = 1;
  if (this->from_node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from_node());
  }

  // bytes to_node = 2;
  if (this->to_node().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to_node());
  }

  // int64 amt_msat = 3;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryProbabilityRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.QueryProbabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryProbabilityRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryProbabilityRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.QueryProbabilityRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.QueryProbabilityRequest)
    MergeFrom(*source);
  }
}

void QueryProbabilityRequest::MergeFrom(const QueryProbabilityRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.QueryProbabilityRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from_node().size() > 0) {

    from_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.from_node_);
  }
  if (from.to_node().size() > 0) {

    to_node_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.to_node_);
  }
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
}

void QueryProbabilityRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.QueryProbabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryProbabilityRequest::CopyFrom(const QueryProbabilityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.QueryProbabilityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProbabilityRequest::IsInitialized() const {
  return true;
}

void QueryProbabilityRequest::InternalSwap(QueryProbabilityRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  from_node_.Swap(&other->from_node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  to_node_.Swap(&other->to_node_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amt_msat_, other->amt_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProbabilityRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QueryProbabilityResponse::InitAsDefaultInstance() {
  ::routerrpc::_QueryProbabilityResponse_default_instance_._instance.get_mutable()->history_ = const_cast< ::routerrpc::PairData*>(
      ::routerrpc::PairData::internal_default_instance());
}
class QueryProbabilityResponse::_Internal {
 public:
  static const ::routerrpc::PairData& history(const QueryProbabilityResponse* msg);
};

const ::routerrpc::PairData&
QueryProbabilityResponse::_Internal::history(const QueryProbabilityResponse* msg) {
  return *msg->history_;
}
QueryProbabilityResponse::QueryProbabilityResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.QueryProbabilityResponse)
}
QueryProbabilityResponse::QueryProbabilityResponse(const QueryProbabilityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_history()) {
    history_ = new ::routerrpc::PairData(*from.history_);
  } else {
    history_ = nullptr;
  }
  probability_ = from.probability_;
  // @@protoc_insertion_point(copy_constructor:routerrpc.QueryProbabilityResponse)
}

void QueryProbabilityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QueryProbabilityResponse_router_2eproto.base);
  ::memset(&history_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_) -
      reinterpret_cast<char*>(&history_)) + sizeof(probability_));
}

QueryProbabilityResponse::~QueryProbabilityResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.QueryProbabilityResponse)
  SharedDtor();
}

void QueryProbabilityResponse::SharedDtor() {
  if (this != internal_default_instance()) delete history_;
}

void QueryProbabilityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QueryProbabilityResponse& QueryProbabilityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QueryProbabilityResponse_router_2eproto.base);
  return *internal_default_instance();
}


void QueryProbabilityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.QueryProbabilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && history_ != nullptr) {
    delete history_;
  }
  history_ = nullptr;
  probability_ = 0;
  _internal_metadata_.Clear();
}

const char* QueryProbabilityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double probability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .routerrpc.PairData history = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_history(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryProbabilityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.QueryProbabilityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_probability(), target);
  }

  // .routerrpc.PairData history = 2;
  if (this->has_history()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::history(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.QueryProbabilityResponse)
  return target;
}

size_t QueryProbabilityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.QueryProbabilityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .routerrpc.PairData history = 2;
  if (this->has_history()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *history_);
  }

  // double probability = 1;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryProbabilityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.QueryProbabilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryProbabilityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryProbabilityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.QueryProbabilityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.QueryProbabilityResponse)
    MergeFrom(*source);
  }
}

void QueryProbabilityResponse::MergeFrom(const QueryProbabilityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.QueryProbabilityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_history()) {
    _internal_mutable_history()->::routerrpc::PairData::MergeFrom(from._internal_history());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
}

void QueryProbabilityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.QueryProbabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryProbabilityResponse::CopyFrom(const QueryProbabilityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.QueryProbabilityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryProbabilityResponse::IsInitialized() const {
  return true;
}

void QueryProbabilityResponse::InternalSwap(QueryProbabilityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(history_, other->history_);
  swap(probability_, other->probability_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryProbabilityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildRouteRequest::InitAsDefaultInstance() {
}
class BuildRouteRequest::_Internal {
 public:
};

BuildRouteRequest::BuildRouteRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.BuildRouteRequest)
}
BuildRouteRequest::BuildRouteRequest(const BuildRouteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      hop_pubkeys_(from.hop_pubkeys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&amt_msat_, &from.amt_msat_,
    static_cast<size_t>(reinterpret_cast<char*>(&final_cltv_delta_) -
    reinterpret_cast<char*>(&amt_msat_)) + sizeof(final_cltv_delta_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.BuildRouteRequest)
}

void BuildRouteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildRouteRequest_router_2eproto.base);
  ::memset(&amt_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_cltv_delta_) -
      reinterpret_cast<char*>(&amt_msat_)) + sizeof(final_cltv_delta_));
}

BuildRouteRequest::~BuildRouteRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.BuildRouteRequest)
  SharedDtor();
}

void BuildRouteRequest::SharedDtor() {
}

void BuildRouteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildRouteRequest& BuildRouteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildRouteRequest_router_2eproto.base);
  return *internal_default_instance();
}


void BuildRouteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.BuildRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hop_pubkeys_.Clear();
  ::memset(&amt_msat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&final_cltv_delta_) -
      reinterpret_cast<char*>(&amt_msat_)) + sizeof(final_cltv_delta_));
  _internal_metadata_.Clear();
}

const char* BuildRouteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amt_msat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 final_cltv_delta = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          final_cltv_delta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_chan_id = 3 [jstype = JS_STRING];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          outgoing_chan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes hop_pubkeys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hop_pubkeys();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildRouteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.BuildRouteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amt_msat = 1;
  if (this->amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amt_msat(), target);
  }

  // int32 final_cltv_delta = 2;
  if (this->final_cltv_delta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_final_cltv_delta(), target);
  }

  // uint64 outgoing_chan_id = 3 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_outgoing_chan_id(), target);
  }

  // repeated bytes hop_pubkeys = 4;
  for (int i = 0, n = this->_internal_hop_pubkeys_size(); i < n; i++) {
    const auto& s = this->_internal_hop_pubkeys(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.BuildRouteRequest)
  return target;
}

size_t BuildRouteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.BuildRouteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes hop_pubkeys = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(hop_pubkeys_.size());
  for (int i = 0, n = hop_pubkeys_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      hop_pubkeys_.Get(i));
  }

  // int64 amt_msat = 1;
  if (this->amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amt_msat());
  }

  // uint64 outgoing_chan_id = 3 [jstype = JS_STRING];
  if (this->outgoing_chan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_chan_id());
  }

  // int32 final_cltv_delta = 2;
  if (this->final_cltv_delta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_final_cltv_delta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildRouteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.BuildRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildRouteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildRouteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.BuildRouteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.BuildRouteRequest)
    MergeFrom(*source);
  }
}

void BuildRouteRequest::MergeFrom(const BuildRouteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.BuildRouteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hop_pubkeys_.MergeFrom(from.hop_pubkeys_);
  if (from.amt_msat() != 0) {
    _internal_set_amt_msat(from._internal_amt_msat());
  }
  if (from.outgoing_chan_id() != 0) {
    _internal_set_outgoing_chan_id(from._internal_outgoing_chan_id());
  }
  if (from.final_cltv_delta() != 0) {
    _internal_set_final_cltv_delta(from._internal_final_cltv_delta());
  }
}

void BuildRouteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.BuildRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildRouteRequest::CopyFrom(const BuildRouteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.BuildRouteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildRouteRequest::IsInitialized() const {
  return true;
}

void BuildRouteRequest::InternalSwap(BuildRouteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hop_pubkeys_.InternalSwap(&other->hop_pubkeys_);
  swap(amt_msat_, other->amt_msat_);
  swap(outgoing_chan_id_, other->outgoing_chan_id_);
  swap(final_cltv_delta_, other->final_cltv_delta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildRouteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BuildRouteResponse::InitAsDefaultInstance() {
  ::routerrpc::_BuildRouteResponse_default_instance_._instance.get_mutable()->route_ = const_cast< ::lnrpc::Route*>(
      ::lnrpc::Route::internal_default_instance());
}
class BuildRouteResponse::_Internal {
 public:
  static const ::lnrpc::Route& route(const BuildRouteResponse* msg);
};

const ::lnrpc::Route&
BuildRouteResponse::_Internal::route(const BuildRouteResponse* msg) {
  return *msg->route_;
}
void BuildRouteResponse::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
BuildRouteResponse::BuildRouteResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.BuildRouteResponse)
}
BuildRouteResponse::BuildRouteResponse(const BuildRouteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_route()) {
    route_ = new ::lnrpc::Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.BuildRouteResponse)
}

void BuildRouteResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BuildRouteResponse_router_2eproto.base);
  route_ = nullptr;
}

BuildRouteResponse::~BuildRouteResponse() {
  // @@protoc_insertion_point(destructor:routerrpc.BuildRouteResponse)
  SharedDtor();
}

void BuildRouteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void BuildRouteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BuildRouteResponse& BuildRouteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BuildRouteResponse_router_2eproto.base);
  return *internal_default_instance();
}


void BuildRouteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.BuildRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BuildRouteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .lnrpc.Route route = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BuildRouteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.BuildRouteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .lnrpc.Route route = 1;
  if (this->has_route()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::route(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.BuildRouteResponse)
  return target;
}

size_t BuildRouteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.BuildRouteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .lnrpc.Route route = 1;
  if (this->has_route()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *route_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BuildRouteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.BuildRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BuildRouteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BuildRouteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.BuildRouteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.BuildRouteResponse)
    MergeFrom(*source);
  }
}

void BuildRouteResponse::MergeFrom(const BuildRouteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.BuildRouteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_route()) {
    _internal_mutable_route()->::lnrpc::Route::MergeFrom(from._internal_route());
  }
}

void BuildRouteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.BuildRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildRouteResponse::CopyFrom(const BuildRouteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.BuildRouteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildRouteResponse::IsInitialized() const {
  return true;
}

void BuildRouteResponse::InternalSwap(BuildRouteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(route_, other->route_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildRouteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeHtlcEventsRequest::InitAsDefaultInstance() {
}
class SubscribeHtlcEventsRequest::_Internal {
 public:
};

SubscribeHtlcEventsRequest::SubscribeHtlcEventsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.SubscribeHtlcEventsRequest)
}
SubscribeHtlcEventsRequest::SubscribeHtlcEventsRequest(const SubscribeHtlcEventsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.SubscribeHtlcEventsRequest)
}

void SubscribeHtlcEventsRequest::SharedCtor() {
}

SubscribeHtlcEventsRequest::~SubscribeHtlcEventsRequest() {
  // @@protoc_insertion_point(destructor:routerrpc.SubscribeHtlcEventsRequest)
  SharedDtor();
}

void SubscribeHtlcEventsRequest::SharedDtor() {
}

void SubscribeHtlcEventsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeHtlcEventsRequest& SubscribeHtlcEventsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeHtlcEventsRequest_router_2eproto.base);
  return *internal_default_instance();
}


void SubscribeHtlcEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.SubscribeHtlcEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SubscribeHtlcEventsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeHtlcEventsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.SubscribeHtlcEventsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.SubscribeHtlcEventsRequest)
  return target;
}

size_t SubscribeHtlcEventsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.SubscribeHtlcEventsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeHtlcEventsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.SubscribeHtlcEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeHtlcEventsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeHtlcEventsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.SubscribeHtlcEventsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.SubscribeHtlcEventsRequest)
    MergeFrom(*source);
  }
}

void SubscribeHtlcEventsRequest::MergeFrom(const SubscribeHtlcEventsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.SubscribeHtlcEventsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeHtlcEventsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.SubscribeHtlcEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeHtlcEventsRequest::CopyFrom(const SubscribeHtlcEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.SubscribeHtlcEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeHtlcEventsRequest::IsInitialized() const {
  return true;
}

void SubscribeHtlcEventsRequest::InternalSwap(SubscribeHtlcEventsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeHtlcEventsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HtlcEvent::InitAsDefaultInstance() {
  ::routerrpc::_HtlcEvent_default_instance_.forward_event_ = const_cast< ::routerrpc::ForwardEvent*>(
      ::routerrpc::ForwardEvent::internal_default_instance());
  ::routerrpc::_HtlcEvent_default_instance_.forward_fail_event_ = const_cast< ::routerrpc::ForwardFailEvent*>(
      ::routerrpc::ForwardFailEvent::internal_default_instance());
  ::routerrpc::_HtlcEvent_default_instance_.settle_event_ = const_cast< ::routerrpc::SettleEvent*>(
      ::routerrpc::SettleEvent::internal_default_instance());
  ::routerrpc::_HtlcEvent_default_instance_.link_fail_event_ = const_cast< ::routerrpc::LinkFailEvent*>(
      ::routerrpc::LinkFailEvent::internal_default_instance());
}
class HtlcEvent::_Internal {
 public:
  static const ::routerrpc::ForwardEvent& forward_event(const HtlcEvent* msg);
  static const ::routerrpc::ForwardFailEvent& forward_fail_event(const HtlcEvent* msg);
  static const ::routerrpc::SettleEvent& settle_event(const HtlcEvent* msg);
  static const ::routerrpc::LinkFailEvent& link_fail_event(const HtlcEvent* msg);
};

const ::routerrpc::ForwardEvent&
HtlcEvent::_Internal::forward_event(const HtlcEvent* msg) {
  return *msg->event_.forward_event_;
}
const ::routerrpc::ForwardFailEvent&
HtlcEvent::_Internal::forward_fail_event(const HtlcEvent* msg) {
  return *msg->event_.forward_fail_event_;
}
const ::routerrpc::SettleEvent&
HtlcEvent::_Internal::settle_event(const HtlcEvent* msg) {
  return *msg->event_.settle_event_;
}
const ::routerrpc::LinkFailEvent&
HtlcEvent::_Internal::link_fail_event(const HtlcEvent* msg) {
  return *msg->event_.link_fail_event_;
}
void HtlcEvent::set_allocated_forward_event(::routerrpc::ForwardEvent* forward_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (forward_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_event, submessage_arena);
    }
    set_has_forward_event();
    event_.forward_event_ = forward_event;
  }
  // @@protoc_insertion_point(field_set_allocated:routerrpc.HtlcEvent.forward_event)
}
void HtlcEvent::set_allocated_forward_fail_event(::routerrpc::ForwardFailEvent* forward_fail_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (forward_fail_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      forward_fail_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forward_fail_event, submessage_arena);
    }
    set_has_forward_fail_event();
    event_.forward_fail_event_ = forward_fail_event;
  }
  // @@protoc_insertion_point(field_set_allocated:routerrpc.HtlcEvent.forward_fail_event)
}
void HtlcEvent::set_allocated_settle_event(::routerrpc::SettleEvent* settle_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (settle_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      settle_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settle_event, submessage_arena);
    }
    set_has_settle_event();
    event_.settle_event_ = settle_event;
  }
  // @@protoc_insertion_point(field_set_allocated:routerrpc.HtlcEvent.settle_event)
}
void HtlcEvent::set_allocated_link_fail_event(::routerrpc::LinkFailEvent* link_fail_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_event();
  if (link_fail_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      link_fail_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, link_fail_event, submessage_arena);
    }
    set_has_link_fail_event();
    event_.link_fail_event_ = link_fail_event;
  }
  // @@protoc_insertion_point(field_set_allocated:routerrpc.HtlcEvent.link_fail_event)
}
HtlcEvent::HtlcEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.HtlcEvent)
}
HtlcEvent::HtlcEvent(const HtlcEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&incoming_channel_id_, &from.incoming_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_type_) -
    reinterpret_cast<char*>(&incoming_channel_id_)) + sizeof(event_type_));
  clear_has_event();
  switch (from.event_case()) {
    case kForwardEvent: {
      _internal_mutable_forward_event()->::routerrpc::ForwardEvent::MergeFrom(from._internal_forward_event());
      break;
    }
    case kForwardFailEvent: {
      _internal_mutable_forward_fail_event()->::routerrpc::ForwardFailEvent::MergeFrom(from._internal_forward_fail_event());
      break;
    }
    case kSettleEvent: {
      _internal_mutable_settle_event()->::routerrpc::SettleEvent::MergeFrom(from._internal_settle_event());
      break;
    }
    case kLinkFailEvent: {
      _internal_mutable_link_fail_event()->::routerrpc::LinkFailEvent::MergeFrom(from._internal_link_fail_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.HtlcEvent)
}

void HtlcEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HtlcEvent_router_2eproto.base);
  ::memset(&incoming_channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&incoming_channel_id_)) + sizeof(event_type_));
  clear_has_event();
}

HtlcEvent::~HtlcEvent() {
  // @@protoc_insertion_point(destructor:routerrpc.HtlcEvent)
  SharedDtor();
}

void HtlcEvent::SharedDtor() {
  if (has_event()) {
    clear_event();
  }
}

void HtlcEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HtlcEvent& HtlcEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HtlcEvent_router_2eproto.base);
  return *internal_default_instance();
}


void HtlcEvent::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:routerrpc.HtlcEvent)
  switch (event_case()) {
    case kForwardEvent: {
      delete event_.forward_event_;
      break;
    }
    case kForwardFailEvent: {
      delete event_.forward_fail_event_;
      break;
    }
    case kSettleEvent: {
      delete event_.settle_event_;
      break;
    }
    case kLinkFailEvent: {
      delete event_.link_fail_event_;
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void HtlcEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.HtlcEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&incoming_channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&event_type_) -
      reinterpret_cast<char*>(&incoming_channel_id_)) + sizeof(event_type_));
  clear_event();
  _internal_metadata_.Clear();
}

const char* HtlcEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 incoming_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          incoming_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_channel_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outgoing_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 incoming_htlc_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          incoming_htlc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_htlc_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          outgoing_htlc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 timestamp_ns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routerrpc.HtlcEvent.EventType event_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_event_type(static_cast<::routerrpc::HtlcEvent_EventType>(val));
        } else goto handle_unusual;
        continue;
      // .routerrpc.ForwardEvent forward_event = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routerrpc.ForwardFailEvent forward_fail_event = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_forward_fail_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routerrpc.SettleEvent settle_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_settle_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .routerrpc.LinkFailEvent link_fail_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_link_fail_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HtlcEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.HtlcEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 incoming_channel_id = 1;
  if (this->incoming_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_incoming_channel_id(), target);
  }

  // uint64 outgoing_channel_id = 2;
  if (this->outgoing_channel_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_outgoing_channel_id(), target);
  }

  // uint64 incoming_htlc_id = 3;
  if (this->incoming_htlc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_incoming_htlc_id(), target);
  }

  // uint64 outgoing_htlc_id = 4;
  if (this->outgoing_htlc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_outgoing_htlc_id(), target);
  }

  // uint64 timestamp_ns = 5;
  if (this->timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp_ns(), target);
  }

  // .routerrpc.HtlcEvent.EventType event_type = 6;
  if (this->event_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_event_type(), target);
  }

  // .routerrpc.ForwardEvent forward_event = 7;
  if (_internal_has_forward_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::forward_event(this), target, stream);
  }

  // .routerrpc.ForwardFailEvent forward_fail_event = 8;
  if (_internal_has_forward_fail_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::forward_fail_event(this), target, stream);
  }

  // .routerrpc.SettleEvent settle_event = 9;
  if (_internal_has_settle_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::settle_event(this), target, stream);
  }

  // .routerrpc.LinkFailEvent link_fail_event = 10;
  if (_internal_has_link_fail_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::link_fail_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.HtlcEvent)
  return target;
}

size_t HtlcEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.HtlcEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 incoming_channel_id = 1;
  if (this->incoming_channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_incoming_channel_id());
  }

  // uint64 outgoing_channel_id = 2;
  if (this->outgoing_channel_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_channel_id());
  }

  // uint64 incoming_htlc_id = 3;
  if (this->incoming_htlc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_incoming_htlc_id());
  }

  // uint64 outgoing_htlc_id = 4;
  if (this->outgoing_htlc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_htlc_id());
  }

  // uint64 timestamp_ns = 5;
  if (this->timestamp_ns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_timestamp_ns());
  }

  // .routerrpc.HtlcEvent.EventType event_type = 6;
  if (this->event_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_type());
  }

  switch (event_case()) {
    // .routerrpc.ForwardEvent forward_event = 7;
    case kForwardEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.forward_event_);
      break;
    }
    // .routerrpc.ForwardFailEvent forward_fail_event = 8;
    case kForwardFailEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.forward_fail_event_);
      break;
    }
    // .routerrpc.SettleEvent settle_event = 9;
    case kSettleEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.settle_event_);
      break;
    }
    // .routerrpc.LinkFailEvent link_fail_event = 10;
    case kLinkFailEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.link_fail_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtlcEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.HtlcEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const HtlcEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HtlcEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.HtlcEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.HtlcEvent)
    MergeFrom(*source);
  }
}

void HtlcEvent::MergeFrom(const HtlcEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.HtlcEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.incoming_channel_id() != 0) {
    _internal_set_incoming_channel_id(from._internal_incoming_channel_id());
  }
  if (from.outgoing_channel_id() != 0) {
    _internal_set_outgoing_channel_id(from._internal_outgoing_channel_id());
  }
  if (from.incoming_htlc_id() != 0) {
    _internal_set_incoming_htlc_id(from._internal_incoming_htlc_id());
  }
  if (from.outgoing_htlc_id() != 0) {
    _internal_set_outgoing_htlc_id(from._internal_outgoing_htlc_id());
  }
  if (from.timestamp_ns() != 0) {
    _internal_set_timestamp_ns(from._internal_timestamp_ns());
  }
  if (from.event_type() != 0) {
    _internal_set_event_type(from._internal_event_type());
  }
  switch (from.event_case()) {
    case kForwardEvent: {
      _internal_mutable_forward_event()->::routerrpc::ForwardEvent::MergeFrom(from._internal_forward_event());
      break;
    }
    case kForwardFailEvent: {
      _internal_mutable_forward_fail_event()->::routerrpc::ForwardFailEvent::MergeFrom(from._internal_forward_fail_event());
      break;
    }
    case kSettleEvent: {
      _internal_mutable_settle_event()->::routerrpc::SettleEvent::MergeFrom(from._internal_settle_event());
      break;
    }
    case kLinkFailEvent: {
      _internal_mutable_link_fail_event()->::routerrpc::LinkFailEvent::MergeFrom(from._internal_link_fail_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void HtlcEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.HtlcEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtlcEvent::CopyFrom(const HtlcEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.HtlcEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtlcEvent::IsInitialized() const {
  return true;
}

void HtlcEvent::InternalSwap(HtlcEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(incoming_channel_id_, other->incoming_channel_id_);
  swap(outgoing_channel_id_, other->outgoing_channel_id_);
  swap(incoming_htlc_id_, other->incoming_htlc_id_);
  swap(outgoing_htlc_id_, other->outgoing_htlc_id_);
  swap(timestamp_ns_, other->timestamp_ns_);
  swap(event_type_, other->event_type_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata HtlcEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HtlcInfo::InitAsDefaultInstance() {
}
class HtlcInfo::_Internal {
 public:
};

HtlcInfo::HtlcInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.HtlcInfo)
}
HtlcInfo::HtlcInfo(const HtlcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&incoming_timelock_, &from.incoming_timelock_,
    static_cast<size_t>(reinterpret_cast<char*>(&outgoing_amt_msat_) -
    reinterpret_cast<char*>(&incoming_timelock_)) + sizeof(outgoing_amt_msat_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.HtlcInfo)
}

void HtlcInfo::SharedCtor() {
  ::memset(&incoming_timelock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outgoing_amt_msat_) -
      reinterpret_cast<char*>(&incoming_timelock_)) + sizeof(outgoing_amt_msat_));
}

HtlcInfo::~HtlcInfo() {
  // @@protoc_insertion_point(destructor:routerrpc.HtlcInfo)
  SharedDtor();
}

void HtlcInfo::SharedDtor() {
}

void HtlcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HtlcInfo& HtlcInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HtlcInfo_router_2eproto.base);
  return *internal_default_instance();
}


void HtlcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.HtlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&incoming_timelock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outgoing_amt_msat_) -
      reinterpret_cast<char*>(&incoming_timelock_)) + sizeof(outgoing_amt_msat_));
  _internal_metadata_.Clear();
}

const char* HtlcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 incoming_timelock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          incoming_timelock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 outgoing_timelock = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          outgoing_timelock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 incoming_amt_msat = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          incoming_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 outgoing_amt_msat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          outgoing_amt_msat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HtlcInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.HtlcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 incoming_timelock = 1;
  if (this->incoming_timelock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_incoming_timelock(), target);
  }

  // uint32 outgoing_timelock = 2;
  if (this->outgoing_timelock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_outgoing_timelock(), target);
  }

  // uint64 incoming_amt_msat = 3;
  if (this->incoming_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_incoming_amt_msat(), target);
  }

  // uint64 outgoing_amt_msat = 4;
  if (this->outgoing_amt_msat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_outgoing_amt_msat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.HtlcInfo)
  return target;
}

size_t HtlcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.HtlcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 incoming_timelock = 1;
  if (this->incoming_timelock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_incoming_timelock());
  }

  // uint32 outgoing_timelock = 2;
  if (this->outgoing_timelock() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_outgoing_timelock());
  }

  // uint64 incoming_amt_msat = 3;
  if (this->incoming_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_incoming_amt_msat());
  }

  // uint64 outgoing_amt_msat = 4;
  if (this->outgoing_amt_msat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_outgoing_amt_msat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtlcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.HtlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HtlcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HtlcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.HtlcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.HtlcInfo)
    MergeFrom(*source);
  }
}

void HtlcInfo::MergeFrom(const HtlcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.HtlcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.incoming_timelock() != 0) {
    _internal_set_incoming_timelock(from._internal_incoming_timelock());
  }
  if (from.outgoing_timelock() != 0) {
    _internal_set_outgoing_timelock(from._internal_outgoing_timelock());
  }
  if (from.incoming_amt_msat() != 0) {
    _internal_set_incoming_amt_msat(from._internal_incoming_amt_msat());
  }
  if (from.outgoing_amt_msat() != 0) {
    _internal_set_outgoing_amt_msat(from._internal_outgoing_amt_msat());
  }
}

void HtlcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.HtlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HtlcInfo::CopyFrom(const HtlcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.HtlcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtlcInfo::IsInitialized() const {
  return true;
}

void HtlcInfo::InternalSwap(HtlcInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(incoming_timelock_, other->incoming_timelock_);
  swap(outgoing_timelock_, other->outgoing_timelock_);
  swap(incoming_amt_msat_, other->incoming_amt_msat_);
  swap(outgoing_amt_msat_, other->outgoing_amt_msat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HtlcInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardEvent::InitAsDefaultInstance() {
  ::routerrpc::_ForwardEvent_default_instance_._instance.get_mutable()->info_ = const_cast< ::routerrpc::HtlcInfo*>(
      ::routerrpc::HtlcInfo::internal_default_instance());
}
class ForwardEvent::_Internal {
 public:
  static const ::routerrpc::HtlcInfo& info(const ForwardEvent* msg);
};

const ::routerrpc::HtlcInfo&
ForwardEvent::_Internal::info(const ForwardEvent* msg) {
  return *msg->info_;
}
ForwardEvent::ForwardEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.ForwardEvent)
}
ForwardEvent::ForwardEvent(const ForwardEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_info()) {
    info_ = new ::routerrpc::HtlcInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:routerrpc.ForwardEvent)
}

void ForwardEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ForwardEvent_router_2eproto.base);
  info_ = nullptr;
}

ForwardEvent::~ForwardEvent() {
  // @@protoc_insertion_point(destructor:routerrpc.ForwardEvent)
  SharedDtor();
}

void ForwardEvent::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
}

void ForwardEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardEvent& ForwardEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardEvent_router_2eproto.base);
  return *internal_default_instance();
}


void ForwardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.ForwardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ForwardEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .routerrpc.HtlcInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.ForwardEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .routerrpc.HtlcInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.ForwardEvent)
  return target;
}

size_t ForwardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.ForwardEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .routerrpc.HtlcInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.ForwardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.ForwardEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.ForwardEvent)
    MergeFrom(*source);
  }
}

void ForwardEvent::MergeFrom(const ForwardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.ForwardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    _internal_mutable_info()->::routerrpc::HtlcInfo::MergeFrom(from._internal_info());
  }
}

void ForwardEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.ForwardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardEvent::CopyFrom(const ForwardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.ForwardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardEvent::IsInitialized() const {
  return true;
}

void ForwardEvent::InternalSwap(ForwardEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ForwardFailEvent::InitAsDefaultInstance() {
}
class ForwardFailEvent::_Internal {
 public:
};

ForwardFailEvent::ForwardFailEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.ForwardFailEvent)
}
ForwardFailEvent::ForwardFailEvent(const ForwardFailEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.ForwardFailEvent)
}

void ForwardFailEvent::SharedCtor() {
}

ForwardFailEvent::~ForwardFailEvent() {
  // @@protoc_insertion_point(destructor:routerrpc.ForwardFailEvent)
  SharedDtor();
}

void ForwardFailEvent::SharedDtor() {
}

void ForwardFailEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ForwardFailEvent& ForwardFailEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ForwardFailEvent_router_2eproto.base);
  return *internal_default_instance();
}


void ForwardFailEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.ForwardFailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ForwardFailEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ForwardFailEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.ForwardFailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.ForwardFailEvent)
  return target;
}

size_t ForwardFailEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.ForwardFailEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ForwardFailEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.ForwardFailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const ForwardFailEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ForwardFailEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.ForwardFailEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.ForwardFailEvent)
    MergeFrom(*source);
  }
}

void ForwardFailEvent::MergeFrom(const ForwardFailEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.ForwardFailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ForwardFailEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.ForwardFailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardFailEvent::CopyFrom(const ForwardFailEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.ForwardFailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardFailEvent::IsInitialized() const {
  return true;
}

void ForwardFailEvent::InternalSwap(ForwardFailEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ForwardFailEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SettleEvent::InitAsDefaultInstance() {
}
class SettleEvent::_Internal {
 public:
};

SettleEvent::SettleEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.SettleEvent)
}
SettleEvent::SettleEvent(const SettleEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:routerrpc.SettleEvent)
}

void SettleEvent::SharedCtor() {
}

SettleEvent::~SettleEvent() {
  // @@protoc_insertion_point(destructor:routerrpc.SettleEvent)
  SharedDtor();
}

void SettleEvent::SharedDtor() {
}

void SettleEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SettleEvent& SettleEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SettleEvent_router_2eproto.base);
  return *internal_default_instance();
}


void SettleEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.SettleEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SettleEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SettleEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.SettleEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.SettleEvent)
  return target;
}

size_t SettleEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.SettleEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SettleEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.SettleEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SettleEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SettleEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.SettleEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.SettleEvent)
    MergeFrom(*source);
  }
}

void SettleEvent::MergeFrom(const SettleEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.SettleEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SettleEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.SettleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettleEvent::CopyFrom(const SettleEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.SettleEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettleEvent::IsInitialized() const {
  return true;
}

void SettleEvent::InternalSwap(SettleEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SettleEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinkFailEvent::InitAsDefaultInstance() {
  ::routerrpc::_LinkFailEvent_default_instance_._instance.get_mutable()->info_ = const_cast< ::routerrpc::HtlcInfo*>(
      ::routerrpc::HtlcInfo::internal_default_instance());
}
class LinkFailEvent::_Internal {
 public:
  static const ::routerrpc::HtlcInfo& info(const LinkFailEvent* msg);
};

const ::routerrpc::HtlcInfo&
LinkFailEvent::_Internal::info(const LinkFailEvent* msg) {
  return *msg->info_;
}
LinkFailEvent::LinkFailEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.LinkFailEvent)
}
LinkFailEvent::LinkFailEvent(const LinkFailEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  failure_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_failure_string().empty()) {
    failure_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failure_string_);
  }
  if (from._internal_has_info()) {
    info_ = new ::routerrpc::HtlcInfo(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&wire_failure_, &from.wire_failure_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_detail_) -
    reinterpret_cast<char*>(&wire_failure_)) + sizeof(failure_detail_));
  // @@protoc_insertion_point(copy_constructor:routerrpc.LinkFailEvent)
}

void LinkFailEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinkFailEvent_router_2eproto.base);
  failure_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_detail_) -
      reinterpret_cast<char*>(&info_)) + sizeof(failure_detail_));
}

LinkFailEvent::~LinkFailEvent() {
  // @@protoc_insertion_point(destructor:routerrpc.LinkFailEvent)
  SharedDtor();
}

void LinkFailEvent::SharedDtor() {
  failure_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void LinkFailEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinkFailEvent& LinkFailEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinkFailEvent_router_2eproto.base);
  return *internal_default_instance();
}


void LinkFailEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.LinkFailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  failure_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  ::memset(&wire_failure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failure_detail_) -
      reinterpret_cast<char*>(&wire_failure_)) + sizeof(failure_detail_));
  _internal_metadata_.Clear();
}

const char* LinkFailEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .routerrpc.HtlcInfo info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lnrpc.Failure.FailureCode wire_failure = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_wire_failure(static_cast<::lnrpc::Failure_FailureCode>(val));
        } else goto handle_unusual;
        continue;
      // .routerrpc.FailureDetail failure_detail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_failure_detail(static_cast<::routerrpc::FailureDetail>(val));
        } else goto handle_unusual;
        continue;
      // string failure_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_failure_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "routerrpc.LinkFailEvent.failure_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinkFailEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.LinkFailEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .routerrpc.HtlcInfo info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // .lnrpc.Failure.FailureCode wire_failure = 2;
  if (this->wire_failure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_wire_failure(), target);
  }

  // .routerrpc.FailureDetail failure_detail = 3;
  if (this->failure_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_failure_detail(), target);
  }

  // string failure_string = 4;
  if (this->failure_string().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_failure_string().data(), static_cast<int>(this->_internal_failure_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "routerrpc.LinkFailEvent.failure_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_failure_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.LinkFailEvent)
  return target;
}

size_t LinkFailEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.LinkFailEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string failure_string = 4;
  if (this->failure_string().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_failure_string());
  }

  // .routerrpc.HtlcInfo info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  // .lnrpc.Failure.FailureCode wire_failure = 2;
  if (this->wire_failure() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wire_failure());
  }

  // .routerrpc.FailureDetail failure_detail = 3;
  if (this->failure_detail() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failure_detail());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkFailEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.LinkFailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const LinkFailEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinkFailEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.LinkFailEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.LinkFailEvent)
    MergeFrom(*source);
  }
}

void LinkFailEvent::MergeFrom(const LinkFailEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.LinkFailEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.failure_string().size() > 0) {

    failure_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.failure_string_);
  }
  if (from.has_info()) {
    _internal_mutable_info()->::routerrpc::HtlcInfo::MergeFrom(from._internal_info());
  }
  if (from.wire_failure() != 0) {
    _internal_set_wire_failure(from._internal_wire_failure());
  }
  if (from.failure_detail() != 0) {
    _internal_set_failure_detail(from._internal_failure_detail());
  }
}

void LinkFailEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.LinkFailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkFailEvent::CopyFrom(const LinkFailEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.LinkFailEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkFailEvent::IsInitialized() const {
  return true;
}

void LinkFailEvent::InternalSwap(LinkFailEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  failure_string_.Swap(&other->failure_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(info_, other->info_);
  swap(wire_failure_, other->wire_failure_);
  swap(failure_detail_, other->failure_detail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LinkFailEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PaymentStatus::InitAsDefaultInstance() {
}
class PaymentStatus::_Internal {
 public:
};

void PaymentStatus::clear_htlcs() {
  htlcs_.Clear();
}
PaymentStatus::PaymentStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:routerrpc.PaymentStatus)
}
PaymentStatus::PaymentStatus(const PaymentStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      htlcs_(from.htlcs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_preimage().empty()) {
    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:routerrpc.PaymentStatus)
}

void PaymentStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentStatus_router_2eproto.base);
  preimage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

PaymentStatus::~PaymentStatus() {
  // @@protoc_insertion_point(destructor:routerrpc.PaymentStatus)
  SharedDtor();
}

void PaymentStatus::SharedDtor() {
  preimage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentStatus& PaymentStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentStatus_router_2eproto.base);
  return *internal_default_instance();
}


void PaymentStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:routerrpc.PaymentStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  htlcs_.Clear();
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
  _internal_metadata_.Clear();
}

const char* PaymentStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .routerrpc.PaymentState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::routerrpc::PaymentState>(val));
        } else goto handle_unusual;
        continue;
      // bytes preimage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_preimage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .lnrpc.HTLCAttempt htlcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_htlcs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:routerrpc.PaymentStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .routerrpc.PaymentState state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // bytes preimage = 2;
  if (this->preimage().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_preimage(), target);
  }

  // repeated .lnrpc.HTLCAttempt htlcs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_htlcs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_htlcs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:routerrpc.PaymentStatus)
  return target;
}

size_t PaymentStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:routerrpc.PaymentStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lnrpc.HTLCAttempt htlcs = 4;
  total_size += 1UL * this->_internal_htlcs_size();
  for (const auto& msg : this->htlcs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes preimage = 2;
  if (this->preimage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimage());
  }

  // .routerrpc.PaymentState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:routerrpc.PaymentStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:routerrpc.PaymentStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:routerrpc.PaymentStatus)
    MergeFrom(*source);
  }
}

void PaymentStatus::MergeFrom(const PaymentStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:routerrpc.PaymentStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  htlcs_.MergeFrom(from.htlcs_);
  if (from.preimage().size() > 0) {

    preimage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.preimage_);
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void PaymentStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:routerrpc.PaymentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentStatus::CopyFrom(const PaymentStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:routerrpc.PaymentStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentStatus::IsInitialized() const {
  return true;
}

void PaymentStatus::InternalSwap(PaymentStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  htlcs_.InternalSwap(&other->htlcs_);
  preimage_.Swap(&other->preimage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace routerrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::SendPaymentRequest* Arena::CreateMaybeMessage< ::routerrpc::SendPaymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SendPaymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::TrackPaymentRequest* Arena::CreateMaybeMessage< ::routerrpc::TrackPaymentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::TrackPaymentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::RouteFeeRequest* Arena::CreateMaybeMessage< ::routerrpc::RouteFeeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::RouteFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::RouteFeeResponse* Arena::CreateMaybeMessage< ::routerrpc::RouteFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::RouteFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::SendToRouteRequest* Arena::CreateMaybeMessage< ::routerrpc::SendToRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SendToRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::SendToRouteResponse* Arena::CreateMaybeMessage< ::routerrpc::SendToRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SendToRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::ResetMissionControlRequest* Arena::CreateMaybeMessage< ::routerrpc::ResetMissionControlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::ResetMissionControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::ResetMissionControlResponse* Arena::CreateMaybeMessage< ::routerrpc::ResetMissionControlResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::ResetMissionControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::QueryMissionControlRequest* Arena::CreateMaybeMessage< ::routerrpc::QueryMissionControlRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::QueryMissionControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::QueryMissionControlResponse* Arena::CreateMaybeMessage< ::routerrpc::QueryMissionControlResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::QueryMissionControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::PairHistory* Arena::CreateMaybeMessage< ::routerrpc::PairHistory >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::PairHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::PairData* Arena::CreateMaybeMessage< ::routerrpc::PairData >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::PairData >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::QueryProbabilityRequest* Arena::CreateMaybeMessage< ::routerrpc::QueryProbabilityRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::QueryProbabilityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::QueryProbabilityResponse* Arena::CreateMaybeMessage< ::routerrpc::QueryProbabilityResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::QueryProbabilityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::BuildRouteRequest* Arena::CreateMaybeMessage< ::routerrpc::BuildRouteRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::BuildRouteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::BuildRouteResponse* Arena::CreateMaybeMessage< ::routerrpc::BuildRouteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::BuildRouteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::SubscribeHtlcEventsRequest* Arena::CreateMaybeMessage< ::routerrpc::SubscribeHtlcEventsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SubscribeHtlcEventsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::HtlcEvent* Arena::CreateMaybeMessage< ::routerrpc::HtlcEvent >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::HtlcEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::HtlcInfo* Arena::CreateMaybeMessage< ::routerrpc::HtlcInfo >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::HtlcInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::ForwardEvent* Arena::CreateMaybeMessage< ::routerrpc::ForwardEvent >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::ForwardEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::ForwardFailEvent* Arena::CreateMaybeMessage< ::routerrpc::ForwardFailEvent >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::ForwardFailEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::SettleEvent* Arena::CreateMaybeMessage< ::routerrpc::SettleEvent >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::SettleEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::LinkFailEvent* Arena::CreateMaybeMessage< ::routerrpc::LinkFailEvent >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::LinkFailEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::routerrpc::PaymentStatus* Arena::CreateMaybeMessage< ::routerrpc::PaymentStatus >(Arena* arena) {
  return Arena::CreateInternal< ::routerrpc::PaymentStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
