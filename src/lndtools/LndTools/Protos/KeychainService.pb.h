// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeychainService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_KeychainService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_KeychainService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_KeychainService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_KeychainService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeychainService_2eproto;
namespace lightwalletrpc {
class DeriveNextKeyReq;
class DeriveNextKeyReqDefaultTypeInternal;
extern DeriveNextKeyReqDefaultTypeInternal _DeriveNextKeyReq_default_instance_;
class IsOurAddressResponse;
class IsOurAddressResponseDefaultTypeInternal;
extern IsOurAddressResponseDefaultTypeInternal _IsOurAddressResponse_default_instance_;
class KeyDescriptor;
class KeyDescriptorDefaultTypeInternal;
extern KeyDescriptorDefaultTypeInternal _KeyDescriptor_default_instance_;
class KeyLocator;
class KeyLocatorDefaultTypeInternal;
extern KeyLocatorDefaultTypeInternal _KeyLocator_default_instance_;
}  // namespace lightwalletrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::lightwalletrpc::DeriveNextKeyReq* Arena::CreateMaybeMessage<::lightwalletrpc::DeriveNextKeyReq>(Arena*);
template<> ::lightwalletrpc::IsOurAddressResponse* Arena::CreateMaybeMessage<::lightwalletrpc::IsOurAddressResponse>(Arena*);
template<> ::lightwalletrpc::KeyDescriptor* Arena::CreateMaybeMessage<::lightwalletrpc::KeyDescriptor>(Arena*);
template<> ::lightwalletrpc::KeyLocator* Arena::CreateMaybeMessage<::lightwalletrpc::KeyLocator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightwalletrpc {

// ===================================================================

class KeyLocator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.KeyLocator) */ {
 public:
  KeyLocator();
  virtual ~KeyLocator();

  KeyLocator(const KeyLocator& from);
  KeyLocator(KeyLocator&& from) noexcept
    : KeyLocator() {
    *this = ::std::move(from);
  }

  inline KeyLocator& operator=(const KeyLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyLocator& operator=(KeyLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyLocator* internal_default_instance() {
    return reinterpret_cast<const KeyLocator*>(
               &_KeyLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyLocator& a, KeyLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyLocator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyLocator* New() const final {
    return CreateMaybeMessage<KeyLocator>(nullptr);
  }

  KeyLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyLocator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyLocator& from);
  void MergeFrom(const KeyLocator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyLocator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.KeyLocator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KeychainService_2eproto);
    return ::descriptor_table_KeychainService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFamilyFieldNumber = 1,
    kKeyIndexFieldNumber = 2,
  };
  // uint32 keyFamily = 1;
  void clear_keyfamily();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyfamily() const;
  void set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyfamily() const;
  void _internal_set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 keyIndex = 2;
  void clear_keyindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyindex() const;
  void set_keyindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyindex() const;
  void _internal_set_keyindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.KeyLocator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyfamily_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KeychainService_2eproto;
};
// -------------------------------------------------------------------

class KeyDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.KeyDescriptor) */ {
 public:
  KeyDescriptor();
  virtual ~KeyDescriptor();

  KeyDescriptor(const KeyDescriptor& from);
  KeyDescriptor(KeyDescriptor&& from) noexcept
    : KeyDescriptor() {
    *this = ::std::move(from);
  }

  inline KeyDescriptor& operator=(const KeyDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDescriptor& operator=(KeyDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyDescriptor* internal_default_instance() {
    return reinterpret_cast<const KeyDescriptor*>(
               &_KeyDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KeyDescriptor& a, KeyDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDescriptor* New() const final {
    return CreateMaybeMessage<KeyDescriptor>(nullptr);
  }

  KeyDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDescriptor& from);
  void MergeFrom(const KeyDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.KeyDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KeychainService_2eproto);
    return ::descriptor_table_KeychainService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kLocatorFieldNumber = 2,
  };
  // string pubKey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // .lightwalletrpc.KeyLocator locator = 2;
  bool has_locator() const;
  private:
  bool _internal_has_locator() const;
  public:
  void clear_locator();
  const ::lightwalletrpc::KeyLocator& locator() const;
  ::lightwalletrpc::KeyLocator* release_locator();
  ::lightwalletrpc::KeyLocator* mutable_locator();
  void set_allocated_locator(::lightwalletrpc::KeyLocator* locator);
  private:
  const ::lightwalletrpc::KeyLocator& _internal_locator() const;
  ::lightwalletrpc::KeyLocator* _internal_mutable_locator();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.KeyDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::lightwalletrpc::KeyLocator* locator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KeychainService_2eproto;
};
// -------------------------------------------------------------------

class DeriveNextKeyReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.DeriveNextKeyReq) */ {
 public:
  DeriveNextKeyReq();
  virtual ~DeriveNextKeyReq();

  DeriveNextKeyReq(const DeriveNextKeyReq& from);
  DeriveNextKeyReq(DeriveNextKeyReq&& from) noexcept
    : DeriveNextKeyReq() {
    *this = ::std::move(from);
  }

  inline DeriveNextKeyReq& operator=(const DeriveNextKeyReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeriveNextKeyReq& operator=(DeriveNextKeyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeriveNextKeyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeriveNextKeyReq* internal_default_instance() {
    return reinterpret_cast<const DeriveNextKeyReq*>(
               &_DeriveNextKeyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeriveNextKeyReq& a, DeriveNextKeyReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeriveNextKeyReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeriveNextKeyReq* New() const final {
    return CreateMaybeMessage<DeriveNextKeyReq>(nullptr);
  }

  DeriveNextKeyReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeriveNextKeyReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeriveNextKeyReq& from);
  void MergeFrom(const DeriveNextKeyReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeriveNextKeyReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.DeriveNextKeyReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KeychainService_2eproto);
    return ::descriptor_table_KeychainService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFamilyFieldNumber = 1,
  };
  // uint32 keyFamily = 1;
  void clear_keyfamily();
  ::PROTOBUF_NAMESPACE_ID::uint32 keyfamily() const;
  void set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_keyfamily() const;
  void _internal_set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.DeriveNextKeyReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 keyfamily_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KeychainService_2eproto;
};
// -------------------------------------------------------------------

class IsOurAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.IsOurAddressResponse) */ {
 public:
  IsOurAddressResponse();
  virtual ~IsOurAddressResponse();

  IsOurAddressResponse(const IsOurAddressResponse& from);
  IsOurAddressResponse(IsOurAddressResponse&& from) noexcept
    : IsOurAddressResponse() {
    *this = ::std::move(from);
  }

  inline IsOurAddressResponse& operator=(const IsOurAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOurAddressResponse& operator=(IsOurAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsOurAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsOurAddressResponse* internal_default_instance() {
    return reinterpret_cast<const IsOurAddressResponse*>(
               &_IsOurAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(IsOurAddressResponse& a, IsOurAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOurAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsOurAddressResponse* New() const final {
    return CreateMaybeMessage<IsOurAddressResponse>(nullptr);
  }

  IsOurAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsOurAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsOurAddressResponse& from);
  void MergeFrom(const IsOurAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOurAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.IsOurAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_KeychainService_2eproto);
    return ::descriptor_table_KeychainService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOurFieldNumber = 1,
  };
  // bool isOur = 1;
  void clear_isour();
  bool isour() const;
  void set_isour(bool value);
  private:
  bool _internal_isour() const;
  void _internal_set_isour(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.IsOurAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool isour_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_KeychainService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyLocator

// uint32 keyFamily = 1;
inline void KeyLocator::clear_keyfamily() {
  keyfamily_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyLocator::_internal_keyfamily() const {
  return keyfamily_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyLocator::keyfamily() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.KeyLocator.keyFamily)
  return _internal_keyfamily();
}
inline void KeyLocator::_internal_set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyfamily_ = value;
}
inline void KeyLocator::set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyfamily(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.KeyLocator.keyFamily)
}

// uint32 keyIndex = 2;
inline void KeyLocator::clear_keyindex() {
  keyindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyLocator::_internal_keyindex() const {
  return keyindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KeyLocator::keyindex() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.KeyLocator.keyIndex)
  return _internal_keyindex();
}
inline void KeyLocator::_internal_set_keyindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyindex_ = value;
}
inline void KeyLocator::set_keyindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyindex(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.KeyLocator.keyIndex)
}

// -------------------------------------------------------------------

// KeyDescriptor

// string pubKey = 1;
inline void KeyDescriptor::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyDescriptor::pubkey() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.KeyDescriptor.pubKey)
  return _internal_pubkey();
}
inline void KeyDescriptor::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.KeyDescriptor.pubKey)
}
inline std::string* KeyDescriptor::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.KeyDescriptor.pubKey)
  return _internal_mutable_pubkey();
}
inline const std::string& KeyDescriptor::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void KeyDescriptor::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyDescriptor::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.KeyDescriptor.pubKey)
}
inline void KeyDescriptor::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.KeyDescriptor.pubKey)
}
inline void KeyDescriptor::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.KeyDescriptor.pubKey)
}
inline std::string* KeyDescriptor::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyDescriptor::release_pubkey() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.KeyDescriptor.pubKey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyDescriptor::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.KeyDescriptor.pubKey)
}

// .lightwalletrpc.KeyLocator locator = 2;
inline bool KeyDescriptor::_internal_has_locator() const {
  return this != internal_default_instance() && locator_ != nullptr;
}
inline bool KeyDescriptor::has_locator() const {
  return _internal_has_locator();
}
inline void KeyDescriptor::clear_locator() {
  if (GetArenaNoVirtual() == nullptr && locator_ != nullptr) {
    delete locator_;
  }
  locator_ = nullptr;
}
inline const ::lightwalletrpc::KeyLocator& KeyDescriptor::_internal_locator() const {
  const ::lightwalletrpc::KeyLocator* p = locator_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lightwalletrpc::KeyLocator*>(
      &::lightwalletrpc::_KeyLocator_default_instance_);
}
inline const ::lightwalletrpc::KeyLocator& KeyDescriptor::locator() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.KeyDescriptor.locator)
  return _internal_locator();
}
inline ::lightwalletrpc::KeyLocator* KeyDescriptor::release_locator() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.KeyDescriptor.locator)
  
  ::lightwalletrpc::KeyLocator* temp = locator_;
  locator_ = nullptr;
  return temp;
}
inline ::lightwalletrpc::KeyLocator* KeyDescriptor::_internal_mutable_locator() {
  
  if (locator_ == nullptr) {
    auto* p = CreateMaybeMessage<::lightwalletrpc::KeyLocator>(GetArenaNoVirtual());
    locator_ = p;
  }
  return locator_;
}
inline ::lightwalletrpc::KeyLocator* KeyDescriptor::mutable_locator() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.KeyDescriptor.locator)
  return _internal_mutable_locator();
}
inline void KeyDescriptor::set_allocated_locator(::lightwalletrpc::KeyLocator* locator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete locator_;
  }
  if (locator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      locator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, locator, submessage_arena);
    }
    
  } else {
    
  }
  locator_ = locator;
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.KeyDescriptor.locator)
}

// -------------------------------------------------------------------

// DeriveNextKeyReq

// uint32 keyFamily = 1;
inline void DeriveNextKeyReq::clear_keyfamily() {
  keyfamily_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeriveNextKeyReq::_internal_keyfamily() const {
  return keyfamily_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeriveNextKeyReq::keyfamily() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.DeriveNextKeyReq.keyFamily)
  return _internal_keyfamily();
}
inline void DeriveNextKeyReq::_internal_set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  keyfamily_ = value;
}
inline void DeriveNextKeyReq::set_keyfamily(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_keyfamily(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.DeriveNextKeyReq.keyFamily)
}

// -------------------------------------------------------------------

// IsOurAddressResponse

// bool isOur = 1;
inline void IsOurAddressResponse::clear_isour() {
  isour_ = false;
}
inline bool IsOurAddressResponse::_internal_isour() const {
  return isour_;
}
inline bool IsOurAddressResponse::isour() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.IsOurAddressResponse.isOur)
  return _internal_isour();
}
inline void IsOurAddressResponse::_internal_set_isour(bool value) {
  
  isour_ = value;
}
inline void IsOurAddressResponse::set_isour(bool value) {
  _internal_set_isour(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.IsOurAddressResponse.isOur)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lightwalletrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_KeychainService_2eproto
