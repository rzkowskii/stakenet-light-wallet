// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[185]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
namespace lnrpc {
class AMP;
class AMPDefaultTypeInternal;
extern AMPDefaultTypeInternal _AMP_default_instance_;
class AbandonChannelRequest;
class AbandonChannelRequestDefaultTypeInternal;
extern AbandonChannelRequestDefaultTypeInternal _AbandonChannelRequest_default_instance_;
class AbandonChannelResponse;
class AbandonChannelResponseDefaultTypeInternal;
extern AbandonChannelResponseDefaultTypeInternal _AbandonChannelResponse_default_instance_;
class AddInvoiceResponse;
class AddInvoiceResponseDefaultTypeInternal;
extern AddInvoiceResponseDefaultTypeInternal _AddInvoiceResponse_default_instance_;
class Amount;
class AmountDefaultTypeInternal;
extern AmountDefaultTypeInternal _Amount_default_instance_;
class BakeMacaroonRequest;
class BakeMacaroonRequestDefaultTypeInternal;
extern BakeMacaroonRequestDefaultTypeInternal _BakeMacaroonRequest_default_instance_;
class BakeMacaroonResponse;
class BakeMacaroonResponseDefaultTypeInternal;
extern BakeMacaroonResponseDefaultTypeInternal _BakeMacaroonResponse_default_instance_;
class Chain;
class ChainDefaultTypeInternal;
extern ChainDefaultTypeInternal _Chain_default_instance_;
class ChanBackupExportRequest;
class ChanBackupExportRequestDefaultTypeInternal;
extern ChanBackupExportRequestDefaultTypeInternal _ChanBackupExportRequest_default_instance_;
class ChanBackupSnapshot;
class ChanBackupSnapshotDefaultTypeInternal;
extern ChanBackupSnapshotDefaultTypeInternal _ChanBackupSnapshot_default_instance_;
class ChanInfoRequest;
class ChanInfoRequestDefaultTypeInternal;
extern ChanInfoRequestDefaultTypeInternal _ChanInfoRequest_default_instance_;
class ChanPointShim;
class ChanPointShimDefaultTypeInternal;
extern ChanPointShimDefaultTypeInternal _ChanPointShim_default_instance_;
class Channel;
class ChannelDefaultTypeInternal;
extern ChannelDefaultTypeInternal _Channel_default_instance_;
class ChannelAcceptRequest;
class ChannelAcceptRequestDefaultTypeInternal;
extern ChannelAcceptRequestDefaultTypeInternal _ChannelAcceptRequest_default_instance_;
class ChannelAcceptResponse;
class ChannelAcceptResponseDefaultTypeInternal;
extern ChannelAcceptResponseDefaultTypeInternal _ChannelAcceptResponse_default_instance_;
class ChannelBackup;
class ChannelBackupDefaultTypeInternal;
extern ChannelBackupDefaultTypeInternal _ChannelBackup_default_instance_;
class ChannelBackupSubscription;
class ChannelBackupSubscriptionDefaultTypeInternal;
extern ChannelBackupSubscriptionDefaultTypeInternal _ChannelBackupSubscription_default_instance_;
class ChannelBackups;
class ChannelBackupsDefaultTypeInternal;
extern ChannelBackupsDefaultTypeInternal _ChannelBackups_default_instance_;
class ChannelBalanceRequest;
class ChannelBalanceRequestDefaultTypeInternal;
extern ChannelBalanceRequestDefaultTypeInternal _ChannelBalanceRequest_default_instance_;
class ChannelBalanceResponse;
class ChannelBalanceResponseDefaultTypeInternal;
extern ChannelBalanceResponseDefaultTypeInternal _ChannelBalanceResponse_default_instance_;
class ChannelCloseSummary;
class ChannelCloseSummaryDefaultTypeInternal;
extern ChannelCloseSummaryDefaultTypeInternal _ChannelCloseSummary_default_instance_;
class ChannelCloseUpdate;
class ChannelCloseUpdateDefaultTypeInternal;
extern ChannelCloseUpdateDefaultTypeInternal _ChannelCloseUpdate_default_instance_;
class ChannelConstraints;
class ChannelConstraintsDefaultTypeInternal;
extern ChannelConstraintsDefaultTypeInternal _ChannelConstraints_default_instance_;
class ChannelEdge;
class ChannelEdgeDefaultTypeInternal;
extern ChannelEdgeDefaultTypeInternal _ChannelEdge_default_instance_;
class ChannelEdgeUpdate;
class ChannelEdgeUpdateDefaultTypeInternal;
extern ChannelEdgeUpdateDefaultTypeInternal _ChannelEdgeUpdate_default_instance_;
class ChannelEventSubscription;
class ChannelEventSubscriptionDefaultTypeInternal;
extern ChannelEventSubscriptionDefaultTypeInternal _ChannelEventSubscription_default_instance_;
class ChannelEventUpdate;
class ChannelEventUpdateDefaultTypeInternal;
extern ChannelEventUpdateDefaultTypeInternal _ChannelEventUpdate_default_instance_;
class ChannelFeeReport;
class ChannelFeeReportDefaultTypeInternal;
extern ChannelFeeReportDefaultTypeInternal _ChannelFeeReport_default_instance_;
class ChannelGraph;
class ChannelGraphDefaultTypeInternal;
extern ChannelGraphDefaultTypeInternal _ChannelGraph_default_instance_;
class ChannelGraphRequest;
class ChannelGraphRequestDefaultTypeInternal;
extern ChannelGraphRequestDefaultTypeInternal _ChannelGraphRequest_default_instance_;
class ChannelOpenUpdate;
class ChannelOpenUpdateDefaultTypeInternal;
extern ChannelOpenUpdateDefaultTypeInternal _ChannelOpenUpdate_default_instance_;
class ChannelPoint;
class ChannelPointDefaultTypeInternal;
extern ChannelPointDefaultTypeInternal _ChannelPoint_default_instance_;
class ChannelUpdate;
class ChannelUpdateDefaultTypeInternal;
extern ChannelUpdateDefaultTypeInternal _ChannelUpdate_default_instance_;
class CloseChannelRequest;
class CloseChannelRequestDefaultTypeInternal;
extern CloseChannelRequestDefaultTypeInternal _CloseChannelRequest_default_instance_;
class CloseStatusUpdate;
class CloseStatusUpdateDefaultTypeInternal;
extern CloseStatusUpdateDefaultTypeInternal _CloseStatusUpdate_default_instance_;
class ClosedChannelUpdate;
class ClosedChannelUpdateDefaultTypeInternal;
extern ClosedChannelUpdateDefaultTypeInternal _ClosedChannelUpdate_default_instance_;
class ClosedChannelsRequest;
class ClosedChannelsRequestDefaultTypeInternal;
extern ClosedChannelsRequestDefaultTypeInternal _ClosedChannelsRequest_default_instance_;
class ClosedChannelsResponse;
class ClosedChannelsResponseDefaultTypeInternal;
extern ClosedChannelsResponseDefaultTypeInternal _ClosedChannelsResponse_default_instance_;
class ConfirmationUpdate;
class ConfirmationUpdateDefaultTypeInternal;
extern ConfirmationUpdateDefaultTypeInternal _ConfirmationUpdate_default_instance_;
class ConnectPeerRequest;
class ConnectPeerRequestDefaultTypeInternal;
extern ConnectPeerRequestDefaultTypeInternal _ConnectPeerRequest_default_instance_;
class ConnectPeerResponse;
class ConnectPeerResponseDefaultTypeInternal;
extern ConnectPeerResponseDefaultTypeInternal _ConnectPeerResponse_default_instance_;
class DebugLevelRequest;
class DebugLevelRequestDefaultTypeInternal;
extern DebugLevelRequestDefaultTypeInternal _DebugLevelRequest_default_instance_;
class DebugLevelResponse;
class DebugLevelResponseDefaultTypeInternal;
extern DebugLevelResponseDefaultTypeInternal _DebugLevelResponse_default_instance_;
class DeleteAllPaymentsRequest;
class DeleteAllPaymentsRequestDefaultTypeInternal;
extern DeleteAllPaymentsRequestDefaultTypeInternal _DeleteAllPaymentsRequest_default_instance_;
class DeleteAllPaymentsResponse;
class DeleteAllPaymentsResponseDefaultTypeInternal;
extern DeleteAllPaymentsResponseDefaultTypeInternal _DeleteAllPaymentsResponse_default_instance_;
class DeleteMacaroonIDRequest;
class DeleteMacaroonIDRequestDefaultTypeInternal;
extern DeleteMacaroonIDRequestDefaultTypeInternal _DeleteMacaroonIDRequest_default_instance_;
class DeleteMacaroonIDResponse;
class DeleteMacaroonIDResponseDefaultTypeInternal;
extern DeleteMacaroonIDResponseDefaultTypeInternal _DeleteMacaroonIDResponse_default_instance_;
class DisconnectPeerRequest;
class DisconnectPeerRequestDefaultTypeInternal;
extern DisconnectPeerRequestDefaultTypeInternal _DisconnectPeerRequest_default_instance_;
class DisconnectPeerResponse;
class DisconnectPeerResponseDefaultTypeInternal;
extern DisconnectPeerResponseDefaultTypeInternal _DisconnectPeerResponse_default_instance_;
class EdgeLocator;
class EdgeLocatorDefaultTypeInternal;
extern EdgeLocatorDefaultTypeInternal _EdgeLocator_default_instance_;
class EstimateFeeRequest;
class EstimateFeeRequestDefaultTypeInternal;
extern EstimateFeeRequestDefaultTypeInternal _EstimateFeeRequest_default_instance_;
class EstimateFeeRequest_AddrToAmountEntry_DoNotUse;
class EstimateFeeRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal;
extern EstimateFeeRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal _EstimateFeeRequest_AddrToAmountEntry_DoNotUse_default_instance_;
class EstimateFeeResponse;
class EstimateFeeResponseDefaultTypeInternal;
extern EstimateFeeResponseDefaultTypeInternal _EstimateFeeResponse_default_instance_;
class ExportChannelBackupRequest;
class ExportChannelBackupRequestDefaultTypeInternal;
extern ExportChannelBackupRequestDefaultTypeInternal _ExportChannelBackupRequest_default_instance_;
class Failure;
class FailureDefaultTypeInternal;
extern FailureDefaultTypeInternal _Failure_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FeeLimit;
class FeeLimitDefaultTypeInternal;
extern FeeLimitDefaultTypeInternal _FeeLimit_default_instance_;
class FeeReportRequest;
class FeeReportRequestDefaultTypeInternal;
extern FeeReportRequestDefaultTypeInternal _FeeReportRequest_default_instance_;
class FeeReportResponse;
class FeeReportResponseDefaultTypeInternal;
extern FeeReportResponseDefaultTypeInternal _FeeReportResponse_default_instance_;
class FloatMetric;
class FloatMetricDefaultTypeInternal;
extern FloatMetricDefaultTypeInternal _FloatMetric_default_instance_;
class ForwardingEvent;
class ForwardingEventDefaultTypeInternal;
extern ForwardingEventDefaultTypeInternal _ForwardingEvent_default_instance_;
class ForwardingHistoryRequest;
class ForwardingHistoryRequestDefaultTypeInternal;
extern ForwardingHistoryRequestDefaultTypeInternal _ForwardingHistoryRequest_default_instance_;
class ForwardingHistoryResponse;
class ForwardingHistoryResponseDefaultTypeInternal;
extern ForwardingHistoryResponseDefaultTypeInternal _ForwardingHistoryResponse_default_instance_;
class FundingPsbtFinalize;
class FundingPsbtFinalizeDefaultTypeInternal;
extern FundingPsbtFinalizeDefaultTypeInternal _FundingPsbtFinalize_default_instance_;
class FundingPsbtVerify;
class FundingPsbtVerifyDefaultTypeInternal;
extern FundingPsbtVerifyDefaultTypeInternal _FundingPsbtVerify_default_instance_;
class FundingShim;
class FundingShimDefaultTypeInternal;
extern FundingShimDefaultTypeInternal _FundingShim_default_instance_;
class FundingShimCancel;
class FundingShimCancelDefaultTypeInternal;
extern FundingShimCancelDefaultTypeInternal _FundingShimCancel_default_instance_;
class FundingStateStepResp;
class FundingStateStepRespDefaultTypeInternal;
extern FundingStateStepRespDefaultTypeInternal _FundingStateStepResp_default_instance_;
class FundingTransitionMsg;
class FundingTransitionMsgDefaultTypeInternal;
extern FundingTransitionMsgDefaultTypeInternal _FundingTransitionMsg_default_instance_;
class GetInfoRequest;
class GetInfoRequestDefaultTypeInternal;
extern GetInfoRequestDefaultTypeInternal _GetInfoRequest_default_instance_;
class GetInfoResponse;
class GetInfoResponseDefaultTypeInternal;
extern GetInfoResponseDefaultTypeInternal _GetInfoResponse_default_instance_;
class GetInfoResponse_FeaturesEntry_DoNotUse;
class GetInfoResponse_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern GetInfoResponse_FeaturesEntry_DoNotUseDefaultTypeInternal _GetInfoResponse_FeaturesEntry_DoNotUse_default_instance_;
class GetRecoveryInfoRequest;
class GetRecoveryInfoRequestDefaultTypeInternal;
extern GetRecoveryInfoRequestDefaultTypeInternal _GetRecoveryInfoRequest_default_instance_;
class GetRecoveryInfoResponse;
class GetRecoveryInfoResponseDefaultTypeInternal;
extern GetRecoveryInfoResponseDefaultTypeInternal _GetRecoveryInfoResponse_default_instance_;
class GetTransactionsRequest;
class GetTransactionsRequestDefaultTypeInternal;
extern GetTransactionsRequestDefaultTypeInternal _GetTransactionsRequest_default_instance_;
class GraphTopologySubscription;
class GraphTopologySubscriptionDefaultTypeInternal;
extern GraphTopologySubscriptionDefaultTypeInternal _GraphTopologySubscription_default_instance_;
class GraphTopologyUpdate;
class GraphTopologyUpdateDefaultTypeInternal;
extern GraphTopologyUpdateDefaultTypeInternal _GraphTopologyUpdate_default_instance_;
class HTLC;
class HTLCDefaultTypeInternal;
extern HTLCDefaultTypeInternal _HTLC_default_instance_;
class HTLCAttempt;
class HTLCAttemptDefaultTypeInternal;
extern HTLCAttemptDefaultTypeInternal _HTLCAttempt_default_instance_;
class Hop;
class HopDefaultTypeInternal;
extern HopDefaultTypeInternal _Hop_default_instance_;
class HopHint;
class HopHintDefaultTypeInternal;
extern HopHintDefaultTypeInternal _HopHint_default_instance_;
class Hop_CustomRecordsEntry_DoNotUse;
class Hop_CustomRecordsEntry_DoNotUseDefaultTypeInternal;
extern Hop_CustomRecordsEntry_DoNotUseDefaultTypeInternal _Hop_CustomRecordsEntry_DoNotUse_default_instance_;
class Invoice;
class InvoiceDefaultTypeInternal;
extern InvoiceDefaultTypeInternal _Invoice_default_instance_;
class InvoiceHTLC;
class InvoiceHTLCDefaultTypeInternal;
extern InvoiceHTLCDefaultTypeInternal _InvoiceHTLC_default_instance_;
class InvoiceHTLC_CustomRecordsEntry_DoNotUse;
class InvoiceHTLC_CustomRecordsEntry_DoNotUseDefaultTypeInternal;
extern InvoiceHTLC_CustomRecordsEntry_DoNotUseDefaultTypeInternal _InvoiceHTLC_CustomRecordsEntry_DoNotUse_default_instance_;
class InvoiceSubscription;
class InvoiceSubscriptionDefaultTypeInternal;
extern InvoiceSubscriptionDefaultTypeInternal _InvoiceSubscription_default_instance_;
class Invoice_FeaturesEntry_DoNotUse;
class Invoice_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern Invoice_FeaturesEntry_DoNotUseDefaultTypeInternal _Invoice_FeaturesEntry_DoNotUse_default_instance_;
class KeyDescriptor;
class KeyDescriptorDefaultTypeInternal;
extern KeyDescriptorDefaultTypeInternal _KeyDescriptor_default_instance_;
class KeyLocator;
class KeyLocatorDefaultTypeInternal;
extern KeyLocatorDefaultTypeInternal _KeyLocator_default_instance_;
class LightningAddress;
class LightningAddressDefaultTypeInternal;
extern LightningAddressDefaultTypeInternal _LightningAddress_default_instance_;
class LightningNode;
class LightningNodeDefaultTypeInternal;
extern LightningNodeDefaultTypeInternal _LightningNode_default_instance_;
class LightningNode_FeaturesEntry_DoNotUse;
class LightningNode_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern LightningNode_FeaturesEntry_DoNotUseDefaultTypeInternal _LightningNode_FeaturesEntry_DoNotUse_default_instance_;
class ListChannelsRequest;
class ListChannelsRequestDefaultTypeInternal;
extern ListChannelsRequestDefaultTypeInternal _ListChannelsRequest_default_instance_;
class ListChannelsResponse;
class ListChannelsResponseDefaultTypeInternal;
extern ListChannelsResponseDefaultTypeInternal _ListChannelsResponse_default_instance_;
class ListInvoiceRequest;
class ListInvoiceRequestDefaultTypeInternal;
extern ListInvoiceRequestDefaultTypeInternal _ListInvoiceRequest_default_instance_;
class ListInvoiceResponse;
class ListInvoiceResponseDefaultTypeInternal;
extern ListInvoiceResponseDefaultTypeInternal _ListInvoiceResponse_default_instance_;
class ListMacaroonIDsRequest;
class ListMacaroonIDsRequestDefaultTypeInternal;
extern ListMacaroonIDsRequestDefaultTypeInternal _ListMacaroonIDsRequest_default_instance_;
class ListMacaroonIDsResponse;
class ListMacaroonIDsResponseDefaultTypeInternal;
extern ListMacaroonIDsResponseDefaultTypeInternal _ListMacaroonIDsResponse_default_instance_;
class ListPaymentsRequest;
class ListPaymentsRequestDefaultTypeInternal;
extern ListPaymentsRequestDefaultTypeInternal _ListPaymentsRequest_default_instance_;
class ListPaymentsResponse;
class ListPaymentsResponseDefaultTypeInternal;
extern ListPaymentsResponseDefaultTypeInternal _ListPaymentsResponse_default_instance_;
class ListPeersRequest;
class ListPeersRequestDefaultTypeInternal;
extern ListPeersRequestDefaultTypeInternal _ListPeersRequest_default_instance_;
class ListPeersResponse;
class ListPeersResponseDefaultTypeInternal;
extern ListPeersResponseDefaultTypeInternal _ListPeersResponse_default_instance_;
class ListPermissionsRequest;
class ListPermissionsRequestDefaultTypeInternal;
extern ListPermissionsRequestDefaultTypeInternal _ListPermissionsRequest_default_instance_;
class ListPermissionsResponse;
class ListPermissionsResponseDefaultTypeInternal;
extern ListPermissionsResponseDefaultTypeInternal _ListPermissionsResponse_default_instance_;
class ListPermissionsResponse_MethodPermissionsEntry_DoNotUse;
class ListPermissionsResponse_MethodPermissionsEntry_DoNotUseDefaultTypeInternal;
extern ListPermissionsResponse_MethodPermissionsEntry_DoNotUseDefaultTypeInternal _ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_default_instance_;
class ListUnspentRequest;
class ListUnspentRequestDefaultTypeInternal;
extern ListUnspentRequestDefaultTypeInternal _ListUnspentRequest_default_instance_;
class ListUnspentResponse;
class ListUnspentResponseDefaultTypeInternal;
extern ListUnspentResponseDefaultTypeInternal _ListUnspentResponse_default_instance_;
class MPPRecord;
class MPPRecordDefaultTypeInternal;
extern MPPRecordDefaultTypeInternal _MPPRecord_default_instance_;
class MacaroonId;
class MacaroonIdDefaultTypeInternal;
extern MacaroonIdDefaultTypeInternal _MacaroonId_default_instance_;
class MacaroonPermission;
class MacaroonPermissionDefaultTypeInternal;
extern MacaroonPermissionDefaultTypeInternal _MacaroonPermission_default_instance_;
class MacaroonPermissionList;
class MacaroonPermissionListDefaultTypeInternal;
extern MacaroonPermissionListDefaultTypeInternal _MacaroonPermissionList_default_instance_;
class MultiChanBackup;
class MultiChanBackupDefaultTypeInternal;
extern MultiChanBackupDefaultTypeInternal _MultiChanBackup_default_instance_;
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
class NetworkInfoRequest;
class NetworkInfoRequestDefaultTypeInternal;
extern NetworkInfoRequestDefaultTypeInternal _NetworkInfoRequest_default_instance_;
class NewAddressRequest;
class NewAddressRequestDefaultTypeInternal;
extern NewAddressRequestDefaultTypeInternal _NewAddressRequest_default_instance_;
class NewAddressResponse;
class NewAddressResponseDefaultTypeInternal;
extern NewAddressResponseDefaultTypeInternal _NewAddressResponse_default_instance_;
class NodeAddress;
class NodeAddressDefaultTypeInternal;
extern NodeAddressDefaultTypeInternal _NodeAddress_default_instance_;
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfoRequest;
class NodeInfoRequestDefaultTypeInternal;
extern NodeInfoRequestDefaultTypeInternal _NodeInfoRequest_default_instance_;
class NodeMetricsRequest;
class NodeMetricsRequestDefaultTypeInternal;
extern NodeMetricsRequestDefaultTypeInternal _NodeMetricsRequest_default_instance_;
class NodeMetricsResponse;
class NodeMetricsResponseDefaultTypeInternal;
extern NodeMetricsResponseDefaultTypeInternal _NodeMetricsResponse_default_instance_;
class NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse;
class NodeMetricsResponse_BetweennessCentralityEntry_DoNotUseDefaultTypeInternal;
extern NodeMetricsResponse_BetweennessCentralityEntry_DoNotUseDefaultTypeInternal _NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_default_instance_;
class NodePair;
class NodePairDefaultTypeInternal;
extern NodePairDefaultTypeInternal _NodePair_default_instance_;
class NodeUpdate;
class NodeUpdateDefaultTypeInternal;
extern NodeUpdateDefaultTypeInternal _NodeUpdate_default_instance_;
class NodeUpdate_FeaturesEntry_DoNotUse;
class NodeUpdate_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern NodeUpdate_FeaturesEntry_DoNotUseDefaultTypeInternal _NodeUpdate_FeaturesEntry_DoNotUse_default_instance_;
class Op;
class OpDefaultTypeInternal;
extern OpDefaultTypeInternal _Op_default_instance_;
class OpenChannelRequest;
class OpenChannelRequestDefaultTypeInternal;
extern OpenChannelRequestDefaultTypeInternal _OpenChannelRequest_default_instance_;
class OpenStatusUpdate;
class OpenStatusUpdateDefaultTypeInternal;
extern OpenStatusUpdateDefaultTypeInternal _OpenStatusUpdate_default_instance_;
class OutPoint;
class OutPointDefaultTypeInternal;
extern OutPointDefaultTypeInternal _OutPoint_default_instance_;
class PayReq;
class PayReqDefaultTypeInternal;
extern PayReqDefaultTypeInternal _PayReq_default_instance_;
class PayReqString;
class PayReqStringDefaultTypeInternal;
extern PayReqStringDefaultTypeInternal _PayReqString_default_instance_;
class PayReq_FeaturesEntry_DoNotUse;
class PayReq_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern PayReq_FeaturesEntry_DoNotUseDefaultTypeInternal _PayReq_FeaturesEntry_DoNotUse_default_instance_;
class Payment;
class PaymentDefaultTypeInternal;
extern PaymentDefaultTypeInternal _Payment_default_instance_;
class PaymentHash;
class PaymentHashDefaultTypeInternal;
extern PaymentHashDefaultTypeInternal _PaymentHash_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class PeerEvent;
class PeerEventDefaultTypeInternal;
extern PeerEventDefaultTypeInternal _PeerEvent_default_instance_;
class PeerEventSubscription;
class PeerEventSubscriptionDefaultTypeInternal;
extern PeerEventSubscriptionDefaultTypeInternal _PeerEventSubscription_default_instance_;
class Peer_FeaturesEntry_DoNotUse;
class Peer_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern Peer_FeaturesEntry_DoNotUseDefaultTypeInternal _Peer_FeaturesEntry_DoNotUse_default_instance_;
class PendingChannelsRequest;
class PendingChannelsRequestDefaultTypeInternal;
extern PendingChannelsRequestDefaultTypeInternal _PendingChannelsRequest_default_instance_;
class PendingChannelsResponse;
class PendingChannelsResponseDefaultTypeInternal;
extern PendingChannelsResponseDefaultTypeInternal _PendingChannelsResponse_default_instance_;
class PendingChannelsResponse_ClosedChannel;
class PendingChannelsResponse_ClosedChannelDefaultTypeInternal;
extern PendingChannelsResponse_ClosedChannelDefaultTypeInternal _PendingChannelsResponse_ClosedChannel_default_instance_;
class PendingChannelsResponse_Commitments;
class PendingChannelsResponse_CommitmentsDefaultTypeInternal;
extern PendingChannelsResponse_CommitmentsDefaultTypeInternal _PendingChannelsResponse_Commitments_default_instance_;
class PendingChannelsResponse_ForceClosedChannel;
class PendingChannelsResponse_ForceClosedChannelDefaultTypeInternal;
extern PendingChannelsResponse_ForceClosedChannelDefaultTypeInternal _PendingChannelsResponse_ForceClosedChannel_default_instance_;
class PendingChannelsResponse_PendingChannel;
class PendingChannelsResponse_PendingChannelDefaultTypeInternal;
extern PendingChannelsResponse_PendingChannelDefaultTypeInternal _PendingChannelsResponse_PendingChannel_default_instance_;
class PendingChannelsResponse_PendingOpenChannel;
class PendingChannelsResponse_PendingOpenChannelDefaultTypeInternal;
extern PendingChannelsResponse_PendingOpenChannelDefaultTypeInternal _PendingChannelsResponse_PendingOpenChannel_default_instance_;
class PendingChannelsResponse_WaitingCloseChannel;
class PendingChannelsResponse_WaitingCloseChannelDefaultTypeInternal;
extern PendingChannelsResponse_WaitingCloseChannelDefaultTypeInternal _PendingChannelsResponse_WaitingCloseChannel_default_instance_;
class PendingHTLC;
class PendingHTLCDefaultTypeInternal;
extern PendingHTLCDefaultTypeInternal _PendingHTLC_default_instance_;
class PendingUpdate;
class PendingUpdateDefaultTypeInternal;
extern PendingUpdateDefaultTypeInternal _PendingUpdate_default_instance_;
class PolicyUpdateRequest;
class PolicyUpdateRequestDefaultTypeInternal;
extern PolicyUpdateRequestDefaultTypeInternal _PolicyUpdateRequest_default_instance_;
class PolicyUpdateResponse;
class PolicyUpdateResponseDefaultTypeInternal;
extern PolicyUpdateResponseDefaultTypeInternal _PolicyUpdateResponse_default_instance_;
class PsbtShim;
class PsbtShimDefaultTypeInternal;
extern PsbtShimDefaultTypeInternal _PsbtShim_default_instance_;
class QueryRoutesRequest;
class QueryRoutesRequestDefaultTypeInternal;
extern QueryRoutesRequestDefaultTypeInternal _QueryRoutesRequest_default_instance_;
class QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse;
class QueryRoutesRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal;
extern QueryRoutesRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal _QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class QueryRoutesResponse;
class QueryRoutesResponseDefaultTypeInternal;
extern QueryRoutesResponseDefaultTypeInternal _QueryRoutesResponse_default_instance_;
class ReadyForPsbtFunding;
class ReadyForPsbtFundingDefaultTypeInternal;
extern ReadyForPsbtFundingDefaultTypeInternal _ReadyForPsbtFunding_default_instance_;
class Resolution;
class ResolutionDefaultTypeInternal;
extern ResolutionDefaultTypeInternal _Resolution_default_instance_;
class RestoreBackupResponse;
class RestoreBackupResponseDefaultTypeInternal;
extern RestoreBackupResponseDefaultTypeInternal _RestoreBackupResponse_default_instance_;
class RestoreChanBackupRequest;
class RestoreChanBackupRequestDefaultTypeInternal;
extern RestoreChanBackupRequestDefaultTypeInternal _RestoreChanBackupRequest_default_instance_;
class Route;
class RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class RouteHint;
class RouteHintDefaultTypeInternal;
extern RouteHintDefaultTypeInternal _RouteHint_default_instance_;
class RoutingPolicy;
class RoutingPolicyDefaultTypeInternal;
extern RoutingPolicyDefaultTypeInternal _RoutingPolicy_default_instance_;
class SendCoinsRequest;
class SendCoinsRequestDefaultTypeInternal;
extern SendCoinsRequestDefaultTypeInternal _SendCoinsRequest_default_instance_;
class SendCoinsResponse;
class SendCoinsResponseDefaultTypeInternal;
extern SendCoinsResponseDefaultTypeInternal _SendCoinsResponse_default_instance_;
class SendManyRequest;
class SendManyRequestDefaultTypeInternal;
extern SendManyRequestDefaultTypeInternal _SendManyRequest_default_instance_;
class SendManyRequest_AddrToAmountEntry_DoNotUse;
class SendManyRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal;
extern SendManyRequest_AddrToAmountEntry_DoNotUseDefaultTypeInternal _SendManyRequest_AddrToAmountEntry_DoNotUse_default_instance_;
class SendManyResponse;
class SendManyResponseDefaultTypeInternal;
extern SendManyResponseDefaultTypeInternal _SendManyResponse_default_instance_;
class SendRequest;
class SendRequestDefaultTypeInternal;
extern SendRequestDefaultTypeInternal _SendRequest_default_instance_;
class SendRequest_DestCustomRecordsEntry_DoNotUse;
class SendRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal;
extern SendRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal _SendRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class SendResponse;
class SendResponseDefaultTypeInternal;
extern SendResponseDefaultTypeInternal _SendResponse_default_instance_;
class SendToRouteRequest;
class SendToRouteRequestDefaultTypeInternal;
extern SendToRouteRequestDefaultTypeInternal _SendToRouteRequest_default_instance_;
class SignMessageRequest;
class SignMessageRequestDefaultTypeInternal;
extern SignMessageRequestDefaultTypeInternal _SignMessageRequest_default_instance_;
class SignMessageResponse;
class SignMessageResponseDefaultTypeInternal;
extern SignMessageResponseDefaultTypeInternal _SignMessageResponse_default_instance_;
class StopRequest;
class StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
class StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
class TimestampedError;
class TimestampedErrorDefaultTypeInternal;
extern TimestampedErrorDefaultTypeInternal _TimestampedError_default_instance_;
class Transaction;
class TransactionDefaultTypeInternal;
extern TransactionDefaultTypeInternal _Transaction_default_instance_;
class TransactionDetails;
class TransactionDetailsDefaultTypeInternal;
extern TransactionDetailsDefaultTypeInternal _TransactionDetails_default_instance_;
class Utxo;
class UtxoDefaultTypeInternal;
extern UtxoDefaultTypeInternal _Utxo_default_instance_;
class VerifyChanBackupResponse;
class VerifyChanBackupResponseDefaultTypeInternal;
extern VerifyChanBackupResponseDefaultTypeInternal _VerifyChanBackupResponse_default_instance_;
class VerifyMessageRequest;
class VerifyMessageRequestDefaultTypeInternal;
extern VerifyMessageRequestDefaultTypeInternal _VerifyMessageRequest_default_instance_;
class VerifyMessageResponse;
class VerifyMessageResponseDefaultTypeInternal;
extern VerifyMessageResponseDefaultTypeInternal _VerifyMessageResponse_default_instance_;
class WalletAccountBalance;
class WalletAccountBalanceDefaultTypeInternal;
extern WalletAccountBalanceDefaultTypeInternal _WalletAccountBalance_default_instance_;
class WalletBalanceRequest;
class WalletBalanceRequestDefaultTypeInternal;
extern WalletBalanceRequestDefaultTypeInternal _WalletBalanceRequest_default_instance_;
class WalletBalanceResponse;
class WalletBalanceResponseDefaultTypeInternal;
extern WalletBalanceResponseDefaultTypeInternal _WalletBalanceResponse_default_instance_;
class WalletBalanceResponse_AccountBalanceEntry_DoNotUse;
class WalletBalanceResponse_AccountBalanceEntry_DoNotUseDefaultTypeInternal;
extern WalletBalanceResponse_AccountBalanceEntry_DoNotUseDefaultTypeInternal _WalletBalanceResponse_AccountBalanceEntry_DoNotUse_default_instance_;
}  // namespace lnrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::lnrpc::AMP* Arena::CreateMaybeMessage<::lnrpc::AMP>(Arena*);
template<> ::lnrpc::AbandonChannelRequest* Arena::CreateMaybeMessage<::lnrpc::AbandonChannelRequest>(Arena*);
template<> ::lnrpc::AbandonChannelResponse* Arena::CreateMaybeMessage<::lnrpc::AbandonChannelResponse>(Arena*);
template<> ::lnrpc::AddInvoiceResponse* Arena::CreateMaybeMessage<::lnrpc::AddInvoiceResponse>(Arena*);
template<> ::lnrpc::Amount* Arena::CreateMaybeMessage<::lnrpc::Amount>(Arena*);
template<> ::lnrpc::BakeMacaroonRequest* Arena::CreateMaybeMessage<::lnrpc::BakeMacaroonRequest>(Arena*);
template<> ::lnrpc::BakeMacaroonResponse* Arena::CreateMaybeMessage<::lnrpc::BakeMacaroonResponse>(Arena*);
template<> ::lnrpc::Chain* Arena::CreateMaybeMessage<::lnrpc::Chain>(Arena*);
template<> ::lnrpc::ChanBackupExportRequest* Arena::CreateMaybeMessage<::lnrpc::ChanBackupExportRequest>(Arena*);
template<> ::lnrpc::ChanBackupSnapshot* Arena::CreateMaybeMessage<::lnrpc::ChanBackupSnapshot>(Arena*);
template<> ::lnrpc::ChanInfoRequest* Arena::CreateMaybeMessage<::lnrpc::ChanInfoRequest>(Arena*);
template<> ::lnrpc::ChanPointShim* Arena::CreateMaybeMessage<::lnrpc::ChanPointShim>(Arena*);
template<> ::lnrpc::Channel* Arena::CreateMaybeMessage<::lnrpc::Channel>(Arena*);
template<> ::lnrpc::ChannelAcceptRequest* Arena::CreateMaybeMessage<::lnrpc::ChannelAcceptRequest>(Arena*);
template<> ::lnrpc::ChannelAcceptResponse* Arena::CreateMaybeMessage<::lnrpc::ChannelAcceptResponse>(Arena*);
template<> ::lnrpc::ChannelBackup* Arena::CreateMaybeMessage<::lnrpc::ChannelBackup>(Arena*);
template<> ::lnrpc::ChannelBackupSubscription* Arena::CreateMaybeMessage<::lnrpc::ChannelBackupSubscription>(Arena*);
template<> ::lnrpc::ChannelBackups* Arena::CreateMaybeMessage<::lnrpc::ChannelBackups>(Arena*);
template<> ::lnrpc::ChannelBalanceRequest* Arena::CreateMaybeMessage<::lnrpc::ChannelBalanceRequest>(Arena*);
template<> ::lnrpc::ChannelBalanceResponse* Arena::CreateMaybeMessage<::lnrpc::ChannelBalanceResponse>(Arena*);
template<> ::lnrpc::ChannelCloseSummary* Arena::CreateMaybeMessage<::lnrpc::ChannelCloseSummary>(Arena*);
template<> ::lnrpc::ChannelCloseUpdate* Arena::CreateMaybeMessage<::lnrpc::ChannelCloseUpdate>(Arena*);
template<> ::lnrpc::ChannelConstraints* Arena::CreateMaybeMessage<::lnrpc::ChannelConstraints>(Arena*);
template<> ::lnrpc::ChannelEdge* Arena::CreateMaybeMessage<::lnrpc::ChannelEdge>(Arena*);
template<> ::lnrpc::ChannelEdgeUpdate* Arena::CreateMaybeMessage<::lnrpc::ChannelEdgeUpdate>(Arena*);
template<> ::lnrpc::ChannelEventSubscription* Arena::CreateMaybeMessage<::lnrpc::ChannelEventSubscription>(Arena*);
template<> ::lnrpc::ChannelEventUpdate* Arena::CreateMaybeMessage<::lnrpc::ChannelEventUpdate>(Arena*);
template<> ::lnrpc::ChannelFeeReport* Arena::CreateMaybeMessage<::lnrpc::ChannelFeeReport>(Arena*);
template<> ::lnrpc::ChannelGraph* Arena::CreateMaybeMessage<::lnrpc::ChannelGraph>(Arena*);
template<> ::lnrpc::ChannelGraphRequest* Arena::CreateMaybeMessage<::lnrpc::ChannelGraphRequest>(Arena*);
template<> ::lnrpc::ChannelOpenUpdate* Arena::CreateMaybeMessage<::lnrpc::ChannelOpenUpdate>(Arena*);
template<> ::lnrpc::ChannelPoint* Arena::CreateMaybeMessage<::lnrpc::ChannelPoint>(Arena*);
template<> ::lnrpc::ChannelUpdate* Arena::CreateMaybeMessage<::lnrpc::ChannelUpdate>(Arena*);
template<> ::lnrpc::CloseChannelRequest* Arena::CreateMaybeMessage<::lnrpc::CloseChannelRequest>(Arena*);
template<> ::lnrpc::CloseStatusUpdate* Arena::CreateMaybeMessage<::lnrpc::CloseStatusUpdate>(Arena*);
template<> ::lnrpc::ClosedChannelUpdate* Arena::CreateMaybeMessage<::lnrpc::ClosedChannelUpdate>(Arena*);
template<> ::lnrpc::ClosedChannelsRequest* Arena::CreateMaybeMessage<::lnrpc::ClosedChannelsRequest>(Arena*);
template<> ::lnrpc::ClosedChannelsResponse* Arena::CreateMaybeMessage<::lnrpc::ClosedChannelsResponse>(Arena*);
template<> ::lnrpc::ConfirmationUpdate* Arena::CreateMaybeMessage<::lnrpc::ConfirmationUpdate>(Arena*);
template<> ::lnrpc::ConnectPeerRequest* Arena::CreateMaybeMessage<::lnrpc::ConnectPeerRequest>(Arena*);
template<> ::lnrpc::ConnectPeerResponse* Arena::CreateMaybeMessage<::lnrpc::ConnectPeerResponse>(Arena*);
template<> ::lnrpc::DebugLevelRequest* Arena::CreateMaybeMessage<::lnrpc::DebugLevelRequest>(Arena*);
template<> ::lnrpc::DebugLevelResponse* Arena::CreateMaybeMessage<::lnrpc::DebugLevelResponse>(Arena*);
template<> ::lnrpc::DeleteAllPaymentsRequest* Arena::CreateMaybeMessage<::lnrpc::DeleteAllPaymentsRequest>(Arena*);
template<> ::lnrpc::DeleteAllPaymentsResponse* Arena::CreateMaybeMessage<::lnrpc::DeleteAllPaymentsResponse>(Arena*);
template<> ::lnrpc::DeleteMacaroonIDRequest* Arena::CreateMaybeMessage<::lnrpc::DeleteMacaroonIDRequest>(Arena*);
template<> ::lnrpc::DeleteMacaroonIDResponse* Arena::CreateMaybeMessage<::lnrpc::DeleteMacaroonIDResponse>(Arena*);
template<> ::lnrpc::DisconnectPeerRequest* Arena::CreateMaybeMessage<::lnrpc::DisconnectPeerRequest>(Arena*);
template<> ::lnrpc::DisconnectPeerResponse* Arena::CreateMaybeMessage<::lnrpc::DisconnectPeerResponse>(Arena*);
template<> ::lnrpc::EdgeLocator* Arena::CreateMaybeMessage<::lnrpc::EdgeLocator>(Arena*);
template<> ::lnrpc::EstimateFeeRequest* Arena::CreateMaybeMessage<::lnrpc::EstimateFeeRequest>(Arena*);
template<> ::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::EstimateFeeRequest_AddrToAmountEntry_DoNotUse>(Arena*);
template<> ::lnrpc::EstimateFeeResponse* Arena::CreateMaybeMessage<::lnrpc::EstimateFeeResponse>(Arena*);
template<> ::lnrpc::ExportChannelBackupRequest* Arena::CreateMaybeMessage<::lnrpc::ExportChannelBackupRequest>(Arena*);
template<> ::lnrpc::Failure* Arena::CreateMaybeMessage<::lnrpc::Failure>(Arena*);
template<> ::lnrpc::Feature* Arena::CreateMaybeMessage<::lnrpc::Feature>(Arena*);
template<> ::lnrpc::FeeLimit* Arena::CreateMaybeMessage<::lnrpc::FeeLimit>(Arena*);
template<> ::lnrpc::FeeReportRequest* Arena::CreateMaybeMessage<::lnrpc::FeeReportRequest>(Arena*);
template<> ::lnrpc::FeeReportResponse* Arena::CreateMaybeMessage<::lnrpc::FeeReportResponse>(Arena*);
template<> ::lnrpc::FloatMetric* Arena::CreateMaybeMessage<::lnrpc::FloatMetric>(Arena*);
template<> ::lnrpc::ForwardingEvent* Arena::CreateMaybeMessage<::lnrpc::ForwardingEvent>(Arena*);
template<> ::lnrpc::ForwardingHistoryRequest* Arena::CreateMaybeMessage<::lnrpc::ForwardingHistoryRequest>(Arena*);
template<> ::lnrpc::ForwardingHistoryResponse* Arena::CreateMaybeMessage<::lnrpc::ForwardingHistoryResponse>(Arena*);
template<> ::lnrpc::FundingPsbtFinalize* Arena::CreateMaybeMessage<::lnrpc::FundingPsbtFinalize>(Arena*);
template<> ::lnrpc::FundingPsbtVerify* Arena::CreateMaybeMessage<::lnrpc::FundingPsbtVerify>(Arena*);
template<> ::lnrpc::FundingShim* Arena::CreateMaybeMessage<::lnrpc::FundingShim>(Arena*);
template<> ::lnrpc::FundingShimCancel* Arena::CreateMaybeMessage<::lnrpc::FundingShimCancel>(Arena*);
template<> ::lnrpc::FundingStateStepResp* Arena::CreateMaybeMessage<::lnrpc::FundingStateStepResp>(Arena*);
template<> ::lnrpc::FundingTransitionMsg* Arena::CreateMaybeMessage<::lnrpc::FundingTransitionMsg>(Arena*);
template<> ::lnrpc::GetInfoRequest* Arena::CreateMaybeMessage<::lnrpc::GetInfoRequest>(Arena*);
template<> ::lnrpc::GetInfoResponse* Arena::CreateMaybeMessage<::lnrpc::GetInfoResponse>(Arena*);
template<> ::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::GetInfoResponse_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::GetRecoveryInfoRequest* Arena::CreateMaybeMessage<::lnrpc::GetRecoveryInfoRequest>(Arena*);
template<> ::lnrpc::GetRecoveryInfoResponse* Arena::CreateMaybeMessage<::lnrpc::GetRecoveryInfoResponse>(Arena*);
template<> ::lnrpc::GetTransactionsRequest* Arena::CreateMaybeMessage<::lnrpc::GetTransactionsRequest>(Arena*);
template<> ::lnrpc::GraphTopologySubscription* Arena::CreateMaybeMessage<::lnrpc::GraphTopologySubscription>(Arena*);
template<> ::lnrpc::GraphTopologyUpdate* Arena::CreateMaybeMessage<::lnrpc::GraphTopologyUpdate>(Arena*);
template<> ::lnrpc::HTLC* Arena::CreateMaybeMessage<::lnrpc::HTLC>(Arena*);
template<> ::lnrpc::HTLCAttempt* Arena::CreateMaybeMessage<::lnrpc::HTLCAttempt>(Arena*);
template<> ::lnrpc::Hop* Arena::CreateMaybeMessage<::lnrpc::Hop>(Arena*);
template<> ::lnrpc::HopHint* Arena::CreateMaybeMessage<::lnrpc::HopHint>(Arena*);
template<> ::lnrpc::Hop_CustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::Hop_CustomRecordsEntry_DoNotUse>(Arena*);
template<> ::lnrpc::Invoice* Arena::CreateMaybeMessage<::lnrpc::Invoice>(Arena*);
template<> ::lnrpc::InvoiceHTLC* Arena::CreateMaybeMessage<::lnrpc::InvoiceHTLC>(Arena*);
template<> ::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::InvoiceHTLC_CustomRecordsEntry_DoNotUse>(Arena*);
template<> ::lnrpc::InvoiceSubscription* Arena::CreateMaybeMessage<::lnrpc::InvoiceSubscription>(Arena*);
template<> ::lnrpc::Invoice_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::Invoice_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::KeyDescriptor* Arena::CreateMaybeMessage<::lnrpc::KeyDescriptor>(Arena*);
template<> ::lnrpc::KeyLocator* Arena::CreateMaybeMessage<::lnrpc::KeyLocator>(Arena*);
template<> ::lnrpc::LightningAddress* Arena::CreateMaybeMessage<::lnrpc::LightningAddress>(Arena*);
template<> ::lnrpc::LightningNode* Arena::CreateMaybeMessage<::lnrpc::LightningNode>(Arena*);
template<> ::lnrpc::LightningNode_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::LightningNode_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::ListChannelsRequest* Arena::CreateMaybeMessage<::lnrpc::ListChannelsRequest>(Arena*);
template<> ::lnrpc::ListChannelsResponse* Arena::CreateMaybeMessage<::lnrpc::ListChannelsResponse>(Arena*);
template<> ::lnrpc::ListInvoiceRequest* Arena::CreateMaybeMessage<::lnrpc::ListInvoiceRequest>(Arena*);
template<> ::lnrpc::ListInvoiceResponse* Arena::CreateMaybeMessage<::lnrpc::ListInvoiceResponse>(Arena*);
template<> ::lnrpc::ListMacaroonIDsRequest* Arena::CreateMaybeMessage<::lnrpc::ListMacaroonIDsRequest>(Arena*);
template<> ::lnrpc::ListMacaroonIDsResponse* Arena::CreateMaybeMessage<::lnrpc::ListMacaroonIDsResponse>(Arena*);
template<> ::lnrpc::ListPaymentsRequest* Arena::CreateMaybeMessage<::lnrpc::ListPaymentsRequest>(Arena*);
template<> ::lnrpc::ListPaymentsResponse* Arena::CreateMaybeMessage<::lnrpc::ListPaymentsResponse>(Arena*);
template<> ::lnrpc::ListPeersRequest* Arena::CreateMaybeMessage<::lnrpc::ListPeersRequest>(Arena*);
template<> ::lnrpc::ListPeersResponse* Arena::CreateMaybeMessage<::lnrpc::ListPeersResponse>(Arena*);
template<> ::lnrpc::ListPermissionsRequest* Arena::CreateMaybeMessage<::lnrpc::ListPermissionsRequest>(Arena*);
template<> ::lnrpc::ListPermissionsResponse* Arena::CreateMaybeMessage<::lnrpc::ListPermissionsResponse>(Arena*);
template<> ::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::ListPermissionsResponse_MethodPermissionsEntry_DoNotUse>(Arena*);
template<> ::lnrpc::ListUnspentRequest* Arena::CreateMaybeMessage<::lnrpc::ListUnspentRequest>(Arena*);
template<> ::lnrpc::ListUnspentResponse* Arena::CreateMaybeMessage<::lnrpc::ListUnspentResponse>(Arena*);
template<> ::lnrpc::MPPRecord* Arena::CreateMaybeMessage<::lnrpc::MPPRecord>(Arena*);
template<> ::lnrpc::MacaroonId* Arena::CreateMaybeMessage<::lnrpc::MacaroonId>(Arena*);
template<> ::lnrpc::MacaroonPermission* Arena::CreateMaybeMessage<::lnrpc::MacaroonPermission>(Arena*);
template<> ::lnrpc::MacaroonPermissionList* Arena::CreateMaybeMessage<::lnrpc::MacaroonPermissionList>(Arena*);
template<> ::lnrpc::MultiChanBackup* Arena::CreateMaybeMessage<::lnrpc::MultiChanBackup>(Arena*);
template<> ::lnrpc::NetworkInfo* Arena::CreateMaybeMessage<::lnrpc::NetworkInfo>(Arena*);
template<> ::lnrpc::NetworkInfoRequest* Arena::CreateMaybeMessage<::lnrpc::NetworkInfoRequest>(Arena*);
template<> ::lnrpc::NewAddressRequest* Arena::CreateMaybeMessage<::lnrpc::NewAddressRequest>(Arena*);
template<> ::lnrpc::NewAddressResponse* Arena::CreateMaybeMessage<::lnrpc::NewAddressResponse>(Arena*);
template<> ::lnrpc::NodeAddress* Arena::CreateMaybeMessage<::lnrpc::NodeAddress>(Arena*);
template<> ::lnrpc::NodeInfo* Arena::CreateMaybeMessage<::lnrpc::NodeInfo>(Arena*);
template<> ::lnrpc::NodeInfoRequest* Arena::CreateMaybeMessage<::lnrpc::NodeInfoRequest>(Arena*);
template<> ::lnrpc::NodeMetricsRequest* Arena::CreateMaybeMessage<::lnrpc::NodeMetricsRequest>(Arena*);
template<> ::lnrpc::NodeMetricsResponse* Arena::CreateMaybeMessage<::lnrpc::NodeMetricsResponse>(Arena*);
template<> ::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse>(Arena*);
template<> ::lnrpc::NodePair* Arena::CreateMaybeMessage<::lnrpc::NodePair>(Arena*);
template<> ::lnrpc::NodeUpdate* Arena::CreateMaybeMessage<::lnrpc::NodeUpdate>(Arena*);
template<> ::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::NodeUpdate_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::Op* Arena::CreateMaybeMessage<::lnrpc::Op>(Arena*);
template<> ::lnrpc::OpenChannelRequest* Arena::CreateMaybeMessage<::lnrpc::OpenChannelRequest>(Arena*);
template<> ::lnrpc::OpenStatusUpdate* Arena::CreateMaybeMessage<::lnrpc::OpenStatusUpdate>(Arena*);
template<> ::lnrpc::OutPoint* Arena::CreateMaybeMessage<::lnrpc::OutPoint>(Arena*);
template<> ::lnrpc::PayReq* Arena::CreateMaybeMessage<::lnrpc::PayReq>(Arena*);
template<> ::lnrpc::PayReqString* Arena::CreateMaybeMessage<::lnrpc::PayReqString>(Arena*);
template<> ::lnrpc::PayReq_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::PayReq_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::Payment* Arena::CreateMaybeMessage<::lnrpc::Payment>(Arena*);
template<> ::lnrpc::PaymentHash* Arena::CreateMaybeMessage<::lnrpc::PaymentHash>(Arena*);
template<> ::lnrpc::Peer* Arena::CreateMaybeMessage<::lnrpc::Peer>(Arena*);
template<> ::lnrpc::PeerEvent* Arena::CreateMaybeMessage<::lnrpc::PeerEvent>(Arena*);
template<> ::lnrpc::PeerEventSubscription* Arena::CreateMaybeMessage<::lnrpc::PeerEventSubscription>(Arena*);
template<> ::lnrpc::Peer_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::Peer_FeaturesEntry_DoNotUse>(Arena*);
template<> ::lnrpc::PendingChannelsRequest* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsRequest>(Arena*);
template<> ::lnrpc::PendingChannelsResponse* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_ClosedChannel* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_ClosedChannel>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_Commitments* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_Commitments>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_ForceClosedChannel* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_ForceClosedChannel>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_PendingChannel* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingChannel>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_PendingOpenChannel* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingOpenChannel>(Arena*);
template<> ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* Arena::CreateMaybeMessage<::lnrpc::PendingChannelsResponse_WaitingCloseChannel>(Arena*);
template<> ::lnrpc::PendingHTLC* Arena::CreateMaybeMessage<::lnrpc::PendingHTLC>(Arena*);
template<> ::lnrpc::PendingUpdate* Arena::CreateMaybeMessage<::lnrpc::PendingUpdate>(Arena*);
template<> ::lnrpc::PolicyUpdateRequest* Arena::CreateMaybeMessage<::lnrpc::PolicyUpdateRequest>(Arena*);
template<> ::lnrpc::PolicyUpdateResponse* Arena::CreateMaybeMessage<::lnrpc::PolicyUpdateResponse>(Arena*);
template<> ::lnrpc::PsbtShim* Arena::CreateMaybeMessage<::lnrpc::PsbtShim>(Arena*);
template<> ::lnrpc::QueryRoutesRequest* Arena::CreateMaybeMessage<::lnrpc::QueryRoutesRequest>(Arena*);
template<> ::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse>(Arena*);
template<> ::lnrpc::QueryRoutesResponse* Arena::CreateMaybeMessage<::lnrpc::QueryRoutesResponse>(Arena*);
template<> ::lnrpc::ReadyForPsbtFunding* Arena::CreateMaybeMessage<::lnrpc::ReadyForPsbtFunding>(Arena*);
template<> ::lnrpc::Resolution* Arena::CreateMaybeMessage<::lnrpc::Resolution>(Arena*);
template<> ::lnrpc::RestoreBackupResponse* Arena::CreateMaybeMessage<::lnrpc::RestoreBackupResponse>(Arena*);
template<> ::lnrpc::RestoreChanBackupRequest* Arena::CreateMaybeMessage<::lnrpc::RestoreChanBackupRequest>(Arena*);
template<> ::lnrpc::Route* Arena::CreateMaybeMessage<::lnrpc::Route>(Arena*);
template<> ::lnrpc::RouteHint* Arena::CreateMaybeMessage<::lnrpc::RouteHint>(Arena*);
template<> ::lnrpc::RoutingPolicy* Arena::CreateMaybeMessage<::lnrpc::RoutingPolicy>(Arena*);
template<> ::lnrpc::SendCoinsRequest* Arena::CreateMaybeMessage<::lnrpc::SendCoinsRequest>(Arena*);
template<> ::lnrpc::SendCoinsResponse* Arena::CreateMaybeMessage<::lnrpc::SendCoinsResponse>(Arena*);
template<> ::lnrpc::SendManyRequest* Arena::CreateMaybeMessage<::lnrpc::SendManyRequest>(Arena*);
template<> ::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::SendManyRequest_AddrToAmountEntry_DoNotUse>(Arena*);
template<> ::lnrpc::SendManyResponse* Arena::CreateMaybeMessage<::lnrpc::SendManyResponse>(Arena*);
template<> ::lnrpc::SendRequest* Arena::CreateMaybeMessage<::lnrpc::SendRequest>(Arena*);
template<> ::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::SendRequest_DestCustomRecordsEntry_DoNotUse>(Arena*);
template<> ::lnrpc::SendResponse* Arena::CreateMaybeMessage<::lnrpc::SendResponse>(Arena*);
template<> ::lnrpc::SendToRouteRequest* Arena::CreateMaybeMessage<::lnrpc::SendToRouteRequest>(Arena*);
template<> ::lnrpc::SignMessageRequest* Arena::CreateMaybeMessage<::lnrpc::SignMessageRequest>(Arena*);
template<> ::lnrpc::SignMessageResponse* Arena::CreateMaybeMessage<::lnrpc::SignMessageResponse>(Arena*);
template<> ::lnrpc::StopRequest* Arena::CreateMaybeMessage<::lnrpc::StopRequest>(Arena*);
template<> ::lnrpc::StopResponse* Arena::CreateMaybeMessage<::lnrpc::StopResponse>(Arena*);
template<> ::lnrpc::TimestampedError* Arena::CreateMaybeMessage<::lnrpc::TimestampedError>(Arena*);
template<> ::lnrpc::Transaction* Arena::CreateMaybeMessage<::lnrpc::Transaction>(Arena*);
template<> ::lnrpc::TransactionDetails* Arena::CreateMaybeMessage<::lnrpc::TransactionDetails>(Arena*);
template<> ::lnrpc::Utxo* Arena::CreateMaybeMessage<::lnrpc::Utxo>(Arena*);
template<> ::lnrpc::VerifyChanBackupResponse* Arena::CreateMaybeMessage<::lnrpc::VerifyChanBackupResponse>(Arena*);
template<> ::lnrpc::VerifyMessageRequest* Arena::CreateMaybeMessage<::lnrpc::VerifyMessageRequest>(Arena*);
template<> ::lnrpc::VerifyMessageResponse* Arena::CreateMaybeMessage<::lnrpc::VerifyMessageResponse>(Arena*);
template<> ::lnrpc::WalletAccountBalance* Arena::CreateMaybeMessage<::lnrpc::WalletAccountBalance>(Arena*);
template<> ::lnrpc::WalletBalanceRequest* Arena::CreateMaybeMessage<::lnrpc::WalletBalanceRequest>(Arena*);
template<> ::lnrpc::WalletBalanceResponse* Arena::CreateMaybeMessage<::lnrpc::WalletBalanceResponse>(Arena*);
template<> ::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse* Arena::CreateMaybeMessage<::lnrpc::WalletBalanceResponse_AccountBalanceEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lnrpc {

enum ChannelCloseSummary_ClosureType : int {
  ChannelCloseSummary_ClosureType_COOPERATIVE_CLOSE = 0,
  ChannelCloseSummary_ClosureType_LOCAL_FORCE_CLOSE = 1,
  ChannelCloseSummary_ClosureType_REMOTE_FORCE_CLOSE = 2,
  ChannelCloseSummary_ClosureType_BREACH_CLOSE = 3,
  ChannelCloseSummary_ClosureType_FUNDING_CANCELED = 4,
  ChannelCloseSummary_ClosureType_ABANDONED = 5,
  ChannelCloseSummary_ClosureType_ChannelCloseSummary_ClosureType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelCloseSummary_ClosureType_ChannelCloseSummary_ClosureType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelCloseSummary_ClosureType_IsValid(int value);
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary_ClosureType_ClosureType_MIN = ChannelCloseSummary_ClosureType_COOPERATIVE_CLOSE;
constexpr ChannelCloseSummary_ClosureType ChannelCloseSummary_ClosureType_ClosureType_MAX = ChannelCloseSummary_ClosureType_ABANDONED;
constexpr int ChannelCloseSummary_ClosureType_ClosureType_ARRAYSIZE = ChannelCloseSummary_ClosureType_ClosureType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelCloseSummary_ClosureType_descriptor();
template<typename T>
inline const std::string& ChannelCloseSummary_ClosureType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelCloseSummary_ClosureType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelCloseSummary_ClosureType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelCloseSummary_ClosureType_descriptor(), enum_t_value);
}
inline bool ChannelCloseSummary_ClosureType_Parse(
    const std::string& name, ChannelCloseSummary_ClosureType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelCloseSummary_ClosureType>(
    ChannelCloseSummary_ClosureType_descriptor(), name, value);
}
enum Peer_SyncType : int {
  Peer_SyncType_UNKNOWN_SYNC = 0,
  Peer_SyncType_ACTIVE_SYNC = 1,
  Peer_SyncType_PASSIVE_SYNC = 2,
  Peer_SyncType_PINNED_SYNC = 3,
  Peer_SyncType_Peer_SyncType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Peer_SyncType_Peer_SyncType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Peer_SyncType_IsValid(int value);
constexpr Peer_SyncType Peer_SyncType_SyncType_MIN = Peer_SyncType_UNKNOWN_SYNC;
constexpr Peer_SyncType Peer_SyncType_SyncType_MAX = Peer_SyncType_PINNED_SYNC;
constexpr int Peer_SyncType_SyncType_ARRAYSIZE = Peer_SyncType_SyncType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Peer_SyncType_descriptor();
template<typename T>
inline const std::string& Peer_SyncType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Peer_SyncType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Peer_SyncType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Peer_SyncType_descriptor(), enum_t_value);
}
inline bool Peer_SyncType_Parse(
    const std::string& name, Peer_SyncType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Peer_SyncType>(
    Peer_SyncType_descriptor(), name, value);
}
enum PeerEvent_EventType : int {
  PeerEvent_EventType_PEER_ONLINE = 0,
  PeerEvent_EventType_PEER_OFFLINE = 1,
  PeerEvent_EventType_PeerEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PeerEvent_EventType_PeerEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PeerEvent_EventType_IsValid(int value);
constexpr PeerEvent_EventType PeerEvent_EventType_EventType_MIN = PeerEvent_EventType_PEER_ONLINE;
constexpr PeerEvent_EventType PeerEvent_EventType_EventType_MAX = PeerEvent_EventType_PEER_OFFLINE;
constexpr int PeerEvent_EventType_EventType_ARRAYSIZE = PeerEvent_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeerEvent_EventType_descriptor();
template<typename T>
inline const std::string& PeerEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeerEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeerEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeerEvent_EventType_descriptor(), enum_t_value);
}
inline bool PeerEvent_EventType_Parse(
    const std::string& name, PeerEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeerEvent_EventType>(
    PeerEvent_EventType_descriptor(), name, value);
}
enum PendingChannelsResponse_ForceClosedChannel_AnchorState : int {
  PendingChannelsResponse_ForceClosedChannel_AnchorState_LIMBO = 0,
  PendingChannelsResponse_ForceClosedChannel_AnchorState_RECOVERED = 1,
  PendingChannelsResponse_ForceClosedChannel_AnchorState_LOST = 2,
  PendingChannelsResponse_ForceClosedChannel_AnchorState_PendingChannelsResponse_ForceClosedChannel_AnchorState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PendingChannelsResponse_ForceClosedChannel_AnchorState_PendingChannelsResponse_ForceClosedChannel_AnchorState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PendingChannelsResponse_ForceClosedChannel_AnchorState_IsValid(int value);
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_MIN = PendingChannelsResponse_ForceClosedChannel_AnchorState_LIMBO;
constexpr PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_MAX = PendingChannelsResponse_ForceClosedChannel_AnchorState_LOST;
constexpr int PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_ARRAYSIZE = PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor();
template<typename T>
inline const std::string& PendingChannelsResponse_ForceClosedChannel_AnchorState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PendingChannelsResponse_ForceClosedChannel_AnchorState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PendingChannelsResponse_ForceClosedChannel_AnchorState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor(), enum_t_value);
}
inline bool PendingChannelsResponse_ForceClosedChannel_AnchorState_Parse(
    const std::string& name, PendingChannelsResponse_ForceClosedChannel_AnchorState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PendingChannelsResponse_ForceClosedChannel_AnchorState>(
    PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor(), name, value);
}
enum ChannelEventUpdate_UpdateType : int {
  ChannelEventUpdate_UpdateType_OPEN_CHANNEL = 0,
  ChannelEventUpdate_UpdateType_CLOSED_CHANNEL = 1,
  ChannelEventUpdate_UpdateType_ACTIVE_CHANNEL = 2,
  ChannelEventUpdate_UpdateType_INACTIVE_CHANNEL = 3,
  ChannelEventUpdate_UpdateType_PENDING_OPEN_CHANNEL = 4,
  ChannelEventUpdate_UpdateType_ChannelEventUpdate_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelEventUpdate_UpdateType_ChannelEventUpdate_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelEventUpdate_UpdateType_IsValid(int value);
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate_UpdateType_UpdateType_MIN = ChannelEventUpdate_UpdateType_OPEN_CHANNEL;
constexpr ChannelEventUpdate_UpdateType ChannelEventUpdate_UpdateType_UpdateType_MAX = ChannelEventUpdate_UpdateType_PENDING_OPEN_CHANNEL;
constexpr int ChannelEventUpdate_UpdateType_UpdateType_ARRAYSIZE = ChannelEventUpdate_UpdateType_UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelEventUpdate_UpdateType_descriptor();
template<typename T>
inline const std::string& ChannelEventUpdate_UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelEventUpdate_UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelEventUpdate_UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelEventUpdate_UpdateType_descriptor(), enum_t_value);
}
inline bool ChannelEventUpdate_UpdateType_Parse(
    const std::string& name, ChannelEventUpdate_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelEventUpdate_UpdateType>(
    ChannelEventUpdate_UpdateType_descriptor(), name, value);
}
enum Invoice_InvoiceState : int {
  Invoice_InvoiceState_OPEN = 0,
  Invoice_InvoiceState_SETTLED = 1,
  Invoice_InvoiceState_CANCELED = 2,
  Invoice_InvoiceState_ACCEPTED = 3,
  Invoice_InvoiceState_Invoice_InvoiceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Invoice_InvoiceState_Invoice_InvoiceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Invoice_InvoiceState_IsValid(int value);
constexpr Invoice_InvoiceState Invoice_InvoiceState_InvoiceState_MIN = Invoice_InvoiceState_OPEN;
constexpr Invoice_InvoiceState Invoice_InvoiceState_InvoiceState_MAX = Invoice_InvoiceState_ACCEPTED;
constexpr int Invoice_InvoiceState_InvoiceState_ARRAYSIZE = Invoice_InvoiceState_InvoiceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Invoice_InvoiceState_descriptor();
template<typename T>
inline const std::string& Invoice_InvoiceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Invoice_InvoiceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Invoice_InvoiceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Invoice_InvoiceState_descriptor(), enum_t_value);
}
inline bool Invoice_InvoiceState_Parse(
    const std::string& name, Invoice_InvoiceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Invoice_InvoiceState>(
    Invoice_InvoiceState_descriptor(), name, value);
}
enum Payment_PaymentStatus : int {
  Payment_PaymentStatus_UNKNOWN = 0,
  Payment_PaymentStatus_IN_FLIGHT = 1,
  Payment_PaymentStatus_SUCCEEDED = 2,
  Payment_PaymentStatus_FAILED = 3,
  Payment_PaymentStatus_Payment_PaymentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Payment_PaymentStatus_Payment_PaymentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Payment_PaymentStatus_IsValid(int value);
constexpr Payment_PaymentStatus Payment_PaymentStatus_PaymentStatus_MIN = Payment_PaymentStatus_UNKNOWN;
constexpr Payment_PaymentStatus Payment_PaymentStatus_PaymentStatus_MAX = Payment_PaymentStatus_FAILED;
constexpr int Payment_PaymentStatus_PaymentStatus_ARRAYSIZE = Payment_PaymentStatus_PaymentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Payment_PaymentStatus_descriptor();
template<typename T>
inline const std::string& Payment_PaymentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Payment_PaymentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Payment_PaymentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Payment_PaymentStatus_descriptor(), enum_t_value);
}
inline bool Payment_PaymentStatus_Parse(
    const std::string& name, Payment_PaymentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Payment_PaymentStatus>(
    Payment_PaymentStatus_descriptor(), name, value);
}
enum HTLCAttempt_HTLCStatus : int {
  HTLCAttempt_HTLCStatus_IN_FLIGHT = 0,
  HTLCAttempt_HTLCStatus_SUCCEEDED = 1,
  HTLCAttempt_HTLCStatus_FAILED = 2,
  HTLCAttempt_HTLCStatus_HTLCAttempt_HTLCStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HTLCAttempt_HTLCStatus_HTLCAttempt_HTLCStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HTLCAttempt_HTLCStatus_IsValid(int value);
constexpr HTLCAttempt_HTLCStatus HTLCAttempt_HTLCStatus_HTLCStatus_MIN = HTLCAttempt_HTLCStatus_IN_FLIGHT;
constexpr HTLCAttempt_HTLCStatus HTLCAttempt_HTLCStatus_HTLCStatus_MAX = HTLCAttempt_HTLCStatus_FAILED;
constexpr int HTLCAttempt_HTLCStatus_HTLCStatus_ARRAYSIZE = HTLCAttempt_HTLCStatus_HTLCStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HTLCAttempt_HTLCStatus_descriptor();
template<typename T>
inline const std::string& HTLCAttempt_HTLCStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HTLCAttempt_HTLCStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HTLCAttempt_HTLCStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HTLCAttempt_HTLCStatus_descriptor(), enum_t_value);
}
inline bool HTLCAttempt_HTLCStatus_Parse(
    const std::string& name, HTLCAttempt_HTLCStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HTLCAttempt_HTLCStatus>(
    HTLCAttempt_HTLCStatus_descriptor(), name, value);
}
enum Failure_FailureCode : int {
  Failure_FailureCode_RESERVED = 0,
  Failure_FailureCode_INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS = 1,
  Failure_FailureCode_INCORRECT_PAYMENT_AMOUNT = 2,
  Failure_FailureCode_FINAL_INCORRECT_CLTV_EXPIRY = 3,
  Failure_FailureCode_FINAL_INCORRECT_HTLC_AMOUNT = 4,
  Failure_FailureCode_FINAL_EXPIRY_TOO_SOON = 5,
  Failure_FailureCode_INVALID_REALM = 6,
  Failure_FailureCode_EXPIRY_TOO_SOON = 7,
  Failure_FailureCode_INVALID_ONION_VERSION = 8,
  Failure_FailureCode_INVALID_ONION_HMAC = 9,
  Failure_FailureCode_INVALID_ONION_KEY = 10,
  Failure_FailureCode_AMOUNT_BELOW_MINIMUM = 11,
  Failure_FailureCode_FEE_INSUFFICIENT = 12,
  Failure_FailureCode_INCORRECT_CLTV_EXPIRY = 13,
  Failure_FailureCode_CHANNEL_DISABLED = 14,
  Failure_FailureCode_TEMPORARY_CHANNEL_FAILURE = 15,
  Failure_FailureCode_REQUIRED_NODE_FEATURE_MISSING = 16,
  Failure_FailureCode_REQUIRED_CHANNEL_FEATURE_MISSING = 17,
  Failure_FailureCode_UNKNOWN_NEXT_PEER = 18,
  Failure_FailureCode_TEMPORARY_NODE_FAILURE = 19,
  Failure_FailureCode_PERMANENT_NODE_FAILURE = 20,
  Failure_FailureCode_PERMANENT_CHANNEL_FAILURE = 21,
  Failure_FailureCode_EXPIRY_TOO_FAR = 22,
  Failure_FailureCode_MPP_TIMEOUT = 23,
  Failure_FailureCode_INVALID_ONION_PAYLOAD = 24,
  Failure_FailureCode_INTERNAL_FAILURE = 997,
  Failure_FailureCode_UNKNOWN_FAILURE = 998,
  Failure_FailureCode_UNREADABLE_FAILURE = 999,
  Failure_FailureCode_Failure_FailureCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Failure_FailureCode_Failure_FailureCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Failure_FailureCode_IsValid(int value);
constexpr Failure_FailureCode Failure_FailureCode_FailureCode_MIN = Failure_FailureCode_RESERVED;
constexpr Failure_FailureCode Failure_FailureCode_FailureCode_MAX = Failure_FailureCode_UNREADABLE_FAILURE;
constexpr int Failure_FailureCode_FailureCode_ARRAYSIZE = Failure_FailureCode_FailureCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Failure_FailureCode_descriptor();
template<typename T>
inline const std::string& Failure_FailureCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Failure_FailureCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Failure_FailureCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Failure_FailureCode_descriptor(), enum_t_value);
}
inline bool Failure_FailureCode_Parse(
    const std::string& name, Failure_FailureCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Failure_FailureCode>(
    Failure_FailureCode_descriptor(), name, value);
}
enum AddressType : int {
  WITNESS_PUBKEY_HASH = 0,
  NESTED_PUBKEY_HASH = 1,
  UNUSED_WITNESS_PUBKEY_HASH = 2,
  UNUSED_NESTED_PUBKEY_HASH = 3,
  AddressType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AddressType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AddressType_IsValid(int value);
constexpr AddressType AddressType_MIN = WITNESS_PUBKEY_HASH;
constexpr AddressType AddressType_MAX = UNUSED_NESTED_PUBKEY_HASH;
constexpr int AddressType_ARRAYSIZE = AddressType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AddressType_descriptor();
template<typename T>
inline const std::string& AddressType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AddressType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AddressType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AddressType_descriptor(), enum_t_value);
}
inline bool AddressType_Parse(
    const std::string& name, AddressType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AddressType>(
    AddressType_descriptor(), name, value);
}
enum CommitmentType : int {
  LEGACY = 0,
  STATIC_REMOTE_KEY = 1,
  ANCHORS = 2,
  UNKNOWN_COMMITMENT_TYPE = 999,
  CommitmentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommitmentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommitmentType_IsValid(int value);
constexpr CommitmentType CommitmentType_MIN = LEGACY;
constexpr CommitmentType CommitmentType_MAX = UNKNOWN_COMMITMENT_TYPE;
constexpr int CommitmentType_ARRAYSIZE = CommitmentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommitmentType_descriptor();
template<typename T>
inline const std::string& CommitmentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommitmentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommitmentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommitmentType_descriptor(), enum_t_value);
}
inline bool CommitmentType_Parse(
    const std::string& name, CommitmentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommitmentType>(
    CommitmentType_descriptor(), name, value);
}
enum Initiator : int {
  INITIATOR_UNKNOWN = 0,
  INITIATOR_LOCAL = 1,
  INITIATOR_REMOTE = 2,
  INITIATOR_BOTH = 3,
  Initiator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Initiator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Initiator_IsValid(int value);
constexpr Initiator Initiator_MIN = INITIATOR_UNKNOWN;
constexpr Initiator Initiator_MAX = INITIATOR_BOTH;
constexpr int Initiator_ARRAYSIZE = Initiator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Initiator_descriptor();
template<typename T>
inline const std::string& Initiator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Initiator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Initiator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Initiator_descriptor(), enum_t_value);
}
inline bool Initiator_Parse(
    const std::string& name, Initiator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Initiator>(
    Initiator_descriptor(), name, value);
}
enum ResolutionType : int {
  TYPE_UNKNOWN = 0,
  ANCHOR = 1,
  INCOMING_HTLC = 2,
  OUTGOING_HTLC = 3,
  COMMIT = 4,
  ResolutionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResolutionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResolutionType_IsValid(int value);
constexpr ResolutionType ResolutionType_MIN = TYPE_UNKNOWN;
constexpr ResolutionType ResolutionType_MAX = COMMIT;
constexpr int ResolutionType_ARRAYSIZE = ResolutionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolutionType_descriptor();
template<typename T>
inline const std::string& ResolutionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResolutionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResolutionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResolutionType_descriptor(), enum_t_value);
}
inline bool ResolutionType_Parse(
    const std::string& name, ResolutionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResolutionType>(
    ResolutionType_descriptor(), name, value);
}
enum ResolutionOutcome : int {
  OUTCOME_UNKNOWN = 0,
  CLAIMED = 1,
  UNCLAIMED = 2,
  ABANDONED = 3,
  FIRST_STAGE = 4,
  TIMEOUT = 5,
  ResolutionOutcome_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ResolutionOutcome_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ResolutionOutcome_IsValid(int value);
constexpr ResolutionOutcome ResolutionOutcome_MIN = OUTCOME_UNKNOWN;
constexpr ResolutionOutcome ResolutionOutcome_MAX = TIMEOUT;
constexpr int ResolutionOutcome_ARRAYSIZE = ResolutionOutcome_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResolutionOutcome_descriptor();
template<typename T>
inline const std::string& ResolutionOutcome_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ResolutionOutcome>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ResolutionOutcome_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ResolutionOutcome_descriptor(), enum_t_value);
}
inline bool ResolutionOutcome_Parse(
    const std::string& name, ResolutionOutcome* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ResolutionOutcome>(
    ResolutionOutcome_descriptor(), name, value);
}
enum NodeMetricType : int {
  UNKNOWN = 0,
  BETWEENNESS_CENTRALITY = 1,
  NodeMetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NodeMetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NodeMetricType_IsValid(int value);
constexpr NodeMetricType NodeMetricType_MIN = UNKNOWN;
constexpr NodeMetricType NodeMetricType_MAX = BETWEENNESS_CENTRALITY;
constexpr int NodeMetricType_ARRAYSIZE = NodeMetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeMetricType_descriptor();
template<typename T>
inline const std::string& NodeMetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeMetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeMetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeMetricType_descriptor(), enum_t_value);
}
inline bool NodeMetricType_Parse(
    const std::string& name, NodeMetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeMetricType>(
    NodeMetricType_descriptor(), name, value);
}
enum InvoiceHTLCState : int {
  ACCEPTED = 0,
  SETTLED = 1,
  CANCELED = 2,
  InvoiceHTLCState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InvoiceHTLCState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InvoiceHTLCState_IsValid(int value);
constexpr InvoiceHTLCState InvoiceHTLCState_MIN = ACCEPTED;
constexpr InvoiceHTLCState InvoiceHTLCState_MAX = CANCELED;
constexpr int InvoiceHTLCState_ARRAYSIZE = InvoiceHTLCState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InvoiceHTLCState_descriptor();
template<typename T>
inline const std::string& InvoiceHTLCState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InvoiceHTLCState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InvoiceHTLCState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InvoiceHTLCState_descriptor(), enum_t_value);
}
inline bool InvoiceHTLCState_Parse(
    const std::string& name, InvoiceHTLCState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InvoiceHTLCState>(
    InvoiceHTLCState_descriptor(), name, value);
}
enum PaymentFailureReason : int {
  FAILURE_REASON_NONE = 0,
  FAILURE_REASON_TIMEOUT = 1,
  FAILURE_REASON_NO_ROUTE = 2,
  FAILURE_REASON_ERROR = 3,
  FAILURE_REASON_INCORRECT_PAYMENT_DETAILS = 4,
  FAILURE_REASON_INSUFFICIENT_BALANCE = 5,
  PaymentFailureReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PaymentFailureReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PaymentFailureReason_IsValid(int value);
constexpr PaymentFailureReason PaymentFailureReason_MIN = FAILURE_REASON_NONE;
constexpr PaymentFailureReason PaymentFailureReason_MAX = FAILURE_REASON_INSUFFICIENT_BALANCE;
constexpr int PaymentFailureReason_ARRAYSIZE = PaymentFailureReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentFailureReason_descriptor();
template<typename T>
inline const std::string& PaymentFailureReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PaymentFailureReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PaymentFailureReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PaymentFailureReason_descriptor(), enum_t_value);
}
inline bool PaymentFailureReason_Parse(
    const std::string& name, PaymentFailureReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PaymentFailureReason>(
    PaymentFailureReason_descriptor(), name, value);
}
enum FeatureBit : int {
  DATALOSS_PROTECT_REQ = 0,
  DATALOSS_PROTECT_OPT = 1,
  INITIAL_ROUING_SYNC = 3,
  UPFRONT_SHUTDOWN_SCRIPT_REQ = 4,
  UPFRONT_SHUTDOWN_SCRIPT_OPT = 5,
  GOSSIP_QUERIES_REQ = 6,
  GOSSIP_QUERIES_OPT = 7,
  TLV_ONION_REQ = 8,
  TLV_ONION_OPT = 9,
  EXT_GOSSIP_QUERIES_REQ = 10,
  EXT_GOSSIP_QUERIES_OPT = 11,
  STATIC_REMOTE_KEY_REQ = 12,
  STATIC_REMOTE_KEY_OPT = 13,
  PAYMENT_ADDR_REQ = 14,
  PAYMENT_ADDR_OPT = 15,
  MPP_REQ = 16,
  MPP_OPT = 17,
  WUMBO_CHANNELS_REQ = 18,
  WUMBO_CHANNELS_OPT = 19,
  ANCHORS_REQ = 20,
  ANCHORS_OPT = 21,
  ANCHORS_ZERO_FEE_HTLC_REQ = 22,
  ANCHORS_ZERO_FEE_HTLC_OPT = 23,
  FeatureBit_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FeatureBit_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FeatureBit_IsValid(int value);
constexpr FeatureBit FeatureBit_MIN = DATALOSS_PROTECT_REQ;
constexpr FeatureBit FeatureBit_MAX = ANCHORS_ZERO_FEE_HTLC_OPT;
constexpr int FeatureBit_ARRAYSIZE = FeatureBit_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeatureBit_descriptor();
template<typename T>
inline const std::string& FeatureBit_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeatureBit>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeatureBit_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FeatureBit_descriptor(), enum_t_value);
}
inline bool FeatureBit_Parse(
    const std::string& name, FeatureBit* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FeatureBit>(
    FeatureBit_descriptor(), name, value);
}
// ===================================================================

class Utxo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Utxo) */ {
 public:
  Utxo();
  virtual ~Utxo();

  Utxo(const Utxo& from);
  Utxo(Utxo&& from) noexcept
    : Utxo() {
    *this = ::std::move(from);
  }

  inline Utxo& operator=(const Utxo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utxo& operator=(Utxo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Utxo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Utxo* internal_default_instance() {
    return reinterpret_cast<const Utxo*>(
               &_Utxo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Utxo& a, Utxo& b) {
    a.Swap(&b);
  }
  inline void Swap(Utxo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Utxo* New() const final {
    return CreateMaybeMessage<Utxo>(nullptr);
  }

  Utxo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Utxo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Utxo& from);
  void MergeFrom(const Utxo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Utxo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Utxo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kPkScriptFieldNumber = 4,
    kOutpointFieldNumber = 5,
    kAmountSatFieldNumber = 3,
    kConfirmationsFieldNumber = 6,
    kAddressTypeFieldNumber = 1,
  };
  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string pk_script = 4;
  void clear_pk_script();
  const std::string& pk_script() const;
  void set_pk_script(const std::string& value);
  void set_pk_script(std::string&& value);
  void set_pk_script(const char* value);
  void set_pk_script(const char* value, size_t size);
  std::string* mutable_pk_script();
  std::string* release_pk_script();
  void set_allocated_pk_script(std::string* pk_script);
  private:
  const std::string& _internal_pk_script() const;
  void _internal_set_pk_script(const std::string& value);
  std::string* _internal_mutable_pk_script();
  public:

  // .lnrpc.OutPoint outpoint = 5;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::lnrpc::OutPoint& outpoint() const;
  ::lnrpc::OutPoint* release_outpoint();
  ::lnrpc::OutPoint* mutable_outpoint();
  void set_allocated_outpoint(::lnrpc::OutPoint* outpoint);
  private:
  const ::lnrpc::OutPoint& _internal_outpoint() const;
  ::lnrpc::OutPoint* _internal_mutable_outpoint();
  public:

  // int64 amount_sat = 3;
  void clear_amount_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 amount_sat() const;
  void set_amount_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount_sat() const;
  void _internal_set_amount_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 confirmations = 6;
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::int64 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .lnrpc.AddressType address_type = 1;
  void clear_address_type();
  ::lnrpc::AddressType address_type() const;
  void set_address_type(::lnrpc::AddressType value);
  private:
  ::lnrpc::AddressType _internal_address_type() const;
  void _internal_set_address_type(::lnrpc::AddressType value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Utxo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pk_script_;
  ::lnrpc::OutPoint* outpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 confirmations_;
  int address_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Transaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Transaction) */ {
 public:
  Transaction();
  virtual ~Transaction();

  Transaction(const Transaction& from);
  Transaction(Transaction&& from) noexcept
    : Transaction() {
    *this = ::std::move(from);
  }

  inline Transaction& operator=(const Transaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transaction& operator=(Transaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transaction* internal_default_instance() {
    return reinterpret_cast<const Transaction*>(
               &_Transaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Transaction& a, Transaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Transaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transaction* New() const final {
    return CreateMaybeMessage<Transaction>(nullptr);
  }

  Transaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transaction& from);
  void MergeFrom(const Transaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Transaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestAddressesFieldNumber = 8,
    kTxHashFieldNumber = 1,
    kBlockHashFieldNumber = 4,
    kRawTxHexFieldNumber = 9,
    kLabelFieldNumber = 10,
    kAmountFieldNumber = 2,
    kNumConfirmationsFieldNumber = 3,
    kBlockHeightFieldNumber = 5,
    kTimeStampFieldNumber = 6,
    kTotalFeesFieldNumber = 7,
  };
  // repeated string dest_addresses = 8;
  int dest_addresses_size() const;
  private:
  int _internal_dest_addresses_size() const;
  public:
  void clear_dest_addresses();
  const std::string& dest_addresses(int index) const;
  std::string* mutable_dest_addresses(int index);
  void set_dest_addresses(int index, const std::string& value);
  void set_dest_addresses(int index, std::string&& value);
  void set_dest_addresses(int index, const char* value);
  void set_dest_addresses(int index, const char* value, size_t size);
  std::string* add_dest_addresses();
  void add_dest_addresses(const std::string& value);
  void add_dest_addresses(std::string&& value);
  void add_dest_addresses(const char* value);
  void add_dest_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& dest_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_dest_addresses();
  private:
  const std::string& _internal_dest_addresses(int index) const;
  std::string* _internal_add_dest_addresses();
  public:

  // string tx_hash = 1;
  void clear_tx_hash();
  const std::string& tx_hash() const;
  void set_tx_hash(const std::string& value);
  void set_tx_hash(std::string&& value);
  void set_tx_hash(const char* value);
  void set_tx_hash(const char* value, size_t size);
  std::string* mutable_tx_hash();
  std::string* release_tx_hash();
  void set_allocated_tx_hash(std::string* tx_hash);
  private:
  const std::string& _internal_tx_hash() const;
  void _internal_set_tx_hash(const std::string& value);
  std::string* _internal_mutable_tx_hash();
  public:

  // string block_hash = 4;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const char* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // string raw_tx_hex = 9;
  void clear_raw_tx_hex();
  const std::string& raw_tx_hex() const;
  void set_raw_tx_hex(const std::string& value);
  void set_raw_tx_hex(std::string&& value);
  void set_raw_tx_hex(const char* value);
  void set_raw_tx_hex(const char* value, size_t size);
  std::string* mutable_raw_tx_hex();
  std::string* release_raw_tx_hex();
  void set_allocated_raw_tx_hex(std::string* raw_tx_hex);
  private:
  const std::string& _internal_raw_tx_hex() const;
  void _internal_set_raw_tx_hex(const std::string& value);
  std::string* _internal_mutable_raw_tx_hex();
  public:

  // string label = 10;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 num_confirmations = 3;
  void clear_num_confirmations();
  ::PROTOBUF_NAMESPACE_ID::int32 num_confirmations() const;
  void set_num_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_confirmations() const;
  void _internal_set_num_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 block_height = 5;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 time_stamp = 6;
  void clear_time_stamp();
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp() const;
  void set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_stamp() const;
  void _internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_fees = 7;
  void clear_total_fees();
  ::PROTOBUF_NAMESPACE_ID::int64 total_fees() const;
  void set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_fees() const;
  void _internal_set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Transaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> dest_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_tx_hex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_confirmations_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_stamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_fees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GetTransactionsRequest) */ {
 public:
  GetTransactionsRequest();
  virtual ~GetTransactionsRequest();

  GetTransactionsRequest(const GetTransactionsRequest& from);
  GetTransactionsRequest(GetTransactionsRequest&& from) noexcept
    : GetTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline GetTransactionsRequest& operator=(const GetTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionsRequest& operator=(GetTransactionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTransactionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionsRequest*>(
               &_GetTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetTransactionsRequest& a, GetTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTransactionsRequest* New() const final {
    return CreateMaybeMessage<GetTransactionsRequest>(nullptr);
  }

  GetTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTransactionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTransactionsRequest& from);
  void MergeFrom(const GetTransactionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GetTransactionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kStartHeightFieldNumber = 1,
    kEndHeightFieldNumber = 2,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int32 start_height = 1;
  void clear_start_height();
  ::PROTOBUF_NAMESPACE_ID::int32 start_height() const;
  void set_start_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_height() const;
  void _internal_set_start_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_height = 2;
  void clear_end_height();
  ::PROTOBUF_NAMESPACE_ID::int32 end_height() const;
  void set_end_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_height() const;
  void _internal_set_end_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.GetTransactionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class TransactionDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.TransactionDetails) */ {
 public:
  TransactionDetails();
  virtual ~TransactionDetails();

  TransactionDetails(const TransactionDetails& from);
  TransactionDetails(TransactionDetails&& from) noexcept
    : TransactionDetails() {
    *this = ::std::move(from);
  }

  inline TransactionDetails& operator=(const TransactionDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionDetails& operator=(TransactionDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionDetails* internal_default_instance() {
    return reinterpret_cast<const TransactionDetails*>(
               &_TransactionDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TransactionDetails& a, TransactionDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionDetails* New() const final {
    return CreateMaybeMessage<TransactionDetails>(nullptr);
  }

  TransactionDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionDetails& from);
  void MergeFrom(const TransactionDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.TransactionDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated .lnrpc.Transaction transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  ::lnrpc::Transaction* mutable_transactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Transaction >*
      mutable_transactions();
  private:
  const ::lnrpc::Transaction& _internal_transactions(int index) const;
  ::lnrpc::Transaction* _internal_add_transactions();
  public:
  const ::lnrpc::Transaction& transactions(int index) const;
  ::lnrpc::Transaction* add_transactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Transaction >&
      transactions() const;

  // @@protoc_insertion_point(class_scope:lnrpc.TransactionDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Transaction > transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FeeLimit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FeeLimit) */ {
 public:
  FeeLimit();
  virtual ~FeeLimit();

  FeeLimit(const FeeLimit& from);
  FeeLimit(FeeLimit&& from) noexcept
    : FeeLimit() {
    *this = ::std::move(from);
  }

  inline FeeLimit& operator=(const FeeLimit& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeLimit& operator=(FeeLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeLimit& default_instance();

  enum LimitCase {
    kFixed = 1,
    kFixedMsat = 3,
    kPercent = 2,
    LIMIT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeLimit* internal_default_instance() {
    return reinterpret_cast<const FeeLimit*>(
               &_FeeLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FeeLimit& a, FeeLimit& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeLimit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeLimit* New() const final {
    return CreateMaybeMessage<FeeLimit>(nullptr);
  }

  FeeLimit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeLimit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeLimit& from);
  void MergeFrom(const FeeLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeLimit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FeeLimit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedFieldNumber = 1,
    kFixedMsatFieldNumber = 3,
    kPercentFieldNumber = 2,
  };
  // int64 fixed = 1;
  private:
  bool _internal_has_fixed() const;
  public:
  void clear_fixed();
  ::PROTOBUF_NAMESPACE_ID::int64 fixed() const;
  void set_fixed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fixed() const;
  void _internal_set_fixed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fixed_msat = 3;
  private:
  bool _internal_has_fixed_msat() const;
  public:
  void clear_fixed_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fixed_msat() const;
  void set_fixed_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fixed_msat() const;
  void _internal_set_fixed_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 percent = 2;
  private:
  bool _internal_has_percent() const;
  public:
  void clear_percent();
  ::PROTOBUF_NAMESPACE_ID::int64 percent() const;
  void set_percent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_percent() const;
  void _internal_set_percent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_limit();
  LimitCase limit_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.FeeLimit)
 private:
  class _Internal;
  void set_has_fixed();
  void set_has_fixed_msat();
  void set_has_percent();

  inline bool has_limit() const;
  inline void clear_has_limit();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union LimitUnion {
    LimitUnion() {}
    ::PROTOBUF_NAMESPACE_ID::int64 fixed_;
    ::PROTOBUF_NAMESPACE_ID::int64 fixed_msat_;
    ::PROTOBUF_NAMESPACE_ID::int64 percent_;
  } limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendRequest_DestCustomRecordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  SendRequest_DestCustomRecordsEntry_DoNotUse();
  SendRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SendRequest_DestCustomRecordsEntry_DoNotUse& other);
  static const SendRequest_DestCustomRecordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SendRequest_DestCustomRecordsEntry_DoNotUse*>(&_SendRequest_DestCustomRecordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class SendRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendRequest) */ {
 public:
  SendRequest();
  virtual ~SendRequest();

  SendRequest(const SendRequest& from);
  SendRequest(SendRequest&& from) noexcept
    : SendRequest() {
    *this = ::std::move(from);
  }

  inline SendRequest& operator=(const SendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendRequest& operator=(SendRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendRequest* internal_default_instance() {
    return reinterpret_cast<const SendRequest*>(
               &_SendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SendRequest& a, SendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendRequest* New() const final {
    return CreateMaybeMessage<SendRequest>(nullptr);
  }

  SendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendRequest& from);
  void MergeFrom(const SendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kDestCustomRecordsFieldNumber = 11,
    kDestFeaturesFieldNumber = 15,
    kDestFieldNumber = 1,
    kDestStringFieldNumber = 2,
    kPaymentHashFieldNumber = 4,
    kPaymentHashStringFieldNumber = 5,
    kPaymentRequestFieldNumber = 6,
    kLastHopPubkeyFieldNumber = 13,
    kPaymentAddrFieldNumber = 16,
    kFeeLimitFieldNumber = 8,
    kAmtFieldNumber = 3,
    kFinalCltvDeltaFieldNumber = 7,
    kCltvLimitFieldNumber = 10,
    kOutgoingChanIdFieldNumber = 9,
    kAmtMsatFieldNumber = 12,
    kAllowSelfPaymentFieldNumber = 14,
  };
  // map<uint64, bytes> dest_custom_records = 11;
  int dest_custom_records_size() const;
  private:
  int _internal_dest_custom_records_size() const;
  public:
  void clear_dest_custom_records();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_dest_custom_records();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_dest_custom_records();

  // repeated .lnrpc.FeatureBit dest_features = 15;
  int dest_features_size() const;
  private:
  int _internal_dest_features_size() const;
  public:
  void clear_dest_features();
  private:
  ::lnrpc::FeatureBit _internal_dest_features(int index) const;
  void _internal_add_dest_features(::lnrpc::FeatureBit value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dest_features();
  public:
  ::lnrpc::FeatureBit dest_features(int index) const;
  void set_dest_features(int index, ::lnrpc::FeatureBit value);
  void add_dest_features(::lnrpc::FeatureBit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dest_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dest_features();

  // bytes dest = 1;
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const void* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // string dest_string = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_dest_string();
  PROTOBUF_DEPRECATED const std::string& dest_string() const;
  PROTOBUF_DEPRECATED void set_dest_string(const std::string& value);
  PROTOBUF_DEPRECATED void set_dest_string(std::string&& value);
  PROTOBUF_DEPRECATED void set_dest_string(const char* value);
  PROTOBUF_DEPRECATED void set_dest_string(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_dest_string();
  PROTOBUF_DEPRECATED std::string* release_dest_string();
  PROTOBUF_DEPRECATED void set_allocated_dest_string(std::string* dest_string);
  private:
  const std::string& _internal_dest_string() const;
  void _internal_set_dest_string(const std::string& value);
  std::string* _internal_mutable_dest_string();
  public:

  // bytes payment_hash = 4;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // string payment_hash_string = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_payment_hash_string();
  PROTOBUF_DEPRECATED const std::string& payment_hash_string() const;
  PROTOBUF_DEPRECATED void set_payment_hash_string(const std::string& value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(std::string&& value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(const char* value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_payment_hash_string();
  PROTOBUF_DEPRECATED std::string* release_payment_hash_string();
  PROTOBUF_DEPRECATED void set_allocated_payment_hash_string(std::string* payment_hash_string);
  private:
  const std::string& _internal_payment_hash_string() const;
  void _internal_set_payment_hash_string(const std::string& value);
  std::string* _internal_mutable_payment_hash_string();
  public:

  // string payment_request = 6;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // bytes last_hop_pubkey = 13;
  void clear_last_hop_pubkey();
  const std::string& last_hop_pubkey() const;
  void set_last_hop_pubkey(const std::string& value);
  void set_last_hop_pubkey(std::string&& value);
  void set_last_hop_pubkey(const char* value);
  void set_last_hop_pubkey(const void* value, size_t size);
  std::string* mutable_last_hop_pubkey();
  std::string* release_last_hop_pubkey();
  void set_allocated_last_hop_pubkey(std::string* last_hop_pubkey);
  private:
  const std::string& _internal_last_hop_pubkey() const;
  void _internal_set_last_hop_pubkey(const std::string& value);
  std::string* _internal_mutable_last_hop_pubkey();
  public:

  // bytes payment_addr = 16;
  void clear_payment_addr();
  const std::string& payment_addr() const;
  void set_payment_addr(const std::string& value);
  void set_payment_addr(std::string&& value);
  void set_payment_addr(const char* value);
  void set_payment_addr(const void* value, size_t size);
  std::string* mutable_payment_addr();
  std::string* release_payment_addr();
  void set_allocated_payment_addr(std::string* payment_addr);
  private:
  const std::string& _internal_payment_addr() const;
  void _internal_set_payment_addr(const std::string& value);
  std::string* _internal_mutable_payment_addr();
  public:

  // .lnrpc.FeeLimit fee_limit = 8;
  bool has_fee_limit() const;
  private:
  bool _internal_has_fee_limit() const;
  public:
  void clear_fee_limit();
  const ::lnrpc::FeeLimit& fee_limit() const;
  ::lnrpc::FeeLimit* release_fee_limit();
  ::lnrpc::FeeLimit* mutable_fee_limit();
  void set_allocated_fee_limit(::lnrpc::FeeLimit* fee_limit);
  private:
  const ::lnrpc::FeeLimit& _internal_fee_limit() const;
  ::lnrpc::FeeLimit* _internal_mutable_fee_limit();
  public:

  // int64 amt = 3;
  void clear_amt();
  ::PROTOBUF_NAMESPACE_ID::int64 amt() const;
  void set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt() const;
  void _internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 final_cltv_delta = 7;
  void clear_final_cltv_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta() const;
  void set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_cltv_delta() const;
  void _internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 cltv_limit = 10;
  void clear_cltv_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_limit() const;
  void set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cltv_limit() const;
  void _internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 outgoing_chan_id = 9 [jstype = JS_STRING];
  void clear_outgoing_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id() const;
  void set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_chan_id() const;
  void _internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 amt_msat = 12;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool allow_self_payment = 14;
  void clear_allow_self_payment();
  bool allow_self_payment() const;
  void set_allow_self_payment(bool value);
  private:
  bool _internal_allow_self_payment() const;
  void _internal_set_allow_self_payment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SendRequest_DestCustomRecordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > dest_custom_records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dest_features_;
  mutable std::atomic<int> _dest_features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_hop_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_addr_;
  ::lnrpc::FeeLimit* fee_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat_;
  bool allow_self_payment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendResponse) */ {
 public:
  SendResponse();
  virtual ~SendResponse();

  SendResponse(const SendResponse& from);
  SendResponse(SendResponse&& from) noexcept
    : SendResponse() {
    *this = ::std::move(from);
  }

  inline SendResponse& operator=(const SendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendResponse& operator=(SendResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendResponse* internal_default_instance() {
    return reinterpret_cast<const SendResponse*>(
               &_SendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendResponse& a, SendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendResponse* New() const final {
    return CreateMaybeMessage<SendResponse>(nullptr);
  }

  SendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendResponse& from);
  void MergeFrom(const SendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentErrorFieldNumber = 1,
    kPaymentPreimageFieldNumber = 2,
    kPaymentHashFieldNumber = 4,
    kPaymentRouteFieldNumber = 3,
  };
  // string payment_error = 1;
  void clear_payment_error();
  const std::string& payment_error() const;
  void set_payment_error(const std::string& value);
  void set_payment_error(std::string&& value);
  void set_payment_error(const char* value);
  void set_payment_error(const char* value, size_t size);
  std::string* mutable_payment_error();
  std::string* release_payment_error();
  void set_allocated_payment_error(std::string* payment_error);
  private:
  const std::string& _internal_payment_error() const;
  void _internal_set_payment_error(const std::string& value);
  std::string* _internal_mutable_payment_error();
  public:

  // bytes payment_preimage = 2;
  void clear_payment_preimage();
  const std::string& payment_preimage() const;
  void set_payment_preimage(const std::string& value);
  void set_payment_preimage(std::string&& value);
  void set_payment_preimage(const char* value);
  void set_payment_preimage(const void* value, size_t size);
  std::string* mutable_payment_preimage();
  std::string* release_payment_preimage();
  void set_allocated_payment_preimage(std::string* payment_preimage);
  private:
  const std::string& _internal_payment_preimage() const;
  void _internal_set_payment_preimage(const std::string& value);
  std::string* _internal_mutable_payment_preimage();
  public:

  // bytes payment_hash = 4;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // .lnrpc.Route payment_route = 3;
  bool has_payment_route() const;
  private:
  bool _internal_has_payment_route() const;
  public:
  void clear_payment_route();
  const ::lnrpc::Route& payment_route() const;
  ::lnrpc::Route* release_payment_route();
  ::lnrpc::Route* mutable_payment_route();
  void set_allocated_payment_route(::lnrpc::Route* payment_route);
  private:
  const ::lnrpc::Route& _internal_payment_route() const;
  ::lnrpc::Route* _internal_mutable_payment_route();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_preimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::lnrpc::Route* payment_route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendToRouteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendToRouteRequest) */ {
 public:
  SendToRouteRequest();
  virtual ~SendToRouteRequest();

  SendToRouteRequest(const SendToRouteRequest& from);
  SendToRouteRequest(SendToRouteRequest&& from) noexcept
    : SendToRouteRequest() {
    *this = ::std::move(from);
  }

  inline SendToRouteRequest& operator=(const SendToRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToRouteRequest& operator=(SendToRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRouteRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRouteRequest*>(
               &_SendToRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SendToRouteRequest& a, SendToRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToRouteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToRouteRequest* New() const final {
    return CreateMaybeMessage<SendToRouteRequest>(nullptr);
  }

  SendToRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToRouteRequest& from);
  void MergeFrom(const SendToRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendToRouteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kPaymentHashStringFieldNumber = 2,
    kRouteFieldNumber = 4,
  };
  // bytes payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // string payment_hash_string = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_payment_hash_string();
  PROTOBUF_DEPRECATED const std::string& payment_hash_string() const;
  PROTOBUF_DEPRECATED void set_payment_hash_string(const std::string& value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(std::string&& value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(const char* value);
  PROTOBUF_DEPRECATED void set_payment_hash_string(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_payment_hash_string();
  PROTOBUF_DEPRECATED std::string* release_payment_hash_string();
  PROTOBUF_DEPRECATED void set_allocated_payment_hash_string(std::string* payment_hash_string);
  private:
  const std::string& _internal_payment_hash_string() const;
  void _internal_set_payment_hash_string(const std::string& value);
  std::string* _internal_mutable_payment_hash_string();
  public:

  // .lnrpc.Route route = 4;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::lnrpc::Route& route() const;
  ::lnrpc::Route* release_route();
  ::lnrpc::Route* mutable_route();
  void set_allocated_route(::lnrpc::Route* route);
  private:
  const ::lnrpc::Route& _internal_route() const;
  ::lnrpc::Route* _internal_mutable_route();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendToRouteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_string_;
  ::lnrpc::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelAcceptRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelAcceptRequest) */ {
 public:
  ChannelAcceptRequest();
  virtual ~ChannelAcceptRequest();

  ChannelAcceptRequest(const ChannelAcceptRequest& from);
  ChannelAcceptRequest(ChannelAcceptRequest&& from) noexcept
    : ChannelAcceptRequest() {
    *this = ::std::move(from);
  }

  inline ChannelAcceptRequest& operator=(const ChannelAcceptRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelAcceptRequest& operator=(ChannelAcceptRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelAcceptRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelAcceptRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelAcceptRequest*>(
               &_ChannelAcceptRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChannelAcceptRequest& a, ChannelAcceptRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelAcceptRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelAcceptRequest* New() const final {
    return CreateMaybeMessage<ChannelAcceptRequest>(nullptr);
  }

  ChannelAcceptRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelAcceptRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelAcceptRequest& from);
  void MergeFrom(const ChannelAcceptRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelAcceptRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelAcceptRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodePubkeyFieldNumber = 1,
    kChainHashFieldNumber = 2,
    kPendingChanIdFieldNumber = 3,
    kFundingAmtFieldNumber = 4,
    kPushAmtFieldNumber = 5,
    kDustLimitFieldNumber = 6,
    kMaxValueInFlightFieldNumber = 7,
    kChannelReserveFieldNumber = 8,
    kMinHtlcFieldNumber = 9,
    kFeePerKwFieldNumber = 10,
    kCsvDelayFieldNumber = 11,
    kMaxAcceptedHtlcsFieldNumber = 12,
    kChannelFlagsFieldNumber = 13,
  };
  // bytes node_pubkey = 1;
  void clear_node_pubkey();
  const std::string& node_pubkey() const;
  void set_node_pubkey(const std::string& value);
  void set_node_pubkey(std::string&& value);
  void set_node_pubkey(const char* value);
  void set_node_pubkey(const void* value, size_t size);
  std::string* mutable_node_pubkey();
  std::string* release_node_pubkey();
  void set_allocated_node_pubkey(std::string* node_pubkey);
  private:
  const std::string& _internal_node_pubkey() const;
  void _internal_set_node_pubkey(const std::string& value);
  std::string* _internal_mutable_node_pubkey();
  public:

  // bytes chain_hash = 2;
  void clear_chain_hash();
  const std::string& chain_hash() const;
  void set_chain_hash(const std::string& value);
  void set_chain_hash(std::string&& value);
  void set_chain_hash(const char* value);
  void set_chain_hash(const void* value, size_t size);
  std::string* mutable_chain_hash();
  std::string* release_chain_hash();
  void set_allocated_chain_hash(std::string* chain_hash);
  private:
  const std::string& _internal_chain_hash() const;
  void _internal_set_chain_hash(const std::string& value);
  std::string* _internal_mutable_chain_hash();
  public:

  // bytes pending_chan_id = 3;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // uint64 funding_amt = 4;
  void clear_funding_amt();
  ::PROTOBUF_NAMESPACE_ID::uint64 funding_amt() const;
  void set_funding_amt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_funding_amt() const;
  void _internal_set_funding_amt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 push_amt = 5;
  void clear_push_amt();
  ::PROTOBUF_NAMESPACE_ID::uint64 push_amt() const;
  void set_push_amt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_push_amt() const;
  void _internal_set_push_amt(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dust_limit = 6;
  void clear_dust_limit();
  ::PROTOBUF_NAMESPACE_ID::uint64 dust_limit() const;
  void set_dust_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dust_limit() const;
  void _internal_set_dust_limit(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_value_in_flight = 7;
  void clear_max_value_in_flight();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_value_in_flight() const;
  void set_max_value_in_flight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_value_in_flight() const;
  void _internal_set_max_value_in_flight(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 channel_reserve = 8;
  void clear_channel_reserve();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_reserve() const;
  void set_channel_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_reserve() const;
  void _internal_set_channel_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_htlc = 9;
  void clear_min_htlc();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc() const;
  void set_min_htlc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_htlc() const;
  void _internal_set_min_htlc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee_per_kw = 10;
  void clear_fee_per_kw();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_per_kw() const;
  void set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee_per_kw() const;
  void _internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 csv_delay = 11;
  void clear_csv_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay() const;
  void set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_csv_delay() const;
  void _internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_accepted_htlcs = 12;
  void clear_max_accepted_htlcs();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_accepted_htlcs() const;
  void set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_accepted_htlcs() const;
  void _internal_set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel_flags = 13;
  void clear_channel_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_flags() const;
  void set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_flags() const;
  void _internal_set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelAcceptRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 funding_amt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 push_amt_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dust_limit_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_value_in_flight_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_reserve_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_per_kw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_accepted_htlcs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelAcceptResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelAcceptResponse) */ {
 public:
  ChannelAcceptResponse();
  virtual ~ChannelAcceptResponse();

  ChannelAcceptResponse(const ChannelAcceptResponse& from);
  ChannelAcceptResponse(ChannelAcceptResponse&& from) noexcept
    : ChannelAcceptResponse() {
    *this = ::std::move(from);
  }

  inline ChannelAcceptResponse& operator=(const ChannelAcceptResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelAcceptResponse& operator=(ChannelAcceptResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelAcceptResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelAcceptResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelAcceptResponse*>(
               &_ChannelAcceptResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChannelAcceptResponse& a, ChannelAcceptResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelAcceptResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelAcceptResponse* New() const final {
    return CreateMaybeMessage<ChannelAcceptResponse>(nullptr);
  }

  ChannelAcceptResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelAcceptResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelAcceptResponse& from);
  void MergeFrom(const ChannelAcceptResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelAcceptResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelAcceptResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingChanIdFieldNumber = 2,
    kErrorFieldNumber = 3,
    kUpfrontShutdownFieldNumber = 4,
    kAcceptFieldNumber = 1,
    kCsvDelayFieldNumber = 5,
    kReserveSatFieldNumber = 6,
    kInFlightMaxMsatFieldNumber = 7,
    kMinHtlcInFieldNumber = 9,
    kMaxHtlcCountFieldNumber = 8,
    kMinAcceptDepthFieldNumber = 10,
  };
  // bytes pending_chan_id = 2;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // string error = 3;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // string upfront_shutdown = 4;
  void clear_upfront_shutdown();
  const std::string& upfront_shutdown() const;
  void set_upfront_shutdown(const std::string& value);
  void set_upfront_shutdown(std::string&& value);
  void set_upfront_shutdown(const char* value);
  void set_upfront_shutdown(const char* value, size_t size);
  std::string* mutable_upfront_shutdown();
  std::string* release_upfront_shutdown();
  void set_allocated_upfront_shutdown(std::string* upfront_shutdown);
  private:
  const std::string& _internal_upfront_shutdown() const;
  void _internal_set_upfront_shutdown(const std::string& value);
  std::string* _internal_mutable_upfront_shutdown();
  public:

  // bool accept = 1;
  void clear_accept();
  bool accept() const;
  void set_accept(bool value);
  private:
  bool _internal_accept() const;
  void _internal_set_accept(bool value);
  public:

  // uint32 csv_delay = 5;
  void clear_csv_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay() const;
  void set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_csv_delay() const;
  void _internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 reserve_sat = 6;
  void clear_reserve_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_sat() const;
  void set_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reserve_sat() const;
  void _internal_set_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 in_flight_max_msat = 7;
  void clear_in_flight_max_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 in_flight_max_msat() const;
  void set_in_flight_max_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_in_flight_max_msat() const;
  void _internal_set_in_flight_max_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_htlc_in = 9;
  void clear_min_htlc_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_in() const;
  void set_min_htlc_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_htlc_in() const;
  void _internal_set_min_htlc_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 max_htlc_count = 8;
  void clear_max_htlc_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_htlc_count() const;
  void set_max_htlc_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_htlc_count() const;
  void _internal_set_max_htlc_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 min_accept_depth = 10;
  void clear_min_accept_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 min_accept_depth() const;
  void set_min_accept_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_min_accept_depth() const;
  void _internal_set_min_accept_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelAcceptResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upfront_shutdown_;
  bool accept_;
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reserve_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 in_flight_max_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_in_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_htlc_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 min_accept_depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelPoint) */ {
 public:
  ChannelPoint();
  virtual ~ChannelPoint();

  ChannelPoint(const ChannelPoint& from);
  ChannelPoint(ChannelPoint&& from) noexcept
    : ChannelPoint() {
    *this = ::std::move(from);
  }

  inline ChannelPoint& operator=(const ChannelPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelPoint& operator=(ChannelPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelPoint& default_instance();

  enum FundingTxidCase {
    kFundingTxidBytes = 1,
    kFundingTxidStr = 2,
    FUNDING_TXID_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelPoint* internal_default_instance() {
    return reinterpret_cast<const ChannelPoint*>(
               &_ChannelPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChannelPoint& a, ChannelPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelPoint* New() const final {
    return CreateMaybeMessage<ChannelPoint>(nullptr);
  }

  ChannelPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelPoint& from);
  void MergeFrom(const ChannelPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputIndexFieldNumber = 3,
    kFundingTxidBytesFieldNumber = 1,
    kFundingTxidStrFieldNumber = 2,
  };
  // uint32 output_index = 3;
  void clear_output_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index() const;
  void set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_index() const;
  void _internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bytes funding_txid_bytes = 1;
  private:
  bool _internal_has_funding_txid_bytes() const;
  public:
  void clear_funding_txid_bytes();
  const std::string& funding_txid_bytes() const;
  void set_funding_txid_bytes(const std::string& value);
  void set_funding_txid_bytes(std::string&& value);
  void set_funding_txid_bytes(const char* value);
  void set_funding_txid_bytes(const void* value, size_t size);
  std::string* mutable_funding_txid_bytes();
  std::string* release_funding_txid_bytes();
  void set_allocated_funding_txid_bytes(std::string* funding_txid_bytes);
  private:
  const std::string& _internal_funding_txid_bytes() const;
  void _internal_set_funding_txid_bytes(const std::string& value);
  std::string* _internal_mutable_funding_txid_bytes();
  public:

  // string funding_txid_str = 2;
  private:
  bool _internal_has_funding_txid_str() const;
  public:
  void clear_funding_txid_str();
  const std::string& funding_txid_str() const;
  void set_funding_txid_str(const std::string& value);
  void set_funding_txid_str(std::string&& value);
  void set_funding_txid_str(const char* value);
  void set_funding_txid_str(const char* value, size_t size);
  std::string* mutable_funding_txid_str();
  std::string* release_funding_txid_str();
  void set_allocated_funding_txid_str(std::string* funding_txid_str);
  private:
  const std::string& _internal_funding_txid_str() const;
  void _internal_set_funding_txid_str(const std::string& value);
  std::string* _internal_mutable_funding_txid_str();
  public:

  void clear_funding_txid();
  FundingTxidCase funding_txid_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.ChannelPoint)
 private:
  class _Internal;
  void set_has_funding_txid_bytes();
  void set_has_funding_txid_str();

  inline bool has_funding_txid() const;
  inline void clear_has_funding_txid();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index_;
  union FundingTxidUnion {
    FundingTxidUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_txid_bytes_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_txid_str_;
  } funding_txid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class OutPoint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.OutPoint) */ {
 public:
  OutPoint();
  virtual ~OutPoint();

  OutPoint(const OutPoint& from);
  OutPoint(OutPoint&& from) noexcept
    : OutPoint() {
    *this = ::std::move(from);
  }

  inline OutPoint& operator=(const OutPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline OutPoint& operator=(OutPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OutPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OutPoint* internal_default_instance() {
    return reinterpret_cast<const OutPoint*>(
               &_OutPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OutPoint& a, OutPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(OutPoint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OutPoint* New() const final {
    return CreateMaybeMessage<OutPoint>(nullptr);
  }

  OutPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OutPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OutPoint& from);
  void MergeFrom(const OutPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OutPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.OutPoint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidBytesFieldNumber = 1,
    kTxidStrFieldNumber = 2,
    kOutputIndexFieldNumber = 3,
  };
  // bytes txid_bytes = 1;
  void clear_txid_bytes();
  const std::string& txid_bytes() const;
  void set_txid_bytes(const std::string& value);
  void set_txid_bytes(std::string&& value);
  void set_txid_bytes(const char* value);
  void set_txid_bytes(const void* value, size_t size);
  std::string* mutable_txid_bytes();
  std::string* release_txid_bytes();
  void set_allocated_txid_bytes(std::string* txid_bytes);
  private:
  const std::string& _internal_txid_bytes() const;
  void _internal_set_txid_bytes(const std::string& value);
  std::string* _internal_mutable_txid_bytes();
  public:

  // string txid_str = 2;
  void clear_txid_str();
  const std::string& txid_str() const;
  void set_txid_str(const std::string& value);
  void set_txid_str(std::string&& value);
  void set_txid_str(const char* value);
  void set_txid_str(const char* value, size_t size);
  std::string* mutable_txid_str();
  std::string* release_txid_str();
  void set_allocated_txid_str(std::string* txid_str);
  private:
  const std::string& _internal_txid_str() const;
  void _internal_set_txid_str(const std::string& value);
  std::string* _internal_mutable_txid_str();
  public:

  // uint32 output_index = 3;
  void clear_output_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index() const;
  void set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_index() const;
  void _internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.OutPoint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_bytes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_str_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LightningAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.LightningAddress) */ {
 public:
  LightningAddress();
  virtual ~LightningAddress();

  LightningAddress(const LightningAddress& from);
  LightningAddress(LightningAddress&& from) noexcept
    : LightningAddress() {
    *this = ::std::move(from);
  }

  inline LightningAddress& operator=(const LightningAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightningAddress& operator=(LightningAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightningAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightningAddress* internal_default_instance() {
    return reinterpret_cast<const LightningAddress*>(
               &_LightningAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LightningAddress& a, LightningAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(LightningAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightningAddress* New() const final {
    return CreateMaybeMessage<LightningAddress>(nullptr);
  }

  LightningAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightningAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightningAddress& from);
  void MergeFrom(const LightningAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightningAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.LightningAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kHostFieldNumber = 2,
  };
  // string pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // string host = 2;
  void clear_host();
  const std::string& host() const;
  void set_host(const std::string& value);
  void set_host(std::string&& value);
  void set_host(const char* value);
  void set_host(const char* value, size_t size);
  std::string* mutable_host();
  std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.LightningAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeRequest_AddrToAmountEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EstimateFeeRequest_AddrToAmountEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<EstimateFeeRequest_AddrToAmountEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  EstimateFeeRequest_AddrToAmountEntry_DoNotUse();
  EstimateFeeRequest_AddrToAmountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const EstimateFeeRequest_AddrToAmountEntry_DoNotUse& other);
  static const EstimateFeeRequest_AddrToAmountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const EstimateFeeRequest_AddrToAmountEntry_DoNotUse*>(&_EstimateFeeRequest_AddrToAmountEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lnrpc.EstimateFeeRequest.AddrToAmountEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class EstimateFeeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.EstimateFeeRequest) */ {
 public:
  EstimateFeeRequest();
  virtual ~EstimateFeeRequest();

  EstimateFeeRequest(const EstimateFeeRequest& from);
  EstimateFeeRequest(EstimateFeeRequest&& from) noexcept
    : EstimateFeeRequest() {
    *this = ::std::move(from);
  }

  inline EstimateFeeRequest& operator=(const EstimateFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeRequest& operator=(EstimateFeeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateFeeRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeRequest*>(
               &_EstimateFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EstimateFeeRequest& a, EstimateFeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeRequest* New() const final {
    return CreateMaybeMessage<EstimateFeeRequest>(nullptr);
  }

  EstimateFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeRequest& from);
  void MergeFrom(const EstimateFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.EstimateFeeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddrToAmountFieldNumber = 1,
    kTargetConfFieldNumber = 2,
  };
  // map<string, int64> AddrToAmount = 1;
  int addrtoamount_size() const;
  private:
  int _internal_addrtoamount_size() const;
  public:
  void clear_addrtoamount();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_addrtoamount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_addrtoamount();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      addrtoamount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_addrtoamount();

  // int32 target_conf = 2;
  void clear_target_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf() const;
  void set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_conf() const;
  void _internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.EstimateFeeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      EstimateFeeRequest_AddrToAmountEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > addrtoamount_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EstimateFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.EstimateFeeResponse) */ {
 public:
  EstimateFeeResponse();
  virtual ~EstimateFeeResponse();

  EstimateFeeResponse(const EstimateFeeResponse& from);
  EstimateFeeResponse(EstimateFeeResponse&& from) noexcept
    : EstimateFeeResponse() {
    *this = ::std::move(from);
  }

  inline EstimateFeeResponse& operator=(const EstimateFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateFeeResponse& operator=(EstimateFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateFeeResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateFeeResponse*>(
               &_EstimateFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EstimateFeeResponse& a, EstimateFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateFeeResponse* New() const final {
    return CreateMaybeMessage<EstimateFeeResponse>(nullptr);
  }

  EstimateFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateFeeResponse& from);
  void MergeFrom(const EstimateFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.EstimateFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeSatFieldNumber = 1,
    kFeerateSatPerByteFieldNumber = 2,
    kSatPerVbyteFieldNumber = 3,
  };
  // int64 fee_sat = 1;
  void clear_fee_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_sat() const;
  void set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_sat() const;
  void _internal_set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 feerate_sat_per_byte = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_feerate_sat_per_byte();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 feerate_sat_per_byte() const;
  PROTOBUF_DEPRECATED void set_feerate_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_feerate_sat_per_byte() const;
  void _internal_set_feerate_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 sat_per_vbyte = 3;
  void clear_sat_per_vbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte() const;
  void set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat_per_vbyte() const;
  void _internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.EstimateFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 feerate_sat_per_byte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendManyRequest_AddrToAmountEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendManyRequest_AddrToAmountEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendManyRequest_AddrToAmountEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  SendManyRequest_AddrToAmountEntry_DoNotUse();
  SendManyRequest_AddrToAmountEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SendManyRequest_AddrToAmountEntry_DoNotUse& other);
  static const SendManyRequest_AddrToAmountEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SendManyRequest_AddrToAmountEntry_DoNotUse*>(&_SendManyRequest_AddrToAmountEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lnrpc.SendManyRequest.AddrToAmountEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class SendManyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendManyRequest) */ {
 public:
  SendManyRequest();
  virtual ~SendManyRequest();

  SendManyRequest(const SendManyRequest& from);
  SendManyRequest(SendManyRequest&& from) noexcept
    : SendManyRequest() {
    *this = ::std::move(from);
  }

  inline SendManyRequest& operator=(const SendManyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendManyRequest& operator=(SendManyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendManyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyRequest* internal_default_instance() {
    return reinterpret_cast<const SendManyRequest*>(
               &_SendManyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(SendManyRequest& a, SendManyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendManyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendManyRequest* New() const final {
    return CreateMaybeMessage<SendManyRequest>(nullptr);
  }

  SendManyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendManyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendManyRequest& from);
  void MergeFrom(const SendManyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendManyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddrToAmountFieldNumber = 1,
    kLabelFieldNumber = 6,
    kSatPerVbyteFieldNumber = 4,
    kSatPerByteFieldNumber = 5,
    kTargetConfFieldNumber = 3,
    kMinConfsFieldNumber = 7,
    kSpendUnconfirmedFieldNumber = 8,
  };
  // map<string, int64> AddrToAmount = 1;
  int addrtoamount_size() const;
  private:
  int _internal_addrtoamount_size() const;
  public:
  void clear_addrtoamount();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_addrtoamount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_addrtoamount();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
      addrtoamount() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_addrtoamount();

  // string label = 6;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // uint64 sat_per_vbyte = 4;
  void clear_sat_per_vbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte() const;
  void set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat_per_vbyte() const;
  void _internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 sat_per_byte = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sat_per_byte();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte() const;
  PROTOBUF_DEPRECATED void set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_per_byte() const;
  void _internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 target_conf = 3;
  void clear_target_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf() const;
  void set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_conf() const;
  void _internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_confs = 7;
  void clear_min_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs() const;
  void set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_confs() const;
  void _internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool spend_unconfirmed = 8;
  void clear_spend_unconfirmed();
  bool spend_unconfirmed() const;
  void set_spend_unconfirmed(bool value);
  private:
  bool _internal_spend_unconfirmed() const;
  void _internal_set_spend_unconfirmed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendManyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SendManyRequest_AddrToAmountEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > addrtoamount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs_;
  bool spend_unconfirmed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendManyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendManyResponse) */ {
 public:
  SendManyResponse();
  virtual ~SendManyResponse();

  SendManyResponse(const SendManyResponse& from);
  SendManyResponse(SendManyResponse&& from) noexcept
    : SendManyResponse() {
    *this = ::std::move(from);
  }

  inline SendManyResponse& operator=(const SendManyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendManyResponse& operator=(SendManyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendManyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendManyResponse* internal_default_instance() {
    return reinterpret_cast<const SendManyResponse*>(
               &_SendManyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SendManyResponse& a, SendManyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendManyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendManyResponse* New() const final {
    return CreateMaybeMessage<SendManyResponse>(nullptr);
  }

  SendManyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendManyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendManyResponse& from);
  void MergeFrom(const SendManyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendManyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendManyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
  };
  // string txid = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendManyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendCoinsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendCoinsRequest) */ {
 public:
  SendCoinsRequest();
  virtual ~SendCoinsRequest();

  SendCoinsRequest(const SendCoinsRequest& from);
  SendCoinsRequest(SendCoinsRequest&& from) noexcept
    : SendCoinsRequest() {
    *this = ::std::move(from);
  }

  inline SendCoinsRequest& operator=(const SendCoinsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCoinsRequest& operator=(SendCoinsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCoinsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCoinsRequest* internal_default_instance() {
    return reinterpret_cast<const SendCoinsRequest*>(
               &_SendCoinsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(SendCoinsRequest& a, SendCoinsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCoinsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCoinsRequest* New() const final {
    return CreateMaybeMessage<SendCoinsRequest>(nullptr);
  }

  SendCoinsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCoinsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCoinsRequest& from);
  void MergeFrom(const SendCoinsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCoinsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendCoinsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kLabelFieldNumber = 7,
    kAmountFieldNumber = 2,
    kSatPerVbyteFieldNumber = 4,
    kSatPerByteFieldNumber = 5,
    kTargetConfFieldNumber = 3,
    kSendAllFieldNumber = 6,
    kSpendUnconfirmedFieldNumber = 9,
    kMinConfsFieldNumber = 8,
  };
  // string addr = 1;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // string label = 7;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 sat_per_vbyte = 4;
  void clear_sat_per_vbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte() const;
  void set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat_per_vbyte() const;
  void _internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 sat_per_byte = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sat_per_byte();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte() const;
  PROTOBUF_DEPRECATED void set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_per_byte() const;
  void _internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 target_conf = 3;
  void clear_target_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf() const;
  void set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_conf() const;
  void _internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool send_all = 6;
  void clear_send_all();
  bool send_all() const;
  void set_send_all(bool value);
  private:
  bool _internal_send_all() const;
  void _internal_set_send_all(bool value);
  public:

  // bool spend_unconfirmed = 9;
  void clear_spend_unconfirmed();
  bool spend_unconfirmed() const;
  void set_spend_unconfirmed(bool value);
  private:
  bool _internal_spend_unconfirmed() const;
  void _internal_set_spend_unconfirmed(bool value);
  public:

  // int32 min_confs = 8;
  void clear_min_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs() const;
  void set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_confs() const;
  void _internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendCoinsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf_;
  bool send_all_;
  bool spend_unconfirmed_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SendCoinsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SendCoinsResponse) */ {
 public:
  SendCoinsResponse();
  virtual ~SendCoinsResponse();

  SendCoinsResponse(const SendCoinsResponse& from);
  SendCoinsResponse(SendCoinsResponse&& from) noexcept
    : SendCoinsResponse() {
    *this = ::std::move(from);
  }

  inline SendCoinsResponse& operator=(const SendCoinsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCoinsResponse& operator=(SendCoinsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendCoinsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendCoinsResponse* internal_default_instance() {
    return reinterpret_cast<const SendCoinsResponse*>(
               &_SendCoinsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SendCoinsResponse& a, SendCoinsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCoinsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCoinsResponse* New() const final {
    return CreateMaybeMessage<SendCoinsResponse>(nullptr);
  }

  SendCoinsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCoinsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCoinsResponse& from);
  void MergeFrom(const SendCoinsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCoinsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SendCoinsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
  };
  // string txid = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SendCoinsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListUnspentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListUnspentRequest) */ {
 public:
  ListUnspentRequest();
  virtual ~ListUnspentRequest();

  ListUnspentRequest(const ListUnspentRequest& from);
  ListUnspentRequest(ListUnspentRequest&& from) noexcept
    : ListUnspentRequest() {
    *this = ::std::move(from);
  }

  inline ListUnspentRequest& operator=(const ListUnspentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUnspentRequest& operator=(ListUnspentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUnspentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUnspentRequest* internal_default_instance() {
    return reinterpret_cast<const ListUnspentRequest*>(
               &_ListUnspentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListUnspentRequest& a, ListUnspentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUnspentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUnspentRequest* New() const final {
    return CreateMaybeMessage<ListUnspentRequest>(nullptr);
  }

  ListUnspentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUnspentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUnspentRequest& from);
  void MergeFrom(const ListUnspentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUnspentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListUnspentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kMinConfsFieldNumber = 1,
    kMaxConfsFieldNumber = 2,
  };
  // string account = 3;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int32 min_confs = 1;
  void clear_min_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs() const;
  void set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_confs() const;
  void _internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_confs = 2;
  void clear_max_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_confs() const;
  void set_max_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_confs() const;
  void _internal_set_max_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListUnspentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_confs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListUnspentResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListUnspentResponse) */ {
 public:
  ListUnspentResponse();
  virtual ~ListUnspentResponse();

  ListUnspentResponse(const ListUnspentResponse& from);
  ListUnspentResponse(ListUnspentResponse&& from) noexcept
    : ListUnspentResponse() {
    *this = ::std::move(from);
  }

  inline ListUnspentResponse& operator=(const ListUnspentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUnspentResponse& operator=(ListUnspentResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUnspentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUnspentResponse* internal_default_instance() {
    return reinterpret_cast<const ListUnspentResponse*>(
               &_ListUnspentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListUnspentResponse& a, ListUnspentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUnspentResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUnspentResponse* New() const final {
    return CreateMaybeMessage<ListUnspentResponse>(nullptr);
  }

  ListUnspentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUnspentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUnspentResponse& from);
  void MergeFrom(const ListUnspentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUnspentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListUnspentResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxosFieldNumber = 1,
  };
  // repeated .lnrpc.Utxo utxos = 1;
  int utxos_size() const;
  private:
  int _internal_utxos_size() const;
  public:
  void clear_utxos();
  ::lnrpc::Utxo* mutable_utxos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Utxo >*
      mutable_utxos();
  private:
  const ::lnrpc::Utxo& _internal_utxos(int index) const;
  ::lnrpc::Utxo* _internal_add_utxos();
  public:
  const ::lnrpc::Utxo& utxos(int index) const;
  ::lnrpc::Utxo* add_utxos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Utxo >&
      utxos() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ListUnspentResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Utxo > utxos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NewAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NewAddressRequest) */ {
 public:
  NewAddressRequest();
  virtual ~NewAddressRequest();

  NewAddressRequest(const NewAddressRequest& from);
  NewAddressRequest(NewAddressRequest&& from) noexcept
    : NewAddressRequest() {
    *this = ::std::move(from);
  }

  inline NewAddressRequest& operator=(const NewAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewAddressRequest& operator=(NewAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewAddressRequest* internal_default_instance() {
    return reinterpret_cast<const NewAddressRequest*>(
               &_NewAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NewAddressRequest& a, NewAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NewAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewAddressRequest* New() const final {
    return CreateMaybeMessage<NewAddressRequest>(nullptr);
  }

  NewAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewAddressRequest& from);
  void MergeFrom(const NewAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NewAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string account = 2;
  void clear_account();
  const std::string& account() const;
  void set_account(const std::string& value);
  void set_account(std::string&& value);
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  std::string* mutable_account();
  std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .lnrpc.AddressType type = 1;
  void clear_type();
  ::lnrpc::AddressType type() const;
  void set_type(::lnrpc::AddressType value);
  private:
  ::lnrpc::AddressType _internal_type() const;
  void _internal_set_type(::lnrpc::AddressType value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NewAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NewAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NewAddressResponse) */ {
 public:
  NewAddressResponse();
  virtual ~NewAddressResponse();

  NewAddressResponse(const NewAddressResponse& from);
  NewAddressResponse(NewAddressResponse&& from) noexcept
    : NewAddressResponse() {
    *this = ::std::move(from);
  }

  inline NewAddressResponse& operator=(const NewAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewAddressResponse& operator=(NewAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewAddressResponse* internal_default_instance() {
    return reinterpret_cast<const NewAddressResponse*>(
               &_NewAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(NewAddressResponse& a, NewAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewAddressResponse* New() const final {
    return CreateMaybeMessage<NewAddressResponse>(nullptr);
  }

  NewAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewAddressResponse& from);
  void MergeFrom(const NewAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NewAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NewAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SignMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SignMessageRequest) */ {
 public:
  SignMessageRequest();
  virtual ~SignMessageRequest();

  SignMessageRequest(const SignMessageRequest& from);
  SignMessageRequest(SignMessageRequest&& from) noexcept
    : SignMessageRequest() {
    *this = ::std::move(from);
  }

  inline SignMessageRequest& operator=(const SignMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignMessageRequest& operator=(SignMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SignMessageRequest*>(
               &_SignMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SignMessageRequest& a, SignMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SignMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignMessageRequest* New() const final {
    return CreateMaybeMessage<SignMessageRequest>(nullptr);
  }

  SignMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignMessageRequest& from);
  void MergeFrom(const SignMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SignMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SignMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SignMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.SignMessageResponse) */ {
 public:
  SignMessageResponse();
  virtual ~SignMessageResponse();

  SignMessageResponse(const SignMessageResponse& from);
  SignMessageResponse(SignMessageResponse&& from) noexcept
    : SignMessageResponse() {
    *this = ::std::move(from);
  }

  inline SignMessageResponse& operator=(const SignMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SignMessageResponse& operator=(SignMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SignMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SignMessageResponse*>(
               &_SignMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SignMessageResponse& a, SignMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SignMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SignMessageResponse* New() const final {
    return CreateMaybeMessage<SignMessageResponse>(nullptr);
  }

  SignMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SignMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SignMessageResponse& from);
  void MergeFrom(const SignMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.SignMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
  };
  // string signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.SignMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.VerifyMessageRequest) */ {
 public:
  VerifyMessageRequest();
  virtual ~VerifyMessageRequest();

  VerifyMessageRequest(const VerifyMessageRequest& from);
  VerifyMessageRequest(VerifyMessageRequest&& from) noexcept
    : VerifyMessageRequest() {
    *this = ::std::move(from);
  }

  inline VerifyMessageRequest& operator=(const VerifyMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyMessageRequest& operator=(VerifyMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageRequest*>(
               &_VerifyMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(VerifyMessageRequest& a, VerifyMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageRequest* New() const final {
    return CreateMaybeMessage<VerifyMessageRequest>(nullptr);
  }

  VerifyMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyMessageRequest& from);
  void MergeFrom(const VerifyMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.VerifyMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // bytes msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.VerifyMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.VerifyMessageResponse) */ {
 public:
  VerifyMessageResponse();
  virtual ~VerifyMessageResponse();

  VerifyMessageResponse(const VerifyMessageResponse& from);
  VerifyMessageResponse(VerifyMessageResponse&& from) noexcept
    : VerifyMessageResponse() {
    *this = ::std::move(from);
  }

  inline VerifyMessageResponse& operator=(const VerifyMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyMessageResponse& operator=(VerifyMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyMessageResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyMessageResponse*>(
               &_VerifyMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(VerifyMessageResponse& a, VerifyMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyMessageResponse* New() const final {
    return CreateMaybeMessage<VerifyMessageResponse>(nullptr);
  }

  VerifyMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyMessageResponse& from);
  void MergeFrom(const VerifyMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.VerifyMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 2,
    kValidFieldNumber = 1,
  };
  // string pubkey = 2;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const char* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.VerifyMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  bool valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ConnectPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ConnectPeerRequest) */ {
 public:
  ConnectPeerRequest();
  virtual ~ConnectPeerRequest();

  ConnectPeerRequest(const ConnectPeerRequest& from);
  ConnectPeerRequest(ConnectPeerRequest&& from) noexcept
    : ConnectPeerRequest() {
    *this = ::std::move(from);
  }

  inline ConnectPeerRequest& operator=(const ConnectPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectPeerRequest& operator=(ConnectPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectPeerRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectPeerRequest*>(
               &_ConnectPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ConnectPeerRequest& a, ConnectPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectPeerRequest* New() const final {
    return CreateMaybeMessage<ConnectPeerRequest>(nullptr);
  }

  ConnectPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectPeerRequest& from);
  void MergeFrom(const ConnectPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ConnectPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kTimeoutFieldNumber = 3,
    kPermFieldNumber = 2,
  };
  // .lnrpc.LightningAddress addr = 1;
  bool has_addr() const;
  private:
  bool _internal_has_addr() const;
  public:
  void clear_addr();
  const ::lnrpc::LightningAddress& addr() const;
  ::lnrpc::LightningAddress* release_addr();
  ::lnrpc::LightningAddress* mutable_addr();
  void set_allocated_addr(::lnrpc::LightningAddress* addr);
  private:
  const ::lnrpc::LightningAddress& _internal_addr() const;
  ::lnrpc::LightningAddress* _internal_mutable_addr();
  public:

  // uint64 timeout = 3;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool perm = 2;
  void clear_perm();
  bool perm() const;
  void set_perm(bool value);
  private:
  bool _internal_perm() const;
  void _internal_set_perm(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ConnectPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::LightningAddress* addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timeout_;
  bool perm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ConnectPeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ConnectPeerResponse) */ {
 public:
  ConnectPeerResponse();
  virtual ~ConnectPeerResponse();

  ConnectPeerResponse(const ConnectPeerResponse& from);
  ConnectPeerResponse(ConnectPeerResponse&& from) noexcept
    : ConnectPeerResponse() {
    *this = ::std::move(from);
  }

  inline ConnectPeerResponse& operator=(const ConnectPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectPeerResponse& operator=(ConnectPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectPeerResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectPeerResponse*>(
               &_ConnectPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ConnectPeerResponse& a, ConnectPeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectPeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectPeerResponse* New() const final {
    return CreateMaybeMessage<ConnectPeerResponse>(nullptr);
  }

  ConnectPeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectPeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectPeerResponse& from);
  void MergeFrom(const ConnectPeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectPeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ConnectPeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ConnectPeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DisconnectPeerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DisconnectPeerRequest) */ {
 public:
  DisconnectPeerRequest();
  virtual ~DisconnectPeerRequest();

  DisconnectPeerRequest(const DisconnectPeerRequest& from);
  DisconnectPeerRequest(DisconnectPeerRequest&& from) noexcept
    : DisconnectPeerRequest() {
    *this = ::std::move(from);
  }

  inline DisconnectPeerRequest& operator=(const DisconnectPeerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectPeerRequest& operator=(DisconnectPeerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectPeerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectPeerRequest* internal_default_instance() {
    return reinterpret_cast<const DisconnectPeerRequest*>(
               &_DisconnectPeerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DisconnectPeerRequest& a, DisconnectPeerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectPeerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectPeerRequest* New() const final {
    return CreateMaybeMessage<DisconnectPeerRequest>(nullptr);
  }

  DisconnectPeerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectPeerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectPeerRequest& from);
  void MergeFrom(const DisconnectPeerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectPeerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DisconnectPeerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
  };
  // string pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DisconnectPeerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DisconnectPeerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DisconnectPeerResponse) */ {
 public:
  DisconnectPeerResponse();
  virtual ~DisconnectPeerResponse();

  DisconnectPeerResponse(const DisconnectPeerResponse& from);
  DisconnectPeerResponse(DisconnectPeerResponse&& from) noexcept
    : DisconnectPeerResponse() {
    *this = ::std::move(from);
  }

  inline DisconnectPeerResponse& operator=(const DisconnectPeerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectPeerResponse& operator=(DisconnectPeerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DisconnectPeerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisconnectPeerResponse* internal_default_instance() {
    return reinterpret_cast<const DisconnectPeerResponse*>(
               &_DisconnectPeerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(DisconnectPeerResponse& a, DisconnectPeerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectPeerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisconnectPeerResponse* New() const final {
    return CreateMaybeMessage<DisconnectPeerResponse>(nullptr);
  }

  DisconnectPeerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisconnectPeerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DisconnectPeerResponse& from);
  void MergeFrom(const DisconnectPeerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisconnectPeerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DisconnectPeerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.DisconnectPeerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HTLC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.HTLC) */ {
 public:
  HTLC();
  virtual ~HTLC();

  HTLC(const HTLC& from);
  HTLC(HTLC&& from) noexcept
    : HTLC() {
    *this = ::std::move(from);
  }

  inline HTLC& operator=(const HTLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTLC& operator=(HTLC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTLC* internal_default_instance() {
    return reinterpret_cast<const HTLC*>(
               &_HTLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(HTLC& a, HTLC& b) {
    a.Swap(&b);
  }
  inline void Swap(HTLC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTLC* New() const final {
    return CreateMaybeMessage<HTLC>(nullptr);
  }

  HTLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTLC& from);
  void MergeFrom(const HTLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.HTLC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashLockFieldNumber = 3,
    kAmountFieldNumber = 2,
    kIncomingFieldNumber = 1,
    kExpirationHeightFieldNumber = 4,
    kHtlcIndexFieldNumber = 5,
    kForwardingChannelFieldNumber = 6,
    kForwardingHtlcIndexFieldNumber = 7,
  };
  // bytes hash_lock = 3;
  void clear_hash_lock();
  const std::string& hash_lock() const;
  void set_hash_lock(const std::string& value);
  void set_hash_lock(std::string&& value);
  void set_hash_lock(const char* value);
  void set_hash_lock(const void* value, size_t size);
  std::string* mutable_hash_lock();
  std::string* release_hash_lock();
  void set_allocated_hash_lock(std::string* hash_lock);
  private:
  const std::string& _internal_hash_lock() const;
  void _internal_set_hash_lock(const std::string& value);
  std::string* _internal_mutable_hash_lock();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool incoming = 1;
  void clear_incoming();
  bool incoming() const;
  void set_incoming(bool value);
  private:
  bool _internal_incoming() const;
  void _internal_set_incoming(bool value);
  public:

  // uint32 expiration_height = 4;
  void clear_expiration_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_height() const;
  void set_expiration_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiration_height() const;
  void _internal_set_expiration_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 htlc_index = 5;
  void clear_htlc_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_index() const;
  void set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_htlc_index() const;
  void _internal_set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 forwarding_channel = 6;
  void clear_forwarding_channel();
  ::PROTOBUF_NAMESPACE_ID::uint64 forwarding_channel() const;
  void set_forwarding_channel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_forwarding_channel() const;
  void _internal_set_forwarding_channel(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 forwarding_htlc_index = 7;
  void clear_forwarding_htlc_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 forwarding_htlc_index() const;
  void set_forwarding_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_forwarding_htlc_index() const;
  void _internal_set_forwarding_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.HTLC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_lock_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  bool incoming_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiration_height_;
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 forwarding_channel_;
  ::PROTOBUF_NAMESPACE_ID::uint64 forwarding_htlc_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelConstraints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelConstraints) */ {
 public:
  ChannelConstraints();
  virtual ~ChannelConstraints();

  ChannelConstraints(const ChannelConstraints& from);
  ChannelConstraints(ChannelConstraints&& from) noexcept
    : ChannelConstraints() {
    *this = ::std::move(from);
  }

  inline ChannelConstraints& operator=(const ChannelConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelConstraints& operator=(ChannelConstraints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelConstraints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelConstraints* internal_default_instance() {
    return reinterpret_cast<const ChannelConstraints*>(
               &_ChannelConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ChannelConstraints& a, ChannelConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelConstraints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelConstraints* New() const final {
    return CreateMaybeMessage<ChannelConstraints>(nullptr);
  }

  ChannelConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelConstraints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelConstraints& from);
  void MergeFrom(const ChannelConstraints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelConstraints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanReserveSatFieldNumber = 2,
    kDustLimitSatFieldNumber = 3,
    kCsvDelayFieldNumber = 1,
    kMaxAcceptedHtlcsFieldNumber = 6,
    kMaxPendingAmtMsatFieldNumber = 4,
    kMinHtlcMsatFieldNumber = 5,
  };
  // uint64 chan_reserve_sat = 2;
  void clear_chan_reserve_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_reserve_sat() const;
  void set_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_reserve_sat() const;
  void _internal_set_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 dust_limit_sat = 3;
  void clear_dust_limit_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 dust_limit_sat() const;
  void set_dust_limit_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_dust_limit_sat() const;
  void _internal_set_dust_limit_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 csv_delay = 1;
  void clear_csv_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay() const;
  void set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_csv_delay() const;
  void _internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_accepted_htlcs = 6;
  void clear_max_accepted_htlcs();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_accepted_htlcs() const;
  void set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_accepted_htlcs() const;
  void _internal_set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 max_pending_amt_msat = 4;
  void clear_max_pending_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pending_amt_msat() const;
  void set_max_pending_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_pending_amt_msat() const;
  void _internal_set_max_pending_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 min_htlc_msat = 5;
  void clear_min_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_msat() const;
  void set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_htlc_msat() const;
  void _internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelConstraints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_reserve_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 dust_limit_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_accepted_htlcs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_pending_amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Channel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Channel) */ {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);
  Channel(Channel&& from) noexcept
    : Channel() {
    *this = ::std::move(from);
  }

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Channel& operator=(Channel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Channel* internal_default_instance() {
    return reinterpret_cast<const Channel*>(
               &_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(Channel& a, Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Channel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Channel* New() const final {
    return CreateMaybeMessage<Channel>(nullptr);
  }

  Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Channel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingHtlcsFieldNumber = 15,
    kRemotePubkeyFieldNumber = 2,
    kChannelPointFieldNumber = 3,
    kChanStatusFlagsFieldNumber = 19,
    kCloseAddressFieldNumber = 25,
    kLocalConstraintsFieldNumber = 29,
    kRemoteConstraintsFieldNumber = 30,
    kChanIdFieldNumber = 4,
    kCapacityFieldNumber = 5,
    kLocalBalanceFieldNumber = 6,
    kRemoteBalanceFieldNumber = 7,
    kCommitFeeFieldNumber = 8,
    kCommitWeightFieldNumber = 9,
    kFeePerKwFieldNumber = 10,
    kUnsettledBalanceFieldNumber = 11,
    kTotalSatoshisSentFieldNumber = 12,
    kTotalSatoshisReceivedFieldNumber = 13,
    kNumUpdatesFieldNumber = 14,
    kActiveFieldNumber = 1,
    kPrivateFieldNumber = 17,
    kInitiatorFieldNumber = 18,
    kStaticRemoteKeyFieldNumber = 22,
    kCsvDelayFieldNumber = 16,
    kLocalChanReserveSatFieldNumber = 20,
    kRemoteChanReserveSatFieldNumber = 21,
    kLifetimeFieldNumber = 23,
    kUptimeFieldNumber = 24,
    kPushAmountSatFieldNumber = 27,
    kCommitmentTypeFieldNumber = 26,
    kThawHeightFieldNumber = 28,
  };
  // repeated .lnrpc.HTLC pending_htlcs = 15;
  int pending_htlcs_size() const;
  private:
  int _internal_pending_htlcs_size() const;
  public:
  void clear_pending_htlcs();
  ::lnrpc::HTLC* mutable_pending_htlcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLC >*
      mutable_pending_htlcs();
  private:
  const ::lnrpc::HTLC& _internal_pending_htlcs(int index) const;
  ::lnrpc::HTLC* _internal_add_pending_htlcs();
  public:
  const ::lnrpc::HTLC& pending_htlcs(int index) const;
  ::lnrpc::HTLC* add_pending_htlcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLC >&
      pending_htlcs() const;

  // string remote_pubkey = 2;
  void clear_remote_pubkey();
  const std::string& remote_pubkey() const;
  void set_remote_pubkey(const std::string& value);
  void set_remote_pubkey(std::string&& value);
  void set_remote_pubkey(const char* value);
  void set_remote_pubkey(const char* value, size_t size);
  std::string* mutable_remote_pubkey();
  std::string* release_remote_pubkey();
  void set_allocated_remote_pubkey(std::string* remote_pubkey);
  private:
  const std::string& _internal_remote_pubkey() const;
  void _internal_set_remote_pubkey(const std::string& value);
  std::string* _internal_mutable_remote_pubkey();
  public:

  // string channel_point = 3;
  void clear_channel_point();
  const std::string& channel_point() const;
  void set_channel_point(const std::string& value);
  void set_channel_point(std::string&& value);
  void set_channel_point(const char* value);
  void set_channel_point(const char* value, size_t size);
  std::string* mutable_channel_point();
  std::string* release_channel_point();
  void set_allocated_channel_point(std::string* channel_point);
  private:
  const std::string& _internal_channel_point() const;
  void _internal_set_channel_point(const std::string& value);
  std::string* _internal_mutable_channel_point();
  public:

  // string chan_status_flags = 19;
  void clear_chan_status_flags();
  const std::string& chan_status_flags() const;
  void set_chan_status_flags(const std::string& value);
  void set_chan_status_flags(std::string&& value);
  void set_chan_status_flags(const char* value);
  void set_chan_status_flags(const char* value, size_t size);
  std::string* mutable_chan_status_flags();
  std::string* release_chan_status_flags();
  void set_allocated_chan_status_flags(std::string* chan_status_flags);
  private:
  const std::string& _internal_chan_status_flags() const;
  void _internal_set_chan_status_flags(const std::string& value);
  std::string* _internal_mutable_chan_status_flags();
  public:

  // string close_address = 25;
  void clear_close_address();
  const std::string& close_address() const;
  void set_close_address(const std::string& value);
  void set_close_address(std::string&& value);
  void set_close_address(const char* value);
  void set_close_address(const char* value, size_t size);
  std::string* mutable_close_address();
  std::string* release_close_address();
  void set_allocated_close_address(std::string* close_address);
  private:
  const std::string& _internal_close_address() const;
  void _internal_set_close_address(const std::string& value);
  std::string* _internal_mutable_close_address();
  public:

  // .lnrpc.ChannelConstraints local_constraints = 29;
  bool has_local_constraints() const;
  private:
  bool _internal_has_local_constraints() const;
  public:
  void clear_local_constraints();
  const ::lnrpc::ChannelConstraints& local_constraints() const;
  ::lnrpc::ChannelConstraints* release_local_constraints();
  ::lnrpc::ChannelConstraints* mutable_local_constraints();
  void set_allocated_local_constraints(::lnrpc::ChannelConstraints* local_constraints);
  private:
  const ::lnrpc::ChannelConstraints& _internal_local_constraints() const;
  ::lnrpc::ChannelConstraints* _internal_mutable_local_constraints();
  public:

  // .lnrpc.ChannelConstraints remote_constraints = 30;
  bool has_remote_constraints() const;
  private:
  bool _internal_has_remote_constraints() const;
  public:
  void clear_remote_constraints();
  const ::lnrpc::ChannelConstraints& remote_constraints() const;
  ::lnrpc::ChannelConstraints* release_remote_constraints();
  ::lnrpc::ChannelConstraints* mutable_remote_constraints();
  void set_allocated_remote_constraints(::lnrpc::ChannelConstraints* remote_constraints);
  private:
  const ::lnrpc::ChannelConstraints& _internal_remote_constraints() const;
  ::lnrpc::ChannelConstraints* _internal_mutable_remote_constraints();
  public:

  // uint64 chan_id = 4 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 5;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 local_balance = 6;
  void clear_local_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 local_balance() const;
  void set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_balance() const;
  void _internal_set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remote_balance = 7;
  void clear_remote_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 remote_balance() const;
  void set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remote_balance() const;
  void _internal_set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 commit_fee = 8;
  void clear_commit_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_fee() const;
  void set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commit_fee() const;
  void _internal_set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 commit_weight = 9;
  void clear_commit_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_weight() const;
  void set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commit_weight() const;
  void _internal_set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_per_kw = 10;
  void clear_fee_per_kw();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kw() const;
  void set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_per_kw() const;
  void _internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unsettled_balance = 11;
  void clear_unsettled_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 unsettled_balance() const;
  void set_unsettled_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unsettled_balance() const;
  void _internal_set_unsettled_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_satoshis_sent = 12;
  void clear_total_satoshis_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 total_satoshis_sent() const;
  void set_total_satoshis_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_satoshis_sent() const;
  void _internal_set_total_satoshis_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_satoshis_received = 13;
  void clear_total_satoshis_received();
  ::PROTOBUF_NAMESPACE_ID::int64 total_satoshis_received() const;
  void set_total_satoshis_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_satoshis_received() const;
  void _internal_set_total_satoshis_received(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 num_updates = 14;
  void clear_num_updates();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_updates() const;
  void set_num_updates(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_updates() const;
  void _internal_set_num_updates(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool active = 1;
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool private = 17;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // bool initiator = 18;
  void clear_initiator();
  bool initiator() const;
  void set_initiator(bool value);
  private:
  bool _internal_initiator() const;
  void _internal_set_initiator(bool value);
  public:

  // bool static_remote_key = 22 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_static_remote_key();
  PROTOBUF_DEPRECATED bool static_remote_key() const;
  PROTOBUF_DEPRECATED void set_static_remote_key(bool value);
  private:
  bool _internal_static_remote_key() const;
  void _internal_set_static_remote_key(bool value);
  public:

  // uint32 csv_delay = 16 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_csv_delay();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay() const;
  PROTOBUF_DEPRECATED void set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_csv_delay() const;
  void _internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 local_chan_reserve_sat = 20 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_local_chan_reserve_sat();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 local_chan_reserve_sat() const;
  PROTOBUF_DEPRECATED void set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_chan_reserve_sat() const;
  void _internal_set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remote_chan_reserve_sat = 21 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_remote_chan_reserve_sat();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 remote_chan_reserve_sat() const;
  PROTOBUF_DEPRECATED void set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remote_chan_reserve_sat() const;
  void _internal_set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 lifetime = 23;
  void clear_lifetime();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime() const;
  void set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetime() const;
  void _internal_set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 uptime = 24;
  void clear_uptime();
  ::PROTOBUF_NAMESPACE_ID::int64 uptime() const;
  void set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_uptime() const;
  void _internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 push_amount_sat = 27;
  void clear_push_amount_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 push_amount_sat() const;
  void set_push_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_push_amount_sat() const;
  void _internal_set_push_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .lnrpc.CommitmentType commitment_type = 26;
  void clear_commitment_type();
  ::lnrpc::CommitmentType commitment_type() const;
  void set_commitment_type(::lnrpc::CommitmentType value);
  private:
  ::lnrpc::CommitmentType _internal_commitment_type() const;
  void _internal_set_commitment_type(::lnrpc::CommitmentType value);
  public:

  // uint32 thaw_height = 28;
  void clear_thaw_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 thaw_height() const;
  void set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thaw_height() const;
  void _internal_set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Channel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLC > pending_htlcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chan_status_flags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_address_;
  ::lnrpc::ChannelConstraints* local_constraints_;
  ::lnrpc::ChannelConstraints* remote_constraints_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 remote_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_weight_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kw_;
  ::PROTOBUF_NAMESPACE_ID::int64 unsettled_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_satoshis_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_satoshis_received_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_updates_;
  bool active_;
  bool private__;
  bool initiator_;
  bool static_remote_key_;
  ::PROTOBUF_NAMESPACE_ID::uint32 csv_delay_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_chan_reserve_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 remote_chan_reserve_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetime_;
  ::PROTOBUF_NAMESPACE_ID::int64 uptime_;
  ::PROTOBUF_NAMESPACE_ID::uint64 push_amount_sat_;
  int commitment_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thaw_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListChannelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListChannelsRequest) */ {
 public:
  ListChannelsRequest();
  virtual ~ListChannelsRequest();

  ListChannelsRequest(const ListChannelsRequest& from);
  ListChannelsRequest(ListChannelsRequest&& from) noexcept
    : ListChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ListChannelsRequest& operator=(const ListChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelsRequest& operator=(ListChannelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListChannelsRequest*>(
               &_ListChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ListChannelsRequest& a, ListChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListChannelsRequest* New() const final {
    return CreateMaybeMessage<ListChannelsRequest>(nullptr);
  }

  ListChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListChannelsRequest& from);
  void MergeFrom(const ListChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListChannelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerFieldNumber = 5,
    kActiveOnlyFieldNumber = 1,
    kInactiveOnlyFieldNumber = 2,
    kPublicOnlyFieldNumber = 3,
    kPrivateOnlyFieldNumber = 4,
  };
  // bytes peer = 5;
  void clear_peer();
  const std::string& peer() const;
  void set_peer(const std::string& value);
  void set_peer(std::string&& value);
  void set_peer(const char* value);
  void set_peer(const void* value, size_t size);
  std::string* mutable_peer();
  std::string* release_peer();
  void set_allocated_peer(std::string* peer);
  private:
  const std::string& _internal_peer() const;
  void _internal_set_peer(const std::string& value);
  std::string* _internal_mutable_peer();
  public:

  // bool active_only = 1;
  void clear_active_only();
  bool active_only() const;
  void set_active_only(bool value);
  private:
  bool _internal_active_only() const;
  void _internal_set_active_only(bool value);
  public:

  // bool inactive_only = 2;
  void clear_inactive_only();
  bool inactive_only() const;
  void set_inactive_only(bool value);
  private:
  bool _internal_inactive_only() const;
  void _internal_set_inactive_only(bool value);
  public:

  // bool public_only = 3;
  void clear_public_only();
  bool public_only() const;
  void set_public_only(bool value);
  private:
  bool _internal_public_only() const;
  void _internal_set_public_only(bool value);
  public:

  // bool private_only = 4;
  void clear_private_only();
  bool private_only() const;
  void set_private_only(bool value);
  private:
  bool _internal_private_only() const;
  void _internal_set_private_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListChannelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_;
  bool active_only_;
  bool inactive_only_;
  bool public_only_;
  bool private_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListChannelsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListChannelsResponse) */ {
 public:
  ListChannelsResponse();
  virtual ~ListChannelsResponse();

  ListChannelsResponse(const ListChannelsResponse& from);
  ListChannelsResponse(ListChannelsResponse&& from) noexcept
    : ListChannelsResponse() {
    *this = ::std::move(from);
  }

  inline ListChannelsResponse& operator=(const ListChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListChannelsResponse& operator=(ListChannelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListChannelsResponse*>(
               &_ListChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(ListChannelsResponse& a, ListChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListChannelsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListChannelsResponse* New() const final {
    return CreateMaybeMessage<ListChannelsResponse>(nullptr);
  }

  ListChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListChannelsResponse& from);
  void MergeFrom(const ListChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListChannelsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 11,
  };
  // repeated .lnrpc.Channel channels = 11;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::lnrpc::Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Channel >*
      mutable_channels();
  private:
  const ::lnrpc::Channel& _internal_channels(int index) const;
  ::lnrpc::Channel* _internal_add_channels();
  public:
  const ::lnrpc::Channel& channels(int index) const;
  ::lnrpc::Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ListChannelsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Channel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelCloseSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelCloseSummary) */ {
 public:
  ChannelCloseSummary();
  virtual ~ChannelCloseSummary();

  ChannelCloseSummary(const ChannelCloseSummary& from);
  ChannelCloseSummary(ChannelCloseSummary&& from) noexcept
    : ChannelCloseSummary() {
    *this = ::std::move(from);
  }

  inline ChannelCloseSummary& operator=(const ChannelCloseSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelCloseSummary& operator=(ChannelCloseSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelCloseSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelCloseSummary* internal_default_instance() {
    return reinterpret_cast<const ChannelCloseSummary*>(
               &_ChannelCloseSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ChannelCloseSummary& a, ChannelCloseSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelCloseSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelCloseSummary* New() const final {
    return CreateMaybeMessage<ChannelCloseSummary>(nullptr);
  }

  ChannelCloseSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelCloseSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelCloseSummary& from);
  void MergeFrom(const ChannelCloseSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelCloseSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelCloseSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChannelCloseSummary_ClosureType ClosureType;
  static constexpr ClosureType COOPERATIVE_CLOSE =
    ChannelCloseSummary_ClosureType_COOPERATIVE_CLOSE;
  static constexpr ClosureType LOCAL_FORCE_CLOSE =
    ChannelCloseSummary_ClosureType_LOCAL_FORCE_CLOSE;
  static constexpr ClosureType REMOTE_FORCE_CLOSE =
    ChannelCloseSummary_ClosureType_REMOTE_FORCE_CLOSE;
  static constexpr ClosureType BREACH_CLOSE =
    ChannelCloseSummary_ClosureType_BREACH_CLOSE;
  static constexpr ClosureType FUNDING_CANCELED =
    ChannelCloseSummary_ClosureType_FUNDING_CANCELED;
  static constexpr ClosureType ABANDONED =
    ChannelCloseSummary_ClosureType_ABANDONED;
  static inline bool ClosureType_IsValid(int value) {
    return ChannelCloseSummary_ClosureType_IsValid(value);
  }
  static constexpr ClosureType ClosureType_MIN =
    ChannelCloseSummary_ClosureType_ClosureType_MIN;
  static constexpr ClosureType ClosureType_MAX =
    ChannelCloseSummary_ClosureType_ClosureType_MAX;
  static constexpr int ClosureType_ARRAYSIZE =
    ChannelCloseSummary_ClosureType_ClosureType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ClosureType_descriptor() {
    return ChannelCloseSummary_ClosureType_descriptor();
  }
  template<typename T>
  static inline const std::string& ClosureType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClosureType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClosureType_Name.");
    return ChannelCloseSummary_ClosureType_Name(enum_t_value);
  }
  static inline bool ClosureType_Parse(const std::string& name,
      ClosureType* value) {
    return ChannelCloseSummary_ClosureType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResolutionsFieldNumber = 13,
    kChannelPointFieldNumber = 1,
    kChainHashFieldNumber = 3,
    kClosingTxHashFieldNumber = 4,
    kRemotePubkeyFieldNumber = 5,
    kChanIdFieldNumber = 2,
    kCapacityFieldNumber = 6,
    kSettledBalanceFieldNumber = 8,
    kCloseHeightFieldNumber = 7,
    kCloseTypeFieldNumber = 10,
    kTimeLockedBalanceFieldNumber = 9,
    kOpenInitiatorFieldNumber = 11,
    kCloseInitiatorFieldNumber = 12,
  };
  // repeated .lnrpc.Resolution resolutions = 13;
  int resolutions_size() const;
  private:
  int _internal_resolutions_size() const;
  public:
  void clear_resolutions();
  ::lnrpc::Resolution* mutable_resolutions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Resolution >*
      mutable_resolutions();
  private:
  const ::lnrpc::Resolution& _internal_resolutions(int index) const;
  ::lnrpc::Resolution* _internal_add_resolutions();
  public:
  const ::lnrpc::Resolution& resolutions(int index) const;
  ::lnrpc::Resolution* add_resolutions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Resolution >&
      resolutions() const;

  // string channel_point = 1;
  void clear_channel_point();
  const std::string& channel_point() const;
  void set_channel_point(const std::string& value);
  void set_channel_point(std::string&& value);
  void set_channel_point(const char* value);
  void set_channel_point(const char* value, size_t size);
  std::string* mutable_channel_point();
  std::string* release_channel_point();
  void set_allocated_channel_point(std::string* channel_point);
  private:
  const std::string& _internal_channel_point() const;
  void _internal_set_channel_point(const std::string& value);
  std::string* _internal_mutable_channel_point();
  public:

  // string chain_hash = 3;
  void clear_chain_hash();
  const std::string& chain_hash() const;
  void set_chain_hash(const std::string& value);
  void set_chain_hash(std::string&& value);
  void set_chain_hash(const char* value);
  void set_chain_hash(const char* value, size_t size);
  std::string* mutable_chain_hash();
  std::string* release_chain_hash();
  void set_allocated_chain_hash(std::string* chain_hash);
  private:
  const std::string& _internal_chain_hash() const;
  void _internal_set_chain_hash(const std::string& value);
  std::string* _internal_mutable_chain_hash();
  public:

  // string closing_tx_hash = 4;
  void clear_closing_tx_hash();
  const std::string& closing_tx_hash() const;
  void set_closing_tx_hash(const std::string& value);
  void set_closing_tx_hash(std::string&& value);
  void set_closing_tx_hash(const char* value);
  void set_closing_tx_hash(const char* value, size_t size);
  std::string* mutable_closing_tx_hash();
  std::string* release_closing_tx_hash();
  void set_allocated_closing_tx_hash(std::string* closing_tx_hash);
  private:
  const std::string& _internal_closing_tx_hash() const;
  void _internal_set_closing_tx_hash(const std::string& value);
  std::string* _internal_mutable_closing_tx_hash();
  public:

  // string remote_pubkey = 5;
  void clear_remote_pubkey();
  const std::string& remote_pubkey() const;
  void set_remote_pubkey(const std::string& value);
  void set_remote_pubkey(std::string&& value);
  void set_remote_pubkey(const char* value);
  void set_remote_pubkey(const char* value, size_t size);
  std::string* mutable_remote_pubkey();
  std::string* release_remote_pubkey();
  void set_allocated_remote_pubkey(std::string* remote_pubkey);
  private:
  const std::string& _internal_remote_pubkey() const;
  void _internal_set_remote_pubkey(const std::string& value);
  std::string* _internal_mutable_remote_pubkey();
  public:

  // uint64 chan_id = 2 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 6;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 settled_balance = 8;
  void clear_settled_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 settled_balance() const;
  void set_settled_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_settled_balance() const;
  void _internal_set_settled_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 close_height = 7;
  void clear_close_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 close_height() const;
  void set_close_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_close_height() const;
  void _internal_set_close_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;
  void clear_close_type();
  ::lnrpc::ChannelCloseSummary_ClosureType close_type() const;
  void set_close_type(::lnrpc::ChannelCloseSummary_ClosureType value);
  private:
  ::lnrpc::ChannelCloseSummary_ClosureType _internal_close_type() const;
  void _internal_set_close_type(::lnrpc::ChannelCloseSummary_ClosureType value);
  public:

  // int64 time_locked_balance = 9;
  void clear_time_locked_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 time_locked_balance() const;
  void set_time_locked_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_locked_balance() const;
  void _internal_set_time_locked_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .lnrpc.Initiator open_initiator = 11;
  void clear_open_initiator();
  ::lnrpc::Initiator open_initiator() const;
  void set_open_initiator(::lnrpc::Initiator value);
  private:
  ::lnrpc::Initiator _internal_open_initiator() const;
  void _internal_set_open_initiator(::lnrpc::Initiator value);
  public:

  // .lnrpc.Initiator close_initiator = 12;
  void clear_close_initiator();
  ::lnrpc::Initiator close_initiator() const;
  void set_close_initiator(::lnrpc::Initiator value);
  private:
  ::lnrpc::Initiator _internal_close_initiator() const;
  void _internal_set_close_initiator(::lnrpc::Initiator value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelCloseSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Resolution > resolutions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closing_tx_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 settled_balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 close_height_;
  int close_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_locked_balance_;
  int open_initiator_;
  int close_initiator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Resolution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Resolution) */ {
 public:
  Resolution();
  virtual ~Resolution();

  Resolution(const Resolution& from);
  Resolution(Resolution&& from) noexcept
    : Resolution() {
    *this = ::std::move(from);
  }

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resolution& operator=(Resolution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resolution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resolution* internal_default_instance() {
    return reinterpret_cast<const Resolution*>(
               &_Resolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(Resolution& a, Resolution& b) {
    a.Swap(&b);
  }
  inline void Swap(Resolution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resolution* New() const final {
    return CreateMaybeMessage<Resolution>(nullptr);
  }

  Resolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Resolution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSweepTxidFieldNumber = 5,
    kOutpointFieldNumber = 3,
    kResolutionTypeFieldNumber = 1,
    kOutcomeFieldNumber = 2,
    kAmountSatFieldNumber = 4,
  };
  // string sweep_txid = 5;
  void clear_sweep_txid();
  const std::string& sweep_txid() const;
  void set_sweep_txid(const std::string& value);
  void set_sweep_txid(std::string&& value);
  void set_sweep_txid(const char* value);
  void set_sweep_txid(const char* value, size_t size);
  std::string* mutable_sweep_txid();
  std::string* release_sweep_txid();
  void set_allocated_sweep_txid(std::string* sweep_txid);
  private:
  const std::string& _internal_sweep_txid() const;
  void _internal_set_sweep_txid(const std::string& value);
  std::string* _internal_mutable_sweep_txid();
  public:

  // .lnrpc.OutPoint outpoint = 3;
  bool has_outpoint() const;
  private:
  bool _internal_has_outpoint() const;
  public:
  void clear_outpoint();
  const ::lnrpc::OutPoint& outpoint() const;
  ::lnrpc::OutPoint* release_outpoint();
  ::lnrpc::OutPoint* mutable_outpoint();
  void set_allocated_outpoint(::lnrpc::OutPoint* outpoint);
  private:
  const ::lnrpc::OutPoint& _internal_outpoint() const;
  ::lnrpc::OutPoint* _internal_mutable_outpoint();
  public:

  // .lnrpc.ResolutionType resolution_type = 1;
  void clear_resolution_type();
  ::lnrpc::ResolutionType resolution_type() const;
  void set_resolution_type(::lnrpc::ResolutionType value);
  private:
  ::lnrpc::ResolutionType _internal_resolution_type() const;
  void _internal_set_resolution_type(::lnrpc::ResolutionType value);
  public:

  // .lnrpc.ResolutionOutcome outcome = 2;
  void clear_outcome();
  ::lnrpc::ResolutionOutcome outcome() const;
  void set_outcome(::lnrpc::ResolutionOutcome value);
  private:
  ::lnrpc::ResolutionOutcome _internal_outcome() const;
  void _internal_set_outcome(::lnrpc::ResolutionOutcome value);
  public:

  // uint64 amount_sat = 4;
  void clear_amount_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_sat() const;
  void set_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount_sat() const;
  void _internal_set_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Resolution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sweep_txid_;
  ::lnrpc::OutPoint* outpoint_;
  int resolution_type_;
  int outcome_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_sat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClosedChannelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ClosedChannelsRequest) */ {
 public:
  ClosedChannelsRequest();
  virtual ~ClosedChannelsRequest();

  ClosedChannelsRequest(const ClosedChannelsRequest& from);
  ClosedChannelsRequest(ClosedChannelsRequest&& from) noexcept
    : ClosedChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ClosedChannelsRequest& operator=(const ClosedChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosedChannelsRequest& operator=(ClosedChannelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClosedChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClosedChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ClosedChannelsRequest*>(
               &_ClosedChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ClosedChannelsRequest& a, ClosedChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosedChannelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClosedChannelsRequest* New() const final {
    return CreateMaybeMessage<ClosedChannelsRequest>(nullptr);
  }

  ClosedChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClosedChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClosedChannelsRequest& from);
  void MergeFrom(const ClosedChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosedChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ClosedChannelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCooperativeFieldNumber = 1,
    kLocalForceFieldNumber = 2,
    kRemoteForceFieldNumber = 3,
    kBreachFieldNumber = 4,
    kFundingCanceledFieldNumber = 5,
    kAbandonedFieldNumber = 6,
  };
  // bool cooperative = 1;
  void clear_cooperative();
  bool cooperative() const;
  void set_cooperative(bool value);
  private:
  bool _internal_cooperative() const;
  void _internal_set_cooperative(bool value);
  public:

  // bool local_force = 2;
  void clear_local_force();
  bool local_force() const;
  void set_local_force(bool value);
  private:
  bool _internal_local_force() const;
  void _internal_set_local_force(bool value);
  public:

  // bool remote_force = 3;
  void clear_remote_force();
  bool remote_force() const;
  void set_remote_force(bool value);
  private:
  bool _internal_remote_force() const;
  void _internal_set_remote_force(bool value);
  public:

  // bool breach = 4;
  void clear_breach();
  bool breach() const;
  void set_breach(bool value);
  private:
  bool _internal_breach() const;
  void _internal_set_breach(bool value);
  public:

  // bool funding_canceled = 5;
  void clear_funding_canceled();
  bool funding_canceled() const;
  void set_funding_canceled(bool value);
  private:
  bool _internal_funding_canceled() const;
  void _internal_set_funding_canceled(bool value);
  public:

  // bool abandoned = 6;
  void clear_abandoned();
  bool abandoned() const;
  void set_abandoned(bool value);
  private:
  bool _internal_abandoned() const;
  void _internal_set_abandoned(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool cooperative_;
  bool local_force_;
  bool remote_force_;
  bool breach_;
  bool funding_canceled_;
  bool abandoned_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClosedChannelsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ClosedChannelsResponse) */ {
 public:
  ClosedChannelsResponse();
  virtual ~ClosedChannelsResponse();

  ClosedChannelsResponse(const ClosedChannelsResponse& from);
  ClosedChannelsResponse(ClosedChannelsResponse&& from) noexcept
    : ClosedChannelsResponse() {
    *this = ::std::move(from);
  }

  inline ClosedChannelsResponse& operator=(const ClosedChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosedChannelsResponse& operator=(ClosedChannelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClosedChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClosedChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ClosedChannelsResponse*>(
               &_ClosedChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ClosedChannelsResponse& a, ClosedChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosedChannelsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClosedChannelsResponse* New() const final {
    return CreateMaybeMessage<ClosedChannelsResponse>(nullptr);
  }

  ClosedChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClosedChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClosedChannelsResponse& from);
  void MergeFrom(const ClosedChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosedChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ClosedChannelsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .lnrpc.ChannelCloseSummary channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::lnrpc::ChannelCloseSummary* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelCloseSummary >*
      mutable_channels();
  private:
  const ::lnrpc::ChannelCloseSummary& _internal_channels(int index) const;
  ::lnrpc::ChannelCloseSummary* _internal_add_channels();
  public:
  const ::lnrpc::ChannelCloseSummary& channels(int index) const;
  ::lnrpc::ChannelCloseSummary* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelCloseSummary >&
      channels() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelCloseSummary > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Peer_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Peer_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Peer_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Peer_FeaturesEntry_DoNotUse();
  Peer_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Peer_FeaturesEntry_DoNotUse& other);
  static const Peer_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Peer_FeaturesEntry_DoNotUse*>(&_Peer_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[43];
  }

  public:
};

// -------------------------------------------------------------------

class Peer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Peer) */ {
 public:
  Peer();
  virtual ~Peer();

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(nullptr);
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Peer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Peer_SyncType SyncType;
  static constexpr SyncType UNKNOWN_SYNC =
    Peer_SyncType_UNKNOWN_SYNC;
  static constexpr SyncType ACTIVE_SYNC =
    Peer_SyncType_ACTIVE_SYNC;
  static constexpr SyncType PASSIVE_SYNC =
    Peer_SyncType_PASSIVE_SYNC;
  static constexpr SyncType PINNED_SYNC =
    Peer_SyncType_PINNED_SYNC;
  static inline bool SyncType_IsValid(int value) {
    return Peer_SyncType_IsValid(value);
  }
  static constexpr SyncType SyncType_MIN =
    Peer_SyncType_SyncType_MIN;
  static constexpr SyncType SyncType_MAX =
    Peer_SyncType_SyncType_MAX;
  static constexpr int SyncType_ARRAYSIZE =
    Peer_SyncType_SyncType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SyncType_descriptor() {
    return Peer_SyncType_descriptor();
  }
  template<typename T>
  static inline const std::string& SyncType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SyncType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SyncType_Name.");
    return Peer_SyncType_Name(enum_t_value);
  }
  static inline bool SyncType_Parse(const std::string& name,
      SyncType* value) {
    return Peer_SyncType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 11,
    kErrorsFieldNumber = 12,
    kPubKeyFieldNumber = 1,
    kAddressFieldNumber = 3,
    kBytesSentFieldNumber = 4,
    kBytesRecvFieldNumber = 5,
    kSatSentFieldNumber = 6,
    kSatRecvFieldNumber = 7,
    kPingTimeFieldNumber = 9,
    kInboundFieldNumber = 8,
    kSyncTypeFieldNumber = 10,
    kLastFlapNsFieldNumber = 14,
    kFlapCountFieldNumber = 13,
  };
  // map<uint32, .lnrpc.Feature> features = 11;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // repeated .lnrpc.TimestampedError errors = 12;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::lnrpc::TimestampedError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::TimestampedError >*
      mutable_errors();
  private:
  const ::lnrpc::TimestampedError& _internal_errors(int index) const;
  ::lnrpc::TimestampedError* _internal_add_errors();
  public:
  const ::lnrpc::TimestampedError& errors(int index) const;
  ::lnrpc::TimestampedError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::TimestampedError >&
      errors() const;

  // string pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // string address = 3;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // uint64 bytes_sent = 4;
  void clear_bytes_sent();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_sent() const;
  void set_bytes_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_sent() const;
  void _internal_set_bytes_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bytes_recv = 5;
  void clear_bytes_recv();
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_recv() const;
  void set_bytes_recv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bytes_recv() const;
  void _internal_set_bytes_recv(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 sat_sent = 6;
  void clear_sat_sent();
  ::PROTOBUF_NAMESPACE_ID::int64 sat_sent() const;
  void set_sat_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_sent() const;
  void _internal_set_sat_sent(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sat_recv = 7;
  void clear_sat_recv();
  ::PROTOBUF_NAMESPACE_ID::int64 sat_recv() const;
  void set_sat_recv(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_recv() const;
  void _internal_set_sat_recv(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 ping_time = 9;
  void clear_ping_time();
  ::PROTOBUF_NAMESPACE_ID::int64 ping_time() const;
  void set_ping_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ping_time() const;
  void _internal_set_ping_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool inbound = 8;
  void clear_inbound();
  bool inbound() const;
  void set_inbound(bool value);
  private:
  bool _internal_inbound() const;
  void _internal_set_inbound(bool value);
  public:

  // .lnrpc.Peer.SyncType sync_type = 10;
  void clear_sync_type();
  ::lnrpc::Peer_SyncType sync_type() const;
  void set_sync_type(::lnrpc::Peer_SyncType value);
  private:
  ::lnrpc::Peer_SyncType _internal_sync_type() const;
  void _internal_set_sync_type(::lnrpc::Peer_SyncType value);
  public:

  // int64 last_flap_ns = 14;
  void clear_last_flap_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 last_flap_ns() const;
  void set_last_flap_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_last_flap_ns() const;
  void _internal_set_last_flap_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 flap_count = 13;
  void clear_flap_count();
  ::PROTOBUF_NAMESPACE_ID::int32 flap_count() const;
  void set_flap_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flap_count() const;
  void _internal_set_flap_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Peer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Peer_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::TimestampedError > errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bytes_recv_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_sent_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_recv_;
  ::PROTOBUF_NAMESPACE_ID::int64 ping_time_;
  bool inbound_;
  int sync_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 last_flap_ns_;
  ::PROTOBUF_NAMESPACE_ID::int32 flap_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class TimestampedError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.TimestampedError) */ {
 public:
  TimestampedError();
  virtual ~TimestampedError();

  TimestampedError(const TimestampedError& from);
  TimestampedError(TimestampedError&& from) noexcept
    : TimestampedError() {
    *this = ::std::move(from);
  }

  inline TimestampedError& operator=(const TimestampedError& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimestampedError& operator=(TimestampedError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimestampedError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimestampedError* internal_default_instance() {
    return reinterpret_cast<const TimestampedError*>(
               &_TimestampedError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TimestampedError& a, TimestampedError& b) {
    a.Swap(&b);
  }
  inline void Swap(TimestampedError* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimestampedError* New() const final {
    return CreateMaybeMessage<TimestampedError>(nullptr);
  }

  TimestampedError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimestampedError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimestampedError& from);
  void MergeFrom(const TimestampedError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimestampedError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.TimestampedError";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorFieldNumber = 2,
    kTimestampFieldNumber = 1,
  };
  // string error = 2;
  void clear_error();
  const std::string& error() const;
  void set_error(const std::string& value);
  void set_error(std::string&& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  std::string* mutable_error();
  std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // uint64 timestamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.TimestampedError)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPeersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPeersRequest) */ {
 public:
  ListPeersRequest();
  virtual ~ListPeersRequest();

  ListPeersRequest(const ListPeersRequest& from);
  ListPeersRequest(ListPeersRequest&& from) noexcept
    : ListPeersRequest() {
    *this = ::std::move(from);
  }

  inline ListPeersRequest& operator=(const ListPeersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPeersRequest& operator=(ListPeersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPeersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPeersRequest* internal_default_instance() {
    return reinterpret_cast<const ListPeersRequest*>(
               &_ListPeersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ListPeersRequest& a, ListPeersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPeersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPeersRequest* New() const final {
    return CreateMaybeMessage<ListPeersRequest>(nullptr);
  }

  ListPeersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPeersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPeersRequest& from);
  void MergeFrom(const ListPeersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPeersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPeersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatestErrorFieldNumber = 1,
  };
  // bool latest_error = 1;
  void clear_latest_error();
  bool latest_error() const;
  void set_latest_error(bool value);
  private:
  bool _internal_latest_error() const;
  void _internal_set_latest_error(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListPeersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool latest_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPeersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPeersResponse) */ {
 public:
  ListPeersResponse();
  virtual ~ListPeersResponse();

  ListPeersResponse(const ListPeersResponse& from);
  ListPeersResponse(ListPeersResponse&& from) noexcept
    : ListPeersResponse() {
    *this = ::std::move(from);
  }

  inline ListPeersResponse& operator=(const ListPeersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPeersResponse& operator=(ListPeersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPeersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPeersResponse* internal_default_instance() {
    return reinterpret_cast<const ListPeersResponse*>(
               &_ListPeersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ListPeersResponse& a, ListPeersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPeersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPeersResponse* New() const final {
    return CreateMaybeMessage<ListPeersResponse>(nullptr);
  }

  ListPeersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPeersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPeersResponse& from);
  void MergeFrom(const ListPeersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPeersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPeersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeersFieldNumber = 1,
  };
  // repeated .lnrpc.Peer peers = 1;
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::lnrpc::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Peer >*
      mutable_peers();
  private:
  const ::lnrpc::Peer& _internal_peers(int index) const;
  ::lnrpc::Peer* _internal_add_peers();
  public:
  const ::lnrpc::Peer& peers(int index) const;
  ::lnrpc::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Peer >&
      peers() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ListPeersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Peer > peers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PeerEventSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PeerEventSubscription) */ {
 public:
  PeerEventSubscription();
  virtual ~PeerEventSubscription();

  PeerEventSubscription(const PeerEventSubscription& from);
  PeerEventSubscription(PeerEventSubscription&& from) noexcept
    : PeerEventSubscription() {
    *this = ::std::move(from);
  }

  inline PeerEventSubscription& operator=(const PeerEventSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerEventSubscription& operator=(PeerEventSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerEventSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerEventSubscription* internal_default_instance() {
    return reinterpret_cast<const PeerEventSubscription*>(
               &_PeerEventSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PeerEventSubscription& a, PeerEventSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerEventSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerEventSubscription* New() const final {
    return CreateMaybeMessage<PeerEventSubscription>(nullptr);
  }

  PeerEventSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerEventSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerEventSubscription& from);
  void MergeFrom(const PeerEventSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerEventSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PeerEventSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.PeerEventSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PeerEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PeerEvent) */ {
 public:
  PeerEvent();
  virtual ~PeerEvent();

  PeerEvent(const PeerEvent& from);
  PeerEvent(PeerEvent&& from) noexcept
    : PeerEvent() {
    *this = ::std::move(from);
  }

  inline PeerEvent& operator=(const PeerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerEvent& operator=(PeerEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeerEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeerEvent* internal_default_instance() {
    return reinterpret_cast<const PeerEvent*>(
               &_PeerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PeerEvent& a, PeerEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(PeerEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeerEvent* New() const final {
    return CreateMaybeMessage<PeerEvent>(nullptr);
  }

  PeerEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeerEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeerEvent& from);
  void MergeFrom(const PeerEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeerEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PeerEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PeerEvent_EventType EventType;
  static constexpr EventType PEER_ONLINE =
    PeerEvent_EventType_PEER_ONLINE;
  static constexpr EventType PEER_OFFLINE =
    PeerEvent_EventType_PEER_OFFLINE;
  static inline bool EventType_IsValid(int value) {
    return PeerEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    PeerEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    PeerEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    PeerEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return PeerEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return PeerEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return PeerEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // .lnrpc.PeerEvent.EventType type = 2;
  void clear_type();
  ::lnrpc::PeerEvent_EventType type() const;
  void set_type(::lnrpc::PeerEvent_EventType value);
  private:
  ::lnrpc::PeerEvent_EventType _internal_type() const;
  void _internal_set_type(::lnrpc::PeerEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PeerEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GetInfoRequest) */ {
 public:
  GetInfoRequest();
  virtual ~GetInfoRequest();

  GetInfoRequest(const GetInfoRequest& from);
  GetInfoRequest(GetInfoRequest&& from) noexcept
    : GetInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetInfoRequest& operator=(const GetInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoRequest& operator=(GetInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetInfoRequest*>(
               &_GetInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GetInfoRequest& a, GetInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoRequest* New() const final {
    return CreateMaybeMessage<GetInfoRequest>(nullptr);
  }

  GetInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoRequest& from);
  void MergeFrom(const GetInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GetInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.GetInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetInfoResponse_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetInfoResponse_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetInfoResponse_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetInfoResponse_FeaturesEntry_DoNotUse();
  GetInfoResponse_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetInfoResponse_FeaturesEntry_DoNotUse& other);
  static const GetInfoResponse_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetInfoResponse_FeaturesEntry_DoNotUse*>(&_GetInfoResponse_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[51];
  }

  public:
};

// -------------------------------------------------------------------

class GetInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GetInfoResponse) */ {
 public:
  GetInfoResponse();
  virtual ~GetInfoResponse();

  GetInfoResponse(const GetInfoResponse& from);
  GetInfoResponse(GetInfoResponse&& from) noexcept
    : GetInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetInfoResponse& operator=(const GetInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInfoResponse& operator=(GetInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetInfoResponse*>(
               &_GetInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetInfoResponse& a, GetInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInfoResponse* New() const final {
    return CreateMaybeMessage<GetInfoResponse>(nullptr);
  }

  GetInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInfoResponse& from);
  void MergeFrom(const GetInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GetInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUrisFieldNumber = 12,
    kChainsFieldNumber = 16,
    kFeaturesFieldNumber = 19,
    kIdentityPubkeyFieldNumber = 1,
    kAliasFieldNumber = 2,
    kBlockHashFieldNumber = 8,
    kVersionFieldNumber = 14,
    kColorFieldNumber = 17,
    kCommitHashFieldNumber = 20,
    kNumPendingChannelsFieldNumber = 3,
    kNumActiveChannelsFieldNumber = 4,
    kNumPeersFieldNumber = 5,
    kBlockHeightFieldNumber = 6,
    kBestHeaderTimestampFieldNumber = 13,
    kSyncedToChainFieldNumber = 9,
    kSyncedToGraphFieldNumber = 18,
    kTestnetFieldNumber = 10,
    kNumInactiveChannelsFieldNumber = 15,
  };
  // repeated string uris = 12;
  int uris_size() const;
  private:
  int _internal_uris_size() const;
  public:
  void clear_uris();
  const std::string& uris(int index) const;
  std::string* mutable_uris(int index);
  void set_uris(int index, const std::string& value);
  void set_uris(int index, std::string&& value);
  void set_uris(int index, const char* value);
  void set_uris(int index, const char* value, size_t size);
  std::string* add_uris();
  void add_uris(const std::string& value);
  void add_uris(std::string&& value);
  void add_uris(const char* value);
  void add_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uris();
  private:
  const std::string& _internal_uris(int index) const;
  std::string* _internal_add_uris();
  public:

  // repeated .lnrpc.Chain chains = 16;
  int chains_size() const;
  private:
  int _internal_chains_size() const;
  public:
  void clear_chains();
  ::lnrpc::Chain* mutable_chains(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Chain >*
      mutable_chains();
  private:
  const ::lnrpc::Chain& _internal_chains(int index) const;
  ::lnrpc::Chain* _internal_add_chains();
  public:
  const ::lnrpc::Chain& chains(int index) const;
  ::lnrpc::Chain* add_chains();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Chain >&
      chains() const;

  // map<uint32, .lnrpc.Feature> features = 19;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // string identity_pubkey = 1;
  void clear_identity_pubkey();
  const std::string& identity_pubkey() const;
  void set_identity_pubkey(const std::string& value);
  void set_identity_pubkey(std::string&& value);
  void set_identity_pubkey(const char* value);
  void set_identity_pubkey(const char* value, size_t size);
  std::string* mutable_identity_pubkey();
  std::string* release_identity_pubkey();
  void set_allocated_identity_pubkey(std::string* identity_pubkey);
  private:
  const std::string& _internal_identity_pubkey() const;
  void _internal_set_identity_pubkey(const std::string& value);
  std::string* _internal_mutable_identity_pubkey();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string block_hash = 8;
  void clear_block_hash();
  const std::string& block_hash() const;
  void set_block_hash(const std::string& value);
  void set_block_hash(std::string&& value);
  void set_block_hash(const char* value);
  void set_block_hash(const char* value, size_t size);
  std::string* mutable_block_hash();
  std::string* release_block_hash();
  void set_allocated_block_hash(std::string* block_hash);
  private:
  const std::string& _internal_block_hash() const;
  void _internal_set_block_hash(const std::string& value);
  std::string* _internal_mutable_block_hash();
  public:

  // string version = 14;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string color = 17;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // string commit_hash = 20;
  void clear_commit_hash();
  const std::string& commit_hash() const;
  void set_commit_hash(const std::string& value);
  void set_commit_hash(std::string&& value);
  void set_commit_hash(const char* value);
  void set_commit_hash(const char* value, size_t size);
  std::string* mutable_commit_hash();
  std::string* release_commit_hash();
  void set_allocated_commit_hash(std::string* commit_hash);
  private:
  const std::string& _internal_commit_hash() const;
  void _internal_set_commit_hash(const std::string& value);
  std::string* _internal_mutable_commit_hash();
  public:

  // uint32 num_pending_channels = 3;
  void clear_num_pending_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_channels() const;
  void set_num_pending_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pending_channels() const;
  void _internal_set_num_pending_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_active_channels = 4;
  void clear_num_active_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_active_channels() const;
  void set_num_active_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_active_channels() const;
  void _internal_set_num_active_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_peers = 5;
  void clear_num_peers();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_peers() const;
  void set_num_peers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_peers() const;
  void _internal_set_num_peers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 block_height = 6;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 best_header_timestamp = 13;
  void clear_best_header_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 best_header_timestamp() const;
  void set_best_header_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_best_header_timestamp() const;
  void _internal_set_best_header_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool synced_to_chain = 9;
  void clear_synced_to_chain();
  bool synced_to_chain() const;
  void set_synced_to_chain(bool value);
  private:
  bool _internal_synced_to_chain() const;
  void _internal_set_synced_to_chain(bool value);
  public:

  // bool synced_to_graph = 18;
  void clear_synced_to_graph();
  bool synced_to_graph() const;
  void set_synced_to_graph(bool value);
  private:
  bool _internal_synced_to_graph() const;
  void _internal_set_synced_to_graph(bool value);
  public:

  // bool testnet = 10 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_testnet();
  PROTOBUF_DEPRECATED bool testnet() const;
  PROTOBUF_DEPRECATED void set_testnet(bool value);
  private:
  bool _internal_testnet() const;
  void _internal_set_testnet(bool value);
  public:

  // uint32 num_inactive_channels = 15;
  void clear_num_inactive_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_inactive_channels() const;
  void set_num_inactive_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_inactive_channels() const;
  void _internal_set_num_inactive_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.GetInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Chain > chains_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetInfoResponse_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commit_hash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_active_channels_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_peers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 block_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 best_header_timestamp_;
  bool synced_to_chain_;
  bool synced_to_graph_;
  bool testnet_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_inactive_channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GetRecoveryInfoRequest) */ {
 public:
  GetRecoveryInfoRequest();
  virtual ~GetRecoveryInfoRequest();

  GetRecoveryInfoRequest(const GetRecoveryInfoRequest& from);
  GetRecoveryInfoRequest(GetRecoveryInfoRequest&& from) noexcept
    : GetRecoveryInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoRequest& operator=(const GetRecoveryInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoRequest& operator=(GetRecoveryInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecoveryInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecoveryInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoRequest*>(
               &_GetRecoveryInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetRecoveryInfoRequest& a, GetRecoveryInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecoveryInfoRequest* New() const final {
    return CreateMaybeMessage<GetRecoveryInfoRequest>(nullptr);
  }

  GetRecoveryInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecoveryInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecoveryInfoRequest& from);
  void MergeFrom(const GetRecoveryInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GetRecoveryInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.GetRecoveryInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GetRecoveryInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GetRecoveryInfoResponse) */ {
 public:
  GetRecoveryInfoResponse();
  virtual ~GetRecoveryInfoResponse();

  GetRecoveryInfoResponse(const GetRecoveryInfoResponse& from);
  GetRecoveryInfoResponse(GetRecoveryInfoResponse&& from) noexcept
    : GetRecoveryInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetRecoveryInfoResponse& operator=(const GetRecoveryInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecoveryInfoResponse& operator=(GetRecoveryInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecoveryInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecoveryInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetRecoveryInfoResponse*>(
               &_GetRecoveryInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetRecoveryInfoResponse& a, GetRecoveryInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecoveryInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecoveryInfoResponse* New() const final {
    return CreateMaybeMessage<GetRecoveryInfoResponse>(nullptr);
  }

  GetRecoveryInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecoveryInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecoveryInfoResponse& from);
  void MergeFrom(const GetRecoveryInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecoveryInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GetRecoveryInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProgressFieldNumber = 3,
    kRecoveryModeFieldNumber = 1,
    kRecoveryFinishedFieldNumber = 2,
  };
  // double progress = 3;
  void clear_progress();
  double progress() const;
  void set_progress(double value);
  private:
  double _internal_progress() const;
  void _internal_set_progress(double value);
  public:

  // bool recovery_mode = 1;
  void clear_recovery_mode();
  bool recovery_mode() const;
  void set_recovery_mode(bool value);
  private:
  bool _internal_recovery_mode() const;
  void _internal_set_recovery_mode(bool value);
  public:

  // bool recovery_finished = 2;
  void clear_recovery_finished();
  bool recovery_finished() const;
  void set_recovery_finished(bool value);
  private:
  bool _internal_recovery_finished() const;
  void _internal_set_recovery_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.GetRecoveryInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double progress_;
  bool recovery_mode_;
  bool recovery_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Chain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Chain) */ {
 public:
  Chain();
  virtual ~Chain();

  Chain(const Chain& from);
  Chain(Chain&& from) noexcept
    : Chain() {
    *this = ::std::move(from);
  }

  inline Chain& operator=(const Chain& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chain& operator=(Chain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chain* internal_default_instance() {
    return reinterpret_cast<const Chain*>(
               &_Chain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(Chain& a, Chain& b) {
    a.Swap(&b);
  }
  inline void Swap(Chain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chain* New() const final {
    return CreateMaybeMessage<Chain>(nullptr);
  }

  Chain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chain& from);
  void MergeFrom(const Chain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Chain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChainFieldNumber = 1,
    kNetworkFieldNumber = 2,
  };
  // string chain = 1;
  void clear_chain();
  const std::string& chain() const;
  void set_chain(const std::string& value);
  void set_chain(std::string&& value);
  void set_chain(const char* value);
  void set_chain(const char* value, size_t size);
  std::string* mutable_chain();
  std::string* release_chain();
  void set_allocated_chain(std::string* chain);
  private:
  const std::string& _internal_chain() const;
  void _internal_set_chain(const std::string& value);
  std::string* _internal_mutable_chain();
  public:

  // string network = 2;
  void clear_network();
  const std::string& network() const;
  void set_network(const std::string& value);
  void set_network(std::string&& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  std::string* mutable_network();
  std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Chain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ConfirmationUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ConfirmationUpdate) */ {
 public:
  ConfirmationUpdate();
  virtual ~ConfirmationUpdate();

  ConfirmationUpdate(const ConfirmationUpdate& from);
  ConfirmationUpdate(ConfirmationUpdate&& from) noexcept
    : ConfirmationUpdate() {
    *this = ::std::move(from);
  }

  inline ConfirmationUpdate& operator=(const ConfirmationUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfirmationUpdate& operator=(ConfirmationUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfirmationUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfirmationUpdate* internal_default_instance() {
    return reinterpret_cast<const ConfirmationUpdate*>(
               &_ConfirmationUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ConfirmationUpdate& a, ConfirmationUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfirmationUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfirmationUpdate* New() const final {
    return CreateMaybeMessage<ConfirmationUpdate>(nullptr);
  }

  ConfirmationUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfirmationUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfirmationUpdate& from);
  void MergeFrom(const ConfirmationUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfirmationUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ConfirmationUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockShaFieldNumber = 1,
    kBlockHeightFieldNumber = 2,
    kNumConfsLeftFieldNumber = 3,
  };
  // bytes block_sha = 1;
  void clear_block_sha();
  const std::string& block_sha() const;
  void set_block_sha(const std::string& value);
  void set_block_sha(std::string&& value);
  void set_block_sha(const char* value);
  void set_block_sha(const void* value, size_t size);
  std::string* mutable_block_sha();
  std::string* release_block_sha();
  void set_allocated_block_sha(std::string* block_sha);
  private:
  const std::string& _internal_block_sha() const;
  void _internal_set_block_sha(const std::string& value);
  std::string* _internal_mutable_block_sha();
  public:

  // int32 block_height = 2;
  void clear_block_height();
  ::PROTOBUF_NAMESPACE_ID::int32 block_height() const;
  void set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_height() const;
  void _internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 num_confs_left = 3;
  void clear_num_confs_left();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_confs_left() const;
  void set_num_confs_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_confs_left() const;
  void _internal_set_num_confs_left(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ConfirmationUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_sha_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_confs_left_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelOpenUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelOpenUpdate) */ {
 public:
  ChannelOpenUpdate();
  virtual ~ChannelOpenUpdate();

  ChannelOpenUpdate(const ChannelOpenUpdate& from);
  ChannelOpenUpdate(ChannelOpenUpdate&& from) noexcept
    : ChannelOpenUpdate() {
    *this = ::std::move(from);
  }

  inline ChannelOpenUpdate& operator=(const ChannelOpenUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelOpenUpdate& operator=(ChannelOpenUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelOpenUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelOpenUpdate* internal_default_instance() {
    return reinterpret_cast<const ChannelOpenUpdate*>(
               &_ChannelOpenUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ChannelOpenUpdate& a, ChannelOpenUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelOpenUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelOpenUpdate* New() const final {
    return CreateMaybeMessage<ChannelOpenUpdate>(nullptr);
  }

  ChannelOpenUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelOpenUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelOpenUpdate& from);
  void MergeFrom(const ChannelOpenUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelOpenUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelOpenUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelPointFieldNumber = 1,
  };
  // .lnrpc.ChannelPoint channel_point = 1;
  bool has_channel_point() const;
  private:
  bool _internal_has_channel_point() const;
  public:
  void clear_channel_point();
  const ::lnrpc::ChannelPoint& channel_point() const;
  ::lnrpc::ChannelPoint* release_channel_point();
  ::lnrpc::ChannelPoint* mutable_channel_point();
  void set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_channel_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_channel_point();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelOpenUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::ChannelPoint* channel_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelCloseUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelCloseUpdate) */ {
 public:
  ChannelCloseUpdate();
  virtual ~ChannelCloseUpdate();

  ChannelCloseUpdate(const ChannelCloseUpdate& from);
  ChannelCloseUpdate(ChannelCloseUpdate&& from) noexcept
    : ChannelCloseUpdate() {
    *this = ::std::move(from);
  }

  inline ChannelCloseUpdate& operator=(const ChannelCloseUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelCloseUpdate& operator=(ChannelCloseUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelCloseUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelCloseUpdate* internal_default_instance() {
    return reinterpret_cast<const ChannelCloseUpdate*>(
               &_ChannelCloseUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ChannelCloseUpdate& a, ChannelCloseUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelCloseUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelCloseUpdate* New() const final {
    return CreateMaybeMessage<ChannelCloseUpdate>(nullptr);
  }

  ChannelCloseUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelCloseUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelCloseUpdate& from);
  void MergeFrom(const ChannelCloseUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelCloseUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelCloseUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosingTxidFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // bytes closing_txid = 1;
  void clear_closing_txid();
  const std::string& closing_txid() const;
  void set_closing_txid(const std::string& value);
  void set_closing_txid(std::string&& value);
  void set_closing_txid(const char* value);
  void set_closing_txid(const void* value, size_t size);
  std::string* mutable_closing_txid();
  std::string* release_closing_txid();
  void set_allocated_closing_txid(std::string* closing_txid);
  private:
  const std::string& _internal_closing_txid() const;
  void _internal_set_closing_txid(const std::string& value);
  std::string* _internal_mutable_closing_txid();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelCloseUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closing_txid_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class CloseChannelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.CloseChannelRequest) */ {
 public:
  CloseChannelRequest();
  virtual ~CloseChannelRequest();

  CloseChannelRequest(const CloseChannelRequest& from);
  CloseChannelRequest(CloseChannelRequest&& from) noexcept
    : CloseChannelRequest() {
    *this = ::std::move(from);
  }

  inline CloseChannelRequest& operator=(const CloseChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseChannelRequest& operator=(CloseChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CloseChannelRequest*>(
               &_CloseChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CloseChannelRequest& a, CloseChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseChannelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseChannelRequest* New() const final {
    return CreateMaybeMessage<CloseChannelRequest>(nullptr);
  }

  CloseChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseChannelRequest& from);
  void MergeFrom(const CloseChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.CloseChannelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeliveryAddressFieldNumber = 5,
    kChannelPointFieldNumber = 1,
    kForceFieldNumber = 2,
    kTargetConfFieldNumber = 3,
    kSatPerByteFieldNumber = 4,
    kSatPerVbyteFieldNumber = 6,
  };
  // string delivery_address = 5;
  void clear_delivery_address();
  const std::string& delivery_address() const;
  void set_delivery_address(const std::string& value);
  void set_delivery_address(std::string&& value);
  void set_delivery_address(const char* value);
  void set_delivery_address(const char* value, size_t size);
  std::string* mutable_delivery_address();
  std::string* release_delivery_address();
  void set_allocated_delivery_address(std::string* delivery_address);
  private:
  const std::string& _internal_delivery_address() const;
  void _internal_set_delivery_address(const std::string& value);
  std::string* _internal_mutable_delivery_address();
  public:

  // .lnrpc.ChannelPoint channel_point = 1;
  bool has_channel_point() const;
  private:
  bool _internal_has_channel_point() const;
  public:
  void clear_channel_point();
  const ::lnrpc::ChannelPoint& channel_point() const;
  ::lnrpc::ChannelPoint* release_channel_point();
  ::lnrpc::ChannelPoint* mutable_channel_point();
  void set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_channel_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_channel_point();
  public:

  // bool force = 2;
  void clear_force();
  bool force() const;
  void set_force(bool value);
  private:
  bool _internal_force() const;
  void _internal_set_force(bool value);
  public:

  // int32 target_conf = 3;
  void clear_target_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf() const;
  void set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_conf() const;
  void _internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 sat_per_byte = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sat_per_byte();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte() const;
  PROTOBUF_DEPRECATED void set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_per_byte() const;
  void _internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 sat_per_vbyte = 6;
  void clear_sat_per_vbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte() const;
  void set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat_per_vbyte() const;
  void _internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.CloseChannelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delivery_address_;
  ::lnrpc::ChannelPoint* channel_point_;
  bool force_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class CloseStatusUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.CloseStatusUpdate) */ {
 public:
  CloseStatusUpdate();
  virtual ~CloseStatusUpdate();

  CloseStatusUpdate(const CloseStatusUpdate& from);
  CloseStatusUpdate(CloseStatusUpdate&& from) noexcept
    : CloseStatusUpdate() {
    *this = ::std::move(from);
  }

  inline CloseStatusUpdate& operator=(const CloseStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseStatusUpdate& operator=(CloseStatusUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseStatusUpdate& default_instance();

  enum UpdateCase {
    kClosePending = 1,
    kChanClose = 3,
    UPDATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const CloseStatusUpdate*>(
               &_CloseStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CloseStatusUpdate& a, CloseStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseStatusUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseStatusUpdate* New() const final {
    return CreateMaybeMessage<CloseStatusUpdate>(nullptr);
  }

  CloseStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseStatusUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseStatusUpdate& from);
  void MergeFrom(const CloseStatusUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseStatusUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.CloseStatusUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosePendingFieldNumber = 1,
    kChanCloseFieldNumber = 3,
  };
  // .lnrpc.PendingUpdate close_pending = 1;
  bool has_close_pending() const;
  private:
  bool _internal_has_close_pending() const;
  public:
  void clear_close_pending();
  const ::lnrpc::PendingUpdate& close_pending() const;
  ::lnrpc::PendingUpdate* release_close_pending();
  ::lnrpc::PendingUpdate* mutable_close_pending();
  void set_allocated_close_pending(::lnrpc::PendingUpdate* close_pending);
  private:
  const ::lnrpc::PendingUpdate& _internal_close_pending() const;
  ::lnrpc::PendingUpdate* _internal_mutable_close_pending();
  public:

  // .lnrpc.ChannelCloseUpdate chan_close = 3;
  bool has_chan_close() const;
  private:
  bool _internal_has_chan_close() const;
  public:
  void clear_chan_close();
  const ::lnrpc::ChannelCloseUpdate& chan_close() const;
  ::lnrpc::ChannelCloseUpdate* release_chan_close();
  ::lnrpc::ChannelCloseUpdate* mutable_chan_close();
  void set_allocated_chan_close(::lnrpc::ChannelCloseUpdate* chan_close);
  private:
  const ::lnrpc::ChannelCloseUpdate& _internal_chan_close() const;
  ::lnrpc::ChannelCloseUpdate* _internal_mutable_chan_close();
  public:

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.CloseStatusUpdate)
 private:
  class _Internal;
  void set_has_close_pending();
  void set_has_chan_close();

  inline bool has_update() const;
  inline void clear_has_update();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union UpdateUnion {
    UpdateUnion() {}
    ::lnrpc::PendingUpdate* close_pending_;
    ::lnrpc::ChannelCloseUpdate* chan_close_;
  } update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingUpdate) */ {
 public:
  PendingUpdate();
  virtual ~PendingUpdate();

  PendingUpdate(const PendingUpdate& from);
  PendingUpdate(PendingUpdate&& from) noexcept
    : PendingUpdate() {
    *this = ::std::move(from);
  }

  inline PendingUpdate& operator=(const PendingUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingUpdate& operator=(PendingUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingUpdate* internal_default_instance() {
    return reinterpret_cast<const PendingUpdate*>(
               &_PendingUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(PendingUpdate& a, PendingUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingUpdate* New() const final {
    return CreateMaybeMessage<PendingUpdate>(nullptr);
  }

  PendingUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingUpdate& from);
  void MergeFrom(const PendingUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
    kOutputIndexFieldNumber = 2,
  };
  // bytes txid = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // uint32 output_index = 2;
  void clear_output_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index() const;
  void set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_output_index() const;
  void _internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 output_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ReadyForPsbtFunding :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ReadyForPsbtFunding) */ {
 public:
  ReadyForPsbtFunding();
  virtual ~ReadyForPsbtFunding();

  ReadyForPsbtFunding(const ReadyForPsbtFunding& from);
  ReadyForPsbtFunding(ReadyForPsbtFunding&& from) noexcept
    : ReadyForPsbtFunding() {
    *this = ::std::move(from);
  }

  inline ReadyForPsbtFunding& operator=(const ReadyForPsbtFunding& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadyForPsbtFunding& operator=(ReadyForPsbtFunding&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadyForPsbtFunding& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReadyForPsbtFunding* internal_default_instance() {
    return reinterpret_cast<const ReadyForPsbtFunding*>(
               &_ReadyForPsbtFunding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(ReadyForPsbtFunding& a, ReadyForPsbtFunding& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadyForPsbtFunding* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadyForPsbtFunding* New() const final {
    return CreateMaybeMessage<ReadyForPsbtFunding>(nullptr);
  }

  ReadyForPsbtFunding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadyForPsbtFunding>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadyForPsbtFunding& from);
  void MergeFrom(const ReadyForPsbtFunding& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadyForPsbtFunding* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ReadyForPsbtFunding";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundingAddressFieldNumber = 1,
    kPsbtFieldNumber = 3,
    kFundingAmountFieldNumber = 2,
  };
  // string funding_address = 1;
  void clear_funding_address();
  const std::string& funding_address() const;
  void set_funding_address(const std::string& value);
  void set_funding_address(std::string&& value);
  void set_funding_address(const char* value);
  void set_funding_address(const char* value, size_t size);
  std::string* mutable_funding_address();
  std::string* release_funding_address();
  void set_allocated_funding_address(std::string* funding_address);
  private:
  const std::string& _internal_funding_address() const;
  void _internal_set_funding_address(const std::string& value);
  std::string* _internal_mutable_funding_address();
  public:

  // bytes psbt = 3;
  void clear_psbt();
  const std::string& psbt() const;
  void set_psbt(const std::string& value);
  void set_psbt(std::string&& value);
  void set_psbt(const char* value);
  void set_psbt(const void* value, size_t size);
  std::string* mutable_psbt();
  std::string* release_psbt();
  void set_allocated_psbt(std::string* psbt);
  private:
  const std::string& _internal_psbt() const;
  void _internal_set_psbt(const std::string& value);
  std::string* _internal_mutable_psbt();
  public:

  // int64 funding_amount = 2;
  void clear_funding_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 funding_amount() const;
  void set_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_funding_amount() const;
  void _internal_set_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ReadyForPsbtFunding)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funding_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr psbt_;
  ::PROTOBUF_NAMESPACE_ID::int64 funding_amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class OpenChannelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.OpenChannelRequest) */ {
 public:
  OpenChannelRequest();
  virtual ~OpenChannelRequest();

  OpenChannelRequest(const OpenChannelRequest& from);
  OpenChannelRequest(OpenChannelRequest&& from) noexcept
    : OpenChannelRequest() {
    *this = ::std::move(from);
  }

  inline OpenChannelRequest& operator=(const OpenChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenChannelRequest& operator=(OpenChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenChannelRequest* internal_default_instance() {
    return reinterpret_cast<const OpenChannelRequest*>(
               &_OpenChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(OpenChannelRequest& a, OpenChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenChannelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenChannelRequest* New() const final {
    return CreateMaybeMessage<OpenChannelRequest>(nullptr);
  }

  OpenChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenChannelRequest& from);
  void MergeFrom(const OpenChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.OpenChannelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodePubkeyFieldNumber = 2,
    kNodePubkeyStringFieldNumber = 3,
    kCloseAddressFieldNumber = 13,
    kFundingShimFieldNumber = 14,
    kSatPerVbyteFieldNumber = 1,
    kLocalFundingAmountFieldNumber = 4,
    kPushSatFieldNumber = 5,
    kSatPerByteFieldNumber = 7,
    kTargetConfFieldNumber = 6,
    kRemoteCsvDelayFieldNumber = 10,
    kMinHtlcMsatFieldNumber = 9,
    kMinConfsFieldNumber = 11,
    kPrivateFieldNumber = 8,
    kSpendUnconfirmedFieldNumber = 12,
    kSubtractFeesFieldNumber = 18,
    kRemoteMaxValueInFlightMsatFieldNumber = 15,
    kRemoteMaxHtlcsFieldNumber = 16,
    kMaxLocalCsvFieldNumber = 17,
  };
  // bytes node_pubkey = 2;
  void clear_node_pubkey();
  const std::string& node_pubkey() const;
  void set_node_pubkey(const std::string& value);
  void set_node_pubkey(std::string&& value);
  void set_node_pubkey(const char* value);
  void set_node_pubkey(const void* value, size_t size);
  std::string* mutable_node_pubkey();
  std::string* release_node_pubkey();
  void set_allocated_node_pubkey(std::string* node_pubkey);
  private:
  const std::string& _internal_node_pubkey() const;
  void _internal_set_node_pubkey(const std::string& value);
  std::string* _internal_mutable_node_pubkey();
  public:

  // string node_pubkey_string = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pubkey_string();
  PROTOBUF_DEPRECATED const std::string& node_pubkey_string() const;
  PROTOBUF_DEPRECATED void set_node_pubkey_string(const std::string& value);
  PROTOBUF_DEPRECATED void set_node_pubkey_string(std::string&& value);
  PROTOBUF_DEPRECATED void set_node_pubkey_string(const char* value);
  PROTOBUF_DEPRECATED void set_node_pubkey_string(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_node_pubkey_string();
  PROTOBUF_DEPRECATED std::string* release_node_pubkey_string();
  PROTOBUF_DEPRECATED void set_allocated_node_pubkey_string(std::string* node_pubkey_string);
  private:
  const std::string& _internal_node_pubkey_string() const;
  void _internal_set_node_pubkey_string(const std::string& value);
  std::string* _internal_mutable_node_pubkey_string();
  public:

  // string close_address = 13;
  void clear_close_address();
  const std::string& close_address() const;
  void set_close_address(const std::string& value);
  void set_close_address(std::string&& value);
  void set_close_address(const char* value);
  void set_close_address(const char* value, size_t size);
  std::string* mutable_close_address();
  std::string* release_close_address();
  void set_allocated_close_address(std::string* close_address);
  private:
  const std::string& _internal_close_address() const;
  void _internal_set_close_address(const std::string& value);
  std::string* _internal_mutable_close_address();
  public:

  // .lnrpc.FundingShim funding_shim = 14;
  bool has_funding_shim() const;
  private:
  bool _internal_has_funding_shim() const;
  public:
  void clear_funding_shim();
  const ::lnrpc::FundingShim& funding_shim() const;
  ::lnrpc::FundingShim* release_funding_shim();
  ::lnrpc::FundingShim* mutable_funding_shim();
  void set_allocated_funding_shim(::lnrpc::FundingShim* funding_shim);
  private:
  const ::lnrpc::FundingShim& _internal_funding_shim() const;
  ::lnrpc::FundingShim* _internal_mutable_funding_shim();
  public:

  // uint64 sat_per_vbyte = 1;
  void clear_sat_per_vbyte();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte() const;
  void set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat_per_vbyte() const;
  void _internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 local_funding_amount = 4;
  void clear_local_funding_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 local_funding_amount() const;
  void set_local_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_funding_amount() const;
  void _internal_set_local_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 push_sat = 5;
  void clear_push_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 push_sat() const;
  void set_push_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_push_sat() const;
  void _internal_set_push_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 sat_per_byte = 7 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_sat_per_byte();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte() const;
  PROTOBUF_DEPRECATED void set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sat_per_byte() const;
  void _internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 target_conf = 6;
  void clear_target_conf();
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf() const;
  void set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_conf() const;
  void _internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 remote_csv_delay = 10;
  void clear_remote_csv_delay();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_csv_delay() const;
  void set_remote_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_csv_delay() const;
  void _internal_set_remote_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 min_htlc_msat = 9;
  void clear_min_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 min_htlc_msat() const;
  void set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_htlc_msat() const;
  void _internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 min_confs = 11;
  void clear_min_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs() const;
  void set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_confs() const;
  void _internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool private = 8;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // bool spend_unconfirmed = 12;
  void clear_spend_unconfirmed();
  bool spend_unconfirmed() const;
  void set_spend_unconfirmed(bool value);
  private:
  bool _internal_spend_unconfirmed() const;
  void _internal_set_spend_unconfirmed(bool value);
  public:

  // bool subtract_fees = 18;
  void clear_subtract_fees();
  bool subtract_fees() const;
  void set_subtract_fees(bool value);
  private:
  bool _internal_subtract_fees() const;
  void _internal_set_subtract_fees(bool value);
  public:

  // uint64 remote_max_value_in_flight_msat = 15;
  void clear_remote_max_value_in_flight_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_max_value_in_flight_msat() const;
  void set_remote_max_value_in_flight_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remote_max_value_in_flight_msat() const;
  void _internal_set_remote_max_value_in_flight_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 remote_max_htlcs = 16;
  void clear_remote_max_htlcs();
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_max_htlcs() const;
  void set_remote_max_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_remote_max_htlcs() const;
  void _internal_set_remote_max_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_local_csv = 17;
  void clear_max_local_csv();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_local_csv() const;
  void set_max_local_csv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_local_csv() const;
  void _internal_set_max_local_csv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.OpenChannelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_pubkey_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr close_address_;
  ::lnrpc::FundingShim* funding_shim_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_per_vbyte_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_funding_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 push_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 sat_per_byte_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_conf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_csv_delay_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_htlc_msat_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_confs_;
  bool private__;
  bool spend_unconfirmed_;
  bool subtract_fees_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_max_value_in_flight_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 remote_max_htlcs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_local_csv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class OpenStatusUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.OpenStatusUpdate) */ {
 public:
  OpenStatusUpdate();
  virtual ~OpenStatusUpdate();

  OpenStatusUpdate(const OpenStatusUpdate& from);
  OpenStatusUpdate(OpenStatusUpdate&& from) noexcept
    : OpenStatusUpdate() {
    *this = ::std::move(from);
  }

  inline OpenStatusUpdate& operator=(const OpenStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpenStatusUpdate& operator=(OpenStatusUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpenStatusUpdate& default_instance();

  enum UpdateCase {
    kChanPending = 1,
    kChanOpen = 3,
    kPsbtFund = 5,
    UPDATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const OpenStatusUpdate*>(
               &_OpenStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(OpenStatusUpdate& a, OpenStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(OpenStatusUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpenStatusUpdate* New() const final {
    return CreateMaybeMessage<OpenStatusUpdate>(nullptr);
  }

  OpenStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpenStatusUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpenStatusUpdate& from);
  void MergeFrom(const OpenStatusUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenStatusUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.OpenStatusUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingChanIdFieldNumber = 4,
    kChanPendingFieldNumber = 1,
    kChanOpenFieldNumber = 3,
    kPsbtFundFieldNumber = 5,
  };
  // bytes pending_chan_id = 4;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // .lnrpc.PendingUpdate chan_pending = 1;
  bool has_chan_pending() const;
  private:
  bool _internal_has_chan_pending() const;
  public:
  void clear_chan_pending();
  const ::lnrpc::PendingUpdate& chan_pending() const;
  ::lnrpc::PendingUpdate* release_chan_pending();
  ::lnrpc::PendingUpdate* mutable_chan_pending();
  void set_allocated_chan_pending(::lnrpc::PendingUpdate* chan_pending);
  private:
  const ::lnrpc::PendingUpdate& _internal_chan_pending() const;
  ::lnrpc::PendingUpdate* _internal_mutable_chan_pending();
  public:

  // .lnrpc.ChannelOpenUpdate chan_open = 3;
  bool has_chan_open() const;
  private:
  bool _internal_has_chan_open() const;
  public:
  void clear_chan_open();
  const ::lnrpc::ChannelOpenUpdate& chan_open() const;
  ::lnrpc::ChannelOpenUpdate* release_chan_open();
  ::lnrpc::ChannelOpenUpdate* mutable_chan_open();
  void set_allocated_chan_open(::lnrpc::ChannelOpenUpdate* chan_open);
  private:
  const ::lnrpc::ChannelOpenUpdate& _internal_chan_open() const;
  ::lnrpc::ChannelOpenUpdate* _internal_mutable_chan_open();
  public:

  // .lnrpc.ReadyForPsbtFunding psbt_fund = 5;
  bool has_psbt_fund() const;
  private:
  bool _internal_has_psbt_fund() const;
  public:
  void clear_psbt_fund();
  const ::lnrpc::ReadyForPsbtFunding& psbt_fund() const;
  ::lnrpc::ReadyForPsbtFunding* release_psbt_fund();
  ::lnrpc::ReadyForPsbtFunding* mutable_psbt_fund();
  void set_allocated_psbt_fund(::lnrpc::ReadyForPsbtFunding* psbt_fund);
  private:
  const ::lnrpc::ReadyForPsbtFunding& _internal_psbt_fund() const;
  ::lnrpc::ReadyForPsbtFunding* _internal_mutable_psbt_fund();
  public:

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.OpenStatusUpdate)
 private:
  class _Internal;
  void set_has_chan_pending();
  void set_has_chan_open();
  void set_has_psbt_fund();

  inline bool has_update() const;
  inline void clear_has_update();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  union UpdateUnion {
    UpdateUnion() {}
    ::lnrpc::PendingUpdate* chan_pending_;
    ::lnrpc::ChannelOpenUpdate* chan_open_;
    ::lnrpc::ReadyForPsbtFunding* psbt_fund_;
  } update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class KeyLocator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.KeyLocator) */ {
 public:
  KeyLocator();
  virtual ~KeyLocator();

  KeyLocator(const KeyLocator& from);
  KeyLocator(KeyLocator&& from) noexcept
    : KeyLocator() {
    *this = ::std::move(from);
  }

  inline KeyLocator& operator=(const KeyLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyLocator& operator=(KeyLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyLocator* internal_default_instance() {
    return reinterpret_cast<const KeyLocator*>(
               &_KeyLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(KeyLocator& a, KeyLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyLocator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyLocator* New() const final {
    return CreateMaybeMessage<KeyLocator>(nullptr);
  }

  KeyLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyLocator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyLocator& from);
  void MergeFrom(const KeyLocator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyLocator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.KeyLocator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFamilyFieldNumber = 1,
    kKeyIndexFieldNumber = 2,
  };
  // int32 key_family = 1;
  void clear_key_family();
  ::PROTOBUF_NAMESPACE_ID::int32 key_family() const;
  void set_key_family(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_family() const;
  void _internal_set_key_family(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 key_index = 2;
  void clear_key_index();
  ::PROTOBUF_NAMESPACE_ID::int32 key_index() const;
  void set_key_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_key_index() const;
  void _internal_set_key_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.KeyLocator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_family_;
  ::PROTOBUF_NAMESPACE_ID::int32 key_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class KeyDescriptor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.KeyDescriptor) */ {
 public:
  KeyDescriptor();
  virtual ~KeyDescriptor();

  KeyDescriptor(const KeyDescriptor& from);
  KeyDescriptor(KeyDescriptor&& from) noexcept
    : KeyDescriptor() {
    *this = ::std::move(from);
  }

  inline KeyDescriptor& operator=(const KeyDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDescriptor& operator=(KeyDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDescriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyDescriptor* internal_default_instance() {
    return reinterpret_cast<const KeyDescriptor*>(
               &_KeyDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(KeyDescriptor& a, KeyDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDescriptor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDescriptor* New() const final {
    return CreateMaybeMessage<KeyDescriptor>(nullptr);
  }

  KeyDescriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDescriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDescriptor& from);
  void MergeFrom(const KeyDescriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDescriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.KeyDescriptor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawKeyBytesFieldNumber = 1,
    kKeyLocFieldNumber = 2,
  };
  // bytes raw_key_bytes = 1;
  void clear_raw_key_bytes();
  const std::string& raw_key_bytes() const;
  void set_raw_key_bytes(const std::string& value);
  void set_raw_key_bytes(std::string&& value);
  void set_raw_key_bytes(const char* value);
  void set_raw_key_bytes(const void* value, size_t size);
  std::string* mutable_raw_key_bytes();
  std::string* release_raw_key_bytes();
  void set_allocated_raw_key_bytes(std::string* raw_key_bytes);
  private:
  const std::string& _internal_raw_key_bytes() const;
  void _internal_set_raw_key_bytes(const std::string& value);
  std::string* _internal_mutable_raw_key_bytes();
  public:

  // .lnrpc.KeyLocator key_loc = 2;
  bool has_key_loc() const;
  private:
  bool _internal_has_key_loc() const;
  public:
  void clear_key_loc();
  const ::lnrpc::KeyLocator& key_loc() const;
  ::lnrpc::KeyLocator* release_key_loc();
  ::lnrpc::KeyLocator* mutable_key_loc();
  void set_allocated_key_loc(::lnrpc::KeyLocator* key_loc);
  private:
  const ::lnrpc::KeyLocator& _internal_key_loc() const;
  ::lnrpc::KeyLocator* _internal_mutable_key_loc();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.KeyDescriptor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_key_bytes_;
  ::lnrpc::KeyLocator* key_loc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChanPointShim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChanPointShim) */ {
 public:
  ChanPointShim();
  virtual ~ChanPointShim();

  ChanPointShim(const ChanPointShim& from);
  ChanPointShim(ChanPointShim&& from) noexcept
    : ChanPointShim() {
    *this = ::std::move(from);
  }

  inline ChanPointShim& operator=(const ChanPointShim& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChanPointShim& operator=(ChanPointShim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChanPointShim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChanPointShim* internal_default_instance() {
    return reinterpret_cast<const ChanPointShim*>(
               &_ChanPointShim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ChanPointShim& a, ChanPointShim& b) {
    a.Swap(&b);
  }
  inline void Swap(ChanPointShim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChanPointShim* New() const final {
    return CreateMaybeMessage<ChanPointShim>(nullptr);
  }

  ChanPointShim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChanPointShim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChanPointShim& from);
  void MergeFrom(const ChanPointShim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChanPointShim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChanPointShim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteKeyFieldNumber = 4,
    kPendingChanIdFieldNumber = 5,
    kChanPointFieldNumber = 2,
    kLocalKeyFieldNumber = 3,
    kAmtFieldNumber = 1,
    kThawHeightFieldNumber = 6,
  };
  // bytes remote_key = 4;
  void clear_remote_key();
  const std::string& remote_key() const;
  void set_remote_key(const std::string& value);
  void set_remote_key(std::string&& value);
  void set_remote_key(const char* value);
  void set_remote_key(const void* value, size_t size);
  std::string* mutable_remote_key();
  std::string* release_remote_key();
  void set_allocated_remote_key(std::string* remote_key);
  private:
  const std::string& _internal_remote_key() const;
  void _internal_set_remote_key(const std::string& value);
  std::string* _internal_mutable_remote_key();
  public:

  // bytes pending_chan_id = 5;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // .lnrpc.ChannelPoint chan_point = 2;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  // .lnrpc.KeyDescriptor local_key = 3;
  bool has_local_key() const;
  private:
  bool _internal_has_local_key() const;
  public:
  void clear_local_key();
  const ::lnrpc::KeyDescriptor& local_key() const;
  ::lnrpc::KeyDescriptor* release_local_key();
  ::lnrpc::KeyDescriptor* mutable_local_key();
  void set_allocated_local_key(::lnrpc::KeyDescriptor* local_key);
  private:
  const ::lnrpc::KeyDescriptor& _internal_local_key() const;
  ::lnrpc::KeyDescriptor* _internal_mutable_local_key();
  public:

  // int64 amt = 1;
  void clear_amt();
  ::PROTOBUF_NAMESPACE_ID::int64 amt() const;
  void set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt() const;
  void _internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 thaw_height = 6;
  void clear_thaw_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 thaw_height() const;
  void set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_thaw_height() const;
  void _internal_set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChanPointShim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  ::lnrpc::ChannelPoint* chan_point_;
  ::lnrpc::KeyDescriptor* local_key_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thaw_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PsbtShim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PsbtShim) */ {
 public:
  PsbtShim();
  virtual ~PsbtShim();

  PsbtShim(const PsbtShim& from);
  PsbtShim(PsbtShim&& from) noexcept
    : PsbtShim() {
    *this = ::std::move(from);
  }

  inline PsbtShim& operator=(const PsbtShim& from) {
    CopyFrom(from);
    return *this;
  }
  inline PsbtShim& operator=(PsbtShim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PsbtShim& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PsbtShim* internal_default_instance() {
    return reinterpret_cast<const PsbtShim*>(
               &_PsbtShim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(PsbtShim& a, PsbtShim& b) {
    a.Swap(&b);
  }
  inline void Swap(PsbtShim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PsbtShim* New() const final {
    return CreateMaybeMessage<PsbtShim>(nullptr);
  }

  PsbtShim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PsbtShim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PsbtShim& from);
  void MergeFrom(const PsbtShim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PsbtShim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PsbtShim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingChanIdFieldNumber = 1,
    kBasePsbtFieldNumber = 2,
    kNoPublishFieldNumber = 3,
  };
  // bytes pending_chan_id = 1;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // bytes base_psbt = 2;
  void clear_base_psbt();
  const std::string& base_psbt() const;
  void set_base_psbt(const std::string& value);
  void set_base_psbt(std::string&& value);
  void set_base_psbt(const char* value);
  void set_base_psbt(const void* value, size_t size);
  std::string* mutable_base_psbt();
  std::string* release_base_psbt();
  void set_allocated_base_psbt(std::string* base_psbt);
  private:
  const std::string& _internal_base_psbt() const;
  void _internal_set_base_psbt(const std::string& value);
  std::string* _internal_mutable_base_psbt();
  public:

  // bool no_publish = 3;
  void clear_no_publish();
  bool no_publish() const;
  void set_no_publish(bool value);
  private:
  bool _internal_no_publish() const;
  void _internal_set_no_publish(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PsbtShim)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr base_psbt_;
  bool no_publish_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingShim :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingShim) */ {
 public:
  FundingShim();
  virtual ~FundingShim();

  FundingShim(const FundingShim& from);
  FundingShim(FundingShim&& from) noexcept
    : FundingShim() {
    *this = ::std::move(from);
  }

  inline FundingShim& operator=(const FundingShim& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingShim& operator=(FundingShim&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingShim& default_instance();

  enum ShimCase {
    kChanPointShim = 1,
    kPsbtShim = 2,
    SHIM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingShim* internal_default_instance() {
    return reinterpret_cast<const FundingShim*>(
               &_FundingShim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(FundingShim& a, FundingShim& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingShim* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingShim* New() const final {
    return CreateMaybeMessage<FundingShim>(nullptr);
  }

  FundingShim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingShim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingShim& from);
  void MergeFrom(const FundingShim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingShim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingShim";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanPointShimFieldNumber = 1,
    kPsbtShimFieldNumber = 2,
  };
  // .lnrpc.ChanPointShim chan_point_shim = 1;
  bool has_chan_point_shim() const;
  private:
  bool _internal_has_chan_point_shim() const;
  public:
  void clear_chan_point_shim();
  const ::lnrpc::ChanPointShim& chan_point_shim() const;
  ::lnrpc::ChanPointShim* release_chan_point_shim();
  ::lnrpc::ChanPointShim* mutable_chan_point_shim();
  void set_allocated_chan_point_shim(::lnrpc::ChanPointShim* chan_point_shim);
  private:
  const ::lnrpc::ChanPointShim& _internal_chan_point_shim() const;
  ::lnrpc::ChanPointShim* _internal_mutable_chan_point_shim();
  public:

  // .lnrpc.PsbtShim psbt_shim = 2;
  bool has_psbt_shim() const;
  private:
  bool _internal_has_psbt_shim() const;
  public:
  void clear_psbt_shim();
  const ::lnrpc::PsbtShim& psbt_shim() const;
  ::lnrpc::PsbtShim* release_psbt_shim();
  ::lnrpc::PsbtShim* mutable_psbt_shim();
  void set_allocated_psbt_shim(::lnrpc::PsbtShim* psbt_shim);
  private:
  const ::lnrpc::PsbtShim& _internal_psbt_shim() const;
  ::lnrpc::PsbtShim* _internal_mutable_psbt_shim();
  public:

  void clear_shim();
  ShimCase shim_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.FundingShim)
 private:
  class _Internal;
  void set_has_chan_point_shim();
  void set_has_psbt_shim();

  inline bool has_shim() const;
  inline void clear_has_shim();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ShimUnion {
    ShimUnion() {}
    ::lnrpc::ChanPointShim* chan_point_shim_;
    ::lnrpc::PsbtShim* psbt_shim_;
  } shim_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingShimCancel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingShimCancel) */ {
 public:
  FundingShimCancel();
  virtual ~FundingShimCancel();

  FundingShimCancel(const FundingShimCancel& from);
  FundingShimCancel(FundingShimCancel&& from) noexcept
    : FundingShimCancel() {
    *this = ::std::move(from);
  }

  inline FundingShimCancel& operator=(const FundingShimCancel& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingShimCancel& operator=(FundingShimCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingShimCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingShimCancel* internal_default_instance() {
    return reinterpret_cast<const FundingShimCancel*>(
               &_FundingShimCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(FundingShimCancel& a, FundingShimCancel& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingShimCancel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingShimCancel* New() const final {
    return CreateMaybeMessage<FundingShimCancel>(nullptr);
  }

  FundingShimCancel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingShimCancel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingShimCancel& from);
  void MergeFrom(const FundingShimCancel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingShimCancel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingShimCancel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPendingChanIdFieldNumber = 1,
  };
  // bytes pending_chan_id = 1;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.FundingShimCancel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingPsbtVerify :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingPsbtVerify) */ {
 public:
  FundingPsbtVerify();
  virtual ~FundingPsbtVerify();

  FundingPsbtVerify(const FundingPsbtVerify& from);
  FundingPsbtVerify(FundingPsbtVerify&& from) noexcept
    : FundingPsbtVerify() {
    *this = ::std::move(from);
  }

  inline FundingPsbtVerify& operator=(const FundingPsbtVerify& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingPsbtVerify& operator=(FundingPsbtVerify&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingPsbtVerify& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingPsbtVerify* internal_default_instance() {
    return reinterpret_cast<const FundingPsbtVerify*>(
               &_FundingPsbtVerify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(FundingPsbtVerify& a, FundingPsbtVerify& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingPsbtVerify* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingPsbtVerify* New() const final {
    return CreateMaybeMessage<FundingPsbtVerify>(nullptr);
  }

  FundingPsbtVerify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingPsbtVerify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingPsbtVerify& from);
  void MergeFrom(const FundingPsbtVerify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingPsbtVerify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingPsbtVerify";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundedPsbtFieldNumber = 1,
    kPendingChanIdFieldNumber = 2,
  };
  // bytes funded_psbt = 1;
  void clear_funded_psbt();
  const std::string& funded_psbt() const;
  void set_funded_psbt(const std::string& value);
  void set_funded_psbt(std::string&& value);
  void set_funded_psbt(const char* value);
  void set_funded_psbt(const void* value, size_t size);
  std::string* mutable_funded_psbt();
  std::string* release_funded_psbt();
  void set_allocated_funded_psbt(std::string* funded_psbt);
  private:
  const std::string& _internal_funded_psbt() const;
  void _internal_set_funded_psbt(const std::string& value);
  std::string* _internal_mutable_funded_psbt();
  public:

  // bytes pending_chan_id = 2;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.FundingPsbtVerify)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr funded_psbt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingPsbtFinalize :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingPsbtFinalize) */ {
 public:
  FundingPsbtFinalize();
  virtual ~FundingPsbtFinalize();

  FundingPsbtFinalize(const FundingPsbtFinalize& from);
  FundingPsbtFinalize(FundingPsbtFinalize&& from) noexcept
    : FundingPsbtFinalize() {
    *this = ::std::move(from);
  }

  inline FundingPsbtFinalize& operator=(const FundingPsbtFinalize& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingPsbtFinalize& operator=(FundingPsbtFinalize&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingPsbtFinalize& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingPsbtFinalize* internal_default_instance() {
    return reinterpret_cast<const FundingPsbtFinalize*>(
               &_FundingPsbtFinalize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(FundingPsbtFinalize& a, FundingPsbtFinalize& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingPsbtFinalize* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingPsbtFinalize* New() const final {
    return CreateMaybeMessage<FundingPsbtFinalize>(nullptr);
  }

  FundingPsbtFinalize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingPsbtFinalize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingPsbtFinalize& from);
  void MergeFrom(const FundingPsbtFinalize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingPsbtFinalize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingPsbtFinalize";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignedPsbtFieldNumber = 1,
    kPendingChanIdFieldNumber = 2,
    kFinalRawTxFieldNumber = 3,
  };
  // bytes signed_psbt = 1;
  void clear_signed_psbt();
  const std::string& signed_psbt() const;
  void set_signed_psbt(const std::string& value);
  void set_signed_psbt(std::string&& value);
  void set_signed_psbt(const char* value);
  void set_signed_psbt(const void* value, size_t size);
  std::string* mutable_signed_psbt();
  std::string* release_signed_psbt();
  void set_allocated_signed_psbt(std::string* signed_psbt);
  private:
  const std::string& _internal_signed_psbt() const;
  void _internal_set_signed_psbt(const std::string& value);
  std::string* _internal_mutable_signed_psbt();
  public:

  // bytes pending_chan_id = 2;
  void clear_pending_chan_id();
  const std::string& pending_chan_id() const;
  void set_pending_chan_id(const std::string& value);
  void set_pending_chan_id(std::string&& value);
  void set_pending_chan_id(const char* value);
  void set_pending_chan_id(const void* value, size_t size);
  std::string* mutable_pending_chan_id();
  std::string* release_pending_chan_id();
  void set_allocated_pending_chan_id(std::string* pending_chan_id);
  private:
  const std::string& _internal_pending_chan_id() const;
  void _internal_set_pending_chan_id(const std::string& value);
  std::string* _internal_mutable_pending_chan_id();
  public:

  // bytes final_raw_tx = 3;
  void clear_final_raw_tx();
  const std::string& final_raw_tx() const;
  void set_final_raw_tx(const std::string& value);
  void set_final_raw_tx(std::string&& value);
  void set_final_raw_tx(const char* value);
  void set_final_raw_tx(const void* value, size_t size);
  std::string* mutable_final_raw_tx();
  std::string* release_final_raw_tx();
  void set_allocated_final_raw_tx(std::string* final_raw_tx);
  private:
  const std::string& _internal_final_raw_tx() const;
  void _internal_set_final_raw_tx(const std::string& value);
  std::string* _internal_mutable_final_raw_tx();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.FundingPsbtFinalize)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signed_psbt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pending_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr final_raw_tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingTransitionMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingTransitionMsg) */ {
 public:
  FundingTransitionMsg();
  virtual ~FundingTransitionMsg();

  FundingTransitionMsg(const FundingTransitionMsg& from);
  FundingTransitionMsg(FundingTransitionMsg&& from) noexcept
    : FundingTransitionMsg() {
    *this = ::std::move(from);
  }

  inline FundingTransitionMsg& operator=(const FundingTransitionMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingTransitionMsg& operator=(FundingTransitionMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingTransitionMsg& default_instance();

  enum TriggerCase {
    kShimRegister = 1,
    kShimCancel = 2,
    kPsbtVerify = 3,
    kPsbtFinalize = 4,
    TRIGGER_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingTransitionMsg* internal_default_instance() {
    return reinterpret_cast<const FundingTransitionMsg*>(
               &_FundingTransitionMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(FundingTransitionMsg& a, FundingTransitionMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingTransitionMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingTransitionMsg* New() const final {
    return CreateMaybeMessage<FundingTransitionMsg>(nullptr);
  }

  FundingTransitionMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingTransitionMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingTransitionMsg& from);
  void MergeFrom(const FundingTransitionMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingTransitionMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingTransitionMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShimRegisterFieldNumber = 1,
    kShimCancelFieldNumber = 2,
    kPsbtVerifyFieldNumber = 3,
    kPsbtFinalizeFieldNumber = 4,
  };
  // .lnrpc.FundingShim shim_register = 1;
  bool has_shim_register() const;
  private:
  bool _internal_has_shim_register() const;
  public:
  void clear_shim_register();
  const ::lnrpc::FundingShim& shim_register() const;
  ::lnrpc::FundingShim* release_shim_register();
  ::lnrpc::FundingShim* mutable_shim_register();
  void set_allocated_shim_register(::lnrpc::FundingShim* shim_register);
  private:
  const ::lnrpc::FundingShim& _internal_shim_register() const;
  ::lnrpc::FundingShim* _internal_mutable_shim_register();
  public:

  // .lnrpc.FundingShimCancel shim_cancel = 2;
  bool has_shim_cancel() const;
  private:
  bool _internal_has_shim_cancel() const;
  public:
  void clear_shim_cancel();
  const ::lnrpc::FundingShimCancel& shim_cancel() const;
  ::lnrpc::FundingShimCancel* release_shim_cancel();
  ::lnrpc::FundingShimCancel* mutable_shim_cancel();
  void set_allocated_shim_cancel(::lnrpc::FundingShimCancel* shim_cancel);
  private:
  const ::lnrpc::FundingShimCancel& _internal_shim_cancel() const;
  ::lnrpc::FundingShimCancel* _internal_mutable_shim_cancel();
  public:

  // .lnrpc.FundingPsbtVerify psbt_verify = 3;
  bool has_psbt_verify() const;
  private:
  bool _internal_has_psbt_verify() const;
  public:
  void clear_psbt_verify();
  const ::lnrpc::FundingPsbtVerify& psbt_verify() const;
  ::lnrpc::FundingPsbtVerify* release_psbt_verify();
  ::lnrpc::FundingPsbtVerify* mutable_psbt_verify();
  void set_allocated_psbt_verify(::lnrpc::FundingPsbtVerify* psbt_verify);
  private:
  const ::lnrpc::FundingPsbtVerify& _internal_psbt_verify() const;
  ::lnrpc::FundingPsbtVerify* _internal_mutable_psbt_verify();
  public:

  // .lnrpc.FundingPsbtFinalize psbt_finalize = 4;
  bool has_psbt_finalize() const;
  private:
  bool _internal_has_psbt_finalize() const;
  public:
  void clear_psbt_finalize();
  const ::lnrpc::FundingPsbtFinalize& psbt_finalize() const;
  ::lnrpc::FundingPsbtFinalize* release_psbt_finalize();
  ::lnrpc::FundingPsbtFinalize* mutable_psbt_finalize();
  void set_allocated_psbt_finalize(::lnrpc::FundingPsbtFinalize* psbt_finalize);
  private:
  const ::lnrpc::FundingPsbtFinalize& _internal_psbt_finalize() const;
  ::lnrpc::FundingPsbtFinalize* _internal_mutable_psbt_finalize();
  public:

  void clear_trigger();
  TriggerCase trigger_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.FundingTransitionMsg)
 private:
  class _Internal;
  void set_has_shim_register();
  void set_has_shim_cancel();
  void set_has_psbt_verify();
  void set_has_psbt_finalize();

  inline bool has_trigger() const;
  inline void clear_has_trigger();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TriggerUnion {
    TriggerUnion() {}
    ::lnrpc::FundingShim* shim_register_;
    ::lnrpc::FundingShimCancel* shim_cancel_;
    ::lnrpc::FundingPsbtVerify* psbt_verify_;
    ::lnrpc::FundingPsbtFinalize* psbt_finalize_;
  } trigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FundingStateStepResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FundingStateStepResp) */ {
 public:
  FundingStateStepResp();
  virtual ~FundingStateStepResp();

  FundingStateStepResp(const FundingStateStepResp& from);
  FundingStateStepResp(FundingStateStepResp&& from) noexcept
    : FundingStateStepResp() {
    *this = ::std::move(from);
  }

  inline FundingStateStepResp& operator=(const FundingStateStepResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FundingStateStepResp& operator=(FundingStateStepResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FundingStateStepResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FundingStateStepResp* internal_default_instance() {
    return reinterpret_cast<const FundingStateStepResp*>(
               &_FundingStateStepResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(FundingStateStepResp& a, FundingStateStepResp& b) {
    a.Swap(&b);
  }
  inline void Swap(FundingStateStepResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FundingStateStepResp* New() const final {
    return CreateMaybeMessage<FundingStateStepResp>(nullptr);
  }

  FundingStateStepResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FundingStateStepResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FundingStateStepResp& from);
  void MergeFrom(const FundingStateStepResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FundingStateStepResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FundingStateStepResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.FundingStateStepResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingHTLC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingHTLC) */ {
 public:
  PendingHTLC();
  virtual ~PendingHTLC();

  PendingHTLC(const PendingHTLC& from);
  PendingHTLC(PendingHTLC&& from) noexcept
    : PendingHTLC() {
    *this = ::std::move(from);
  }

  inline PendingHTLC& operator=(const PendingHTLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingHTLC& operator=(PendingHTLC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingHTLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingHTLC* internal_default_instance() {
    return reinterpret_cast<const PendingHTLC*>(
               &_PendingHTLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(PendingHTLC& a, PendingHTLC& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingHTLC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingHTLC* New() const final {
    return CreateMaybeMessage<PendingHTLC>(nullptr);
  }

  PendingHTLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingHTLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingHTLC& from);
  void MergeFrom(const PendingHTLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingHTLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingHTLC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutpointFieldNumber = 3,
    kAmountFieldNumber = 2,
    kIncomingFieldNumber = 1,
    kMaturityHeightFieldNumber = 4,
    kBlocksTilMaturityFieldNumber = 5,
    kStageFieldNumber = 6,
  };
  // string outpoint = 3;
  void clear_outpoint();
  const std::string& outpoint() const;
  void set_outpoint(const std::string& value);
  void set_outpoint(std::string&& value);
  void set_outpoint(const char* value);
  void set_outpoint(const char* value, size_t size);
  std::string* mutable_outpoint();
  std::string* release_outpoint();
  void set_allocated_outpoint(std::string* outpoint);
  private:
  const std::string& _internal_outpoint() const;
  void _internal_set_outpoint(const std::string& value);
  std::string* _internal_mutable_outpoint();
  public:

  // int64 amount = 2;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool incoming = 1;
  void clear_incoming();
  bool incoming() const;
  void set_incoming(bool value);
  private:
  bool _internal_incoming() const;
  void _internal_set_incoming(bool value);
  public:

  // uint32 maturity_height = 4;
  void clear_maturity_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_height() const;
  void set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity_height() const;
  void _internal_set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 blocks_til_maturity = 5;
  void clear_blocks_til_maturity();
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_til_maturity() const;
  void set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocks_til_maturity() const;
  void _internal_set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 stage = 6;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::uint32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingHTLC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr outpoint_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  bool incoming_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_til_maturity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsRequest) */ {
 public:
  PendingChannelsRequest();
  virtual ~PendingChannelsRequest();

  PendingChannelsRequest(const PendingChannelsRequest& from);
  PendingChannelsRequest(PendingChannelsRequest&& from) noexcept
    : PendingChannelsRequest() {
    *this = ::std::move(from);
  }

  inline PendingChannelsRequest& operator=(const PendingChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsRequest& operator=(PendingChannelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsRequest*>(
               &_PendingChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PendingChannelsRequest& a, PendingChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsRequest* New() const final {
    return CreateMaybeMessage<PendingChannelsRequest>(nullptr);
  }

  PendingChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsRequest& from);
  void MergeFrom(const PendingChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_PendingChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.PendingChannel) */ {
 public:
  PendingChannelsResponse_PendingChannel();
  virtual ~PendingChannelsResponse_PendingChannel();

  PendingChannelsResponse_PendingChannel(const PendingChannelsResponse_PendingChannel& from);
  PendingChannelsResponse_PendingChannel(PendingChannelsResponse_PendingChannel&& from) noexcept
    : PendingChannelsResponse_PendingChannel() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_PendingChannel& operator=(const PendingChannelsResponse_PendingChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_PendingChannel& operator=(PendingChannelsResponse_PendingChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_PendingChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_PendingChannel* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_PendingChannel*>(
               &_PendingChannelsResponse_PendingChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(PendingChannelsResponse_PendingChannel& a, PendingChannelsResponse_PendingChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_PendingChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_PendingChannel* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_PendingChannel>(nullptr);
  }

  PendingChannelsResponse_PendingChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_PendingChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_PendingChannel& from);
  void MergeFrom(const PendingChannelsResponse_PendingChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_PendingChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.PendingChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteNodePubFieldNumber = 1,
    kChannelPointFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLocalBalanceFieldNumber = 4,
    kRemoteBalanceFieldNumber = 5,
    kLocalChanReserveSatFieldNumber = 6,
    kRemoteChanReserveSatFieldNumber = 7,
    kInitiatorFieldNumber = 8,
    kCommitmentTypeFieldNumber = 9,
  };
  // string remote_node_pub = 1;
  void clear_remote_node_pub();
  const std::string& remote_node_pub() const;
  void set_remote_node_pub(const std::string& value);
  void set_remote_node_pub(std::string&& value);
  void set_remote_node_pub(const char* value);
  void set_remote_node_pub(const char* value, size_t size);
  std::string* mutable_remote_node_pub();
  std::string* release_remote_node_pub();
  void set_allocated_remote_node_pub(std::string* remote_node_pub);
  private:
  const std::string& _internal_remote_node_pub() const;
  void _internal_set_remote_node_pub(const std::string& value);
  std::string* _internal_mutable_remote_node_pub();
  public:

  // string channel_point = 2;
  void clear_channel_point();
  const std::string& channel_point() const;
  void set_channel_point(const std::string& value);
  void set_channel_point(std::string&& value);
  void set_channel_point(const char* value);
  void set_channel_point(const char* value, size_t size);
  std::string* mutable_channel_point();
  std::string* release_channel_point();
  void set_allocated_channel_point(std::string* channel_point);
  private:
  const std::string& _internal_channel_point() const;
  void _internal_set_channel_point(const std::string& value);
  std::string* _internal_mutable_channel_point();
  public:

  // int64 capacity = 3;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 local_balance = 4;
  void clear_local_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 local_balance() const;
  void set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_balance() const;
  void _internal_set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remote_balance = 5;
  void clear_remote_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 remote_balance() const;
  void set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remote_balance() const;
  void _internal_set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 local_chan_reserve_sat = 6;
  void clear_local_chan_reserve_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 local_chan_reserve_sat() const;
  void set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_local_chan_reserve_sat() const;
  void _internal_set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 remote_chan_reserve_sat = 7;
  void clear_remote_chan_reserve_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 remote_chan_reserve_sat() const;
  void set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remote_chan_reserve_sat() const;
  void _internal_set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .lnrpc.Initiator initiator = 8;
  void clear_initiator();
  ::lnrpc::Initiator initiator() const;
  void set_initiator(::lnrpc::Initiator value);
  private:
  ::lnrpc::Initiator _internal_initiator() const;
  void _internal_set_initiator(::lnrpc::Initiator value);
  public:

  // .lnrpc.CommitmentType commitment_type = 9;
  void clear_commitment_type();
  ::lnrpc::CommitmentType commitment_type() const;
  void set_commitment_type(::lnrpc::CommitmentType value);
  private:
  ::lnrpc::CommitmentType _internal_commitment_type() const;
  void _internal_set_commitment_type(::lnrpc::CommitmentType value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.PendingChannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_node_pub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 remote_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 local_chan_reserve_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 remote_chan_reserve_sat_;
  int initiator_;
  int commitment_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_PendingOpenChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.PendingOpenChannel) */ {
 public:
  PendingChannelsResponse_PendingOpenChannel();
  virtual ~PendingChannelsResponse_PendingOpenChannel();

  PendingChannelsResponse_PendingOpenChannel(const PendingChannelsResponse_PendingOpenChannel& from);
  PendingChannelsResponse_PendingOpenChannel(PendingChannelsResponse_PendingOpenChannel&& from) noexcept
    : PendingChannelsResponse_PendingOpenChannel() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_PendingOpenChannel& operator=(const PendingChannelsResponse_PendingOpenChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_PendingOpenChannel& operator=(PendingChannelsResponse_PendingOpenChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_PendingOpenChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_PendingOpenChannel* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_PendingOpenChannel*>(
               &_PendingChannelsResponse_PendingOpenChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(PendingChannelsResponse_PendingOpenChannel& a, PendingChannelsResponse_PendingOpenChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_PendingOpenChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_PendingOpenChannel* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_PendingOpenChannel>(nullptr);
  }

  PendingChannelsResponse_PendingOpenChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_PendingOpenChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_PendingOpenChannel& from);
  void MergeFrom(const PendingChannelsResponse_PendingOpenChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_PendingOpenChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.PendingOpenChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kCommitFeeFieldNumber = 4,
    kCommitWeightFieldNumber = 5,
    kFeePerKwFieldNumber = 6,
    kConfirmationHeightFieldNumber = 2,
  };
  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::lnrpc::PendingChannelsResponse_PendingChannel& channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* release_channel();
  ::lnrpc::PendingChannelsResponse_PendingChannel* mutable_channel();
  void set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel);
  private:
  const ::lnrpc::PendingChannelsResponse_PendingChannel& _internal_channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* _internal_mutable_channel();
  public:

  // int64 commit_fee = 4;
  void clear_commit_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_fee() const;
  void set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commit_fee() const;
  void _internal_set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 commit_weight = 5;
  void clear_commit_weight();
  ::PROTOBUF_NAMESPACE_ID::int64 commit_weight() const;
  void set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_commit_weight() const;
  void _internal_set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_per_kw = 6;
  void clear_fee_per_kw();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kw() const;
  void set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_per_kw() const;
  void _internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 confirmation_height = 2;
  void clear_confirmation_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation_height() const;
  void set_confirmation_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_confirmation_height() const;
  void _internal_set_confirmation_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.PendingOpenChannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::PendingChannelsResponse_PendingChannel* channel_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 commit_weight_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_kw_;
  ::PROTOBUF_NAMESPACE_ID::uint32 confirmation_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_WaitingCloseChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.WaitingCloseChannel) */ {
 public:
  PendingChannelsResponse_WaitingCloseChannel();
  virtual ~PendingChannelsResponse_WaitingCloseChannel();

  PendingChannelsResponse_WaitingCloseChannel(const PendingChannelsResponse_WaitingCloseChannel& from);
  PendingChannelsResponse_WaitingCloseChannel(PendingChannelsResponse_WaitingCloseChannel&& from) noexcept
    : PendingChannelsResponse_WaitingCloseChannel() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_WaitingCloseChannel& operator=(const PendingChannelsResponse_WaitingCloseChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_WaitingCloseChannel& operator=(PendingChannelsResponse_WaitingCloseChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_WaitingCloseChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_WaitingCloseChannel* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_WaitingCloseChannel*>(
               &_PendingChannelsResponse_WaitingCloseChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(PendingChannelsResponse_WaitingCloseChannel& a, PendingChannelsResponse_WaitingCloseChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_WaitingCloseChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_WaitingCloseChannel* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_WaitingCloseChannel>(nullptr);
  }

  PendingChannelsResponse_WaitingCloseChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_WaitingCloseChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_WaitingCloseChannel& from);
  void MergeFrom(const PendingChannelsResponse_WaitingCloseChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_WaitingCloseChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.WaitingCloseChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kCommitmentsFieldNumber = 3,
    kLimboBalanceFieldNumber = 2,
  };
  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::lnrpc::PendingChannelsResponse_PendingChannel& channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* release_channel();
  ::lnrpc::PendingChannelsResponse_PendingChannel* mutable_channel();
  void set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel);
  private:
  const ::lnrpc::PendingChannelsResponse_PendingChannel& _internal_channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* _internal_mutable_channel();
  public:

  // .lnrpc.PendingChannelsResponse.Commitments commitments = 3;
  bool has_commitments() const;
  private:
  bool _internal_has_commitments() const;
  public:
  void clear_commitments();
  const ::lnrpc::PendingChannelsResponse_Commitments& commitments() const;
  ::lnrpc::PendingChannelsResponse_Commitments* release_commitments();
  ::lnrpc::PendingChannelsResponse_Commitments* mutable_commitments();
  void set_allocated_commitments(::lnrpc::PendingChannelsResponse_Commitments* commitments);
  private:
  const ::lnrpc::PendingChannelsResponse_Commitments& _internal_commitments() const;
  ::lnrpc::PendingChannelsResponse_Commitments* _internal_mutable_commitments();
  public:

  // int64 limbo_balance = 2;
  void clear_limbo_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 limbo_balance() const;
  void set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limbo_balance() const;
  void _internal_set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.WaitingCloseChannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::PendingChannelsResponse_PendingChannel* channel_;
  ::lnrpc::PendingChannelsResponse_Commitments* commitments_;
  ::PROTOBUF_NAMESPACE_ID::int64 limbo_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_Commitments :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.Commitments) */ {
 public:
  PendingChannelsResponse_Commitments();
  virtual ~PendingChannelsResponse_Commitments();

  PendingChannelsResponse_Commitments(const PendingChannelsResponse_Commitments& from);
  PendingChannelsResponse_Commitments(PendingChannelsResponse_Commitments&& from) noexcept
    : PendingChannelsResponse_Commitments() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_Commitments& operator=(const PendingChannelsResponse_Commitments& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_Commitments& operator=(PendingChannelsResponse_Commitments&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_Commitments& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_Commitments* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_Commitments*>(
               &_PendingChannelsResponse_Commitments_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(PendingChannelsResponse_Commitments& a, PendingChannelsResponse_Commitments& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_Commitments* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_Commitments* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_Commitments>(nullptr);
  }

  PendingChannelsResponse_Commitments* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_Commitments>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_Commitments& from);
  void MergeFrom(const PendingChannelsResponse_Commitments& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_Commitments* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.Commitments";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalTxidFieldNumber = 1,
    kRemoteTxidFieldNumber = 2,
    kRemotePendingTxidFieldNumber = 3,
    kLocalCommitFeeSatFieldNumber = 4,
    kRemoteCommitFeeSatFieldNumber = 5,
    kRemotePendingCommitFeeSatFieldNumber = 6,
  };
  // string local_txid = 1;
  void clear_local_txid();
  const std::string& local_txid() const;
  void set_local_txid(const std::string& value);
  void set_local_txid(std::string&& value);
  void set_local_txid(const char* value);
  void set_local_txid(const char* value, size_t size);
  std::string* mutable_local_txid();
  std::string* release_local_txid();
  void set_allocated_local_txid(std::string* local_txid);
  private:
  const std::string& _internal_local_txid() const;
  void _internal_set_local_txid(const std::string& value);
  std::string* _internal_mutable_local_txid();
  public:

  // string remote_txid = 2;
  void clear_remote_txid();
  const std::string& remote_txid() const;
  void set_remote_txid(const std::string& value);
  void set_remote_txid(std::string&& value);
  void set_remote_txid(const char* value);
  void set_remote_txid(const char* value, size_t size);
  std::string* mutable_remote_txid();
  std::string* release_remote_txid();
  void set_allocated_remote_txid(std::string* remote_txid);
  private:
  const std::string& _internal_remote_txid() const;
  void _internal_set_remote_txid(const std::string& value);
  std::string* _internal_mutable_remote_txid();
  public:

  // string remote_pending_txid = 3;
  void clear_remote_pending_txid();
  const std::string& remote_pending_txid() const;
  void set_remote_pending_txid(const std::string& value);
  void set_remote_pending_txid(std::string&& value);
  void set_remote_pending_txid(const char* value);
  void set_remote_pending_txid(const char* value, size_t size);
  std::string* mutable_remote_pending_txid();
  std::string* release_remote_pending_txid();
  void set_allocated_remote_pending_txid(std::string* remote_pending_txid);
  private:
  const std::string& _internal_remote_pending_txid() const;
  void _internal_set_remote_pending_txid(const std::string& value);
  std::string* _internal_mutable_remote_pending_txid();
  public:

  // uint64 local_commit_fee_sat = 4;
  void clear_local_commit_fee_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 local_commit_fee_sat() const;
  void set_local_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_local_commit_fee_sat() const;
  void _internal_set_local_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 remote_commit_fee_sat = 5;
  void clear_remote_commit_fee_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_commit_fee_sat() const;
  void set_remote_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remote_commit_fee_sat() const;
  void _internal_set_remote_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 remote_pending_commit_fee_sat = 6;
  void clear_remote_pending_commit_fee_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_pending_commit_fee_sat() const;
  void set_remote_pending_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_remote_pending_commit_fee_sat() const;
  void _internal_set_remote_pending_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.Commitments)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_txid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_txid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr remote_pending_txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 local_commit_fee_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_commit_fee_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 remote_pending_commit_fee_sat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_ClosedChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.ClosedChannel) */ {
 public:
  PendingChannelsResponse_ClosedChannel();
  virtual ~PendingChannelsResponse_ClosedChannel();

  PendingChannelsResponse_ClosedChannel(const PendingChannelsResponse_ClosedChannel& from);
  PendingChannelsResponse_ClosedChannel(PendingChannelsResponse_ClosedChannel&& from) noexcept
    : PendingChannelsResponse_ClosedChannel() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_ClosedChannel& operator=(const PendingChannelsResponse_ClosedChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_ClosedChannel& operator=(PendingChannelsResponse_ClosedChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_ClosedChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_ClosedChannel* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_ClosedChannel*>(
               &_PendingChannelsResponse_ClosedChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(PendingChannelsResponse_ClosedChannel& a, PendingChannelsResponse_ClosedChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_ClosedChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_ClosedChannel* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_ClosedChannel>(nullptr);
  }

  PendingChannelsResponse_ClosedChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_ClosedChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_ClosedChannel& from);
  void MergeFrom(const PendingChannelsResponse_ClosedChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_ClosedChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.ClosedChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClosingTxidFieldNumber = 2,
    kChannelFieldNumber = 1,
  };
  // string closing_txid = 2;
  void clear_closing_txid();
  const std::string& closing_txid() const;
  void set_closing_txid(const std::string& value);
  void set_closing_txid(std::string&& value);
  void set_closing_txid(const char* value);
  void set_closing_txid(const char* value, size_t size);
  std::string* mutable_closing_txid();
  std::string* release_closing_txid();
  void set_allocated_closing_txid(std::string* closing_txid);
  private:
  const std::string& _internal_closing_txid() const;
  void _internal_set_closing_txid(const std::string& value);
  std::string* _internal_mutable_closing_txid();
  public:

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::lnrpc::PendingChannelsResponse_PendingChannel& channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* release_channel();
  ::lnrpc::PendingChannelsResponse_PendingChannel* mutable_channel();
  void set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel);
  private:
  const ::lnrpc::PendingChannelsResponse_PendingChannel& _internal_channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* _internal_mutable_channel();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.ClosedChannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closing_txid_;
  ::lnrpc::PendingChannelsResponse_PendingChannel* channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse_ForceClosedChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse.ForceClosedChannel) */ {
 public:
  PendingChannelsResponse_ForceClosedChannel();
  virtual ~PendingChannelsResponse_ForceClosedChannel();

  PendingChannelsResponse_ForceClosedChannel(const PendingChannelsResponse_ForceClosedChannel& from);
  PendingChannelsResponse_ForceClosedChannel(PendingChannelsResponse_ForceClosedChannel&& from) noexcept
    : PendingChannelsResponse_ForceClosedChannel() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse_ForceClosedChannel& operator=(const PendingChannelsResponse_ForceClosedChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse_ForceClosedChannel& operator=(PendingChannelsResponse_ForceClosedChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse_ForceClosedChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse_ForceClosedChannel* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse_ForceClosedChannel*>(
               &_PendingChannelsResponse_ForceClosedChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(PendingChannelsResponse_ForceClosedChannel& a, PendingChannelsResponse_ForceClosedChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse_ForceClosedChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse_ForceClosedChannel* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse_ForceClosedChannel>(nullptr);
  }

  PendingChannelsResponse_ForceClosedChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse_ForceClosedChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse_ForceClosedChannel& from);
  void MergeFrom(const PendingChannelsResponse_ForceClosedChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse_ForceClosedChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse.ForceClosedChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PendingChannelsResponse_ForceClosedChannel_AnchorState AnchorState;
  static constexpr AnchorState LIMBO =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_LIMBO;
  static constexpr AnchorState RECOVERED =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_RECOVERED;
  static constexpr AnchorState LOST =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_LOST;
  static inline bool AnchorState_IsValid(int value) {
    return PendingChannelsResponse_ForceClosedChannel_AnchorState_IsValid(value);
  }
  static constexpr AnchorState AnchorState_MIN =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_MIN;
  static constexpr AnchorState AnchorState_MAX =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_MAX;
  static constexpr int AnchorState_ARRAYSIZE =
    PendingChannelsResponse_ForceClosedChannel_AnchorState_AnchorState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AnchorState_descriptor() {
    return PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor();
  }
  template<typename T>
  static inline const std::string& AnchorState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AnchorState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AnchorState_Name.");
    return PendingChannelsResponse_ForceClosedChannel_AnchorState_Name(enum_t_value);
  }
  static inline bool AnchorState_Parse(const std::string& name,
      AnchorState* value) {
    return PendingChannelsResponse_ForceClosedChannel_AnchorState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPendingHtlcsFieldNumber = 8,
    kClosingTxidFieldNumber = 2,
    kChannelFieldNumber = 1,
    kLimboBalanceFieldNumber = 3,
    kMaturityHeightFieldNumber = 4,
    kBlocksTilMaturityFieldNumber = 5,
    kRecoveredBalanceFieldNumber = 6,
    kAnchorFieldNumber = 9,
  };
  // repeated .lnrpc.PendingHTLC pending_htlcs = 8;
  int pending_htlcs_size() const;
  private:
  int _internal_pending_htlcs_size() const;
  public:
  void clear_pending_htlcs();
  ::lnrpc::PendingHTLC* mutable_pending_htlcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingHTLC >*
      mutable_pending_htlcs();
  private:
  const ::lnrpc::PendingHTLC& _internal_pending_htlcs(int index) const;
  ::lnrpc::PendingHTLC* _internal_add_pending_htlcs();
  public:
  const ::lnrpc::PendingHTLC& pending_htlcs(int index) const;
  ::lnrpc::PendingHTLC* add_pending_htlcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingHTLC >&
      pending_htlcs() const;

  // string closing_txid = 2;
  void clear_closing_txid();
  const std::string& closing_txid() const;
  void set_closing_txid(const std::string& value);
  void set_closing_txid(std::string&& value);
  void set_closing_txid(const char* value);
  void set_closing_txid(const char* value, size_t size);
  std::string* mutable_closing_txid();
  std::string* release_closing_txid();
  void set_allocated_closing_txid(std::string* closing_txid);
  private:
  const std::string& _internal_closing_txid() const;
  void _internal_set_closing_txid(const std::string& value);
  std::string* _internal_mutable_closing_txid();
  public:

  // .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::lnrpc::PendingChannelsResponse_PendingChannel& channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* release_channel();
  ::lnrpc::PendingChannelsResponse_PendingChannel* mutable_channel();
  void set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel);
  private:
  const ::lnrpc::PendingChannelsResponse_PendingChannel& _internal_channel() const;
  ::lnrpc::PendingChannelsResponse_PendingChannel* _internal_mutable_channel();
  public:

  // int64 limbo_balance = 3;
  void clear_limbo_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 limbo_balance() const;
  void set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limbo_balance() const;
  void _internal_set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 maturity_height = 4;
  void clear_maturity_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_height() const;
  void set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maturity_height() const;
  void _internal_set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 blocks_til_maturity = 5;
  void clear_blocks_til_maturity();
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_til_maturity() const;
  void set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocks_til_maturity() const;
  void _internal_set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 recovered_balance = 6;
  void clear_recovered_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 recovered_balance() const;
  void set_recovered_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_recovered_balance() const;
  void _internal_set_recovered_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState anchor = 9;
  void clear_anchor();
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState anchor() const;
  void set_anchor(::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState value);
  private:
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState _internal_anchor() const;
  void _internal_set_anchor(::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse.ForceClosedChannel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingHTLC > pending_htlcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closing_txid_;
  ::lnrpc::PendingChannelsResponse_PendingChannel* channel_;
  ::PROTOBUF_NAMESPACE_ID::int64 limbo_balance_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maturity_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_til_maturity_;
  ::PROTOBUF_NAMESPACE_ID::int64 recovered_balance_;
  int anchor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PendingChannelsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PendingChannelsResponse) */ {
 public:
  PendingChannelsResponse();
  virtual ~PendingChannelsResponse();

  PendingChannelsResponse(const PendingChannelsResponse& from);
  PendingChannelsResponse(PendingChannelsResponse&& from) noexcept
    : PendingChannelsResponse() {
    *this = ::std::move(from);
  }

  inline PendingChannelsResponse& operator=(const PendingChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PendingChannelsResponse& operator=(PendingChannelsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PendingChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PendingChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const PendingChannelsResponse*>(
               &_PendingChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(PendingChannelsResponse& a, PendingChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PendingChannelsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PendingChannelsResponse* New() const final {
    return CreateMaybeMessage<PendingChannelsResponse>(nullptr);
  }

  PendingChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PendingChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PendingChannelsResponse& from);
  void MergeFrom(const PendingChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PendingChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PendingChannelsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PendingChannelsResponse_PendingChannel PendingChannel;
  typedef PendingChannelsResponse_PendingOpenChannel PendingOpenChannel;
  typedef PendingChannelsResponse_WaitingCloseChannel WaitingCloseChannel;
  typedef PendingChannelsResponse_Commitments Commitments;
  typedef PendingChannelsResponse_ClosedChannel ClosedChannel;
  typedef PendingChannelsResponse_ForceClosedChannel ForceClosedChannel;

  // accessors -------------------------------------------------------

  enum : int {
    kPendingOpenChannelsFieldNumber = 2,
    kPendingClosingChannelsFieldNumber = 3,
    kPendingForceClosingChannelsFieldNumber = 4,
    kWaitingCloseChannelsFieldNumber = 5,
    kTotalLimboBalanceFieldNumber = 1,
  };
  // repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;
  int pending_open_channels_size() const;
  private:
  int _internal_pending_open_channels_size() const;
  public:
  void clear_pending_open_channels();
  ::lnrpc::PendingChannelsResponse_PendingOpenChannel* mutable_pending_open_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >*
      mutable_pending_open_channels();
  private:
  const ::lnrpc::PendingChannelsResponse_PendingOpenChannel& _internal_pending_open_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_PendingOpenChannel* _internal_add_pending_open_channels();
  public:
  const ::lnrpc::PendingChannelsResponse_PendingOpenChannel& pending_open_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_PendingOpenChannel* add_pending_open_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >&
      pending_open_channels() const;

  // repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int pending_closing_channels_size() const;
  private:
  int _internal_pending_closing_channels_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_pending_closing_channels();
  PROTOBUF_DEPRECATED ::lnrpc::PendingChannelsResponse_ClosedChannel* mutable_pending_closing_channels(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ClosedChannel >*
      mutable_pending_closing_channels();
  private:
  const ::lnrpc::PendingChannelsResponse_ClosedChannel& _internal_pending_closing_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_ClosedChannel* _internal_add_pending_closing_channels();
  public:
  PROTOBUF_DEPRECATED const ::lnrpc::PendingChannelsResponse_ClosedChannel& pending_closing_channels(int index) const;
  PROTOBUF_DEPRECATED ::lnrpc::PendingChannelsResponse_ClosedChannel* add_pending_closing_channels();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ClosedChannel >&
      pending_closing_channels() const;

  // repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;
  int pending_force_closing_channels_size() const;
  private:
  int _internal_pending_force_closing_channels_size() const;
  public:
  void clear_pending_force_closing_channels();
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel* mutable_pending_force_closing_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >*
      mutable_pending_force_closing_channels();
  private:
  const ::lnrpc::PendingChannelsResponse_ForceClosedChannel& _internal_pending_force_closing_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel* _internal_add_pending_force_closing_channels();
  public:
  const ::lnrpc::PendingChannelsResponse_ForceClosedChannel& pending_force_closing_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_ForceClosedChannel* add_pending_force_closing_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >&
      pending_force_closing_channels() const;

  // repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;
  int waiting_close_channels_size() const;
  private:
  int _internal_waiting_close_channels_size() const;
  public:
  void clear_waiting_close_channels();
  ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* mutable_waiting_close_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >*
      mutable_waiting_close_channels();
  private:
  const ::lnrpc::PendingChannelsResponse_WaitingCloseChannel& _internal_waiting_close_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* _internal_add_waiting_close_channels();
  public:
  const ::lnrpc::PendingChannelsResponse_WaitingCloseChannel& waiting_close_channels(int index) const;
  ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* add_waiting_close_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >&
      waiting_close_channels() const;

  // int64 total_limbo_balance = 1;
  void clear_total_limbo_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 total_limbo_balance() const;
  void set_total_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_limbo_balance() const;
  void _internal_set_total_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PendingChannelsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_PendingOpenChannel > pending_open_channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ClosedChannel > pending_closing_channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ForceClosedChannel > pending_force_closing_channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel > waiting_close_channels_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_limbo_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelEventSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelEventSubscription) */ {
 public:
  ChannelEventSubscription();
  virtual ~ChannelEventSubscription();

  ChannelEventSubscription(const ChannelEventSubscription& from);
  ChannelEventSubscription(ChannelEventSubscription&& from) noexcept
    : ChannelEventSubscription() {
    *this = ::std::move(from);
  }

  inline ChannelEventSubscription& operator=(const ChannelEventSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelEventSubscription& operator=(ChannelEventSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelEventSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelEventSubscription* internal_default_instance() {
    return reinterpret_cast<const ChannelEventSubscription*>(
               &_ChannelEventSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ChannelEventSubscription& a, ChannelEventSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelEventSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelEventSubscription* New() const final {
    return CreateMaybeMessage<ChannelEventSubscription>(nullptr);
  }

  ChannelEventSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelEventSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelEventSubscription& from);
  void MergeFrom(const ChannelEventSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelEventSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelEventSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelEventSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelEventUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelEventUpdate) */ {
 public:
  ChannelEventUpdate();
  virtual ~ChannelEventUpdate();

  ChannelEventUpdate(const ChannelEventUpdate& from);
  ChannelEventUpdate(ChannelEventUpdate&& from) noexcept
    : ChannelEventUpdate() {
    *this = ::std::move(from);
  }

  inline ChannelEventUpdate& operator=(const ChannelEventUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelEventUpdate& operator=(ChannelEventUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelEventUpdate& default_instance();

  enum ChannelCase {
    kOpenChannel = 1,
    kClosedChannel = 2,
    kActiveChannel = 3,
    kInactiveChannel = 4,
    kPendingOpenChannel = 6,
    CHANNEL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelEventUpdate* internal_default_instance() {
    return reinterpret_cast<const ChannelEventUpdate*>(
               &_ChannelEventUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ChannelEventUpdate& a, ChannelEventUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelEventUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelEventUpdate* New() const final {
    return CreateMaybeMessage<ChannelEventUpdate>(nullptr);
  }

  ChannelEventUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelEventUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelEventUpdate& from);
  void MergeFrom(const ChannelEventUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelEventUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelEventUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChannelEventUpdate_UpdateType UpdateType;
  static constexpr UpdateType OPEN_CHANNEL =
    ChannelEventUpdate_UpdateType_OPEN_CHANNEL;
  static constexpr UpdateType CLOSED_CHANNEL =
    ChannelEventUpdate_UpdateType_CLOSED_CHANNEL;
  static constexpr UpdateType ACTIVE_CHANNEL =
    ChannelEventUpdate_UpdateType_ACTIVE_CHANNEL;
  static constexpr UpdateType INACTIVE_CHANNEL =
    ChannelEventUpdate_UpdateType_INACTIVE_CHANNEL;
  static constexpr UpdateType PENDING_OPEN_CHANNEL =
    ChannelEventUpdate_UpdateType_PENDING_OPEN_CHANNEL;
  static inline bool UpdateType_IsValid(int value) {
    return ChannelEventUpdate_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN =
    ChannelEventUpdate_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX =
    ChannelEventUpdate_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE =
    ChannelEventUpdate_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  UpdateType_descriptor() {
    return ChannelEventUpdate_UpdateType_descriptor();
  }
  template<typename T>
  static inline const std::string& UpdateType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, UpdateType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function UpdateType_Name.");
    return ChannelEventUpdate_UpdateType_Name(enum_t_value);
  }
  static inline bool UpdateType_Parse(const std::string& name,
      UpdateType* value) {
    return ChannelEventUpdate_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 5,
    kOpenChannelFieldNumber = 1,
    kClosedChannelFieldNumber = 2,
    kActiveChannelFieldNumber = 3,
    kInactiveChannelFieldNumber = 4,
    kPendingOpenChannelFieldNumber = 6,
  };
  // .lnrpc.ChannelEventUpdate.UpdateType type = 5;
  void clear_type();
  ::lnrpc::ChannelEventUpdate_UpdateType type() const;
  void set_type(::lnrpc::ChannelEventUpdate_UpdateType value);
  private:
  ::lnrpc::ChannelEventUpdate_UpdateType _internal_type() const;
  void _internal_set_type(::lnrpc::ChannelEventUpdate_UpdateType value);
  public:

  // .lnrpc.Channel open_channel = 1;
  bool has_open_channel() const;
  private:
  bool _internal_has_open_channel() const;
  public:
  void clear_open_channel();
  const ::lnrpc::Channel& open_channel() const;
  ::lnrpc::Channel* release_open_channel();
  ::lnrpc::Channel* mutable_open_channel();
  void set_allocated_open_channel(::lnrpc::Channel* open_channel);
  private:
  const ::lnrpc::Channel& _internal_open_channel() const;
  ::lnrpc::Channel* _internal_mutable_open_channel();
  public:

  // .lnrpc.ChannelCloseSummary closed_channel = 2;
  bool has_closed_channel() const;
  private:
  bool _internal_has_closed_channel() const;
  public:
  void clear_closed_channel();
  const ::lnrpc::ChannelCloseSummary& closed_channel() const;
  ::lnrpc::ChannelCloseSummary* release_closed_channel();
  ::lnrpc::ChannelCloseSummary* mutable_closed_channel();
  void set_allocated_closed_channel(::lnrpc::ChannelCloseSummary* closed_channel);
  private:
  const ::lnrpc::ChannelCloseSummary& _internal_closed_channel() const;
  ::lnrpc::ChannelCloseSummary* _internal_mutable_closed_channel();
  public:

  // .lnrpc.ChannelPoint active_channel = 3;
  bool has_active_channel() const;
  private:
  bool _internal_has_active_channel() const;
  public:
  void clear_active_channel();
  const ::lnrpc::ChannelPoint& active_channel() const;
  ::lnrpc::ChannelPoint* release_active_channel();
  ::lnrpc::ChannelPoint* mutable_active_channel();
  void set_allocated_active_channel(::lnrpc::ChannelPoint* active_channel);
  private:
  const ::lnrpc::ChannelPoint& _internal_active_channel() const;
  ::lnrpc::ChannelPoint* _internal_mutable_active_channel();
  public:

  // .lnrpc.ChannelPoint inactive_channel = 4;
  bool has_inactive_channel() const;
  private:
  bool _internal_has_inactive_channel() const;
  public:
  void clear_inactive_channel();
  const ::lnrpc::ChannelPoint& inactive_channel() const;
  ::lnrpc::ChannelPoint* release_inactive_channel();
  ::lnrpc::ChannelPoint* mutable_inactive_channel();
  void set_allocated_inactive_channel(::lnrpc::ChannelPoint* inactive_channel);
  private:
  const ::lnrpc::ChannelPoint& _internal_inactive_channel() const;
  ::lnrpc::ChannelPoint* _internal_mutable_inactive_channel();
  public:

  // .lnrpc.PendingUpdate pending_open_channel = 6;
  bool has_pending_open_channel() const;
  private:
  bool _internal_has_pending_open_channel() const;
  public:
  void clear_pending_open_channel();
  const ::lnrpc::PendingUpdate& pending_open_channel() const;
  ::lnrpc::PendingUpdate* release_pending_open_channel();
  ::lnrpc::PendingUpdate* mutable_pending_open_channel();
  void set_allocated_pending_open_channel(::lnrpc::PendingUpdate* pending_open_channel);
  private:
  const ::lnrpc::PendingUpdate& _internal_pending_open_channel() const;
  ::lnrpc::PendingUpdate* _internal_mutable_pending_open_channel();
  public:

  void clear_channel();
  ChannelCase channel_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.ChannelEventUpdate)
 private:
  class _Internal;
  void set_has_open_channel();
  void set_has_closed_channel();
  void set_has_active_channel();
  void set_has_inactive_channel();
  void set_has_pending_open_channel();

  inline bool has_channel() const;
  inline void clear_has_channel();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  union ChannelUnion {
    ChannelUnion() {}
    ::lnrpc::Channel* open_channel_;
    ::lnrpc::ChannelCloseSummary* closed_channel_;
    ::lnrpc::ChannelPoint* active_channel_;
    ::lnrpc::ChannelPoint* inactive_channel_;
    ::lnrpc::PendingUpdate* pending_open_channel_;
  } channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WalletAccountBalance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.WalletAccountBalance) */ {
 public:
  WalletAccountBalance();
  virtual ~WalletAccountBalance();

  WalletAccountBalance(const WalletAccountBalance& from);
  WalletAccountBalance(WalletAccountBalance&& from) noexcept
    : WalletAccountBalance() {
    *this = ::std::move(from);
  }

  inline WalletAccountBalance& operator=(const WalletAccountBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletAccountBalance& operator=(WalletAccountBalance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WalletAccountBalance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletAccountBalance* internal_default_instance() {
    return reinterpret_cast<const WalletAccountBalance*>(
               &_WalletAccountBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(WalletAccountBalance& a, WalletAccountBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletAccountBalance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletAccountBalance* New() const final {
    return CreateMaybeMessage<WalletAccountBalance>(nullptr);
  }

  WalletAccountBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletAccountBalance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WalletAccountBalance& from);
  void MergeFrom(const WalletAccountBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletAccountBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.WalletAccountBalance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfirmedBalanceFieldNumber = 1,
    kUnconfirmedBalanceFieldNumber = 2,
  };
  // int64 confirmed_balance = 1;
  void clear_confirmed_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 confirmed_balance() const;
  void set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confirmed_balance() const;
  void _internal_set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unconfirmed_balance = 2;
  void clear_unconfirmed_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 unconfirmed_balance() const;
  void set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unconfirmed_balance() const;
  void _internal_set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.WalletAccountBalance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 confirmed_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 unconfirmed_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WalletBalanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.WalletBalanceRequest) */ {
 public:
  WalletBalanceRequest();
  virtual ~WalletBalanceRequest();

  WalletBalanceRequest(const WalletBalanceRequest& from);
  WalletBalanceRequest(WalletBalanceRequest&& from) noexcept
    : WalletBalanceRequest() {
    *this = ::std::move(from);
  }

  inline WalletBalanceRequest& operator=(const WalletBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletBalanceRequest& operator=(WalletBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WalletBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const WalletBalanceRequest*>(
               &_WalletBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(WalletBalanceRequest& a, WalletBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletBalanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletBalanceRequest* New() const final {
    return CreateMaybeMessage<WalletBalanceRequest>(nullptr);
  }

  WalletBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WalletBalanceRequest& from);
  void MergeFrom(const WalletBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.WalletBalanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.WalletBalanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class WalletBalanceResponse_AccountBalanceEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WalletBalanceResponse_AccountBalanceEntry_DoNotUse, 
    std::string, ::lnrpc::WalletAccountBalance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WalletBalanceResponse_AccountBalanceEntry_DoNotUse, 
    std::string, ::lnrpc::WalletAccountBalance,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WalletBalanceResponse_AccountBalanceEntry_DoNotUse();
  WalletBalanceResponse_AccountBalanceEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WalletBalanceResponse_AccountBalanceEntry_DoNotUse& other);
  static const WalletBalanceResponse_AccountBalanceEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WalletBalanceResponse_AccountBalanceEntry_DoNotUse*>(&_WalletBalanceResponse_AccountBalanceEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lnrpc.WalletBalanceResponse.AccountBalanceEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[88];
  }

  public:
};

// -------------------------------------------------------------------

class WalletBalanceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.WalletBalanceResponse) */ {
 public:
  WalletBalanceResponse();
  virtual ~WalletBalanceResponse();

  WalletBalanceResponse(const WalletBalanceResponse& from);
  WalletBalanceResponse(WalletBalanceResponse&& from) noexcept
    : WalletBalanceResponse() {
    *this = ::std::move(from);
  }

  inline WalletBalanceResponse& operator=(const WalletBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletBalanceResponse& operator=(WalletBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WalletBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WalletBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const WalletBalanceResponse*>(
               &_WalletBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(WalletBalanceResponse& a, WalletBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletBalanceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletBalanceResponse* New() const final {
    return CreateMaybeMessage<WalletBalanceResponse>(nullptr);
  }

  WalletBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WalletBalanceResponse& from);
  void MergeFrom(const WalletBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.WalletBalanceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAccountBalanceFieldNumber = 4,
    kTotalBalanceFieldNumber = 1,
    kConfirmedBalanceFieldNumber = 2,
    kUnconfirmedBalanceFieldNumber = 3,
  };
  // map<string, .lnrpc.WalletAccountBalance> account_balance = 4;
  int account_balance_size() const;
  private:
  int _internal_account_balance_size() const;
  public:
  void clear_account_balance();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >&
      _internal_account_balance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >*
      _internal_mutable_account_balance();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >&
      account_balance() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >*
      mutable_account_balance();

  // int64 total_balance = 1;
  void clear_total_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 total_balance() const;
  void set_total_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_balance() const;
  void _internal_set_total_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 confirmed_balance = 2;
  void clear_confirmed_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 confirmed_balance() const;
  void set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confirmed_balance() const;
  void _internal_set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 unconfirmed_balance = 3;
  void clear_unconfirmed_balance();
  ::PROTOBUF_NAMESPACE_ID::int64 unconfirmed_balance() const;
  void set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unconfirmed_balance() const;
  void _internal_set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.WalletBalanceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WalletBalanceResponse_AccountBalanceEntry_DoNotUse,
      std::string, ::lnrpc::WalletAccountBalance,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > account_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 confirmed_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 unconfirmed_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Amount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Amount) */ {
 public:
  Amount();
  virtual ~Amount();

  Amount(const Amount& from);
  Amount(Amount&& from) noexcept
    : Amount() {
    *this = ::std::move(from);
  }

  inline Amount& operator=(const Amount& from) {
    CopyFrom(from);
    return *this;
  }
  inline Amount& operator=(Amount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Amount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Amount* internal_default_instance() {
    return reinterpret_cast<const Amount*>(
               &_Amount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(Amount& a, Amount& b) {
    a.Swap(&b);
  }
  inline void Swap(Amount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Amount* New() const final {
    return CreateMaybeMessage<Amount>(nullptr);
  }

  Amount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Amount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Amount& from);
  void MergeFrom(const Amount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Amount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Amount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSatFieldNumber = 1,
    kMsatFieldNumber = 2,
  };
  // uint64 sat = 1;
  void clear_sat();
  ::PROTOBUF_NAMESPACE_ID::uint64 sat() const;
  void set_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sat() const;
  void _internal_set_sat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 msat = 2;
  void clear_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 msat() const;
  void set_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_msat() const;
  void _internal_set_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Amount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelBalanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelBalanceRequest) */ {
 public:
  ChannelBalanceRequest();
  virtual ~ChannelBalanceRequest();

  ChannelBalanceRequest(const ChannelBalanceRequest& from);
  ChannelBalanceRequest(ChannelBalanceRequest&& from) noexcept
    : ChannelBalanceRequest() {
    *this = ::std::move(from);
  }

  inline ChannelBalanceRequest& operator=(const ChannelBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBalanceRequest& operator=(ChannelBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelBalanceRequest*>(
               &_ChannelBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(ChannelBalanceRequest& a, ChannelBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBalanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBalanceRequest* New() const final {
    return CreateMaybeMessage<ChannelBalanceRequest>(nullptr);
  }

  ChannelBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBalanceRequest& from);
  void MergeFrom(const ChannelBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelBalanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelBalanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelBalanceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelBalanceResponse) */ {
 public:
  ChannelBalanceResponse();
  virtual ~ChannelBalanceResponse();

  ChannelBalanceResponse(const ChannelBalanceResponse& from);
  ChannelBalanceResponse(ChannelBalanceResponse&& from) noexcept
    : ChannelBalanceResponse() {
    *this = ::std::move(from);
  }

  inline ChannelBalanceResponse& operator=(const ChannelBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBalanceResponse& operator=(ChannelBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const ChannelBalanceResponse*>(
               &_ChannelBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ChannelBalanceResponse& a, ChannelBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBalanceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBalanceResponse* New() const final {
    return CreateMaybeMessage<ChannelBalanceResponse>(nullptr);
  }

  ChannelBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBalanceResponse& from);
  void MergeFrom(const ChannelBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelBalanceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalBalanceFieldNumber = 3,
    kRemoteBalanceFieldNumber = 4,
    kUnsettledLocalBalanceFieldNumber = 5,
    kUnsettledRemoteBalanceFieldNumber = 6,
    kPendingOpenLocalBalanceFieldNumber = 7,
    kPendingOpenRemoteBalanceFieldNumber = 8,
    kBalanceFieldNumber = 1,
    kPendingOpenBalanceFieldNumber = 2,
  };
  // .lnrpc.Amount local_balance = 3;
  bool has_local_balance() const;
  private:
  bool _internal_has_local_balance() const;
  public:
  void clear_local_balance();
  const ::lnrpc::Amount& local_balance() const;
  ::lnrpc::Amount* release_local_balance();
  ::lnrpc::Amount* mutable_local_balance();
  void set_allocated_local_balance(::lnrpc::Amount* local_balance);
  private:
  const ::lnrpc::Amount& _internal_local_balance() const;
  ::lnrpc::Amount* _internal_mutable_local_balance();
  public:

  // .lnrpc.Amount remote_balance = 4;
  bool has_remote_balance() const;
  private:
  bool _internal_has_remote_balance() const;
  public:
  void clear_remote_balance();
  const ::lnrpc::Amount& remote_balance() const;
  ::lnrpc::Amount* release_remote_balance();
  ::lnrpc::Amount* mutable_remote_balance();
  void set_allocated_remote_balance(::lnrpc::Amount* remote_balance);
  private:
  const ::lnrpc::Amount& _internal_remote_balance() const;
  ::lnrpc::Amount* _internal_mutable_remote_balance();
  public:

  // .lnrpc.Amount unsettled_local_balance = 5;
  bool has_unsettled_local_balance() const;
  private:
  bool _internal_has_unsettled_local_balance() const;
  public:
  void clear_unsettled_local_balance();
  const ::lnrpc::Amount& unsettled_local_balance() const;
  ::lnrpc::Amount* release_unsettled_local_balance();
  ::lnrpc::Amount* mutable_unsettled_local_balance();
  void set_allocated_unsettled_local_balance(::lnrpc::Amount* unsettled_local_balance);
  private:
  const ::lnrpc::Amount& _internal_unsettled_local_balance() const;
  ::lnrpc::Amount* _internal_mutable_unsettled_local_balance();
  public:

  // .lnrpc.Amount unsettled_remote_balance = 6;
  bool has_unsettled_remote_balance() const;
  private:
  bool _internal_has_unsettled_remote_balance() const;
  public:
  void clear_unsettled_remote_balance();
  const ::lnrpc::Amount& unsettled_remote_balance() const;
  ::lnrpc::Amount* release_unsettled_remote_balance();
  ::lnrpc::Amount* mutable_unsettled_remote_balance();
  void set_allocated_unsettled_remote_balance(::lnrpc::Amount* unsettled_remote_balance);
  private:
  const ::lnrpc::Amount& _internal_unsettled_remote_balance() const;
  ::lnrpc::Amount* _internal_mutable_unsettled_remote_balance();
  public:

  // .lnrpc.Amount pending_open_local_balance = 7;
  bool has_pending_open_local_balance() const;
  private:
  bool _internal_has_pending_open_local_balance() const;
  public:
  void clear_pending_open_local_balance();
  const ::lnrpc::Amount& pending_open_local_balance() const;
  ::lnrpc::Amount* release_pending_open_local_balance();
  ::lnrpc::Amount* mutable_pending_open_local_balance();
  void set_allocated_pending_open_local_balance(::lnrpc::Amount* pending_open_local_balance);
  private:
  const ::lnrpc::Amount& _internal_pending_open_local_balance() const;
  ::lnrpc::Amount* _internal_mutable_pending_open_local_balance();
  public:

  // .lnrpc.Amount pending_open_remote_balance = 8;
  bool has_pending_open_remote_balance() const;
  private:
  bool _internal_has_pending_open_remote_balance() const;
  public:
  void clear_pending_open_remote_balance();
  const ::lnrpc::Amount& pending_open_remote_balance() const;
  ::lnrpc::Amount* release_pending_open_remote_balance();
  ::lnrpc::Amount* mutable_pending_open_remote_balance();
  void set_allocated_pending_open_remote_balance(::lnrpc::Amount* pending_open_remote_balance);
  private:
  const ::lnrpc::Amount& _internal_pending_open_remote_balance() const;
  ::lnrpc::Amount* _internal_mutable_pending_open_remote_balance();
  public:

  // int64 balance = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_balance();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 balance() const;
  PROTOBUF_DEPRECATED void set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_balance() const;
  void _internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 pending_open_balance = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_pending_open_balance();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 pending_open_balance() const;
  PROTOBUF_DEPRECATED void set_pending_open_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pending_open_balance() const;
  void _internal_set_pending_open_balance(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelBalanceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::Amount* local_balance_;
  ::lnrpc::Amount* remote_balance_;
  ::lnrpc::Amount* unsettled_local_balance_;
  ::lnrpc::Amount* unsettled_remote_balance_;
  ::lnrpc::Amount* pending_open_local_balance_;
  ::lnrpc::Amount* pending_open_remote_balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 balance_;
  ::PROTOBUF_NAMESPACE_ID::int64 pending_open_balance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse();
  QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse& other);
  static const QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse*>(&_QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[93];
  }

  public:
};

// -------------------------------------------------------------------

class QueryRoutesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.QueryRoutesRequest) */ {
 public:
  QueryRoutesRequest();
  virtual ~QueryRoutesRequest();

  QueryRoutesRequest(const QueryRoutesRequest& from);
  QueryRoutesRequest(QueryRoutesRequest&& from) noexcept
    : QueryRoutesRequest() {
    *this = ::std::move(from);
  }

  inline QueryRoutesRequest& operator=(const QueryRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRoutesRequest& operator=(QueryRoutesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRoutesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRoutesRequest*>(
               &_QueryRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(QueryRoutesRequest& a, QueryRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRoutesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRoutesRequest* New() const final {
    return CreateMaybeMessage<QueryRoutesRequest>(nullptr);
  }

  QueryRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRoutesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRoutesRequest& from);
  void MergeFrom(const QueryRoutesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRoutesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.QueryRoutesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIgnoredNodesFieldNumber = 6,
    kIgnoredEdgesFieldNumber = 7,
    kIgnoredPairsFieldNumber = 10,
    kDestCustomRecordsFieldNumber = 13,
    kRouteHintsFieldNumber = 16,
    kDestFeaturesFieldNumber = 17,
    kPubKeyFieldNumber = 1,
    kSourcePubKeyFieldNumber = 8,
    kLastHopPubkeyFieldNumber = 15,
    kFeeLimitFieldNumber = 5,
    kAmtFieldNumber = 2,
    kFinalCltvDeltaFieldNumber = 4,
    kUseMissionControlFieldNumber = 9,
    kAmtMsatFieldNumber = 12,
    kOutgoingChanIdFieldNumber = 14,
    kCltvLimitFieldNumber = 11,
  };
  // repeated bytes ignored_nodes = 6;
  int ignored_nodes_size() const;
  private:
  int _internal_ignored_nodes_size() const;
  public:
  void clear_ignored_nodes();
  const std::string& ignored_nodes(int index) const;
  std::string* mutable_ignored_nodes(int index);
  void set_ignored_nodes(int index, const std::string& value);
  void set_ignored_nodes(int index, std::string&& value);
  void set_ignored_nodes(int index, const char* value);
  void set_ignored_nodes(int index, const void* value, size_t size);
  std::string* add_ignored_nodes();
  void add_ignored_nodes(const std::string& value);
  void add_ignored_nodes(std::string&& value);
  void add_ignored_nodes(const char* value);
  void add_ignored_nodes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ignored_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ignored_nodes();
  private:
  const std::string& _internal_ignored_nodes(int index) const;
  std::string* _internal_add_ignored_nodes();
  public:

  // repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];
  PROTOBUF_DEPRECATED int ignored_edges_size() const;
  private:
  int _internal_ignored_edges_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_ignored_edges();
  PROTOBUF_DEPRECATED ::lnrpc::EdgeLocator* mutable_ignored_edges(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::EdgeLocator >*
      mutable_ignored_edges();
  private:
  const ::lnrpc::EdgeLocator& _internal_ignored_edges(int index) const;
  ::lnrpc::EdgeLocator* _internal_add_ignored_edges();
  public:
  PROTOBUF_DEPRECATED const ::lnrpc::EdgeLocator& ignored_edges(int index) const;
  PROTOBUF_DEPRECATED ::lnrpc::EdgeLocator* add_ignored_edges();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::EdgeLocator >&
      ignored_edges() const;

  // repeated .lnrpc.NodePair ignored_pairs = 10;
  int ignored_pairs_size() const;
  private:
  int _internal_ignored_pairs_size() const;
  public:
  void clear_ignored_pairs();
  ::lnrpc::NodePair* mutable_ignored_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodePair >*
      mutable_ignored_pairs();
  private:
  const ::lnrpc::NodePair& _internal_ignored_pairs(int index) const;
  ::lnrpc::NodePair* _internal_add_ignored_pairs();
  public:
  const ::lnrpc::NodePair& ignored_pairs(int index) const;
  ::lnrpc::NodePair* add_ignored_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodePair >&
      ignored_pairs() const;

  // map<uint64, bytes> dest_custom_records = 13;
  int dest_custom_records_size() const;
  private:
  int _internal_dest_custom_records_size() const;
  public:
  void clear_dest_custom_records();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_dest_custom_records();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_dest_custom_records();

  // repeated .lnrpc.RouteHint route_hints = 16;
  int route_hints_size() const;
  private:
  int _internal_route_hints_size() const;
  public:
  void clear_route_hints();
  ::lnrpc::RouteHint* mutable_route_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
      mutable_route_hints();
  private:
  const ::lnrpc::RouteHint& _internal_route_hints(int index) const;
  ::lnrpc::RouteHint* _internal_add_route_hints();
  public:
  const ::lnrpc::RouteHint& route_hints(int index) const;
  ::lnrpc::RouteHint* add_route_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
      route_hints() const;

  // repeated .lnrpc.FeatureBit dest_features = 17;
  int dest_features_size() const;
  private:
  int _internal_dest_features_size() const;
  public:
  void clear_dest_features();
  private:
  ::lnrpc::FeatureBit _internal_dest_features(int index) const;
  void _internal_add_dest_features(::lnrpc::FeatureBit value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dest_features();
  public:
  ::lnrpc::FeatureBit dest_features(int index) const;
  void set_dest_features(int index, ::lnrpc::FeatureBit value);
  void add_dest_features(::lnrpc::FeatureBit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dest_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dest_features();

  // string pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // string source_pub_key = 8;
  void clear_source_pub_key();
  const std::string& source_pub_key() const;
  void set_source_pub_key(const std::string& value);
  void set_source_pub_key(std::string&& value);
  void set_source_pub_key(const char* value);
  void set_source_pub_key(const char* value, size_t size);
  std::string* mutable_source_pub_key();
  std::string* release_source_pub_key();
  void set_allocated_source_pub_key(std::string* source_pub_key);
  private:
  const std::string& _internal_source_pub_key() const;
  void _internal_set_source_pub_key(const std::string& value);
  std::string* _internal_mutable_source_pub_key();
  public:

  // bytes last_hop_pubkey = 15;
  void clear_last_hop_pubkey();
  const std::string& last_hop_pubkey() const;
  void set_last_hop_pubkey(const std::string& value);
  void set_last_hop_pubkey(std::string&& value);
  void set_last_hop_pubkey(const char* value);
  void set_last_hop_pubkey(const void* value, size_t size);
  std::string* mutable_last_hop_pubkey();
  std::string* release_last_hop_pubkey();
  void set_allocated_last_hop_pubkey(std::string* last_hop_pubkey);
  private:
  const std::string& _internal_last_hop_pubkey() const;
  void _internal_set_last_hop_pubkey(const std::string& value);
  std::string* _internal_mutable_last_hop_pubkey();
  public:

  // .lnrpc.FeeLimit fee_limit = 5;
  bool has_fee_limit() const;
  private:
  bool _internal_has_fee_limit() const;
  public:
  void clear_fee_limit();
  const ::lnrpc::FeeLimit& fee_limit() const;
  ::lnrpc::FeeLimit* release_fee_limit();
  ::lnrpc::FeeLimit* mutable_fee_limit();
  void set_allocated_fee_limit(::lnrpc::FeeLimit* fee_limit);
  private:
  const ::lnrpc::FeeLimit& _internal_fee_limit() const;
  ::lnrpc::FeeLimit* _internal_mutable_fee_limit();
  public:

  // int64 amt = 2;
  void clear_amt();
  ::PROTOBUF_NAMESPACE_ID::int64 amt() const;
  void set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt() const;
  void _internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 final_cltv_delta = 4;
  void clear_final_cltv_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta() const;
  void set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_cltv_delta() const;
  void _internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_mission_control = 9;
  void clear_use_mission_control();
  bool use_mission_control() const;
  void set_use_mission_control(bool value);
  private:
  bool _internal_use_mission_control() const;
  void _internal_set_use_mission_control(bool value);
  public:

  // int64 amt_msat = 12;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 outgoing_chan_id = 14 [jstype = JS_STRING];
  void clear_outgoing_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id() const;
  void set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_chan_id() const;
  void _internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 cltv_limit = 11;
  void clear_cltv_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_limit() const;
  void set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cltv_limit() const;
  void _internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.QueryRoutesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ignored_nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::EdgeLocator > ignored_edges_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodePair > ignored_pairs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      QueryRoutesRequest_DestCustomRecordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > dest_custom_records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint > route_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dest_features_;
  mutable std::atomic<int> _dest_features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_hop_pubkey_;
  ::lnrpc::FeeLimit* fee_limit_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta_;
  bool use_mission_control_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodePair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodePair) */ {
 public:
  NodePair();
  virtual ~NodePair();

  NodePair(const NodePair& from);
  NodePair(NodePair&& from) noexcept
    : NodePair() {
    *this = ::std::move(from);
  }

  inline NodePair& operator=(const NodePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodePair& operator=(NodePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePair* internal_default_instance() {
    return reinterpret_cast<const NodePair*>(
               &_NodePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(NodePair& a, NodePair& b) {
    a.Swap(&b);
  }
  inline void Swap(NodePair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodePair* New() const final {
    return CreateMaybeMessage<NodePair>(nullptr);
  }

  NodePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodePair& from);
  void MergeFrom(const NodePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodePair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NodePair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class EdgeLocator :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.EdgeLocator) */ {
 public:
  EdgeLocator();
  virtual ~EdgeLocator();

  EdgeLocator(const EdgeLocator& from);
  EdgeLocator(EdgeLocator&& from) noexcept
    : EdgeLocator() {
    *this = ::std::move(from);
  }

  inline EdgeLocator& operator=(const EdgeLocator& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeLocator& operator=(EdgeLocator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgeLocator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeLocator* internal_default_instance() {
    return reinterpret_cast<const EdgeLocator*>(
               &_EdgeLocator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(EdgeLocator& a, EdgeLocator& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeLocator* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgeLocator* New() const final {
    return CreateMaybeMessage<EdgeLocator>(nullptr);
  }

  EdgeLocator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgeLocator>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgeLocator& from);
  void MergeFrom(const EdgeLocator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeLocator* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.EdgeLocator";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kDirectionReverseFieldNumber = 2,
  };
  // uint64 channel_id = 1 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool direction_reverse = 2;
  void clear_direction_reverse();
  bool direction_reverse() const;
  void set_direction_reverse(bool value);
  private:
  bool _internal_direction_reverse() const;
  void _internal_set_direction_reverse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.EdgeLocator)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  bool direction_reverse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class QueryRoutesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.QueryRoutesResponse) */ {
 public:
  QueryRoutesResponse();
  virtual ~QueryRoutesResponse();

  QueryRoutesResponse(const QueryRoutesResponse& from);
  QueryRoutesResponse(QueryRoutesResponse&& from) noexcept
    : QueryRoutesResponse() {
    *this = ::std::move(from);
  }

  inline QueryRoutesResponse& operator=(const QueryRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRoutesResponse& operator=(QueryRoutesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRoutesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const QueryRoutesResponse*>(
               &_QueryRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(QueryRoutesResponse& a, QueryRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRoutesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRoutesResponse* New() const final {
    return CreateMaybeMessage<QueryRoutesResponse>(nullptr);
  }

  QueryRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRoutesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRoutesResponse& from);
  void MergeFrom(const QueryRoutesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRoutesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.QueryRoutesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 1,
    kSuccessProbFieldNumber = 2,
  };
  // repeated .lnrpc.Route routes = 1;
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::lnrpc::Route* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Route >*
      mutable_routes();
  private:
  const ::lnrpc::Route& _internal_routes(int index) const;
  ::lnrpc::Route* _internal_add_routes();
  public:
  const ::lnrpc::Route& routes(int index) const;
  ::lnrpc::Route* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Route >&
      routes() const;

  // double success_prob = 2;
  void clear_success_prob();
  double success_prob() const;
  void set_success_prob(double value);
  private:
  double _internal_success_prob() const;
  void _internal_set_success_prob(double value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.QueryRoutesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Route > routes_;
  double success_prob_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Hop_CustomRecordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Hop_CustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Hop_CustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  Hop_CustomRecordsEntry_DoNotUse();
  Hop_CustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Hop_CustomRecordsEntry_DoNotUse& other);
  static const Hop_CustomRecordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Hop_CustomRecordsEntry_DoNotUse*>(&_Hop_CustomRecordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[98];
  }

  public:
};

// -------------------------------------------------------------------

class Hop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Hop) */ {
 public:
  Hop();
  virtual ~Hop();

  Hop(const Hop& from);
  Hop(Hop&& from) noexcept
    : Hop() {
    *this = ::std::move(from);
  }

  inline Hop& operator=(const Hop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hop& operator=(Hop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hop* internal_default_instance() {
    return reinterpret_cast<const Hop*>(
               &_Hop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(Hop& a, Hop& b) {
    a.Swap(&b);
  }
  inline void Swap(Hop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hop* New() const final {
    return CreateMaybeMessage<Hop>(nullptr);
  }

  Hop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hop& from);
  void MergeFrom(const Hop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Hop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCustomRecordsFieldNumber = 11,
    kPubKeyFieldNumber = 8,
    kMppRecordFieldNumber = 10,
    kChanIdFieldNumber = 1,
    kChanCapacityFieldNumber = 2,
    kAmtToForwardFieldNumber = 3,
    kFeeFieldNumber = 4,
    kAmtToForwardMsatFieldNumber = 6,
    kFeeMsatFieldNumber = 7,
    kExpiryFieldNumber = 5,
    kTlvPayloadFieldNumber = 9,
  };
  // map<uint64, bytes> custom_records = 11;
  int custom_records_size() const;
  private:
  int _internal_custom_records_size() const;
  public:
  void clear_custom_records();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_custom_records();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_custom_records();

  // string pub_key = 8;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // .lnrpc.MPPRecord mpp_record = 10;
  bool has_mpp_record() const;
  private:
  bool _internal_has_mpp_record() const;
  public:
  void clear_mpp_record();
  const ::lnrpc::MPPRecord& mpp_record() const;
  ::lnrpc::MPPRecord* release_mpp_record();
  ::lnrpc::MPPRecord* mutable_mpp_record();
  void set_allocated_mpp_record(::lnrpc::MPPRecord* mpp_record);
  private:
  const ::lnrpc::MPPRecord& _internal_mpp_record() const;
  ::lnrpc::MPPRecord* _internal_mutable_mpp_record();
  public:

  // uint64 chan_id = 1 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 chan_capacity = 2;
  void clear_chan_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 chan_capacity() const;
  void set_chan_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_chan_capacity() const;
  void _internal_set_chan_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amt_to_forward = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_amt_to_forward();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 amt_to_forward() const;
  PROTOBUF_DEPRECATED void set_amt_to_forward(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_to_forward() const;
  void _internal_set_amt_to_forward(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_fee();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  PROTOBUF_DEPRECATED void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amt_to_forward_msat = 6;
  void clear_amt_to_forward_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_to_forward_msat() const;
  void set_amt_to_forward_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_to_forward_msat() const;
  void _internal_set_amt_to_forward_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_msat = 7;
  void clear_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_msat() const;
  void set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_msat() const;
  void _internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 expiry = 5;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool tlv_payload = 9;
  void clear_tlv_payload();
  bool tlv_payload() const;
  void set_tlv_payload(bool value);
  private:
  bool _internal_tlv_payload() const;
  void _internal_set_tlv_payload(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Hop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Hop_CustomRecordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > custom_records_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::lnrpc::MPPRecord* mpp_record_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 chan_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_to_forward_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_to_forward_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  bool tlv_payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MPPRecord :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.MPPRecord) */ {
 public:
  MPPRecord();
  virtual ~MPPRecord();

  MPPRecord(const MPPRecord& from);
  MPPRecord(MPPRecord&& from) noexcept
    : MPPRecord() {
    *this = ::std::move(from);
  }

  inline MPPRecord& operator=(const MPPRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline MPPRecord& operator=(MPPRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MPPRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MPPRecord* internal_default_instance() {
    return reinterpret_cast<const MPPRecord*>(
               &_MPPRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(MPPRecord& a, MPPRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(MPPRecord* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MPPRecord* New() const final {
    return CreateMaybeMessage<MPPRecord>(nullptr);
  }

  MPPRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MPPRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MPPRecord& from);
  void MergeFrom(const MPPRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MPPRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.MPPRecord";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentAddrFieldNumber = 11,
    kTotalAmtMsatFieldNumber = 10,
  };
  // bytes payment_addr = 11;
  void clear_payment_addr();
  const std::string& payment_addr() const;
  void set_payment_addr(const std::string& value);
  void set_payment_addr(std::string&& value);
  void set_payment_addr(const char* value);
  void set_payment_addr(const void* value, size_t size);
  std::string* mutable_payment_addr();
  std::string* release_payment_addr();
  void set_allocated_payment_addr(std::string* payment_addr);
  private:
  const std::string& _internal_payment_addr() const;
  void _internal_set_payment_addr(const std::string& value);
  std::string* _internal_mutable_payment_addr();
  public:

  // int64 total_amt_msat = 10;
  void clear_total_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 total_amt_msat() const;
  void set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_amt_msat() const;
  void _internal_set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.MPPRecord)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_amt_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Route :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Route) */ {
 public:
  Route();
  virtual ~Route();

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Route* New() const final {
    return CreateMaybeMessage<Route>(nullptr);
  }

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Route& from);
  void MergeFrom(const Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Route";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopsFieldNumber = 4,
    kTotalFeesFieldNumber = 2,
    kTotalAmtFieldNumber = 3,
    kTotalFeesMsatFieldNumber = 5,
    kTotalAmtMsatFieldNumber = 6,
    kTotalTimeLockFieldNumber = 1,
  };
  // repeated .lnrpc.Hop hops = 4;
  int hops_size() const;
  private:
  int _internal_hops_size() const;
  public:
  void clear_hops();
  ::lnrpc::Hop* mutable_hops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Hop >*
      mutable_hops();
  private:
  const ::lnrpc::Hop& _internal_hops(int index) const;
  ::lnrpc::Hop* _internal_add_hops();
  public:
  const ::lnrpc::Hop& hops(int index) const;
  ::lnrpc::Hop* add_hops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Hop >&
      hops() const;

  // int64 total_fees = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_total_fees();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 total_fees() const;
  PROTOBUF_DEPRECATED void set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_fees() const;
  void _internal_set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_amt = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_total_amt();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 total_amt() const;
  PROTOBUF_DEPRECATED void set_total_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_amt() const;
  void _internal_set_total_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_fees_msat = 5;
  void clear_total_fees_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 total_fees_msat() const;
  void set_total_fees_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_fees_msat() const;
  void _internal_set_total_fees_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 total_amt_msat = 6;
  void clear_total_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 total_amt_msat() const;
  void set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_amt_msat() const;
  void _internal_set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 total_time_lock = 1;
  void clear_total_time_lock();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_time_lock() const;
  void set_total_time_lock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_time_lock() const;
  void _internal_set_total_time_lock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Route)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Hop > hops_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_fees_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_amt_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_fees_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_time_lock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeInfoRequest) */ {
 public:
  NodeInfoRequest();
  virtual ~NodeInfoRequest();

  NodeInfoRequest(const NodeInfoRequest& from);
  NodeInfoRequest(NodeInfoRequest&& from) noexcept
    : NodeInfoRequest() {
    *this = ::std::move(from);
  }

  inline NodeInfoRequest& operator=(const NodeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfoRequest& operator=(NodeInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NodeInfoRequest*>(
               &_NodeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(NodeInfoRequest& a, NodeInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfoRequest* New() const final {
    return CreateMaybeMessage<NodeInfoRequest>(nullptr);
  }

  NodeInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfoRequest& from);
  void MergeFrom(const NodeInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubKeyFieldNumber = 1,
    kIncludeChannelsFieldNumber = 2,
  };
  // string pub_key = 1;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // bool include_channels = 2;
  void clear_include_channels();
  bool include_channels() const;
  void set_include_channels(bool value);
  private:
  bool _internal_include_channels() const;
  void _internal_set_include_channels(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NodeInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  bool include_channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 4,
    kNodeFieldNumber = 1,
    kTotalCapacityFieldNumber = 3,
    kNumChannelsFieldNumber = 2,
  };
  // repeated .lnrpc.ChannelEdge channels = 4;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::lnrpc::ChannelEdge* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >*
      mutable_channels();
  private:
  const ::lnrpc::ChannelEdge& _internal_channels(int index) const;
  ::lnrpc::ChannelEdge* _internal_add_channels();
  public:
  const ::lnrpc::ChannelEdge& channels(int index) const;
  ::lnrpc::ChannelEdge* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >&
      channels() const;

  // .lnrpc.LightningNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::lnrpc::LightningNode& node() const;
  ::lnrpc::LightningNode* release_node();
  ::lnrpc::LightningNode* mutable_node();
  void set_allocated_node(::lnrpc::LightningNode* node);
  private:
  const ::lnrpc::LightningNode& _internal_node() const;
  ::lnrpc::LightningNode* _internal_mutable_node();
  public:

  // int64 total_capacity = 3;
  void clear_total_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 total_capacity() const;
  void set_total_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_capacity() const;
  void _internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 num_channels = 2;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_channels() const;
  void _internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge > channels_;
  ::lnrpc::LightningNode* node_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class LightningNode_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningNode_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LightningNode_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  LightningNode_FeaturesEntry_DoNotUse();
  LightningNode_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LightningNode_FeaturesEntry_DoNotUse& other);
  static const LightningNode_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LightningNode_FeaturesEntry_DoNotUse*>(&_LightningNode_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[104];
  }

  public:
};

// -------------------------------------------------------------------

class LightningNode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.LightningNode) */ {
 public:
  LightningNode();
  virtual ~LightningNode();

  LightningNode(const LightningNode& from);
  LightningNode(LightningNode&& from) noexcept
    : LightningNode() {
    *this = ::std::move(from);
  }

  inline LightningNode& operator=(const LightningNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline LightningNode& operator=(LightningNode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LightningNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LightningNode* internal_default_instance() {
    return reinterpret_cast<const LightningNode*>(
               &_LightningNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(LightningNode& a, LightningNode& b) {
    a.Swap(&b);
  }
  inline void Swap(LightningNode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LightningNode* New() const final {
    return CreateMaybeMessage<LightningNode>(nullptr);
  }

  LightningNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LightningNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LightningNode& from);
  void MergeFrom(const LightningNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LightningNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.LightningNode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 4,
    kFeaturesFieldNumber = 6,
    kPubKeyFieldNumber = 2,
    kAliasFieldNumber = 3,
    kColorFieldNumber = 5,
    kLastUpdateFieldNumber = 1,
  };
  // repeated .lnrpc.NodeAddress addresses = 4;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  ::lnrpc::NodeAddress* mutable_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeAddress >*
      mutable_addresses();
  private:
  const ::lnrpc::NodeAddress& _internal_addresses(int index) const;
  ::lnrpc::NodeAddress* _internal_add_addresses();
  public:
  const ::lnrpc::NodeAddress& addresses(int index) const;
  ::lnrpc::NodeAddress* add_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeAddress >&
      addresses() const;

  // map<uint32, .lnrpc.Feature> features = 6;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // string pub_key = 2;
  void clear_pub_key();
  const std::string& pub_key() const;
  void set_pub_key(const std::string& value);
  void set_pub_key(std::string&& value);
  void set_pub_key(const char* value);
  void set_pub_key(const char* value, size_t size);
  std::string* mutable_pub_key();
  std::string* release_pub_key();
  void set_allocated_pub_key(std::string* pub_key);
  private:
  const std::string& _internal_pub_key() const;
  void _internal_set_pub_key(const std::string& value);
  std::string* _internal_mutable_pub_key();
  public:

  // string alias = 3;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string color = 5;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // uint32 last_update = 1;
  void clear_last_update();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_update() const;
  void set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_update() const;
  void _internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.LightningNode)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeAddress > addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LightningNode_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pub_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeAddress :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeAddress) */ {
 public:
  NodeAddress();
  virtual ~NodeAddress();

  NodeAddress(const NodeAddress& from);
  NodeAddress(NodeAddress&& from) noexcept
    : NodeAddress() {
    *this = ::std::move(from);
  }

  inline NodeAddress& operator=(const NodeAddress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeAddress& operator=(NodeAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeAddress* internal_default_instance() {
    return reinterpret_cast<const NodeAddress*>(
               &_NodeAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(NodeAddress& a, NodeAddress& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeAddress* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeAddress* New() const final {
    return CreateMaybeMessage<NodeAddress>(nullptr);
  }

  NodeAddress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeAddress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeAddress& from);
  void MergeFrom(const NodeAddress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeAddress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeAddress";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 1,
    kAddrFieldNumber = 2,
  };
  // string network = 1;
  void clear_network();
  const std::string& network() const;
  void set_network(const std::string& value);
  void set_network(std::string&& value);
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  std::string* mutable_network();
  std::string* release_network();
  void set_allocated_network(std::string* network);
  private:
  const std::string& _internal_network() const;
  void _internal_set_network(const std::string& value);
  std::string* _internal_mutable_network();
  public:

  // string addr = 2;
  void clear_addr();
  const std::string& addr() const;
  void set_addr(const std::string& value);
  void set_addr(std::string&& value);
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  std::string* mutable_addr();
  std::string* release_addr();
  void set_allocated_addr(std::string* addr);
  private:
  const std::string& _internal_addr() const;
  void _internal_set_addr(const std::string& value);
  std::string* _internal_mutable_addr();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NodeAddress)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr network_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr addr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RoutingPolicy :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.RoutingPolicy) */ {
 public:
  RoutingPolicy();
  virtual ~RoutingPolicy();

  RoutingPolicy(const RoutingPolicy& from);
  RoutingPolicy(RoutingPolicy&& from) noexcept
    : RoutingPolicy() {
    *this = ::std::move(from);
  }

  inline RoutingPolicy& operator=(const RoutingPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingPolicy& operator=(RoutingPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoutingPolicy* internal_default_instance() {
    return reinterpret_cast<const RoutingPolicy*>(
               &_RoutingPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(RoutingPolicy& a, RoutingPolicy& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingPolicy* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingPolicy* New() const final {
    return CreateMaybeMessage<RoutingPolicy>(nullptr);
  }

  RoutingPolicy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingPolicy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingPolicy& from);
  void MergeFrom(const RoutingPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingPolicy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.RoutingPolicy";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinHtlcFieldNumber = 2,
    kFeeBaseMsatFieldNumber = 3,
    kTimeLockDeltaFieldNumber = 1,
    kDisabledFieldNumber = 5,
    kFeeRateMilliMsatFieldNumber = 4,
    kMaxHtlcMsatFieldNumber = 6,
    kLastUpdateFieldNumber = 7,
  };
  // int64 min_htlc = 2;
  void clear_min_htlc();
  ::PROTOBUF_NAMESPACE_ID::int64 min_htlc() const;
  void set_min_htlc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_htlc() const;
  void _internal_set_min_htlc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_base_msat = 3;
  void clear_fee_base_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_base_msat() const;
  void set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_base_msat() const;
  void _internal_set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 time_lock_delta = 1;
  void clear_time_lock_delta();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta() const;
  void set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_lock_delta() const;
  void _internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool disabled = 5;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // int64 fee_rate_milli_msat = 4;
  void clear_fee_rate_milli_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_rate_milli_msat() const;
  void set_fee_rate_milli_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_rate_milli_msat() const;
  void _internal_set_fee_rate_milli_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 max_htlc_msat = 6;
  void clear_max_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_htlc_msat() const;
  void set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_htlc_msat() const;
  void _internal_set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 last_update = 7;
  void clear_last_update();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_update() const;
  void set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_update() const;
  void _internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.RoutingPolicy)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_htlc_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_base_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta_;
  bool disabled_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_rate_milli_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_htlc_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelEdge :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelEdge) */ {
 public:
  ChannelEdge();
  virtual ~ChannelEdge();

  ChannelEdge(const ChannelEdge& from);
  ChannelEdge(ChannelEdge&& from) noexcept
    : ChannelEdge() {
    *this = ::std::move(from);
  }

  inline ChannelEdge& operator=(const ChannelEdge& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelEdge& operator=(ChannelEdge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelEdge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelEdge* internal_default_instance() {
    return reinterpret_cast<const ChannelEdge*>(
               &_ChannelEdge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ChannelEdge& a, ChannelEdge& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelEdge* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelEdge* New() const final {
    return CreateMaybeMessage<ChannelEdge>(nullptr);
  }

  ChannelEdge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelEdge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelEdge& from);
  void MergeFrom(const ChannelEdge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelEdge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelEdge";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanPointFieldNumber = 2,
    kNode1PubFieldNumber = 4,
    kNode2PubFieldNumber = 5,
    kNode1PolicyFieldNumber = 7,
    kNode2PolicyFieldNumber = 8,
    kChannelIdFieldNumber = 1,
    kCapacityFieldNumber = 6,
    kLastUpdateFieldNumber = 3,
  };
  // string chan_point = 2;
  void clear_chan_point();
  const std::string& chan_point() const;
  void set_chan_point(const std::string& value);
  void set_chan_point(std::string&& value);
  void set_chan_point(const char* value);
  void set_chan_point(const char* value, size_t size);
  std::string* mutable_chan_point();
  std::string* release_chan_point();
  void set_allocated_chan_point(std::string* chan_point);
  private:
  const std::string& _internal_chan_point() const;
  void _internal_set_chan_point(const std::string& value);
  std::string* _internal_mutable_chan_point();
  public:

  // string node1_pub = 4;
  void clear_node1_pub();
  const std::string& node1_pub() const;
  void set_node1_pub(const std::string& value);
  void set_node1_pub(std::string&& value);
  void set_node1_pub(const char* value);
  void set_node1_pub(const char* value, size_t size);
  std::string* mutable_node1_pub();
  std::string* release_node1_pub();
  void set_allocated_node1_pub(std::string* node1_pub);
  private:
  const std::string& _internal_node1_pub() const;
  void _internal_set_node1_pub(const std::string& value);
  std::string* _internal_mutable_node1_pub();
  public:

  // string node2_pub = 5;
  void clear_node2_pub();
  const std::string& node2_pub() const;
  void set_node2_pub(const std::string& value);
  void set_node2_pub(std::string&& value);
  void set_node2_pub(const char* value);
  void set_node2_pub(const char* value, size_t size);
  std::string* mutable_node2_pub();
  std::string* release_node2_pub();
  void set_allocated_node2_pub(std::string* node2_pub);
  private:
  const std::string& _internal_node2_pub() const;
  void _internal_set_node2_pub(const std::string& value);
  std::string* _internal_mutable_node2_pub();
  public:

  // .lnrpc.RoutingPolicy node1_policy = 7;
  bool has_node1_policy() const;
  private:
  bool _internal_has_node1_policy() const;
  public:
  void clear_node1_policy();
  const ::lnrpc::RoutingPolicy& node1_policy() const;
  ::lnrpc::RoutingPolicy* release_node1_policy();
  ::lnrpc::RoutingPolicy* mutable_node1_policy();
  void set_allocated_node1_policy(::lnrpc::RoutingPolicy* node1_policy);
  private:
  const ::lnrpc::RoutingPolicy& _internal_node1_policy() const;
  ::lnrpc::RoutingPolicy* _internal_mutable_node1_policy();
  public:

  // .lnrpc.RoutingPolicy node2_policy = 8;
  bool has_node2_policy() const;
  private:
  bool _internal_has_node2_policy() const;
  public:
  void clear_node2_policy();
  const ::lnrpc::RoutingPolicy& node2_policy() const;
  ::lnrpc::RoutingPolicy* release_node2_policy();
  ::lnrpc::RoutingPolicy* mutable_node2_policy();
  void set_allocated_node2_policy(::lnrpc::RoutingPolicy* node2_policy);
  private:
  const ::lnrpc::RoutingPolicy& _internal_node2_policy() const;
  ::lnrpc::RoutingPolicy* _internal_mutable_node2_policy();
  public:

  // uint64 channel_id = 1 [jstype = JS_STRING];
  void clear_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id() const;
  void set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_channel_id() const;
  void _internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 6;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 last_update = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_last_update();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 last_update() const;
  PROTOBUF_DEPRECATED void set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_update() const;
  void _internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelEdge)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chan_point_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node1_pub_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node2_pub_;
  ::lnrpc::RoutingPolicy* node1_policy_;
  ::lnrpc::RoutingPolicy* node2_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelGraphRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelGraphRequest) */ {
 public:
  ChannelGraphRequest();
  virtual ~ChannelGraphRequest();

  ChannelGraphRequest(const ChannelGraphRequest& from);
  ChannelGraphRequest(ChannelGraphRequest&& from) noexcept
    : ChannelGraphRequest() {
    *this = ::std::move(from);
  }

  inline ChannelGraphRequest& operator=(const ChannelGraphRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelGraphRequest& operator=(ChannelGraphRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelGraphRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelGraphRequest* internal_default_instance() {
    return reinterpret_cast<const ChannelGraphRequest*>(
               &_ChannelGraphRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(ChannelGraphRequest& a, ChannelGraphRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelGraphRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelGraphRequest* New() const final {
    return CreateMaybeMessage<ChannelGraphRequest>(nullptr);
  }

  ChannelGraphRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelGraphRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelGraphRequest& from);
  void MergeFrom(const ChannelGraphRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelGraphRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelGraphRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeUnannouncedFieldNumber = 1,
  };
  // bool include_unannounced = 1;
  void clear_include_unannounced();
  bool include_unannounced() const;
  void set_include_unannounced(bool value);
  private:
  bool _internal_include_unannounced() const;
  void _internal_set_include_unannounced(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelGraphRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_unannounced_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelGraph :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelGraph) */ {
 public:
  ChannelGraph();
  virtual ~ChannelGraph();

  ChannelGraph(const ChannelGraph& from);
  ChannelGraph(ChannelGraph&& from) noexcept
    : ChannelGraph() {
    *this = ::std::move(from);
  }

  inline ChannelGraph& operator=(const ChannelGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelGraph& operator=(ChannelGraph&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelGraph* internal_default_instance() {
    return reinterpret_cast<const ChannelGraph*>(
               &_ChannelGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ChannelGraph& a, ChannelGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelGraph* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelGraph* New() const final {
    return CreateMaybeMessage<ChannelGraph>(nullptr);
  }

  ChannelGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelGraph& from);
  void MergeFrom(const ChannelGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelGraph";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kEdgesFieldNumber = 2,
  };
  // repeated .lnrpc.LightningNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::lnrpc::LightningNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::LightningNode >*
      mutable_nodes();
  private:
  const ::lnrpc::LightningNode& _internal_nodes(int index) const;
  ::lnrpc::LightningNode* _internal_add_nodes();
  public:
  const ::lnrpc::LightningNode& nodes(int index) const;
  ::lnrpc::LightningNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::LightningNode >&
      nodes() const;

  // repeated .lnrpc.ChannelEdge edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::lnrpc::ChannelEdge* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >*
      mutable_edges();
  private:
  const ::lnrpc::ChannelEdge& _internal_edges(int index) const;
  ::lnrpc::ChannelEdge* _internal_add_edges();
  public:
  const ::lnrpc::ChannelEdge& edges(int index) const;
  ::lnrpc::ChannelEdge* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >&
      edges() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelGraph)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::LightningNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeMetricsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeMetricsRequest) */ {
 public:
  NodeMetricsRequest();
  virtual ~NodeMetricsRequest();

  NodeMetricsRequest(const NodeMetricsRequest& from);
  NodeMetricsRequest(NodeMetricsRequest&& from) noexcept
    : NodeMetricsRequest() {
    *this = ::std::move(from);
  }

  inline NodeMetricsRequest& operator=(const NodeMetricsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMetricsRequest& operator=(NodeMetricsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeMetricsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeMetricsRequest* internal_default_instance() {
    return reinterpret_cast<const NodeMetricsRequest*>(
               &_NodeMetricsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(NodeMetricsRequest& a, NodeMetricsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMetricsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeMetricsRequest* New() const final {
    return CreateMaybeMessage<NodeMetricsRequest>(nullptr);
  }

  NodeMetricsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeMetricsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeMetricsRequest& from);
  void MergeFrom(const NodeMetricsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMetricsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeMetricsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 1,
  };
  // repeated .lnrpc.NodeMetricType types = 1;
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::lnrpc::NodeMetricType _internal_types(int index) const;
  void _internal_add_types(::lnrpc::NodeMetricType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::lnrpc::NodeMetricType types(int index) const;
  void set_types(int index, ::lnrpc::NodeMetricType value);
  void add_types(::lnrpc::NodeMetricType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // @@protoc_insertion_point(class_scope:lnrpc.NodeMetricsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, 
    std::string, ::lnrpc::FloatMetric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse, 
    std::string, ::lnrpc::FloatMetric,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse();
  NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse& other);
  static const NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse*>(&_NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lnrpc.NodeMetricsResponse.BetweennessCentralityEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[112];
  }

  public:
};

// -------------------------------------------------------------------

class NodeMetricsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeMetricsResponse) */ {
 public:
  NodeMetricsResponse();
  virtual ~NodeMetricsResponse();

  NodeMetricsResponse(const NodeMetricsResponse& from);
  NodeMetricsResponse(NodeMetricsResponse&& from) noexcept
    : NodeMetricsResponse() {
    *this = ::std::move(from);
  }

  inline NodeMetricsResponse& operator=(const NodeMetricsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeMetricsResponse& operator=(NodeMetricsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeMetricsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeMetricsResponse* internal_default_instance() {
    return reinterpret_cast<const NodeMetricsResponse*>(
               &_NodeMetricsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(NodeMetricsResponse& a, NodeMetricsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeMetricsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeMetricsResponse* New() const final {
    return CreateMaybeMessage<NodeMetricsResponse>(nullptr);
  }

  NodeMetricsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeMetricsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeMetricsResponse& from);
  void MergeFrom(const NodeMetricsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeMetricsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeMetricsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kBetweennessCentralityFieldNumber = 1,
  };
  // map<string, .lnrpc.FloatMetric> betweenness_centrality = 1;
  int betweenness_centrality_size() const;
  private:
  int _internal_betweenness_centrality_size() const;
  public:
  void clear_betweenness_centrality();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >&
      _internal_betweenness_centrality() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >*
      _internal_mutable_betweenness_centrality();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >&
      betweenness_centrality() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >*
      mutable_betweenness_centrality();

  // @@protoc_insertion_point(class_scope:lnrpc.NodeMetricsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeMetricsResponse_BetweennessCentralityEntry_DoNotUse,
      std::string, ::lnrpc::FloatMetric,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > betweenness_centrality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FloatMetric :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FloatMetric) */ {
 public:
  FloatMetric();
  virtual ~FloatMetric();

  FloatMetric(const FloatMetric& from);
  FloatMetric(FloatMetric&& from) noexcept
    : FloatMetric() {
    *this = ::std::move(from);
  }

  inline FloatMetric& operator=(const FloatMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatMetric& operator=(FloatMetric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FloatMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FloatMetric* internal_default_instance() {
    return reinterpret_cast<const FloatMetric*>(
               &_FloatMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(FloatMetric& a, FloatMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatMetric* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FloatMetric* New() const final {
    return CreateMaybeMessage<FloatMetric>(nullptr);
  }

  FloatMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FloatMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FloatMetric& from);
  void MergeFrom(const FloatMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FloatMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FloatMetric";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kNormalizedValueFieldNumber = 2,
  };
  // double value = 1;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // double normalized_value = 2;
  void clear_normalized_value();
  double normalized_value() const;
  void set_normalized_value(double value);
  private:
  double _internal_normalized_value() const;
  void _internal_set_normalized_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.FloatMetric)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double value_;
  double normalized_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChanInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChanInfoRequest) */ {
 public:
  ChanInfoRequest();
  virtual ~ChanInfoRequest();

  ChanInfoRequest(const ChanInfoRequest& from);
  ChanInfoRequest(ChanInfoRequest&& from) noexcept
    : ChanInfoRequest() {
    *this = ::std::move(from);
  }

  inline ChanInfoRequest& operator=(const ChanInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChanInfoRequest& operator=(ChanInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChanInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChanInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ChanInfoRequest*>(
               &_ChanInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(ChanInfoRequest& a, ChanInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChanInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChanInfoRequest* New() const final {
    return CreateMaybeMessage<ChanInfoRequest>(nullptr);
  }

  ChanInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChanInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChanInfoRequest& from);
  void MergeFrom(const ChanInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChanInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChanInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanIdFieldNumber = 1,
  };
  // uint64 chan_id = 1 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChanInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NetworkInfoRequest) */ {
 public:
  NetworkInfoRequest();
  virtual ~NetworkInfoRequest();

  NetworkInfoRequest(const NetworkInfoRequest& from);
  NetworkInfoRequest(NetworkInfoRequest&& from) noexcept
    : NetworkInfoRequest() {
    *this = ::std::move(from);
  }

  inline NetworkInfoRequest& operator=(const NetworkInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfoRequest& operator=(NetworkInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfoRequest* internal_default_instance() {
    return reinterpret_cast<const NetworkInfoRequest*>(
               &_NetworkInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(NetworkInfoRequest& a, NetworkInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfoRequest* New() const final {
    return CreateMaybeMessage<NetworkInfoRequest>(nullptr);
  }

  NetworkInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkInfoRequest& from);
  void MergeFrom(const NetworkInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NetworkInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.NetworkInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NetworkInfo) */ {
 public:
  NetworkInfo();
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NetworkInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvgOutDegreeFieldNumber = 2,
    kGraphDiameterFieldNumber = 1,
    kMaxOutDegreeFieldNumber = 3,
    kNumNodesFieldNumber = 4,
    kNumChannelsFieldNumber = 5,
    kTotalNetworkCapacityFieldNumber = 6,
    kAvgChannelSizeFieldNumber = 7,
    kMinChannelSizeFieldNumber = 8,
    kMaxChannelSizeFieldNumber = 9,
    kMedianChannelSizeSatFieldNumber = 10,
    kNumZombieChansFieldNumber = 11,
  };
  // double avg_out_degree = 2;
  void clear_avg_out_degree();
  double avg_out_degree() const;
  void set_avg_out_degree(double value);
  private:
  double _internal_avg_out_degree() const;
  void _internal_set_avg_out_degree(double value);
  public:

  // uint32 graph_diameter = 1;
  void clear_graph_diameter();
  ::PROTOBUF_NAMESPACE_ID::uint32 graph_diameter() const;
  void set_graph_diameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_graph_diameter() const;
  void _internal_set_graph_diameter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_out_degree = 3;
  void clear_max_out_degree();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_out_degree() const;
  void set_max_out_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_out_degree() const;
  void _internal_set_max_out_degree(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_nodes = 4;
  void clear_num_nodes();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nodes() const;
  void set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_nodes() const;
  void _internal_set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_channels = 5;
  void clear_num_channels();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels() const;
  void set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_channels() const;
  void _internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int64 total_network_capacity = 6;
  void clear_total_network_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 total_network_capacity() const;
  void set_total_network_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_total_network_capacity() const;
  void _internal_set_total_network_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double avg_channel_size = 7;
  void clear_avg_channel_size();
  double avg_channel_size() const;
  void set_avg_channel_size(double value);
  private:
  double _internal_avg_channel_size() const;
  void _internal_set_avg_channel_size(double value);
  public:

  // int64 min_channel_size = 8;
  void clear_min_channel_size();
  ::PROTOBUF_NAMESPACE_ID::int64 min_channel_size() const;
  void set_min_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_channel_size() const;
  void _internal_set_min_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 max_channel_size = 9;
  void clear_max_channel_size();
  ::PROTOBUF_NAMESPACE_ID::int64 max_channel_size() const;
  void set_max_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_channel_size() const;
  void _internal_set_max_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 median_channel_size_sat = 10;
  void clear_median_channel_size_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 median_channel_size_sat() const;
  void set_median_channel_size_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_median_channel_size_sat() const;
  void _internal_set_median_channel_size_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 num_zombie_chans = 11;
  void clear_num_zombie_chans();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_zombie_chans() const;
  void set_num_zombie_chans(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_zombie_chans() const;
  void _internal_set_num_zombie_chans(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NetworkInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double avg_out_degree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 graph_diameter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_out_degree_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_nodes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_channels_;
  ::PROTOBUF_NAMESPACE_ID::int64 total_network_capacity_;
  double avg_channel_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_channel_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_channel_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 median_channel_size_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_zombie_chans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.StopRequest) */ {
 public:
  StopRequest();
  virtual ~StopRequest();

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopRequest* New() const final {
    return CreateMaybeMessage<StopRequest>(nullptr);
  }

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopRequest& from);
  void MergeFrom(const StopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.StopRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.StopRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class StopResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.StopResponse) */ {
 public:
  StopResponse();
  virtual ~StopResponse();

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopResponse* New() const final {
    return CreateMaybeMessage<StopResponse>(nullptr);
  }

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopResponse& from);
  void MergeFrom(const StopResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.StopResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.StopResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GraphTopologySubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GraphTopologySubscription) */ {
 public:
  GraphTopologySubscription();
  virtual ~GraphTopologySubscription();

  GraphTopologySubscription(const GraphTopologySubscription& from);
  GraphTopologySubscription(GraphTopologySubscription&& from) noexcept
    : GraphTopologySubscription() {
    *this = ::std::move(from);
  }

  inline GraphTopologySubscription& operator=(const GraphTopologySubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTopologySubscription& operator=(GraphTopologySubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTopologySubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTopologySubscription* internal_default_instance() {
    return reinterpret_cast<const GraphTopologySubscription*>(
               &_GraphTopologySubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(GraphTopologySubscription& a, GraphTopologySubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTopologySubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTopologySubscription* New() const final {
    return CreateMaybeMessage<GraphTopologySubscription>(nullptr);
  }

  GraphTopologySubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTopologySubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTopologySubscription& from);
  void MergeFrom(const GraphTopologySubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTopologySubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GraphTopologySubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.GraphTopologySubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class GraphTopologyUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.GraphTopologyUpdate) */ {
 public:
  GraphTopologyUpdate();
  virtual ~GraphTopologyUpdate();

  GraphTopologyUpdate(const GraphTopologyUpdate& from);
  GraphTopologyUpdate(GraphTopologyUpdate&& from) noexcept
    : GraphTopologyUpdate() {
    *this = ::std::move(from);
  }

  inline GraphTopologyUpdate& operator=(const GraphTopologyUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphTopologyUpdate& operator=(GraphTopologyUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GraphTopologyUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphTopologyUpdate* internal_default_instance() {
    return reinterpret_cast<const GraphTopologyUpdate*>(
               &_GraphTopologyUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(GraphTopologyUpdate& a, GraphTopologyUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphTopologyUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GraphTopologyUpdate* New() const final {
    return CreateMaybeMessage<GraphTopologyUpdate>(nullptr);
  }

  GraphTopologyUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GraphTopologyUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GraphTopologyUpdate& from);
  void MergeFrom(const GraphTopologyUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphTopologyUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.GraphTopologyUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeUpdatesFieldNumber = 1,
    kChannelUpdatesFieldNumber = 2,
    kClosedChansFieldNumber = 3,
  };
  // repeated .lnrpc.NodeUpdate node_updates = 1;
  int node_updates_size() const;
  private:
  int _internal_node_updates_size() const;
  public:
  void clear_node_updates();
  ::lnrpc::NodeUpdate* mutable_node_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeUpdate >*
      mutable_node_updates();
  private:
  const ::lnrpc::NodeUpdate& _internal_node_updates(int index) const;
  ::lnrpc::NodeUpdate* _internal_add_node_updates();
  public:
  const ::lnrpc::NodeUpdate& node_updates(int index) const;
  ::lnrpc::NodeUpdate* add_node_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeUpdate >&
      node_updates() const;

  // repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;
  int channel_updates_size() const;
  private:
  int _internal_channel_updates_size() const;
  public:
  void clear_channel_updates();
  ::lnrpc::ChannelEdgeUpdate* mutable_channel_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdgeUpdate >*
      mutable_channel_updates();
  private:
  const ::lnrpc::ChannelEdgeUpdate& _internal_channel_updates(int index) const;
  ::lnrpc::ChannelEdgeUpdate* _internal_add_channel_updates();
  public:
  const ::lnrpc::ChannelEdgeUpdate& channel_updates(int index) const;
  ::lnrpc::ChannelEdgeUpdate* add_channel_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdgeUpdate >&
      channel_updates() const;

  // repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;
  int closed_chans_size() const;
  private:
  int _internal_closed_chans_size() const;
  public:
  void clear_closed_chans();
  ::lnrpc::ClosedChannelUpdate* mutable_closed_chans(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ClosedChannelUpdate >*
      mutable_closed_chans();
  private:
  const ::lnrpc::ClosedChannelUpdate& _internal_closed_chans(int index) const;
  ::lnrpc::ClosedChannelUpdate* _internal_add_closed_chans();
  public:
  const ::lnrpc::ClosedChannelUpdate& closed_chans(int index) const;
  ::lnrpc::ClosedChannelUpdate* add_closed_chans();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ClosedChannelUpdate >&
      closed_chans() const;

  // @@protoc_insertion_point(class_scope:lnrpc.GraphTopologyUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeUpdate > node_updates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdgeUpdate > channel_updates_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ClosedChannelUpdate > closed_chans_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class NodeUpdate_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeUpdate_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeUpdate_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  NodeUpdate_FeaturesEntry_DoNotUse();
  NodeUpdate_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeUpdate_FeaturesEntry_DoNotUse& other);
  static const NodeUpdate_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeUpdate_FeaturesEntry_DoNotUse*>(&_NodeUpdate_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[122];
  }

  public:
};

// -------------------------------------------------------------------

class NodeUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.NodeUpdate) */ {
 public:
  NodeUpdate();
  virtual ~NodeUpdate();

  NodeUpdate(const NodeUpdate& from);
  NodeUpdate(NodeUpdate&& from) noexcept
    : NodeUpdate() {
    *this = ::std::move(from);
  }

  inline NodeUpdate& operator=(const NodeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeUpdate& operator=(NodeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeUpdate* internal_default_instance() {
    return reinterpret_cast<const NodeUpdate*>(
               &_NodeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(NodeUpdate& a, NodeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeUpdate* New() const final {
    return CreateMaybeMessage<NodeUpdate>(nullptr);
  }

  NodeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeUpdate& from);
  void MergeFrom(const NodeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.NodeUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 1,
    kFeaturesFieldNumber = 6,
    kIdentityKeyFieldNumber = 2,
    kGlobalFeaturesFieldNumber = 3,
    kAliasFieldNumber = 4,
    kColorFieldNumber = 5,
  };
  // repeated string addresses = 1;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // map<uint32, .lnrpc.Feature> features = 6;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // string identity_key = 2;
  void clear_identity_key();
  const std::string& identity_key() const;
  void set_identity_key(const std::string& value);
  void set_identity_key(std::string&& value);
  void set_identity_key(const char* value);
  void set_identity_key(const char* value, size_t size);
  std::string* mutable_identity_key();
  std::string* release_identity_key();
  void set_allocated_identity_key(std::string* identity_key);
  private:
  const std::string& _internal_identity_key() const;
  void _internal_set_identity_key(const std::string& value);
  std::string* _internal_mutable_identity_key();
  public:

  // bytes global_features = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_global_features();
  PROTOBUF_DEPRECATED const std::string& global_features() const;
  PROTOBUF_DEPRECATED void set_global_features(const std::string& value);
  PROTOBUF_DEPRECATED void set_global_features(std::string&& value);
  PROTOBUF_DEPRECATED void set_global_features(const char* value);
  PROTOBUF_DEPRECATED void set_global_features(const void* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_global_features();
  PROTOBUF_DEPRECATED std::string* release_global_features();
  PROTOBUF_DEPRECATED void set_allocated_global_features(std::string* global_features);
  private:
  const std::string& _internal_global_features() const;
  void _internal_set_global_features(const std::string& value);
  std::string* _internal_mutable_global_features();
  public:

  // string alias = 4;
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string color = 5;
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.NodeUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeUpdate_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identity_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr global_features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelEdgeUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelEdgeUpdate) */ {
 public:
  ChannelEdgeUpdate();
  virtual ~ChannelEdgeUpdate();

  ChannelEdgeUpdate(const ChannelEdgeUpdate& from);
  ChannelEdgeUpdate(ChannelEdgeUpdate&& from) noexcept
    : ChannelEdgeUpdate() {
    *this = ::std::move(from);
  }

  inline ChannelEdgeUpdate& operator=(const ChannelEdgeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelEdgeUpdate& operator=(ChannelEdgeUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelEdgeUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelEdgeUpdate* internal_default_instance() {
    return reinterpret_cast<const ChannelEdgeUpdate*>(
               &_ChannelEdgeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(ChannelEdgeUpdate& a, ChannelEdgeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelEdgeUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelEdgeUpdate* New() const final {
    return CreateMaybeMessage<ChannelEdgeUpdate>(nullptr);
  }

  ChannelEdgeUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelEdgeUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelEdgeUpdate& from);
  void MergeFrom(const ChannelEdgeUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelEdgeUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelEdgeUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAdvertisingNodeFieldNumber = 5,
    kConnectingNodeFieldNumber = 6,
    kChanPointFieldNumber = 2,
    kRoutingPolicyFieldNumber = 4,
    kChanIdFieldNumber = 1,
    kCapacityFieldNumber = 3,
  };
  // string advertising_node = 5;
  void clear_advertising_node();
  const std::string& advertising_node() const;
  void set_advertising_node(const std::string& value);
  void set_advertising_node(std::string&& value);
  void set_advertising_node(const char* value);
  void set_advertising_node(const char* value, size_t size);
  std::string* mutable_advertising_node();
  std::string* release_advertising_node();
  void set_allocated_advertising_node(std::string* advertising_node);
  private:
  const std::string& _internal_advertising_node() const;
  void _internal_set_advertising_node(const std::string& value);
  std::string* _internal_mutable_advertising_node();
  public:

  // string connecting_node = 6;
  void clear_connecting_node();
  const std::string& connecting_node() const;
  void set_connecting_node(const std::string& value);
  void set_connecting_node(std::string&& value);
  void set_connecting_node(const char* value);
  void set_connecting_node(const char* value, size_t size);
  std::string* mutable_connecting_node();
  std::string* release_connecting_node();
  void set_allocated_connecting_node(std::string* connecting_node);
  private:
  const std::string& _internal_connecting_node() const;
  void _internal_set_connecting_node(const std::string& value);
  std::string* _internal_mutable_connecting_node();
  public:

  // .lnrpc.ChannelPoint chan_point = 2;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  // .lnrpc.RoutingPolicy routing_policy = 4;
  bool has_routing_policy() const;
  private:
  bool _internal_has_routing_policy() const;
  public:
  void clear_routing_policy();
  const ::lnrpc::RoutingPolicy& routing_policy() const;
  ::lnrpc::RoutingPolicy* release_routing_policy();
  ::lnrpc::RoutingPolicy* mutable_routing_policy();
  void set_allocated_routing_policy(::lnrpc::RoutingPolicy* routing_policy);
  private:
  const ::lnrpc::RoutingPolicy& _internal_routing_policy() const;
  ::lnrpc::RoutingPolicy* _internal_mutable_routing_policy();
  public:

  // uint64 chan_id = 1 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 3;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelEdgeUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr advertising_node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connecting_node_;
  ::lnrpc::ChannelPoint* chan_point_;
  ::lnrpc::RoutingPolicy* routing_policy_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClosedChannelUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ClosedChannelUpdate) */ {
 public:
  ClosedChannelUpdate();
  virtual ~ClosedChannelUpdate();

  ClosedChannelUpdate(const ClosedChannelUpdate& from);
  ClosedChannelUpdate(ClosedChannelUpdate&& from) noexcept
    : ClosedChannelUpdate() {
    *this = ::std::move(from);
  }

  inline ClosedChannelUpdate& operator=(const ClosedChannelUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClosedChannelUpdate& operator=(ClosedChannelUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClosedChannelUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClosedChannelUpdate* internal_default_instance() {
    return reinterpret_cast<const ClosedChannelUpdate*>(
               &_ClosedChannelUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(ClosedChannelUpdate& a, ClosedChannelUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ClosedChannelUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClosedChannelUpdate* New() const final {
    return CreateMaybeMessage<ClosedChannelUpdate>(nullptr);
  }

  ClosedChannelUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClosedChannelUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClosedChannelUpdate& from);
  void MergeFrom(const ClosedChannelUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClosedChannelUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ClosedChannelUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanPointFieldNumber = 4,
    kChanIdFieldNumber = 1,
    kCapacityFieldNumber = 2,
    kClosedHeightFieldNumber = 3,
  };
  // .lnrpc.ChannelPoint chan_point = 4;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  // uint64 chan_id = 1 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 2;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 closed_height = 3;
  void clear_closed_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 closed_height() const;
  void set_closed_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_closed_height() const;
  void _internal_set_closed_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ClosedChannelUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::ChannelPoint* chan_point_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 closed_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HopHint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.HopHint) */ {
 public:
  HopHint();
  virtual ~HopHint();

  HopHint(const HopHint& from);
  HopHint(HopHint&& from) noexcept
    : HopHint() {
    *this = ::std::move(from);
  }

  inline HopHint& operator=(const HopHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline HopHint& operator=(HopHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HopHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HopHint* internal_default_instance() {
    return reinterpret_cast<const HopHint*>(
               &_HopHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(HopHint& a, HopHint& b) {
    a.Swap(&b);
  }
  inline void Swap(HopHint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HopHint* New() const final {
    return CreateMaybeMessage<HopHint>(nullptr);
  }

  HopHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HopHint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HopHint& from);
  void MergeFrom(const HopHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HopHint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.HopHint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 1,
    kChanIdFieldNumber = 2,
    kFeeBaseMsatFieldNumber = 3,
    kFeeProportionalMillionthsFieldNumber = 4,
    kCltvExpiryDeltaFieldNumber = 5,
  };
  // string node_id = 1;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint64 chan_id = 2 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 fee_base_msat = 3;
  void clear_fee_base_msat();
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_base_msat() const;
  void set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fee_base_msat() const;
  void _internal_set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fee_proportional_millionths = 4;
  void clear_fee_proportional_millionths();
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_proportional_millionths() const;
  void set_fee_proportional_millionths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fee_proportional_millionths() const;
  void _internal_set_fee_proportional_millionths(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cltv_expiry_delta = 5;
  void clear_cltv_expiry_delta();
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_expiry_delta() const;
  void set_cltv_expiry_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cltv_expiry_delta() const;
  void _internal_set_cltv_expiry_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.HopHint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_base_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_proportional_millionths_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_expiry_delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RouteHint :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.RouteHint) */ {
 public:
  RouteHint();
  virtual ~RouteHint();

  RouteHint(const RouteHint& from);
  RouteHint(RouteHint&& from) noexcept
    : RouteHint() {
    *this = ::std::move(from);
  }

  inline RouteHint& operator=(const RouteHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteHint& operator=(RouteHint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteHint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteHint* internal_default_instance() {
    return reinterpret_cast<const RouteHint*>(
               &_RouteHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(RouteHint& a, RouteHint& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteHint* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteHint* New() const final {
    return CreateMaybeMessage<RouteHint>(nullptr);
  }

  RouteHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteHint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteHint& from);
  void MergeFrom(const RouteHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteHint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.RouteHint";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopHintsFieldNumber = 1,
  };
  // repeated .lnrpc.HopHint hop_hints = 1;
  int hop_hints_size() const;
  private:
  int _internal_hop_hints_size() const;
  public:
  void clear_hop_hints();
  ::lnrpc::HopHint* mutable_hop_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HopHint >*
      mutable_hop_hints();
  private:
  const ::lnrpc::HopHint& _internal_hop_hints(int index) const;
  ::lnrpc::HopHint* _internal_add_hop_hints();
  public:
  const ::lnrpc::HopHint& hop_hints(int index) const;
  ::lnrpc::HopHint* add_hop_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HopHint >&
      hop_hints() const;

  // @@protoc_insertion_point(class_scope:lnrpc.RouteHint)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HopHint > hop_hints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Invoice_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Invoice_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Invoice_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  Invoice_FeaturesEntry_DoNotUse();
  Invoice_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Invoice_FeaturesEntry_DoNotUse& other);
  static const Invoice_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Invoice_FeaturesEntry_DoNotUse*>(&_Invoice_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[128];
  }

  public:
};

// -------------------------------------------------------------------

class Invoice :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Invoice) */ {
 public:
  Invoice();
  virtual ~Invoice();

  Invoice(const Invoice& from);
  Invoice(Invoice&& from) noexcept
    : Invoice() {
    *this = ::std::move(from);
  }

  inline Invoice& operator=(const Invoice& from) {
    CopyFrom(from);
    return *this;
  }
  inline Invoice& operator=(Invoice&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Invoice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Invoice* internal_default_instance() {
    return reinterpret_cast<const Invoice*>(
               &_Invoice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(Invoice& a, Invoice& b) {
    a.Swap(&b);
  }
  inline void Swap(Invoice* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Invoice* New() const final {
    return CreateMaybeMessage<Invoice>(nullptr);
  }

  Invoice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Invoice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Invoice& from);
  void MergeFrom(const Invoice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Invoice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Invoice";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  typedef Invoice_InvoiceState InvoiceState;
  static constexpr InvoiceState OPEN =
    Invoice_InvoiceState_OPEN;
  static constexpr InvoiceState SETTLED =
    Invoice_InvoiceState_SETTLED;
  static constexpr InvoiceState CANCELED =
    Invoice_InvoiceState_CANCELED;
  static constexpr InvoiceState ACCEPTED =
    Invoice_InvoiceState_ACCEPTED;
  static inline bool InvoiceState_IsValid(int value) {
    return Invoice_InvoiceState_IsValid(value);
  }
  static constexpr InvoiceState InvoiceState_MIN =
    Invoice_InvoiceState_InvoiceState_MIN;
  static constexpr InvoiceState InvoiceState_MAX =
    Invoice_InvoiceState_InvoiceState_MAX;
  static constexpr int InvoiceState_ARRAYSIZE =
    Invoice_InvoiceState_InvoiceState_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  InvoiceState_descriptor() {
    return Invoice_InvoiceState_descriptor();
  }
  template<typename T>
  static inline const std::string& InvoiceState_Name(T enum_t_value) {
    static_assert(::std::is_same<T, InvoiceState>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function InvoiceState_Name.");
    return Invoice_InvoiceState_Name(enum_t_value);
  }
  static inline bool InvoiceState_Parse(const std::string& name,
      InvoiceState* value) {
    return Invoice_InvoiceState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRouteHintsFieldNumber = 14,
    kHtlcsFieldNumber = 22,
    kFeaturesFieldNumber = 24,
    kMemoFieldNumber = 1,
    kRPreimageFieldNumber = 3,
    kRHashFieldNumber = 4,
    kPaymentRequestFieldNumber = 9,
    kDescriptionHashFieldNumber = 10,
    kFallbackAddrFieldNumber = 12,
    kPaymentAddrFieldNumber = 26,
    kValueFieldNumber = 5,
    kCreationDateFieldNumber = 7,
    kSettleDateFieldNumber = 8,
    kExpiryFieldNumber = 11,
    kCltvExpiryFieldNumber = 13,
    kAddIndexFieldNumber = 16,
    kSettledFieldNumber = 6,
    kPrivateFieldNumber = 15,
    kIsKeysendFieldNumber = 25,
    kStateFieldNumber = 21,
    kSettleIndexFieldNumber = 17,
    kAmtPaidFieldNumber = 18,
    kAmtPaidSatFieldNumber = 19,
    kAmtPaidMsatFieldNumber = 20,
    kValueMsatFieldNumber = 23,
  };
  // repeated .lnrpc.RouteHint route_hints = 14;
  int route_hints_size() const;
  private:
  int _internal_route_hints_size() const;
  public:
  void clear_route_hints();
  ::lnrpc::RouteHint* mutable_route_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
      mutable_route_hints();
  private:
  const ::lnrpc::RouteHint& _internal_route_hints(int index) const;
  ::lnrpc::RouteHint* _internal_add_route_hints();
  public:
  const ::lnrpc::RouteHint& route_hints(int index) const;
  ::lnrpc::RouteHint* add_route_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
      route_hints() const;

  // repeated .lnrpc.InvoiceHTLC htlcs = 22;
  int htlcs_size() const;
  private:
  int _internal_htlcs_size() const;
  public:
  void clear_htlcs();
  ::lnrpc::InvoiceHTLC* mutable_htlcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::InvoiceHTLC >*
      mutable_htlcs();
  private:
  const ::lnrpc::InvoiceHTLC& _internal_htlcs(int index) const;
  ::lnrpc::InvoiceHTLC* _internal_add_htlcs();
  public:
  const ::lnrpc::InvoiceHTLC& htlcs(int index) const;
  ::lnrpc::InvoiceHTLC* add_htlcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::InvoiceHTLC >&
      htlcs() const;

  // map<uint32, .lnrpc.Feature> features = 24;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // string memo = 1;
  void clear_memo();
  const std::string& memo() const;
  void set_memo(const std::string& value);
  void set_memo(std::string&& value);
  void set_memo(const char* value);
  void set_memo(const char* value, size_t size);
  std::string* mutable_memo();
  std::string* release_memo();
  void set_allocated_memo(std::string* memo);
  private:
  const std::string& _internal_memo() const;
  void _internal_set_memo(const std::string& value);
  std::string* _internal_mutable_memo();
  public:

  // bytes r_preimage = 3;
  void clear_r_preimage();
  const std::string& r_preimage() const;
  void set_r_preimage(const std::string& value);
  void set_r_preimage(std::string&& value);
  void set_r_preimage(const char* value);
  void set_r_preimage(const void* value, size_t size);
  std::string* mutable_r_preimage();
  std::string* release_r_preimage();
  void set_allocated_r_preimage(std::string* r_preimage);
  private:
  const std::string& _internal_r_preimage() const;
  void _internal_set_r_preimage(const std::string& value);
  std::string* _internal_mutable_r_preimage();
  public:

  // bytes r_hash = 4;
  void clear_r_hash();
  const std::string& r_hash() const;
  void set_r_hash(const std::string& value);
  void set_r_hash(std::string&& value);
  void set_r_hash(const char* value);
  void set_r_hash(const void* value, size_t size);
  std::string* mutable_r_hash();
  std::string* release_r_hash();
  void set_allocated_r_hash(std::string* r_hash);
  private:
  const std::string& _internal_r_hash() const;
  void _internal_set_r_hash(const std::string& value);
  std::string* _internal_mutable_r_hash();
  public:

  // string payment_request = 9;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // bytes description_hash = 10;
  void clear_description_hash();
  const std::string& description_hash() const;
  void set_description_hash(const std::string& value);
  void set_description_hash(std::string&& value);
  void set_description_hash(const char* value);
  void set_description_hash(const void* value, size_t size);
  std::string* mutable_description_hash();
  std::string* release_description_hash();
  void set_allocated_description_hash(std::string* description_hash);
  private:
  const std::string& _internal_description_hash() const;
  void _internal_set_description_hash(const std::string& value);
  std::string* _internal_mutable_description_hash();
  public:

  // string fallback_addr = 12;
  void clear_fallback_addr();
  const std::string& fallback_addr() const;
  void set_fallback_addr(const std::string& value);
  void set_fallback_addr(std::string&& value);
  void set_fallback_addr(const char* value);
  void set_fallback_addr(const char* value, size_t size);
  std::string* mutable_fallback_addr();
  std::string* release_fallback_addr();
  void set_allocated_fallback_addr(std::string* fallback_addr);
  private:
  const std::string& _internal_fallback_addr() const;
  void _internal_set_fallback_addr(const std::string& value);
  std::string* _internal_mutable_fallback_addr();
  public:

  // bytes payment_addr = 26;
  void clear_payment_addr();
  const std::string& payment_addr() const;
  void set_payment_addr(const std::string& value);
  void set_payment_addr(std::string&& value);
  void set_payment_addr(const char* value);
  void set_payment_addr(const void* value, size_t size);
  std::string* mutable_payment_addr();
  std::string* release_payment_addr();
  void set_allocated_payment_addr(std::string* payment_addr);
  private:
  const std::string& _internal_payment_addr() const;
  void _internal_set_payment_addr(const std::string& value);
  std::string* _internal_mutable_payment_addr();
  public:

  // int64 value = 5;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_date = 7;
  void clear_creation_date();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_date() const;
  void set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_date() const;
  void _internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 settle_date = 8;
  void clear_settle_date();
  ::PROTOBUF_NAMESPACE_ID::int64 settle_date() const;
  void set_settle_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_settle_date() const;
  void _internal_set_settle_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiry = 11;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 cltv_expiry = 13;
  void clear_cltv_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint64 cltv_expiry() const;
  void set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_cltv_expiry() const;
  void _internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 add_index = 16;
  void clear_add_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index() const;
  void set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_add_index() const;
  void _internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool settled = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_settled();
  PROTOBUF_DEPRECATED bool settled() const;
  PROTOBUF_DEPRECATED void set_settled(bool value);
  private:
  bool _internal_settled() const;
  void _internal_set_settled(bool value);
  public:

  // bool private = 15;
  void clear_private_();
  bool private_() const;
  void set_private_(bool value);
  private:
  bool _internal_private_() const;
  void _internal_set_private_(bool value);
  public:

  // bool is_keysend = 25;
  void clear_is_keysend();
  bool is_keysend() const;
  void set_is_keysend(bool value);
  private:
  bool _internal_is_keysend() const;
  void _internal_set_is_keysend(bool value);
  public:

  // .lnrpc.Invoice.InvoiceState state = 21;
  void clear_state();
  ::lnrpc::Invoice_InvoiceState state() const;
  void set_state(::lnrpc::Invoice_InvoiceState value);
  private:
  ::lnrpc::Invoice_InvoiceState _internal_state() const;
  void _internal_set_state(::lnrpc::Invoice_InvoiceState value);
  public:

  // uint64 settle_index = 17;
  void clear_settle_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index() const;
  void set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_settle_index() const;
  void _internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 amt_paid = 18 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_amt_paid();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 amt_paid() const;
  PROTOBUF_DEPRECATED void set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_paid() const;
  void _internal_set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amt_paid_sat = 19;
  void clear_amt_paid_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_sat() const;
  void set_amt_paid_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_paid_sat() const;
  void _internal_set_amt_paid_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 amt_paid_msat = 20;
  void clear_amt_paid_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_msat() const;
  void set_amt_paid_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_paid_msat() const;
  void _internal_set_amt_paid_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value_msat = 23;
  void clear_value_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat() const;
  void set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value_msat() const;
  void _internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Invoice)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint > route_hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::InvoiceHTLC > htlcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Invoice_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memo_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_preimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 settle_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 cltv_expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index_;
  bool settled_;
  bool private__;
  bool is_keysend_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_paid_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class InvoiceHTLC_CustomRecordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvoiceHTLC_CustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InvoiceHTLC_CustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  InvoiceHTLC_CustomRecordsEntry_DoNotUse();
  InvoiceHTLC_CustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InvoiceHTLC_CustomRecordsEntry_DoNotUse& other);
  static const InvoiceHTLC_CustomRecordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InvoiceHTLC_CustomRecordsEntry_DoNotUse*>(&_InvoiceHTLC_CustomRecordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[130];
  }

  public:
};

// -------------------------------------------------------------------

class InvoiceHTLC :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.InvoiceHTLC) */ {
 public:
  InvoiceHTLC();
  virtual ~InvoiceHTLC();

  InvoiceHTLC(const InvoiceHTLC& from);
  InvoiceHTLC(InvoiceHTLC&& from) noexcept
    : InvoiceHTLC() {
    *this = ::std::move(from);
  }

  inline InvoiceHTLC& operator=(const InvoiceHTLC& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceHTLC& operator=(InvoiceHTLC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvoiceHTLC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvoiceHTLC* internal_default_instance() {
    return reinterpret_cast<const InvoiceHTLC*>(
               &_InvoiceHTLC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(InvoiceHTLC& a, InvoiceHTLC& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceHTLC* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvoiceHTLC* New() const final {
    return CreateMaybeMessage<InvoiceHTLC>(nullptr);
  }

  InvoiceHTLC* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvoiceHTLC>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvoiceHTLC& from);
  void MergeFrom(const InvoiceHTLC& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceHTLC* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.InvoiceHTLC";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCustomRecordsFieldNumber = 9,
    kAmpFieldNumber = 11,
    kChanIdFieldNumber = 1,
    kHtlcIndexFieldNumber = 2,
    kAmtMsatFieldNumber = 3,
    kAcceptTimeFieldNumber = 5,
    kAcceptHeightFieldNumber = 4,
    kExpiryHeightFieldNumber = 7,
    kResolveTimeFieldNumber = 6,
    kMppTotalAmtMsatFieldNumber = 10,
    kStateFieldNumber = 8,
  };
  // map<uint64, bytes> custom_records = 9;
  int custom_records_size() const;
  private:
  int _internal_custom_records_size() const;
  public:
  void clear_custom_records();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_custom_records();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_custom_records();

  // .lnrpc.AMP amp = 11;
  bool has_amp() const;
  private:
  bool _internal_has_amp() const;
  public:
  void clear_amp();
  const ::lnrpc::AMP& amp() const;
  ::lnrpc::AMP* release_amp();
  ::lnrpc::AMP* mutable_amp();
  void set_allocated_amp(::lnrpc::AMP* amp);
  private:
  const ::lnrpc::AMP& _internal_amp() const;
  ::lnrpc::AMP* _internal_mutable_amp();
  public:

  // uint64 chan_id = 1 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 htlc_index = 2;
  void clear_htlc_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_index() const;
  void set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_htlc_index() const;
  void _internal_set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amt_msat = 3;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 accept_time = 5;
  void clear_accept_time();
  ::PROTOBUF_NAMESPACE_ID::int64 accept_time() const;
  void set_accept_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_accept_time() const;
  void _internal_set_accept_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 accept_height = 4;
  void clear_accept_height();
  ::PROTOBUF_NAMESPACE_ID::int32 accept_height() const;
  void set_accept_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accept_height() const;
  void _internal_set_accept_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 expiry_height = 7;
  void clear_expiry_height();
  ::PROTOBUF_NAMESPACE_ID::int32 expiry_height() const;
  void set_expiry_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expiry_height() const;
  void _internal_set_expiry_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 resolve_time = 6;
  void clear_resolve_time();
  ::PROTOBUF_NAMESPACE_ID::int64 resolve_time() const;
  void set_resolve_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resolve_time() const;
  void _internal_set_resolve_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 mpp_total_amt_msat = 10;
  void clear_mpp_total_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 mpp_total_amt_msat() const;
  void set_mpp_total_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mpp_total_amt_msat() const;
  void _internal_set_mpp_total_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .lnrpc.InvoiceHTLCState state = 8;
  void clear_state();
  ::lnrpc::InvoiceHTLCState state() const;
  void set_state(::lnrpc::InvoiceHTLCState value);
  private:
  ::lnrpc::InvoiceHTLCState _internal_state() const;
  void _internal_set_state(::lnrpc::InvoiceHTLCState value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.InvoiceHTLC)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InvoiceHTLC_CustomRecordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > custom_records_;
  ::lnrpc::AMP* amp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 accept_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 accept_height_;
  ::PROTOBUF_NAMESPACE_ID::int32 expiry_height_;
  ::PROTOBUF_NAMESPACE_ID::int64 resolve_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mpp_total_amt_msat_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AMP :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.AMP) */ {
 public:
  AMP();
  virtual ~AMP();

  AMP(const AMP& from);
  AMP(AMP&& from) noexcept
    : AMP() {
    *this = ::std::move(from);
  }

  inline AMP& operator=(const AMP& from) {
    CopyFrom(from);
    return *this;
  }
  inline AMP& operator=(AMP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AMP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AMP* internal_default_instance() {
    return reinterpret_cast<const AMP*>(
               &_AMP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(AMP& a, AMP& b) {
    a.Swap(&b);
  }
  inline void Swap(AMP* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AMP* New() const final {
    return CreateMaybeMessage<AMP>(nullptr);
  }

  AMP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AMP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AMP& from);
  void MergeFrom(const AMP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AMP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.AMP";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootShareFieldNumber = 1,
    kSetIdFieldNumber = 2,
    kHashFieldNumber = 4,
    kPreimageFieldNumber = 5,
    kChildIndexFieldNumber = 3,
  };
  // bytes root_share = 1;
  void clear_root_share();
  const std::string& root_share() const;
  void set_root_share(const std::string& value);
  void set_root_share(std::string&& value);
  void set_root_share(const char* value);
  void set_root_share(const void* value, size_t size);
  std::string* mutable_root_share();
  std::string* release_root_share();
  void set_allocated_root_share(std::string* root_share);
  private:
  const std::string& _internal_root_share() const;
  void _internal_set_root_share(const std::string& value);
  std::string* _internal_mutable_root_share();
  public:

  // bytes set_id = 2;
  void clear_set_id();
  const std::string& set_id() const;
  void set_set_id(const std::string& value);
  void set_set_id(std::string&& value);
  void set_set_id(const char* value);
  void set_set_id(const void* value, size_t size);
  std::string* mutable_set_id();
  std::string* release_set_id();
  void set_allocated_set_id(std::string* set_id);
  private:
  const std::string& _internal_set_id() const;
  void _internal_set_set_id(const std::string& value);
  std::string* _internal_mutable_set_id();
  public:

  // bytes hash = 4;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes preimage = 5;
  void clear_preimage();
  const std::string& preimage() const;
  void set_preimage(const std::string& value);
  void set_preimage(std::string&& value);
  void set_preimage(const char* value);
  void set_preimage(const void* value, size_t size);
  std::string* mutable_preimage();
  std::string* release_preimage();
  void set_allocated_preimage(std::string* preimage);
  private:
  const std::string& _internal_preimage() const;
  void _internal_set_preimage(const std::string& value);
  std::string* _internal_mutable_preimage();
  public:

  // uint32 child_index = 3;
  void clear_child_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 child_index() const;
  void set_child_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_child_index() const;
  void _internal_set_child_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.AMP)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_share_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr set_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 child_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AddInvoiceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.AddInvoiceResponse) */ {
 public:
  AddInvoiceResponse();
  virtual ~AddInvoiceResponse();

  AddInvoiceResponse(const AddInvoiceResponse& from);
  AddInvoiceResponse(AddInvoiceResponse&& from) noexcept
    : AddInvoiceResponse() {
    *this = ::std::move(from);
  }

  inline AddInvoiceResponse& operator=(const AddInvoiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddInvoiceResponse& operator=(AddInvoiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddInvoiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddInvoiceResponse* internal_default_instance() {
    return reinterpret_cast<const AddInvoiceResponse*>(
               &_AddInvoiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(AddInvoiceResponse& a, AddInvoiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddInvoiceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddInvoiceResponse* New() const final {
    return CreateMaybeMessage<AddInvoiceResponse>(nullptr);
  }

  AddInvoiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddInvoiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddInvoiceResponse& from);
  void MergeFrom(const AddInvoiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddInvoiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.AddInvoiceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
    kPaymentRequestFieldNumber = 2,
    kPaymentAddrFieldNumber = 17,
    kAddIndexFieldNumber = 16,
  };
  // bytes r_hash = 1;
  void clear_r_hash();
  const std::string& r_hash() const;
  void set_r_hash(const std::string& value);
  void set_r_hash(std::string&& value);
  void set_r_hash(const char* value);
  void set_r_hash(const void* value, size_t size);
  std::string* mutable_r_hash();
  std::string* release_r_hash();
  void set_allocated_r_hash(std::string* r_hash);
  private:
  const std::string& _internal_r_hash() const;
  void _internal_set_r_hash(const std::string& value);
  std::string* _internal_mutable_r_hash();
  public:

  // string payment_request = 2;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // bytes payment_addr = 17;
  void clear_payment_addr();
  const std::string& payment_addr() const;
  void set_payment_addr(const std::string& value);
  void set_payment_addr(std::string&& value);
  void set_payment_addr(const char* value);
  void set_payment_addr(const void* value, size_t size);
  std::string* mutable_payment_addr();
  std::string* release_payment_addr();
  void set_allocated_payment_addr(std::string* payment_addr);
  private:
  const std::string& _internal_payment_addr() const;
  void _internal_set_payment_addr(const std::string& value);
  std::string* _internal_mutable_payment_addr();
  public:

  // uint64 add_index = 16;
  void clear_add_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index() const;
  void set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_add_index() const;
  void _internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.AddInvoiceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PaymentHash :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PaymentHash) */ {
 public:
  PaymentHash();
  virtual ~PaymentHash();

  PaymentHash(const PaymentHash& from);
  PaymentHash(PaymentHash&& from) noexcept
    : PaymentHash() {
    *this = ::std::move(from);
  }

  inline PaymentHash& operator=(const PaymentHash& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentHash& operator=(PaymentHash&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentHash& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentHash* internal_default_instance() {
    return reinterpret_cast<const PaymentHash*>(
               &_PaymentHash_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(PaymentHash& a, PaymentHash& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentHash* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentHash* New() const final {
    return CreateMaybeMessage<PaymentHash>(nullptr);
  }

  PaymentHash* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentHash>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentHash& from);
  void MergeFrom(const PaymentHash& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentHash* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PaymentHash";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashStrFieldNumber = 1,
    kRHashFieldNumber = 2,
  };
  // string r_hash_str = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_r_hash_str();
  PROTOBUF_DEPRECATED const std::string& r_hash_str() const;
  PROTOBUF_DEPRECATED void set_r_hash_str(const std::string& value);
  PROTOBUF_DEPRECATED void set_r_hash_str(std::string&& value);
  PROTOBUF_DEPRECATED void set_r_hash_str(const char* value);
  PROTOBUF_DEPRECATED void set_r_hash_str(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_r_hash_str();
  PROTOBUF_DEPRECATED std::string* release_r_hash_str();
  PROTOBUF_DEPRECATED void set_allocated_r_hash_str(std::string* r_hash_str);
  private:
  const std::string& _internal_r_hash_str() const;
  void _internal_set_r_hash_str(const std::string& value);
  std::string* _internal_mutable_r_hash_str();
  public:

  // bytes r_hash = 2;
  void clear_r_hash();
  const std::string& r_hash() const;
  void set_r_hash(const std::string& value);
  void set_r_hash(std::string&& value);
  void set_r_hash(const char* value);
  void set_r_hash(const void* value, size_t size);
  std::string* mutable_r_hash();
  std::string* release_r_hash();
  void set_allocated_r_hash(std::string* r_hash);
  private:
  const std::string& _internal_r_hash() const;
  void _internal_set_r_hash(const std::string& value);
  std::string* _internal_mutable_r_hash();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PaymentHash)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListInvoiceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListInvoiceRequest) */ {
 public:
  ListInvoiceRequest();
  virtual ~ListInvoiceRequest();

  ListInvoiceRequest(const ListInvoiceRequest& from);
  ListInvoiceRequest(ListInvoiceRequest&& from) noexcept
    : ListInvoiceRequest() {
    *this = ::std::move(from);
  }

  inline ListInvoiceRequest& operator=(const ListInvoiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInvoiceRequest& operator=(ListInvoiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListInvoiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInvoiceRequest* internal_default_instance() {
    return reinterpret_cast<const ListInvoiceRequest*>(
               &_ListInvoiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ListInvoiceRequest& a, ListInvoiceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInvoiceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInvoiceRequest* New() const final {
    return CreateMaybeMessage<ListInvoiceRequest>(nullptr);
  }

  ListInvoiceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInvoiceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListInvoiceRequest& from);
  void MergeFrom(const ListInvoiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInvoiceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListInvoiceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexOffsetFieldNumber = 4,
    kNumMaxInvoicesFieldNumber = 5,
    kPendingOnlyFieldNumber = 1,
    kReversedFieldNumber = 6,
  };
  // uint64 index_offset = 4;
  void clear_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_offset() const;
  void set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_offset() const;
  void _internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 num_max_invoices = 5;
  void clear_num_max_invoices();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_max_invoices() const;
  void set_num_max_invoices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_max_invoices() const;
  void _internal_set_num_max_invoices(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool pending_only = 1;
  void clear_pending_only();
  bool pending_only() const;
  void set_pending_only(bool value);
  private:
  bool _internal_pending_only() const;
  void _internal_set_pending_only(bool value);
  public:

  // bool reversed = 6;
  void clear_reversed();
  bool reversed() const;
  void set_reversed(bool value);
  private:
  bool _internal_reversed() const;
  void _internal_set_reversed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListInvoiceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_max_invoices_;
  bool pending_only_;
  bool reversed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListInvoiceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListInvoiceResponse) */ {
 public:
  ListInvoiceResponse();
  virtual ~ListInvoiceResponse();

  ListInvoiceResponse(const ListInvoiceResponse& from);
  ListInvoiceResponse(ListInvoiceResponse&& from) noexcept
    : ListInvoiceResponse() {
    *this = ::std::move(from);
  }

  inline ListInvoiceResponse& operator=(const ListInvoiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListInvoiceResponse& operator=(ListInvoiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListInvoiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListInvoiceResponse* internal_default_instance() {
    return reinterpret_cast<const ListInvoiceResponse*>(
               &_ListInvoiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(ListInvoiceResponse& a, ListInvoiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListInvoiceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListInvoiceResponse* New() const final {
    return CreateMaybeMessage<ListInvoiceResponse>(nullptr);
  }

  ListInvoiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListInvoiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListInvoiceResponse& from);
  void MergeFrom(const ListInvoiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListInvoiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListInvoiceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInvoicesFieldNumber = 1,
    kLastIndexOffsetFieldNumber = 2,
    kFirstIndexOffsetFieldNumber = 3,
  };
  // repeated .lnrpc.Invoice invoices = 1;
  int invoices_size() const;
  private:
  int _internal_invoices_size() const;
  public:
  void clear_invoices();
  ::lnrpc::Invoice* mutable_invoices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Invoice >*
      mutable_invoices();
  private:
  const ::lnrpc::Invoice& _internal_invoices(int index) const;
  ::lnrpc::Invoice* _internal_add_invoices();
  public:
  const ::lnrpc::Invoice& invoices(int index) const;
  ::lnrpc::Invoice* add_invoices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Invoice >&
      invoices() const;

  // uint64 last_index_offset = 2;
  void clear_last_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_offset() const;
  void set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_index_offset() const;
  void _internal_set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 first_index_offset = 3;
  void clear_first_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index_offset() const;
  void set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_index_offset() const;
  void _internal_set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListInvoiceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Invoice > invoices_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class InvoiceSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.InvoiceSubscription) */ {
 public:
  InvoiceSubscription();
  virtual ~InvoiceSubscription();

  InvoiceSubscription(const InvoiceSubscription& from);
  InvoiceSubscription(InvoiceSubscription&& from) noexcept
    : InvoiceSubscription() {
    *this = ::std::move(from);
  }

  inline InvoiceSubscription& operator=(const InvoiceSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceSubscription& operator=(InvoiceSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvoiceSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvoiceSubscription* internal_default_instance() {
    return reinterpret_cast<const InvoiceSubscription*>(
               &_InvoiceSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(InvoiceSubscription& a, InvoiceSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvoiceSubscription* New() const final {
    return CreateMaybeMessage<InvoiceSubscription>(nullptr);
  }

  InvoiceSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvoiceSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvoiceSubscription& from);
  void MergeFrom(const InvoiceSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.InvoiceSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddIndexFieldNumber = 1,
    kSettleIndexFieldNumber = 2,
  };
  // uint64 add_index = 1;
  void clear_add_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index() const;
  void set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_add_index() const;
  void _internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 settle_index = 2;
  void clear_settle_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index() const;
  void set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_settle_index() const;
  void _internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.InvoiceSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 add_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 settle_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Payment :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Payment) */ {
 public:
  Payment();
  virtual ~Payment();

  Payment(const Payment& from);
  Payment(Payment&& from) noexcept
    : Payment() {
    *this = ::std::move(from);
  }

  inline Payment& operator=(const Payment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Payment& operator=(Payment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Payment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Payment* internal_default_instance() {
    return reinterpret_cast<const Payment*>(
               &_Payment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(Payment& a, Payment& b) {
    a.Swap(&b);
  }
  inline void Swap(Payment* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Payment* New() const final {
    return CreateMaybeMessage<Payment>(nullptr);
  }

  Payment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Payment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Payment& from);
  void MergeFrom(const Payment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Payment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Payment";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Payment_PaymentStatus PaymentStatus;
  static constexpr PaymentStatus UNKNOWN =
    Payment_PaymentStatus_UNKNOWN;
  static constexpr PaymentStatus IN_FLIGHT =
    Payment_PaymentStatus_IN_FLIGHT;
  static constexpr PaymentStatus SUCCEEDED =
    Payment_PaymentStatus_SUCCEEDED;
  static constexpr PaymentStatus FAILED =
    Payment_PaymentStatus_FAILED;
  static inline bool PaymentStatus_IsValid(int value) {
    return Payment_PaymentStatus_IsValid(value);
  }
  static constexpr PaymentStatus PaymentStatus_MIN =
    Payment_PaymentStatus_PaymentStatus_MIN;
  static constexpr PaymentStatus PaymentStatus_MAX =
    Payment_PaymentStatus_PaymentStatus_MAX;
  static constexpr int PaymentStatus_ARRAYSIZE =
    Payment_PaymentStatus_PaymentStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  PaymentStatus_descriptor() {
    return Payment_PaymentStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& PaymentStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PaymentStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PaymentStatus_Name.");
    return Payment_PaymentStatus_Name(enum_t_value);
  }
  static inline bool PaymentStatus_Parse(const std::string& name,
      PaymentStatus* value) {
    return Payment_PaymentStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHtlcsFieldNumber = 14,
    kPaymentHashFieldNumber = 1,
    kPaymentPreimageFieldNumber = 6,
    kPaymentRequestFieldNumber = 9,
    kValueFieldNumber = 2,
    kCreationDateFieldNumber = 3,
    kFeeFieldNumber = 5,
    kValueSatFieldNumber = 7,
    kValueMsatFieldNumber = 8,
    kFeeSatFieldNumber = 11,
    kFeeMsatFieldNumber = 12,
    kCreationTimeNsFieldNumber = 13,
    kStatusFieldNumber = 10,
    kFailureReasonFieldNumber = 16,
    kPaymentIndexFieldNumber = 15,
  };
  // repeated .lnrpc.HTLCAttempt htlcs = 14;
  int htlcs_size() const;
  private:
  int _internal_htlcs_size() const;
  public:
  void clear_htlcs();
  ::lnrpc::HTLCAttempt* mutable_htlcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >*
      mutable_htlcs();
  private:
  const ::lnrpc::HTLCAttempt& _internal_htlcs(int index) const;
  ::lnrpc::HTLCAttempt* _internal_add_htlcs();
  public:
  const ::lnrpc::HTLCAttempt& htlcs(int index) const;
  ::lnrpc::HTLCAttempt* add_htlcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >&
      htlcs() const;

  // string payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const char* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // string payment_preimage = 6;
  void clear_payment_preimage();
  const std::string& payment_preimage() const;
  void set_payment_preimage(const std::string& value);
  void set_payment_preimage(std::string&& value);
  void set_payment_preimage(const char* value);
  void set_payment_preimage(const char* value, size_t size);
  std::string* mutable_payment_preimage();
  std::string* release_payment_preimage();
  void set_allocated_payment_preimage(std::string* payment_preimage);
  private:
  const std::string& _internal_payment_preimage() const;
  void _internal_set_payment_preimage(const std::string& value);
  std::string* _internal_mutable_payment_preimage();
  public:

  // string payment_request = 9;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // int64 value = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_value();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  PROTOBUF_DEPRECATED void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_date = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_creation_date();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 creation_date() const;
  PROTOBUF_DEPRECATED void set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_date() const;
  void _internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_fee();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  PROTOBUF_DEPRECATED void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value_sat = 7;
  void clear_value_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 value_sat() const;
  void set_value_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value_sat() const;
  void _internal_set_value_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 value_msat = 8;
  void clear_value_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat() const;
  void set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value_msat() const;
  void _internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_sat = 11;
  void clear_fee_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_sat() const;
  void set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_sat() const;
  void _internal_set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_msat = 12;
  void clear_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_msat() const;
  void set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_msat() const;
  void _internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 creation_time_ns = 13;
  void clear_creation_time_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ns() const;
  void set_creation_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_creation_time_ns() const;
  void _internal_set_creation_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .lnrpc.Payment.PaymentStatus status = 10;
  void clear_status();
  ::lnrpc::Payment_PaymentStatus status() const;
  void set_status(::lnrpc::Payment_PaymentStatus value);
  private:
  ::lnrpc::Payment_PaymentStatus _internal_status() const;
  void _internal_set_status(::lnrpc::Payment_PaymentStatus value);
  public:

  // .lnrpc.PaymentFailureReason failure_reason = 16;
  void clear_failure_reason();
  ::lnrpc::PaymentFailureReason failure_reason() const;
  void set_failure_reason(::lnrpc::PaymentFailureReason value);
  private:
  ::lnrpc::PaymentFailureReason _internal_failure_reason() const;
  void _internal_set_failure_reason(::lnrpc::PaymentFailureReason value);
  public:

  // uint64 payment_index = 15;
  void clear_payment_index();
  ::PROTOBUF_NAMESPACE_ID::uint64 payment_index() const;
  void set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_payment_index() const;
  void _internal_set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Payment)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt > htlcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_preimage_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_date_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 creation_time_ns_;
  int status_;
  int failure_reason_;
  ::PROTOBUF_NAMESPACE_ID::uint64 payment_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class HTLCAttempt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.HTLCAttempt) */ {
 public:
  HTLCAttempt();
  virtual ~HTLCAttempt();

  HTLCAttempt(const HTLCAttempt& from);
  HTLCAttempt(HTLCAttempt&& from) noexcept
    : HTLCAttempt() {
    *this = ::std::move(from);
  }

  inline HTLCAttempt& operator=(const HTLCAttempt& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTLCAttempt& operator=(HTLCAttempt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTLCAttempt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTLCAttempt* internal_default_instance() {
    return reinterpret_cast<const HTLCAttempt*>(
               &_HTLCAttempt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(HTLCAttempt& a, HTLCAttempt& b) {
    a.Swap(&b);
  }
  inline void Swap(HTLCAttempt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTLCAttempt* New() const final {
    return CreateMaybeMessage<HTLCAttempt>(nullptr);
  }

  HTLCAttempt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTLCAttempt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTLCAttempt& from);
  void MergeFrom(const HTLCAttempt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTLCAttempt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.HTLCAttempt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HTLCAttempt_HTLCStatus HTLCStatus;
  static constexpr HTLCStatus IN_FLIGHT =
    HTLCAttempt_HTLCStatus_IN_FLIGHT;
  static constexpr HTLCStatus SUCCEEDED =
    HTLCAttempt_HTLCStatus_SUCCEEDED;
  static constexpr HTLCStatus FAILED =
    HTLCAttempt_HTLCStatus_FAILED;
  static inline bool HTLCStatus_IsValid(int value) {
    return HTLCAttempt_HTLCStatus_IsValid(value);
  }
  static constexpr HTLCStatus HTLCStatus_MIN =
    HTLCAttempt_HTLCStatus_HTLCStatus_MIN;
  static constexpr HTLCStatus HTLCStatus_MAX =
    HTLCAttempt_HTLCStatus_HTLCStatus_MAX;
  static constexpr int HTLCStatus_ARRAYSIZE =
    HTLCAttempt_HTLCStatus_HTLCStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  HTLCStatus_descriptor() {
    return HTLCAttempt_HTLCStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& HTLCStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HTLCStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HTLCStatus_Name.");
    return HTLCAttempt_HTLCStatus_Name(enum_t_value);
  }
  static inline bool HTLCStatus_Parse(const std::string& name,
      HTLCStatus* value) {
    return HTLCAttempt_HTLCStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPreimageFieldNumber = 6,
    kRouteFieldNumber = 2,
    kFailureFieldNumber = 5,
    kAttemptTimeNsFieldNumber = 3,
    kResolveTimeNsFieldNumber = 4,
    kAttemptIdFieldNumber = 7,
    kStatusFieldNumber = 1,
  };
  // bytes preimage = 6;
  void clear_preimage();
  const std::string& preimage() const;
  void set_preimage(const std::string& value);
  void set_preimage(std::string&& value);
  void set_preimage(const char* value);
  void set_preimage(const void* value, size_t size);
  std::string* mutable_preimage();
  std::string* release_preimage();
  void set_allocated_preimage(std::string* preimage);
  private:
  const std::string& _internal_preimage() const;
  void _internal_set_preimage(const std::string& value);
  std::string* _internal_mutable_preimage();
  public:

  // .lnrpc.Route route = 2;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::lnrpc::Route& route() const;
  ::lnrpc::Route* release_route();
  ::lnrpc::Route* mutable_route();
  void set_allocated_route(::lnrpc::Route* route);
  private:
  const ::lnrpc::Route& _internal_route() const;
  ::lnrpc::Route* _internal_mutable_route();
  public:

  // .lnrpc.Failure failure = 5;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::lnrpc::Failure& failure() const;
  ::lnrpc::Failure* release_failure();
  ::lnrpc::Failure* mutable_failure();
  void set_allocated_failure(::lnrpc::Failure* failure);
  private:
  const ::lnrpc::Failure& _internal_failure() const;
  ::lnrpc::Failure* _internal_mutable_failure();
  public:

  // int64 attempt_time_ns = 3;
  void clear_attempt_time_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 attempt_time_ns() const;
  void set_attempt_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_attempt_time_ns() const;
  void _internal_set_attempt_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 resolve_time_ns = 4;
  void clear_resolve_time_ns();
  ::PROTOBUF_NAMESPACE_ID::int64 resolve_time_ns() const;
  void set_resolve_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_resolve_time_ns() const;
  void _internal_set_resolve_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 attempt_id = 7;
  void clear_attempt_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 attempt_id() const;
  void set_attempt_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_attempt_id() const;
  void _internal_set_attempt_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .lnrpc.HTLCAttempt.HTLCStatus status = 1;
  void clear_status();
  ::lnrpc::HTLCAttempt_HTLCStatus status() const;
  void set_status(::lnrpc::HTLCAttempt_HTLCStatus value);
  private:
  ::lnrpc::HTLCAttempt_HTLCStatus _internal_status() const;
  void _internal_set_status(::lnrpc::HTLCAttempt_HTLCStatus value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.HTLCAttempt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimage_;
  ::lnrpc::Route* route_;
  ::lnrpc::Failure* failure_;
  ::PROTOBUF_NAMESPACE_ID::int64 attempt_time_ns_;
  ::PROTOBUF_NAMESPACE_ID::int64 resolve_time_ns_;
  ::PROTOBUF_NAMESPACE_ID::uint64 attempt_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPaymentsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPaymentsRequest) */ {
 public:
  ListPaymentsRequest();
  virtual ~ListPaymentsRequest();

  ListPaymentsRequest(const ListPaymentsRequest& from);
  ListPaymentsRequest(ListPaymentsRequest&& from) noexcept
    : ListPaymentsRequest() {
    *this = ::std::move(from);
  }

  inline ListPaymentsRequest& operator=(const ListPaymentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPaymentsRequest& operator=(ListPaymentsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPaymentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPaymentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPaymentsRequest*>(
               &_ListPaymentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(ListPaymentsRequest& a, ListPaymentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPaymentsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPaymentsRequest* New() const final {
    return CreateMaybeMessage<ListPaymentsRequest>(nullptr);
  }

  ListPaymentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPaymentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPaymentsRequest& from);
  void MergeFrom(const ListPaymentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPaymentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPaymentsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexOffsetFieldNumber = 2,
    kMaxPaymentsFieldNumber = 3,
    kIncludeIncompleteFieldNumber = 1,
    kReversedFieldNumber = 4,
  };
  // uint64 index_offset = 2;
  void clear_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 index_offset() const;
  void set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_index_offset() const;
  void _internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 max_payments = 3;
  void clear_max_payments();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payments() const;
  void set_max_payments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_payments() const;
  void _internal_set_max_payments(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool include_incomplete = 1;
  void clear_include_incomplete();
  bool include_incomplete() const;
  void set_include_incomplete(bool value);
  private:
  bool _internal_include_incomplete() const;
  void _internal_set_include_incomplete(bool value);
  public:

  // bool reversed = 4;
  void clear_reversed();
  bool reversed() const;
  void set_reversed(bool value);
  private:
  bool _internal_reversed() const;
  void _internal_set_reversed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListPaymentsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 index_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_payments_;
  bool include_incomplete_;
  bool reversed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPaymentsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPaymentsResponse) */ {
 public:
  ListPaymentsResponse();
  virtual ~ListPaymentsResponse();

  ListPaymentsResponse(const ListPaymentsResponse& from);
  ListPaymentsResponse(ListPaymentsResponse&& from) noexcept
    : ListPaymentsResponse() {
    *this = ::std::move(from);
  }

  inline ListPaymentsResponse& operator=(const ListPaymentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPaymentsResponse& operator=(ListPaymentsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPaymentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPaymentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPaymentsResponse*>(
               &_ListPaymentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(ListPaymentsResponse& a, ListPaymentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPaymentsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPaymentsResponse* New() const final {
    return CreateMaybeMessage<ListPaymentsResponse>(nullptr);
  }

  ListPaymentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPaymentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPaymentsResponse& from);
  void MergeFrom(const ListPaymentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPaymentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPaymentsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentsFieldNumber = 1,
    kFirstIndexOffsetFieldNumber = 2,
    kLastIndexOffsetFieldNumber = 3,
  };
  // repeated .lnrpc.Payment payments = 1;
  int payments_size() const;
  private:
  int _internal_payments_size() const;
  public:
  void clear_payments();
  ::lnrpc::Payment* mutable_payments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Payment >*
      mutable_payments();
  private:
  const ::lnrpc::Payment& _internal_payments(int index) const;
  ::lnrpc::Payment* _internal_add_payments();
  public:
  const ::lnrpc::Payment& payments(int index) const;
  ::lnrpc::Payment* add_payments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Payment >&
      payments() const;

  // uint64 first_index_offset = 2;
  void clear_first_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index_offset() const;
  void set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_first_index_offset() const;
  void _internal_set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 last_index_offset = 3;
  void clear_last_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_offset() const;
  void set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_last_index_offset() const;
  void _internal_set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ListPaymentsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Payment > payments_;
  ::PROTOBUF_NAMESPACE_ID::uint64 first_index_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 last_index_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteAllPaymentsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DeleteAllPaymentsRequest) */ {
 public:
  DeleteAllPaymentsRequest();
  virtual ~DeleteAllPaymentsRequest();

  DeleteAllPaymentsRequest(const DeleteAllPaymentsRequest& from);
  DeleteAllPaymentsRequest(DeleteAllPaymentsRequest&& from) noexcept
    : DeleteAllPaymentsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAllPaymentsRequest& operator=(const DeleteAllPaymentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAllPaymentsRequest& operator=(DeleteAllPaymentsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAllPaymentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllPaymentsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAllPaymentsRequest*>(
               &_DeleteAllPaymentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(DeleteAllPaymentsRequest& a, DeleteAllPaymentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAllPaymentsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllPaymentsRequest* New() const final {
    return CreateMaybeMessage<DeleteAllPaymentsRequest>(nullptr);
  }

  DeleteAllPaymentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllPaymentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAllPaymentsRequest& from);
  void MergeFrom(const DeleteAllPaymentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllPaymentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DeleteAllPaymentsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailedPaymentsOnlyFieldNumber = 1,
    kFailedHtlcsOnlyFieldNumber = 2,
  };
  // bool failed_payments_only = 1;
  void clear_failed_payments_only();
  bool failed_payments_only() const;
  void set_failed_payments_only(bool value);
  private:
  bool _internal_failed_payments_only() const;
  void _internal_set_failed_payments_only(bool value);
  public:

  // bool failed_htlcs_only = 2;
  void clear_failed_htlcs_only();
  bool failed_htlcs_only() const;
  void set_failed_htlcs_only(bool value);
  private:
  bool _internal_failed_htlcs_only() const;
  void _internal_set_failed_htlcs_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DeleteAllPaymentsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool failed_payments_only_;
  bool failed_htlcs_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteAllPaymentsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DeleteAllPaymentsResponse) */ {
 public:
  DeleteAllPaymentsResponse();
  virtual ~DeleteAllPaymentsResponse();

  DeleteAllPaymentsResponse(const DeleteAllPaymentsResponse& from);
  DeleteAllPaymentsResponse(DeleteAllPaymentsResponse&& from) noexcept
    : DeleteAllPaymentsResponse() {
    *this = ::std::move(from);
  }

  inline DeleteAllPaymentsResponse& operator=(const DeleteAllPaymentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAllPaymentsResponse& operator=(DeleteAllPaymentsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAllPaymentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAllPaymentsResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteAllPaymentsResponse*>(
               &_DeleteAllPaymentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(DeleteAllPaymentsResponse& a, DeleteAllPaymentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAllPaymentsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAllPaymentsResponse* New() const final {
    return CreateMaybeMessage<DeleteAllPaymentsResponse>(nullptr);
  }

  DeleteAllPaymentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAllPaymentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAllPaymentsResponse& from);
  void MergeFrom(const DeleteAllPaymentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAllPaymentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DeleteAllPaymentsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.DeleteAllPaymentsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AbandonChannelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.AbandonChannelRequest) */ {
 public:
  AbandonChannelRequest();
  virtual ~AbandonChannelRequest();

  AbandonChannelRequest(const AbandonChannelRequest& from);
  AbandonChannelRequest(AbandonChannelRequest&& from) noexcept
    : AbandonChannelRequest() {
    *this = ::std::move(from);
  }

  inline AbandonChannelRequest& operator=(const AbandonChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonChannelRequest& operator=(AbandonChannelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbandonChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbandonChannelRequest* internal_default_instance() {
    return reinterpret_cast<const AbandonChannelRequest*>(
               &_AbandonChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(AbandonChannelRequest& a, AbandonChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonChannelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbandonChannelRequest* New() const final {
    return CreateMaybeMessage<AbandonChannelRequest>(nullptr);
  }

  AbandonChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbandonChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbandonChannelRequest& from);
  void MergeFrom(const AbandonChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.AbandonChannelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelPointFieldNumber = 1,
    kPendingFundingShimOnlyFieldNumber = 2,
  };
  // .lnrpc.ChannelPoint channel_point = 1;
  bool has_channel_point() const;
  private:
  bool _internal_has_channel_point() const;
  public:
  void clear_channel_point();
  const ::lnrpc::ChannelPoint& channel_point() const;
  ::lnrpc::ChannelPoint* release_channel_point();
  ::lnrpc::ChannelPoint* mutable_channel_point();
  void set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_channel_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_channel_point();
  public:

  // bool pending_funding_shim_only = 2;
  void clear_pending_funding_shim_only();
  bool pending_funding_shim_only() const;
  void set_pending_funding_shim_only(bool value);
  private:
  bool _internal_pending_funding_shim_only() const;
  void _internal_set_pending_funding_shim_only(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.AbandonChannelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::ChannelPoint* channel_point_;
  bool pending_funding_shim_only_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AbandonChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.AbandonChannelResponse) */ {
 public:
  AbandonChannelResponse();
  virtual ~AbandonChannelResponse();

  AbandonChannelResponse(const AbandonChannelResponse& from);
  AbandonChannelResponse(AbandonChannelResponse&& from) noexcept
    : AbandonChannelResponse() {
    *this = ::std::move(from);
  }

  inline AbandonChannelResponse& operator=(const AbandonChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AbandonChannelResponse& operator=(AbandonChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AbandonChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AbandonChannelResponse* internal_default_instance() {
    return reinterpret_cast<const AbandonChannelResponse*>(
               &_AbandonChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(AbandonChannelResponse& a, AbandonChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AbandonChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AbandonChannelResponse* New() const final {
    return CreateMaybeMessage<AbandonChannelResponse>(nullptr);
  }

  AbandonChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AbandonChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AbandonChannelResponse& from);
  void MergeFrom(const AbandonChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AbandonChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.AbandonChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.AbandonChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DebugLevelRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DebugLevelRequest) */ {
 public:
  DebugLevelRequest();
  virtual ~DebugLevelRequest();

  DebugLevelRequest(const DebugLevelRequest& from);
  DebugLevelRequest(DebugLevelRequest&& from) noexcept
    : DebugLevelRequest() {
    *this = ::std::move(from);
  }

  inline DebugLevelRequest& operator=(const DebugLevelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugLevelRequest& operator=(DebugLevelRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebugLevelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugLevelRequest* internal_default_instance() {
    return reinterpret_cast<const DebugLevelRequest*>(
               &_DebugLevelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(DebugLevelRequest& a, DebugLevelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugLevelRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugLevelRequest* New() const final {
    return CreateMaybeMessage<DebugLevelRequest>(nullptr);
  }

  DebugLevelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugLevelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebugLevelRequest& from);
  void MergeFrom(const DebugLevelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugLevelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DebugLevelRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelSpecFieldNumber = 2,
    kShowFieldNumber = 1,
  };
  // string level_spec = 2;
  void clear_level_spec();
  const std::string& level_spec() const;
  void set_level_spec(const std::string& value);
  void set_level_spec(std::string&& value);
  void set_level_spec(const char* value);
  void set_level_spec(const char* value, size_t size);
  std::string* mutable_level_spec();
  std::string* release_level_spec();
  void set_allocated_level_spec(std::string* level_spec);
  private:
  const std::string& _internal_level_spec() const;
  void _internal_set_level_spec(const std::string& value);
  std::string* _internal_mutable_level_spec();
  public:

  // bool show = 1;
  void clear_show();
  bool show() const;
  void set_show(bool value);
  private:
  bool _internal_show() const;
  void _internal_set_show(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DebugLevelRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_spec_;
  bool show_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DebugLevelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DebugLevelResponse) */ {
 public:
  DebugLevelResponse();
  virtual ~DebugLevelResponse();

  DebugLevelResponse(const DebugLevelResponse& from);
  DebugLevelResponse(DebugLevelResponse&& from) noexcept
    : DebugLevelResponse() {
    *this = ::std::move(from);
  }

  inline DebugLevelResponse& operator=(const DebugLevelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DebugLevelResponse& operator=(DebugLevelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DebugLevelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DebugLevelResponse* internal_default_instance() {
    return reinterpret_cast<const DebugLevelResponse*>(
               &_DebugLevelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(DebugLevelResponse& a, DebugLevelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DebugLevelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DebugLevelResponse* New() const final {
    return CreateMaybeMessage<DebugLevelResponse>(nullptr);
  }

  DebugLevelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DebugLevelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DebugLevelResponse& from);
  void MergeFrom(const DebugLevelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DebugLevelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DebugLevelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubSystemsFieldNumber = 1,
  };
  // string sub_systems = 1;
  void clear_sub_systems();
  const std::string& sub_systems() const;
  void set_sub_systems(const std::string& value);
  void set_sub_systems(std::string&& value);
  void set_sub_systems(const char* value);
  void set_sub_systems(const char* value, size_t size);
  std::string* mutable_sub_systems();
  std::string* release_sub_systems();
  void set_allocated_sub_systems(std::string* sub_systems);
  private:
  const std::string& _internal_sub_systems() const;
  void _internal_set_sub_systems(const std::string& value);
  std::string* _internal_mutable_sub_systems();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DebugLevelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_systems_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PayReqString :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PayReqString) */ {
 public:
  PayReqString();
  virtual ~PayReqString();

  PayReqString(const PayReqString& from);
  PayReqString(PayReqString&& from) noexcept
    : PayReqString() {
    *this = ::std::move(from);
  }

  inline PayReqString& operator=(const PayReqString& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayReqString& operator=(PayReqString&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PayReqString& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayReqString* internal_default_instance() {
    return reinterpret_cast<const PayReqString*>(
               &_PayReqString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(PayReqString& a, PayReqString& b) {
    a.Swap(&b);
  }
  inline void Swap(PayReqString* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayReqString* New() const final {
    return CreateMaybeMessage<PayReqString>(nullptr);
  }

  PayReqString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayReqString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PayReqString& from);
  void MergeFrom(const PayReqString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayReqString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PayReqString";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayReqFieldNumber = 1,
  };
  // string pay_req = 1;
  void clear_pay_req();
  const std::string& pay_req() const;
  void set_pay_req(const std::string& value);
  void set_pay_req(std::string&& value);
  void set_pay_req(const char* value);
  void set_pay_req(const char* value, size_t size);
  std::string* mutable_pay_req();
  std::string* release_pay_req();
  void set_allocated_pay_req(std::string* pay_req);
  private:
  const std::string& _internal_pay_req() const;
  void _internal_set_pay_req(const std::string& value);
  std::string* _internal_mutable_pay_req();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PayReqString)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pay_req_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PayReq_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PayReq_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PayReq_FeaturesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  PayReq_FeaturesEntry_DoNotUse();
  PayReq_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PayReq_FeaturesEntry_DoNotUse& other);
  static const PayReq_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PayReq_FeaturesEntry_DoNotUse*>(&_PayReq_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[149];
  }

  public:
};

// -------------------------------------------------------------------

class PayReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PayReq) */ {
 public:
  PayReq();
  virtual ~PayReq();

  PayReq(const PayReq& from);
  PayReq(PayReq&& from) noexcept
    : PayReq() {
    *this = ::std::move(from);
  }

  inline PayReq& operator=(const PayReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayReq& operator=(PayReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PayReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PayReq* internal_default_instance() {
    return reinterpret_cast<const PayReq*>(
               &_PayReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(PayReq& a, PayReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PayReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayReq* New() const final {
    return CreateMaybeMessage<PayReq>(nullptr);
  }

  PayReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PayReq& from);
  void MergeFrom(const PayReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PayReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRouteHintsFieldNumber = 10,
    kFeaturesFieldNumber = 13,
    kDestinationFieldNumber = 1,
    kPaymentHashFieldNumber = 2,
    kDescriptionFieldNumber = 6,
    kDescriptionHashFieldNumber = 7,
    kFallbackAddrFieldNumber = 8,
    kPaymentAddrFieldNumber = 11,
    kNumSatoshisFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kExpiryFieldNumber = 5,
    kCltvExpiryFieldNumber = 9,
    kNumMsatFieldNumber = 12,
  };
  // repeated .lnrpc.RouteHint route_hints = 10;
  int route_hints_size() const;
  private:
  int _internal_route_hints_size() const;
  public:
  void clear_route_hints();
  ::lnrpc::RouteHint* mutable_route_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
      mutable_route_hints();
  private:
  const ::lnrpc::RouteHint& _internal_route_hints(int index) const;
  ::lnrpc::RouteHint* _internal_add_route_hints();
  public:
  const ::lnrpc::RouteHint& route_hints(int index) const;
  ::lnrpc::RouteHint* add_route_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
      route_hints() const;

  // map<uint32, .lnrpc.Feature> features = 13;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
      mutable_features();

  // string destination = 1;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // string payment_hash = 2;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const char* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string description_hash = 7;
  void clear_description_hash();
  const std::string& description_hash() const;
  void set_description_hash(const std::string& value);
  void set_description_hash(std::string&& value);
  void set_description_hash(const char* value);
  void set_description_hash(const char* value, size_t size);
  std::string* mutable_description_hash();
  std::string* release_description_hash();
  void set_allocated_description_hash(std::string* description_hash);
  private:
  const std::string& _internal_description_hash() const;
  void _internal_set_description_hash(const std::string& value);
  std::string* _internal_mutable_description_hash();
  public:

  // string fallback_addr = 8;
  void clear_fallback_addr();
  const std::string& fallback_addr() const;
  void set_fallback_addr(const std::string& value);
  void set_fallback_addr(std::string&& value);
  void set_fallback_addr(const char* value);
  void set_fallback_addr(const char* value, size_t size);
  std::string* mutable_fallback_addr();
  std::string* release_fallback_addr();
  void set_allocated_fallback_addr(std::string* fallback_addr);
  private:
  const std::string& _internal_fallback_addr() const;
  void _internal_set_fallback_addr(const std::string& value);
  std::string* _internal_mutable_fallback_addr();
  public:

  // bytes payment_addr = 11;
  void clear_payment_addr();
  const std::string& payment_addr() const;
  void set_payment_addr(const std::string& value);
  void set_payment_addr(std::string&& value);
  void set_payment_addr(const char* value);
  void set_payment_addr(const void* value, size_t size);
  std::string* mutable_payment_addr();
  std::string* release_payment_addr();
  void set_allocated_payment_addr(std::string* payment_addr);
  private:
  const std::string& _internal_payment_addr() const;
  void _internal_set_payment_addr(const std::string& value);
  std::string* _internal_mutable_payment_addr();
  public:

  // int64 num_satoshis = 3;
  void clear_num_satoshis();
  ::PROTOBUF_NAMESPACE_ID::int64 num_satoshis() const;
  void set_num_satoshis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_satoshis() const;
  void _internal_set_num_satoshis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiry = 5;
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 cltv_expiry = 9;
  void clear_cltv_expiry();
  ::PROTOBUF_NAMESPACE_ID::int64 cltv_expiry() const;
  void set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cltv_expiry() const;
  void _internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_msat = 12;
  void clear_num_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 num_msat() const;
  void set_num_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_msat() const;
  void _internal_set_num_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.PayReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint > route_hints_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PayReq_FeaturesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > features_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fallback_addr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_addr_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_satoshis_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 cltv_expiry_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Feature :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const final {
    return CreateMaybeMessage<Feature>(nullptr);
  }

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Feature";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIsRequiredFieldNumber = 3,
    kIsKnownFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_required = 3;
  void clear_is_required();
  bool is_required() const;
  void set_is_required(bool value);
  private:
  bool _internal_is_required() const;
  void _internal_set_is_required(bool value);
  public:

  // bool is_known = 4;
  void clear_is_known();
  bool is_known() const;
  void set_is_known(bool value);
  private:
  bool _internal_is_known() const;
  void _internal_set_is_known(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Feature)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  bool is_required_;
  bool is_known_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FeeReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FeeReportRequest) */ {
 public:
  FeeReportRequest();
  virtual ~FeeReportRequest();

  FeeReportRequest(const FeeReportRequest& from);
  FeeReportRequest(FeeReportRequest&& from) noexcept
    : FeeReportRequest() {
    *this = ::std::move(from);
  }

  inline FeeReportRequest& operator=(const FeeReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeReportRequest& operator=(FeeReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeReportRequest* internal_default_instance() {
    return reinterpret_cast<const FeeReportRequest*>(
               &_FeeReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(FeeReportRequest& a, FeeReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeReportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeReportRequest* New() const final {
    return CreateMaybeMessage<FeeReportRequest>(nullptr);
  }

  FeeReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeReportRequest& from);
  void MergeFrom(const FeeReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FeeReportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.FeeReportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelFeeReport :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelFeeReport) */ {
 public:
  ChannelFeeReport();
  virtual ~ChannelFeeReport();

  ChannelFeeReport(const ChannelFeeReport& from);
  ChannelFeeReport(ChannelFeeReport&& from) noexcept
    : ChannelFeeReport() {
    *this = ::std::move(from);
  }

  inline ChannelFeeReport& operator=(const ChannelFeeReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelFeeReport& operator=(ChannelFeeReport&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelFeeReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelFeeReport* internal_default_instance() {
    return reinterpret_cast<const ChannelFeeReport*>(
               &_ChannelFeeReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(ChannelFeeReport& a, ChannelFeeReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelFeeReport* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelFeeReport* New() const final {
    return CreateMaybeMessage<ChannelFeeReport>(nullptr);
  }

  ChannelFeeReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelFeeReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelFeeReport& from);
  void MergeFrom(const ChannelFeeReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelFeeReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelFeeReport";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelPointFieldNumber = 1,
    kBaseFeeMsatFieldNumber = 2,
    kFeePerMilFieldNumber = 3,
    kFeeRateFieldNumber = 4,
    kChanIdFieldNumber = 5,
  };
  // string channel_point = 1;
  void clear_channel_point();
  const std::string& channel_point() const;
  void set_channel_point(const std::string& value);
  void set_channel_point(std::string&& value);
  void set_channel_point(const char* value);
  void set_channel_point(const char* value, size_t size);
  std::string* mutable_channel_point();
  std::string* release_channel_point();
  void set_allocated_channel_point(std::string* channel_point);
  private:
  const std::string& _internal_channel_point() const;
  void _internal_set_channel_point(const std::string& value);
  std::string* _internal_mutable_channel_point();
  public:

  // int64 base_fee_msat = 2;
  void clear_base_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 base_fee_msat() const;
  void set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_base_fee_msat() const;
  void _internal_set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_per_mil = 3;
  void clear_fee_per_mil();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_mil() const;
  void set_fee_per_mil(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_per_mil() const;
  void _internal_set_fee_per_mil(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double fee_rate = 4;
  void clear_fee_rate();
  double fee_rate() const;
  void set_fee_rate(double value);
  private:
  double _internal_fee_rate() const;
  void _internal_set_fee_rate(double value);
  public:

  // uint64 chan_id = 5 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelFeeReport)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 base_fee_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_per_mil_;
  double fee_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class FeeReportResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.FeeReportResponse) */ {
 public:
  FeeReportResponse();
  virtual ~FeeReportResponse();

  FeeReportResponse(const FeeReportResponse& from);
  FeeReportResponse(FeeReportResponse&& from) noexcept
    : FeeReportResponse() {
    *this = ::std::move(from);
  }

  inline FeeReportResponse& operator=(const FeeReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeeReportResponse& operator=(FeeReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeeReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeeReportResponse* internal_default_instance() {
    return reinterpret_cast<const FeeReportResponse*>(
               &_FeeReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(FeeReportResponse& a, FeeReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FeeReportResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeeReportResponse* New() const final {
    return CreateMaybeMessage<FeeReportResponse>(nullptr);
  }

  FeeReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeeReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeeReportResponse& from);
  void MergeFrom(const FeeReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeeReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.FeeReportResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFeesFieldNumber = 1,
    kDayFeeSumFieldNumber = 2,
    kWeekFeeSumFieldNumber = 3,
    kMonthFeeSumFieldNumber = 4,
  };
  // repeated .lnrpc.ChannelFeeReport channel_fees = 1;
  int channel_fees_size() const;
  private:
  int _internal_channel_fees_size() const;
  public:
  void clear_channel_fees();
  ::lnrpc::ChannelFeeReport* mutable_channel_fees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelFeeReport >*
      mutable_channel_fees();
  private:
  const ::lnrpc::ChannelFeeReport& _internal_channel_fees(int index) const;
  ::lnrpc::ChannelFeeReport* _internal_add_channel_fees();
  public:
  const ::lnrpc::ChannelFeeReport& channel_fees(int index) const;
  ::lnrpc::ChannelFeeReport* add_channel_fees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelFeeReport >&
      channel_fees() const;

  // uint64 day_fee_sum = 2;
  void clear_day_fee_sum();
  ::PROTOBUF_NAMESPACE_ID::uint64 day_fee_sum() const;
  void set_day_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_day_fee_sum() const;
  void _internal_set_day_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 week_fee_sum = 3;
  void clear_week_fee_sum();
  ::PROTOBUF_NAMESPACE_ID::uint64 week_fee_sum() const;
  void set_week_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_week_fee_sum() const;
  void _internal_set_week_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 month_fee_sum = 4;
  void clear_month_fee_sum();
  ::PROTOBUF_NAMESPACE_ID::uint64 month_fee_sum() const;
  void set_month_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_month_fee_sum() const;
  void _internal_set_month_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.FeeReportResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelFeeReport > channel_fees_;
  ::PROTOBUF_NAMESPACE_ID::uint64 day_fee_sum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 week_fee_sum_;
  ::PROTOBUF_NAMESPACE_ID::uint64 month_fee_sum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PolicyUpdateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PolicyUpdateRequest) */ {
 public:
  PolicyUpdateRequest();
  virtual ~PolicyUpdateRequest();

  PolicyUpdateRequest(const PolicyUpdateRequest& from);
  PolicyUpdateRequest(PolicyUpdateRequest&& from) noexcept
    : PolicyUpdateRequest() {
    *this = ::std::move(from);
  }

  inline PolicyUpdateRequest& operator=(const PolicyUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUpdateRequest& operator=(PolicyUpdateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyUpdateRequest& default_instance();

  enum ScopeCase {
    kGlobal = 1,
    kChanPoint = 2,
    SCOPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyUpdateRequest*>(
               &_PolicyUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(PolicyUpdateRequest& a, PolicyUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyUpdateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyUpdateRequest* New() const final {
    return CreateMaybeMessage<PolicyUpdateRequest>(nullptr);
  }

  PolicyUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyUpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyUpdateRequest& from);
  void MergeFrom(const PolicyUpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyUpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PolicyUpdateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFeeMsatFieldNumber = 3,
    kFeeRateFieldNumber = 4,
    kMaxHtlcMsatFieldNumber = 6,
    kTimeLockDeltaFieldNumber = 5,
    kMinHtlcMsatSpecifiedFieldNumber = 8,
    kMinHtlcMsatFieldNumber = 7,
    kGlobalFieldNumber = 1,
    kChanPointFieldNumber = 2,
  };
  // int64 base_fee_msat = 3;
  void clear_base_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 base_fee_msat() const;
  void set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_base_fee_msat() const;
  void _internal_set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double fee_rate = 4;
  void clear_fee_rate();
  double fee_rate() const;
  void set_fee_rate(double value);
  private:
  double _internal_fee_rate() const;
  void _internal_set_fee_rate(double value);
  public:

  // uint64 max_htlc_msat = 6;
  void clear_max_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 max_htlc_msat() const;
  void set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_max_htlc_msat() const;
  void _internal_set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 time_lock_delta = 5;
  void clear_time_lock_delta();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta() const;
  void set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_lock_delta() const;
  void _internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool min_htlc_msat_specified = 8;
  void clear_min_htlc_msat_specified();
  bool min_htlc_msat_specified() const;
  void set_min_htlc_msat_specified(bool value);
  private:
  bool _internal_min_htlc_msat_specified() const;
  void _internal_set_min_htlc_msat_specified(bool value);
  public:

  // uint64 min_htlc_msat = 7;
  void clear_min_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_msat() const;
  void set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_min_htlc_msat() const;
  void _internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool global = 1;
  private:
  bool _internal_has_global() const;
  public:
  void clear_global();
  bool global() const;
  void set_global(bool value);
  private:
  bool _internal_global() const;
  void _internal_set_global(bool value);
  public:

  // .lnrpc.ChannelPoint chan_point = 2;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  void clear_scope();
  ScopeCase scope_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.PolicyUpdateRequest)
 private:
  class _Internal;
  void set_has_global();
  void set_has_chan_point();

  inline bool has_scope() const;
  inline void clear_has_scope();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 base_fee_msat_;
  double fee_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 max_htlc_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta_;
  bool min_htlc_msat_specified_;
  ::PROTOBUF_NAMESPACE_ID::uint64 min_htlc_msat_;
  union ScopeUnion {
    ScopeUnion() {}
    bool global_;
    ::lnrpc::ChannelPoint* chan_point_;
  } scope_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class PolicyUpdateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.PolicyUpdateResponse) */ {
 public:
  PolicyUpdateResponse();
  virtual ~PolicyUpdateResponse();

  PolicyUpdateResponse(const PolicyUpdateResponse& from);
  PolicyUpdateResponse(PolicyUpdateResponse&& from) noexcept
    : PolicyUpdateResponse() {
    *this = ::std::move(from);
  }

  inline PolicyUpdateResponse& operator=(const PolicyUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyUpdateResponse& operator=(PolicyUpdateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyUpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyUpdateResponse*>(
               &_PolicyUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(PolicyUpdateResponse& a, PolicyUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyUpdateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyUpdateResponse* New() const final {
    return CreateMaybeMessage<PolicyUpdateResponse>(nullptr);
  }

  PolicyUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyUpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyUpdateResponse& from);
  void MergeFrom(const PolicyUpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyUpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.PolicyUpdateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.PolicyUpdateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ForwardingHistoryRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ForwardingHistoryRequest) */ {
 public:
  ForwardingHistoryRequest();
  virtual ~ForwardingHistoryRequest();

  ForwardingHistoryRequest(const ForwardingHistoryRequest& from);
  ForwardingHistoryRequest(ForwardingHistoryRequest&& from) noexcept
    : ForwardingHistoryRequest() {
    *this = ::std::move(from);
  }

  inline ForwardingHistoryRequest& operator=(const ForwardingHistoryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardingHistoryRequest& operator=(ForwardingHistoryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardingHistoryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardingHistoryRequest* internal_default_instance() {
    return reinterpret_cast<const ForwardingHistoryRequest*>(
               &_ForwardingHistoryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(ForwardingHistoryRequest& a, ForwardingHistoryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardingHistoryRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardingHistoryRequest* New() const final {
    return CreateMaybeMessage<ForwardingHistoryRequest>(nullptr);
  }

  ForwardingHistoryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardingHistoryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardingHistoryRequest& from);
  void MergeFrom(const ForwardingHistoryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardingHistoryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ForwardingHistoryRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kIndexOffsetFieldNumber = 3,
    kNumMaxEventsFieldNumber = 4,
  };
  // uint64 start_time = 1;
  void clear_start_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time() const;
  void set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_start_time() const;
  void _internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 end_time = 2;
  void clear_end_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time() const;
  void set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_end_time() const;
  void _internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 index_offset = 3;
  void clear_index_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 index_offset() const;
  void set_index_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index_offset() const;
  void _internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_max_events = 4;
  void clear_num_max_events();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_max_events() const;
  void set_num_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_max_events() const;
  void _internal_set_num_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ForwardingHistoryRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 end_time_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_max_events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ForwardingEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ForwardingEvent) */ {
 public:
  ForwardingEvent();
  virtual ~ForwardingEvent();

  ForwardingEvent(const ForwardingEvent& from);
  ForwardingEvent(ForwardingEvent&& from) noexcept
    : ForwardingEvent() {
    *this = ::std::move(from);
  }

  inline ForwardingEvent& operator=(const ForwardingEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardingEvent& operator=(ForwardingEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardingEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardingEvent* internal_default_instance() {
    return reinterpret_cast<const ForwardingEvent*>(
               &_ForwardingEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(ForwardingEvent& a, ForwardingEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardingEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardingEvent* New() const final {
    return CreateMaybeMessage<ForwardingEvent>(nullptr);
  }

  ForwardingEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardingEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardingEvent& from);
  void MergeFrom(const ForwardingEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardingEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ForwardingEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kChanIdInFieldNumber = 2,
    kChanIdOutFieldNumber = 4,
    kAmtInFieldNumber = 5,
    kAmtOutFieldNumber = 6,
    kFeeFieldNumber = 7,
    kFeeMsatFieldNumber = 8,
    kAmtInMsatFieldNumber = 9,
    kAmtOutMsatFieldNumber = 10,
    kTimestampNsFieldNumber = 11,
  };
  // uint64 timestamp = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_timestamp();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  PROTOBUF_DEPRECATED void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chan_id_in = 2 [jstype = JS_STRING];
  void clear_chan_id_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_in() const;
  void set_chan_id_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id_in() const;
  void _internal_set_chan_id_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 chan_id_out = 4 [jstype = JS_STRING];
  void clear_chan_id_out();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_out() const;
  void set_chan_id_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id_out() const;
  void _internal_set_chan_id_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amt_in = 5;
  void clear_amt_in();
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_in() const;
  void set_amt_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amt_in() const;
  void _internal_set_amt_in(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amt_out = 6;
  void clear_amt_out();
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_out() const;
  void set_amt_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amt_out() const;
  void _internal_set_amt_out(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee = 7;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 fee_msat = 8;
  void clear_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_msat() const;
  void set_fee_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fee_msat() const;
  void _internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amt_in_msat = 9;
  void clear_amt_in_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_in_msat() const;
  void set_amt_in_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amt_in_msat() const;
  void _internal_set_amt_in_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 amt_out_msat = 10;
  void clear_amt_out_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_out_msat() const;
  void set_amt_out_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amt_out_msat() const;
  void _internal_set_amt_out_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp_ns = 11;
  void clear_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns() const;
  void set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ns() const;
  void _internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ForwardingEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_out_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_in_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_out_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fee_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_in_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amt_out_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ForwardingHistoryResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ForwardingHistoryResponse) */ {
 public:
  ForwardingHistoryResponse();
  virtual ~ForwardingHistoryResponse();

  ForwardingHistoryResponse(const ForwardingHistoryResponse& from);
  ForwardingHistoryResponse(ForwardingHistoryResponse&& from) noexcept
    : ForwardingHistoryResponse() {
    *this = ::std::move(from);
  }

  inline ForwardingHistoryResponse& operator=(const ForwardingHistoryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardingHistoryResponse& operator=(ForwardingHistoryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardingHistoryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardingHistoryResponse* internal_default_instance() {
    return reinterpret_cast<const ForwardingHistoryResponse*>(
               &_ForwardingHistoryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(ForwardingHistoryResponse& a, ForwardingHistoryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardingHistoryResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardingHistoryResponse* New() const final {
    return CreateMaybeMessage<ForwardingHistoryResponse>(nullptr);
  }

  ForwardingHistoryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardingHistoryResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardingHistoryResponse& from);
  void MergeFrom(const ForwardingHistoryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardingHistoryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ForwardingHistoryResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardingEventsFieldNumber = 1,
    kLastOffsetIndexFieldNumber = 2,
  };
  // repeated .lnrpc.ForwardingEvent forwarding_events = 1;
  int forwarding_events_size() const;
  private:
  int _internal_forwarding_events_size() const;
  public:
  void clear_forwarding_events();
  ::lnrpc::ForwardingEvent* mutable_forwarding_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ForwardingEvent >*
      mutable_forwarding_events();
  private:
  const ::lnrpc::ForwardingEvent& _internal_forwarding_events(int index) const;
  ::lnrpc::ForwardingEvent* _internal_add_forwarding_events();
  public:
  const ::lnrpc::ForwardingEvent& forwarding_events(int index) const;
  ::lnrpc::ForwardingEvent* add_forwarding_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ForwardingEvent >&
      forwarding_events() const;

  // uint32 last_offset_index = 2;
  void clear_last_offset_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 last_offset_index() const;
  void set_last_offset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_last_offset_index() const;
  void _internal_set_last_offset_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ForwardingHistoryResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ForwardingEvent > forwarding_events_;
  ::PROTOBUF_NAMESPACE_ID::uint32 last_offset_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ExportChannelBackupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ExportChannelBackupRequest) */ {
 public:
  ExportChannelBackupRequest();
  virtual ~ExportChannelBackupRequest();

  ExportChannelBackupRequest(const ExportChannelBackupRequest& from);
  ExportChannelBackupRequest(ExportChannelBackupRequest&& from) noexcept
    : ExportChannelBackupRequest() {
    *this = ::std::move(from);
  }

  inline ExportChannelBackupRequest& operator=(const ExportChannelBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExportChannelBackupRequest& operator=(ExportChannelBackupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExportChannelBackupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportChannelBackupRequest* internal_default_instance() {
    return reinterpret_cast<const ExportChannelBackupRequest*>(
               &_ExportChannelBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(ExportChannelBackupRequest& a, ExportChannelBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ExportChannelBackupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExportChannelBackupRequest* New() const final {
    return CreateMaybeMessage<ExportChannelBackupRequest>(nullptr);
  }

  ExportChannelBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExportChannelBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExportChannelBackupRequest& from);
  void MergeFrom(const ExportChannelBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportChannelBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ExportChannelBackupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanPointFieldNumber = 1,
  };
  // .lnrpc.ChannelPoint chan_point = 1;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ExportChannelBackupRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::ChannelPoint* chan_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelBackup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelBackup) */ {
 public:
  ChannelBackup();
  virtual ~ChannelBackup();

  ChannelBackup(const ChannelBackup& from);
  ChannelBackup(ChannelBackup&& from) noexcept
    : ChannelBackup() {
    *this = ::std::move(from);
  }

  inline ChannelBackup& operator=(const ChannelBackup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBackup& operator=(ChannelBackup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBackup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBackup* internal_default_instance() {
    return reinterpret_cast<const ChannelBackup*>(
               &_ChannelBackup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(ChannelBackup& a, ChannelBackup& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBackup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBackup* New() const final {
    return CreateMaybeMessage<ChannelBackup>(nullptr);
  }

  ChannelBackup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBackup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBackup& from);
  void MergeFrom(const ChannelBackup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBackup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelBackup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanBackupFieldNumber = 2,
    kChanPointFieldNumber = 1,
  };
  // bytes chan_backup = 2;
  void clear_chan_backup();
  const std::string& chan_backup() const;
  void set_chan_backup(const std::string& value);
  void set_chan_backup(std::string&& value);
  void set_chan_backup(const char* value);
  void set_chan_backup(const void* value, size_t size);
  std::string* mutable_chan_backup();
  std::string* release_chan_backup();
  void set_allocated_chan_backup(std::string* chan_backup);
  private:
  const std::string& _internal_chan_backup() const;
  void _internal_set_chan_backup(const std::string& value);
  std::string* _internal_mutable_chan_backup();
  public:

  // .lnrpc.ChannelPoint chan_point = 1;
  bool has_chan_point() const;
  private:
  bool _internal_has_chan_point() const;
  public:
  void clear_chan_point();
  const ::lnrpc::ChannelPoint& chan_point() const;
  ::lnrpc::ChannelPoint* release_chan_point();
  ::lnrpc::ChannelPoint* mutable_chan_point();
  void set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point);
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_point() const;
  ::lnrpc::ChannelPoint* _internal_mutable_chan_point();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelBackup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chan_backup_;
  ::lnrpc::ChannelPoint* chan_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MultiChanBackup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.MultiChanBackup) */ {
 public:
  MultiChanBackup();
  virtual ~MultiChanBackup();

  MultiChanBackup(const MultiChanBackup& from);
  MultiChanBackup(MultiChanBackup&& from) noexcept
    : MultiChanBackup() {
    *this = ::std::move(from);
  }

  inline MultiChanBackup& operator=(const MultiChanBackup& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiChanBackup& operator=(MultiChanBackup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MultiChanBackup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MultiChanBackup* internal_default_instance() {
    return reinterpret_cast<const MultiChanBackup*>(
               &_MultiChanBackup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(MultiChanBackup& a, MultiChanBackup& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiChanBackup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiChanBackup* New() const final {
    return CreateMaybeMessage<MultiChanBackup>(nullptr);
  }

  MultiChanBackup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiChanBackup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiChanBackup& from);
  void MergeFrom(const MultiChanBackup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiChanBackup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.MultiChanBackup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanPointsFieldNumber = 1,
    kMultiChanBackupFieldNumber = 2,
  };
  // repeated .lnrpc.ChannelPoint chan_points = 1;
  int chan_points_size() const;
  private:
  int _internal_chan_points_size() const;
  public:
  void clear_chan_points();
  ::lnrpc::ChannelPoint* mutable_chan_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelPoint >*
      mutable_chan_points();
  private:
  const ::lnrpc::ChannelPoint& _internal_chan_points(int index) const;
  ::lnrpc::ChannelPoint* _internal_add_chan_points();
  public:
  const ::lnrpc::ChannelPoint& chan_points(int index) const;
  ::lnrpc::ChannelPoint* add_chan_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelPoint >&
      chan_points() const;

  // bytes multi_chan_backup = 2;
  void clear_multi_chan_backup();
  const std::string& multi_chan_backup() const;
  void set_multi_chan_backup(const std::string& value);
  void set_multi_chan_backup(std::string&& value);
  void set_multi_chan_backup(const char* value);
  void set_multi_chan_backup(const void* value, size_t size);
  std::string* mutable_multi_chan_backup();
  std::string* release_multi_chan_backup();
  void set_allocated_multi_chan_backup(std::string* multi_chan_backup);
  private:
  const std::string& _internal_multi_chan_backup() const;
  void _internal_set_multi_chan_backup(const std::string& value);
  std::string* _internal_mutable_multi_chan_backup();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.MultiChanBackup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelPoint > chan_points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multi_chan_backup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChanBackupExportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChanBackupExportRequest) */ {
 public:
  ChanBackupExportRequest();
  virtual ~ChanBackupExportRequest();

  ChanBackupExportRequest(const ChanBackupExportRequest& from);
  ChanBackupExportRequest(ChanBackupExportRequest&& from) noexcept
    : ChanBackupExportRequest() {
    *this = ::std::move(from);
  }

  inline ChanBackupExportRequest& operator=(const ChanBackupExportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChanBackupExportRequest& operator=(ChanBackupExportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChanBackupExportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChanBackupExportRequest* internal_default_instance() {
    return reinterpret_cast<const ChanBackupExportRequest*>(
               &_ChanBackupExportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(ChanBackupExportRequest& a, ChanBackupExportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChanBackupExportRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChanBackupExportRequest* New() const final {
    return CreateMaybeMessage<ChanBackupExportRequest>(nullptr);
  }

  ChanBackupExportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChanBackupExportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChanBackupExportRequest& from);
  void MergeFrom(const ChanBackupExportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChanBackupExportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChanBackupExportRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ChanBackupExportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChanBackupSnapshot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChanBackupSnapshot) */ {
 public:
  ChanBackupSnapshot();
  virtual ~ChanBackupSnapshot();

  ChanBackupSnapshot(const ChanBackupSnapshot& from);
  ChanBackupSnapshot(ChanBackupSnapshot&& from) noexcept
    : ChanBackupSnapshot() {
    *this = ::std::move(from);
  }

  inline ChanBackupSnapshot& operator=(const ChanBackupSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChanBackupSnapshot& operator=(ChanBackupSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChanBackupSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChanBackupSnapshot* internal_default_instance() {
    return reinterpret_cast<const ChanBackupSnapshot*>(
               &_ChanBackupSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(ChanBackupSnapshot& a, ChanBackupSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(ChanBackupSnapshot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChanBackupSnapshot* New() const final {
    return CreateMaybeMessage<ChanBackupSnapshot>(nullptr);
  }

  ChanBackupSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChanBackupSnapshot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChanBackupSnapshot& from);
  void MergeFrom(const ChanBackupSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChanBackupSnapshot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChanBackupSnapshot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSingleChanBackupsFieldNumber = 1,
    kMultiChanBackupFieldNumber = 2,
  };
  // .lnrpc.ChannelBackups single_chan_backups = 1;
  bool has_single_chan_backups() const;
  private:
  bool _internal_has_single_chan_backups() const;
  public:
  void clear_single_chan_backups();
  const ::lnrpc::ChannelBackups& single_chan_backups() const;
  ::lnrpc::ChannelBackups* release_single_chan_backups();
  ::lnrpc::ChannelBackups* mutable_single_chan_backups();
  void set_allocated_single_chan_backups(::lnrpc::ChannelBackups* single_chan_backups);
  private:
  const ::lnrpc::ChannelBackups& _internal_single_chan_backups() const;
  ::lnrpc::ChannelBackups* _internal_mutable_single_chan_backups();
  public:

  // .lnrpc.MultiChanBackup multi_chan_backup = 2;
  bool has_multi_chan_backup() const;
  private:
  bool _internal_has_multi_chan_backup() const;
  public:
  void clear_multi_chan_backup();
  const ::lnrpc::MultiChanBackup& multi_chan_backup() const;
  ::lnrpc::MultiChanBackup* release_multi_chan_backup();
  ::lnrpc::MultiChanBackup* mutable_multi_chan_backup();
  void set_allocated_multi_chan_backup(::lnrpc::MultiChanBackup* multi_chan_backup);
  private:
  const ::lnrpc::MultiChanBackup& _internal_multi_chan_backup() const;
  ::lnrpc::MultiChanBackup* _internal_mutable_multi_chan_backup();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChanBackupSnapshot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::ChannelBackups* single_chan_backups_;
  ::lnrpc::MultiChanBackup* multi_chan_backup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelBackups :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelBackups) */ {
 public:
  ChannelBackups();
  virtual ~ChannelBackups();

  ChannelBackups(const ChannelBackups& from);
  ChannelBackups(ChannelBackups&& from) noexcept
    : ChannelBackups() {
    *this = ::std::move(from);
  }

  inline ChannelBackups& operator=(const ChannelBackups& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBackups& operator=(ChannelBackups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBackups& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBackups* internal_default_instance() {
    return reinterpret_cast<const ChannelBackups*>(
               &_ChannelBackups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(ChannelBackups& a, ChannelBackups& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBackups* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBackups* New() const final {
    return CreateMaybeMessage<ChannelBackups>(nullptr);
  }

  ChannelBackups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBackups>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBackups& from);
  void MergeFrom(const ChannelBackups& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBackups* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelBackups";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanBackupsFieldNumber = 1,
  };
  // repeated .lnrpc.ChannelBackup chan_backups = 1;
  int chan_backups_size() const;
  private:
  int _internal_chan_backups_size() const;
  public:
  void clear_chan_backups();
  ::lnrpc::ChannelBackup* mutable_chan_backups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelBackup >*
      mutable_chan_backups();
  private:
  const ::lnrpc::ChannelBackup& _internal_chan_backups(int index) const;
  ::lnrpc::ChannelBackup* _internal_add_chan_backups();
  public:
  const ::lnrpc::ChannelBackup& chan_backups(int index) const;
  ::lnrpc::ChannelBackup* add_chan_backups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelBackup >&
      chan_backups() const;

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelBackups)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelBackup > chan_backups_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RestoreChanBackupRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.RestoreChanBackupRequest) */ {
 public:
  RestoreChanBackupRequest();
  virtual ~RestoreChanBackupRequest();

  RestoreChanBackupRequest(const RestoreChanBackupRequest& from);
  RestoreChanBackupRequest(RestoreChanBackupRequest&& from) noexcept
    : RestoreChanBackupRequest() {
    *this = ::std::move(from);
  }

  inline RestoreChanBackupRequest& operator=(const RestoreChanBackupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreChanBackupRequest& operator=(RestoreChanBackupRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreChanBackupRequest& default_instance();

  enum BackupCase {
    kChanBackups = 1,
    kMultiChanBackup = 2,
    BACKUP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreChanBackupRequest* internal_default_instance() {
    return reinterpret_cast<const RestoreChanBackupRequest*>(
               &_RestoreChanBackupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(RestoreChanBackupRequest& a, RestoreChanBackupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreChanBackupRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreChanBackupRequest* New() const final {
    return CreateMaybeMessage<RestoreChanBackupRequest>(nullptr);
  }

  RestoreChanBackupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreChanBackupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreChanBackupRequest& from);
  void MergeFrom(const RestoreChanBackupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreChanBackupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.RestoreChanBackupRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChanBackupsFieldNumber = 1,
    kMultiChanBackupFieldNumber = 2,
  };
  // .lnrpc.ChannelBackups chan_backups = 1;
  bool has_chan_backups() const;
  private:
  bool _internal_has_chan_backups() const;
  public:
  void clear_chan_backups();
  const ::lnrpc::ChannelBackups& chan_backups() const;
  ::lnrpc::ChannelBackups* release_chan_backups();
  ::lnrpc::ChannelBackups* mutable_chan_backups();
  void set_allocated_chan_backups(::lnrpc::ChannelBackups* chan_backups);
  private:
  const ::lnrpc::ChannelBackups& _internal_chan_backups() const;
  ::lnrpc::ChannelBackups* _internal_mutable_chan_backups();
  public:

  // bytes multi_chan_backup = 2;
  private:
  bool _internal_has_multi_chan_backup() const;
  public:
  void clear_multi_chan_backup();
  const std::string& multi_chan_backup() const;
  void set_multi_chan_backup(const std::string& value);
  void set_multi_chan_backup(std::string&& value);
  void set_multi_chan_backup(const char* value);
  void set_multi_chan_backup(const void* value, size_t size);
  std::string* mutable_multi_chan_backup();
  std::string* release_multi_chan_backup();
  void set_allocated_multi_chan_backup(std::string* multi_chan_backup);
  private:
  const std::string& _internal_multi_chan_backup() const;
  void _internal_set_multi_chan_backup(const std::string& value);
  std::string* _internal_mutable_multi_chan_backup();
  public:

  void clear_backup();
  BackupCase backup_case() const;
  // @@protoc_insertion_point(class_scope:lnrpc.RestoreChanBackupRequest)
 private:
  class _Internal;
  void set_has_chan_backups();
  void set_has_multi_chan_backup();

  inline bool has_backup() const;
  inline void clear_has_backup();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union BackupUnion {
    BackupUnion() {}
    ::lnrpc::ChannelBackups* chan_backups_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr multi_chan_backup_;
  } backup_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RestoreBackupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.RestoreBackupResponse) */ {
 public:
  RestoreBackupResponse();
  virtual ~RestoreBackupResponse();

  RestoreBackupResponse(const RestoreBackupResponse& from);
  RestoreBackupResponse(RestoreBackupResponse&& from) noexcept
    : RestoreBackupResponse() {
    *this = ::std::move(from);
  }

  inline RestoreBackupResponse& operator=(const RestoreBackupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RestoreBackupResponse& operator=(RestoreBackupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RestoreBackupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RestoreBackupResponse* internal_default_instance() {
    return reinterpret_cast<const RestoreBackupResponse*>(
               &_RestoreBackupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(RestoreBackupResponse& a, RestoreBackupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RestoreBackupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RestoreBackupResponse* New() const final {
    return CreateMaybeMessage<RestoreBackupResponse>(nullptr);
  }

  RestoreBackupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RestoreBackupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RestoreBackupResponse& from);
  void MergeFrom(const RestoreBackupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RestoreBackupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.RestoreBackupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.RestoreBackupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelBackupSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelBackupSubscription) */ {
 public:
  ChannelBackupSubscription();
  virtual ~ChannelBackupSubscription();

  ChannelBackupSubscription(const ChannelBackupSubscription& from);
  ChannelBackupSubscription(ChannelBackupSubscription&& from) noexcept
    : ChannelBackupSubscription() {
    *this = ::std::move(from);
  }

  inline ChannelBackupSubscription& operator=(const ChannelBackupSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelBackupSubscription& operator=(ChannelBackupSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelBackupSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelBackupSubscription* internal_default_instance() {
    return reinterpret_cast<const ChannelBackupSubscription*>(
               &_ChannelBackupSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(ChannelBackupSubscription& a, ChannelBackupSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelBackupSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelBackupSubscription* New() const final {
    return CreateMaybeMessage<ChannelBackupSubscription>(nullptr);
  }

  ChannelBackupSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelBackupSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelBackupSubscription& from);
  void MergeFrom(const ChannelBackupSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelBackupSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelBackupSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelBackupSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class VerifyChanBackupResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.VerifyChanBackupResponse) */ {
 public:
  VerifyChanBackupResponse();
  virtual ~VerifyChanBackupResponse();

  VerifyChanBackupResponse(const VerifyChanBackupResponse& from);
  VerifyChanBackupResponse(VerifyChanBackupResponse&& from) noexcept
    : VerifyChanBackupResponse() {
    *this = ::std::move(from);
  }

  inline VerifyChanBackupResponse& operator=(const VerifyChanBackupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyChanBackupResponse& operator=(VerifyChanBackupResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VerifyChanBackupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerifyChanBackupResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyChanBackupResponse*>(
               &_VerifyChanBackupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(VerifyChanBackupResponse& a, VerifyChanBackupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyChanBackupResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VerifyChanBackupResponse* New() const final {
    return CreateMaybeMessage<VerifyChanBackupResponse>(nullptr);
  }

  VerifyChanBackupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VerifyChanBackupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VerifyChanBackupResponse& from);
  void MergeFrom(const VerifyChanBackupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyChanBackupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.VerifyChanBackupResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.VerifyChanBackupResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MacaroonPermission :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.MacaroonPermission) */ {
 public:
  MacaroonPermission();
  virtual ~MacaroonPermission();

  MacaroonPermission(const MacaroonPermission& from);
  MacaroonPermission(MacaroonPermission&& from) noexcept
    : MacaroonPermission() {
    *this = ::std::move(from);
  }

  inline MacaroonPermission& operator=(const MacaroonPermission& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacaroonPermission& operator=(MacaroonPermission&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacaroonPermission& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacaroonPermission* internal_default_instance() {
    return reinterpret_cast<const MacaroonPermission*>(
               &_MacaroonPermission_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(MacaroonPermission& a, MacaroonPermission& b) {
    a.Swap(&b);
  }
  inline void Swap(MacaroonPermission* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacaroonPermission* New() const final {
    return CreateMaybeMessage<MacaroonPermission>(nullptr);
  }

  MacaroonPermission* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacaroonPermission>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacaroonPermission& from);
  void MergeFrom(const MacaroonPermission& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacaroonPermission* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.MacaroonPermission";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // string action = 2;
  void clear_action();
  const std::string& action() const;
  void set_action(const std::string& value);
  void set_action(std::string&& value);
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  std::string* mutable_action();
  std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.MacaroonPermission)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BakeMacaroonRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.BakeMacaroonRequest) */ {
 public:
  BakeMacaroonRequest();
  virtual ~BakeMacaroonRequest();

  BakeMacaroonRequest(const BakeMacaroonRequest& from);
  BakeMacaroonRequest(BakeMacaroonRequest&& from) noexcept
    : BakeMacaroonRequest() {
    *this = ::std::move(from);
  }

  inline BakeMacaroonRequest& operator=(const BakeMacaroonRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BakeMacaroonRequest& operator=(BakeMacaroonRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BakeMacaroonRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BakeMacaroonRequest* internal_default_instance() {
    return reinterpret_cast<const BakeMacaroonRequest*>(
               &_BakeMacaroonRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(BakeMacaroonRequest& a, BakeMacaroonRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BakeMacaroonRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BakeMacaroonRequest* New() const final {
    return CreateMaybeMessage<BakeMacaroonRequest>(nullptr);
  }

  BakeMacaroonRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BakeMacaroonRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BakeMacaroonRequest& from);
  void MergeFrom(const BakeMacaroonRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BakeMacaroonRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.BakeMacaroonRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
    kRootKeyIdFieldNumber = 2,
  };
  // repeated .lnrpc.MacaroonPermission permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::lnrpc::MacaroonPermission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >*
      mutable_permissions();
  private:
  const ::lnrpc::MacaroonPermission& _internal_permissions(int index) const;
  ::lnrpc::MacaroonPermission* _internal_add_permissions();
  public:
  const ::lnrpc::MacaroonPermission& permissions(int index) const;
  ::lnrpc::MacaroonPermission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >&
      permissions() const;

  // uint64 root_key_id = 2;
  void clear_root_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 root_key_id() const;
  void set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_root_key_id() const;
  void _internal_set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.BakeMacaroonRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission > permissions_;
  ::PROTOBUF_NAMESPACE_ID::uint64 root_key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class BakeMacaroonResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.BakeMacaroonResponse) */ {
 public:
  BakeMacaroonResponse();
  virtual ~BakeMacaroonResponse();

  BakeMacaroonResponse(const BakeMacaroonResponse& from);
  BakeMacaroonResponse(BakeMacaroonResponse&& from) noexcept
    : BakeMacaroonResponse() {
    *this = ::std::move(from);
  }

  inline BakeMacaroonResponse& operator=(const BakeMacaroonResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BakeMacaroonResponse& operator=(BakeMacaroonResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BakeMacaroonResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BakeMacaroonResponse* internal_default_instance() {
    return reinterpret_cast<const BakeMacaroonResponse*>(
               &_BakeMacaroonResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(BakeMacaroonResponse& a, BakeMacaroonResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BakeMacaroonResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BakeMacaroonResponse* New() const final {
    return CreateMaybeMessage<BakeMacaroonResponse>(nullptr);
  }

  BakeMacaroonResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BakeMacaroonResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BakeMacaroonResponse& from);
  void MergeFrom(const BakeMacaroonResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BakeMacaroonResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.BakeMacaroonResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacaroonFieldNumber = 1,
  };
  // string macaroon = 1;
  void clear_macaroon();
  const std::string& macaroon() const;
  void set_macaroon(const std::string& value);
  void set_macaroon(std::string&& value);
  void set_macaroon(const char* value);
  void set_macaroon(const char* value, size_t size);
  std::string* mutable_macaroon();
  std::string* release_macaroon();
  void set_allocated_macaroon(std::string* macaroon);
  private:
  const std::string& _internal_macaroon() const;
  void _internal_set_macaroon(const std::string& value);
  std::string* _internal_mutable_macaroon();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.BakeMacaroonResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaroon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListMacaroonIDsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListMacaroonIDsRequest) */ {
 public:
  ListMacaroonIDsRequest();
  virtual ~ListMacaroonIDsRequest();

  ListMacaroonIDsRequest(const ListMacaroonIDsRequest& from);
  ListMacaroonIDsRequest(ListMacaroonIDsRequest&& from) noexcept
    : ListMacaroonIDsRequest() {
    *this = ::std::move(from);
  }

  inline ListMacaroonIDsRequest& operator=(const ListMacaroonIDsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMacaroonIDsRequest& operator=(ListMacaroonIDsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMacaroonIDsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMacaroonIDsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMacaroonIDsRequest*>(
               &_ListMacaroonIDsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(ListMacaroonIDsRequest& a, ListMacaroonIDsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMacaroonIDsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMacaroonIDsRequest* New() const final {
    return CreateMaybeMessage<ListMacaroonIDsRequest>(nullptr);
  }

  ListMacaroonIDsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMacaroonIDsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMacaroonIDsRequest& from);
  void MergeFrom(const ListMacaroonIDsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMacaroonIDsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListMacaroonIDsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ListMacaroonIDsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListMacaroonIDsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListMacaroonIDsResponse) */ {
 public:
  ListMacaroonIDsResponse();
  virtual ~ListMacaroonIDsResponse();

  ListMacaroonIDsResponse(const ListMacaroonIDsResponse& from);
  ListMacaroonIDsResponse(ListMacaroonIDsResponse&& from) noexcept
    : ListMacaroonIDsResponse() {
    *this = ::std::move(from);
  }

  inline ListMacaroonIDsResponse& operator=(const ListMacaroonIDsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMacaroonIDsResponse& operator=(ListMacaroonIDsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMacaroonIDsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMacaroonIDsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMacaroonIDsResponse*>(
               &_ListMacaroonIDsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(ListMacaroonIDsResponse& a, ListMacaroonIDsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMacaroonIDsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMacaroonIDsResponse* New() const final {
    return CreateMaybeMessage<ListMacaroonIDsResponse>(nullptr);
  }

  ListMacaroonIDsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMacaroonIDsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMacaroonIDsResponse& from);
  void MergeFrom(const ListMacaroonIDsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMacaroonIDsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListMacaroonIDsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootKeyIdsFieldNumber = 1,
  };
  // repeated uint64 root_key_ids = 1;
  int root_key_ids_size() const;
  private:
  int _internal_root_key_ids_size() const;
  public:
  void clear_root_key_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_root_key_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_root_key_ids() const;
  void _internal_add_root_key_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_root_key_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 root_key_ids(int index) const;
  void set_root_key_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_root_key_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      root_key_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_root_key_ids();

  // @@protoc_insertion_point(class_scope:lnrpc.ListMacaroonIDsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > root_key_ids_;
  mutable std::atomic<int> _root_key_ids_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteMacaroonIDRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DeleteMacaroonIDRequest) */ {
 public:
  DeleteMacaroonIDRequest();
  virtual ~DeleteMacaroonIDRequest();

  DeleteMacaroonIDRequest(const DeleteMacaroonIDRequest& from);
  DeleteMacaroonIDRequest(DeleteMacaroonIDRequest&& from) noexcept
    : DeleteMacaroonIDRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMacaroonIDRequest& operator=(const DeleteMacaroonIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMacaroonIDRequest& operator=(DeleteMacaroonIDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMacaroonIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMacaroonIDRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMacaroonIDRequest*>(
               &_DeleteMacaroonIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(DeleteMacaroonIDRequest& a, DeleteMacaroonIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMacaroonIDRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMacaroonIDRequest* New() const final {
    return CreateMaybeMessage<DeleteMacaroonIDRequest>(nullptr);
  }

  DeleteMacaroonIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMacaroonIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMacaroonIDRequest& from);
  void MergeFrom(const DeleteMacaroonIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMacaroonIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DeleteMacaroonIDRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootKeyIdFieldNumber = 1,
  };
  // uint64 root_key_id = 1;
  void clear_root_key_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 root_key_id() const;
  void set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_root_key_id() const;
  void _internal_set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DeleteMacaroonIDRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 root_key_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteMacaroonIDResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.DeleteMacaroonIDResponse) */ {
 public:
  DeleteMacaroonIDResponse();
  virtual ~DeleteMacaroonIDResponse();

  DeleteMacaroonIDResponse(const DeleteMacaroonIDResponse& from);
  DeleteMacaroonIDResponse(DeleteMacaroonIDResponse&& from) noexcept
    : DeleteMacaroonIDResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMacaroonIDResponse& operator=(const DeleteMacaroonIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMacaroonIDResponse& operator=(DeleteMacaroonIDResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMacaroonIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMacaroonIDResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMacaroonIDResponse*>(
               &_DeleteMacaroonIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(DeleteMacaroonIDResponse& a, DeleteMacaroonIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMacaroonIDResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMacaroonIDResponse* New() const final {
    return CreateMaybeMessage<DeleteMacaroonIDResponse>(nullptr);
  }

  DeleteMacaroonIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMacaroonIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMacaroonIDResponse& from);
  void MergeFrom(const DeleteMacaroonIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMacaroonIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.DeleteMacaroonIDResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletedFieldNumber = 1,
  };
  // bool deleted = 1;
  void clear_deleted();
  bool deleted() const;
  void set_deleted(bool value);
  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.DeleteMacaroonIDResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool deleted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MacaroonPermissionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.MacaroonPermissionList) */ {
 public:
  MacaroonPermissionList();
  virtual ~MacaroonPermissionList();

  MacaroonPermissionList(const MacaroonPermissionList& from);
  MacaroonPermissionList(MacaroonPermissionList&& from) noexcept
    : MacaroonPermissionList() {
    *this = ::std::move(from);
  }

  inline MacaroonPermissionList& operator=(const MacaroonPermissionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacaroonPermissionList& operator=(MacaroonPermissionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacaroonPermissionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacaroonPermissionList* internal_default_instance() {
    return reinterpret_cast<const MacaroonPermissionList*>(
               &_MacaroonPermissionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(MacaroonPermissionList& a, MacaroonPermissionList& b) {
    a.Swap(&b);
  }
  inline void Swap(MacaroonPermissionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacaroonPermissionList* New() const final {
    return CreateMaybeMessage<MacaroonPermissionList>(nullptr);
  }

  MacaroonPermissionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacaroonPermissionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacaroonPermissionList& from);
  void MergeFrom(const MacaroonPermissionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacaroonPermissionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.MacaroonPermissionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsFieldNumber = 1,
  };
  // repeated .lnrpc.MacaroonPermission permissions = 1;
  int permissions_size() const;
  private:
  int _internal_permissions_size() const;
  public:
  void clear_permissions();
  ::lnrpc::MacaroonPermission* mutable_permissions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >*
      mutable_permissions();
  private:
  const ::lnrpc::MacaroonPermission& _internal_permissions(int index) const;
  ::lnrpc::MacaroonPermission* _internal_add_permissions();
  public:
  const ::lnrpc::MacaroonPermission& permissions(int index) const;
  ::lnrpc::MacaroonPermission* add_permissions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >&
      permissions() const;

  // @@protoc_insertion_point(class_scope:lnrpc.MacaroonPermissionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission > permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPermissionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPermissionsRequest) */ {
 public:
  ListPermissionsRequest();
  virtual ~ListPermissionsRequest();

  ListPermissionsRequest(const ListPermissionsRequest& from);
  ListPermissionsRequest(ListPermissionsRequest&& from) noexcept
    : ListPermissionsRequest() {
    *this = ::std::move(from);
  }

  inline ListPermissionsRequest& operator=(const ListPermissionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPermissionsRequest& operator=(ListPermissionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPermissionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPermissionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListPermissionsRequest*>(
               &_ListPermissionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(ListPermissionsRequest& a, ListPermissionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPermissionsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPermissionsRequest* New() const final {
    return CreateMaybeMessage<ListPermissionsRequest>(nullptr);
  }

  ListPermissionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPermissionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPermissionsRequest& from);
  void MergeFrom(const ListPermissionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPermissionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPermissionsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lnrpc.ListPermissionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ListPermissionsResponse_MethodPermissionsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, 
    std::string, ::lnrpc::MacaroonPermissionList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListPermissionsResponse_MethodPermissionsEntry_DoNotUse, 
    std::string, ::lnrpc::MacaroonPermissionList,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ListPermissionsResponse_MethodPermissionsEntry_DoNotUse();
  ListPermissionsResponse_MethodPermissionsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListPermissionsResponse_MethodPermissionsEntry_DoNotUse& other);
  static const ListPermissionsResponse_MethodPermissionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListPermissionsResponse_MethodPermissionsEntry_DoNotUse*>(&_ListPermissionsResponse_MethodPermissionsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "lnrpc.ListPermissionsResponse.MethodPermissionsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[179];
  }

  public:
};

// -------------------------------------------------------------------

class ListPermissionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ListPermissionsResponse) */ {
 public:
  ListPermissionsResponse();
  virtual ~ListPermissionsResponse();

  ListPermissionsResponse(const ListPermissionsResponse& from);
  ListPermissionsResponse(ListPermissionsResponse&& from) noexcept
    : ListPermissionsResponse() {
    *this = ::std::move(from);
  }

  inline ListPermissionsResponse& operator=(const ListPermissionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPermissionsResponse& operator=(ListPermissionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPermissionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPermissionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListPermissionsResponse*>(
               &_ListPermissionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(ListPermissionsResponse& a, ListPermissionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPermissionsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPermissionsResponse* New() const final {
    return CreateMaybeMessage<ListPermissionsResponse>(nullptr);
  }

  ListPermissionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPermissionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPermissionsResponse& from);
  void MergeFrom(const ListPermissionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPermissionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ListPermissionsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMethodPermissionsFieldNumber = 1,
  };
  // map<string, .lnrpc.MacaroonPermissionList> method_permissions = 1;
  int method_permissions_size() const;
  private:
  int _internal_method_permissions_size() const;
  public:
  void clear_method_permissions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >&
      _internal_method_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >*
      _internal_mutable_method_permissions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >&
      method_permissions() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >*
      mutable_method_permissions();

  // @@protoc_insertion_point(class_scope:lnrpc.ListPermissionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ListPermissionsResponse_MethodPermissionsEntry_DoNotUse,
      std::string, ::lnrpc::MacaroonPermissionList,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > method_permissions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Failure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Failure) */ {
 public:
  Failure();
  virtual ~Failure();

  Failure(const Failure& from);
  Failure(Failure&& from) noexcept
    : Failure() {
    *this = ::std::move(from);
  }

  inline Failure& operator=(const Failure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Failure& operator=(Failure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Failure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Failure* internal_default_instance() {
    return reinterpret_cast<const Failure*>(
               &_Failure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(Failure& a, Failure& b) {
    a.Swap(&b);
  }
  inline void Swap(Failure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Failure* New() const final {
    return CreateMaybeMessage<Failure>(nullptr);
  }

  Failure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Failure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Failure& from);
  void MergeFrom(const Failure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Failure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Failure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Failure_FailureCode FailureCode;
  static constexpr FailureCode RESERVED =
    Failure_FailureCode_RESERVED;
  static constexpr FailureCode INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS =
    Failure_FailureCode_INCORRECT_OR_UNKNOWN_PAYMENT_DETAILS;
  static constexpr FailureCode INCORRECT_PAYMENT_AMOUNT =
    Failure_FailureCode_INCORRECT_PAYMENT_AMOUNT;
  static constexpr FailureCode FINAL_INCORRECT_CLTV_EXPIRY =
    Failure_FailureCode_FINAL_INCORRECT_CLTV_EXPIRY;
  static constexpr FailureCode FINAL_INCORRECT_HTLC_AMOUNT =
    Failure_FailureCode_FINAL_INCORRECT_HTLC_AMOUNT;
  static constexpr FailureCode FINAL_EXPIRY_TOO_SOON =
    Failure_FailureCode_FINAL_EXPIRY_TOO_SOON;
  static constexpr FailureCode INVALID_REALM =
    Failure_FailureCode_INVALID_REALM;
  static constexpr FailureCode EXPIRY_TOO_SOON =
    Failure_FailureCode_EXPIRY_TOO_SOON;
  static constexpr FailureCode INVALID_ONION_VERSION =
    Failure_FailureCode_INVALID_ONION_VERSION;
  static constexpr FailureCode INVALID_ONION_HMAC =
    Failure_FailureCode_INVALID_ONION_HMAC;
  static constexpr FailureCode INVALID_ONION_KEY =
    Failure_FailureCode_INVALID_ONION_KEY;
  static constexpr FailureCode AMOUNT_BELOW_MINIMUM =
    Failure_FailureCode_AMOUNT_BELOW_MINIMUM;
  static constexpr FailureCode FEE_INSUFFICIENT =
    Failure_FailureCode_FEE_INSUFFICIENT;
  static constexpr FailureCode INCORRECT_CLTV_EXPIRY =
    Failure_FailureCode_INCORRECT_CLTV_EXPIRY;
  static constexpr FailureCode CHANNEL_DISABLED =
    Failure_FailureCode_CHANNEL_DISABLED;
  static constexpr FailureCode TEMPORARY_CHANNEL_FAILURE =
    Failure_FailureCode_TEMPORARY_CHANNEL_FAILURE;
  static constexpr FailureCode REQUIRED_NODE_FEATURE_MISSING =
    Failure_FailureCode_REQUIRED_NODE_FEATURE_MISSING;
  static constexpr FailureCode REQUIRED_CHANNEL_FEATURE_MISSING =
    Failure_FailureCode_REQUIRED_CHANNEL_FEATURE_MISSING;
  static constexpr FailureCode UNKNOWN_NEXT_PEER =
    Failure_FailureCode_UNKNOWN_NEXT_PEER;
  static constexpr FailureCode TEMPORARY_NODE_FAILURE =
    Failure_FailureCode_TEMPORARY_NODE_FAILURE;
  static constexpr FailureCode PERMANENT_NODE_FAILURE =
    Failure_FailureCode_PERMANENT_NODE_FAILURE;
  static constexpr FailureCode PERMANENT_CHANNEL_FAILURE =
    Failure_FailureCode_PERMANENT_CHANNEL_FAILURE;
  static constexpr FailureCode EXPIRY_TOO_FAR =
    Failure_FailureCode_EXPIRY_TOO_FAR;
  static constexpr FailureCode MPP_TIMEOUT =
    Failure_FailureCode_MPP_TIMEOUT;
  static constexpr FailureCode INVALID_ONION_PAYLOAD =
    Failure_FailureCode_INVALID_ONION_PAYLOAD;
  static constexpr FailureCode INTERNAL_FAILURE =
    Failure_FailureCode_INTERNAL_FAILURE;
  static constexpr FailureCode UNKNOWN_FAILURE =
    Failure_FailureCode_UNKNOWN_FAILURE;
  static constexpr FailureCode UNREADABLE_FAILURE =
    Failure_FailureCode_UNREADABLE_FAILURE;
  static inline bool FailureCode_IsValid(int value) {
    return Failure_FailureCode_IsValid(value);
  }
  static constexpr FailureCode FailureCode_MIN =
    Failure_FailureCode_FailureCode_MIN;
  static constexpr FailureCode FailureCode_MAX =
    Failure_FailureCode_FailureCode_MAX;
  static constexpr int FailureCode_ARRAYSIZE =
    Failure_FailureCode_FailureCode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FailureCode_descriptor() {
    return Failure_FailureCode_descriptor();
  }
  template<typename T>
  static inline const std::string& FailureCode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FailureCode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FailureCode_Name.");
    return Failure_FailureCode_Name(enum_t_value);
  }
  static inline bool FailureCode_Parse(const std::string& name,
      FailureCode* value) {
    return Failure_FailureCode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOnionSha256FieldNumber = 5,
    kChannelUpdateFieldNumber = 3,
    kCodeFieldNumber = 1,
    kCltvExpiryFieldNumber = 6,
    kHtlcMsatFieldNumber = 4,
    kFlagsFieldNumber = 7,
    kFailureSourceIndexFieldNumber = 8,
    kHeightFieldNumber = 9,
  };
  // bytes onion_sha_256 = 5;
  void clear_onion_sha_256();
  const std::string& onion_sha_256() const;
  void set_onion_sha_256(const std::string& value);
  void set_onion_sha_256(std::string&& value);
  void set_onion_sha_256(const char* value);
  void set_onion_sha_256(const void* value, size_t size);
  std::string* mutable_onion_sha_256();
  std::string* release_onion_sha_256();
  void set_allocated_onion_sha_256(std::string* onion_sha_256);
  private:
  const std::string& _internal_onion_sha_256() const;
  void _internal_set_onion_sha_256(const std::string& value);
  std::string* _internal_mutable_onion_sha_256();
  public:

  // .lnrpc.ChannelUpdate channel_update = 3;
  bool has_channel_update() const;
  private:
  bool _internal_has_channel_update() const;
  public:
  void clear_channel_update();
  const ::lnrpc::ChannelUpdate& channel_update() const;
  ::lnrpc::ChannelUpdate* release_channel_update();
  ::lnrpc::ChannelUpdate* mutable_channel_update();
  void set_allocated_channel_update(::lnrpc::ChannelUpdate* channel_update);
  private:
  const ::lnrpc::ChannelUpdate& _internal_channel_update() const;
  ::lnrpc::ChannelUpdate* _internal_mutable_channel_update();
  public:

  // .lnrpc.Failure.FailureCode code = 1;
  void clear_code();
  ::lnrpc::Failure_FailureCode code() const;
  void set_code(::lnrpc::Failure_FailureCode value);
  private:
  ::lnrpc::Failure_FailureCode _internal_code() const;
  void _internal_set_code(::lnrpc::Failure_FailureCode value);
  public:

  // uint32 cltv_expiry = 6;
  void clear_cltv_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_expiry() const;
  void set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cltv_expiry() const;
  void _internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 htlc_msat = 4;
  void clear_htlc_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_msat() const;
  void set_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_htlc_msat() const;
  void _internal_set_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 flags = 7;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 failure_source_index = 8;
  void clear_failure_source_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 failure_source_index() const;
  void set_failure_source_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_failure_source_index() const;
  void _internal_set_failure_source_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 9;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Failure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onion_sha_256_;
  ::lnrpc::ChannelUpdate* channel_update_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cltv_expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 failure_source_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ChannelUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.ChannelUpdate) */ {
 public:
  ChannelUpdate();
  virtual ~ChannelUpdate();

  ChannelUpdate(const ChannelUpdate& from);
  ChannelUpdate(ChannelUpdate&& from) noexcept
    : ChannelUpdate() {
    *this = ::std::move(from);
  }

  inline ChannelUpdate& operator=(const ChannelUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelUpdate& operator=(ChannelUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChannelUpdate* internal_default_instance() {
    return reinterpret_cast<const ChannelUpdate*>(
               &_ChannelUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(ChannelUpdate& a, ChannelUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelUpdate* New() const final {
    return CreateMaybeMessage<ChannelUpdate>(nullptr);
  }

  ChannelUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelUpdate& from);
  void MergeFrom(const ChannelUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.ChannelUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignatureFieldNumber = 1,
    kChainHashFieldNumber = 2,
    kExtraOpaqueDataFieldNumber = 12,
    kChanIdFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kChannelFlagsFieldNumber = 5,
    kHtlcMinimumMsatFieldNumber = 7,
    kTimeLockDeltaFieldNumber = 6,
    kBaseFeeFieldNumber = 8,
    kFeeRateFieldNumber = 9,
    kMessageFlagsFieldNumber = 10,
    kHtlcMaximumMsatFieldNumber = 11,
  };
  // bytes signature = 1;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes chain_hash = 2;
  void clear_chain_hash();
  const std::string& chain_hash() const;
  void set_chain_hash(const std::string& value);
  void set_chain_hash(std::string&& value);
  void set_chain_hash(const char* value);
  void set_chain_hash(const void* value, size_t size);
  std::string* mutable_chain_hash();
  std::string* release_chain_hash();
  void set_allocated_chain_hash(std::string* chain_hash);
  private:
  const std::string& _internal_chain_hash() const;
  void _internal_set_chain_hash(const std::string& value);
  std::string* _internal_mutable_chain_hash();
  public:

  // bytes extra_opaque_data = 12;
  void clear_extra_opaque_data();
  const std::string& extra_opaque_data() const;
  void set_extra_opaque_data(const std::string& value);
  void set_extra_opaque_data(std::string&& value);
  void set_extra_opaque_data(const char* value);
  void set_extra_opaque_data(const void* value, size_t size);
  std::string* mutable_extra_opaque_data();
  std::string* release_extra_opaque_data();
  void set_allocated_extra_opaque_data(std::string* extra_opaque_data);
  private:
  const std::string& _internal_extra_opaque_data() const;
  void _internal_set_extra_opaque_data(const std::string& value);
  std::string* _internal_mutable_extra_opaque_data();
  public:

  // uint64 chan_id = 3 [jstype = JS_STRING];
  void clear_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id() const;
  void set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chan_id() const;
  void _internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 timestamp = 4;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 channel_flags = 5;
  void clear_channel_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_flags() const;
  void set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel_flags() const;
  void _internal_set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 htlc_minimum_msat = 7;
  void clear_htlc_minimum_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_minimum_msat() const;
  void set_htlc_minimum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_htlc_minimum_msat() const;
  void _internal_set_htlc_minimum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 time_lock_delta = 6;
  void clear_time_lock_delta();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta() const;
  void set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_lock_delta() const;
  void _internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 base_fee = 8;
  void clear_base_fee();
  ::PROTOBUF_NAMESPACE_ID::uint32 base_fee() const;
  void set_base_fee(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_base_fee() const;
  void _internal_set_base_fee(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 fee_rate = 9;
  void clear_fee_rate();
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_rate() const;
  void set_fee_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fee_rate() const;
  void _internal_set_fee_rate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 message_flags = 10;
  void clear_message_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 message_flags() const;
  void set_message_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_message_flags() const;
  void _internal_set_message_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 htlc_maximum_msat = 11;
  void clear_htlc_maximum_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_maximum_msat() const;
  void set_htlc_maximum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_htlc_maximum_msat() const;
  void _internal_set_htlc_maximum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.ChannelUpdate)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chain_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_opaque_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chan_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_minimum_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_lock_delta_;
  ::PROTOBUF_NAMESPACE_ID::uint32 base_fee_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fee_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 message_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint64 htlc_maximum_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class MacaroonId :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.MacaroonId) */ {
 public:
  MacaroonId();
  virtual ~MacaroonId();

  MacaroonId(const MacaroonId& from);
  MacaroonId(MacaroonId&& from) noexcept
    : MacaroonId() {
    *this = ::std::move(from);
  }

  inline MacaroonId& operator=(const MacaroonId& from) {
    CopyFrom(from);
    return *this;
  }
  inline MacaroonId& operator=(MacaroonId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MacaroonId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MacaroonId* internal_default_instance() {
    return reinterpret_cast<const MacaroonId*>(
               &_MacaroonId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(MacaroonId& a, MacaroonId& b) {
    a.Swap(&b);
  }
  inline void Swap(MacaroonId* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MacaroonId* New() const final {
    return CreateMaybeMessage<MacaroonId>(nullptr);
  }

  MacaroonId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MacaroonId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MacaroonId& from);
  void MergeFrom(const MacaroonId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MacaroonId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.MacaroonId";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 3,
    kNonceFieldNumber = 1,
    kStorageIdFieldNumber = 2,
  };
  // repeated .lnrpc.Op ops = 3;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::lnrpc::Op* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Op >*
      mutable_ops();
  private:
  const ::lnrpc::Op& _internal_ops(int index) const;
  ::lnrpc::Op* _internal_add_ops();
  public:
  const ::lnrpc::Op& ops(int index) const;
  ::lnrpc::Op* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Op >&
      ops() const;

  // bytes nonce = 1;
  void clear_nonce();
  const std::string& nonce() const;
  void set_nonce(const std::string& value);
  void set_nonce(std::string&& value);
  void set_nonce(const char* value);
  void set_nonce(const void* value, size_t size);
  std::string* mutable_nonce();
  std::string* release_nonce();
  void set_allocated_nonce(std::string* nonce);
  private:
  const std::string& _internal_nonce() const;
  void _internal_set_nonce(const std::string& value);
  std::string* _internal_mutable_nonce();
  public:

  // bytes storageId = 2;
  void clear_storageid();
  const std::string& storageid() const;
  void set_storageid(const std::string& value);
  void set_storageid(std::string&& value);
  void set_storageid(const char* value);
  void set_storageid(const void* value, size_t size);
  std::string* mutable_storageid();
  std::string* release_storageid();
  void set_allocated_storageid(std::string* storageid);
  private:
  const std::string& _internal_storageid() const;
  void _internal_set_storageid(const std::string& value);
  std::string* _internal_mutable_storageid();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.MacaroonId)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Op > ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nonce_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storageid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class Op :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lnrpc.Op) */ {
 public:
  Op();
  virtual ~Op();

  Op(const Op& from);
  Op(Op&& from) noexcept
    : Op() {
    *this = ::std::move(from);
  }

  inline Op& operator=(const Op& from) {
    CopyFrom(from);
    return *this;
  }
  inline Op& operator=(Op&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Op& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Op* internal_default_instance() {
    return reinterpret_cast<const Op*>(
               &_Op_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(Op& a, Op& b) {
    a.Swap(&b);
  }
  inline void Swap(Op* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Op* New() const final {
    return CreateMaybeMessage<Op>(nullptr);
  }

  Op* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Op>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Op& from);
  void MergeFrom(const Op& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Op* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lnrpc.Op";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 2,
    kEntityFieldNumber = 1,
  };
  // repeated string actions = 2;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  const std::string& actions(int index) const;
  std::string* mutable_actions(int index);
  void set_actions(int index, const std::string& value);
  void set_actions(int index, std::string&& value);
  void set_actions(int index, const char* value);
  void set_actions(int index, const char* value, size_t size);
  std::string* add_actions();
  void add_actions(const std::string& value);
  void add_actions(std::string&& value);
  void add_actions(const char* value);
  void add_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_actions();
  private:
  const std::string& _internal_actions(int index) const;
  std::string* _internal_add_actions();
  public:

  // string entity = 1;
  void clear_entity();
  const std::string& entity() const;
  void set_entity(const std::string& value);
  void set_entity(std::string&& value);
  void set_entity(const char* value);
  void set_entity(const char* value, size_t size);
  std::string* mutable_entity();
  std::string* release_entity();
  void set_allocated_entity(std::string* entity);
  private:
  const std::string& _internal_entity() const;
  void _internal_set_entity(const std::string& value);
  std::string* _internal_mutable_entity();
  public:

  // @@protoc_insertion_point(class_scope:lnrpc.Op)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Utxo

// .lnrpc.AddressType address_type = 1;
inline void Utxo::clear_address_type() {
  address_type_ = 0;
}
inline ::lnrpc::AddressType Utxo::_internal_address_type() const {
  return static_cast< ::lnrpc::AddressType >(address_type_);
}
inline ::lnrpc::AddressType Utxo::address_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.address_type)
  return _internal_address_type();
}
inline void Utxo::_internal_set_address_type(::lnrpc::AddressType value) {
  
  address_type_ = value;
}
inline void Utxo::set_address_type(::lnrpc::AddressType value) {
  _internal_set_address_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.Utxo.address_type)
}

// string address = 2;
inline void Utxo::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Utxo::address() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.address)
  return _internal_address();
}
inline void Utxo::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.Utxo.address)
}
inline std::string* Utxo::mutable_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Utxo.address)
  return _internal_mutable_address();
}
inline const std::string& Utxo::_internal_address() const {
  return address_.GetNoArena();
}
inline void Utxo::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Utxo::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Utxo.address)
}
inline void Utxo::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Utxo.address)
}
inline void Utxo::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Utxo.address)
}
inline std::string* Utxo::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Utxo::release_address() {
  // @@protoc_insertion_point(field_release:lnrpc.Utxo.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Utxo.address)
}

// int64 amount_sat = 3;
inline void Utxo::clear_amount_sat() {
  amount_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::_internal_amount_sat() const {
  return amount_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::amount_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.amount_sat)
  return _internal_amount_sat();
}
inline void Utxo::_internal_set_amount_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_sat_ = value;
}
inline void Utxo::set_amount_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Utxo.amount_sat)
}

// string pk_script = 4;
inline void Utxo::clear_pk_script() {
  pk_script_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Utxo::pk_script() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.pk_script)
  return _internal_pk_script();
}
inline void Utxo::set_pk_script(const std::string& value) {
  _internal_set_pk_script(value);
  // @@protoc_insertion_point(field_set:lnrpc.Utxo.pk_script)
}
inline std::string* Utxo::mutable_pk_script() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Utxo.pk_script)
  return _internal_mutable_pk_script();
}
inline const std::string& Utxo::_internal_pk_script() const {
  return pk_script_.GetNoArena();
}
inline void Utxo::_internal_set_pk_script(const std::string& value) {
  
  pk_script_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Utxo::set_pk_script(std::string&& value) {
  
  pk_script_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Utxo.pk_script)
}
inline void Utxo::set_pk_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pk_script_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Utxo.pk_script)
}
inline void Utxo::set_pk_script(const char* value, size_t size) {
  
  pk_script_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Utxo.pk_script)
}
inline std::string* Utxo::_internal_mutable_pk_script() {
  
  return pk_script_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Utxo::release_pk_script() {
  // @@protoc_insertion_point(field_release:lnrpc.Utxo.pk_script)
  
  return pk_script_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_pk_script(std::string* pk_script) {
  if (pk_script != nullptr) {
    
  } else {
    
  }
  pk_script_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pk_script);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Utxo.pk_script)
}

// .lnrpc.OutPoint outpoint = 5;
inline bool Utxo::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool Utxo::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void Utxo::clear_outpoint() {
  if (GetArenaNoVirtual() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::lnrpc::OutPoint& Utxo::_internal_outpoint() const {
  const ::lnrpc::OutPoint* p = outpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::OutPoint*>(
      &::lnrpc::_OutPoint_default_instance_);
}
inline const ::lnrpc::OutPoint& Utxo::outpoint() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.outpoint)
  return _internal_outpoint();
}
inline ::lnrpc::OutPoint* Utxo::release_outpoint() {
  // @@protoc_insertion_point(field_release:lnrpc.Utxo.outpoint)
  
  ::lnrpc::OutPoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::lnrpc::OutPoint* Utxo::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::OutPoint>(GetArenaNoVirtual());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::lnrpc::OutPoint* Utxo::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Utxo.outpoint)
  return _internal_mutable_outpoint();
}
inline void Utxo::set_allocated_outpoint(::lnrpc::OutPoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Utxo.outpoint)
}

// int64 confirmations = 6;
inline void Utxo::clear_confirmations() {
  confirmations_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::confirmations() const {
  // @@protoc_insertion_point(field_get:lnrpc.Utxo.confirmations)
  return _internal_confirmations();
}
inline void Utxo::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confirmations_ = value;
}
inline void Utxo::set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:lnrpc.Utxo.confirmations)
}

// -------------------------------------------------------------------

// Transaction

// string tx_hash = 1;
inline void Transaction::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::tx_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.tx_hash)
  return _internal_tx_hash();
}
inline void Transaction::set_tx_hash(const std::string& value) {
  _internal_set_tx_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.tx_hash)
}
inline std::string* Transaction::mutable_tx_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Transaction.tx_hash)
  return _internal_mutable_tx_hash();
}
inline const std::string& Transaction::_internal_tx_hash() const {
  return tx_hash_.GetNoArena();
}
inline void Transaction::_internal_set_tx_hash(const std::string& value) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_tx_hash(std::string&& value) {
  
  tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Transaction.tx_hash)
}
inline void Transaction::set_tx_hash(const char* value, size_t size) {
  
  tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Transaction.tx_hash)
}
inline std::string* Transaction::_internal_mutable_tx_hash() {
  
  return tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_tx_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.Transaction.tx_hash)
  
  return tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_tx_hash(std::string* tx_hash) {
  if (tx_hash != nullptr) {
    
  } else {
    
  }
  tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Transaction.tx_hash)
}

// int64 amount = 2;
inline void Transaction::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.amount)
  return _internal_amount();
}
inline void Transaction::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void Transaction::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.amount)
}

// int32 num_confirmations = 3;
inline void Transaction::clear_num_confirmations() {
  num_confirmations_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_num_confirmations() const {
  return num_confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::num_confirmations() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.num_confirmations)
  return _internal_num_confirmations();
}
inline void Transaction::_internal_set_num_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_confirmations_ = value;
}
inline void Transaction::set_num_confirmations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_confirmations(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.num_confirmations)
}

// string block_hash = 4;
inline void Transaction::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::block_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.block_hash)
  return _internal_block_hash();
}
inline void Transaction::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.block_hash)
}
inline std::string* Transaction::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Transaction.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& Transaction::_internal_block_hash() const {
  return block_hash_.GetNoArena();
}
inline void Transaction::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_block_hash(std::string&& value) {
  
  block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Transaction.block_hash)
}
inline void Transaction::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Transaction.block_hash)
}
inline void Transaction::set_block_hash(const char* value, size_t size) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Transaction.block_hash)
}
inline std::string* Transaction::_internal_mutable_block_hash() {
  
  return block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_block_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.Transaction.block_hash)
  
  return block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Transaction.block_hash)
}

// int32 block_height = 5;
inline void Transaction::clear_block_height() {
  block_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Transaction::block_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.block_height)
  return _internal_block_height();
}
inline void Transaction::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_height_ = value;
}
inline void Transaction::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.block_height)
}

// int64 time_stamp = 6;
inline void Transaction::clear_time_stamp() {
  time_stamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_time_stamp() const {
  return time_stamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::time_stamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.time_stamp)
  return _internal_time_stamp();
}
inline void Transaction::_internal_set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_stamp_ = value;
}
inline void Transaction::set_time_stamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_stamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.time_stamp)
}

// int64 total_fees = 7;
inline void Transaction::clear_total_fees() {
  total_fees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::_internal_total_fees() const {
  return total_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Transaction::total_fees() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.total_fees)
  return _internal_total_fees();
}
inline void Transaction::_internal_set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_fees_ = value;
}
inline void Transaction::set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_fees(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.total_fees)
}

// repeated string dest_addresses = 8;
inline int Transaction::_internal_dest_addresses_size() const {
  return dest_addresses_.size();
}
inline int Transaction::dest_addresses_size() const {
  return _internal_dest_addresses_size();
}
inline void Transaction::clear_dest_addresses() {
  dest_addresses_.Clear();
}
inline std::string* Transaction::add_dest_addresses() {
  // @@protoc_insertion_point(field_add_mutable:lnrpc.Transaction.dest_addresses)
  return _internal_add_dest_addresses();
}
inline const std::string& Transaction::_internal_dest_addresses(int index) const {
  return dest_addresses_.Get(index);
}
inline const std::string& Transaction::dest_addresses(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.dest_addresses)
  return _internal_dest_addresses(index);
}
inline std::string* Transaction::mutable_dest_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Transaction.dest_addresses)
  return dest_addresses_.Mutable(index);
}
inline void Transaction::set_dest_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.dest_addresses)
  dest_addresses_.Mutable(index)->assign(value);
}
inline void Transaction::set_dest_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.dest_addresses)
  dest_addresses_.Mutable(index)->assign(std::move(value));
}
inline void Transaction::set_dest_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dest_addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lnrpc.Transaction.dest_addresses)
}
inline void Transaction::set_dest_addresses(int index, const char* value, size_t size) {
  dest_addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Transaction.dest_addresses)
}
inline std::string* Transaction::_internal_add_dest_addresses() {
  return dest_addresses_.Add();
}
inline void Transaction::add_dest_addresses(const std::string& value) {
  dest_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lnrpc.Transaction.dest_addresses)
}
inline void Transaction::add_dest_addresses(std::string&& value) {
  dest_addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lnrpc.Transaction.dest_addresses)
}
inline void Transaction::add_dest_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  dest_addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lnrpc.Transaction.dest_addresses)
}
inline void Transaction::add_dest_addresses(const char* value, size_t size) {
  dest_addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lnrpc.Transaction.dest_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Transaction::dest_addresses() const {
  // @@protoc_insertion_point(field_list:lnrpc.Transaction.dest_addresses)
  return dest_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Transaction::mutable_dest_addresses() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Transaction.dest_addresses)
  return &dest_addresses_;
}

// string raw_tx_hex = 9;
inline void Transaction::clear_raw_tx_hex() {
  raw_tx_hex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::raw_tx_hex() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.raw_tx_hex)
  return _internal_raw_tx_hex();
}
inline void Transaction::set_raw_tx_hex(const std::string& value) {
  _internal_set_raw_tx_hex(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.raw_tx_hex)
}
inline std::string* Transaction::mutable_raw_tx_hex() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Transaction.raw_tx_hex)
  return _internal_mutable_raw_tx_hex();
}
inline const std::string& Transaction::_internal_raw_tx_hex() const {
  return raw_tx_hex_.GetNoArena();
}
inline void Transaction::_internal_set_raw_tx_hex(const std::string& value) {
  
  raw_tx_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_raw_tx_hex(std::string&& value) {
  
  raw_tx_hex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Transaction.raw_tx_hex)
}
inline void Transaction::set_raw_tx_hex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_tx_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Transaction.raw_tx_hex)
}
inline void Transaction::set_raw_tx_hex(const char* value, size_t size) {
  
  raw_tx_hex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Transaction.raw_tx_hex)
}
inline std::string* Transaction::_internal_mutable_raw_tx_hex() {
  
  return raw_tx_hex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_raw_tx_hex() {
  // @@protoc_insertion_point(field_release:lnrpc.Transaction.raw_tx_hex)
  
  return raw_tx_hex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_raw_tx_hex(std::string* raw_tx_hex) {
  if (raw_tx_hex != nullptr) {
    
  } else {
    
  }
  raw_tx_hex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_tx_hex);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Transaction.raw_tx_hex)
}

// string label = 10;
inline void Transaction::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transaction::label() const {
  // @@protoc_insertion_point(field_get:lnrpc.Transaction.label)
  return _internal_label();
}
inline void Transaction::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:lnrpc.Transaction.label)
}
inline std::string* Transaction::mutable_label() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Transaction.label)
  return _internal_mutable_label();
}
inline const std::string& Transaction::_internal_label() const {
  return label_.GetNoArena();
}
inline void Transaction::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Transaction::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Transaction.label)
}
inline void Transaction::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Transaction.label)
}
inline void Transaction::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Transaction.label)
}
inline std::string* Transaction::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transaction::release_label() {
  // @@protoc_insertion_point(field_release:lnrpc.Transaction.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transaction::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Transaction.label)
}

// -------------------------------------------------------------------

// GetTransactionsRequest

// int32 start_height = 1;
inline void GetTransactionsRequest::clear_start_height() {
  start_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTransactionsRequest::_internal_start_height() const {
  return start_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTransactionsRequest::start_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetTransactionsRequest.start_height)
  return _internal_start_height();
}
inline void GetTransactionsRequest::_internal_set_start_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_height_ = value;
}
inline void GetTransactionsRequest::set_start_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetTransactionsRequest.start_height)
}

// int32 end_height = 2;
inline void GetTransactionsRequest::clear_end_height() {
  end_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTransactionsRequest::_internal_end_height() const {
  return end_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetTransactionsRequest::end_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetTransactionsRequest.end_height)
  return _internal_end_height();
}
inline void GetTransactionsRequest::_internal_set_end_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_height_ = value;
}
inline void GetTransactionsRequest::set_end_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetTransactionsRequest.end_height)
}

// string account = 3;
inline void GetTransactionsRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTransactionsRequest::account() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetTransactionsRequest.account)
  return _internal_account();
}
inline void GetTransactionsRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetTransactionsRequest.account)
}
inline std::string* GetTransactionsRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetTransactionsRequest.account)
  return _internal_mutable_account();
}
inline const std::string& GetTransactionsRequest::_internal_account() const {
  return account_.GetNoArena();
}
inline void GetTransactionsRequest::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTransactionsRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetTransactionsRequest.account)
}
inline void GetTransactionsRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetTransactionsRequest.account)
}
inline void GetTransactionsRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetTransactionsRequest.account)
}
inline std::string* GetTransactionsRequest::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTransactionsRequest::release_account() {
  // @@protoc_insertion_point(field_release:lnrpc.GetTransactionsRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTransactionsRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetTransactionsRequest.account)
}

// -------------------------------------------------------------------

// TransactionDetails

// repeated .lnrpc.Transaction transactions = 1;
inline int TransactionDetails::_internal_transactions_size() const {
  return transactions_.size();
}
inline int TransactionDetails::transactions_size() const {
  return _internal_transactions_size();
}
inline void TransactionDetails::clear_transactions() {
  transactions_.Clear();
}
inline ::lnrpc::Transaction* TransactionDetails::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.TransactionDetails.transactions)
  return transactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Transaction >*
TransactionDetails::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.TransactionDetails.transactions)
  return &transactions_;
}
inline const ::lnrpc::Transaction& TransactionDetails::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const ::lnrpc::Transaction& TransactionDetails::transactions(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.TransactionDetails.transactions)
  return _internal_transactions(index);
}
inline ::lnrpc::Transaction* TransactionDetails::_internal_add_transactions() {
  return transactions_.Add();
}
inline ::lnrpc::Transaction* TransactionDetails::add_transactions() {
  // @@protoc_insertion_point(field_add:lnrpc.TransactionDetails.transactions)
  return _internal_add_transactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Transaction >&
TransactionDetails::transactions() const {
  // @@protoc_insertion_point(field_list:lnrpc.TransactionDetails.transactions)
  return transactions_;
}

// -------------------------------------------------------------------

// FeeLimit

// int64 fixed = 1;
inline bool FeeLimit::_internal_has_fixed() const {
  return limit_case() == kFixed;
}
inline void FeeLimit::set_has_fixed() {
  _oneof_case_[0] = kFixed;
}
inline void FeeLimit::clear_fixed() {
  if (_internal_has_fixed()) {
    limit_.fixed_ = PROTOBUF_LONGLONG(0);
    clear_has_limit();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::_internal_fixed() const {
  if (_internal_has_fixed()) {
    return limit_.fixed_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FeeLimit::_internal_set_fixed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_fixed()) {
    clear_limit();
    set_has_fixed();
  }
  limit_.fixed_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::fixed() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeLimit.fixed)
  return _internal_fixed();
}
inline void FeeLimit::set_fixed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fixed(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeLimit.fixed)
}

// int64 fixed_msat = 3;
inline bool FeeLimit::_internal_has_fixed_msat() const {
  return limit_case() == kFixedMsat;
}
inline void FeeLimit::set_has_fixed_msat() {
  _oneof_case_[0] = kFixedMsat;
}
inline void FeeLimit::clear_fixed_msat() {
  if (_internal_has_fixed_msat()) {
    limit_.fixed_msat_ = PROTOBUF_LONGLONG(0);
    clear_has_limit();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::_internal_fixed_msat() const {
  if (_internal_has_fixed_msat()) {
    return limit_.fixed_msat_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FeeLimit::_internal_set_fixed_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_fixed_msat()) {
    clear_limit();
    set_has_fixed_msat();
  }
  limit_.fixed_msat_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::fixed_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeLimit.fixed_msat)
  return _internal_fixed_msat();
}
inline void FeeLimit::set_fixed_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fixed_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeLimit.fixed_msat)
}

// int64 percent = 2;
inline bool FeeLimit::_internal_has_percent() const {
  return limit_case() == kPercent;
}
inline void FeeLimit::set_has_percent() {
  _oneof_case_[0] = kPercent;
}
inline void FeeLimit::clear_percent() {
  if (_internal_has_percent()) {
    limit_.percent_ = PROTOBUF_LONGLONG(0);
    clear_has_limit();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::_internal_percent() const {
  if (_internal_has_percent()) {
    return limit_.percent_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void FeeLimit::_internal_set_percent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_percent()) {
    clear_limit();
    set_has_percent();
  }
  limit_.percent_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FeeLimit::percent() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeLimit.percent)
  return _internal_percent();
}
inline void FeeLimit::set_percent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_percent(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeLimit.percent)
}

inline bool FeeLimit::has_limit() const {
  return limit_case() != LIMIT_NOT_SET;
}
inline void FeeLimit::clear_has_limit() {
  _oneof_case_[0] = LIMIT_NOT_SET;
}
inline FeeLimit::LimitCase FeeLimit::limit_case() const {
  return FeeLimit::LimitCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SendRequest

// bytes dest = 1;
inline void SendRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::dest() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.dest)
  return _internal_dest();
}
inline void SendRequest::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.dest)
}
inline std::string* SendRequest::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.dest)
  return _internal_mutable_dest();
}
inline const std::string& SendRequest::_internal_dest() const {
  return dest_.GetNoArena();
}
inline void SendRequest::_internal_set_dest(const std::string& value) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_dest(std::string&& value) {
  
  dest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.dest)
}
inline void SendRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.dest)
}
inline void SendRequest::set_dest(const void* value, size_t size) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.dest)
}
inline std::string* SendRequest::_internal_mutable_dest() {
  
  return dest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_dest() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.dest)
  
  return dest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.dest)
}

// string dest_string = 2 [deprecated = true];
inline void SendRequest::clear_dest_string() {
  dest_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::dest_string() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.dest_string)
  return _internal_dest_string();
}
inline void SendRequest::set_dest_string(const std::string& value) {
  _internal_set_dest_string(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.dest_string)
}
inline std::string* SendRequest::mutable_dest_string() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.dest_string)
  return _internal_mutable_dest_string();
}
inline const std::string& SendRequest::_internal_dest_string() const {
  return dest_string_.GetNoArena();
}
inline void SendRequest::_internal_set_dest_string(const std::string& value) {
  
  dest_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_dest_string(std::string&& value) {
  
  dest_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.dest_string)
}
inline void SendRequest::set_dest_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.dest_string)
}
inline void SendRequest::set_dest_string(const char* value, size_t size) {
  
  dest_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.dest_string)
}
inline std::string* SendRequest::_internal_mutable_dest_string() {
  
  return dest_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_dest_string() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.dest_string)
  
  return dest_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_dest_string(std::string* dest_string) {
  if (dest_string != nullptr) {
    
  } else {
    
  }
  dest_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest_string);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.dest_string)
}

// int64 amt = 3;
inline void SendRequest::clear_amt() {
  amt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendRequest::_internal_amt() const {
  return amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendRequest::amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.amt)
  return _internal_amt();
}
inline void SendRequest::_internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_ = value;
}
inline void SendRequest::set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.amt)
}

// int64 amt_msat = 12;
inline void SendRequest::clear_amt_msat() {
  amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendRequest::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendRequest::amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.amt_msat)
  return _internal_amt_msat();
}
inline void SendRequest::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_msat_ = value;
}
inline void SendRequest::set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.amt_msat)
}

// bytes payment_hash = 4;
inline void SendRequest::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::payment_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.payment_hash)
  return _internal_payment_hash();
}
inline void SendRequest::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.payment_hash)
}
inline std::string* SendRequest::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& SendRequest::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void SendRequest::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.payment_hash)
}
inline void SendRequest::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.payment_hash)
}
inline void SendRequest::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.payment_hash)
}
inline std::string* SendRequest::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_payment_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.payment_hash)
}

// string payment_hash_string = 5 [deprecated = true];
inline void SendRequest::clear_payment_hash_string() {
  payment_hash_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::payment_hash_string() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.payment_hash_string)
  return _internal_payment_hash_string();
}
inline void SendRequest::set_payment_hash_string(const std::string& value) {
  _internal_set_payment_hash_string(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.payment_hash_string)
}
inline std::string* SendRequest::mutable_payment_hash_string() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.payment_hash_string)
  return _internal_mutable_payment_hash_string();
}
inline const std::string& SendRequest::_internal_payment_hash_string() const {
  return payment_hash_string_.GetNoArena();
}
inline void SendRequest::_internal_set_payment_hash_string(const std::string& value) {
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_payment_hash_string(std::string&& value) {
  
  payment_hash_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.payment_hash_string)
}
inline void SendRequest::set_payment_hash_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.payment_hash_string)
}
inline void SendRequest::set_payment_hash_string(const char* value, size_t size) {
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.payment_hash_string)
}
inline std::string* SendRequest::_internal_mutable_payment_hash_string() {
  
  return payment_hash_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_payment_hash_string() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.payment_hash_string)
  
  return payment_hash_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_payment_hash_string(std::string* payment_hash_string) {
  if (payment_hash_string != nullptr) {
    
  } else {
    
  }
  payment_hash_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash_string);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.payment_hash_string)
}

// string payment_request = 6;
inline void SendRequest::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::payment_request() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.payment_request)
  return _internal_payment_request();
}
inline void SendRequest::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.payment_request)
}
inline std::string* SendRequest::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& SendRequest::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void SendRequest::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.payment_request)
}
inline void SendRequest::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.payment_request)
}
inline void SendRequest::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.payment_request)
}
inline std::string* SendRequest::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_payment_request() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.payment_request)
}

// int32 final_cltv_delta = 7;
inline void SendRequest::clear_final_cltv_delta() {
  final_cltv_delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendRequest::_internal_final_cltv_delta() const {
  return final_cltv_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendRequest::final_cltv_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.final_cltv_delta)
  return _internal_final_cltv_delta();
}
inline void SendRequest::_internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_cltv_delta_ = value;
}
inline void SendRequest::set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_cltv_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.final_cltv_delta)
}

// .lnrpc.FeeLimit fee_limit = 8;
inline bool SendRequest::_internal_has_fee_limit() const {
  return this != internal_default_instance() && fee_limit_ != nullptr;
}
inline bool SendRequest::has_fee_limit() const {
  return _internal_has_fee_limit();
}
inline void SendRequest::clear_fee_limit() {
  if (GetArenaNoVirtual() == nullptr && fee_limit_ != nullptr) {
    delete fee_limit_;
  }
  fee_limit_ = nullptr;
}
inline const ::lnrpc::FeeLimit& SendRequest::_internal_fee_limit() const {
  const ::lnrpc::FeeLimit* p = fee_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::FeeLimit*>(
      &::lnrpc::_FeeLimit_default_instance_);
}
inline const ::lnrpc::FeeLimit& SendRequest::fee_limit() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.fee_limit)
  return _internal_fee_limit();
}
inline ::lnrpc::FeeLimit* SendRequest::release_fee_limit() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.fee_limit)
  
  ::lnrpc::FeeLimit* temp = fee_limit_;
  fee_limit_ = nullptr;
  return temp;
}
inline ::lnrpc::FeeLimit* SendRequest::_internal_mutable_fee_limit() {
  
  if (fee_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::FeeLimit>(GetArenaNoVirtual());
    fee_limit_ = p;
  }
  return fee_limit_;
}
inline ::lnrpc::FeeLimit* SendRequest::mutable_fee_limit() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.fee_limit)
  return _internal_mutable_fee_limit();
}
inline void SendRequest::set_allocated_fee_limit(::lnrpc::FeeLimit* fee_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fee_limit_;
  }
  if (fee_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_limit, submessage_arena);
    }
    
  } else {
    
  }
  fee_limit_ = fee_limit;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.fee_limit)
}

// uint64 outgoing_chan_id = 9 [jstype = JS_STRING];
inline void SendRequest::clear_outgoing_chan_id() {
  outgoing_chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendRequest::_internal_outgoing_chan_id() const {
  return outgoing_chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendRequest::outgoing_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.outgoing_chan_id)
  return _internal_outgoing_chan_id();
}
inline void SendRequest::_internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_chan_id_ = value;
}
inline void SendRequest::set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.outgoing_chan_id)
}

// bytes last_hop_pubkey = 13;
inline void SendRequest::clear_last_hop_pubkey() {
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::last_hop_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.last_hop_pubkey)
  return _internal_last_hop_pubkey();
}
inline void SendRequest::set_last_hop_pubkey(const std::string& value) {
  _internal_set_last_hop_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.last_hop_pubkey)
}
inline std::string* SendRequest::mutable_last_hop_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.last_hop_pubkey)
  return _internal_mutable_last_hop_pubkey();
}
inline const std::string& SendRequest::_internal_last_hop_pubkey() const {
  return last_hop_pubkey_.GetNoArena();
}
inline void SendRequest::_internal_set_last_hop_pubkey(const std::string& value) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_last_hop_pubkey(std::string&& value) {
  
  last_hop_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.last_hop_pubkey)
}
inline void SendRequest::set_last_hop_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.last_hop_pubkey)
}
inline void SendRequest::set_last_hop_pubkey(const void* value, size_t size) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.last_hop_pubkey)
}
inline std::string* SendRequest::_internal_mutable_last_hop_pubkey() {
  
  return last_hop_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_last_hop_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.last_hop_pubkey)
  
  return last_hop_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_last_hop_pubkey(std::string* last_hop_pubkey) {
  if (last_hop_pubkey != nullptr) {
    
  } else {
    
  }
  last_hop_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_hop_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.last_hop_pubkey)
}

// uint32 cltv_limit = 10;
inline void SendRequest::clear_cltv_limit() {
  cltv_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendRequest::_internal_cltv_limit() const {
  return cltv_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendRequest::cltv_limit() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.cltv_limit)
  return _internal_cltv_limit();
}
inline void SendRequest::_internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cltv_limit_ = value;
}
inline void SendRequest::set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cltv_limit(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.cltv_limit)
}

// map<uint64, bytes> dest_custom_records = 11;
inline int SendRequest::_internal_dest_custom_records_size() const {
  return dest_custom_records_.size();
}
inline int SendRequest::dest_custom_records_size() const {
  return _internal_dest_custom_records_size();
}
inline void SendRequest::clear_dest_custom_records() {
  dest_custom_records_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
SendRequest::_internal_dest_custom_records() const {
  return dest_custom_records_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
SendRequest::dest_custom_records() const {
  // @@protoc_insertion_point(field_map:lnrpc.SendRequest.dest_custom_records)
  return _internal_dest_custom_records();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
SendRequest::_internal_mutable_dest_custom_records() {
  return dest_custom_records_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
SendRequest::mutable_dest_custom_records() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.SendRequest.dest_custom_records)
  return _internal_mutable_dest_custom_records();
}

// bool allow_self_payment = 14;
inline void SendRequest::clear_allow_self_payment() {
  allow_self_payment_ = false;
}
inline bool SendRequest::_internal_allow_self_payment() const {
  return allow_self_payment_;
}
inline bool SendRequest::allow_self_payment() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.allow_self_payment)
  return _internal_allow_self_payment();
}
inline void SendRequest::_internal_set_allow_self_payment(bool value) {
  
  allow_self_payment_ = value;
}
inline void SendRequest::set_allow_self_payment(bool value) {
  _internal_set_allow_self_payment(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.allow_self_payment)
}

// repeated .lnrpc.FeatureBit dest_features = 15;
inline int SendRequest::_internal_dest_features_size() const {
  return dest_features_.size();
}
inline int SendRequest::dest_features_size() const {
  return _internal_dest_features_size();
}
inline void SendRequest::clear_dest_features() {
  dest_features_.Clear();
}
inline ::lnrpc::FeatureBit SendRequest::_internal_dest_features(int index) const {
  return static_cast< ::lnrpc::FeatureBit >(dest_features_.Get(index));
}
inline ::lnrpc::FeatureBit SendRequest::dest_features(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.dest_features)
  return _internal_dest_features(index);
}
inline void SendRequest::set_dest_features(int index, ::lnrpc::FeatureBit value) {
  dest_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.dest_features)
}
inline void SendRequest::_internal_add_dest_features(::lnrpc::FeatureBit value) {
  dest_features_.Add(value);
}
inline void SendRequest::add_dest_features(::lnrpc::FeatureBit value) {
  // @@protoc_insertion_point(field_add:lnrpc.SendRequest.dest_features)
  _internal_add_dest_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SendRequest::dest_features() const {
  // @@protoc_insertion_point(field_list:lnrpc.SendRequest.dest_features)
  return dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SendRequest::_internal_mutable_dest_features() {
  return &dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SendRequest::mutable_dest_features() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.SendRequest.dest_features)
  return _internal_mutable_dest_features();
}

// bytes payment_addr = 16;
inline void SendRequest::clear_payment_addr() {
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendRequest::payment_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendRequest.payment_addr)
  return _internal_payment_addr();
}
inline void SendRequest::set_payment_addr(const std::string& value) {
  _internal_set_payment_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendRequest.payment_addr)
}
inline std::string* SendRequest::mutable_payment_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendRequest.payment_addr)
  return _internal_mutable_payment_addr();
}
inline const std::string& SendRequest::_internal_payment_addr() const {
  return payment_addr_.GetNoArena();
}
inline void SendRequest::_internal_set_payment_addr(const std::string& value) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendRequest::set_payment_addr(std::string&& value) {
  
  payment_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendRequest.payment_addr)
}
inline void SendRequest::set_payment_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendRequest.payment_addr)
}
inline void SendRequest::set_payment_addr(const void* value, size_t size) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendRequest.payment_addr)
}
inline std::string* SendRequest::_internal_mutable_payment_addr() {
  
  return payment_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendRequest::release_payment_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.SendRequest.payment_addr)
  
  return payment_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendRequest::set_allocated_payment_addr(std::string* payment_addr) {
  if (payment_addr != nullptr) {
    
  } else {
    
  }
  payment_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendRequest.payment_addr)
}

// -------------------------------------------------------------------

// SendResponse

// string payment_error = 1;
inline void SendResponse::clear_payment_error() {
  payment_error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendResponse::payment_error() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendResponse.payment_error)
  return _internal_payment_error();
}
inline void SendResponse::set_payment_error(const std::string& value) {
  _internal_set_payment_error(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendResponse.payment_error)
}
inline std::string* SendResponse::mutable_payment_error() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendResponse.payment_error)
  return _internal_mutable_payment_error();
}
inline const std::string& SendResponse::_internal_payment_error() const {
  return payment_error_.GetNoArena();
}
inline void SendResponse::_internal_set_payment_error(const std::string& value) {
  
  payment_error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendResponse::set_payment_error(std::string&& value) {
  
  payment_error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendResponse.payment_error)
}
inline void SendResponse::set_payment_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendResponse.payment_error)
}
inline void SendResponse::set_payment_error(const char* value, size_t size) {
  
  payment_error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendResponse.payment_error)
}
inline std::string* SendResponse::_internal_mutable_payment_error() {
  
  return payment_error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendResponse::release_payment_error() {
  // @@protoc_insertion_point(field_release:lnrpc.SendResponse.payment_error)
  
  return payment_error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendResponse::set_allocated_payment_error(std::string* payment_error) {
  if (payment_error != nullptr) {
    
  } else {
    
  }
  payment_error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_error);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendResponse.payment_error)
}

// bytes payment_preimage = 2;
inline void SendResponse::clear_payment_preimage() {
  payment_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendResponse::payment_preimage() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendResponse.payment_preimage)
  return _internal_payment_preimage();
}
inline void SendResponse::set_payment_preimage(const std::string& value) {
  _internal_set_payment_preimage(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendResponse.payment_preimage)
}
inline std::string* SendResponse::mutable_payment_preimage() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendResponse.payment_preimage)
  return _internal_mutable_payment_preimage();
}
inline const std::string& SendResponse::_internal_payment_preimage() const {
  return payment_preimage_.GetNoArena();
}
inline void SendResponse::_internal_set_payment_preimage(const std::string& value) {
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendResponse::set_payment_preimage(std::string&& value) {
  
  payment_preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendResponse.payment_preimage)
}
inline void SendResponse::set_payment_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendResponse.payment_preimage)
}
inline void SendResponse::set_payment_preimage(const void* value, size_t size) {
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendResponse.payment_preimage)
}
inline std::string* SendResponse::_internal_mutable_payment_preimage() {
  
  return payment_preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendResponse::release_payment_preimage() {
  // @@protoc_insertion_point(field_release:lnrpc.SendResponse.payment_preimage)
  
  return payment_preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendResponse::set_allocated_payment_preimage(std::string* payment_preimage) {
  if (payment_preimage != nullptr) {
    
  } else {
    
  }
  payment_preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_preimage);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendResponse.payment_preimage)
}

// .lnrpc.Route payment_route = 3;
inline bool SendResponse::_internal_has_payment_route() const {
  return this != internal_default_instance() && payment_route_ != nullptr;
}
inline bool SendResponse::has_payment_route() const {
  return _internal_has_payment_route();
}
inline void SendResponse::clear_payment_route() {
  if (GetArenaNoVirtual() == nullptr && payment_route_ != nullptr) {
    delete payment_route_;
  }
  payment_route_ = nullptr;
}
inline const ::lnrpc::Route& SendResponse::_internal_payment_route() const {
  const ::lnrpc::Route* p = payment_route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Route*>(
      &::lnrpc::_Route_default_instance_);
}
inline const ::lnrpc::Route& SendResponse::payment_route() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendResponse.payment_route)
  return _internal_payment_route();
}
inline ::lnrpc::Route* SendResponse::release_payment_route() {
  // @@protoc_insertion_point(field_release:lnrpc.SendResponse.payment_route)
  
  ::lnrpc::Route* temp = payment_route_;
  payment_route_ = nullptr;
  return temp;
}
inline ::lnrpc::Route* SendResponse::_internal_mutable_payment_route() {
  
  if (payment_route_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Route>(GetArenaNoVirtual());
    payment_route_ = p;
  }
  return payment_route_;
}
inline ::lnrpc::Route* SendResponse::mutable_payment_route() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendResponse.payment_route)
  return _internal_mutable_payment_route();
}
inline void SendResponse::set_allocated_payment_route(::lnrpc::Route* payment_route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete payment_route_;
  }
  if (payment_route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      payment_route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_route, submessage_arena);
    }
    
  } else {
    
  }
  payment_route_ = payment_route;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendResponse.payment_route)
}

// bytes payment_hash = 4;
inline void SendResponse::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendResponse::payment_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendResponse.payment_hash)
  return _internal_payment_hash();
}
inline void SendResponse::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendResponse.payment_hash)
}
inline std::string* SendResponse::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendResponse.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& SendResponse::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void SendResponse::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendResponse::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendResponse.payment_hash)
}
inline void SendResponse::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendResponse.payment_hash)
}
inline void SendResponse::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendResponse.payment_hash)
}
inline std::string* SendResponse::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendResponse::release_payment_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.SendResponse.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendResponse::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendResponse.payment_hash)
}

// -------------------------------------------------------------------

// SendToRouteRequest

// bytes payment_hash = 1;
inline void SendToRouteRequest::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToRouteRequest::payment_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendToRouteRequest.payment_hash)
  return _internal_payment_hash();
}
inline void SendToRouteRequest::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendToRouteRequest.payment_hash)
}
inline std::string* SendToRouteRequest::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendToRouteRequest.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& SendToRouteRequest::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void SendToRouteRequest::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToRouteRequest::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendToRouteRequest.payment_hash)
}
inline void SendToRouteRequest::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendToRouteRequest.payment_hash)
}
inline void SendToRouteRequest::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendToRouteRequest.payment_hash)
}
inline std::string* SendToRouteRequest::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToRouteRequest::release_payment_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.SendToRouteRequest.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToRouteRequest::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendToRouteRequest.payment_hash)
}

// string payment_hash_string = 2 [deprecated = true];
inline void SendToRouteRequest::clear_payment_hash_string() {
  payment_hash_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToRouteRequest::payment_hash_string() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendToRouteRequest.payment_hash_string)
  return _internal_payment_hash_string();
}
inline void SendToRouteRequest::set_payment_hash_string(const std::string& value) {
  _internal_set_payment_hash_string(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendToRouteRequest.payment_hash_string)
}
inline std::string* SendToRouteRequest::mutable_payment_hash_string() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendToRouteRequest.payment_hash_string)
  return _internal_mutable_payment_hash_string();
}
inline const std::string& SendToRouteRequest::_internal_payment_hash_string() const {
  return payment_hash_string_.GetNoArena();
}
inline void SendToRouteRequest::_internal_set_payment_hash_string(const std::string& value) {
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToRouteRequest::set_payment_hash_string(std::string&& value) {
  
  payment_hash_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendToRouteRequest.payment_hash_string)
}
inline void SendToRouteRequest::set_payment_hash_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendToRouteRequest.payment_hash_string)
}
inline void SendToRouteRequest::set_payment_hash_string(const char* value, size_t size) {
  
  payment_hash_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendToRouteRequest.payment_hash_string)
}
inline std::string* SendToRouteRequest::_internal_mutable_payment_hash_string() {
  
  return payment_hash_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToRouteRequest::release_payment_hash_string() {
  // @@protoc_insertion_point(field_release:lnrpc.SendToRouteRequest.payment_hash_string)
  
  return payment_hash_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToRouteRequest::set_allocated_payment_hash_string(std::string* payment_hash_string) {
  if (payment_hash_string != nullptr) {
    
  } else {
    
  }
  payment_hash_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash_string);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendToRouteRequest.payment_hash_string)
}

// .lnrpc.Route route = 4;
inline bool SendToRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool SendToRouteRequest::has_route() const {
  return _internal_has_route();
}
inline void SendToRouteRequest::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::lnrpc::Route& SendToRouteRequest::_internal_route() const {
  const ::lnrpc::Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Route*>(
      &::lnrpc::_Route_default_instance_);
}
inline const ::lnrpc::Route& SendToRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendToRouteRequest.route)
  return _internal_route();
}
inline ::lnrpc::Route* SendToRouteRequest::release_route() {
  // @@protoc_insertion_point(field_release:lnrpc.SendToRouteRequest.route)
  
  ::lnrpc::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::lnrpc::Route* SendToRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Route>(GetArenaNoVirtual());
    route_ = p;
  }
  return route_;
}
inline ::lnrpc::Route* SendToRouteRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendToRouteRequest.route)
  return _internal_mutable_route();
}
inline void SendToRouteRequest::set_allocated_route(::lnrpc::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendToRouteRequest.route)
}

// -------------------------------------------------------------------

// ChannelAcceptRequest

// bytes node_pubkey = 1;
inline void ChannelAcceptRequest::clear_node_pubkey() {
  node_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptRequest::node_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.node_pubkey)
  return _internal_node_pubkey();
}
inline void ChannelAcceptRequest::set_node_pubkey(const std::string& value) {
  _internal_set_node_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.node_pubkey)
}
inline std::string* ChannelAcceptRequest::mutable_node_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptRequest.node_pubkey)
  return _internal_mutable_node_pubkey();
}
inline const std::string& ChannelAcceptRequest::_internal_node_pubkey() const {
  return node_pubkey_.GetNoArena();
}
inline void ChannelAcceptRequest::_internal_set_node_pubkey(const std::string& value) {
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptRequest::set_node_pubkey(std::string&& value) {
  
  node_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptRequest.node_pubkey)
}
inline void ChannelAcceptRequest::set_node_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptRequest.node_pubkey)
}
inline void ChannelAcceptRequest::set_node_pubkey(const void* value, size_t size) {
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptRequest.node_pubkey)
}
inline std::string* ChannelAcceptRequest::_internal_mutable_node_pubkey() {
  
  return node_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptRequest::release_node_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptRequest.node_pubkey)
  
  return node_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptRequest::set_allocated_node_pubkey(std::string* node_pubkey) {
  if (node_pubkey != nullptr) {
    
  } else {
    
  }
  node_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptRequest.node_pubkey)
}

// bytes chain_hash = 2;
inline void ChannelAcceptRequest::clear_chain_hash() {
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptRequest::chain_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.chain_hash)
  return _internal_chain_hash();
}
inline void ChannelAcceptRequest::set_chain_hash(const std::string& value) {
  _internal_set_chain_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.chain_hash)
}
inline std::string* ChannelAcceptRequest::mutable_chain_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptRequest.chain_hash)
  return _internal_mutable_chain_hash();
}
inline const std::string& ChannelAcceptRequest::_internal_chain_hash() const {
  return chain_hash_.GetNoArena();
}
inline void ChannelAcceptRequest::_internal_set_chain_hash(const std::string& value) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptRequest::set_chain_hash(std::string&& value) {
  
  chain_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptRequest.chain_hash)
}
inline void ChannelAcceptRequest::set_chain_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptRequest.chain_hash)
}
inline void ChannelAcceptRequest::set_chain_hash(const void* value, size_t size) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptRequest.chain_hash)
}
inline std::string* ChannelAcceptRequest::_internal_mutable_chain_hash() {
  
  return chain_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptRequest::release_chain_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptRequest.chain_hash)
  
  return chain_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptRequest::set_allocated_chain_hash(std::string* chain_hash) {
  if (chain_hash != nullptr) {
    
  } else {
    
  }
  chain_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptRequest.chain_hash)
}

// bytes pending_chan_id = 3;
inline void ChannelAcceptRequest::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptRequest::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void ChannelAcceptRequest::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.pending_chan_id)
}
inline std::string* ChannelAcceptRequest::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptRequest.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& ChannelAcceptRequest::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void ChannelAcceptRequest::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptRequest::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptRequest.pending_chan_id)
}
inline void ChannelAcceptRequest::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptRequest.pending_chan_id)
}
inline void ChannelAcceptRequest::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptRequest.pending_chan_id)
}
inline std::string* ChannelAcceptRequest::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptRequest::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptRequest.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptRequest::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptRequest.pending_chan_id)
}

// uint64 funding_amt = 4;
inline void ChannelAcceptRequest::clear_funding_amt() {
  funding_amt_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_funding_amt() const {
  return funding_amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::funding_amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.funding_amt)
  return _internal_funding_amt();
}
inline void ChannelAcceptRequest::_internal_set_funding_amt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  funding_amt_ = value;
}
inline void ChannelAcceptRequest::set_funding_amt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_funding_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.funding_amt)
}

// uint64 push_amt = 5;
inline void ChannelAcceptRequest::clear_push_amt() {
  push_amt_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_push_amt() const {
  return push_amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::push_amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.push_amt)
  return _internal_push_amt();
}
inline void ChannelAcceptRequest::_internal_set_push_amt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  push_amt_ = value;
}
inline void ChannelAcceptRequest::set_push_amt(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_push_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.push_amt)
}

// uint64 dust_limit = 6;
inline void ChannelAcceptRequest::clear_dust_limit() {
  dust_limit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_dust_limit() const {
  return dust_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::dust_limit() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.dust_limit)
  return _internal_dust_limit();
}
inline void ChannelAcceptRequest::_internal_set_dust_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dust_limit_ = value;
}
inline void ChannelAcceptRequest::set_dust_limit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dust_limit(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.dust_limit)
}

// uint64 max_value_in_flight = 7;
inline void ChannelAcceptRequest::clear_max_value_in_flight() {
  max_value_in_flight_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_max_value_in_flight() const {
  return max_value_in_flight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::max_value_in_flight() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.max_value_in_flight)
  return _internal_max_value_in_flight();
}
inline void ChannelAcceptRequest::_internal_set_max_value_in_flight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_value_in_flight_ = value;
}
inline void ChannelAcceptRequest::set_max_value_in_flight(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_value_in_flight(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.max_value_in_flight)
}

// uint64 channel_reserve = 8;
inline void ChannelAcceptRequest::clear_channel_reserve() {
  channel_reserve_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_channel_reserve() const {
  return channel_reserve_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::channel_reserve() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.channel_reserve)
  return _internal_channel_reserve();
}
inline void ChannelAcceptRequest::_internal_set_channel_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_reserve_ = value;
}
inline void ChannelAcceptRequest::set_channel_reserve(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_reserve(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.channel_reserve)
}

// uint64 min_htlc = 9;
inline void ChannelAcceptRequest::clear_min_htlc() {
  min_htlc_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_min_htlc() const {
  return min_htlc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::min_htlc() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.min_htlc)
  return _internal_min_htlc();
}
inline void ChannelAcceptRequest::_internal_set_min_htlc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_htlc_ = value;
}
inline void ChannelAcceptRequest::set_min_htlc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_htlc(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.min_htlc)
}

// uint64 fee_per_kw = 10;
inline void ChannelAcceptRequest::clear_fee_per_kw() {
  fee_per_kw_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::_internal_fee_per_kw() const {
  return fee_per_kw_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptRequest::fee_per_kw() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.fee_per_kw)
  return _internal_fee_per_kw();
}
inline void ChannelAcceptRequest::_internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_per_kw_ = value;
}
inline void ChannelAcceptRequest::set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee_per_kw(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.fee_per_kw)
}

// uint32 csv_delay = 11;
inline void ChannelAcceptRequest::clear_csv_delay() {
  csv_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::_internal_csv_delay() const {
  return csv_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::csv_delay() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.csv_delay)
  return _internal_csv_delay();
}
inline void ChannelAcceptRequest::_internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  csv_delay_ = value;
}
inline void ChannelAcceptRequest::set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_csv_delay(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.csv_delay)
}

// uint32 max_accepted_htlcs = 12;
inline void ChannelAcceptRequest::clear_max_accepted_htlcs() {
  max_accepted_htlcs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::_internal_max_accepted_htlcs() const {
  return max_accepted_htlcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::max_accepted_htlcs() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.max_accepted_htlcs)
  return _internal_max_accepted_htlcs();
}
inline void ChannelAcceptRequest::_internal_set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_accepted_htlcs_ = value;
}
inline void ChannelAcceptRequest::set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_accepted_htlcs(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.max_accepted_htlcs)
}

// uint32 channel_flags = 13;
inline void ChannelAcceptRequest::clear_channel_flags() {
  channel_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::_internal_channel_flags() const {
  return channel_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptRequest::channel_flags() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptRequest.channel_flags)
  return _internal_channel_flags();
}
inline void ChannelAcceptRequest::_internal_set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_flags_ = value;
}
inline void ChannelAcceptRequest::set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_flags(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptRequest.channel_flags)
}

// -------------------------------------------------------------------

// ChannelAcceptResponse

// bool accept = 1;
inline void ChannelAcceptResponse::clear_accept() {
  accept_ = false;
}
inline bool ChannelAcceptResponse::_internal_accept() const {
  return accept_;
}
inline bool ChannelAcceptResponse::accept() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.accept)
  return _internal_accept();
}
inline void ChannelAcceptResponse::_internal_set_accept(bool value) {
  
  accept_ = value;
}
inline void ChannelAcceptResponse::set_accept(bool value) {
  _internal_set_accept(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.accept)
}

// bytes pending_chan_id = 2;
inline void ChannelAcceptResponse::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptResponse::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void ChannelAcceptResponse::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.pending_chan_id)
}
inline std::string* ChannelAcceptResponse::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptResponse.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& ChannelAcceptResponse::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void ChannelAcceptResponse::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptResponse::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptResponse.pending_chan_id)
}
inline void ChannelAcceptResponse::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptResponse.pending_chan_id)
}
inline void ChannelAcceptResponse::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptResponse.pending_chan_id)
}
inline std::string* ChannelAcceptResponse::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptResponse::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptResponse.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptResponse::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptResponse.pending_chan_id)
}

// string error = 3;
inline void ChannelAcceptResponse::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptResponse::error() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.error)
  return _internal_error();
}
inline void ChannelAcceptResponse::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.error)
}
inline std::string* ChannelAcceptResponse::mutable_error() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptResponse.error)
  return _internal_mutable_error();
}
inline const std::string& ChannelAcceptResponse::_internal_error() const {
  return error_.GetNoArena();
}
inline void ChannelAcceptResponse::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptResponse::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptResponse.error)
}
inline void ChannelAcceptResponse::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptResponse.error)
}
inline void ChannelAcceptResponse::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptResponse.error)
}
inline std::string* ChannelAcceptResponse::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptResponse::release_error() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptResponse.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptResponse.error)
}

// string upfront_shutdown = 4;
inline void ChannelAcceptResponse::clear_upfront_shutdown() {
  upfront_shutdown_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelAcceptResponse::upfront_shutdown() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.upfront_shutdown)
  return _internal_upfront_shutdown();
}
inline void ChannelAcceptResponse::set_upfront_shutdown(const std::string& value) {
  _internal_set_upfront_shutdown(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.upfront_shutdown)
}
inline std::string* ChannelAcceptResponse::mutable_upfront_shutdown() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelAcceptResponse.upfront_shutdown)
  return _internal_mutable_upfront_shutdown();
}
inline const std::string& ChannelAcceptResponse::_internal_upfront_shutdown() const {
  return upfront_shutdown_.GetNoArena();
}
inline void ChannelAcceptResponse::_internal_set_upfront_shutdown(const std::string& value) {
  
  upfront_shutdown_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelAcceptResponse::set_upfront_shutdown(std::string&& value) {
  
  upfront_shutdown_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelAcceptResponse.upfront_shutdown)
}
inline void ChannelAcceptResponse::set_upfront_shutdown(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  upfront_shutdown_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelAcceptResponse.upfront_shutdown)
}
inline void ChannelAcceptResponse::set_upfront_shutdown(const char* value, size_t size) {
  
  upfront_shutdown_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelAcceptResponse.upfront_shutdown)
}
inline std::string* ChannelAcceptResponse::_internal_mutable_upfront_shutdown() {
  
  return upfront_shutdown_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelAcceptResponse::release_upfront_shutdown() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelAcceptResponse.upfront_shutdown)
  
  return upfront_shutdown_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelAcceptResponse::set_allocated_upfront_shutdown(std::string* upfront_shutdown) {
  if (upfront_shutdown != nullptr) {
    
  } else {
    
  }
  upfront_shutdown_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upfront_shutdown);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelAcceptResponse.upfront_shutdown)
}

// uint32 csv_delay = 5;
inline void ChannelAcceptResponse::clear_csv_delay() {
  csv_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::_internal_csv_delay() const {
  return csv_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::csv_delay() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.csv_delay)
  return _internal_csv_delay();
}
inline void ChannelAcceptResponse::_internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  csv_delay_ = value;
}
inline void ChannelAcceptResponse::set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_csv_delay(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.csv_delay)
}

// uint64 reserve_sat = 6;
inline void ChannelAcceptResponse::clear_reserve_sat() {
  reserve_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::_internal_reserve_sat() const {
  return reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.reserve_sat)
  return _internal_reserve_sat();
}
inline void ChannelAcceptResponse::_internal_set_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reserve_sat_ = value;
}
inline void ChannelAcceptResponse::set_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.reserve_sat)
}

// uint64 in_flight_max_msat = 7;
inline void ChannelAcceptResponse::clear_in_flight_max_msat() {
  in_flight_max_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::_internal_in_flight_max_msat() const {
  return in_flight_max_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::in_flight_max_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.in_flight_max_msat)
  return _internal_in_flight_max_msat();
}
inline void ChannelAcceptResponse::_internal_set_in_flight_max_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  in_flight_max_msat_ = value;
}
inline void ChannelAcceptResponse::set_in_flight_max_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_in_flight_max_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.in_flight_max_msat)
}

// uint32 max_htlc_count = 8;
inline void ChannelAcceptResponse::clear_max_htlc_count() {
  max_htlc_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::_internal_max_htlc_count() const {
  return max_htlc_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::max_htlc_count() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.max_htlc_count)
  return _internal_max_htlc_count();
}
inline void ChannelAcceptResponse::_internal_set_max_htlc_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_htlc_count_ = value;
}
inline void ChannelAcceptResponse::set_max_htlc_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_htlc_count(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.max_htlc_count)
}

// uint64 min_htlc_in = 9;
inline void ChannelAcceptResponse::clear_min_htlc_in() {
  min_htlc_in_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::_internal_min_htlc_in() const {
  return min_htlc_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelAcceptResponse::min_htlc_in() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.min_htlc_in)
  return _internal_min_htlc_in();
}
inline void ChannelAcceptResponse::_internal_set_min_htlc_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_htlc_in_ = value;
}
inline void ChannelAcceptResponse::set_min_htlc_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_htlc_in(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.min_htlc_in)
}

// uint32 min_accept_depth = 10;
inline void ChannelAcceptResponse::clear_min_accept_depth() {
  min_accept_depth_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::_internal_min_accept_depth() const {
  return min_accept_depth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelAcceptResponse::min_accept_depth() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelAcceptResponse.min_accept_depth)
  return _internal_min_accept_depth();
}
inline void ChannelAcceptResponse::_internal_set_min_accept_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  min_accept_depth_ = value;
}
inline void ChannelAcceptResponse::set_min_accept_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_min_accept_depth(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelAcceptResponse.min_accept_depth)
}

// -------------------------------------------------------------------

// ChannelPoint

// bytes funding_txid_bytes = 1;
inline bool ChannelPoint::_internal_has_funding_txid_bytes() const {
  return funding_txid_case() == kFundingTxidBytes;
}
inline void ChannelPoint::set_has_funding_txid_bytes() {
  _oneof_case_[0] = kFundingTxidBytes;
}
inline void ChannelPoint::clear_funding_txid_bytes() {
  if (_internal_has_funding_txid_bytes()) {
    funding_txid_.funding_txid_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_funding_txid();
  }
}
inline const std::string& ChannelPoint::funding_txid_bytes() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelPoint.funding_txid_bytes)
  return _internal_funding_txid_bytes();
}
inline void ChannelPoint::set_funding_txid_bytes(const std::string& value) {
  _internal_set_funding_txid_bytes(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelPoint.funding_txid_bytes)
}
inline std::string* ChannelPoint::mutable_funding_txid_bytes() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelPoint.funding_txid_bytes)
  return _internal_mutable_funding_txid_bytes();
}
inline const std::string& ChannelPoint::_internal_funding_txid_bytes() const {
  if (_internal_has_funding_txid_bytes()) {
    return funding_txid_.funding_txid_bytes_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChannelPoint::_internal_set_funding_txid_bytes(const std::string& value) {
  if (!_internal_has_funding_txid_bytes()) {
    clear_funding_txid();
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelPoint::set_funding_txid_bytes(std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.ChannelPoint.funding_txid_bytes)
  if (!_internal_has_funding_txid_bytes()) {
    clear_funding_txid();
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelPoint.funding_txid_bytes)
}
inline void ChannelPoint::set_funding_txid_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_funding_txid_bytes()) {
    clear_funding_txid();
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelPoint.funding_txid_bytes)
}
inline void ChannelPoint::set_funding_txid_bytes(const void* value, size_t size) {
  if (!_internal_has_funding_txid_bytes()) {
    clear_funding_txid();
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelPoint.funding_txid_bytes)
}
inline std::string* ChannelPoint::_internal_mutable_funding_txid_bytes() {
  if (!_internal_has_funding_txid_bytes()) {
    clear_funding_txid();
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return funding_txid_.funding_txid_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelPoint::release_funding_txid_bytes() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelPoint.funding_txid_bytes)
  if (_internal_has_funding_txid_bytes()) {
    clear_has_funding_txid();
    return funding_txid_.funding_txid_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ChannelPoint::set_allocated_funding_txid_bytes(std::string* funding_txid_bytes) {
  if (has_funding_txid()) {
    clear_funding_txid();
  }
  if (funding_txid_bytes != nullptr) {
    set_has_funding_txid_bytes();
    funding_txid_.funding_txid_bytes_.UnsafeSetDefault(funding_txid_bytes);
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelPoint.funding_txid_bytes)
}

// string funding_txid_str = 2;
inline bool ChannelPoint::_internal_has_funding_txid_str() const {
  return funding_txid_case() == kFundingTxidStr;
}
inline void ChannelPoint::set_has_funding_txid_str() {
  _oneof_case_[0] = kFundingTxidStr;
}
inline void ChannelPoint::clear_funding_txid_str() {
  if (_internal_has_funding_txid_str()) {
    funding_txid_.funding_txid_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_funding_txid();
  }
}
inline const std::string& ChannelPoint::funding_txid_str() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelPoint.funding_txid_str)
  return _internal_funding_txid_str();
}
inline void ChannelPoint::set_funding_txid_str(const std::string& value) {
  _internal_set_funding_txid_str(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelPoint.funding_txid_str)
}
inline std::string* ChannelPoint::mutable_funding_txid_str() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelPoint.funding_txid_str)
  return _internal_mutable_funding_txid_str();
}
inline const std::string& ChannelPoint::_internal_funding_txid_str() const {
  if (_internal_has_funding_txid_str()) {
    return funding_txid_.funding_txid_str_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ChannelPoint::_internal_set_funding_txid_str(const std::string& value) {
  if (!_internal_has_funding_txid_str()) {
    clear_funding_txid();
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelPoint::set_funding_txid_str(std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.ChannelPoint.funding_txid_str)
  if (!_internal_has_funding_txid_str()) {
    clear_funding_txid();
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelPoint.funding_txid_str)
}
inline void ChannelPoint::set_funding_txid_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_funding_txid_str()) {
    clear_funding_txid();
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelPoint.funding_txid_str)
}
inline void ChannelPoint::set_funding_txid_str(const char* value, size_t size) {
  if (!_internal_has_funding_txid_str()) {
    clear_funding_txid();
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  funding_txid_.funding_txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelPoint.funding_txid_str)
}
inline std::string* ChannelPoint::_internal_mutable_funding_txid_str() {
  if (!_internal_has_funding_txid_str()) {
    clear_funding_txid();
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return funding_txid_.funding_txid_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelPoint::release_funding_txid_str() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelPoint.funding_txid_str)
  if (_internal_has_funding_txid_str()) {
    clear_has_funding_txid();
    return funding_txid_.funding_txid_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ChannelPoint::set_allocated_funding_txid_str(std::string* funding_txid_str) {
  if (has_funding_txid()) {
    clear_funding_txid();
  }
  if (funding_txid_str != nullptr) {
    set_has_funding_txid_str();
    funding_txid_.funding_txid_str_.UnsafeSetDefault(funding_txid_str);
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelPoint.funding_txid_str)
}

// uint32 output_index = 3;
inline void ChannelPoint::clear_output_index() {
  output_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelPoint::_internal_output_index() const {
  return output_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelPoint::output_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelPoint.output_index)
  return _internal_output_index();
}
inline void ChannelPoint::_internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_index_ = value;
}
inline void ChannelPoint::set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelPoint.output_index)
}

inline bool ChannelPoint::has_funding_txid() const {
  return funding_txid_case() != FUNDING_TXID_NOT_SET;
}
inline void ChannelPoint::clear_has_funding_txid() {
  _oneof_case_[0] = FUNDING_TXID_NOT_SET;
}
inline ChannelPoint::FundingTxidCase ChannelPoint::funding_txid_case() const {
  return ChannelPoint::FundingTxidCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OutPoint

// bytes txid_bytes = 1;
inline void OutPoint::clear_txid_bytes() {
  txid_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutPoint::txid_bytes() const {
  // @@protoc_insertion_point(field_get:lnrpc.OutPoint.txid_bytes)
  return _internal_txid_bytes();
}
inline void OutPoint::set_txid_bytes(const std::string& value) {
  _internal_set_txid_bytes(value);
  // @@protoc_insertion_point(field_set:lnrpc.OutPoint.txid_bytes)
}
inline std::string* OutPoint::mutable_txid_bytes() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OutPoint.txid_bytes)
  return _internal_mutable_txid_bytes();
}
inline const std::string& OutPoint::_internal_txid_bytes() const {
  return txid_bytes_.GetNoArena();
}
inline void OutPoint::_internal_set_txid_bytes(const std::string& value) {
  
  txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutPoint::set_txid_bytes(std::string&& value) {
  
  txid_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OutPoint.txid_bytes)
}
inline void OutPoint::set_txid_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OutPoint.txid_bytes)
}
inline void OutPoint::set_txid_bytes(const void* value, size_t size) {
  
  txid_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OutPoint.txid_bytes)
}
inline std::string* OutPoint::_internal_mutable_txid_bytes() {
  
  return txid_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutPoint::release_txid_bytes() {
  // @@protoc_insertion_point(field_release:lnrpc.OutPoint.txid_bytes)
  
  return txid_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutPoint::set_allocated_txid_bytes(std::string* txid_bytes) {
  if (txid_bytes != nullptr) {
    
  } else {
    
  }
  txid_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid_bytes);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OutPoint.txid_bytes)
}

// string txid_str = 2;
inline void OutPoint::clear_txid_str() {
  txid_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OutPoint::txid_str() const {
  // @@protoc_insertion_point(field_get:lnrpc.OutPoint.txid_str)
  return _internal_txid_str();
}
inline void OutPoint::set_txid_str(const std::string& value) {
  _internal_set_txid_str(value);
  // @@protoc_insertion_point(field_set:lnrpc.OutPoint.txid_str)
}
inline std::string* OutPoint::mutable_txid_str() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OutPoint.txid_str)
  return _internal_mutable_txid_str();
}
inline const std::string& OutPoint::_internal_txid_str() const {
  return txid_str_.GetNoArena();
}
inline void OutPoint::_internal_set_txid_str(const std::string& value) {
  
  txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OutPoint::set_txid_str(std::string&& value) {
  
  txid_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OutPoint.txid_str)
}
inline void OutPoint::set_txid_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OutPoint.txid_str)
}
inline void OutPoint::set_txid_str(const char* value, size_t size) {
  
  txid_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OutPoint.txid_str)
}
inline std::string* OutPoint::_internal_mutable_txid_str() {
  
  return txid_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OutPoint::release_txid_str() {
  // @@protoc_insertion_point(field_release:lnrpc.OutPoint.txid_str)
  
  return txid_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OutPoint::set_allocated_txid_str(std::string* txid_str) {
  if (txid_str != nullptr) {
    
  } else {
    
  }
  txid_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid_str);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OutPoint.txid_str)
}

// uint32 output_index = 3;
inline void OutPoint::clear_output_index() {
  output_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutPoint::_internal_output_index() const {
  return output_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OutPoint::output_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.OutPoint.output_index)
  return _internal_output_index();
}
inline void OutPoint::_internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_index_ = value;
}
inline void OutPoint::set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.OutPoint.output_index)
}

// -------------------------------------------------------------------

// LightningAddress

// string pubkey = 1;
inline void LightningAddress::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningAddress::pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningAddress.pubkey)
  return _internal_pubkey();
}
inline void LightningAddress::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningAddress.pubkey)
}
inline std::string* LightningAddress::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningAddress.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& LightningAddress::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void LightningAddress::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningAddress::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.LightningAddress.pubkey)
}
inline void LightningAddress::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.LightningAddress.pubkey)
}
inline void LightningAddress::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.LightningAddress.pubkey)
}
inline std::string* LightningAddress::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningAddress::release_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.LightningAddress.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningAddress::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.LightningAddress.pubkey)
}

// string host = 2;
inline void LightningAddress::clear_host() {
  host_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningAddress::host() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningAddress.host)
  return _internal_host();
}
inline void LightningAddress::set_host(const std::string& value) {
  _internal_set_host(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningAddress.host)
}
inline std::string* LightningAddress::mutable_host() {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningAddress.host)
  return _internal_mutable_host();
}
inline const std::string& LightningAddress::_internal_host() const {
  return host_.GetNoArena();
}
inline void LightningAddress::_internal_set_host(const std::string& value) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningAddress::set_host(std::string&& value) {
  
  host_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.LightningAddress.host)
}
inline void LightningAddress::set_host(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.LightningAddress.host)
}
inline void LightningAddress::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.LightningAddress.host)
}
inline std::string* LightningAddress::_internal_mutable_host() {
  
  return host_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningAddress::release_host() {
  // @@protoc_insertion_point(field_release:lnrpc.LightningAddress.host)
  
  return host_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningAddress::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.LightningAddress.host)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// EstimateFeeRequest

// map<string, int64> AddrToAmount = 1;
inline int EstimateFeeRequest::_internal_addrtoamount_size() const {
  return addrtoamount_.size();
}
inline int EstimateFeeRequest::addrtoamount_size() const {
  return _internal_addrtoamount_size();
}
inline void EstimateFeeRequest::clear_addrtoamount() {
  addrtoamount_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
EstimateFeeRequest::_internal_addrtoamount() const {
  return addrtoamount_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
EstimateFeeRequest::addrtoamount() const {
  // @@protoc_insertion_point(field_map:lnrpc.EstimateFeeRequest.AddrToAmount)
  return _internal_addrtoamount();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
EstimateFeeRequest::_internal_mutable_addrtoamount() {
  return addrtoamount_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
EstimateFeeRequest::mutable_addrtoamount() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.EstimateFeeRequest.AddrToAmount)
  return _internal_mutable_addrtoamount();
}

// int32 target_conf = 2;
inline void EstimateFeeRequest::clear_target_conf() {
  target_conf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EstimateFeeRequest::_internal_target_conf() const {
  return target_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EstimateFeeRequest::target_conf() const {
  // @@protoc_insertion_point(field_get:lnrpc.EstimateFeeRequest.target_conf)
  return _internal_target_conf();
}
inline void EstimateFeeRequest::_internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_conf_ = value;
}
inline void EstimateFeeRequest::set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_conf(value);
  // @@protoc_insertion_point(field_set:lnrpc.EstimateFeeRequest.target_conf)
}

// -------------------------------------------------------------------

// EstimateFeeResponse

// int64 fee_sat = 1;
inline void EstimateFeeResponse::clear_fee_sat() {
  fee_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateFeeResponse::_internal_fee_sat() const {
  return fee_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateFeeResponse::fee_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.EstimateFeeResponse.fee_sat)
  return _internal_fee_sat();
}
inline void EstimateFeeResponse::_internal_set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_sat_ = value;
}
inline void EstimateFeeResponse::set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.EstimateFeeResponse.fee_sat)
}

// int64 feerate_sat_per_byte = 2 [deprecated = true];
inline void EstimateFeeResponse::clear_feerate_sat_per_byte() {
  feerate_sat_per_byte_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateFeeResponse::_internal_feerate_sat_per_byte() const {
  return feerate_sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateFeeResponse::feerate_sat_per_byte() const {
  // @@protoc_insertion_point(field_get:lnrpc.EstimateFeeResponse.feerate_sat_per_byte)
  return _internal_feerate_sat_per_byte();
}
inline void EstimateFeeResponse::_internal_set_feerate_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  feerate_sat_per_byte_ = value;
}
inline void EstimateFeeResponse::set_feerate_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_feerate_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:lnrpc.EstimateFeeResponse.feerate_sat_per_byte)
}

// uint64 sat_per_vbyte = 3;
inline void EstimateFeeResponse::clear_sat_per_vbyte() {
  sat_per_vbyte_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateFeeResponse::_internal_sat_per_vbyte() const {
  return sat_per_vbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateFeeResponse::sat_per_vbyte() const {
  // @@protoc_insertion_point(field_get:lnrpc.EstimateFeeResponse.sat_per_vbyte)
  return _internal_sat_per_vbyte();
}
inline void EstimateFeeResponse::_internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_per_vbyte_ = value;
}
inline void EstimateFeeResponse::set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat_per_vbyte(value);
  // @@protoc_insertion_point(field_set:lnrpc.EstimateFeeResponse.sat_per_vbyte)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SendManyRequest

// map<string, int64> AddrToAmount = 1;
inline int SendManyRequest::_internal_addrtoamount_size() const {
  return addrtoamount_.size();
}
inline int SendManyRequest::addrtoamount_size() const {
  return _internal_addrtoamount_size();
}
inline void SendManyRequest::clear_addrtoamount() {
  addrtoamount_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
SendManyRequest::_internal_addrtoamount() const {
  return addrtoamount_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >&
SendManyRequest::addrtoamount() const {
  // @@protoc_insertion_point(field_map:lnrpc.SendManyRequest.AddrToAmount)
  return _internal_addrtoamount();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
SendManyRequest::_internal_mutable_addrtoamount() {
  return addrtoamount_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int64 >*
SendManyRequest::mutable_addrtoamount() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.SendManyRequest.AddrToAmount)
  return _internal_mutable_addrtoamount();
}

// int32 target_conf = 3;
inline void SendManyRequest::clear_target_conf() {
  target_conf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendManyRequest::_internal_target_conf() const {
  return target_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendManyRequest::target_conf() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.target_conf)
  return _internal_target_conf();
}
inline void SendManyRequest::_internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_conf_ = value;
}
inline void SendManyRequest::set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_conf(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.target_conf)
}

// uint64 sat_per_vbyte = 4;
inline void SendManyRequest::clear_sat_per_vbyte() {
  sat_per_vbyte_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendManyRequest::_internal_sat_per_vbyte() const {
  return sat_per_vbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendManyRequest::sat_per_vbyte() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.sat_per_vbyte)
  return _internal_sat_per_vbyte();
}
inline void SendManyRequest::_internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_per_vbyte_ = value;
}
inline void SendManyRequest::set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat_per_vbyte(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.sat_per_vbyte)
}

// int64 sat_per_byte = 5 [deprecated = true];
inline void SendManyRequest::clear_sat_per_byte() {
  sat_per_byte_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendManyRequest::_internal_sat_per_byte() const {
  return sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendManyRequest::sat_per_byte() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.sat_per_byte)
  return _internal_sat_per_byte();
}
inline void SendManyRequest::_internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_per_byte_ = value;
}
inline void SendManyRequest::set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.sat_per_byte)
}

// string label = 6;
inline void SendManyRequest::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendManyRequest::label() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.label)
  return _internal_label();
}
inline void SendManyRequest::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.label)
}
inline std::string* SendManyRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendManyRequest.label)
  return _internal_mutable_label();
}
inline const std::string& SendManyRequest::_internal_label() const {
  return label_.GetNoArena();
}
inline void SendManyRequest::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendManyRequest::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendManyRequest.label)
}
inline void SendManyRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendManyRequest.label)
}
inline void SendManyRequest::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendManyRequest.label)
}
inline std::string* SendManyRequest::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendManyRequest::release_label() {
  // @@protoc_insertion_point(field_release:lnrpc.SendManyRequest.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendManyRequest.label)
}

// int32 min_confs = 7;
inline void SendManyRequest::clear_min_confs() {
  min_confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendManyRequest::_internal_min_confs() const {
  return min_confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendManyRequest::min_confs() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.min_confs)
  return _internal_min_confs();
}
inline void SendManyRequest::_internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_confs_ = value;
}
inline void SendManyRequest::set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_confs(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.min_confs)
}

// bool spend_unconfirmed = 8;
inline void SendManyRequest::clear_spend_unconfirmed() {
  spend_unconfirmed_ = false;
}
inline bool SendManyRequest::_internal_spend_unconfirmed() const {
  return spend_unconfirmed_;
}
inline bool SendManyRequest::spend_unconfirmed() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyRequest.spend_unconfirmed)
  return _internal_spend_unconfirmed();
}
inline void SendManyRequest::_internal_set_spend_unconfirmed(bool value) {
  
  spend_unconfirmed_ = value;
}
inline void SendManyRequest::set_spend_unconfirmed(bool value) {
  _internal_set_spend_unconfirmed(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyRequest.spend_unconfirmed)
}

// -------------------------------------------------------------------

// SendManyResponse

// string txid = 1;
inline void SendManyResponse::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendManyResponse::txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendManyResponse.txid)
  return _internal_txid();
}
inline void SendManyResponse::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendManyResponse.txid)
}
inline std::string* SendManyResponse::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendManyResponse.txid)
  return _internal_mutable_txid();
}
inline const std::string& SendManyResponse::_internal_txid() const {
  return txid_.GetNoArena();
}
inline void SendManyResponse::_internal_set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendManyResponse::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendManyResponse.txid)
}
inline void SendManyResponse::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendManyResponse.txid)
}
inline void SendManyResponse::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendManyResponse.txid)
}
inline std::string* SendManyResponse::_internal_mutable_txid() {
  
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendManyResponse::release_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.SendManyResponse.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendManyResponse::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendManyResponse.txid)
}

// -------------------------------------------------------------------

// SendCoinsRequest

// string addr = 1;
inline void SendCoinsRequest::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendCoinsRequest::addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.addr)
  return _internal_addr();
}
inline void SendCoinsRequest::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.addr)
}
inline std::string* SendCoinsRequest::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendCoinsRequest.addr)
  return _internal_mutable_addr();
}
inline const std::string& SendCoinsRequest::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void SendCoinsRequest::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendCoinsRequest::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendCoinsRequest.addr)
}
inline void SendCoinsRequest::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendCoinsRequest.addr)
}
inline void SendCoinsRequest::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendCoinsRequest.addr)
}
inline std::string* SendCoinsRequest::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendCoinsRequest::release_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.SendCoinsRequest.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinsRequest::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendCoinsRequest.addr)
}

// int64 amount = 2;
inline void SendCoinsRequest::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendCoinsRequest::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendCoinsRequest::amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.amount)
  return _internal_amount();
}
inline void SendCoinsRequest::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void SendCoinsRequest::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.amount)
}

// int32 target_conf = 3;
inline void SendCoinsRequest::clear_target_conf() {
  target_conf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendCoinsRequest::_internal_target_conf() const {
  return target_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendCoinsRequest::target_conf() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.target_conf)
  return _internal_target_conf();
}
inline void SendCoinsRequest::_internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_conf_ = value;
}
inline void SendCoinsRequest::set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_conf(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.target_conf)
}

// uint64 sat_per_vbyte = 4;
inline void SendCoinsRequest::clear_sat_per_vbyte() {
  sat_per_vbyte_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendCoinsRequest::_internal_sat_per_vbyte() const {
  return sat_per_vbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendCoinsRequest::sat_per_vbyte() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.sat_per_vbyte)
  return _internal_sat_per_vbyte();
}
inline void SendCoinsRequest::_internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_per_vbyte_ = value;
}
inline void SendCoinsRequest::set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat_per_vbyte(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.sat_per_vbyte)
}

// int64 sat_per_byte = 5 [deprecated = true];
inline void SendCoinsRequest::clear_sat_per_byte() {
  sat_per_byte_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendCoinsRequest::_internal_sat_per_byte() const {
  return sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendCoinsRequest::sat_per_byte() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.sat_per_byte)
  return _internal_sat_per_byte();
}
inline void SendCoinsRequest::_internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_per_byte_ = value;
}
inline void SendCoinsRequest::set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.sat_per_byte)
}

// bool send_all = 6;
inline void SendCoinsRequest::clear_send_all() {
  send_all_ = false;
}
inline bool SendCoinsRequest::_internal_send_all() const {
  return send_all_;
}
inline bool SendCoinsRequest::send_all() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.send_all)
  return _internal_send_all();
}
inline void SendCoinsRequest::_internal_set_send_all(bool value) {
  
  send_all_ = value;
}
inline void SendCoinsRequest::set_send_all(bool value) {
  _internal_set_send_all(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.send_all)
}

// string label = 7;
inline void SendCoinsRequest::clear_label() {
  label_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendCoinsRequest::label() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.label)
  return _internal_label();
}
inline void SendCoinsRequest::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.label)
}
inline std::string* SendCoinsRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendCoinsRequest.label)
  return _internal_mutable_label();
}
inline const std::string& SendCoinsRequest::_internal_label() const {
  return label_.GetNoArena();
}
inline void SendCoinsRequest::_internal_set_label(const std::string& value) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendCoinsRequest::set_label(std::string&& value) {
  
  label_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendCoinsRequest.label)
}
inline void SendCoinsRequest::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendCoinsRequest.label)
}
inline void SendCoinsRequest::set_label(const char* value, size_t size) {
  
  label_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendCoinsRequest.label)
}
inline std::string* SendCoinsRequest::_internal_mutable_label() {
  
  return label_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendCoinsRequest::release_label() {
  // @@protoc_insertion_point(field_release:lnrpc.SendCoinsRequest.label)
  
  return label_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinsRequest::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendCoinsRequest.label)
}

// int32 min_confs = 8;
inline void SendCoinsRequest::clear_min_confs() {
  min_confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendCoinsRequest::_internal_min_confs() const {
  return min_confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendCoinsRequest::min_confs() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.min_confs)
  return _internal_min_confs();
}
inline void SendCoinsRequest::_internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_confs_ = value;
}
inline void SendCoinsRequest::set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_confs(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.min_confs)
}

// bool spend_unconfirmed = 9;
inline void SendCoinsRequest::clear_spend_unconfirmed() {
  spend_unconfirmed_ = false;
}
inline bool SendCoinsRequest::_internal_spend_unconfirmed() const {
  return spend_unconfirmed_;
}
inline bool SendCoinsRequest::spend_unconfirmed() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsRequest.spend_unconfirmed)
  return _internal_spend_unconfirmed();
}
inline void SendCoinsRequest::_internal_set_spend_unconfirmed(bool value) {
  
  spend_unconfirmed_ = value;
}
inline void SendCoinsRequest::set_spend_unconfirmed(bool value) {
  _internal_set_spend_unconfirmed(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsRequest.spend_unconfirmed)
}

// -------------------------------------------------------------------

// SendCoinsResponse

// string txid = 1;
inline void SendCoinsResponse::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendCoinsResponse::txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.SendCoinsResponse.txid)
  return _internal_txid();
}
inline void SendCoinsResponse::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.SendCoinsResponse.txid)
}
inline std::string* SendCoinsResponse::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SendCoinsResponse.txid)
  return _internal_mutable_txid();
}
inline const std::string& SendCoinsResponse::_internal_txid() const {
  return txid_.GetNoArena();
}
inline void SendCoinsResponse::_internal_set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendCoinsResponse::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SendCoinsResponse.txid)
}
inline void SendCoinsResponse::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SendCoinsResponse.txid)
}
inline void SendCoinsResponse::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SendCoinsResponse.txid)
}
inline std::string* SendCoinsResponse::_internal_mutable_txid() {
  
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendCoinsResponse::release_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.SendCoinsResponse.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendCoinsResponse::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SendCoinsResponse.txid)
}

// -------------------------------------------------------------------

// ListUnspentRequest

// int32 min_confs = 1;
inline void ListUnspentRequest::clear_min_confs() {
  min_confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUnspentRequest::_internal_min_confs() const {
  return min_confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUnspentRequest::min_confs() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListUnspentRequest.min_confs)
  return _internal_min_confs();
}
inline void ListUnspentRequest::_internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_confs_ = value;
}
inline void ListUnspentRequest::set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_confs(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListUnspentRequest.min_confs)
}

// int32 max_confs = 2;
inline void ListUnspentRequest::clear_max_confs() {
  max_confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUnspentRequest::_internal_max_confs() const {
  return max_confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUnspentRequest::max_confs() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListUnspentRequest.max_confs)
  return _internal_max_confs();
}
inline void ListUnspentRequest::_internal_set_max_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_confs_ = value;
}
inline void ListUnspentRequest::set_max_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_confs(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListUnspentRequest.max_confs)
}

// string account = 3;
inline void ListUnspentRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListUnspentRequest::account() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListUnspentRequest.account)
  return _internal_account();
}
inline void ListUnspentRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListUnspentRequest.account)
}
inline std::string* ListUnspentRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListUnspentRequest.account)
  return _internal_mutable_account();
}
inline const std::string& ListUnspentRequest::_internal_account() const {
  return account_.GetNoArena();
}
inline void ListUnspentRequest::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListUnspentRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ListUnspentRequest.account)
}
inline void ListUnspentRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ListUnspentRequest.account)
}
inline void ListUnspentRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ListUnspentRequest.account)
}
inline std::string* ListUnspentRequest::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListUnspentRequest::release_account() {
  // @@protoc_insertion_point(field_release:lnrpc.ListUnspentRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListUnspentRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ListUnspentRequest.account)
}

// -------------------------------------------------------------------

// ListUnspentResponse

// repeated .lnrpc.Utxo utxos = 1;
inline int ListUnspentResponse::_internal_utxos_size() const {
  return utxos_.size();
}
inline int ListUnspentResponse::utxos_size() const {
  return _internal_utxos_size();
}
inline void ListUnspentResponse::clear_utxos() {
  utxos_.Clear();
}
inline ::lnrpc::Utxo* ListUnspentResponse::mutable_utxos(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListUnspentResponse.utxos)
  return utxos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Utxo >*
ListUnspentResponse::mutable_utxos() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListUnspentResponse.utxos)
  return &utxos_;
}
inline const ::lnrpc::Utxo& ListUnspentResponse::_internal_utxos(int index) const {
  return utxos_.Get(index);
}
inline const ::lnrpc::Utxo& ListUnspentResponse::utxos(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListUnspentResponse.utxos)
  return _internal_utxos(index);
}
inline ::lnrpc::Utxo* ListUnspentResponse::_internal_add_utxos() {
  return utxos_.Add();
}
inline ::lnrpc::Utxo* ListUnspentResponse::add_utxos() {
  // @@protoc_insertion_point(field_add:lnrpc.ListUnspentResponse.utxos)
  return _internal_add_utxos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Utxo >&
ListUnspentResponse::utxos() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListUnspentResponse.utxos)
  return utxos_;
}

// -------------------------------------------------------------------

// NewAddressRequest

// .lnrpc.AddressType type = 1;
inline void NewAddressRequest::clear_type() {
  type_ = 0;
}
inline ::lnrpc::AddressType NewAddressRequest::_internal_type() const {
  return static_cast< ::lnrpc::AddressType >(type_);
}
inline ::lnrpc::AddressType NewAddressRequest::type() const {
  // @@protoc_insertion_point(field_get:lnrpc.NewAddressRequest.type)
  return _internal_type();
}
inline void NewAddressRequest::_internal_set_type(::lnrpc::AddressType value) {
  
  type_ = value;
}
inline void NewAddressRequest::set_type(::lnrpc::AddressType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.NewAddressRequest.type)
}

// string account = 2;
inline void NewAddressRequest::clear_account() {
  account_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewAddressRequest::account() const {
  // @@protoc_insertion_point(field_get:lnrpc.NewAddressRequest.account)
  return _internal_account();
}
inline void NewAddressRequest::set_account(const std::string& value) {
  _internal_set_account(value);
  // @@protoc_insertion_point(field_set:lnrpc.NewAddressRequest.account)
}
inline std::string* NewAddressRequest::mutable_account() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NewAddressRequest.account)
  return _internal_mutable_account();
}
inline const std::string& NewAddressRequest::_internal_account() const {
  return account_.GetNoArena();
}
inline void NewAddressRequest::_internal_set_account(const std::string& value) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NewAddressRequest::set_account(std::string&& value) {
  
  account_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NewAddressRequest.account)
}
inline void NewAddressRequest::set_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NewAddressRequest.account)
}
inline void NewAddressRequest::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NewAddressRequest.account)
}
inline std::string* NewAddressRequest::_internal_mutable_account() {
  
  return account_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewAddressRequest::release_account() {
  // @@protoc_insertion_point(field_release:lnrpc.NewAddressRequest.account)
  
  return account_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewAddressRequest::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NewAddressRequest.account)
}

// -------------------------------------------------------------------

// NewAddressResponse

// string address = 1;
inline void NewAddressResponse::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NewAddressResponse::address() const {
  // @@protoc_insertion_point(field_get:lnrpc.NewAddressResponse.address)
  return _internal_address();
}
inline void NewAddressResponse::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.NewAddressResponse.address)
}
inline std::string* NewAddressResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NewAddressResponse.address)
  return _internal_mutable_address();
}
inline const std::string& NewAddressResponse::_internal_address() const {
  return address_.GetNoArena();
}
inline void NewAddressResponse::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NewAddressResponse::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NewAddressResponse.address)
}
inline void NewAddressResponse::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NewAddressResponse.address)
}
inline void NewAddressResponse::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NewAddressResponse.address)
}
inline std::string* NewAddressResponse::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NewAddressResponse::release_address() {
  // @@protoc_insertion_point(field_release:lnrpc.NewAddressResponse.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NewAddressResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NewAddressResponse.address)
}

// -------------------------------------------------------------------

// SignMessageRequest

// bytes msg = 1;
inline void SignMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:lnrpc.SignMessageRequest.msg)
  return _internal_msg();
}
inline void SignMessageRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:lnrpc.SignMessageRequest.msg)
}
inline std::string* SignMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SignMessageRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& SignMessageRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void SignMessageRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SignMessageRequest.msg)
}
inline void SignMessageRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SignMessageRequest.msg)
}
inline void SignMessageRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SignMessageRequest.msg)
}
inline std::string* SignMessageRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageRequest::release_msg() {
  // @@protoc_insertion_point(field_release:lnrpc.SignMessageRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SignMessageRequest.msg)
}

// -------------------------------------------------------------------

// SignMessageResponse

// string signature = 1;
inline void SignMessageResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SignMessageResponse::signature() const {
  // @@protoc_insertion_point(field_get:lnrpc.SignMessageResponse.signature)
  return _internal_signature();
}
inline void SignMessageResponse::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:lnrpc.SignMessageResponse.signature)
}
inline std::string* SignMessageResponse::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:lnrpc.SignMessageResponse.signature)
  return _internal_mutable_signature();
}
inline const std::string& SignMessageResponse::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void SignMessageResponse::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SignMessageResponse::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.SignMessageResponse.signature)
}
inline void SignMessageResponse::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.SignMessageResponse.signature)
}
inline std::string* SignMessageResponse::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SignMessageResponse::release_signature() {
  // @@protoc_insertion_point(field_release:lnrpc.SignMessageResponse.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SignMessageResponse::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.SignMessageResponse.signature)
}

// -------------------------------------------------------------------

// VerifyMessageRequest

// bytes msg = 1;
inline void VerifyMessageRequest::clear_msg() {
  msg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:lnrpc.VerifyMessageRequest.msg)
  return _internal_msg();
}
inline void VerifyMessageRequest::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:lnrpc.VerifyMessageRequest.msg)
}
inline std::string* VerifyMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:lnrpc.VerifyMessageRequest.msg)
  return _internal_mutable_msg();
}
inline const std::string& VerifyMessageRequest::_internal_msg() const {
  return msg_.GetNoArena();
}
inline void VerifyMessageRequest::_internal_set_msg(const std::string& value) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageRequest::set_msg(std::string&& value) {
  
  msg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.VerifyMessageRequest.msg)
}
inline void VerifyMessageRequest::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.VerifyMessageRequest.msg)
}
inline void VerifyMessageRequest::set_msg(const void* value, size_t size) {
  
  msg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.VerifyMessageRequest.msg)
}
inline std::string* VerifyMessageRequest::_internal_mutable_msg() {
  
  return msg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageRequest::release_msg() {
  // @@protoc_insertion_point(field_release:lnrpc.VerifyMessageRequest.msg)
  
  return msg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.VerifyMessageRequest.msg)
}

// string signature = 2;
inline void VerifyMessageRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageRequest::signature() const {
  // @@protoc_insertion_point(field_get:lnrpc.VerifyMessageRequest.signature)
  return _internal_signature();
}
inline void VerifyMessageRequest::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:lnrpc.VerifyMessageRequest.signature)
}
inline std::string* VerifyMessageRequest::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:lnrpc.VerifyMessageRequest.signature)
  return _internal_mutable_signature();
}
inline const std::string& VerifyMessageRequest::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void VerifyMessageRequest::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageRequest::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.VerifyMessageRequest.signature)
}
inline void VerifyMessageRequest::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.VerifyMessageRequest.signature)
}
inline std::string* VerifyMessageRequest::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageRequest::release_signature() {
  // @@protoc_insertion_point(field_release:lnrpc.VerifyMessageRequest.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageRequest::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.VerifyMessageRequest.signature)
}

// -------------------------------------------------------------------

// VerifyMessageResponse

// bool valid = 1;
inline void VerifyMessageResponse::clear_valid() {
  valid_ = false;
}
inline bool VerifyMessageResponse::_internal_valid() const {
  return valid_;
}
inline bool VerifyMessageResponse::valid() const {
  // @@protoc_insertion_point(field_get:lnrpc.VerifyMessageResponse.valid)
  return _internal_valid();
}
inline void VerifyMessageResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void VerifyMessageResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:lnrpc.VerifyMessageResponse.valid)
}

// string pubkey = 2;
inline void VerifyMessageResponse::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& VerifyMessageResponse::pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.VerifyMessageResponse.pubkey)
  return _internal_pubkey();
}
inline void VerifyMessageResponse::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.VerifyMessageResponse.pubkey)
}
inline std::string* VerifyMessageResponse::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.VerifyMessageResponse.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& VerifyMessageResponse::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void VerifyMessageResponse::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void VerifyMessageResponse::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.VerifyMessageResponse.pubkey)
}
inline void VerifyMessageResponse::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.VerifyMessageResponse.pubkey)
}
inline void VerifyMessageResponse::set_pubkey(const char* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.VerifyMessageResponse.pubkey)
}
inline std::string* VerifyMessageResponse::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* VerifyMessageResponse::release_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.VerifyMessageResponse.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void VerifyMessageResponse::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.VerifyMessageResponse.pubkey)
}

// -------------------------------------------------------------------

// ConnectPeerRequest

// .lnrpc.LightningAddress addr = 1;
inline bool ConnectPeerRequest::_internal_has_addr() const {
  return this != internal_default_instance() && addr_ != nullptr;
}
inline bool ConnectPeerRequest::has_addr() const {
  return _internal_has_addr();
}
inline void ConnectPeerRequest::clear_addr() {
  if (GetArenaNoVirtual() == nullptr && addr_ != nullptr) {
    delete addr_;
  }
  addr_ = nullptr;
}
inline const ::lnrpc::LightningAddress& ConnectPeerRequest::_internal_addr() const {
  const ::lnrpc::LightningAddress* p = addr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::LightningAddress*>(
      &::lnrpc::_LightningAddress_default_instance_);
}
inline const ::lnrpc::LightningAddress& ConnectPeerRequest::addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConnectPeerRequest.addr)
  return _internal_addr();
}
inline ::lnrpc::LightningAddress* ConnectPeerRequest::release_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.ConnectPeerRequest.addr)
  
  ::lnrpc::LightningAddress* temp = addr_;
  addr_ = nullptr;
  return temp;
}
inline ::lnrpc::LightningAddress* ConnectPeerRequest::_internal_mutable_addr() {
  
  if (addr_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::LightningAddress>(GetArenaNoVirtual());
    addr_ = p;
  }
  return addr_;
}
inline ::lnrpc::LightningAddress* ConnectPeerRequest::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ConnectPeerRequest.addr)
  return _internal_mutable_addr();
}
inline void ConnectPeerRequest::set_allocated_addr(::lnrpc::LightningAddress* addr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete addr_;
  }
  if (addr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, addr, submessage_arena);
    }
    
  } else {
    
  }
  addr_ = addr;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ConnectPeerRequest.addr)
}

// bool perm = 2;
inline void ConnectPeerRequest::clear_perm() {
  perm_ = false;
}
inline bool ConnectPeerRequest::_internal_perm() const {
  return perm_;
}
inline bool ConnectPeerRequest::perm() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConnectPeerRequest.perm)
  return _internal_perm();
}
inline void ConnectPeerRequest::_internal_set_perm(bool value) {
  
  perm_ = value;
}
inline void ConnectPeerRequest::set_perm(bool value) {
  _internal_set_perm(value);
  // @@protoc_insertion_point(field_set:lnrpc.ConnectPeerRequest.perm)
}

// uint64 timeout = 3;
inline void ConnectPeerRequest::clear_timeout() {
  timeout_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectPeerRequest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectPeerRequest::timeout() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConnectPeerRequest.timeout)
  return _internal_timeout();
}
inline void ConnectPeerRequest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timeout_ = value;
}
inline void ConnectPeerRequest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:lnrpc.ConnectPeerRequest.timeout)
}

// -------------------------------------------------------------------

// ConnectPeerResponse

// -------------------------------------------------------------------

// DisconnectPeerRequest

// string pub_key = 1;
inline void DisconnectPeerRequest::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DisconnectPeerRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.DisconnectPeerRequest.pub_key)
  return _internal_pub_key();
}
inline void DisconnectPeerRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.DisconnectPeerRequest.pub_key)
}
inline std::string* DisconnectPeerRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.DisconnectPeerRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& DisconnectPeerRequest::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void DisconnectPeerRequest::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DisconnectPeerRequest::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.DisconnectPeerRequest.pub_key)
}
inline void DisconnectPeerRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.DisconnectPeerRequest.pub_key)
}
inline void DisconnectPeerRequest::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.DisconnectPeerRequest.pub_key)
}
inline std::string* DisconnectPeerRequest::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DisconnectPeerRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.DisconnectPeerRequest.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DisconnectPeerRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.DisconnectPeerRequest.pub_key)
}

// -------------------------------------------------------------------

// DisconnectPeerResponse

// -------------------------------------------------------------------

// HTLC

// bool incoming = 1;
inline void HTLC::clear_incoming() {
  incoming_ = false;
}
inline bool HTLC::_internal_incoming() const {
  return incoming_;
}
inline bool HTLC::incoming() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.incoming)
  return _internal_incoming();
}
inline void HTLC::_internal_set_incoming(bool value) {
  
  incoming_ = value;
}
inline void HTLC::set_incoming(bool value) {
  _internal_set_incoming(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.incoming)
}

// int64 amount = 2;
inline void HTLC::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLC::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLC::amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.amount)
  return _internal_amount();
}
inline void HTLC::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void HTLC::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.amount)
}

// bytes hash_lock = 3;
inline void HTLC::clear_hash_lock() {
  hash_lock_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HTLC::hash_lock() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.hash_lock)
  return _internal_hash_lock();
}
inline void HTLC::set_hash_lock(const std::string& value) {
  _internal_set_hash_lock(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.hash_lock)
}
inline std::string* HTLC::mutable_hash_lock() {
  // @@protoc_insertion_point(field_mutable:lnrpc.HTLC.hash_lock)
  return _internal_mutable_hash_lock();
}
inline const std::string& HTLC::_internal_hash_lock() const {
  return hash_lock_.GetNoArena();
}
inline void HTLC::_internal_set_hash_lock(const std::string& value) {
  
  hash_lock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HTLC::set_hash_lock(std::string&& value) {
  
  hash_lock_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.HTLC.hash_lock)
}
inline void HTLC::set_hash_lock(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_lock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.HTLC.hash_lock)
}
inline void HTLC::set_hash_lock(const void* value, size_t size) {
  
  hash_lock_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.HTLC.hash_lock)
}
inline std::string* HTLC::_internal_mutable_hash_lock() {
  
  return hash_lock_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HTLC::release_hash_lock() {
  // @@protoc_insertion_point(field_release:lnrpc.HTLC.hash_lock)
  
  return hash_lock_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HTLC::set_allocated_hash_lock(std::string* hash_lock) {
  if (hash_lock != nullptr) {
    
  } else {
    
  }
  hash_lock_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash_lock);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.HTLC.hash_lock)
}

// uint32 expiration_height = 4;
inline void HTLC::clear_expiration_height() {
  expiration_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTLC::_internal_expiration_height() const {
  return expiration_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTLC::expiration_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.expiration_height)
  return _internal_expiration_height();
}
inline void HTLC::_internal_set_expiration_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiration_height_ = value;
}
inline void HTLC::set_expiration_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiration_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.expiration_height)
}

// uint64 htlc_index = 5;
inline void HTLC::clear_htlc_index() {
  htlc_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::_internal_htlc_index() const {
  return htlc_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::htlc_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.htlc_index)
  return _internal_htlc_index();
}
inline void HTLC::_internal_set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  htlc_index_ = value;
}
inline void HTLC::set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_htlc_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.htlc_index)
}

// uint64 forwarding_channel = 6;
inline void HTLC::clear_forwarding_channel() {
  forwarding_channel_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::_internal_forwarding_channel() const {
  return forwarding_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::forwarding_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.forwarding_channel)
  return _internal_forwarding_channel();
}
inline void HTLC::_internal_set_forwarding_channel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  forwarding_channel_ = value;
}
inline void HTLC::set_forwarding_channel(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_forwarding_channel(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.forwarding_channel)
}

// uint64 forwarding_htlc_index = 7;
inline void HTLC::clear_forwarding_htlc_index() {
  forwarding_htlc_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::_internal_forwarding_htlc_index() const {
  return forwarding_htlc_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLC::forwarding_htlc_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLC.forwarding_htlc_index)
  return _internal_forwarding_htlc_index();
}
inline void HTLC::_internal_set_forwarding_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  forwarding_htlc_index_ = value;
}
inline void HTLC::set_forwarding_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_forwarding_htlc_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLC.forwarding_htlc_index)
}

// -------------------------------------------------------------------

// ChannelConstraints

// uint32 csv_delay = 1;
inline void ChannelConstraints::clear_csv_delay() {
  csv_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConstraints::_internal_csv_delay() const {
  return csv_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConstraints::csv_delay() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.csv_delay)
  return _internal_csv_delay();
}
inline void ChannelConstraints::_internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  csv_delay_ = value;
}
inline void ChannelConstraints::set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_csv_delay(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.csv_delay)
}

// uint64 chan_reserve_sat = 2;
inline void ChannelConstraints::clear_chan_reserve_sat() {
  chan_reserve_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::_internal_chan_reserve_sat() const {
  return chan_reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::chan_reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.chan_reserve_sat)
  return _internal_chan_reserve_sat();
}
inline void ChannelConstraints::_internal_set_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_reserve_sat_ = value;
}
inline void ChannelConstraints::set_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.chan_reserve_sat)
}

// uint64 dust_limit_sat = 3;
inline void ChannelConstraints::clear_dust_limit_sat() {
  dust_limit_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::_internal_dust_limit_sat() const {
  return dust_limit_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::dust_limit_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.dust_limit_sat)
  return _internal_dust_limit_sat();
}
inline void ChannelConstraints::_internal_set_dust_limit_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  dust_limit_sat_ = value;
}
inline void ChannelConstraints::set_dust_limit_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_dust_limit_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.dust_limit_sat)
}

// uint64 max_pending_amt_msat = 4;
inline void ChannelConstraints::clear_max_pending_amt_msat() {
  max_pending_amt_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::_internal_max_pending_amt_msat() const {
  return max_pending_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::max_pending_amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.max_pending_amt_msat)
  return _internal_max_pending_amt_msat();
}
inline void ChannelConstraints::_internal_set_max_pending_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_pending_amt_msat_ = value;
}
inline void ChannelConstraints::set_max_pending_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_pending_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.max_pending_amt_msat)
}

// uint64 min_htlc_msat = 5;
inline void ChannelConstraints::clear_min_htlc_msat() {
  min_htlc_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::_internal_min_htlc_msat() const {
  return min_htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelConstraints::min_htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.min_htlc_msat)
  return _internal_min_htlc_msat();
}
inline void ChannelConstraints::_internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_htlc_msat_ = value;
}
inline void ChannelConstraints::set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.min_htlc_msat)
}

// uint32 max_accepted_htlcs = 6;
inline void ChannelConstraints::clear_max_accepted_htlcs() {
  max_accepted_htlcs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConstraints::_internal_max_accepted_htlcs() const {
  return max_accepted_htlcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelConstraints::max_accepted_htlcs() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelConstraints.max_accepted_htlcs)
  return _internal_max_accepted_htlcs();
}
inline void ChannelConstraints::_internal_set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_accepted_htlcs_ = value;
}
inline void ChannelConstraints::set_max_accepted_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_accepted_htlcs(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelConstraints.max_accepted_htlcs)
}

// -------------------------------------------------------------------

// Channel

// bool active = 1;
inline void Channel::clear_active() {
  active_ = false;
}
inline bool Channel::_internal_active() const {
  return active_;
}
inline bool Channel::active() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.active)
  return _internal_active();
}
inline void Channel::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Channel::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.active)
}

// string remote_pubkey = 2;
inline void Channel::clear_remote_pubkey() {
  remote_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::remote_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.remote_pubkey)
  return _internal_remote_pubkey();
}
inline void Channel::set_remote_pubkey(const std::string& value) {
  _internal_set_remote_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.remote_pubkey)
}
inline std::string* Channel::mutable_remote_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.remote_pubkey)
  return _internal_mutable_remote_pubkey();
}
inline const std::string& Channel::_internal_remote_pubkey() const {
  return remote_pubkey_.GetNoArena();
}
inline void Channel::_internal_set_remote_pubkey(const std::string& value) {
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_remote_pubkey(std::string&& value) {
  
  remote_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Channel.remote_pubkey)
}
inline void Channel::set_remote_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Channel.remote_pubkey)
}
inline void Channel::set_remote_pubkey(const char* value, size_t size) {
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Channel.remote_pubkey)
}
inline std::string* Channel::_internal_mutable_remote_pubkey() {
  
  return remote_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_remote_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.remote_pubkey)
  
  return remote_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_remote_pubkey(std::string* remote_pubkey) {
  if (remote_pubkey != nullptr) {
    
  } else {
    
  }
  remote_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.remote_pubkey)
}

// string channel_point = 3;
inline void Channel::clear_channel_point() {
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.channel_point)
  return _internal_channel_point();
}
inline void Channel::set_channel_point(const std::string& value) {
  _internal_set_channel_point(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.channel_point)
}
inline std::string* Channel::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.channel_point)
  return _internal_mutable_channel_point();
}
inline const std::string& Channel::_internal_channel_point() const {
  return channel_point_.GetNoArena();
}
inline void Channel::_internal_set_channel_point(const std::string& value) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_channel_point(std::string&& value) {
  
  channel_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Channel.channel_point)
}
inline void Channel::set_channel_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Channel.channel_point)
}
inline void Channel::set_channel_point(const char* value, size_t size) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Channel.channel_point)
}
inline std::string* Channel::_internal_mutable_channel_point() {
  
  return channel_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.channel_point)
  
  return channel_point_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_channel_point(std::string* channel_point) {
  if (channel_point != nullptr) {
    
  } else {
    
  }
  channel_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_point);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.channel_point)
}

// uint64 chan_id = 4 [jstype = JS_STRING];
inline void Channel::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.chan_id)
  return _internal_chan_id();
}
inline void Channel::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void Channel::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.chan_id)
}

// int64 capacity = 5;
inline void Channel::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.capacity)
  return _internal_capacity();
}
inline void Channel::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void Channel::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.capacity)
}

// int64 local_balance = 6;
inline void Channel::clear_local_balance() {
  local_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_local_balance() const {
  return local_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::local_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.local_balance)
  return _internal_local_balance();
}
inline void Channel::_internal_set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_balance_ = value;
}
inline void Channel::set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.local_balance)
}

// int64 remote_balance = 7;
inline void Channel::clear_remote_balance() {
  remote_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_remote_balance() const {
  return remote_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::remote_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.remote_balance)
  return _internal_remote_balance();
}
inline void Channel::_internal_set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remote_balance_ = value;
}
inline void Channel::set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remote_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.remote_balance)
}

// int64 commit_fee = 8;
inline void Channel::clear_commit_fee() {
  commit_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_commit_fee() const {
  return commit_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::commit_fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.commit_fee)
  return _internal_commit_fee();
}
inline void Channel::_internal_set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commit_fee_ = value;
}
inline void Channel::set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commit_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.commit_fee)
}

// int64 commit_weight = 9;
inline void Channel::clear_commit_weight() {
  commit_weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_commit_weight() const {
  return commit_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::commit_weight() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.commit_weight)
  return _internal_commit_weight();
}
inline void Channel::_internal_set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commit_weight_ = value;
}
inline void Channel::set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commit_weight(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.commit_weight)
}

// int64 fee_per_kw = 10;
inline void Channel::clear_fee_per_kw() {
  fee_per_kw_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_fee_per_kw() const {
  return fee_per_kw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::fee_per_kw() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.fee_per_kw)
  return _internal_fee_per_kw();
}
inline void Channel::_internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_per_kw_ = value;
}
inline void Channel::set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_per_kw(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.fee_per_kw)
}

// int64 unsettled_balance = 11;
inline void Channel::clear_unsettled_balance() {
  unsettled_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_unsettled_balance() const {
  return unsettled_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::unsettled_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.unsettled_balance)
  return _internal_unsettled_balance();
}
inline void Channel::_internal_set_unsettled_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unsettled_balance_ = value;
}
inline void Channel::set_unsettled_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unsettled_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.unsettled_balance)
}

// int64 total_satoshis_sent = 12;
inline void Channel::clear_total_satoshis_sent() {
  total_satoshis_sent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_total_satoshis_sent() const {
  return total_satoshis_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::total_satoshis_sent() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.total_satoshis_sent)
  return _internal_total_satoshis_sent();
}
inline void Channel::_internal_set_total_satoshis_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_satoshis_sent_ = value;
}
inline void Channel::set_total_satoshis_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_satoshis_sent(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.total_satoshis_sent)
}

// int64 total_satoshis_received = 13;
inline void Channel::clear_total_satoshis_received() {
  total_satoshis_received_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_total_satoshis_received() const {
  return total_satoshis_received_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::total_satoshis_received() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.total_satoshis_received)
  return _internal_total_satoshis_received();
}
inline void Channel::_internal_set_total_satoshis_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_satoshis_received_ = value;
}
inline void Channel::set_total_satoshis_received(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_satoshis_received(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.total_satoshis_received)
}

// uint64 num_updates = 14;
inline void Channel::clear_num_updates() {
  num_updates_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::_internal_num_updates() const {
  return num_updates_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::num_updates() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.num_updates)
  return _internal_num_updates();
}
inline void Channel::_internal_set_num_updates(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_updates_ = value;
}
inline void Channel::set_num_updates(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_updates(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.num_updates)
}

// repeated .lnrpc.HTLC pending_htlcs = 15;
inline int Channel::_internal_pending_htlcs_size() const {
  return pending_htlcs_.size();
}
inline int Channel::pending_htlcs_size() const {
  return _internal_pending_htlcs_size();
}
inline void Channel::clear_pending_htlcs() {
  pending_htlcs_.Clear();
}
inline ::lnrpc::HTLC* Channel::mutable_pending_htlcs(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.pending_htlcs)
  return pending_htlcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLC >*
Channel::mutable_pending_htlcs() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Channel.pending_htlcs)
  return &pending_htlcs_;
}
inline const ::lnrpc::HTLC& Channel::_internal_pending_htlcs(int index) const {
  return pending_htlcs_.Get(index);
}
inline const ::lnrpc::HTLC& Channel::pending_htlcs(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.pending_htlcs)
  return _internal_pending_htlcs(index);
}
inline ::lnrpc::HTLC* Channel::_internal_add_pending_htlcs() {
  return pending_htlcs_.Add();
}
inline ::lnrpc::HTLC* Channel::add_pending_htlcs() {
  // @@protoc_insertion_point(field_add:lnrpc.Channel.pending_htlcs)
  return _internal_add_pending_htlcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLC >&
Channel::pending_htlcs() const {
  // @@protoc_insertion_point(field_list:lnrpc.Channel.pending_htlcs)
  return pending_htlcs_;
}

// uint32 csv_delay = 16 [deprecated = true];
inline void Channel::clear_csv_delay() {
  csv_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::_internal_csv_delay() const {
  return csv_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::csv_delay() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.csv_delay)
  return _internal_csv_delay();
}
inline void Channel::_internal_set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  csv_delay_ = value;
}
inline void Channel::set_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_csv_delay(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.csv_delay)
}

// bool private = 17;
inline void Channel::clear_private_() {
  private__ = false;
}
inline bool Channel::_internal_private_() const {
  return private__;
}
inline bool Channel::private_() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.private)
  return _internal_private_();
}
inline void Channel::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void Channel::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.private)
}

// bool initiator = 18;
inline void Channel::clear_initiator() {
  initiator_ = false;
}
inline bool Channel::_internal_initiator() const {
  return initiator_;
}
inline bool Channel::initiator() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.initiator)
  return _internal_initiator();
}
inline void Channel::_internal_set_initiator(bool value) {
  
  initiator_ = value;
}
inline void Channel::set_initiator(bool value) {
  _internal_set_initiator(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.initiator)
}

// string chan_status_flags = 19;
inline void Channel::clear_chan_status_flags() {
  chan_status_flags_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::chan_status_flags() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.chan_status_flags)
  return _internal_chan_status_flags();
}
inline void Channel::set_chan_status_flags(const std::string& value) {
  _internal_set_chan_status_flags(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.chan_status_flags)
}
inline std::string* Channel::mutable_chan_status_flags() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.chan_status_flags)
  return _internal_mutable_chan_status_flags();
}
inline const std::string& Channel::_internal_chan_status_flags() const {
  return chan_status_flags_.GetNoArena();
}
inline void Channel::_internal_set_chan_status_flags(const std::string& value) {
  
  chan_status_flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_chan_status_flags(std::string&& value) {
  
  chan_status_flags_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Channel.chan_status_flags)
}
inline void Channel::set_chan_status_flags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chan_status_flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Channel.chan_status_flags)
}
inline void Channel::set_chan_status_flags(const char* value, size_t size) {
  
  chan_status_flags_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Channel.chan_status_flags)
}
inline std::string* Channel::_internal_mutable_chan_status_flags() {
  
  return chan_status_flags_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_chan_status_flags() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.chan_status_flags)
  
  return chan_status_flags_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_chan_status_flags(std::string* chan_status_flags) {
  if (chan_status_flags != nullptr) {
    
  } else {
    
  }
  chan_status_flags_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chan_status_flags);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.chan_status_flags)
}

// int64 local_chan_reserve_sat = 20 [deprecated = true];
inline void Channel::clear_local_chan_reserve_sat() {
  local_chan_reserve_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_local_chan_reserve_sat() const {
  return local_chan_reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::local_chan_reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.local_chan_reserve_sat)
  return _internal_local_chan_reserve_sat();
}
inline void Channel::_internal_set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_chan_reserve_sat_ = value;
}
inline void Channel::set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_chan_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.local_chan_reserve_sat)
}

// int64 remote_chan_reserve_sat = 21 [deprecated = true];
inline void Channel::clear_remote_chan_reserve_sat() {
  remote_chan_reserve_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_remote_chan_reserve_sat() const {
  return remote_chan_reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::remote_chan_reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.remote_chan_reserve_sat)
  return _internal_remote_chan_reserve_sat();
}
inline void Channel::_internal_set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remote_chan_reserve_sat_ = value;
}
inline void Channel::set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remote_chan_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.remote_chan_reserve_sat)
}

// bool static_remote_key = 22 [deprecated = true];
inline void Channel::clear_static_remote_key() {
  static_remote_key_ = false;
}
inline bool Channel::_internal_static_remote_key() const {
  return static_remote_key_;
}
inline bool Channel::static_remote_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.static_remote_key)
  return _internal_static_remote_key();
}
inline void Channel::_internal_set_static_remote_key(bool value) {
  
  static_remote_key_ = value;
}
inline void Channel::set_static_remote_key(bool value) {
  _internal_set_static_remote_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.static_remote_key)
}

// .lnrpc.CommitmentType commitment_type = 26;
inline void Channel::clear_commitment_type() {
  commitment_type_ = 0;
}
inline ::lnrpc::CommitmentType Channel::_internal_commitment_type() const {
  return static_cast< ::lnrpc::CommitmentType >(commitment_type_);
}
inline ::lnrpc::CommitmentType Channel::commitment_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.commitment_type)
  return _internal_commitment_type();
}
inline void Channel::_internal_set_commitment_type(::lnrpc::CommitmentType value) {
  
  commitment_type_ = value;
}
inline void Channel::set_commitment_type(::lnrpc::CommitmentType value) {
  _internal_set_commitment_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.commitment_type)
}

// int64 lifetime = 23;
inline void Channel::clear_lifetime() {
  lifetime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_lifetime() const {
  return lifetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::lifetime() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.lifetime)
  return _internal_lifetime();
}
inline void Channel::_internal_set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetime_ = value;
}
inline void Channel::set_lifetime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.lifetime)
}

// int64 uptime = 24;
inline void Channel::clear_uptime() {
  uptime_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::_internal_uptime() const {
  return uptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Channel::uptime() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.uptime)
  return _internal_uptime();
}
inline void Channel::_internal_set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uptime_ = value;
}
inline void Channel::set_uptime(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_uptime(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.uptime)
}

// string close_address = 25;
inline void Channel::clear_close_address() {
  close_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Channel::close_address() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.close_address)
  return _internal_close_address();
}
inline void Channel::set_close_address(const std::string& value) {
  _internal_set_close_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.close_address)
}
inline std::string* Channel::mutable_close_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.close_address)
  return _internal_mutable_close_address();
}
inline const std::string& Channel::_internal_close_address() const {
  return close_address_.GetNoArena();
}
inline void Channel::_internal_set_close_address(const std::string& value) {
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Channel::set_close_address(std::string&& value) {
  
  close_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Channel.close_address)
}
inline void Channel::set_close_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Channel.close_address)
}
inline void Channel::set_close_address(const char* value, size_t size) {
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Channel.close_address)
}
inline std::string* Channel::_internal_mutable_close_address() {
  
  return close_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Channel::release_close_address() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.close_address)
  
  return close_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Channel::set_allocated_close_address(std::string* close_address) {
  if (close_address != nullptr) {
    
  } else {
    
  }
  close_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.close_address)
}

// uint64 push_amount_sat = 27;
inline void Channel::clear_push_amount_sat() {
  push_amount_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::_internal_push_amount_sat() const {
  return push_amount_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Channel::push_amount_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.push_amount_sat)
  return _internal_push_amount_sat();
}
inline void Channel::_internal_set_push_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  push_amount_sat_ = value;
}
inline void Channel::set_push_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_push_amount_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.push_amount_sat)
}

// uint32 thaw_height = 28;
inline void Channel::clear_thaw_height() {
  thaw_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::_internal_thaw_height() const {
  return thaw_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Channel::thaw_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.thaw_height)
  return _internal_thaw_height();
}
inline void Channel::_internal_set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thaw_height_ = value;
}
inline void Channel::set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thaw_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.Channel.thaw_height)
}

// .lnrpc.ChannelConstraints local_constraints = 29;
inline bool Channel::_internal_has_local_constraints() const {
  return this != internal_default_instance() && local_constraints_ != nullptr;
}
inline bool Channel::has_local_constraints() const {
  return _internal_has_local_constraints();
}
inline void Channel::clear_local_constraints() {
  if (GetArenaNoVirtual() == nullptr && local_constraints_ != nullptr) {
    delete local_constraints_;
  }
  local_constraints_ = nullptr;
}
inline const ::lnrpc::ChannelConstraints& Channel::_internal_local_constraints() const {
  const ::lnrpc::ChannelConstraints* p = local_constraints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelConstraints*>(
      &::lnrpc::_ChannelConstraints_default_instance_);
}
inline const ::lnrpc::ChannelConstraints& Channel::local_constraints() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.local_constraints)
  return _internal_local_constraints();
}
inline ::lnrpc::ChannelConstraints* Channel::release_local_constraints() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.local_constraints)
  
  ::lnrpc::ChannelConstraints* temp = local_constraints_;
  local_constraints_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelConstraints* Channel::_internal_mutable_local_constraints() {
  
  if (local_constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelConstraints>(GetArenaNoVirtual());
    local_constraints_ = p;
  }
  return local_constraints_;
}
inline ::lnrpc::ChannelConstraints* Channel::mutable_local_constraints() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.local_constraints)
  return _internal_mutable_local_constraints();
}
inline void Channel::set_allocated_local_constraints(::lnrpc::ChannelConstraints* local_constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_constraints_;
  }
  if (local_constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_constraints, submessage_arena);
    }
    
  } else {
    
  }
  local_constraints_ = local_constraints;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.local_constraints)
}

// .lnrpc.ChannelConstraints remote_constraints = 30;
inline bool Channel::_internal_has_remote_constraints() const {
  return this != internal_default_instance() && remote_constraints_ != nullptr;
}
inline bool Channel::has_remote_constraints() const {
  return _internal_has_remote_constraints();
}
inline void Channel::clear_remote_constraints() {
  if (GetArenaNoVirtual() == nullptr && remote_constraints_ != nullptr) {
    delete remote_constraints_;
  }
  remote_constraints_ = nullptr;
}
inline const ::lnrpc::ChannelConstraints& Channel::_internal_remote_constraints() const {
  const ::lnrpc::ChannelConstraints* p = remote_constraints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelConstraints*>(
      &::lnrpc::_ChannelConstraints_default_instance_);
}
inline const ::lnrpc::ChannelConstraints& Channel::remote_constraints() const {
  // @@protoc_insertion_point(field_get:lnrpc.Channel.remote_constraints)
  return _internal_remote_constraints();
}
inline ::lnrpc::ChannelConstraints* Channel::release_remote_constraints() {
  // @@protoc_insertion_point(field_release:lnrpc.Channel.remote_constraints)
  
  ::lnrpc::ChannelConstraints* temp = remote_constraints_;
  remote_constraints_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelConstraints* Channel::_internal_mutable_remote_constraints() {
  
  if (remote_constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelConstraints>(GetArenaNoVirtual());
    remote_constraints_ = p;
  }
  return remote_constraints_;
}
inline ::lnrpc::ChannelConstraints* Channel::mutable_remote_constraints() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Channel.remote_constraints)
  return _internal_mutable_remote_constraints();
}
inline void Channel::set_allocated_remote_constraints(::lnrpc::ChannelConstraints* remote_constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete remote_constraints_;
  }
  if (remote_constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_constraints, submessage_arena);
    }
    
  } else {
    
  }
  remote_constraints_ = remote_constraints;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Channel.remote_constraints)
}

// -------------------------------------------------------------------

// ListChannelsRequest

// bool active_only = 1;
inline void ListChannelsRequest::clear_active_only() {
  active_only_ = false;
}
inline bool ListChannelsRequest::_internal_active_only() const {
  return active_only_;
}
inline bool ListChannelsRequest::active_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsRequest.active_only)
  return _internal_active_only();
}
inline void ListChannelsRequest::_internal_set_active_only(bool value) {
  
  active_only_ = value;
}
inline void ListChannelsRequest::set_active_only(bool value) {
  _internal_set_active_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListChannelsRequest.active_only)
}

// bool inactive_only = 2;
inline void ListChannelsRequest::clear_inactive_only() {
  inactive_only_ = false;
}
inline bool ListChannelsRequest::_internal_inactive_only() const {
  return inactive_only_;
}
inline bool ListChannelsRequest::inactive_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsRequest.inactive_only)
  return _internal_inactive_only();
}
inline void ListChannelsRequest::_internal_set_inactive_only(bool value) {
  
  inactive_only_ = value;
}
inline void ListChannelsRequest::set_inactive_only(bool value) {
  _internal_set_inactive_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListChannelsRequest.inactive_only)
}

// bool public_only = 3;
inline void ListChannelsRequest::clear_public_only() {
  public_only_ = false;
}
inline bool ListChannelsRequest::_internal_public_only() const {
  return public_only_;
}
inline bool ListChannelsRequest::public_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsRequest.public_only)
  return _internal_public_only();
}
inline void ListChannelsRequest::_internal_set_public_only(bool value) {
  
  public_only_ = value;
}
inline void ListChannelsRequest::set_public_only(bool value) {
  _internal_set_public_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListChannelsRequest.public_only)
}

// bool private_only = 4;
inline void ListChannelsRequest::clear_private_only() {
  private_only_ = false;
}
inline bool ListChannelsRequest::_internal_private_only() const {
  return private_only_;
}
inline bool ListChannelsRequest::private_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsRequest.private_only)
  return _internal_private_only();
}
inline void ListChannelsRequest::_internal_set_private_only(bool value) {
  
  private_only_ = value;
}
inline void ListChannelsRequest::set_private_only(bool value) {
  _internal_set_private_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListChannelsRequest.private_only)
}

// bytes peer = 5;
inline void ListChannelsRequest::clear_peer() {
  peer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListChannelsRequest::peer() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsRequest.peer)
  return _internal_peer();
}
inline void ListChannelsRequest::set_peer(const std::string& value) {
  _internal_set_peer(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListChannelsRequest.peer)
}
inline std::string* ListChannelsRequest::mutable_peer() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListChannelsRequest.peer)
  return _internal_mutable_peer();
}
inline const std::string& ListChannelsRequest::_internal_peer() const {
  return peer_.GetNoArena();
}
inline void ListChannelsRequest::_internal_set_peer(const std::string& value) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListChannelsRequest::set_peer(std::string&& value) {
  
  peer_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ListChannelsRequest.peer)
}
inline void ListChannelsRequest::set_peer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ListChannelsRequest.peer)
}
inline void ListChannelsRequest::set_peer(const void* value, size_t size) {
  
  peer_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ListChannelsRequest.peer)
}
inline std::string* ListChannelsRequest::_internal_mutable_peer() {
  
  return peer_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListChannelsRequest::release_peer() {
  // @@protoc_insertion_point(field_release:lnrpc.ListChannelsRequest.peer)
  
  return peer_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListChannelsRequest::set_allocated_peer(std::string* peer) {
  if (peer != nullptr) {
    
  } else {
    
  }
  peer_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ListChannelsRequest.peer)
}

// -------------------------------------------------------------------

// ListChannelsResponse

// repeated .lnrpc.Channel channels = 11;
inline int ListChannelsResponse::_internal_channels_size() const {
  return channels_.size();
}
inline int ListChannelsResponse::channels_size() const {
  return _internal_channels_size();
}
inline void ListChannelsResponse::clear_channels() {
  channels_.Clear();
}
inline ::lnrpc::Channel* ListChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListChannelsResponse.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Channel >*
ListChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListChannelsResponse.channels)
  return &channels_;
}
inline const ::lnrpc::Channel& ListChannelsResponse::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::lnrpc::Channel& ListChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListChannelsResponse.channels)
  return _internal_channels(index);
}
inline ::lnrpc::Channel* ListChannelsResponse::_internal_add_channels() {
  return channels_.Add();
}
inline ::lnrpc::Channel* ListChannelsResponse::add_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.ListChannelsResponse.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Channel >&
ListChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListChannelsResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// ChannelCloseSummary

// string channel_point = 1;
inline void ChannelCloseSummary::clear_channel_point() {
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelCloseSummary::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.channel_point)
  return _internal_channel_point();
}
inline void ChannelCloseSummary::set_channel_point(const std::string& value) {
  _internal_set_channel_point(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.channel_point)
}
inline std::string* ChannelCloseSummary::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseSummary.channel_point)
  return _internal_mutable_channel_point();
}
inline const std::string& ChannelCloseSummary::_internal_channel_point() const {
  return channel_point_.GetNoArena();
}
inline void ChannelCloseSummary::_internal_set_channel_point(const std::string& value) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelCloseSummary::set_channel_point(std::string&& value) {
  
  channel_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelCloseSummary.channel_point)
}
inline void ChannelCloseSummary::set_channel_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelCloseSummary.channel_point)
}
inline void ChannelCloseSummary::set_channel_point(const char* value, size_t size) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelCloseSummary.channel_point)
}
inline std::string* ChannelCloseSummary::_internal_mutable_channel_point() {
  
  return channel_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelCloseSummary::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelCloseSummary.channel_point)
  
  return channel_point_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCloseSummary::set_allocated_channel_point(std::string* channel_point) {
  if (channel_point != nullptr) {
    
  } else {
    
  }
  channel_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_point);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelCloseSummary.channel_point)
}

// uint64 chan_id = 2 [jstype = JS_STRING];
inline void ChannelCloseSummary::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelCloseSummary::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelCloseSummary::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.chan_id)
  return _internal_chan_id();
}
inline void ChannelCloseSummary::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ChannelCloseSummary::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.chan_id)
}

// string chain_hash = 3;
inline void ChannelCloseSummary::clear_chain_hash() {
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelCloseSummary::chain_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.chain_hash)
  return _internal_chain_hash();
}
inline void ChannelCloseSummary::set_chain_hash(const std::string& value) {
  _internal_set_chain_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.chain_hash)
}
inline std::string* ChannelCloseSummary::mutable_chain_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseSummary.chain_hash)
  return _internal_mutable_chain_hash();
}
inline const std::string& ChannelCloseSummary::_internal_chain_hash() const {
  return chain_hash_.GetNoArena();
}
inline void ChannelCloseSummary::_internal_set_chain_hash(const std::string& value) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelCloseSummary::set_chain_hash(std::string&& value) {
  
  chain_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelCloseSummary.chain_hash)
}
inline void ChannelCloseSummary::set_chain_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelCloseSummary.chain_hash)
}
inline void ChannelCloseSummary::set_chain_hash(const char* value, size_t size) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelCloseSummary.chain_hash)
}
inline std::string* ChannelCloseSummary::_internal_mutable_chain_hash() {
  
  return chain_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelCloseSummary::release_chain_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelCloseSummary.chain_hash)
  
  return chain_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCloseSummary::set_allocated_chain_hash(std::string* chain_hash) {
  if (chain_hash != nullptr) {
    
  } else {
    
  }
  chain_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelCloseSummary.chain_hash)
}

// string closing_tx_hash = 4;
inline void ChannelCloseSummary::clear_closing_tx_hash() {
  closing_tx_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelCloseSummary::closing_tx_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.closing_tx_hash)
  return _internal_closing_tx_hash();
}
inline void ChannelCloseSummary::set_closing_tx_hash(const std::string& value) {
  _internal_set_closing_tx_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.closing_tx_hash)
}
inline std::string* ChannelCloseSummary::mutable_closing_tx_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseSummary.closing_tx_hash)
  return _internal_mutable_closing_tx_hash();
}
inline const std::string& ChannelCloseSummary::_internal_closing_tx_hash() const {
  return closing_tx_hash_.GetNoArena();
}
inline void ChannelCloseSummary::_internal_set_closing_tx_hash(const std::string& value) {
  
  closing_tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelCloseSummary::set_closing_tx_hash(std::string&& value) {
  
  closing_tx_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelCloseSummary.closing_tx_hash)
}
inline void ChannelCloseSummary::set_closing_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closing_tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelCloseSummary.closing_tx_hash)
}
inline void ChannelCloseSummary::set_closing_tx_hash(const char* value, size_t size) {
  
  closing_tx_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelCloseSummary.closing_tx_hash)
}
inline std::string* ChannelCloseSummary::_internal_mutable_closing_tx_hash() {
  
  return closing_tx_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelCloseSummary::release_closing_tx_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelCloseSummary.closing_tx_hash)
  
  return closing_tx_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCloseSummary::set_allocated_closing_tx_hash(std::string* closing_tx_hash) {
  if (closing_tx_hash != nullptr) {
    
  } else {
    
  }
  closing_tx_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closing_tx_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelCloseSummary.closing_tx_hash)
}

// string remote_pubkey = 5;
inline void ChannelCloseSummary::clear_remote_pubkey() {
  remote_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelCloseSummary::remote_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.remote_pubkey)
  return _internal_remote_pubkey();
}
inline void ChannelCloseSummary::set_remote_pubkey(const std::string& value) {
  _internal_set_remote_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.remote_pubkey)
}
inline std::string* ChannelCloseSummary::mutable_remote_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseSummary.remote_pubkey)
  return _internal_mutable_remote_pubkey();
}
inline const std::string& ChannelCloseSummary::_internal_remote_pubkey() const {
  return remote_pubkey_.GetNoArena();
}
inline void ChannelCloseSummary::_internal_set_remote_pubkey(const std::string& value) {
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelCloseSummary::set_remote_pubkey(std::string&& value) {
  
  remote_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelCloseSummary.remote_pubkey)
}
inline void ChannelCloseSummary::set_remote_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelCloseSummary.remote_pubkey)
}
inline void ChannelCloseSummary::set_remote_pubkey(const char* value, size_t size) {
  
  remote_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelCloseSummary.remote_pubkey)
}
inline std::string* ChannelCloseSummary::_internal_mutable_remote_pubkey() {
  
  return remote_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelCloseSummary::release_remote_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelCloseSummary.remote_pubkey)
  
  return remote_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCloseSummary::set_allocated_remote_pubkey(std::string* remote_pubkey) {
  if (remote_pubkey != nullptr) {
    
  } else {
    
  }
  remote_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelCloseSummary.remote_pubkey)
}

// int64 capacity = 6;
inline void ChannelCloseSummary::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.capacity)
  return _internal_capacity();
}
inline void ChannelCloseSummary::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void ChannelCloseSummary::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.capacity)
}

// uint32 close_height = 7;
inline void ChannelCloseSummary::clear_close_height() {
  close_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelCloseSummary::_internal_close_height() const {
  return close_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelCloseSummary::close_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.close_height)
  return _internal_close_height();
}
inline void ChannelCloseSummary::_internal_set_close_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  close_height_ = value;
}
inline void ChannelCloseSummary::set_close_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_close_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.close_height)
}

// int64 settled_balance = 8;
inline void ChannelCloseSummary::clear_settled_balance() {
  settled_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::_internal_settled_balance() const {
  return settled_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::settled_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.settled_balance)
  return _internal_settled_balance();
}
inline void ChannelCloseSummary::_internal_set_settled_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settled_balance_ = value;
}
inline void ChannelCloseSummary::set_settled_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_settled_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.settled_balance)
}

// int64 time_locked_balance = 9;
inline void ChannelCloseSummary::clear_time_locked_balance() {
  time_locked_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::_internal_time_locked_balance() const {
  return time_locked_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelCloseSummary::time_locked_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.time_locked_balance)
  return _internal_time_locked_balance();
}
inline void ChannelCloseSummary::_internal_set_time_locked_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_locked_balance_ = value;
}
inline void ChannelCloseSummary::set_time_locked_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_locked_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.time_locked_balance)
}

// .lnrpc.ChannelCloseSummary.ClosureType close_type = 10;
inline void ChannelCloseSummary::clear_close_type() {
  close_type_ = 0;
}
inline ::lnrpc::ChannelCloseSummary_ClosureType ChannelCloseSummary::_internal_close_type() const {
  return static_cast< ::lnrpc::ChannelCloseSummary_ClosureType >(close_type_);
}
inline ::lnrpc::ChannelCloseSummary_ClosureType ChannelCloseSummary::close_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.close_type)
  return _internal_close_type();
}
inline void ChannelCloseSummary::_internal_set_close_type(::lnrpc::ChannelCloseSummary_ClosureType value) {
  
  close_type_ = value;
}
inline void ChannelCloseSummary::set_close_type(::lnrpc::ChannelCloseSummary_ClosureType value) {
  _internal_set_close_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.close_type)
}

// .lnrpc.Initiator open_initiator = 11;
inline void ChannelCloseSummary::clear_open_initiator() {
  open_initiator_ = 0;
}
inline ::lnrpc::Initiator ChannelCloseSummary::_internal_open_initiator() const {
  return static_cast< ::lnrpc::Initiator >(open_initiator_);
}
inline ::lnrpc::Initiator ChannelCloseSummary::open_initiator() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.open_initiator)
  return _internal_open_initiator();
}
inline void ChannelCloseSummary::_internal_set_open_initiator(::lnrpc::Initiator value) {
  
  open_initiator_ = value;
}
inline void ChannelCloseSummary::set_open_initiator(::lnrpc::Initiator value) {
  _internal_set_open_initiator(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.open_initiator)
}

// .lnrpc.Initiator close_initiator = 12;
inline void ChannelCloseSummary::clear_close_initiator() {
  close_initiator_ = 0;
}
inline ::lnrpc::Initiator ChannelCloseSummary::_internal_close_initiator() const {
  return static_cast< ::lnrpc::Initiator >(close_initiator_);
}
inline ::lnrpc::Initiator ChannelCloseSummary::close_initiator() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.close_initiator)
  return _internal_close_initiator();
}
inline void ChannelCloseSummary::_internal_set_close_initiator(::lnrpc::Initiator value) {
  
  close_initiator_ = value;
}
inline void ChannelCloseSummary::set_close_initiator(::lnrpc::Initiator value) {
  _internal_set_close_initiator(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseSummary.close_initiator)
}

// repeated .lnrpc.Resolution resolutions = 13;
inline int ChannelCloseSummary::_internal_resolutions_size() const {
  return resolutions_.size();
}
inline int ChannelCloseSummary::resolutions_size() const {
  return _internal_resolutions_size();
}
inline void ChannelCloseSummary::clear_resolutions() {
  resolutions_.Clear();
}
inline ::lnrpc::Resolution* ChannelCloseSummary::mutable_resolutions(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseSummary.resolutions)
  return resolutions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Resolution >*
ChannelCloseSummary::mutable_resolutions() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ChannelCloseSummary.resolutions)
  return &resolutions_;
}
inline const ::lnrpc::Resolution& ChannelCloseSummary::_internal_resolutions(int index) const {
  return resolutions_.Get(index);
}
inline const ::lnrpc::Resolution& ChannelCloseSummary::resolutions(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseSummary.resolutions)
  return _internal_resolutions(index);
}
inline ::lnrpc::Resolution* ChannelCloseSummary::_internal_add_resolutions() {
  return resolutions_.Add();
}
inline ::lnrpc::Resolution* ChannelCloseSummary::add_resolutions() {
  // @@protoc_insertion_point(field_add:lnrpc.ChannelCloseSummary.resolutions)
  return _internal_add_resolutions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Resolution >&
ChannelCloseSummary::resolutions() const {
  // @@protoc_insertion_point(field_list:lnrpc.ChannelCloseSummary.resolutions)
  return resolutions_;
}

// -------------------------------------------------------------------

// Resolution

// .lnrpc.ResolutionType resolution_type = 1;
inline void Resolution::clear_resolution_type() {
  resolution_type_ = 0;
}
inline ::lnrpc::ResolutionType Resolution::_internal_resolution_type() const {
  return static_cast< ::lnrpc::ResolutionType >(resolution_type_);
}
inline ::lnrpc::ResolutionType Resolution::resolution_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.Resolution.resolution_type)
  return _internal_resolution_type();
}
inline void Resolution::_internal_set_resolution_type(::lnrpc::ResolutionType value) {
  
  resolution_type_ = value;
}
inline void Resolution::set_resolution_type(::lnrpc::ResolutionType value) {
  _internal_set_resolution_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.Resolution.resolution_type)
}

// .lnrpc.ResolutionOutcome outcome = 2;
inline void Resolution::clear_outcome() {
  outcome_ = 0;
}
inline ::lnrpc::ResolutionOutcome Resolution::_internal_outcome() const {
  return static_cast< ::lnrpc::ResolutionOutcome >(outcome_);
}
inline ::lnrpc::ResolutionOutcome Resolution::outcome() const {
  // @@protoc_insertion_point(field_get:lnrpc.Resolution.outcome)
  return _internal_outcome();
}
inline void Resolution::_internal_set_outcome(::lnrpc::ResolutionOutcome value) {
  
  outcome_ = value;
}
inline void Resolution::set_outcome(::lnrpc::ResolutionOutcome value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:lnrpc.Resolution.outcome)
}

// .lnrpc.OutPoint outpoint = 3;
inline bool Resolution::_internal_has_outpoint() const {
  return this != internal_default_instance() && outpoint_ != nullptr;
}
inline bool Resolution::has_outpoint() const {
  return _internal_has_outpoint();
}
inline void Resolution::clear_outpoint() {
  if (GetArenaNoVirtual() == nullptr && outpoint_ != nullptr) {
    delete outpoint_;
  }
  outpoint_ = nullptr;
}
inline const ::lnrpc::OutPoint& Resolution::_internal_outpoint() const {
  const ::lnrpc::OutPoint* p = outpoint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::OutPoint*>(
      &::lnrpc::_OutPoint_default_instance_);
}
inline const ::lnrpc::OutPoint& Resolution::outpoint() const {
  // @@protoc_insertion_point(field_get:lnrpc.Resolution.outpoint)
  return _internal_outpoint();
}
inline ::lnrpc::OutPoint* Resolution::release_outpoint() {
  // @@protoc_insertion_point(field_release:lnrpc.Resolution.outpoint)
  
  ::lnrpc::OutPoint* temp = outpoint_;
  outpoint_ = nullptr;
  return temp;
}
inline ::lnrpc::OutPoint* Resolution::_internal_mutable_outpoint() {
  
  if (outpoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::OutPoint>(GetArenaNoVirtual());
    outpoint_ = p;
  }
  return outpoint_;
}
inline ::lnrpc::OutPoint* Resolution::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Resolution.outpoint)
  return _internal_mutable_outpoint();
}
inline void Resolution::set_allocated_outpoint(::lnrpc::OutPoint* outpoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete outpoint_;
  }
  if (outpoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      outpoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outpoint, submessage_arena);
    }
    
  } else {
    
  }
  outpoint_ = outpoint;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Resolution.outpoint)
}

// uint64 amount_sat = 4;
inline void Resolution::clear_amount_sat() {
  amount_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Resolution::_internal_amount_sat() const {
  return amount_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Resolution::amount_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Resolution.amount_sat)
  return _internal_amount_sat();
}
inline void Resolution::_internal_set_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_sat_ = value;
}
inline void Resolution::set_amount_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Resolution.amount_sat)
}

// string sweep_txid = 5;
inline void Resolution::clear_sweep_txid() {
  sweep_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Resolution::sweep_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.Resolution.sweep_txid)
  return _internal_sweep_txid();
}
inline void Resolution::set_sweep_txid(const std::string& value) {
  _internal_set_sweep_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.Resolution.sweep_txid)
}
inline std::string* Resolution::mutable_sweep_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Resolution.sweep_txid)
  return _internal_mutable_sweep_txid();
}
inline const std::string& Resolution::_internal_sweep_txid() const {
  return sweep_txid_.GetNoArena();
}
inline void Resolution::_internal_set_sweep_txid(const std::string& value) {
  
  sweep_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Resolution::set_sweep_txid(std::string&& value) {
  
  sweep_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Resolution.sweep_txid)
}
inline void Resolution::set_sweep_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sweep_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Resolution.sweep_txid)
}
inline void Resolution::set_sweep_txid(const char* value, size_t size) {
  
  sweep_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Resolution.sweep_txid)
}
inline std::string* Resolution::_internal_mutable_sweep_txid() {
  
  return sweep_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Resolution::release_sweep_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.Resolution.sweep_txid)
  
  return sweep_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Resolution::set_allocated_sweep_txid(std::string* sweep_txid) {
  if (sweep_txid != nullptr) {
    
  } else {
    
  }
  sweep_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sweep_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Resolution.sweep_txid)
}

// -------------------------------------------------------------------

// ClosedChannelsRequest

// bool cooperative = 1;
inline void ClosedChannelsRequest::clear_cooperative() {
  cooperative_ = false;
}
inline bool ClosedChannelsRequest::_internal_cooperative() const {
  return cooperative_;
}
inline bool ClosedChannelsRequest::cooperative() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.cooperative)
  return _internal_cooperative();
}
inline void ClosedChannelsRequest::_internal_set_cooperative(bool value) {
  
  cooperative_ = value;
}
inline void ClosedChannelsRequest::set_cooperative(bool value) {
  _internal_set_cooperative(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.cooperative)
}

// bool local_force = 2;
inline void ClosedChannelsRequest::clear_local_force() {
  local_force_ = false;
}
inline bool ClosedChannelsRequest::_internal_local_force() const {
  return local_force_;
}
inline bool ClosedChannelsRequest::local_force() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.local_force)
  return _internal_local_force();
}
inline void ClosedChannelsRequest::_internal_set_local_force(bool value) {
  
  local_force_ = value;
}
inline void ClosedChannelsRequest::set_local_force(bool value) {
  _internal_set_local_force(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.local_force)
}

// bool remote_force = 3;
inline void ClosedChannelsRequest::clear_remote_force() {
  remote_force_ = false;
}
inline bool ClosedChannelsRequest::_internal_remote_force() const {
  return remote_force_;
}
inline bool ClosedChannelsRequest::remote_force() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.remote_force)
  return _internal_remote_force();
}
inline void ClosedChannelsRequest::_internal_set_remote_force(bool value) {
  
  remote_force_ = value;
}
inline void ClosedChannelsRequest::set_remote_force(bool value) {
  _internal_set_remote_force(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.remote_force)
}

// bool breach = 4;
inline void ClosedChannelsRequest::clear_breach() {
  breach_ = false;
}
inline bool ClosedChannelsRequest::_internal_breach() const {
  return breach_;
}
inline bool ClosedChannelsRequest::breach() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.breach)
  return _internal_breach();
}
inline void ClosedChannelsRequest::_internal_set_breach(bool value) {
  
  breach_ = value;
}
inline void ClosedChannelsRequest::set_breach(bool value) {
  _internal_set_breach(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.breach)
}

// bool funding_canceled = 5;
inline void ClosedChannelsRequest::clear_funding_canceled() {
  funding_canceled_ = false;
}
inline bool ClosedChannelsRequest::_internal_funding_canceled() const {
  return funding_canceled_;
}
inline bool ClosedChannelsRequest::funding_canceled() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.funding_canceled)
  return _internal_funding_canceled();
}
inline void ClosedChannelsRequest::_internal_set_funding_canceled(bool value) {
  
  funding_canceled_ = value;
}
inline void ClosedChannelsRequest::set_funding_canceled(bool value) {
  _internal_set_funding_canceled(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.funding_canceled)
}

// bool abandoned = 6;
inline void ClosedChannelsRequest::clear_abandoned() {
  abandoned_ = false;
}
inline bool ClosedChannelsRequest::_internal_abandoned() const {
  return abandoned_;
}
inline bool ClosedChannelsRequest::abandoned() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsRequest.abandoned)
  return _internal_abandoned();
}
inline void ClosedChannelsRequest::_internal_set_abandoned(bool value) {
  
  abandoned_ = value;
}
inline void ClosedChannelsRequest::set_abandoned(bool value) {
  _internal_set_abandoned(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelsRequest.abandoned)
}

// -------------------------------------------------------------------

// ClosedChannelsResponse

// repeated .lnrpc.ChannelCloseSummary channels = 1;
inline int ClosedChannelsResponse::_internal_channels_size() const {
  return channels_.size();
}
inline int ClosedChannelsResponse::channels_size() const {
  return _internal_channels_size();
}
inline void ClosedChannelsResponse::clear_channels() {
  channels_.Clear();
}
inline ::lnrpc::ChannelCloseSummary* ClosedChannelsResponse::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ClosedChannelsResponse.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelCloseSummary >*
ClosedChannelsResponse::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ClosedChannelsResponse.channels)
  return &channels_;
}
inline const ::lnrpc::ChannelCloseSummary& ClosedChannelsResponse::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::lnrpc::ChannelCloseSummary& ClosedChannelsResponse::channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelsResponse.channels)
  return _internal_channels(index);
}
inline ::lnrpc::ChannelCloseSummary* ClosedChannelsResponse::_internal_add_channels() {
  return channels_.Add();
}
inline ::lnrpc::ChannelCloseSummary* ClosedChannelsResponse::add_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.ClosedChannelsResponse.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelCloseSummary >&
ClosedChannelsResponse::channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.ClosedChannelsResponse.channels)
  return channels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Peer

// string pub_key = 1;
inline void Peer::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Peer::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.pub_key)
  return _internal_pub_key();
}
inline void Peer::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.pub_key)
}
inline std::string* Peer::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Peer.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& Peer::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void Peer::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Peer::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Peer.pub_key)
}
inline void Peer::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Peer.pub_key)
}
inline void Peer::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Peer.pub_key)
}
inline std::string* Peer::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Peer::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.Peer.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Peer.pub_key)
}

// string address = 3;
inline void Peer::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Peer::address() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.address)
  return _internal_address();
}
inline void Peer::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.address)
}
inline std::string* Peer::mutable_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Peer.address)
  return _internal_mutable_address();
}
inline const std::string& Peer::_internal_address() const {
  return address_.GetNoArena();
}
inline void Peer::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Peer::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Peer.address)
}
inline void Peer::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Peer.address)
}
inline void Peer::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Peer.address)
}
inline std::string* Peer::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Peer::release_address() {
  // @@protoc_insertion_point(field_release:lnrpc.Peer.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Peer::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Peer.address)
}

// uint64 bytes_sent = 4;
inline void Peer::clear_bytes_sent() {
  bytes_sent_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Peer::_internal_bytes_sent() const {
  return bytes_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Peer::bytes_sent() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.bytes_sent)
  return _internal_bytes_sent();
}
inline void Peer::_internal_set_bytes_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bytes_sent_ = value;
}
inline void Peer::set_bytes_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_sent(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.bytes_sent)
}

// uint64 bytes_recv = 5;
inline void Peer::clear_bytes_recv() {
  bytes_recv_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Peer::_internal_bytes_recv() const {
  return bytes_recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Peer::bytes_recv() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.bytes_recv)
  return _internal_bytes_recv();
}
inline void Peer::_internal_set_bytes_recv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bytes_recv_ = value;
}
inline void Peer::set_bytes_recv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bytes_recv(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.bytes_recv)
}

// int64 sat_sent = 6;
inline void Peer::clear_sat_sent() {
  sat_sent_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::_internal_sat_sent() const {
  return sat_sent_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::sat_sent() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.sat_sent)
  return _internal_sat_sent();
}
inline void Peer::_internal_set_sat_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_sent_ = value;
}
inline void Peer::set_sat_sent(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_sent(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.sat_sent)
}

// int64 sat_recv = 7;
inline void Peer::clear_sat_recv() {
  sat_recv_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::_internal_sat_recv() const {
  return sat_recv_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::sat_recv() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.sat_recv)
  return _internal_sat_recv();
}
inline void Peer::_internal_set_sat_recv(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_recv_ = value;
}
inline void Peer::set_sat_recv(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_recv(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.sat_recv)
}

// bool inbound = 8;
inline void Peer::clear_inbound() {
  inbound_ = false;
}
inline bool Peer::_internal_inbound() const {
  return inbound_;
}
inline bool Peer::inbound() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.inbound)
  return _internal_inbound();
}
inline void Peer::_internal_set_inbound(bool value) {
  
  inbound_ = value;
}
inline void Peer::set_inbound(bool value) {
  _internal_set_inbound(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.inbound)
}

// int64 ping_time = 9;
inline void Peer::clear_ping_time() {
  ping_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::_internal_ping_time() const {
  return ping_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::ping_time() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.ping_time)
  return _internal_ping_time();
}
inline void Peer::_internal_set_ping_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ping_time_ = value;
}
inline void Peer::set_ping_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ping_time(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.ping_time)
}

// .lnrpc.Peer.SyncType sync_type = 10;
inline void Peer::clear_sync_type() {
  sync_type_ = 0;
}
inline ::lnrpc::Peer_SyncType Peer::_internal_sync_type() const {
  return static_cast< ::lnrpc::Peer_SyncType >(sync_type_);
}
inline ::lnrpc::Peer_SyncType Peer::sync_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.sync_type)
  return _internal_sync_type();
}
inline void Peer::_internal_set_sync_type(::lnrpc::Peer_SyncType value) {
  
  sync_type_ = value;
}
inline void Peer::set_sync_type(::lnrpc::Peer_SyncType value) {
  _internal_set_sync_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.sync_type)
}

// map<uint32, .lnrpc.Feature> features = 11;
inline int Peer::_internal_features_size() const {
  return features_.size();
}
inline int Peer::features_size() const {
  return _internal_features_size();
}
inline void Peer::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
Peer::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
Peer::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.Peer.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
Peer::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
Peer::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.Peer.features)
  return _internal_mutable_features();
}

// repeated .lnrpc.TimestampedError errors = 12;
inline int Peer::_internal_errors_size() const {
  return errors_.size();
}
inline int Peer::errors_size() const {
  return _internal_errors_size();
}
inline void Peer::clear_errors() {
  errors_.Clear();
}
inline ::lnrpc::TimestampedError* Peer::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Peer.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::TimestampedError >*
Peer::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Peer.errors)
  return &errors_;
}
inline const ::lnrpc::TimestampedError& Peer::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::lnrpc::TimestampedError& Peer::errors(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.errors)
  return _internal_errors(index);
}
inline ::lnrpc::TimestampedError* Peer::_internal_add_errors() {
  return errors_.Add();
}
inline ::lnrpc::TimestampedError* Peer::add_errors() {
  // @@protoc_insertion_point(field_add:lnrpc.Peer.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::TimestampedError >&
Peer::errors() const {
  // @@protoc_insertion_point(field_list:lnrpc.Peer.errors)
  return errors_;
}

// int32 flap_count = 13;
inline void Peer::clear_flap_count() {
  flap_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Peer::_internal_flap_count() const {
  return flap_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Peer::flap_count() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.flap_count)
  return _internal_flap_count();
}
inline void Peer::_internal_set_flap_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flap_count_ = value;
}
inline void Peer::set_flap_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flap_count(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.flap_count)
}

// int64 last_flap_ns = 14;
inline void Peer::clear_last_flap_ns() {
  last_flap_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::_internal_last_flap_ns() const {
  return last_flap_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Peer::last_flap_ns() const {
  // @@protoc_insertion_point(field_get:lnrpc.Peer.last_flap_ns)
  return _internal_last_flap_ns();
}
inline void Peer::_internal_set_last_flap_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  last_flap_ns_ = value;
}
inline void Peer::set_last_flap_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_last_flap_ns(value);
  // @@protoc_insertion_point(field_set:lnrpc.Peer.last_flap_ns)
}

// -------------------------------------------------------------------

// TimestampedError

// uint64 timestamp = 1;
inline void TimestampedError::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimestampedError::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TimestampedError::timestamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.TimestampedError.timestamp)
  return _internal_timestamp();
}
inline void TimestampedError::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void TimestampedError::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.TimestampedError.timestamp)
}

// string error = 2;
inline void TimestampedError::clear_error() {
  error_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TimestampedError::error() const {
  // @@protoc_insertion_point(field_get:lnrpc.TimestampedError.error)
  return _internal_error();
}
inline void TimestampedError::set_error(const std::string& value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:lnrpc.TimestampedError.error)
}
inline std::string* TimestampedError::mutable_error() {
  // @@protoc_insertion_point(field_mutable:lnrpc.TimestampedError.error)
  return _internal_mutable_error();
}
inline const std::string& TimestampedError::_internal_error() const {
  return error_.GetNoArena();
}
inline void TimestampedError::_internal_set_error(const std::string& value) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TimestampedError::set_error(std::string&& value) {
  
  error_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.TimestampedError.error)
}
inline void TimestampedError::set_error(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.TimestampedError.error)
}
inline void TimestampedError::set_error(const char* value, size_t size) {
  
  error_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.TimestampedError.error)
}
inline std::string* TimestampedError::_internal_mutable_error() {
  
  return error_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TimestampedError::release_error() {
  // @@protoc_insertion_point(field_release:lnrpc.TimestampedError.error)
  
  return error_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TimestampedError::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.TimestampedError.error)
}

// -------------------------------------------------------------------

// ListPeersRequest

// bool latest_error = 1;
inline void ListPeersRequest::clear_latest_error() {
  latest_error_ = false;
}
inline bool ListPeersRequest::_internal_latest_error() const {
  return latest_error_;
}
inline bool ListPeersRequest::latest_error() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPeersRequest.latest_error)
  return _internal_latest_error();
}
inline void ListPeersRequest::_internal_set_latest_error(bool value) {
  
  latest_error_ = value;
}
inline void ListPeersRequest::set_latest_error(bool value) {
  _internal_set_latest_error(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPeersRequest.latest_error)
}

// -------------------------------------------------------------------

// ListPeersResponse

// repeated .lnrpc.Peer peers = 1;
inline int ListPeersResponse::_internal_peers_size() const {
  return peers_.size();
}
inline int ListPeersResponse::peers_size() const {
  return _internal_peers_size();
}
inline void ListPeersResponse::clear_peers() {
  peers_.Clear();
}
inline ::lnrpc::Peer* ListPeersResponse::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListPeersResponse.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Peer >*
ListPeersResponse::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListPeersResponse.peers)
  return &peers_;
}
inline const ::lnrpc::Peer& ListPeersResponse::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::lnrpc::Peer& ListPeersResponse::peers(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPeersResponse.peers)
  return _internal_peers(index);
}
inline ::lnrpc::Peer* ListPeersResponse::_internal_add_peers() {
  return peers_.Add();
}
inline ::lnrpc::Peer* ListPeersResponse::add_peers() {
  // @@protoc_insertion_point(field_add:lnrpc.ListPeersResponse.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Peer >&
ListPeersResponse::peers() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListPeersResponse.peers)
  return peers_;
}

// -------------------------------------------------------------------

// PeerEventSubscription

// -------------------------------------------------------------------

// PeerEvent

// string pub_key = 1;
inline void PeerEvent::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PeerEvent::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.PeerEvent.pub_key)
  return _internal_pub_key();
}
inline void PeerEvent::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.PeerEvent.pub_key)
}
inline std::string* PeerEvent::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PeerEvent.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& PeerEvent::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void PeerEvent::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeerEvent::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PeerEvent.pub_key)
}
inline void PeerEvent::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PeerEvent.pub_key)
}
inline void PeerEvent::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PeerEvent.pub_key)
}
inline std::string* PeerEvent::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeerEvent::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.PeerEvent.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeerEvent::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PeerEvent.pub_key)
}

// .lnrpc.PeerEvent.EventType type = 2;
inline void PeerEvent::clear_type() {
  type_ = 0;
}
inline ::lnrpc::PeerEvent_EventType PeerEvent::_internal_type() const {
  return static_cast< ::lnrpc::PeerEvent_EventType >(type_);
}
inline ::lnrpc::PeerEvent_EventType PeerEvent::type() const {
  // @@protoc_insertion_point(field_get:lnrpc.PeerEvent.type)
  return _internal_type();
}
inline void PeerEvent::_internal_set_type(::lnrpc::PeerEvent_EventType value) {
  
  type_ = value;
}
inline void PeerEvent::set_type(::lnrpc::PeerEvent_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.PeerEvent.type)
}

// -------------------------------------------------------------------

// GetInfoRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetInfoResponse

// string version = 14;
inline void GetInfoResponse::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::version() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.version)
  return _internal_version();
}
inline void GetInfoResponse::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.version)
}
inline std::string* GetInfoResponse::mutable_version() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.version)
  return _internal_mutable_version();
}
inline const std::string& GetInfoResponse::_internal_version() const {
  return version_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.version)
}
inline void GetInfoResponse::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.version)
}
inline void GetInfoResponse::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.version)
}
inline std::string* GetInfoResponse::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_version() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.version)
}

// string commit_hash = 20;
inline void GetInfoResponse::clear_commit_hash() {
  commit_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::commit_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.commit_hash)
  return _internal_commit_hash();
}
inline void GetInfoResponse::set_commit_hash(const std::string& value) {
  _internal_set_commit_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.commit_hash)
}
inline std::string* GetInfoResponse::mutable_commit_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.commit_hash)
  return _internal_mutable_commit_hash();
}
inline const std::string& GetInfoResponse::_internal_commit_hash() const {
  return commit_hash_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_commit_hash(const std::string& value) {
  
  commit_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_commit_hash(std::string&& value) {
  
  commit_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.commit_hash)
}
inline void GetInfoResponse::set_commit_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  commit_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.commit_hash)
}
inline void GetInfoResponse::set_commit_hash(const char* value, size_t size) {
  
  commit_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.commit_hash)
}
inline std::string* GetInfoResponse::_internal_mutable_commit_hash() {
  
  return commit_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_commit_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.commit_hash)
  
  return commit_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_commit_hash(std::string* commit_hash) {
  if (commit_hash != nullptr) {
    
  } else {
    
  }
  commit_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commit_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.commit_hash)
}

// string identity_pubkey = 1;
inline void GetInfoResponse::clear_identity_pubkey() {
  identity_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::identity_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.identity_pubkey)
  return _internal_identity_pubkey();
}
inline void GetInfoResponse::set_identity_pubkey(const std::string& value) {
  _internal_set_identity_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.identity_pubkey)
}
inline std::string* GetInfoResponse::mutable_identity_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.identity_pubkey)
  return _internal_mutable_identity_pubkey();
}
inline const std::string& GetInfoResponse::_internal_identity_pubkey() const {
  return identity_pubkey_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_identity_pubkey(const std::string& value) {
  
  identity_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_identity_pubkey(std::string&& value) {
  
  identity_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.identity_pubkey)
}
inline void GetInfoResponse::set_identity_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.identity_pubkey)
}
inline void GetInfoResponse::set_identity_pubkey(const char* value, size_t size) {
  
  identity_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.identity_pubkey)
}
inline std::string* GetInfoResponse::_internal_mutable_identity_pubkey() {
  
  return identity_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_identity_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.identity_pubkey)
  
  return identity_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_identity_pubkey(std::string* identity_pubkey) {
  if (identity_pubkey != nullptr) {
    
  } else {
    
  }
  identity_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.identity_pubkey)
}

// string alias = 2;
inline void GetInfoResponse::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::alias() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.alias)
  return _internal_alias();
}
inline void GetInfoResponse::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.alias)
}
inline std::string* GetInfoResponse::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.alias)
  return _internal_mutable_alias();
}
inline const std::string& GetInfoResponse::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.alias)
}
inline void GetInfoResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.alias)
}
inline void GetInfoResponse::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.alias)
}
inline std::string* GetInfoResponse::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_alias() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.alias)
}

// string color = 17;
inline void GetInfoResponse::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::color() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.color)
  return _internal_color();
}
inline void GetInfoResponse::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.color)
}
inline std::string* GetInfoResponse::mutable_color() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.color)
  return _internal_mutable_color();
}
inline const std::string& GetInfoResponse::_internal_color() const {
  return color_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.color)
}
inline void GetInfoResponse::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.color)
}
inline void GetInfoResponse::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.color)
}
inline std::string* GetInfoResponse::_internal_mutable_color() {
  
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_color() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.color)
}

// uint32 num_pending_channels = 3;
inline void GetInfoResponse::clear_num_pending_channels() {
  num_pending_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::_internal_num_pending_channels() const {
  return num_pending_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::num_pending_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.num_pending_channels)
  return _internal_num_pending_channels();
}
inline void GetInfoResponse::_internal_set_num_pending_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_pending_channels_ = value;
}
inline void GetInfoResponse::set_num_pending_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pending_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.num_pending_channels)
}

// uint32 num_active_channels = 4;
inline void GetInfoResponse::clear_num_active_channels() {
  num_active_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::_internal_num_active_channels() const {
  return num_active_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::num_active_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.num_active_channels)
  return _internal_num_active_channels();
}
inline void GetInfoResponse::_internal_set_num_active_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_active_channels_ = value;
}
inline void GetInfoResponse::set_num_active_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_active_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.num_active_channels)
}

// uint32 num_inactive_channels = 15;
inline void GetInfoResponse::clear_num_inactive_channels() {
  num_inactive_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::_internal_num_inactive_channels() const {
  return num_inactive_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::num_inactive_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.num_inactive_channels)
  return _internal_num_inactive_channels();
}
inline void GetInfoResponse::_internal_set_num_inactive_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_inactive_channels_ = value;
}
inline void GetInfoResponse::set_num_inactive_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_inactive_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.num_inactive_channels)
}

// uint32 num_peers = 5;
inline void GetInfoResponse::clear_num_peers() {
  num_peers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::_internal_num_peers() const {
  return num_peers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::num_peers() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.num_peers)
  return _internal_num_peers();
}
inline void GetInfoResponse::_internal_set_num_peers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_peers_ = value;
}
inline void GetInfoResponse::set_num_peers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_peers(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.num_peers)
}

// uint32 block_height = 6;
inline void GetInfoResponse::clear_block_height() {
  block_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetInfoResponse::block_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.block_height)
  return _internal_block_height();
}
inline void GetInfoResponse::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  block_height_ = value;
}
inline void GetInfoResponse::set_block_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.block_height)
}

// string block_hash = 8;
inline void GetInfoResponse::clear_block_hash() {
  block_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetInfoResponse::block_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.block_hash)
  return _internal_block_hash();
}
inline void GetInfoResponse::set_block_hash(const std::string& value) {
  _internal_set_block_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.block_hash)
}
inline std::string* GetInfoResponse::mutable_block_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.block_hash)
  return _internal_mutable_block_hash();
}
inline const std::string& GetInfoResponse::_internal_block_hash() const {
  return block_hash_.GetNoArena();
}
inline void GetInfoResponse::_internal_set_block_hash(const std::string& value) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetInfoResponse::set_block_hash(std::string&& value) {
  
  block_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.GetInfoResponse.block_hash)
}
inline void GetInfoResponse::set_block_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.block_hash)
}
inline void GetInfoResponse::set_block_hash(const char* value, size_t size) {
  
  block_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.block_hash)
}
inline std::string* GetInfoResponse::_internal_mutable_block_hash() {
  
  return block_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetInfoResponse::release_block_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.GetInfoResponse.block_hash)
  
  return block_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetInfoResponse::set_allocated_block_hash(std::string* block_hash) {
  if (block_hash != nullptr) {
    
  } else {
    
  }
  block_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.GetInfoResponse.block_hash)
}

// int64 best_header_timestamp = 13;
inline void GetInfoResponse::clear_best_header_timestamp() {
  best_header_timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInfoResponse::_internal_best_header_timestamp() const {
  return best_header_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetInfoResponse::best_header_timestamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.best_header_timestamp)
  return _internal_best_header_timestamp();
}
inline void GetInfoResponse::_internal_set_best_header_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  best_header_timestamp_ = value;
}
inline void GetInfoResponse::set_best_header_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_best_header_timestamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.best_header_timestamp)
}

// bool synced_to_chain = 9;
inline void GetInfoResponse::clear_synced_to_chain() {
  synced_to_chain_ = false;
}
inline bool GetInfoResponse::_internal_synced_to_chain() const {
  return synced_to_chain_;
}
inline bool GetInfoResponse::synced_to_chain() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.synced_to_chain)
  return _internal_synced_to_chain();
}
inline void GetInfoResponse::_internal_set_synced_to_chain(bool value) {
  
  synced_to_chain_ = value;
}
inline void GetInfoResponse::set_synced_to_chain(bool value) {
  _internal_set_synced_to_chain(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.synced_to_chain)
}

// bool synced_to_graph = 18;
inline void GetInfoResponse::clear_synced_to_graph() {
  synced_to_graph_ = false;
}
inline bool GetInfoResponse::_internal_synced_to_graph() const {
  return synced_to_graph_;
}
inline bool GetInfoResponse::synced_to_graph() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.synced_to_graph)
  return _internal_synced_to_graph();
}
inline void GetInfoResponse::_internal_set_synced_to_graph(bool value) {
  
  synced_to_graph_ = value;
}
inline void GetInfoResponse::set_synced_to_graph(bool value) {
  _internal_set_synced_to_graph(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.synced_to_graph)
}

// bool testnet = 10 [deprecated = true];
inline void GetInfoResponse::clear_testnet() {
  testnet_ = false;
}
inline bool GetInfoResponse::_internal_testnet() const {
  return testnet_;
}
inline bool GetInfoResponse::testnet() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.testnet)
  return _internal_testnet();
}
inline void GetInfoResponse::_internal_set_testnet(bool value) {
  
  testnet_ = value;
}
inline void GetInfoResponse::set_testnet(bool value) {
  _internal_set_testnet(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.testnet)
}

// repeated .lnrpc.Chain chains = 16;
inline int GetInfoResponse::_internal_chains_size() const {
  return chains_.size();
}
inline int GetInfoResponse::chains_size() const {
  return _internal_chains_size();
}
inline void GetInfoResponse::clear_chains() {
  chains_.Clear();
}
inline ::lnrpc::Chain* GetInfoResponse::mutable_chains(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.chains)
  return chains_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Chain >*
GetInfoResponse::mutable_chains() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.GetInfoResponse.chains)
  return &chains_;
}
inline const ::lnrpc::Chain& GetInfoResponse::_internal_chains(int index) const {
  return chains_.Get(index);
}
inline const ::lnrpc::Chain& GetInfoResponse::chains(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.chains)
  return _internal_chains(index);
}
inline ::lnrpc::Chain* GetInfoResponse::_internal_add_chains() {
  return chains_.Add();
}
inline ::lnrpc::Chain* GetInfoResponse::add_chains() {
  // @@protoc_insertion_point(field_add:lnrpc.GetInfoResponse.chains)
  return _internal_add_chains();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Chain >&
GetInfoResponse::chains() const {
  // @@protoc_insertion_point(field_list:lnrpc.GetInfoResponse.chains)
  return chains_;
}

// repeated string uris = 12;
inline int GetInfoResponse::_internal_uris_size() const {
  return uris_.size();
}
inline int GetInfoResponse::uris_size() const {
  return _internal_uris_size();
}
inline void GetInfoResponse::clear_uris() {
  uris_.Clear();
}
inline std::string* GetInfoResponse::add_uris() {
  // @@protoc_insertion_point(field_add_mutable:lnrpc.GetInfoResponse.uris)
  return _internal_add_uris();
}
inline const std::string& GetInfoResponse::_internal_uris(int index) const {
  return uris_.Get(index);
}
inline const std::string& GetInfoResponse::uris(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.GetInfoResponse.uris)
  return _internal_uris(index);
}
inline std::string* GetInfoResponse::mutable_uris(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.GetInfoResponse.uris)
  return uris_.Mutable(index);
}
inline void GetInfoResponse::set_uris(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.uris)
  uris_.Mutable(index)->assign(value);
}
inline void GetInfoResponse::set_uris(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.GetInfoResponse.uris)
  uris_.Mutable(index)->assign(std::move(value));
}
inline void GetInfoResponse::set_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lnrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::set_uris(int index, const char* value, size_t size) {
  uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lnrpc.GetInfoResponse.uris)
}
inline std::string* GetInfoResponse::_internal_add_uris() {
  return uris_.Add();
}
inline void GetInfoResponse::add_uris(const std::string& value) {
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lnrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(std::string&& value) {
  uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lnrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lnrpc.GetInfoResponse.uris)
}
inline void GetInfoResponse::add_uris(const char* value, size_t size) {
  uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lnrpc.GetInfoResponse.uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetInfoResponse::uris() const {
  // @@protoc_insertion_point(field_list:lnrpc.GetInfoResponse.uris)
  return uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetInfoResponse::mutable_uris() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.GetInfoResponse.uris)
  return &uris_;
}

// map<uint32, .lnrpc.Feature> features = 19;
inline int GetInfoResponse::_internal_features_size() const {
  return features_.size();
}
inline int GetInfoResponse::features_size() const {
  return _internal_features_size();
}
inline void GetInfoResponse::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
GetInfoResponse::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
GetInfoResponse::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.GetInfoResponse.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
GetInfoResponse::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
GetInfoResponse::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.GetInfoResponse.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// GetRecoveryInfoRequest

// -------------------------------------------------------------------

// GetRecoveryInfoResponse

// bool recovery_mode = 1;
inline void GetRecoveryInfoResponse::clear_recovery_mode() {
  recovery_mode_ = false;
}
inline bool GetRecoveryInfoResponse::_internal_recovery_mode() const {
  return recovery_mode_;
}
inline bool GetRecoveryInfoResponse::recovery_mode() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetRecoveryInfoResponse.recovery_mode)
  return _internal_recovery_mode();
}
inline void GetRecoveryInfoResponse::_internal_set_recovery_mode(bool value) {
  
  recovery_mode_ = value;
}
inline void GetRecoveryInfoResponse::set_recovery_mode(bool value) {
  _internal_set_recovery_mode(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetRecoveryInfoResponse.recovery_mode)
}

// bool recovery_finished = 2;
inline void GetRecoveryInfoResponse::clear_recovery_finished() {
  recovery_finished_ = false;
}
inline bool GetRecoveryInfoResponse::_internal_recovery_finished() const {
  return recovery_finished_;
}
inline bool GetRecoveryInfoResponse::recovery_finished() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetRecoveryInfoResponse.recovery_finished)
  return _internal_recovery_finished();
}
inline void GetRecoveryInfoResponse::_internal_set_recovery_finished(bool value) {
  
  recovery_finished_ = value;
}
inline void GetRecoveryInfoResponse::set_recovery_finished(bool value) {
  _internal_set_recovery_finished(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetRecoveryInfoResponse.recovery_finished)
}

// double progress = 3;
inline void GetRecoveryInfoResponse::clear_progress() {
  progress_ = 0;
}
inline double GetRecoveryInfoResponse::_internal_progress() const {
  return progress_;
}
inline double GetRecoveryInfoResponse::progress() const {
  // @@protoc_insertion_point(field_get:lnrpc.GetRecoveryInfoResponse.progress)
  return _internal_progress();
}
inline void GetRecoveryInfoResponse::_internal_set_progress(double value) {
  
  progress_ = value;
}
inline void GetRecoveryInfoResponse::set_progress(double value) {
  _internal_set_progress(value);
  // @@protoc_insertion_point(field_set:lnrpc.GetRecoveryInfoResponse.progress)
}

// -------------------------------------------------------------------

// Chain

// string chain = 1;
inline void Chain::clear_chain() {
  chain_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chain::chain() const {
  // @@protoc_insertion_point(field_get:lnrpc.Chain.chain)
  return _internal_chain();
}
inline void Chain::set_chain(const std::string& value) {
  _internal_set_chain(value);
  // @@protoc_insertion_point(field_set:lnrpc.Chain.chain)
}
inline std::string* Chain::mutable_chain() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Chain.chain)
  return _internal_mutable_chain();
}
inline const std::string& Chain::_internal_chain() const {
  return chain_.GetNoArena();
}
inline void Chain::_internal_set_chain(const std::string& value) {
  
  chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chain::set_chain(std::string&& value) {
  
  chain_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Chain.chain)
}
inline void Chain::set_chain(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Chain.chain)
}
inline void Chain::set_chain(const char* value, size_t size) {
  
  chain_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Chain.chain)
}
inline std::string* Chain::_internal_mutable_chain() {
  
  return chain_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chain::release_chain() {
  // @@protoc_insertion_point(field_release:lnrpc.Chain.chain)
  
  return chain_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chain::set_allocated_chain(std::string* chain) {
  if (chain != nullptr) {
    
  } else {
    
  }
  chain_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Chain.chain)
}

// string network = 2;
inline void Chain::clear_network() {
  network_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Chain::network() const {
  // @@protoc_insertion_point(field_get:lnrpc.Chain.network)
  return _internal_network();
}
inline void Chain::set_network(const std::string& value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:lnrpc.Chain.network)
}
inline std::string* Chain::mutable_network() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Chain.network)
  return _internal_mutable_network();
}
inline const std::string& Chain::_internal_network() const {
  return network_.GetNoArena();
}
inline void Chain::_internal_set_network(const std::string& value) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Chain::set_network(std::string&& value) {
  
  network_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Chain.network)
}
inline void Chain::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Chain.network)
}
inline void Chain::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Chain.network)
}
inline std::string* Chain::_internal_mutable_network() {
  
  return network_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Chain::release_network() {
  // @@protoc_insertion_point(field_release:lnrpc.Chain.network)
  
  return network_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Chain::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Chain.network)
}

// -------------------------------------------------------------------

// ConfirmationUpdate

// bytes block_sha = 1;
inline void ConfirmationUpdate::clear_block_sha() {
  block_sha_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConfirmationUpdate::block_sha() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConfirmationUpdate.block_sha)
  return _internal_block_sha();
}
inline void ConfirmationUpdate::set_block_sha(const std::string& value) {
  _internal_set_block_sha(value);
  // @@protoc_insertion_point(field_set:lnrpc.ConfirmationUpdate.block_sha)
}
inline std::string* ConfirmationUpdate::mutable_block_sha() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ConfirmationUpdate.block_sha)
  return _internal_mutable_block_sha();
}
inline const std::string& ConfirmationUpdate::_internal_block_sha() const {
  return block_sha_.GetNoArena();
}
inline void ConfirmationUpdate::_internal_set_block_sha(const std::string& value) {
  
  block_sha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConfirmationUpdate::set_block_sha(std::string&& value) {
  
  block_sha_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ConfirmationUpdate.block_sha)
}
inline void ConfirmationUpdate::set_block_sha(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_sha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ConfirmationUpdate.block_sha)
}
inline void ConfirmationUpdate::set_block_sha(const void* value, size_t size) {
  
  block_sha_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ConfirmationUpdate.block_sha)
}
inline std::string* ConfirmationUpdate::_internal_mutable_block_sha() {
  
  return block_sha_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConfirmationUpdate::release_block_sha() {
  // @@protoc_insertion_point(field_release:lnrpc.ConfirmationUpdate.block_sha)
  
  return block_sha_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConfirmationUpdate::set_allocated_block_sha(std::string* block_sha) {
  if (block_sha != nullptr) {
    
  } else {
    
  }
  block_sha_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_sha);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ConfirmationUpdate.block_sha)
}

// int32 block_height = 2;
inline void ConfirmationUpdate::clear_block_height() {
  block_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfirmationUpdate::_internal_block_height() const {
  return block_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfirmationUpdate::block_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConfirmationUpdate.block_height)
  return _internal_block_height();
}
inline void ConfirmationUpdate::_internal_set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_height_ = value;
}
inline void ConfirmationUpdate::set_block_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.ConfirmationUpdate.block_height)
}

// uint32 num_confs_left = 3;
inline void ConfirmationUpdate::clear_num_confs_left() {
  num_confs_left_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfirmationUpdate::_internal_num_confs_left() const {
  return num_confs_left_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ConfirmationUpdate::num_confs_left() const {
  // @@protoc_insertion_point(field_get:lnrpc.ConfirmationUpdate.num_confs_left)
  return _internal_num_confs_left();
}
inline void ConfirmationUpdate::_internal_set_num_confs_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_confs_left_ = value;
}
inline void ConfirmationUpdate::set_num_confs_left(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_confs_left(value);
  // @@protoc_insertion_point(field_set:lnrpc.ConfirmationUpdate.num_confs_left)
}

// -------------------------------------------------------------------

// ChannelOpenUpdate

// .lnrpc.ChannelPoint channel_point = 1;
inline bool ChannelOpenUpdate::_internal_has_channel_point() const {
  return this != internal_default_instance() && channel_point_ != nullptr;
}
inline bool ChannelOpenUpdate::has_channel_point() const {
  return _internal_has_channel_point();
}
inline void ChannelOpenUpdate::clear_channel_point() {
  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ChannelOpenUpdate::_internal_channel_point() const {
  const ::lnrpc::ChannelPoint* p = channel_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChannelOpenUpdate::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelOpenUpdate.channel_point)
  return _internal_channel_point();
}
inline ::lnrpc::ChannelPoint* ChannelOpenUpdate::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelOpenUpdate.channel_point)
  
  ::lnrpc::ChannelPoint* temp = channel_point_;
  channel_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ChannelOpenUpdate::_internal_mutable_channel_point() {
  
  if (channel_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    channel_point_ = p;
  }
  return channel_point_;
}
inline ::lnrpc::ChannelPoint* ChannelOpenUpdate::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelOpenUpdate.channel_point)
  return _internal_mutable_channel_point();
}
inline void ChannelOpenUpdate::set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_point_;
  }
  if (channel_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_point, submessage_arena);
    }
    
  } else {
    
  }
  channel_point_ = channel_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelOpenUpdate.channel_point)
}

// -------------------------------------------------------------------

// ChannelCloseUpdate

// bytes closing_txid = 1;
inline void ChannelCloseUpdate::clear_closing_txid() {
  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelCloseUpdate::closing_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseUpdate.closing_txid)
  return _internal_closing_txid();
}
inline void ChannelCloseUpdate::set_closing_txid(const std::string& value) {
  _internal_set_closing_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseUpdate.closing_txid)
}
inline std::string* ChannelCloseUpdate::mutable_closing_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelCloseUpdate.closing_txid)
  return _internal_mutable_closing_txid();
}
inline const std::string& ChannelCloseUpdate::_internal_closing_txid() const {
  return closing_txid_.GetNoArena();
}
inline void ChannelCloseUpdate::_internal_set_closing_txid(const std::string& value) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelCloseUpdate::set_closing_txid(std::string&& value) {
  
  closing_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelCloseUpdate.closing_txid)
}
inline void ChannelCloseUpdate::set_closing_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelCloseUpdate.closing_txid)
}
inline void ChannelCloseUpdate::set_closing_txid(const void* value, size_t size) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelCloseUpdate.closing_txid)
}
inline std::string* ChannelCloseUpdate::_internal_mutable_closing_txid() {
  
  return closing_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelCloseUpdate::release_closing_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelCloseUpdate.closing_txid)
  
  return closing_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelCloseUpdate::set_allocated_closing_txid(std::string* closing_txid) {
  if (closing_txid != nullptr) {
    
  } else {
    
  }
  closing_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closing_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelCloseUpdate.closing_txid)
}

// bool success = 2;
inline void ChannelCloseUpdate::clear_success() {
  success_ = false;
}
inline bool ChannelCloseUpdate::_internal_success() const {
  return success_;
}
inline bool ChannelCloseUpdate::success() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelCloseUpdate.success)
  return _internal_success();
}
inline void ChannelCloseUpdate::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void ChannelCloseUpdate::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelCloseUpdate.success)
}

// -------------------------------------------------------------------

// CloseChannelRequest

// .lnrpc.ChannelPoint channel_point = 1;
inline bool CloseChannelRequest::_internal_has_channel_point() const {
  return this != internal_default_instance() && channel_point_ != nullptr;
}
inline bool CloseChannelRequest::has_channel_point() const {
  return _internal_has_channel_point();
}
inline void CloseChannelRequest::clear_channel_point() {
  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& CloseChannelRequest::_internal_channel_point() const {
  const ::lnrpc::ChannelPoint* p = channel_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& CloseChannelRequest::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.channel_point)
  return _internal_channel_point();
}
inline ::lnrpc::ChannelPoint* CloseChannelRequest::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.CloseChannelRequest.channel_point)
  
  ::lnrpc::ChannelPoint* temp = channel_point_;
  channel_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* CloseChannelRequest::_internal_mutable_channel_point() {
  
  if (channel_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    channel_point_ = p;
  }
  return channel_point_;
}
inline ::lnrpc::ChannelPoint* CloseChannelRequest::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.CloseChannelRequest.channel_point)
  return _internal_mutable_channel_point();
}
inline void CloseChannelRequest::set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_point_;
  }
  if (channel_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_point, submessage_arena);
    }
    
  } else {
    
  }
  channel_point_ = channel_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.CloseChannelRequest.channel_point)
}

// bool force = 2;
inline void CloseChannelRequest::clear_force() {
  force_ = false;
}
inline bool CloseChannelRequest::_internal_force() const {
  return force_;
}
inline bool CloseChannelRequest::force() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.force)
  return _internal_force();
}
inline void CloseChannelRequest::_internal_set_force(bool value) {
  
  force_ = value;
}
inline void CloseChannelRequest::set_force(bool value) {
  _internal_set_force(value);
  // @@protoc_insertion_point(field_set:lnrpc.CloseChannelRequest.force)
}

// int32 target_conf = 3;
inline void CloseChannelRequest::clear_target_conf() {
  target_conf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseChannelRequest::_internal_target_conf() const {
  return target_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CloseChannelRequest::target_conf() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.target_conf)
  return _internal_target_conf();
}
inline void CloseChannelRequest::_internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_conf_ = value;
}
inline void CloseChannelRequest::set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_conf(value);
  // @@protoc_insertion_point(field_set:lnrpc.CloseChannelRequest.target_conf)
}

// int64 sat_per_byte = 4 [deprecated = true];
inline void CloseChannelRequest::clear_sat_per_byte() {
  sat_per_byte_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseChannelRequest::_internal_sat_per_byte() const {
  return sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CloseChannelRequest::sat_per_byte() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.sat_per_byte)
  return _internal_sat_per_byte();
}
inline void CloseChannelRequest::_internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_per_byte_ = value;
}
inline void CloseChannelRequest::set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:lnrpc.CloseChannelRequest.sat_per_byte)
}

// string delivery_address = 5;
inline void CloseChannelRequest::clear_delivery_address() {
  delivery_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CloseChannelRequest::delivery_address() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.delivery_address)
  return _internal_delivery_address();
}
inline void CloseChannelRequest::set_delivery_address(const std::string& value) {
  _internal_set_delivery_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.CloseChannelRequest.delivery_address)
}
inline std::string* CloseChannelRequest::mutable_delivery_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.CloseChannelRequest.delivery_address)
  return _internal_mutable_delivery_address();
}
inline const std::string& CloseChannelRequest::_internal_delivery_address() const {
  return delivery_address_.GetNoArena();
}
inline void CloseChannelRequest::_internal_set_delivery_address(const std::string& value) {
  
  delivery_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CloseChannelRequest::set_delivery_address(std::string&& value) {
  
  delivery_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.CloseChannelRequest.delivery_address)
}
inline void CloseChannelRequest::set_delivery_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delivery_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.CloseChannelRequest.delivery_address)
}
inline void CloseChannelRequest::set_delivery_address(const char* value, size_t size) {
  
  delivery_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.CloseChannelRequest.delivery_address)
}
inline std::string* CloseChannelRequest::_internal_mutable_delivery_address() {
  
  return delivery_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CloseChannelRequest::release_delivery_address() {
  // @@protoc_insertion_point(field_release:lnrpc.CloseChannelRequest.delivery_address)
  
  return delivery_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CloseChannelRequest::set_allocated_delivery_address(std::string* delivery_address) {
  if (delivery_address != nullptr) {
    
  } else {
    
  }
  delivery_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delivery_address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.CloseChannelRequest.delivery_address)
}

// uint64 sat_per_vbyte = 6;
inline void CloseChannelRequest::clear_sat_per_vbyte() {
  sat_per_vbyte_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CloseChannelRequest::_internal_sat_per_vbyte() const {
  return sat_per_vbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CloseChannelRequest::sat_per_vbyte() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseChannelRequest.sat_per_vbyte)
  return _internal_sat_per_vbyte();
}
inline void CloseChannelRequest::_internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_per_vbyte_ = value;
}
inline void CloseChannelRequest::set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat_per_vbyte(value);
  // @@protoc_insertion_point(field_set:lnrpc.CloseChannelRequest.sat_per_vbyte)
}

// -------------------------------------------------------------------

// CloseStatusUpdate

// .lnrpc.PendingUpdate close_pending = 1;
inline bool CloseStatusUpdate::_internal_has_close_pending() const {
  return update_case() == kClosePending;
}
inline bool CloseStatusUpdate::has_close_pending() const {
  return _internal_has_close_pending();
}
inline void CloseStatusUpdate::set_has_close_pending() {
  _oneof_case_[0] = kClosePending;
}
inline void CloseStatusUpdate::clear_close_pending() {
  if (_internal_has_close_pending()) {
    delete update_.close_pending_;
    clear_has_update();
  }
}
inline ::lnrpc::PendingUpdate* CloseStatusUpdate::release_close_pending() {
  // @@protoc_insertion_point(field_release:lnrpc.CloseStatusUpdate.close_pending)
  if (_internal_has_close_pending()) {
    clear_has_update();
      ::lnrpc::PendingUpdate* temp = update_.close_pending_;
    update_.close_pending_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::PendingUpdate& CloseStatusUpdate::_internal_close_pending() const {
  return _internal_has_close_pending()
      ? *update_.close_pending_
      : *reinterpret_cast< ::lnrpc::PendingUpdate*>(&::lnrpc::_PendingUpdate_default_instance_);
}
inline const ::lnrpc::PendingUpdate& CloseStatusUpdate::close_pending() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseStatusUpdate.close_pending)
  return _internal_close_pending();
}
inline ::lnrpc::PendingUpdate* CloseStatusUpdate::_internal_mutable_close_pending() {
  if (!_internal_has_close_pending()) {
    clear_update();
    set_has_close_pending();
    update_.close_pending_ = CreateMaybeMessage< ::lnrpc::PendingUpdate >(
        GetArenaNoVirtual());
  }
  return update_.close_pending_;
}
inline ::lnrpc::PendingUpdate* CloseStatusUpdate::mutable_close_pending() {
  // @@protoc_insertion_point(field_mutable:lnrpc.CloseStatusUpdate.close_pending)
  return _internal_mutable_close_pending();
}

// .lnrpc.ChannelCloseUpdate chan_close = 3;
inline bool CloseStatusUpdate::_internal_has_chan_close() const {
  return update_case() == kChanClose;
}
inline bool CloseStatusUpdate::has_chan_close() const {
  return _internal_has_chan_close();
}
inline void CloseStatusUpdate::set_has_chan_close() {
  _oneof_case_[0] = kChanClose;
}
inline void CloseStatusUpdate::clear_chan_close() {
  if (_internal_has_chan_close()) {
    delete update_.chan_close_;
    clear_has_update();
  }
}
inline ::lnrpc::ChannelCloseUpdate* CloseStatusUpdate::release_chan_close() {
  // @@protoc_insertion_point(field_release:lnrpc.CloseStatusUpdate.chan_close)
  if (_internal_has_chan_close()) {
    clear_has_update();
      ::lnrpc::ChannelCloseUpdate* temp = update_.chan_close_;
    update_.chan_close_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelCloseUpdate& CloseStatusUpdate::_internal_chan_close() const {
  return _internal_has_chan_close()
      ? *update_.chan_close_
      : *reinterpret_cast< ::lnrpc::ChannelCloseUpdate*>(&::lnrpc::_ChannelCloseUpdate_default_instance_);
}
inline const ::lnrpc::ChannelCloseUpdate& CloseStatusUpdate::chan_close() const {
  // @@protoc_insertion_point(field_get:lnrpc.CloseStatusUpdate.chan_close)
  return _internal_chan_close();
}
inline ::lnrpc::ChannelCloseUpdate* CloseStatusUpdate::_internal_mutable_chan_close() {
  if (!_internal_has_chan_close()) {
    clear_update();
    set_has_chan_close();
    update_.chan_close_ = CreateMaybeMessage< ::lnrpc::ChannelCloseUpdate >(
        GetArenaNoVirtual());
  }
  return update_.chan_close_;
}
inline ::lnrpc::ChannelCloseUpdate* CloseStatusUpdate::mutable_chan_close() {
  // @@protoc_insertion_point(field_mutable:lnrpc.CloseStatusUpdate.chan_close)
  return _internal_mutable_chan_close();
}

inline bool CloseStatusUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void CloseStatusUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline CloseStatusUpdate::UpdateCase CloseStatusUpdate::update_case() const {
  return CloseStatusUpdate::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PendingUpdate

// bytes txid = 1;
inline void PendingUpdate::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingUpdate::txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingUpdate.txid)
  return _internal_txid();
}
inline void PendingUpdate::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingUpdate.txid)
}
inline std::string* PendingUpdate::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingUpdate.txid)
  return _internal_mutable_txid();
}
inline const std::string& PendingUpdate::_internal_txid() const {
  return txid_.GetNoArena();
}
inline void PendingUpdate::_internal_set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingUpdate::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingUpdate.txid)
}
inline void PendingUpdate::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingUpdate.txid)
}
inline void PendingUpdate::set_txid(const void* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingUpdate.txid)
}
inline std::string* PendingUpdate::_internal_mutable_txid() {
  
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingUpdate::release_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingUpdate.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingUpdate::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingUpdate.txid)
}

// uint32 output_index = 2;
inline void PendingUpdate::clear_output_index() {
  output_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingUpdate::_internal_output_index() const {
  return output_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingUpdate::output_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingUpdate.output_index)
  return _internal_output_index();
}
inline void PendingUpdate::_internal_set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  output_index_ = value;
}
inline void PendingUpdate::set_output_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_output_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingUpdate.output_index)
}

// -------------------------------------------------------------------

// ReadyForPsbtFunding

// string funding_address = 1;
inline void ReadyForPsbtFunding::clear_funding_address() {
  funding_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadyForPsbtFunding::funding_address() const {
  // @@protoc_insertion_point(field_get:lnrpc.ReadyForPsbtFunding.funding_address)
  return _internal_funding_address();
}
inline void ReadyForPsbtFunding::set_funding_address(const std::string& value) {
  _internal_set_funding_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.ReadyForPsbtFunding.funding_address)
}
inline std::string* ReadyForPsbtFunding::mutable_funding_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ReadyForPsbtFunding.funding_address)
  return _internal_mutable_funding_address();
}
inline const std::string& ReadyForPsbtFunding::_internal_funding_address() const {
  return funding_address_.GetNoArena();
}
inline void ReadyForPsbtFunding::_internal_set_funding_address(const std::string& value) {
  
  funding_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadyForPsbtFunding::set_funding_address(std::string&& value) {
  
  funding_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ReadyForPsbtFunding.funding_address)
}
inline void ReadyForPsbtFunding::set_funding_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  funding_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ReadyForPsbtFunding.funding_address)
}
inline void ReadyForPsbtFunding::set_funding_address(const char* value, size_t size) {
  
  funding_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ReadyForPsbtFunding.funding_address)
}
inline std::string* ReadyForPsbtFunding::_internal_mutable_funding_address() {
  
  return funding_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadyForPsbtFunding::release_funding_address() {
  // @@protoc_insertion_point(field_release:lnrpc.ReadyForPsbtFunding.funding_address)
  
  return funding_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadyForPsbtFunding::set_allocated_funding_address(std::string* funding_address) {
  if (funding_address != nullptr) {
    
  } else {
    
  }
  funding_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funding_address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ReadyForPsbtFunding.funding_address)
}

// int64 funding_amount = 2;
inline void ReadyForPsbtFunding::clear_funding_amount() {
  funding_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadyForPsbtFunding::_internal_funding_amount() const {
  return funding_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReadyForPsbtFunding::funding_amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.ReadyForPsbtFunding.funding_amount)
  return _internal_funding_amount();
}
inline void ReadyForPsbtFunding::_internal_set_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  funding_amount_ = value;
}
inline void ReadyForPsbtFunding::set_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_funding_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.ReadyForPsbtFunding.funding_amount)
}

// bytes psbt = 3;
inline void ReadyForPsbtFunding::clear_psbt() {
  psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ReadyForPsbtFunding::psbt() const {
  // @@protoc_insertion_point(field_get:lnrpc.ReadyForPsbtFunding.psbt)
  return _internal_psbt();
}
inline void ReadyForPsbtFunding::set_psbt(const std::string& value) {
  _internal_set_psbt(value);
  // @@protoc_insertion_point(field_set:lnrpc.ReadyForPsbtFunding.psbt)
}
inline std::string* ReadyForPsbtFunding::mutable_psbt() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ReadyForPsbtFunding.psbt)
  return _internal_mutable_psbt();
}
inline const std::string& ReadyForPsbtFunding::_internal_psbt() const {
  return psbt_.GetNoArena();
}
inline void ReadyForPsbtFunding::_internal_set_psbt(const std::string& value) {
  
  psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ReadyForPsbtFunding::set_psbt(std::string&& value) {
  
  psbt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ReadyForPsbtFunding.psbt)
}
inline void ReadyForPsbtFunding::set_psbt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ReadyForPsbtFunding.psbt)
}
inline void ReadyForPsbtFunding::set_psbt(const void* value, size_t size) {
  
  psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ReadyForPsbtFunding.psbt)
}
inline std::string* ReadyForPsbtFunding::_internal_mutable_psbt() {
  
  return psbt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ReadyForPsbtFunding::release_psbt() {
  // @@protoc_insertion_point(field_release:lnrpc.ReadyForPsbtFunding.psbt)
  
  return psbt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ReadyForPsbtFunding::set_allocated_psbt(std::string* psbt) {
  if (psbt != nullptr) {
    
  } else {
    
  }
  psbt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), psbt);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ReadyForPsbtFunding.psbt)
}

// -------------------------------------------------------------------

// OpenChannelRequest

// uint64 sat_per_vbyte = 1;
inline void OpenChannelRequest::clear_sat_per_vbyte() {
  sat_per_vbyte_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenChannelRequest::_internal_sat_per_vbyte() const {
  return sat_per_vbyte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenChannelRequest::sat_per_vbyte() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.sat_per_vbyte)
  return _internal_sat_per_vbyte();
}
inline void OpenChannelRequest::_internal_set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_per_vbyte_ = value;
}
inline void OpenChannelRequest::set_sat_per_vbyte(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat_per_vbyte(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.sat_per_vbyte)
}

// bytes node_pubkey = 2;
inline void OpenChannelRequest::clear_node_pubkey() {
  node_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenChannelRequest::node_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.node_pubkey)
  return _internal_node_pubkey();
}
inline void OpenChannelRequest::set_node_pubkey(const std::string& value) {
  _internal_set_node_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.node_pubkey)
}
inline std::string* OpenChannelRequest::mutable_node_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenChannelRequest.node_pubkey)
  return _internal_mutable_node_pubkey();
}
inline const std::string& OpenChannelRequest::_internal_node_pubkey() const {
  return node_pubkey_.GetNoArena();
}
inline void OpenChannelRequest::_internal_set_node_pubkey(const std::string& value) {
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpenChannelRequest::set_node_pubkey(std::string&& value) {
  
  node_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OpenChannelRequest.node_pubkey)
}
inline void OpenChannelRequest::set_node_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OpenChannelRequest.node_pubkey)
}
inline void OpenChannelRequest::set_node_pubkey(const void* value, size_t size) {
  
  node_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OpenChannelRequest.node_pubkey)
}
inline std::string* OpenChannelRequest::_internal_mutable_node_pubkey() {
  
  return node_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenChannelRequest::release_node_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenChannelRequest.node_pubkey)
  
  return node_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenChannelRequest::set_allocated_node_pubkey(std::string* node_pubkey) {
  if (node_pubkey != nullptr) {
    
  } else {
    
  }
  node_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenChannelRequest.node_pubkey)
}

// string node_pubkey_string = 3 [deprecated = true];
inline void OpenChannelRequest::clear_node_pubkey_string() {
  node_pubkey_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenChannelRequest::node_pubkey_string() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.node_pubkey_string)
  return _internal_node_pubkey_string();
}
inline void OpenChannelRequest::set_node_pubkey_string(const std::string& value) {
  _internal_set_node_pubkey_string(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.node_pubkey_string)
}
inline std::string* OpenChannelRequest::mutable_node_pubkey_string() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenChannelRequest.node_pubkey_string)
  return _internal_mutable_node_pubkey_string();
}
inline const std::string& OpenChannelRequest::_internal_node_pubkey_string() const {
  return node_pubkey_string_.GetNoArena();
}
inline void OpenChannelRequest::_internal_set_node_pubkey_string(const std::string& value) {
  
  node_pubkey_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpenChannelRequest::set_node_pubkey_string(std::string&& value) {
  
  node_pubkey_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OpenChannelRequest.node_pubkey_string)
}
inline void OpenChannelRequest::set_node_pubkey_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pubkey_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OpenChannelRequest.node_pubkey_string)
}
inline void OpenChannelRequest::set_node_pubkey_string(const char* value, size_t size) {
  
  node_pubkey_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OpenChannelRequest.node_pubkey_string)
}
inline std::string* OpenChannelRequest::_internal_mutable_node_pubkey_string() {
  
  return node_pubkey_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenChannelRequest::release_node_pubkey_string() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenChannelRequest.node_pubkey_string)
  
  return node_pubkey_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenChannelRequest::set_allocated_node_pubkey_string(std::string* node_pubkey_string) {
  if (node_pubkey_string != nullptr) {
    
  } else {
    
  }
  node_pubkey_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_pubkey_string);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenChannelRequest.node_pubkey_string)
}

// int64 local_funding_amount = 4;
inline void OpenChannelRequest::clear_local_funding_amount() {
  local_funding_amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::_internal_local_funding_amount() const {
  return local_funding_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::local_funding_amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.local_funding_amount)
  return _internal_local_funding_amount();
}
inline void OpenChannelRequest::_internal_set_local_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_funding_amount_ = value;
}
inline void OpenChannelRequest::set_local_funding_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_funding_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.local_funding_amount)
}

// int64 push_sat = 5;
inline void OpenChannelRequest::clear_push_sat() {
  push_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::_internal_push_sat() const {
  return push_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::push_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.push_sat)
  return _internal_push_sat();
}
inline void OpenChannelRequest::_internal_set_push_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  push_sat_ = value;
}
inline void OpenChannelRequest::set_push_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_push_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.push_sat)
}

// int32 target_conf = 6;
inline void OpenChannelRequest::clear_target_conf() {
  target_conf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChannelRequest::_internal_target_conf() const {
  return target_conf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChannelRequest::target_conf() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.target_conf)
  return _internal_target_conf();
}
inline void OpenChannelRequest::_internal_set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_conf_ = value;
}
inline void OpenChannelRequest::set_target_conf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_conf(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.target_conf)
}

// int64 sat_per_byte = 7 [deprecated = true];
inline void OpenChannelRequest::clear_sat_per_byte() {
  sat_per_byte_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::_internal_sat_per_byte() const {
  return sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::sat_per_byte() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.sat_per_byte)
  return _internal_sat_per_byte();
}
inline void OpenChannelRequest::_internal_set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  sat_per_byte_ = value;
}
inline void OpenChannelRequest::set_sat_per_byte(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.sat_per_byte)
}

// bool private = 8;
inline void OpenChannelRequest::clear_private_() {
  private__ = false;
}
inline bool OpenChannelRequest::_internal_private_() const {
  return private__;
}
inline bool OpenChannelRequest::private_() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.private)
  return _internal_private_();
}
inline void OpenChannelRequest::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void OpenChannelRequest::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.private)
}

// int64 min_htlc_msat = 9;
inline void OpenChannelRequest::clear_min_htlc_msat() {
  min_htlc_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::_internal_min_htlc_msat() const {
  return min_htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpenChannelRequest::min_htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.min_htlc_msat)
  return _internal_min_htlc_msat();
}
inline void OpenChannelRequest::_internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_htlc_msat_ = value;
}
inline void OpenChannelRequest::set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.min_htlc_msat)
}

// uint32 remote_csv_delay = 10;
inline void OpenChannelRequest::clear_remote_csv_delay() {
  remote_csv_delay_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::_internal_remote_csv_delay() const {
  return remote_csv_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::remote_csv_delay() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.remote_csv_delay)
  return _internal_remote_csv_delay();
}
inline void OpenChannelRequest::_internal_set_remote_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_csv_delay_ = value;
}
inline void OpenChannelRequest::set_remote_csv_delay(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_csv_delay(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.remote_csv_delay)
}

// int32 min_confs = 11;
inline void OpenChannelRequest::clear_min_confs() {
  min_confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChannelRequest::_internal_min_confs() const {
  return min_confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpenChannelRequest::min_confs() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.min_confs)
  return _internal_min_confs();
}
inline void OpenChannelRequest::_internal_set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_confs_ = value;
}
inline void OpenChannelRequest::set_min_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_confs(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.min_confs)
}

// bool spend_unconfirmed = 12;
inline void OpenChannelRequest::clear_spend_unconfirmed() {
  spend_unconfirmed_ = false;
}
inline bool OpenChannelRequest::_internal_spend_unconfirmed() const {
  return spend_unconfirmed_;
}
inline bool OpenChannelRequest::spend_unconfirmed() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.spend_unconfirmed)
  return _internal_spend_unconfirmed();
}
inline void OpenChannelRequest::_internal_set_spend_unconfirmed(bool value) {
  
  spend_unconfirmed_ = value;
}
inline void OpenChannelRequest::set_spend_unconfirmed(bool value) {
  _internal_set_spend_unconfirmed(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.spend_unconfirmed)
}

// string close_address = 13;
inline void OpenChannelRequest::clear_close_address() {
  close_address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenChannelRequest::close_address() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.close_address)
  return _internal_close_address();
}
inline void OpenChannelRequest::set_close_address(const std::string& value) {
  _internal_set_close_address(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.close_address)
}
inline std::string* OpenChannelRequest::mutable_close_address() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenChannelRequest.close_address)
  return _internal_mutable_close_address();
}
inline const std::string& OpenChannelRequest::_internal_close_address() const {
  return close_address_.GetNoArena();
}
inline void OpenChannelRequest::_internal_set_close_address(const std::string& value) {
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpenChannelRequest::set_close_address(std::string&& value) {
  
  close_address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OpenChannelRequest.close_address)
}
inline void OpenChannelRequest::set_close_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OpenChannelRequest.close_address)
}
inline void OpenChannelRequest::set_close_address(const char* value, size_t size) {
  
  close_address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OpenChannelRequest.close_address)
}
inline std::string* OpenChannelRequest::_internal_mutable_close_address() {
  
  return close_address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenChannelRequest::release_close_address() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenChannelRequest.close_address)
  
  return close_address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenChannelRequest::set_allocated_close_address(std::string* close_address) {
  if (close_address != nullptr) {
    
  } else {
    
  }
  close_address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), close_address);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenChannelRequest.close_address)
}

// .lnrpc.FundingShim funding_shim = 14;
inline bool OpenChannelRequest::_internal_has_funding_shim() const {
  return this != internal_default_instance() && funding_shim_ != nullptr;
}
inline bool OpenChannelRequest::has_funding_shim() const {
  return _internal_has_funding_shim();
}
inline void OpenChannelRequest::clear_funding_shim() {
  if (GetArenaNoVirtual() == nullptr && funding_shim_ != nullptr) {
    delete funding_shim_;
  }
  funding_shim_ = nullptr;
}
inline const ::lnrpc::FundingShim& OpenChannelRequest::_internal_funding_shim() const {
  const ::lnrpc::FundingShim* p = funding_shim_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::FundingShim*>(
      &::lnrpc::_FundingShim_default_instance_);
}
inline const ::lnrpc::FundingShim& OpenChannelRequest::funding_shim() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.funding_shim)
  return _internal_funding_shim();
}
inline ::lnrpc::FundingShim* OpenChannelRequest::release_funding_shim() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenChannelRequest.funding_shim)
  
  ::lnrpc::FundingShim* temp = funding_shim_;
  funding_shim_ = nullptr;
  return temp;
}
inline ::lnrpc::FundingShim* OpenChannelRequest::_internal_mutable_funding_shim() {
  
  if (funding_shim_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::FundingShim>(GetArenaNoVirtual());
    funding_shim_ = p;
  }
  return funding_shim_;
}
inline ::lnrpc::FundingShim* OpenChannelRequest::mutable_funding_shim() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenChannelRequest.funding_shim)
  return _internal_mutable_funding_shim();
}
inline void OpenChannelRequest::set_allocated_funding_shim(::lnrpc::FundingShim* funding_shim) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funding_shim_;
  }
  if (funding_shim) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funding_shim = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funding_shim, submessage_arena);
    }
    
  } else {
    
  }
  funding_shim_ = funding_shim;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenChannelRequest.funding_shim)
}

// uint64 remote_max_value_in_flight_msat = 15;
inline void OpenChannelRequest::clear_remote_max_value_in_flight_msat() {
  remote_max_value_in_flight_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenChannelRequest::_internal_remote_max_value_in_flight_msat() const {
  return remote_max_value_in_flight_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 OpenChannelRequest::remote_max_value_in_flight_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.remote_max_value_in_flight_msat)
  return _internal_remote_max_value_in_flight_msat();
}
inline void OpenChannelRequest::_internal_set_remote_max_value_in_flight_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remote_max_value_in_flight_msat_ = value;
}
inline void OpenChannelRequest::set_remote_max_value_in_flight_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remote_max_value_in_flight_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.remote_max_value_in_flight_msat)
}

// uint32 remote_max_htlcs = 16;
inline void OpenChannelRequest::clear_remote_max_htlcs() {
  remote_max_htlcs_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::_internal_remote_max_htlcs() const {
  return remote_max_htlcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::remote_max_htlcs() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.remote_max_htlcs)
  return _internal_remote_max_htlcs();
}
inline void OpenChannelRequest::_internal_set_remote_max_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  remote_max_htlcs_ = value;
}
inline void OpenChannelRequest::set_remote_max_htlcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_remote_max_htlcs(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.remote_max_htlcs)
}

// uint32 max_local_csv = 17;
inline void OpenChannelRequest::clear_max_local_csv() {
  max_local_csv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::_internal_max_local_csv() const {
  return max_local_csv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OpenChannelRequest::max_local_csv() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.max_local_csv)
  return _internal_max_local_csv();
}
inline void OpenChannelRequest::_internal_set_max_local_csv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_local_csv_ = value;
}
inline void OpenChannelRequest::set_max_local_csv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_local_csv(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.max_local_csv)
}

// bool subtract_fees = 18;
inline void OpenChannelRequest::clear_subtract_fees() {
  subtract_fees_ = false;
}
inline bool OpenChannelRequest::_internal_subtract_fees() const {
  return subtract_fees_;
}
inline bool OpenChannelRequest::subtract_fees() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenChannelRequest.subtract_fees)
  return _internal_subtract_fees();
}
inline void OpenChannelRequest::_internal_set_subtract_fees(bool value) {
  
  subtract_fees_ = value;
}
inline void OpenChannelRequest::set_subtract_fees(bool value) {
  _internal_set_subtract_fees(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenChannelRequest.subtract_fees)
}

// -------------------------------------------------------------------

// OpenStatusUpdate

// .lnrpc.PendingUpdate chan_pending = 1;
inline bool OpenStatusUpdate::_internal_has_chan_pending() const {
  return update_case() == kChanPending;
}
inline bool OpenStatusUpdate::has_chan_pending() const {
  return _internal_has_chan_pending();
}
inline void OpenStatusUpdate::set_has_chan_pending() {
  _oneof_case_[0] = kChanPending;
}
inline void OpenStatusUpdate::clear_chan_pending() {
  if (_internal_has_chan_pending()) {
    delete update_.chan_pending_;
    clear_has_update();
  }
}
inline ::lnrpc::PendingUpdate* OpenStatusUpdate::release_chan_pending() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenStatusUpdate.chan_pending)
  if (_internal_has_chan_pending()) {
    clear_has_update();
      ::lnrpc::PendingUpdate* temp = update_.chan_pending_;
    update_.chan_pending_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::PendingUpdate& OpenStatusUpdate::_internal_chan_pending() const {
  return _internal_has_chan_pending()
      ? *update_.chan_pending_
      : *reinterpret_cast< ::lnrpc::PendingUpdate*>(&::lnrpc::_PendingUpdate_default_instance_);
}
inline const ::lnrpc::PendingUpdate& OpenStatusUpdate::chan_pending() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenStatusUpdate.chan_pending)
  return _internal_chan_pending();
}
inline ::lnrpc::PendingUpdate* OpenStatusUpdate::_internal_mutable_chan_pending() {
  if (!_internal_has_chan_pending()) {
    clear_update();
    set_has_chan_pending();
    update_.chan_pending_ = CreateMaybeMessage< ::lnrpc::PendingUpdate >(
        GetArenaNoVirtual());
  }
  return update_.chan_pending_;
}
inline ::lnrpc::PendingUpdate* OpenStatusUpdate::mutable_chan_pending() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenStatusUpdate.chan_pending)
  return _internal_mutable_chan_pending();
}

// .lnrpc.ChannelOpenUpdate chan_open = 3;
inline bool OpenStatusUpdate::_internal_has_chan_open() const {
  return update_case() == kChanOpen;
}
inline bool OpenStatusUpdate::has_chan_open() const {
  return _internal_has_chan_open();
}
inline void OpenStatusUpdate::set_has_chan_open() {
  _oneof_case_[0] = kChanOpen;
}
inline void OpenStatusUpdate::clear_chan_open() {
  if (_internal_has_chan_open()) {
    delete update_.chan_open_;
    clear_has_update();
  }
}
inline ::lnrpc::ChannelOpenUpdate* OpenStatusUpdate::release_chan_open() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenStatusUpdate.chan_open)
  if (_internal_has_chan_open()) {
    clear_has_update();
      ::lnrpc::ChannelOpenUpdate* temp = update_.chan_open_;
    update_.chan_open_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelOpenUpdate& OpenStatusUpdate::_internal_chan_open() const {
  return _internal_has_chan_open()
      ? *update_.chan_open_
      : *reinterpret_cast< ::lnrpc::ChannelOpenUpdate*>(&::lnrpc::_ChannelOpenUpdate_default_instance_);
}
inline const ::lnrpc::ChannelOpenUpdate& OpenStatusUpdate::chan_open() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenStatusUpdate.chan_open)
  return _internal_chan_open();
}
inline ::lnrpc::ChannelOpenUpdate* OpenStatusUpdate::_internal_mutable_chan_open() {
  if (!_internal_has_chan_open()) {
    clear_update();
    set_has_chan_open();
    update_.chan_open_ = CreateMaybeMessage< ::lnrpc::ChannelOpenUpdate >(
        GetArenaNoVirtual());
  }
  return update_.chan_open_;
}
inline ::lnrpc::ChannelOpenUpdate* OpenStatusUpdate::mutable_chan_open() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenStatusUpdate.chan_open)
  return _internal_mutable_chan_open();
}

// .lnrpc.ReadyForPsbtFunding psbt_fund = 5;
inline bool OpenStatusUpdate::_internal_has_psbt_fund() const {
  return update_case() == kPsbtFund;
}
inline bool OpenStatusUpdate::has_psbt_fund() const {
  return _internal_has_psbt_fund();
}
inline void OpenStatusUpdate::set_has_psbt_fund() {
  _oneof_case_[0] = kPsbtFund;
}
inline void OpenStatusUpdate::clear_psbt_fund() {
  if (_internal_has_psbt_fund()) {
    delete update_.psbt_fund_;
    clear_has_update();
  }
}
inline ::lnrpc::ReadyForPsbtFunding* OpenStatusUpdate::release_psbt_fund() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenStatusUpdate.psbt_fund)
  if (_internal_has_psbt_fund()) {
    clear_has_update();
      ::lnrpc::ReadyForPsbtFunding* temp = update_.psbt_fund_;
    update_.psbt_fund_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ReadyForPsbtFunding& OpenStatusUpdate::_internal_psbt_fund() const {
  return _internal_has_psbt_fund()
      ? *update_.psbt_fund_
      : *reinterpret_cast< ::lnrpc::ReadyForPsbtFunding*>(&::lnrpc::_ReadyForPsbtFunding_default_instance_);
}
inline const ::lnrpc::ReadyForPsbtFunding& OpenStatusUpdate::psbt_fund() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenStatusUpdate.psbt_fund)
  return _internal_psbt_fund();
}
inline ::lnrpc::ReadyForPsbtFunding* OpenStatusUpdate::_internal_mutable_psbt_fund() {
  if (!_internal_has_psbt_fund()) {
    clear_update();
    set_has_psbt_fund();
    update_.psbt_fund_ = CreateMaybeMessage< ::lnrpc::ReadyForPsbtFunding >(
        GetArenaNoVirtual());
  }
  return update_.psbt_fund_;
}
inline ::lnrpc::ReadyForPsbtFunding* OpenStatusUpdate::mutable_psbt_fund() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenStatusUpdate.psbt_fund)
  return _internal_mutable_psbt_fund();
}

// bytes pending_chan_id = 4;
inline void OpenStatusUpdate::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OpenStatusUpdate::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.OpenStatusUpdate.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void OpenStatusUpdate::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.OpenStatusUpdate.pending_chan_id)
}
inline std::string* OpenStatusUpdate::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.OpenStatusUpdate.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& OpenStatusUpdate::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void OpenStatusUpdate::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OpenStatusUpdate::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.OpenStatusUpdate.pending_chan_id)
}
inline void OpenStatusUpdate::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.OpenStatusUpdate.pending_chan_id)
}
inline void OpenStatusUpdate::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.OpenStatusUpdate.pending_chan_id)
}
inline std::string* OpenStatusUpdate::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OpenStatusUpdate::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.OpenStatusUpdate.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OpenStatusUpdate::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.OpenStatusUpdate.pending_chan_id)
}

inline bool OpenStatusUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void OpenStatusUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline OpenStatusUpdate::UpdateCase OpenStatusUpdate::update_case() const {
  return OpenStatusUpdate::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KeyLocator

// int32 key_family = 1;
inline void KeyLocator::clear_key_family() {
  key_family_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyLocator::_internal_key_family() const {
  return key_family_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyLocator::key_family() const {
  // @@protoc_insertion_point(field_get:lnrpc.KeyLocator.key_family)
  return _internal_key_family();
}
inline void KeyLocator::_internal_set_key_family(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_family_ = value;
}
inline void KeyLocator::set_key_family(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_family(value);
  // @@protoc_insertion_point(field_set:lnrpc.KeyLocator.key_family)
}

// int32 key_index = 2;
inline void KeyLocator::clear_key_index() {
  key_index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyLocator::_internal_key_index() const {
  return key_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyLocator::key_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.KeyLocator.key_index)
  return _internal_key_index();
}
inline void KeyLocator::_internal_set_key_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  key_index_ = value;
}
inline void KeyLocator::set_key_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_key_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.KeyLocator.key_index)
}

// -------------------------------------------------------------------

// KeyDescriptor

// bytes raw_key_bytes = 1;
inline void KeyDescriptor::clear_raw_key_bytes() {
  raw_key_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyDescriptor::raw_key_bytes() const {
  // @@protoc_insertion_point(field_get:lnrpc.KeyDescriptor.raw_key_bytes)
  return _internal_raw_key_bytes();
}
inline void KeyDescriptor::set_raw_key_bytes(const std::string& value) {
  _internal_set_raw_key_bytes(value);
  // @@protoc_insertion_point(field_set:lnrpc.KeyDescriptor.raw_key_bytes)
}
inline std::string* KeyDescriptor::mutable_raw_key_bytes() {
  // @@protoc_insertion_point(field_mutable:lnrpc.KeyDescriptor.raw_key_bytes)
  return _internal_mutable_raw_key_bytes();
}
inline const std::string& KeyDescriptor::_internal_raw_key_bytes() const {
  return raw_key_bytes_.GetNoArena();
}
inline void KeyDescriptor::_internal_set_raw_key_bytes(const std::string& value) {
  
  raw_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyDescriptor::set_raw_key_bytes(std::string&& value) {
  
  raw_key_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.KeyDescriptor.raw_key_bytes)
}
inline void KeyDescriptor::set_raw_key_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  raw_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.KeyDescriptor.raw_key_bytes)
}
inline void KeyDescriptor::set_raw_key_bytes(const void* value, size_t size) {
  
  raw_key_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.KeyDescriptor.raw_key_bytes)
}
inline std::string* KeyDescriptor::_internal_mutable_raw_key_bytes() {
  
  return raw_key_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyDescriptor::release_raw_key_bytes() {
  // @@protoc_insertion_point(field_release:lnrpc.KeyDescriptor.raw_key_bytes)
  
  return raw_key_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyDescriptor::set_allocated_raw_key_bytes(std::string* raw_key_bytes) {
  if (raw_key_bytes != nullptr) {
    
  } else {
    
  }
  raw_key_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), raw_key_bytes);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.KeyDescriptor.raw_key_bytes)
}

// .lnrpc.KeyLocator key_loc = 2;
inline bool KeyDescriptor::_internal_has_key_loc() const {
  return this != internal_default_instance() && key_loc_ != nullptr;
}
inline bool KeyDescriptor::has_key_loc() const {
  return _internal_has_key_loc();
}
inline void KeyDescriptor::clear_key_loc() {
  if (GetArenaNoVirtual() == nullptr && key_loc_ != nullptr) {
    delete key_loc_;
  }
  key_loc_ = nullptr;
}
inline const ::lnrpc::KeyLocator& KeyDescriptor::_internal_key_loc() const {
  const ::lnrpc::KeyLocator* p = key_loc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::KeyLocator*>(
      &::lnrpc::_KeyLocator_default_instance_);
}
inline const ::lnrpc::KeyLocator& KeyDescriptor::key_loc() const {
  // @@protoc_insertion_point(field_get:lnrpc.KeyDescriptor.key_loc)
  return _internal_key_loc();
}
inline ::lnrpc::KeyLocator* KeyDescriptor::release_key_loc() {
  // @@protoc_insertion_point(field_release:lnrpc.KeyDescriptor.key_loc)
  
  ::lnrpc::KeyLocator* temp = key_loc_;
  key_loc_ = nullptr;
  return temp;
}
inline ::lnrpc::KeyLocator* KeyDescriptor::_internal_mutable_key_loc() {
  
  if (key_loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::KeyLocator>(GetArenaNoVirtual());
    key_loc_ = p;
  }
  return key_loc_;
}
inline ::lnrpc::KeyLocator* KeyDescriptor::mutable_key_loc() {
  // @@protoc_insertion_point(field_mutable:lnrpc.KeyDescriptor.key_loc)
  return _internal_mutable_key_loc();
}
inline void KeyDescriptor::set_allocated_key_loc(::lnrpc::KeyLocator* key_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete key_loc_;
  }
  if (key_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_loc, submessage_arena);
    }
    
  } else {
    
  }
  key_loc_ = key_loc;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.KeyDescriptor.key_loc)
}

// -------------------------------------------------------------------

// ChanPointShim

// int64 amt = 1;
inline void ChanPointShim::clear_amt() {
  amt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChanPointShim::_internal_amt() const {
  return amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChanPointShim::amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.amt)
  return _internal_amt();
}
inline void ChanPointShim::_internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_ = value;
}
inline void ChanPointShim::set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChanPointShim.amt)
}

// .lnrpc.ChannelPoint chan_point = 2;
inline bool ChanPointShim::_internal_has_chan_point() const {
  return this != internal_default_instance() && chan_point_ != nullptr;
}
inline bool ChanPointShim::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void ChanPointShim::clear_chan_point() {
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ChanPointShim::_internal_chan_point() const {
  const ::lnrpc::ChannelPoint* p = chan_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChanPointShim::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* ChanPointShim::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanPointShim.chan_point)
  
  ::lnrpc::ChannelPoint* temp = chan_point_;
  chan_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ChanPointShim::_internal_mutable_chan_point() {
  
  if (chan_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    chan_point_ = p;
  }
  return chan_point_;
}
inline ::lnrpc::ChannelPoint* ChanPointShim::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanPointShim.chan_point)
  return _internal_mutable_chan_point();
}
inline void ChanPointShim::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chan_point_;
  }
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    
  } else {
    
  }
  chan_point_ = chan_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanPointShim.chan_point)
}

// .lnrpc.KeyDescriptor local_key = 3;
inline bool ChanPointShim::_internal_has_local_key() const {
  return this != internal_default_instance() && local_key_ != nullptr;
}
inline bool ChanPointShim::has_local_key() const {
  return _internal_has_local_key();
}
inline void ChanPointShim::clear_local_key() {
  if (GetArenaNoVirtual() == nullptr && local_key_ != nullptr) {
    delete local_key_;
  }
  local_key_ = nullptr;
}
inline const ::lnrpc::KeyDescriptor& ChanPointShim::_internal_local_key() const {
  const ::lnrpc::KeyDescriptor* p = local_key_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::KeyDescriptor*>(
      &::lnrpc::_KeyDescriptor_default_instance_);
}
inline const ::lnrpc::KeyDescriptor& ChanPointShim::local_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.local_key)
  return _internal_local_key();
}
inline ::lnrpc::KeyDescriptor* ChanPointShim::release_local_key() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanPointShim.local_key)
  
  ::lnrpc::KeyDescriptor* temp = local_key_;
  local_key_ = nullptr;
  return temp;
}
inline ::lnrpc::KeyDescriptor* ChanPointShim::_internal_mutable_local_key() {
  
  if (local_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::KeyDescriptor>(GetArenaNoVirtual());
    local_key_ = p;
  }
  return local_key_;
}
inline ::lnrpc::KeyDescriptor* ChanPointShim::mutable_local_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanPointShim.local_key)
  return _internal_mutable_local_key();
}
inline void ChanPointShim::set_allocated_local_key(::lnrpc::KeyDescriptor* local_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_key_;
  }
  if (local_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_key, submessage_arena);
    }
    
  } else {
    
  }
  local_key_ = local_key;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanPointShim.local_key)
}

// bytes remote_key = 4;
inline void ChanPointShim::clear_remote_key() {
  remote_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChanPointShim::remote_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.remote_key)
  return _internal_remote_key();
}
inline void ChanPointShim::set_remote_key(const std::string& value) {
  _internal_set_remote_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChanPointShim.remote_key)
}
inline std::string* ChanPointShim::mutable_remote_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanPointShim.remote_key)
  return _internal_mutable_remote_key();
}
inline const std::string& ChanPointShim::_internal_remote_key() const {
  return remote_key_.GetNoArena();
}
inline void ChanPointShim::_internal_set_remote_key(const std::string& value) {
  
  remote_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChanPointShim::set_remote_key(std::string&& value) {
  
  remote_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChanPointShim.remote_key)
}
inline void ChanPointShim::set_remote_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChanPointShim.remote_key)
}
inline void ChanPointShim::set_remote_key(const void* value, size_t size) {
  
  remote_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChanPointShim.remote_key)
}
inline std::string* ChanPointShim::_internal_mutable_remote_key() {
  
  return remote_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChanPointShim::release_remote_key() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanPointShim.remote_key)
  
  return remote_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChanPointShim::set_allocated_remote_key(std::string* remote_key) {
  if (remote_key != nullptr) {
    
  } else {
    
  }
  remote_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanPointShim.remote_key)
}

// bytes pending_chan_id = 5;
inline void ChanPointShim::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChanPointShim::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void ChanPointShim::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChanPointShim.pending_chan_id)
}
inline std::string* ChanPointShim::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanPointShim.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& ChanPointShim::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void ChanPointShim::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChanPointShim::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChanPointShim.pending_chan_id)
}
inline void ChanPointShim::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChanPointShim.pending_chan_id)
}
inline void ChanPointShim::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChanPointShim.pending_chan_id)
}
inline std::string* ChanPointShim::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChanPointShim::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanPointShim.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChanPointShim::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanPointShim.pending_chan_id)
}

// uint32 thaw_height = 6;
inline void ChanPointShim::clear_thaw_height() {
  thaw_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChanPointShim::_internal_thaw_height() const {
  return thaw_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChanPointShim::thaw_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanPointShim.thaw_height)
  return _internal_thaw_height();
}
inline void ChanPointShim::_internal_set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  thaw_height_ = value;
}
inline void ChanPointShim::set_thaw_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_thaw_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChanPointShim.thaw_height)
}

// -------------------------------------------------------------------

// PsbtShim

// bytes pending_chan_id = 1;
inline void PsbtShim::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PsbtShim::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.PsbtShim.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void PsbtShim::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.PsbtShim.pending_chan_id)
}
inline std::string* PsbtShim::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PsbtShim.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& PsbtShim::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void PsbtShim::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PsbtShim::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PsbtShim.pending_chan_id)
}
inline void PsbtShim::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PsbtShim.pending_chan_id)
}
inline void PsbtShim::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PsbtShim.pending_chan_id)
}
inline std::string* PsbtShim::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsbtShim::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.PsbtShim.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsbtShim::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PsbtShim.pending_chan_id)
}

// bytes base_psbt = 2;
inline void PsbtShim::clear_base_psbt() {
  base_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PsbtShim::base_psbt() const {
  // @@protoc_insertion_point(field_get:lnrpc.PsbtShim.base_psbt)
  return _internal_base_psbt();
}
inline void PsbtShim::set_base_psbt(const std::string& value) {
  _internal_set_base_psbt(value);
  // @@protoc_insertion_point(field_set:lnrpc.PsbtShim.base_psbt)
}
inline std::string* PsbtShim::mutable_base_psbt() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PsbtShim.base_psbt)
  return _internal_mutable_base_psbt();
}
inline const std::string& PsbtShim::_internal_base_psbt() const {
  return base_psbt_.GetNoArena();
}
inline void PsbtShim::_internal_set_base_psbt(const std::string& value) {
  
  base_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PsbtShim::set_base_psbt(std::string&& value) {
  
  base_psbt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PsbtShim.base_psbt)
}
inline void PsbtShim::set_base_psbt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  base_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PsbtShim.base_psbt)
}
inline void PsbtShim::set_base_psbt(const void* value, size_t size) {
  
  base_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PsbtShim.base_psbt)
}
inline std::string* PsbtShim::_internal_mutable_base_psbt() {
  
  return base_psbt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PsbtShim::release_base_psbt() {
  // @@protoc_insertion_point(field_release:lnrpc.PsbtShim.base_psbt)
  
  return base_psbt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PsbtShim::set_allocated_base_psbt(std::string* base_psbt) {
  if (base_psbt != nullptr) {
    
  } else {
    
  }
  base_psbt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), base_psbt);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PsbtShim.base_psbt)
}

// bool no_publish = 3;
inline void PsbtShim::clear_no_publish() {
  no_publish_ = false;
}
inline bool PsbtShim::_internal_no_publish() const {
  return no_publish_;
}
inline bool PsbtShim::no_publish() const {
  // @@protoc_insertion_point(field_get:lnrpc.PsbtShim.no_publish)
  return _internal_no_publish();
}
inline void PsbtShim::_internal_set_no_publish(bool value) {
  
  no_publish_ = value;
}
inline void PsbtShim::set_no_publish(bool value) {
  _internal_set_no_publish(value);
  // @@protoc_insertion_point(field_set:lnrpc.PsbtShim.no_publish)
}

// -------------------------------------------------------------------

// FundingShim

// .lnrpc.ChanPointShim chan_point_shim = 1;
inline bool FundingShim::_internal_has_chan_point_shim() const {
  return shim_case() == kChanPointShim;
}
inline bool FundingShim::has_chan_point_shim() const {
  return _internal_has_chan_point_shim();
}
inline void FundingShim::set_has_chan_point_shim() {
  _oneof_case_[0] = kChanPointShim;
}
inline void FundingShim::clear_chan_point_shim() {
  if (_internal_has_chan_point_shim()) {
    delete shim_.chan_point_shim_;
    clear_has_shim();
  }
}
inline ::lnrpc::ChanPointShim* FundingShim::release_chan_point_shim() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingShim.chan_point_shim)
  if (_internal_has_chan_point_shim()) {
    clear_has_shim();
      ::lnrpc::ChanPointShim* temp = shim_.chan_point_shim_;
    shim_.chan_point_shim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChanPointShim& FundingShim::_internal_chan_point_shim() const {
  return _internal_has_chan_point_shim()
      ? *shim_.chan_point_shim_
      : *reinterpret_cast< ::lnrpc::ChanPointShim*>(&::lnrpc::_ChanPointShim_default_instance_);
}
inline const ::lnrpc::ChanPointShim& FundingShim::chan_point_shim() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingShim.chan_point_shim)
  return _internal_chan_point_shim();
}
inline ::lnrpc::ChanPointShim* FundingShim::_internal_mutable_chan_point_shim() {
  if (!_internal_has_chan_point_shim()) {
    clear_shim();
    set_has_chan_point_shim();
    shim_.chan_point_shim_ = CreateMaybeMessage< ::lnrpc::ChanPointShim >(
        GetArenaNoVirtual());
  }
  return shim_.chan_point_shim_;
}
inline ::lnrpc::ChanPointShim* FundingShim::mutable_chan_point_shim() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingShim.chan_point_shim)
  return _internal_mutable_chan_point_shim();
}

// .lnrpc.PsbtShim psbt_shim = 2;
inline bool FundingShim::_internal_has_psbt_shim() const {
  return shim_case() == kPsbtShim;
}
inline bool FundingShim::has_psbt_shim() const {
  return _internal_has_psbt_shim();
}
inline void FundingShim::set_has_psbt_shim() {
  _oneof_case_[0] = kPsbtShim;
}
inline void FundingShim::clear_psbt_shim() {
  if (_internal_has_psbt_shim()) {
    delete shim_.psbt_shim_;
    clear_has_shim();
  }
}
inline ::lnrpc::PsbtShim* FundingShim::release_psbt_shim() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingShim.psbt_shim)
  if (_internal_has_psbt_shim()) {
    clear_has_shim();
      ::lnrpc::PsbtShim* temp = shim_.psbt_shim_;
    shim_.psbt_shim_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::PsbtShim& FundingShim::_internal_psbt_shim() const {
  return _internal_has_psbt_shim()
      ? *shim_.psbt_shim_
      : *reinterpret_cast< ::lnrpc::PsbtShim*>(&::lnrpc::_PsbtShim_default_instance_);
}
inline const ::lnrpc::PsbtShim& FundingShim::psbt_shim() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingShim.psbt_shim)
  return _internal_psbt_shim();
}
inline ::lnrpc::PsbtShim* FundingShim::_internal_mutable_psbt_shim() {
  if (!_internal_has_psbt_shim()) {
    clear_shim();
    set_has_psbt_shim();
    shim_.psbt_shim_ = CreateMaybeMessage< ::lnrpc::PsbtShim >(
        GetArenaNoVirtual());
  }
  return shim_.psbt_shim_;
}
inline ::lnrpc::PsbtShim* FundingShim::mutable_psbt_shim() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingShim.psbt_shim)
  return _internal_mutable_psbt_shim();
}

inline bool FundingShim::has_shim() const {
  return shim_case() != SHIM_NOT_SET;
}
inline void FundingShim::clear_has_shim() {
  _oneof_case_[0] = SHIM_NOT_SET;
}
inline FundingShim::ShimCase FundingShim::shim_case() const {
  return FundingShim::ShimCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FundingShimCancel

// bytes pending_chan_id = 1;
inline void FundingShimCancel::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingShimCancel::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingShimCancel.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void FundingShimCancel::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingShimCancel.pending_chan_id)
}
inline std::string* FundingShimCancel::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingShimCancel.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& FundingShimCancel::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void FundingShimCancel::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingShimCancel::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingShimCancel.pending_chan_id)
}
inline void FundingShimCancel::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingShimCancel.pending_chan_id)
}
inline void FundingShimCancel::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingShimCancel.pending_chan_id)
}
inline std::string* FundingShimCancel::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingShimCancel::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingShimCancel.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingShimCancel::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingShimCancel.pending_chan_id)
}

// -------------------------------------------------------------------

// FundingPsbtVerify

// bytes funded_psbt = 1;
inline void FundingPsbtVerify::clear_funded_psbt() {
  funded_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingPsbtVerify::funded_psbt() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingPsbtVerify.funded_psbt)
  return _internal_funded_psbt();
}
inline void FundingPsbtVerify::set_funded_psbt(const std::string& value) {
  _internal_set_funded_psbt(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingPsbtVerify.funded_psbt)
}
inline std::string* FundingPsbtVerify::mutable_funded_psbt() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingPsbtVerify.funded_psbt)
  return _internal_mutable_funded_psbt();
}
inline const std::string& FundingPsbtVerify::_internal_funded_psbt() const {
  return funded_psbt_.GetNoArena();
}
inline void FundingPsbtVerify::_internal_set_funded_psbt(const std::string& value) {
  
  funded_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingPsbtVerify::set_funded_psbt(std::string&& value) {
  
  funded_psbt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingPsbtVerify.funded_psbt)
}
inline void FundingPsbtVerify::set_funded_psbt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  funded_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingPsbtVerify.funded_psbt)
}
inline void FundingPsbtVerify::set_funded_psbt(const void* value, size_t size) {
  
  funded_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingPsbtVerify.funded_psbt)
}
inline std::string* FundingPsbtVerify::_internal_mutable_funded_psbt() {
  
  return funded_psbt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingPsbtVerify::release_funded_psbt() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingPsbtVerify.funded_psbt)
  
  return funded_psbt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingPsbtVerify::set_allocated_funded_psbt(std::string* funded_psbt) {
  if (funded_psbt != nullptr) {
    
  } else {
    
  }
  funded_psbt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), funded_psbt);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingPsbtVerify.funded_psbt)
}

// bytes pending_chan_id = 2;
inline void FundingPsbtVerify::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingPsbtVerify::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingPsbtVerify.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void FundingPsbtVerify::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingPsbtVerify.pending_chan_id)
}
inline std::string* FundingPsbtVerify::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingPsbtVerify.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& FundingPsbtVerify::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void FundingPsbtVerify::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingPsbtVerify::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingPsbtVerify.pending_chan_id)
}
inline void FundingPsbtVerify::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingPsbtVerify.pending_chan_id)
}
inline void FundingPsbtVerify::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingPsbtVerify.pending_chan_id)
}
inline std::string* FundingPsbtVerify::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingPsbtVerify::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingPsbtVerify.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingPsbtVerify::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingPsbtVerify.pending_chan_id)
}

// -------------------------------------------------------------------

// FundingPsbtFinalize

// bytes signed_psbt = 1;
inline void FundingPsbtFinalize::clear_signed_psbt() {
  signed_psbt_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingPsbtFinalize::signed_psbt() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingPsbtFinalize.signed_psbt)
  return _internal_signed_psbt();
}
inline void FundingPsbtFinalize::set_signed_psbt(const std::string& value) {
  _internal_set_signed_psbt(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingPsbtFinalize.signed_psbt)
}
inline std::string* FundingPsbtFinalize::mutable_signed_psbt() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingPsbtFinalize.signed_psbt)
  return _internal_mutable_signed_psbt();
}
inline const std::string& FundingPsbtFinalize::_internal_signed_psbt() const {
  return signed_psbt_.GetNoArena();
}
inline void FundingPsbtFinalize::_internal_set_signed_psbt(const std::string& value) {
  
  signed_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingPsbtFinalize::set_signed_psbt(std::string&& value) {
  
  signed_psbt_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingPsbtFinalize.signed_psbt)
}
inline void FundingPsbtFinalize::set_signed_psbt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signed_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingPsbtFinalize.signed_psbt)
}
inline void FundingPsbtFinalize::set_signed_psbt(const void* value, size_t size) {
  
  signed_psbt_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingPsbtFinalize.signed_psbt)
}
inline std::string* FundingPsbtFinalize::_internal_mutable_signed_psbt() {
  
  return signed_psbt_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingPsbtFinalize::release_signed_psbt() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingPsbtFinalize.signed_psbt)
  
  return signed_psbt_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingPsbtFinalize::set_allocated_signed_psbt(std::string* signed_psbt) {
  if (signed_psbt != nullptr) {
    
  } else {
    
  }
  signed_psbt_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signed_psbt);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingPsbtFinalize.signed_psbt)
}

// bytes pending_chan_id = 2;
inline void FundingPsbtFinalize::clear_pending_chan_id() {
  pending_chan_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingPsbtFinalize::pending_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingPsbtFinalize.pending_chan_id)
  return _internal_pending_chan_id();
}
inline void FundingPsbtFinalize::set_pending_chan_id(const std::string& value) {
  _internal_set_pending_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingPsbtFinalize.pending_chan_id)
}
inline std::string* FundingPsbtFinalize::mutable_pending_chan_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingPsbtFinalize.pending_chan_id)
  return _internal_mutable_pending_chan_id();
}
inline const std::string& FundingPsbtFinalize::_internal_pending_chan_id() const {
  return pending_chan_id_.GetNoArena();
}
inline void FundingPsbtFinalize::_internal_set_pending_chan_id(const std::string& value) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingPsbtFinalize::set_pending_chan_id(std::string&& value) {
  
  pending_chan_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingPsbtFinalize.pending_chan_id)
}
inline void FundingPsbtFinalize::set_pending_chan_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingPsbtFinalize.pending_chan_id)
}
inline void FundingPsbtFinalize::set_pending_chan_id(const void* value, size_t size) {
  
  pending_chan_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingPsbtFinalize.pending_chan_id)
}
inline std::string* FundingPsbtFinalize::_internal_mutable_pending_chan_id() {
  
  return pending_chan_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingPsbtFinalize::release_pending_chan_id() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingPsbtFinalize.pending_chan_id)
  
  return pending_chan_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingPsbtFinalize::set_allocated_pending_chan_id(std::string* pending_chan_id) {
  if (pending_chan_id != nullptr) {
    
  } else {
    
  }
  pending_chan_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pending_chan_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingPsbtFinalize.pending_chan_id)
}

// bytes final_raw_tx = 3;
inline void FundingPsbtFinalize::clear_final_raw_tx() {
  final_raw_tx_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FundingPsbtFinalize::final_raw_tx() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingPsbtFinalize.final_raw_tx)
  return _internal_final_raw_tx();
}
inline void FundingPsbtFinalize::set_final_raw_tx(const std::string& value) {
  _internal_set_final_raw_tx(value);
  // @@protoc_insertion_point(field_set:lnrpc.FundingPsbtFinalize.final_raw_tx)
}
inline std::string* FundingPsbtFinalize::mutable_final_raw_tx() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingPsbtFinalize.final_raw_tx)
  return _internal_mutable_final_raw_tx();
}
inline const std::string& FundingPsbtFinalize::_internal_final_raw_tx() const {
  return final_raw_tx_.GetNoArena();
}
inline void FundingPsbtFinalize::_internal_set_final_raw_tx(const std::string& value) {
  
  final_raw_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FundingPsbtFinalize::set_final_raw_tx(std::string&& value) {
  
  final_raw_tx_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.FundingPsbtFinalize.final_raw_tx)
}
inline void FundingPsbtFinalize::set_final_raw_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  final_raw_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.FundingPsbtFinalize.final_raw_tx)
}
inline void FundingPsbtFinalize::set_final_raw_tx(const void* value, size_t size) {
  
  final_raw_tx_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.FundingPsbtFinalize.final_raw_tx)
}
inline std::string* FundingPsbtFinalize::_internal_mutable_final_raw_tx() {
  
  return final_raw_tx_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FundingPsbtFinalize::release_final_raw_tx() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingPsbtFinalize.final_raw_tx)
  
  return final_raw_tx_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FundingPsbtFinalize::set_allocated_final_raw_tx(std::string* final_raw_tx) {
  if (final_raw_tx != nullptr) {
    
  } else {
    
  }
  final_raw_tx_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), final_raw_tx);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.FundingPsbtFinalize.final_raw_tx)
}

// -------------------------------------------------------------------

// FundingTransitionMsg

// .lnrpc.FundingShim shim_register = 1;
inline bool FundingTransitionMsg::_internal_has_shim_register() const {
  return trigger_case() == kShimRegister;
}
inline bool FundingTransitionMsg::has_shim_register() const {
  return _internal_has_shim_register();
}
inline void FundingTransitionMsg::set_has_shim_register() {
  _oneof_case_[0] = kShimRegister;
}
inline void FundingTransitionMsg::clear_shim_register() {
  if (_internal_has_shim_register()) {
    delete trigger_.shim_register_;
    clear_has_trigger();
  }
}
inline ::lnrpc::FundingShim* FundingTransitionMsg::release_shim_register() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingTransitionMsg.shim_register)
  if (_internal_has_shim_register()) {
    clear_has_trigger();
      ::lnrpc::FundingShim* temp = trigger_.shim_register_;
    trigger_.shim_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::FundingShim& FundingTransitionMsg::_internal_shim_register() const {
  return _internal_has_shim_register()
      ? *trigger_.shim_register_
      : *reinterpret_cast< ::lnrpc::FundingShim*>(&::lnrpc::_FundingShim_default_instance_);
}
inline const ::lnrpc::FundingShim& FundingTransitionMsg::shim_register() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingTransitionMsg.shim_register)
  return _internal_shim_register();
}
inline ::lnrpc::FundingShim* FundingTransitionMsg::_internal_mutable_shim_register() {
  if (!_internal_has_shim_register()) {
    clear_trigger();
    set_has_shim_register();
    trigger_.shim_register_ = CreateMaybeMessage< ::lnrpc::FundingShim >(
        GetArenaNoVirtual());
  }
  return trigger_.shim_register_;
}
inline ::lnrpc::FundingShim* FundingTransitionMsg::mutable_shim_register() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingTransitionMsg.shim_register)
  return _internal_mutable_shim_register();
}

// .lnrpc.FundingShimCancel shim_cancel = 2;
inline bool FundingTransitionMsg::_internal_has_shim_cancel() const {
  return trigger_case() == kShimCancel;
}
inline bool FundingTransitionMsg::has_shim_cancel() const {
  return _internal_has_shim_cancel();
}
inline void FundingTransitionMsg::set_has_shim_cancel() {
  _oneof_case_[0] = kShimCancel;
}
inline void FundingTransitionMsg::clear_shim_cancel() {
  if (_internal_has_shim_cancel()) {
    delete trigger_.shim_cancel_;
    clear_has_trigger();
  }
}
inline ::lnrpc::FundingShimCancel* FundingTransitionMsg::release_shim_cancel() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingTransitionMsg.shim_cancel)
  if (_internal_has_shim_cancel()) {
    clear_has_trigger();
      ::lnrpc::FundingShimCancel* temp = trigger_.shim_cancel_;
    trigger_.shim_cancel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::FundingShimCancel& FundingTransitionMsg::_internal_shim_cancel() const {
  return _internal_has_shim_cancel()
      ? *trigger_.shim_cancel_
      : *reinterpret_cast< ::lnrpc::FundingShimCancel*>(&::lnrpc::_FundingShimCancel_default_instance_);
}
inline const ::lnrpc::FundingShimCancel& FundingTransitionMsg::shim_cancel() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingTransitionMsg.shim_cancel)
  return _internal_shim_cancel();
}
inline ::lnrpc::FundingShimCancel* FundingTransitionMsg::_internal_mutable_shim_cancel() {
  if (!_internal_has_shim_cancel()) {
    clear_trigger();
    set_has_shim_cancel();
    trigger_.shim_cancel_ = CreateMaybeMessage< ::lnrpc::FundingShimCancel >(
        GetArenaNoVirtual());
  }
  return trigger_.shim_cancel_;
}
inline ::lnrpc::FundingShimCancel* FundingTransitionMsg::mutable_shim_cancel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingTransitionMsg.shim_cancel)
  return _internal_mutable_shim_cancel();
}

// .lnrpc.FundingPsbtVerify psbt_verify = 3;
inline bool FundingTransitionMsg::_internal_has_psbt_verify() const {
  return trigger_case() == kPsbtVerify;
}
inline bool FundingTransitionMsg::has_psbt_verify() const {
  return _internal_has_psbt_verify();
}
inline void FundingTransitionMsg::set_has_psbt_verify() {
  _oneof_case_[0] = kPsbtVerify;
}
inline void FundingTransitionMsg::clear_psbt_verify() {
  if (_internal_has_psbt_verify()) {
    delete trigger_.psbt_verify_;
    clear_has_trigger();
  }
}
inline ::lnrpc::FundingPsbtVerify* FundingTransitionMsg::release_psbt_verify() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingTransitionMsg.psbt_verify)
  if (_internal_has_psbt_verify()) {
    clear_has_trigger();
      ::lnrpc::FundingPsbtVerify* temp = trigger_.psbt_verify_;
    trigger_.psbt_verify_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::FundingPsbtVerify& FundingTransitionMsg::_internal_psbt_verify() const {
  return _internal_has_psbt_verify()
      ? *trigger_.psbt_verify_
      : *reinterpret_cast< ::lnrpc::FundingPsbtVerify*>(&::lnrpc::_FundingPsbtVerify_default_instance_);
}
inline const ::lnrpc::FundingPsbtVerify& FundingTransitionMsg::psbt_verify() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingTransitionMsg.psbt_verify)
  return _internal_psbt_verify();
}
inline ::lnrpc::FundingPsbtVerify* FundingTransitionMsg::_internal_mutable_psbt_verify() {
  if (!_internal_has_psbt_verify()) {
    clear_trigger();
    set_has_psbt_verify();
    trigger_.psbt_verify_ = CreateMaybeMessage< ::lnrpc::FundingPsbtVerify >(
        GetArenaNoVirtual());
  }
  return trigger_.psbt_verify_;
}
inline ::lnrpc::FundingPsbtVerify* FundingTransitionMsg::mutable_psbt_verify() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingTransitionMsg.psbt_verify)
  return _internal_mutable_psbt_verify();
}

// .lnrpc.FundingPsbtFinalize psbt_finalize = 4;
inline bool FundingTransitionMsg::_internal_has_psbt_finalize() const {
  return trigger_case() == kPsbtFinalize;
}
inline bool FundingTransitionMsg::has_psbt_finalize() const {
  return _internal_has_psbt_finalize();
}
inline void FundingTransitionMsg::set_has_psbt_finalize() {
  _oneof_case_[0] = kPsbtFinalize;
}
inline void FundingTransitionMsg::clear_psbt_finalize() {
  if (_internal_has_psbt_finalize()) {
    delete trigger_.psbt_finalize_;
    clear_has_trigger();
  }
}
inline ::lnrpc::FundingPsbtFinalize* FundingTransitionMsg::release_psbt_finalize() {
  // @@protoc_insertion_point(field_release:lnrpc.FundingTransitionMsg.psbt_finalize)
  if (_internal_has_psbt_finalize()) {
    clear_has_trigger();
      ::lnrpc::FundingPsbtFinalize* temp = trigger_.psbt_finalize_;
    trigger_.psbt_finalize_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::FundingPsbtFinalize& FundingTransitionMsg::_internal_psbt_finalize() const {
  return _internal_has_psbt_finalize()
      ? *trigger_.psbt_finalize_
      : *reinterpret_cast< ::lnrpc::FundingPsbtFinalize*>(&::lnrpc::_FundingPsbtFinalize_default_instance_);
}
inline const ::lnrpc::FundingPsbtFinalize& FundingTransitionMsg::psbt_finalize() const {
  // @@protoc_insertion_point(field_get:lnrpc.FundingTransitionMsg.psbt_finalize)
  return _internal_psbt_finalize();
}
inline ::lnrpc::FundingPsbtFinalize* FundingTransitionMsg::_internal_mutable_psbt_finalize() {
  if (!_internal_has_psbt_finalize()) {
    clear_trigger();
    set_has_psbt_finalize();
    trigger_.psbt_finalize_ = CreateMaybeMessage< ::lnrpc::FundingPsbtFinalize >(
        GetArenaNoVirtual());
  }
  return trigger_.psbt_finalize_;
}
inline ::lnrpc::FundingPsbtFinalize* FundingTransitionMsg::mutable_psbt_finalize() {
  // @@protoc_insertion_point(field_mutable:lnrpc.FundingTransitionMsg.psbt_finalize)
  return _internal_mutable_psbt_finalize();
}

inline bool FundingTransitionMsg::has_trigger() const {
  return trigger_case() != TRIGGER_NOT_SET;
}
inline void FundingTransitionMsg::clear_has_trigger() {
  _oneof_case_[0] = TRIGGER_NOT_SET;
}
inline FundingTransitionMsg::TriggerCase FundingTransitionMsg::trigger_case() const {
  return FundingTransitionMsg::TriggerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FundingStateStepResp

// -------------------------------------------------------------------

// PendingHTLC

// bool incoming = 1;
inline void PendingHTLC::clear_incoming() {
  incoming_ = false;
}
inline bool PendingHTLC::_internal_incoming() const {
  return incoming_;
}
inline bool PendingHTLC::incoming() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.incoming)
  return _internal_incoming();
}
inline void PendingHTLC::_internal_set_incoming(bool value) {
  
  incoming_ = value;
}
inline void PendingHTLC::set_incoming(bool value) {
  _internal_set_incoming(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.incoming)
}

// int64 amount = 2;
inline void PendingHTLC::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingHTLC::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingHTLC::amount() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.amount)
  return _internal_amount();
}
inline void PendingHTLC::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void PendingHTLC::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.amount)
}

// string outpoint = 3;
inline void PendingHTLC::clear_outpoint() {
  outpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingHTLC::outpoint() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.outpoint)
  return _internal_outpoint();
}
inline void PendingHTLC::set_outpoint(const std::string& value) {
  _internal_set_outpoint(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.outpoint)
}
inline std::string* PendingHTLC::mutable_outpoint() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingHTLC.outpoint)
  return _internal_mutable_outpoint();
}
inline const std::string& PendingHTLC::_internal_outpoint() const {
  return outpoint_.GetNoArena();
}
inline void PendingHTLC::_internal_set_outpoint(const std::string& value) {
  
  outpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingHTLC::set_outpoint(std::string&& value) {
  
  outpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingHTLC.outpoint)
}
inline void PendingHTLC::set_outpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  outpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingHTLC.outpoint)
}
inline void PendingHTLC::set_outpoint(const char* value, size_t size) {
  
  outpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingHTLC.outpoint)
}
inline std::string* PendingHTLC::_internal_mutable_outpoint() {
  
  return outpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingHTLC::release_outpoint() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingHTLC.outpoint)
  
  return outpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingHTLC::set_allocated_outpoint(std::string* outpoint) {
  if (outpoint != nullptr) {
    
  } else {
    
  }
  outpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), outpoint);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingHTLC.outpoint)
}

// uint32 maturity_height = 4;
inline void PendingHTLC::clear_maturity_height() {
  maturity_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingHTLC::_internal_maturity_height() const {
  return maturity_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingHTLC::maturity_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.maturity_height)
  return _internal_maturity_height();
}
inline void PendingHTLC::_internal_set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_height_ = value;
}
inline void PendingHTLC::set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.maturity_height)
}

// int32 blocks_til_maturity = 5;
inline void PendingHTLC::clear_blocks_til_maturity() {
  blocks_til_maturity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PendingHTLC::_internal_blocks_til_maturity() const {
  return blocks_til_maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PendingHTLC::blocks_til_maturity() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.blocks_til_maturity)
  return _internal_blocks_til_maturity();
}
inline void PendingHTLC::_internal_set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blocks_til_maturity_ = value;
}
inline void PendingHTLC::set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocks_til_maturity(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.blocks_til_maturity)
}

// uint32 stage = 6;
inline void PendingHTLC::clear_stage() {
  stage_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingHTLC::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingHTLC::stage() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingHTLC.stage)
  return _internal_stage();
}
inline void PendingHTLC::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stage_ = value;
}
inline void PendingHTLC::set_stage(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingHTLC.stage)
}

// -------------------------------------------------------------------

// PendingChannelsRequest

// -------------------------------------------------------------------

// PendingChannelsResponse_PendingChannel

// string remote_node_pub = 1;
inline void PendingChannelsResponse_PendingChannel::clear_remote_node_pub() {
  remote_node_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_PendingChannel::remote_node_pub() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
  return _internal_remote_node_pub();
}
inline void PendingChannelsResponse_PendingChannel::set_remote_node_pub(const std::string& value) {
  _internal_set_remote_node_pub(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
}
inline std::string* PendingChannelsResponse_PendingChannel::mutable_remote_node_pub() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
  return _internal_mutable_remote_node_pub();
}
inline const std::string& PendingChannelsResponse_PendingChannel::_internal_remote_node_pub() const {
  return remote_node_pub_.GetNoArena();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_remote_node_pub(const std::string& value) {
  
  remote_node_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_PendingChannel::set_remote_node_pub(std::string&& value) {
  
  remote_node_pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
}
inline void PendingChannelsResponse_PendingChannel::set_remote_node_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_node_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
}
inline void PendingChannelsResponse_PendingChannel::set_remote_node_pub(const char* value, size_t size) {
  
  remote_node_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
}
inline std::string* PendingChannelsResponse_PendingChannel::_internal_mutable_remote_node_pub() {
  
  return remote_node_pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_PendingChannel::release_remote_node_pub() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
  
  return remote_node_pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_PendingChannel::set_allocated_remote_node_pub(std::string* remote_node_pub) {
  if (remote_node_pub != nullptr) {
    
  } else {
    
  }
  remote_node_pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_node_pub);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.PendingChannel.remote_node_pub)
}

// string channel_point = 2;
inline void PendingChannelsResponse_PendingChannel::clear_channel_point() {
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_PendingChannel::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
  return _internal_channel_point();
}
inline void PendingChannelsResponse_PendingChannel::set_channel_point(const std::string& value) {
  _internal_set_channel_point(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
}
inline std::string* PendingChannelsResponse_PendingChannel::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
  return _internal_mutable_channel_point();
}
inline const std::string& PendingChannelsResponse_PendingChannel::_internal_channel_point() const {
  return channel_point_.GetNoArena();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_channel_point(const std::string& value) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_PendingChannel::set_channel_point(std::string&& value) {
  
  channel_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
}
inline void PendingChannelsResponse_PendingChannel::set_channel_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
}
inline void PendingChannelsResponse_PendingChannel::set_channel_point(const char* value, size_t size) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
}
inline std::string* PendingChannelsResponse_PendingChannel::_internal_mutable_channel_point() {
  
  return channel_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_PendingChannel::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
  
  return channel_point_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_PendingChannel::set_allocated_channel_point(std::string* channel_point) {
  if (channel_point != nullptr) {
    
  } else {
    
  }
  channel_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_point);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.PendingChannel.channel_point)
}

// int64 capacity = 3;
inline void PendingChannelsResponse_PendingChannel::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.capacity)
  return _internal_capacity();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.capacity)
}

// int64 local_balance = 4;
inline void PendingChannelsResponse_PendingChannel::clear_local_balance() {
  local_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::_internal_local_balance() const {
  return local_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::local_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.local_balance)
  return _internal_local_balance();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_balance_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_local_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.local_balance)
}

// int64 remote_balance = 5;
inline void PendingChannelsResponse_PendingChannel::clear_remote_balance() {
  remote_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::_internal_remote_balance() const {
  return remote_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::remote_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.remote_balance)
  return _internal_remote_balance();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remote_balance_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_remote_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remote_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.remote_balance)
}

// int64 local_chan_reserve_sat = 6;
inline void PendingChannelsResponse_PendingChannel::clear_local_chan_reserve_sat() {
  local_chan_reserve_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::_internal_local_chan_reserve_sat() const {
  return local_chan_reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::local_chan_reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.local_chan_reserve_sat)
  return _internal_local_chan_reserve_sat();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  local_chan_reserve_sat_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_local_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_local_chan_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.local_chan_reserve_sat)
}

// int64 remote_chan_reserve_sat = 7;
inline void PendingChannelsResponse_PendingChannel::clear_remote_chan_reserve_sat() {
  remote_chan_reserve_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::_internal_remote_chan_reserve_sat() const {
  return remote_chan_reserve_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingChannel::remote_chan_reserve_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.remote_chan_reserve_sat)
  return _internal_remote_chan_reserve_sat();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remote_chan_reserve_sat_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_remote_chan_reserve_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remote_chan_reserve_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.remote_chan_reserve_sat)
}

// .lnrpc.Initiator initiator = 8;
inline void PendingChannelsResponse_PendingChannel::clear_initiator() {
  initiator_ = 0;
}
inline ::lnrpc::Initiator PendingChannelsResponse_PendingChannel::_internal_initiator() const {
  return static_cast< ::lnrpc::Initiator >(initiator_);
}
inline ::lnrpc::Initiator PendingChannelsResponse_PendingChannel::initiator() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.initiator)
  return _internal_initiator();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_initiator(::lnrpc::Initiator value) {
  
  initiator_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_initiator(::lnrpc::Initiator value) {
  _internal_set_initiator(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.initiator)
}

// .lnrpc.CommitmentType commitment_type = 9;
inline void PendingChannelsResponse_PendingChannel::clear_commitment_type() {
  commitment_type_ = 0;
}
inline ::lnrpc::CommitmentType PendingChannelsResponse_PendingChannel::_internal_commitment_type() const {
  return static_cast< ::lnrpc::CommitmentType >(commitment_type_);
}
inline ::lnrpc::CommitmentType PendingChannelsResponse_PendingChannel::commitment_type() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingChannel.commitment_type)
  return _internal_commitment_type();
}
inline void PendingChannelsResponse_PendingChannel::_internal_set_commitment_type(::lnrpc::CommitmentType value) {
  
  commitment_type_ = value;
}
inline void PendingChannelsResponse_PendingChannel::set_commitment_type(::lnrpc::CommitmentType value) {
  _internal_set_commitment_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingChannel.commitment_type)
}

// -------------------------------------------------------------------

// PendingChannelsResponse_PendingOpenChannel

// .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
inline bool PendingChannelsResponse_PendingOpenChannel::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool PendingChannelsResponse_PendingOpenChannel::has_channel() const {
  return _internal_has_channel();
}
inline void PendingChannelsResponse_PendingOpenChannel::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_PendingOpenChannel::_internal_channel() const {
  const ::lnrpc::PendingChannelsResponse_PendingChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      &::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_);
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_PendingOpenChannel::channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingOpenChannel.channel)
  return _internal_channel();
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_PendingOpenChannel::release_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.PendingOpenChannel.channel)
  
  ::lnrpc::PendingChannelsResponse_PendingChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_PendingOpenChannel::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_PendingOpenChannel::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.PendingOpenChannel.channel)
  return _internal_mutable_channel();
}
inline void PendingChannelsResponse_PendingOpenChannel::set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.PendingOpenChannel.channel)
}

// uint32 confirmation_height = 2;
inline void PendingChannelsResponse_PendingOpenChannel::clear_confirmation_height() {
  confirmation_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingChannelsResponse_PendingOpenChannel::_internal_confirmation_height() const {
  return confirmation_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingChannelsResponse_PendingOpenChannel::confirmation_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingOpenChannel.confirmation_height)
  return _internal_confirmation_height();
}
inline void PendingChannelsResponse_PendingOpenChannel::_internal_set_confirmation_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  confirmation_height_ = value;
}
inline void PendingChannelsResponse_PendingOpenChannel::set_confirmation_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_confirmation_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingOpenChannel.confirmation_height)
}

// int64 commit_fee = 4;
inline void PendingChannelsResponse_PendingOpenChannel::clear_commit_fee() {
  commit_fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::_internal_commit_fee() const {
  return commit_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::commit_fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingOpenChannel.commit_fee)
  return _internal_commit_fee();
}
inline void PendingChannelsResponse_PendingOpenChannel::_internal_set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commit_fee_ = value;
}
inline void PendingChannelsResponse_PendingOpenChannel::set_commit_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commit_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingOpenChannel.commit_fee)
}

// int64 commit_weight = 5;
inline void PendingChannelsResponse_PendingOpenChannel::clear_commit_weight() {
  commit_weight_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::_internal_commit_weight() const {
  return commit_weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::commit_weight() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingOpenChannel.commit_weight)
  return _internal_commit_weight();
}
inline void PendingChannelsResponse_PendingOpenChannel::_internal_set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  commit_weight_ = value;
}
inline void PendingChannelsResponse_PendingOpenChannel::set_commit_weight(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_commit_weight(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingOpenChannel.commit_weight)
}

// int64 fee_per_kw = 6;
inline void PendingChannelsResponse_PendingOpenChannel::clear_fee_per_kw() {
  fee_per_kw_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::_internal_fee_per_kw() const {
  return fee_per_kw_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_PendingOpenChannel::fee_per_kw() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.PendingOpenChannel.fee_per_kw)
  return _internal_fee_per_kw();
}
inline void PendingChannelsResponse_PendingOpenChannel::_internal_set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_per_kw_ = value;
}
inline void PendingChannelsResponse_PendingOpenChannel::set_fee_per_kw(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_per_kw(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.PendingOpenChannel.fee_per_kw)
}

// -------------------------------------------------------------------

// PendingChannelsResponse_WaitingCloseChannel

// .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
inline bool PendingChannelsResponse_WaitingCloseChannel::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool PendingChannelsResponse_WaitingCloseChannel::has_channel() const {
  return _internal_has_channel();
}
inline void PendingChannelsResponse_WaitingCloseChannel::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_WaitingCloseChannel::_internal_channel() const {
  const ::lnrpc::PendingChannelsResponse_PendingChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      &::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_);
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_WaitingCloseChannel::channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.WaitingCloseChannel.channel)
  return _internal_channel();
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_WaitingCloseChannel::release_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.WaitingCloseChannel.channel)
  
  ::lnrpc::PendingChannelsResponse_PendingChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_WaitingCloseChannel::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_WaitingCloseChannel::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.WaitingCloseChannel.channel)
  return _internal_mutable_channel();
}
inline void PendingChannelsResponse_WaitingCloseChannel::set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.WaitingCloseChannel.channel)
}

// int64 limbo_balance = 2;
inline void PendingChannelsResponse_WaitingCloseChannel::clear_limbo_balance() {
  limbo_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_WaitingCloseChannel::_internal_limbo_balance() const {
  return limbo_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_WaitingCloseChannel::limbo_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.WaitingCloseChannel.limbo_balance)
  return _internal_limbo_balance();
}
inline void PendingChannelsResponse_WaitingCloseChannel::_internal_set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limbo_balance_ = value;
}
inline void PendingChannelsResponse_WaitingCloseChannel::set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limbo_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.WaitingCloseChannel.limbo_balance)
}

// .lnrpc.PendingChannelsResponse.Commitments commitments = 3;
inline bool PendingChannelsResponse_WaitingCloseChannel::_internal_has_commitments() const {
  return this != internal_default_instance() && commitments_ != nullptr;
}
inline bool PendingChannelsResponse_WaitingCloseChannel::has_commitments() const {
  return _internal_has_commitments();
}
inline void PendingChannelsResponse_WaitingCloseChannel::clear_commitments() {
  if (GetArenaNoVirtual() == nullptr && commitments_ != nullptr) {
    delete commitments_;
  }
  commitments_ = nullptr;
}
inline const ::lnrpc::PendingChannelsResponse_Commitments& PendingChannelsResponse_WaitingCloseChannel::_internal_commitments() const {
  const ::lnrpc::PendingChannelsResponse_Commitments* p = commitments_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::PendingChannelsResponse_Commitments*>(
      &::lnrpc::_PendingChannelsResponse_Commitments_default_instance_);
}
inline const ::lnrpc::PendingChannelsResponse_Commitments& PendingChannelsResponse_WaitingCloseChannel::commitments() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.WaitingCloseChannel.commitments)
  return _internal_commitments();
}
inline ::lnrpc::PendingChannelsResponse_Commitments* PendingChannelsResponse_WaitingCloseChannel::release_commitments() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.WaitingCloseChannel.commitments)
  
  ::lnrpc::PendingChannelsResponse_Commitments* temp = commitments_;
  commitments_ = nullptr;
  return temp;
}
inline ::lnrpc::PendingChannelsResponse_Commitments* PendingChannelsResponse_WaitingCloseChannel::_internal_mutable_commitments() {
  
  if (commitments_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::PendingChannelsResponse_Commitments>(GetArenaNoVirtual());
    commitments_ = p;
  }
  return commitments_;
}
inline ::lnrpc::PendingChannelsResponse_Commitments* PendingChannelsResponse_WaitingCloseChannel::mutable_commitments() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.WaitingCloseChannel.commitments)
  return _internal_mutable_commitments();
}
inline void PendingChannelsResponse_WaitingCloseChannel::set_allocated_commitments(::lnrpc::PendingChannelsResponse_Commitments* commitments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete commitments_;
  }
  if (commitments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commitments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commitments, submessage_arena);
    }
    
  } else {
    
  }
  commitments_ = commitments;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.WaitingCloseChannel.commitments)
}

// -------------------------------------------------------------------

// PendingChannelsResponse_Commitments

// string local_txid = 1;
inline void PendingChannelsResponse_Commitments::clear_local_txid() {
  local_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_Commitments::local_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.local_txid)
  return _internal_local_txid();
}
inline void PendingChannelsResponse_Commitments::set_local_txid(const std::string& value) {
  _internal_set_local_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.local_txid)
}
inline std::string* PendingChannelsResponse_Commitments::mutable_local_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.Commitments.local_txid)
  return _internal_mutable_local_txid();
}
inline const std::string& PendingChannelsResponse_Commitments::_internal_local_txid() const {
  return local_txid_.GetNoArena();
}
inline void PendingChannelsResponse_Commitments::_internal_set_local_txid(const std::string& value) {
  
  local_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_Commitments::set_local_txid(std::string&& value) {
  
  local_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.Commitments.local_txid)
}
inline void PendingChannelsResponse_Commitments::set_local_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.Commitments.local_txid)
}
inline void PendingChannelsResponse_Commitments::set_local_txid(const char* value, size_t size) {
  
  local_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.Commitments.local_txid)
}
inline std::string* PendingChannelsResponse_Commitments::_internal_mutable_local_txid() {
  
  return local_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_Commitments::release_local_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.Commitments.local_txid)
  
  return local_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_Commitments::set_allocated_local_txid(std::string* local_txid) {
  if (local_txid != nullptr) {
    
  } else {
    
  }
  local_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.Commitments.local_txid)
}

// string remote_txid = 2;
inline void PendingChannelsResponse_Commitments::clear_remote_txid() {
  remote_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_Commitments::remote_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
  return _internal_remote_txid();
}
inline void PendingChannelsResponse_Commitments::set_remote_txid(const std::string& value) {
  _internal_set_remote_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
}
inline std::string* PendingChannelsResponse_Commitments::mutable_remote_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
  return _internal_mutable_remote_txid();
}
inline const std::string& PendingChannelsResponse_Commitments::_internal_remote_txid() const {
  return remote_txid_.GetNoArena();
}
inline void PendingChannelsResponse_Commitments::_internal_set_remote_txid(const std::string& value) {
  
  remote_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_Commitments::set_remote_txid(std::string&& value) {
  
  remote_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
}
inline void PendingChannelsResponse_Commitments::set_remote_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
}
inline void PendingChannelsResponse_Commitments::set_remote_txid(const char* value, size_t size) {
  
  remote_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
}
inline std::string* PendingChannelsResponse_Commitments::_internal_mutable_remote_txid() {
  
  return remote_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_Commitments::release_remote_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
  
  return remote_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_Commitments::set_allocated_remote_txid(std::string* remote_txid) {
  if (remote_txid != nullptr) {
    
  } else {
    
  }
  remote_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.Commitments.remote_txid)
}

// string remote_pending_txid = 3;
inline void PendingChannelsResponse_Commitments::clear_remote_pending_txid() {
  remote_pending_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_Commitments::remote_pending_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
  return _internal_remote_pending_txid();
}
inline void PendingChannelsResponse_Commitments::set_remote_pending_txid(const std::string& value) {
  _internal_set_remote_pending_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
}
inline std::string* PendingChannelsResponse_Commitments::mutable_remote_pending_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
  return _internal_mutable_remote_pending_txid();
}
inline const std::string& PendingChannelsResponse_Commitments::_internal_remote_pending_txid() const {
  return remote_pending_txid_.GetNoArena();
}
inline void PendingChannelsResponse_Commitments::_internal_set_remote_pending_txid(const std::string& value) {
  
  remote_pending_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_Commitments::set_remote_pending_txid(std::string&& value) {
  
  remote_pending_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
}
inline void PendingChannelsResponse_Commitments::set_remote_pending_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  remote_pending_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
}
inline void PendingChannelsResponse_Commitments::set_remote_pending_txid(const char* value, size_t size) {
  
  remote_pending_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
}
inline std::string* PendingChannelsResponse_Commitments::_internal_mutable_remote_pending_txid() {
  
  return remote_pending_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_Commitments::release_remote_pending_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
  
  return remote_pending_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_Commitments::set_allocated_remote_pending_txid(std::string* remote_pending_txid) {
  if (remote_pending_txid != nullptr) {
    
  } else {
    
  }
  remote_pending_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), remote_pending_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.Commitments.remote_pending_txid)
}

// uint64 local_commit_fee_sat = 4;
inline void PendingChannelsResponse_Commitments::clear_local_commit_fee_sat() {
  local_commit_fee_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::_internal_local_commit_fee_sat() const {
  return local_commit_fee_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::local_commit_fee_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.local_commit_fee_sat)
  return _internal_local_commit_fee_sat();
}
inline void PendingChannelsResponse_Commitments::_internal_set_local_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  local_commit_fee_sat_ = value;
}
inline void PendingChannelsResponse_Commitments::set_local_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_local_commit_fee_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.local_commit_fee_sat)
}

// uint64 remote_commit_fee_sat = 5;
inline void PendingChannelsResponse_Commitments::clear_remote_commit_fee_sat() {
  remote_commit_fee_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::_internal_remote_commit_fee_sat() const {
  return remote_commit_fee_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::remote_commit_fee_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.remote_commit_fee_sat)
  return _internal_remote_commit_fee_sat();
}
inline void PendingChannelsResponse_Commitments::_internal_set_remote_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remote_commit_fee_sat_ = value;
}
inline void PendingChannelsResponse_Commitments::set_remote_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remote_commit_fee_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.remote_commit_fee_sat)
}

// uint64 remote_pending_commit_fee_sat = 6;
inline void PendingChannelsResponse_Commitments::clear_remote_pending_commit_fee_sat() {
  remote_pending_commit_fee_sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::_internal_remote_pending_commit_fee_sat() const {
  return remote_pending_commit_fee_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PendingChannelsResponse_Commitments::remote_pending_commit_fee_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.Commitments.remote_pending_commit_fee_sat)
  return _internal_remote_pending_commit_fee_sat();
}
inline void PendingChannelsResponse_Commitments::_internal_set_remote_pending_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  remote_pending_commit_fee_sat_ = value;
}
inline void PendingChannelsResponse_Commitments::set_remote_pending_commit_fee_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_remote_pending_commit_fee_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.Commitments.remote_pending_commit_fee_sat)
}

// -------------------------------------------------------------------

// PendingChannelsResponse_ClosedChannel

// .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
inline bool PendingChannelsResponse_ClosedChannel::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool PendingChannelsResponse_ClosedChannel::has_channel() const {
  return _internal_has_channel();
}
inline void PendingChannelsResponse_ClosedChannel::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_ClosedChannel::_internal_channel() const {
  const ::lnrpc::PendingChannelsResponse_PendingChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      &::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_);
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_ClosedChannel::channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ClosedChannel.channel)
  return _internal_channel();
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ClosedChannel::release_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.ClosedChannel.channel)
  
  ::lnrpc::PendingChannelsResponse_PendingChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ClosedChannel::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ClosedChannel::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.ClosedChannel.channel)
  return _internal_mutable_channel();
}
inline void PendingChannelsResponse_ClosedChannel::set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.ClosedChannel.channel)
}

// string closing_txid = 2;
inline void PendingChannelsResponse_ClosedChannel::clear_closing_txid() {
  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_ClosedChannel::closing_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
  return _internal_closing_txid();
}
inline void PendingChannelsResponse_ClosedChannel::set_closing_txid(const std::string& value) {
  _internal_set_closing_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
}
inline std::string* PendingChannelsResponse_ClosedChannel::mutable_closing_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
  return _internal_mutable_closing_txid();
}
inline const std::string& PendingChannelsResponse_ClosedChannel::_internal_closing_txid() const {
  return closing_txid_.GetNoArena();
}
inline void PendingChannelsResponse_ClosedChannel::_internal_set_closing_txid(const std::string& value) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_ClosedChannel::set_closing_txid(std::string&& value) {
  
  closing_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
}
inline void PendingChannelsResponse_ClosedChannel::set_closing_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
}
inline void PendingChannelsResponse_ClosedChannel::set_closing_txid(const char* value, size_t size) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
}
inline std::string* PendingChannelsResponse_ClosedChannel::_internal_mutable_closing_txid() {
  
  return closing_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_ClosedChannel::release_closing_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
  
  return closing_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_ClosedChannel::set_allocated_closing_txid(std::string* closing_txid) {
  if (closing_txid != nullptr) {
    
  } else {
    
  }
  closing_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closing_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.ClosedChannel.closing_txid)
}

// -------------------------------------------------------------------

// PendingChannelsResponse_ForceClosedChannel

// .lnrpc.PendingChannelsResponse.PendingChannel channel = 1;
inline bool PendingChannelsResponse_ForceClosedChannel::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool PendingChannelsResponse_ForceClosedChannel::has_channel() const {
  return _internal_has_channel();
}
inline void PendingChannelsResponse_ForceClosedChannel::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_ForceClosedChannel::_internal_channel() const {
  const ::lnrpc::PendingChannelsResponse_PendingChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::PendingChannelsResponse_PendingChannel*>(
      &::lnrpc::_PendingChannelsResponse_PendingChannel_default_instance_);
}
inline const ::lnrpc::PendingChannelsResponse_PendingChannel& PendingChannelsResponse_ForceClosedChannel::channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.channel)
  return _internal_channel();
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ForceClosedChannel::release_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.ForceClosedChannel.channel)
  
  ::lnrpc::PendingChannelsResponse_PendingChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ForceClosedChannel::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::PendingChannelsResponse_PendingChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::lnrpc::PendingChannelsResponse_PendingChannel* PendingChannelsResponse_ForceClosedChannel::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.ForceClosedChannel.channel)
  return _internal_mutable_channel();
}
inline void PendingChannelsResponse_ForceClosedChannel::set_allocated_channel(::lnrpc::PendingChannelsResponse_PendingChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_;
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.ForceClosedChannel.channel)
}

// string closing_txid = 2;
inline void PendingChannelsResponse_ForceClosedChannel::clear_closing_txid() {
  closing_txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PendingChannelsResponse_ForceClosedChannel::closing_txid() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
  return _internal_closing_txid();
}
inline void PendingChannelsResponse_ForceClosedChannel::set_closing_txid(const std::string& value) {
  _internal_set_closing_txid(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
}
inline std::string* PendingChannelsResponse_ForceClosedChannel::mutable_closing_txid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
  return _internal_mutable_closing_txid();
}
inline const std::string& PendingChannelsResponse_ForceClosedChannel::_internal_closing_txid() const {
  return closing_txid_.GetNoArena();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_closing_txid(const std::string& value) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PendingChannelsResponse_ForceClosedChannel::set_closing_txid(std::string&& value) {
  
  closing_txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
}
inline void PendingChannelsResponse_ForceClosedChannel::set_closing_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
}
inline void PendingChannelsResponse_ForceClosedChannel::set_closing_txid(const char* value, size_t size) {
  
  closing_txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
}
inline std::string* PendingChannelsResponse_ForceClosedChannel::_internal_mutable_closing_txid() {
  
  return closing_txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PendingChannelsResponse_ForceClosedChannel::release_closing_txid() {
  // @@protoc_insertion_point(field_release:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
  
  return closing_txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PendingChannelsResponse_ForceClosedChannel::set_allocated_closing_txid(std::string* closing_txid) {
  if (closing_txid != nullptr) {
    
  } else {
    
  }
  closing_txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closing_txid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PendingChannelsResponse.ForceClosedChannel.closing_txid)
}

// int64 limbo_balance = 3;
inline void PendingChannelsResponse_ForceClosedChannel::clear_limbo_balance() {
  limbo_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_ForceClosedChannel::_internal_limbo_balance() const {
  return limbo_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_ForceClosedChannel::limbo_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.limbo_balance)
  return _internal_limbo_balance();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limbo_balance_ = value;
}
inline void PendingChannelsResponse_ForceClosedChannel::set_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limbo_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.limbo_balance)
}

// uint32 maturity_height = 4;
inline void PendingChannelsResponse_ForceClosedChannel::clear_maturity_height() {
  maturity_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingChannelsResponse_ForceClosedChannel::_internal_maturity_height() const {
  return maturity_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PendingChannelsResponse_ForceClosedChannel::maturity_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.maturity_height)
  return _internal_maturity_height();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maturity_height_ = value;
}
inline void PendingChannelsResponse_ForceClosedChannel::set_maturity_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maturity_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.maturity_height)
}

// int32 blocks_til_maturity = 5;
inline void PendingChannelsResponse_ForceClosedChannel::clear_blocks_til_maturity() {
  blocks_til_maturity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PendingChannelsResponse_ForceClosedChannel::_internal_blocks_til_maturity() const {
  return blocks_til_maturity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PendingChannelsResponse_ForceClosedChannel::blocks_til_maturity() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.blocks_til_maturity)
  return _internal_blocks_til_maturity();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  blocks_til_maturity_ = value;
}
inline void PendingChannelsResponse_ForceClosedChannel::set_blocks_til_maturity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_blocks_til_maturity(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.blocks_til_maturity)
}

// int64 recovered_balance = 6;
inline void PendingChannelsResponse_ForceClosedChannel::clear_recovered_balance() {
  recovered_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_ForceClosedChannel::_internal_recovered_balance() const {
  return recovered_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse_ForceClosedChannel::recovered_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.recovered_balance)
  return _internal_recovered_balance();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_recovered_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  recovered_balance_ = value;
}
inline void PendingChannelsResponse_ForceClosedChannel::set_recovered_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_recovered_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.recovered_balance)
}

// repeated .lnrpc.PendingHTLC pending_htlcs = 8;
inline int PendingChannelsResponse_ForceClosedChannel::_internal_pending_htlcs_size() const {
  return pending_htlcs_.size();
}
inline int PendingChannelsResponse_ForceClosedChannel::pending_htlcs_size() const {
  return _internal_pending_htlcs_size();
}
inline void PendingChannelsResponse_ForceClosedChannel::clear_pending_htlcs() {
  pending_htlcs_.Clear();
}
inline ::lnrpc::PendingHTLC* PendingChannelsResponse_ForceClosedChannel::mutable_pending_htlcs(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.ForceClosedChannel.pending_htlcs)
  return pending_htlcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingHTLC >*
PendingChannelsResponse_ForceClosedChannel::mutable_pending_htlcs() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PendingChannelsResponse.ForceClosedChannel.pending_htlcs)
  return &pending_htlcs_;
}
inline const ::lnrpc::PendingHTLC& PendingChannelsResponse_ForceClosedChannel::_internal_pending_htlcs(int index) const {
  return pending_htlcs_.Get(index);
}
inline const ::lnrpc::PendingHTLC& PendingChannelsResponse_ForceClosedChannel::pending_htlcs(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.pending_htlcs)
  return _internal_pending_htlcs(index);
}
inline ::lnrpc::PendingHTLC* PendingChannelsResponse_ForceClosedChannel::_internal_add_pending_htlcs() {
  return pending_htlcs_.Add();
}
inline ::lnrpc::PendingHTLC* PendingChannelsResponse_ForceClosedChannel::add_pending_htlcs() {
  // @@protoc_insertion_point(field_add:lnrpc.PendingChannelsResponse.ForceClosedChannel.pending_htlcs)
  return _internal_add_pending_htlcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingHTLC >&
PendingChannelsResponse_ForceClosedChannel::pending_htlcs() const {
  // @@protoc_insertion_point(field_list:lnrpc.PendingChannelsResponse.ForceClosedChannel.pending_htlcs)
  return pending_htlcs_;
}

// .lnrpc.PendingChannelsResponse.ForceClosedChannel.AnchorState anchor = 9;
inline void PendingChannelsResponse_ForceClosedChannel::clear_anchor() {
  anchor_ = 0;
}
inline ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::_internal_anchor() const {
  return static_cast< ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState >(anchor_);
}
inline ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState PendingChannelsResponse_ForceClosedChannel::anchor() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.ForceClosedChannel.anchor)
  return _internal_anchor();
}
inline void PendingChannelsResponse_ForceClosedChannel::_internal_set_anchor(::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState value) {
  
  anchor_ = value;
}
inline void PendingChannelsResponse_ForceClosedChannel::set_anchor(::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState value) {
  _internal_set_anchor(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.ForceClosedChannel.anchor)
}

// -------------------------------------------------------------------

// PendingChannelsResponse

// int64 total_limbo_balance = 1;
inline void PendingChannelsResponse::clear_total_limbo_balance() {
  total_limbo_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse::_internal_total_limbo_balance() const {
  return total_limbo_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PendingChannelsResponse::total_limbo_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.total_limbo_balance)
  return _internal_total_limbo_balance();
}
inline void PendingChannelsResponse::_internal_set_total_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_limbo_balance_ = value;
}
inline void PendingChannelsResponse::set_total_limbo_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_limbo_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.PendingChannelsResponse.total_limbo_balance)
}

// repeated .lnrpc.PendingChannelsResponse.PendingOpenChannel pending_open_channels = 2;
inline int PendingChannelsResponse::_internal_pending_open_channels_size() const {
  return pending_open_channels_.size();
}
inline int PendingChannelsResponse::pending_open_channels_size() const {
  return _internal_pending_open_channels_size();
}
inline void PendingChannelsResponse::clear_pending_open_channels() {
  pending_open_channels_.Clear();
}
inline ::lnrpc::PendingChannelsResponse_PendingOpenChannel* PendingChannelsResponse::mutable_pending_open_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.pending_open_channels)
  return pending_open_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >*
PendingChannelsResponse::mutable_pending_open_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PendingChannelsResponse.pending_open_channels)
  return &pending_open_channels_;
}
inline const ::lnrpc::PendingChannelsResponse_PendingOpenChannel& PendingChannelsResponse::_internal_pending_open_channels(int index) const {
  return pending_open_channels_.Get(index);
}
inline const ::lnrpc::PendingChannelsResponse_PendingOpenChannel& PendingChannelsResponse::pending_open_channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.pending_open_channels)
  return _internal_pending_open_channels(index);
}
inline ::lnrpc::PendingChannelsResponse_PendingOpenChannel* PendingChannelsResponse::_internal_add_pending_open_channels() {
  return pending_open_channels_.Add();
}
inline ::lnrpc::PendingChannelsResponse_PendingOpenChannel* PendingChannelsResponse::add_pending_open_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.PendingChannelsResponse.pending_open_channels)
  return _internal_add_pending_open_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_PendingOpenChannel >&
PendingChannelsResponse::pending_open_channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.PendingChannelsResponse.pending_open_channels)
  return pending_open_channels_;
}

// repeated .lnrpc.PendingChannelsResponse.ClosedChannel pending_closing_channels = 3 [deprecated = true];
inline int PendingChannelsResponse::_internal_pending_closing_channels_size() const {
  return pending_closing_channels_.size();
}
inline int PendingChannelsResponse::pending_closing_channels_size() const {
  return _internal_pending_closing_channels_size();
}
inline void PendingChannelsResponse::clear_pending_closing_channels() {
  pending_closing_channels_.Clear();
}
inline ::lnrpc::PendingChannelsResponse_ClosedChannel* PendingChannelsResponse::mutable_pending_closing_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.pending_closing_channels)
  return pending_closing_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ClosedChannel >*
PendingChannelsResponse::mutable_pending_closing_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PendingChannelsResponse.pending_closing_channels)
  return &pending_closing_channels_;
}
inline const ::lnrpc::PendingChannelsResponse_ClosedChannel& PendingChannelsResponse::_internal_pending_closing_channels(int index) const {
  return pending_closing_channels_.Get(index);
}
inline const ::lnrpc::PendingChannelsResponse_ClosedChannel& PendingChannelsResponse::pending_closing_channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.pending_closing_channels)
  return _internal_pending_closing_channels(index);
}
inline ::lnrpc::PendingChannelsResponse_ClosedChannel* PendingChannelsResponse::_internal_add_pending_closing_channels() {
  return pending_closing_channels_.Add();
}
inline ::lnrpc::PendingChannelsResponse_ClosedChannel* PendingChannelsResponse::add_pending_closing_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.PendingChannelsResponse.pending_closing_channels)
  return _internal_add_pending_closing_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ClosedChannel >&
PendingChannelsResponse::pending_closing_channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.PendingChannelsResponse.pending_closing_channels)
  return pending_closing_channels_;
}

// repeated .lnrpc.PendingChannelsResponse.ForceClosedChannel pending_force_closing_channels = 4;
inline int PendingChannelsResponse::_internal_pending_force_closing_channels_size() const {
  return pending_force_closing_channels_.size();
}
inline int PendingChannelsResponse::pending_force_closing_channels_size() const {
  return _internal_pending_force_closing_channels_size();
}
inline void PendingChannelsResponse::clear_pending_force_closing_channels() {
  pending_force_closing_channels_.Clear();
}
inline ::lnrpc::PendingChannelsResponse_ForceClosedChannel* PendingChannelsResponse::mutable_pending_force_closing_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.pending_force_closing_channels)
  return pending_force_closing_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >*
PendingChannelsResponse::mutable_pending_force_closing_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PendingChannelsResponse.pending_force_closing_channels)
  return &pending_force_closing_channels_;
}
inline const ::lnrpc::PendingChannelsResponse_ForceClosedChannel& PendingChannelsResponse::_internal_pending_force_closing_channels(int index) const {
  return pending_force_closing_channels_.Get(index);
}
inline const ::lnrpc::PendingChannelsResponse_ForceClosedChannel& PendingChannelsResponse::pending_force_closing_channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.pending_force_closing_channels)
  return _internal_pending_force_closing_channels(index);
}
inline ::lnrpc::PendingChannelsResponse_ForceClosedChannel* PendingChannelsResponse::_internal_add_pending_force_closing_channels() {
  return pending_force_closing_channels_.Add();
}
inline ::lnrpc::PendingChannelsResponse_ForceClosedChannel* PendingChannelsResponse::add_pending_force_closing_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.PendingChannelsResponse.pending_force_closing_channels)
  return _internal_add_pending_force_closing_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_ForceClosedChannel >&
PendingChannelsResponse::pending_force_closing_channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.PendingChannelsResponse.pending_force_closing_channels)
  return pending_force_closing_channels_;
}

// repeated .lnrpc.PendingChannelsResponse.WaitingCloseChannel waiting_close_channels = 5;
inline int PendingChannelsResponse::_internal_waiting_close_channels_size() const {
  return waiting_close_channels_.size();
}
inline int PendingChannelsResponse::waiting_close_channels_size() const {
  return _internal_waiting_close_channels_size();
}
inline void PendingChannelsResponse::clear_waiting_close_channels() {
  waiting_close_channels_.Clear();
}
inline ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* PendingChannelsResponse::mutable_waiting_close_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PendingChannelsResponse.waiting_close_channels)
  return waiting_close_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >*
PendingChannelsResponse::mutable_waiting_close_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PendingChannelsResponse.waiting_close_channels)
  return &waiting_close_channels_;
}
inline const ::lnrpc::PendingChannelsResponse_WaitingCloseChannel& PendingChannelsResponse::_internal_waiting_close_channels(int index) const {
  return waiting_close_channels_.Get(index);
}
inline const ::lnrpc::PendingChannelsResponse_WaitingCloseChannel& PendingChannelsResponse::waiting_close_channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PendingChannelsResponse.waiting_close_channels)
  return _internal_waiting_close_channels(index);
}
inline ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* PendingChannelsResponse::_internal_add_waiting_close_channels() {
  return waiting_close_channels_.Add();
}
inline ::lnrpc::PendingChannelsResponse_WaitingCloseChannel* PendingChannelsResponse::add_waiting_close_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.PendingChannelsResponse.waiting_close_channels)
  return _internal_add_waiting_close_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::PendingChannelsResponse_WaitingCloseChannel >&
PendingChannelsResponse::waiting_close_channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.PendingChannelsResponse.waiting_close_channels)
  return waiting_close_channels_;
}

// -------------------------------------------------------------------

// ChannelEventSubscription

// -------------------------------------------------------------------

// ChannelEventUpdate

// .lnrpc.Channel open_channel = 1;
inline bool ChannelEventUpdate::_internal_has_open_channel() const {
  return channel_case() == kOpenChannel;
}
inline bool ChannelEventUpdate::has_open_channel() const {
  return _internal_has_open_channel();
}
inline void ChannelEventUpdate::set_has_open_channel() {
  _oneof_case_[0] = kOpenChannel;
}
inline void ChannelEventUpdate::clear_open_channel() {
  if (_internal_has_open_channel()) {
    delete channel_.open_channel_;
    clear_has_channel();
  }
}
inline ::lnrpc::Channel* ChannelEventUpdate::release_open_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEventUpdate.open_channel)
  if (_internal_has_open_channel()) {
    clear_has_channel();
      ::lnrpc::Channel* temp = channel_.open_channel_;
    channel_.open_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::Channel& ChannelEventUpdate::_internal_open_channel() const {
  return _internal_has_open_channel()
      ? *channel_.open_channel_
      : *reinterpret_cast< ::lnrpc::Channel*>(&::lnrpc::_Channel_default_instance_);
}
inline const ::lnrpc::Channel& ChannelEventUpdate::open_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.open_channel)
  return _internal_open_channel();
}
inline ::lnrpc::Channel* ChannelEventUpdate::_internal_mutable_open_channel() {
  if (!_internal_has_open_channel()) {
    clear_channel();
    set_has_open_channel();
    channel_.open_channel_ = CreateMaybeMessage< ::lnrpc::Channel >(
        GetArenaNoVirtual());
  }
  return channel_.open_channel_;
}
inline ::lnrpc::Channel* ChannelEventUpdate::mutable_open_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEventUpdate.open_channel)
  return _internal_mutable_open_channel();
}

// .lnrpc.ChannelCloseSummary closed_channel = 2;
inline bool ChannelEventUpdate::_internal_has_closed_channel() const {
  return channel_case() == kClosedChannel;
}
inline bool ChannelEventUpdate::has_closed_channel() const {
  return _internal_has_closed_channel();
}
inline void ChannelEventUpdate::set_has_closed_channel() {
  _oneof_case_[0] = kClosedChannel;
}
inline void ChannelEventUpdate::clear_closed_channel() {
  if (_internal_has_closed_channel()) {
    delete channel_.closed_channel_;
    clear_has_channel();
  }
}
inline ::lnrpc::ChannelCloseSummary* ChannelEventUpdate::release_closed_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEventUpdate.closed_channel)
  if (_internal_has_closed_channel()) {
    clear_has_channel();
      ::lnrpc::ChannelCloseSummary* temp = channel_.closed_channel_;
    channel_.closed_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelCloseSummary& ChannelEventUpdate::_internal_closed_channel() const {
  return _internal_has_closed_channel()
      ? *channel_.closed_channel_
      : *reinterpret_cast< ::lnrpc::ChannelCloseSummary*>(&::lnrpc::_ChannelCloseSummary_default_instance_);
}
inline const ::lnrpc::ChannelCloseSummary& ChannelEventUpdate::closed_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.closed_channel)
  return _internal_closed_channel();
}
inline ::lnrpc::ChannelCloseSummary* ChannelEventUpdate::_internal_mutable_closed_channel() {
  if (!_internal_has_closed_channel()) {
    clear_channel();
    set_has_closed_channel();
    channel_.closed_channel_ = CreateMaybeMessage< ::lnrpc::ChannelCloseSummary >(
        GetArenaNoVirtual());
  }
  return channel_.closed_channel_;
}
inline ::lnrpc::ChannelCloseSummary* ChannelEventUpdate::mutable_closed_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEventUpdate.closed_channel)
  return _internal_mutable_closed_channel();
}

// .lnrpc.ChannelPoint active_channel = 3;
inline bool ChannelEventUpdate::_internal_has_active_channel() const {
  return channel_case() == kActiveChannel;
}
inline bool ChannelEventUpdate::has_active_channel() const {
  return _internal_has_active_channel();
}
inline void ChannelEventUpdate::set_has_active_channel() {
  _oneof_case_[0] = kActiveChannel;
}
inline void ChannelEventUpdate::clear_active_channel() {
  if (_internal_has_active_channel()) {
    delete channel_.active_channel_;
    clear_has_channel();
  }
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::release_active_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEventUpdate.active_channel)
  if (_internal_has_active_channel()) {
    clear_has_channel();
      ::lnrpc::ChannelPoint* temp = channel_.active_channel_;
    channel_.active_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelPoint& ChannelEventUpdate::_internal_active_channel() const {
  return _internal_has_active_channel()
      ? *channel_.active_channel_
      : *reinterpret_cast< ::lnrpc::ChannelPoint*>(&::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChannelEventUpdate::active_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.active_channel)
  return _internal_active_channel();
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::_internal_mutable_active_channel() {
  if (!_internal_has_active_channel()) {
    clear_channel();
    set_has_active_channel();
    channel_.active_channel_ = CreateMaybeMessage< ::lnrpc::ChannelPoint >(
        GetArenaNoVirtual());
  }
  return channel_.active_channel_;
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::mutable_active_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEventUpdate.active_channel)
  return _internal_mutable_active_channel();
}

// .lnrpc.ChannelPoint inactive_channel = 4;
inline bool ChannelEventUpdate::_internal_has_inactive_channel() const {
  return channel_case() == kInactiveChannel;
}
inline bool ChannelEventUpdate::has_inactive_channel() const {
  return _internal_has_inactive_channel();
}
inline void ChannelEventUpdate::set_has_inactive_channel() {
  _oneof_case_[0] = kInactiveChannel;
}
inline void ChannelEventUpdate::clear_inactive_channel() {
  if (_internal_has_inactive_channel()) {
    delete channel_.inactive_channel_;
    clear_has_channel();
  }
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::release_inactive_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEventUpdate.inactive_channel)
  if (_internal_has_inactive_channel()) {
    clear_has_channel();
      ::lnrpc::ChannelPoint* temp = channel_.inactive_channel_;
    channel_.inactive_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelPoint& ChannelEventUpdate::_internal_inactive_channel() const {
  return _internal_has_inactive_channel()
      ? *channel_.inactive_channel_
      : *reinterpret_cast< ::lnrpc::ChannelPoint*>(&::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChannelEventUpdate::inactive_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.inactive_channel)
  return _internal_inactive_channel();
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::_internal_mutable_inactive_channel() {
  if (!_internal_has_inactive_channel()) {
    clear_channel();
    set_has_inactive_channel();
    channel_.inactive_channel_ = CreateMaybeMessage< ::lnrpc::ChannelPoint >(
        GetArenaNoVirtual());
  }
  return channel_.inactive_channel_;
}
inline ::lnrpc::ChannelPoint* ChannelEventUpdate::mutable_inactive_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEventUpdate.inactive_channel)
  return _internal_mutable_inactive_channel();
}

// .lnrpc.PendingUpdate pending_open_channel = 6;
inline bool ChannelEventUpdate::_internal_has_pending_open_channel() const {
  return channel_case() == kPendingOpenChannel;
}
inline bool ChannelEventUpdate::has_pending_open_channel() const {
  return _internal_has_pending_open_channel();
}
inline void ChannelEventUpdate::set_has_pending_open_channel() {
  _oneof_case_[0] = kPendingOpenChannel;
}
inline void ChannelEventUpdate::clear_pending_open_channel() {
  if (_internal_has_pending_open_channel()) {
    delete channel_.pending_open_channel_;
    clear_has_channel();
  }
}
inline ::lnrpc::PendingUpdate* ChannelEventUpdate::release_pending_open_channel() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEventUpdate.pending_open_channel)
  if (_internal_has_pending_open_channel()) {
    clear_has_channel();
      ::lnrpc::PendingUpdate* temp = channel_.pending_open_channel_;
    channel_.pending_open_channel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::PendingUpdate& ChannelEventUpdate::_internal_pending_open_channel() const {
  return _internal_has_pending_open_channel()
      ? *channel_.pending_open_channel_
      : *reinterpret_cast< ::lnrpc::PendingUpdate*>(&::lnrpc::_PendingUpdate_default_instance_);
}
inline const ::lnrpc::PendingUpdate& ChannelEventUpdate::pending_open_channel() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.pending_open_channel)
  return _internal_pending_open_channel();
}
inline ::lnrpc::PendingUpdate* ChannelEventUpdate::_internal_mutable_pending_open_channel() {
  if (!_internal_has_pending_open_channel()) {
    clear_channel();
    set_has_pending_open_channel();
    channel_.pending_open_channel_ = CreateMaybeMessage< ::lnrpc::PendingUpdate >(
        GetArenaNoVirtual());
  }
  return channel_.pending_open_channel_;
}
inline ::lnrpc::PendingUpdate* ChannelEventUpdate::mutable_pending_open_channel() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEventUpdate.pending_open_channel)
  return _internal_mutable_pending_open_channel();
}

// .lnrpc.ChannelEventUpdate.UpdateType type = 5;
inline void ChannelEventUpdate::clear_type() {
  type_ = 0;
}
inline ::lnrpc::ChannelEventUpdate_UpdateType ChannelEventUpdate::_internal_type() const {
  return static_cast< ::lnrpc::ChannelEventUpdate_UpdateType >(type_);
}
inline ::lnrpc::ChannelEventUpdate_UpdateType ChannelEventUpdate::type() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEventUpdate.type)
  return _internal_type();
}
inline void ChannelEventUpdate::_internal_set_type(::lnrpc::ChannelEventUpdate_UpdateType value) {
  
  type_ = value;
}
inline void ChannelEventUpdate::set_type(::lnrpc::ChannelEventUpdate_UpdateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEventUpdate.type)
}

inline bool ChannelEventUpdate::has_channel() const {
  return channel_case() != CHANNEL_NOT_SET;
}
inline void ChannelEventUpdate::clear_has_channel() {
  _oneof_case_[0] = CHANNEL_NOT_SET;
}
inline ChannelEventUpdate::ChannelCase ChannelEventUpdate::channel_case() const {
  return ChannelEventUpdate::ChannelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// WalletAccountBalance

// int64 confirmed_balance = 1;
inline void WalletAccountBalance::clear_confirmed_balance() {
  confirmed_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletAccountBalance::_internal_confirmed_balance() const {
  return confirmed_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletAccountBalance::confirmed_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.WalletAccountBalance.confirmed_balance)
  return _internal_confirmed_balance();
}
inline void WalletAccountBalance::_internal_set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confirmed_balance_ = value;
}
inline void WalletAccountBalance::set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confirmed_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.WalletAccountBalance.confirmed_balance)
}

// int64 unconfirmed_balance = 2;
inline void WalletAccountBalance::clear_unconfirmed_balance() {
  unconfirmed_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletAccountBalance::_internal_unconfirmed_balance() const {
  return unconfirmed_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletAccountBalance::unconfirmed_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.WalletAccountBalance.unconfirmed_balance)
  return _internal_unconfirmed_balance();
}
inline void WalletAccountBalance::_internal_set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unconfirmed_balance_ = value;
}
inline void WalletAccountBalance::set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unconfirmed_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.WalletAccountBalance.unconfirmed_balance)
}

// -------------------------------------------------------------------

// WalletBalanceRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WalletBalanceResponse

// int64 total_balance = 1;
inline void WalletBalanceResponse::clear_total_balance() {
  total_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::_internal_total_balance() const {
  return total_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::total_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.WalletBalanceResponse.total_balance)
  return _internal_total_balance();
}
inline void WalletBalanceResponse::_internal_set_total_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_balance_ = value;
}
inline void WalletBalanceResponse::set_total_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.WalletBalanceResponse.total_balance)
}

// int64 confirmed_balance = 2;
inline void WalletBalanceResponse::clear_confirmed_balance() {
  confirmed_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::_internal_confirmed_balance() const {
  return confirmed_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::confirmed_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.WalletBalanceResponse.confirmed_balance)
  return _internal_confirmed_balance();
}
inline void WalletBalanceResponse::_internal_set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confirmed_balance_ = value;
}
inline void WalletBalanceResponse::set_confirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confirmed_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.WalletBalanceResponse.confirmed_balance)
}

// int64 unconfirmed_balance = 3;
inline void WalletBalanceResponse::clear_unconfirmed_balance() {
  unconfirmed_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::_internal_unconfirmed_balance() const {
  return unconfirmed_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WalletBalanceResponse::unconfirmed_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.WalletBalanceResponse.unconfirmed_balance)
  return _internal_unconfirmed_balance();
}
inline void WalletBalanceResponse::_internal_set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  unconfirmed_balance_ = value;
}
inline void WalletBalanceResponse::set_unconfirmed_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unconfirmed_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.WalletBalanceResponse.unconfirmed_balance)
}

// map<string, .lnrpc.WalletAccountBalance> account_balance = 4;
inline int WalletBalanceResponse::_internal_account_balance_size() const {
  return account_balance_.size();
}
inline int WalletBalanceResponse::account_balance_size() const {
  return _internal_account_balance_size();
}
inline void WalletBalanceResponse::clear_account_balance() {
  account_balance_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >&
WalletBalanceResponse::_internal_account_balance() const {
  return account_balance_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >&
WalletBalanceResponse::account_balance() const {
  // @@protoc_insertion_point(field_map:lnrpc.WalletBalanceResponse.account_balance)
  return _internal_account_balance();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >*
WalletBalanceResponse::_internal_mutable_account_balance() {
  return account_balance_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::WalletAccountBalance >*
WalletBalanceResponse::mutable_account_balance() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.WalletBalanceResponse.account_balance)
  return _internal_mutable_account_balance();
}

// -------------------------------------------------------------------

// Amount

// uint64 sat = 1;
inline void Amount::clear_sat() {
  sat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Amount::_internal_sat() const {
  return sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Amount::sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Amount.sat)
  return _internal_sat();
}
inline void Amount::_internal_set_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sat_ = value;
}
inline void Amount::set_sat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Amount.sat)
}

// uint64 msat = 2;
inline void Amount::clear_msat() {
  msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Amount::_internal_msat() const {
  return msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Amount::msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Amount.msat)
  return _internal_msat();
}
inline void Amount::_internal_set_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  msat_ = value;
}
inline void Amount::set_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Amount.msat)
}

// -------------------------------------------------------------------

// ChannelBalanceRequest

// -------------------------------------------------------------------

// ChannelBalanceResponse

// int64 balance = 1 [deprecated = true];
inline void ChannelBalanceResponse::clear_balance() {
  balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelBalanceResponse::_internal_balance() const {
  return balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelBalanceResponse::balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.balance)
  return _internal_balance();
}
inline void ChannelBalanceResponse::_internal_set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  balance_ = value;
}
inline void ChannelBalanceResponse::set_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelBalanceResponse.balance)
}

// int64 pending_open_balance = 2 [deprecated = true];
inline void ChannelBalanceResponse::clear_pending_open_balance() {
  pending_open_balance_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelBalanceResponse::_internal_pending_open_balance() const {
  return pending_open_balance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelBalanceResponse::pending_open_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.pending_open_balance)
  return _internal_pending_open_balance();
}
inline void ChannelBalanceResponse::_internal_set_pending_open_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pending_open_balance_ = value;
}
inline void ChannelBalanceResponse::set_pending_open_balance(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pending_open_balance(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelBalanceResponse.pending_open_balance)
}

// .lnrpc.Amount local_balance = 3;
inline bool ChannelBalanceResponse::_internal_has_local_balance() const {
  return this != internal_default_instance() && local_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_local_balance() const {
  return _internal_has_local_balance();
}
inline void ChannelBalanceResponse::clear_local_balance() {
  if (GetArenaNoVirtual() == nullptr && local_balance_ != nullptr) {
    delete local_balance_;
  }
  local_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_local_balance() const {
  const ::lnrpc::Amount* p = local_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::local_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.local_balance)
  return _internal_local_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_local_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.local_balance)
  
  ::lnrpc::Amount* temp = local_balance_;
  local_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_local_balance() {
  
  if (local_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    local_balance_ = p;
  }
  return local_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_local_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.local_balance)
  return _internal_mutable_local_balance();
}
inline void ChannelBalanceResponse::set_allocated_local_balance(::lnrpc::Amount* local_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete local_balance_;
  }
  if (local_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      local_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_balance, submessage_arena);
    }
    
  } else {
    
  }
  local_balance_ = local_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.local_balance)
}

// .lnrpc.Amount remote_balance = 4;
inline bool ChannelBalanceResponse::_internal_has_remote_balance() const {
  return this != internal_default_instance() && remote_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_remote_balance() const {
  return _internal_has_remote_balance();
}
inline void ChannelBalanceResponse::clear_remote_balance() {
  if (GetArenaNoVirtual() == nullptr && remote_balance_ != nullptr) {
    delete remote_balance_;
  }
  remote_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_remote_balance() const {
  const ::lnrpc::Amount* p = remote_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::remote_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.remote_balance)
  return _internal_remote_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_remote_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.remote_balance)
  
  ::lnrpc::Amount* temp = remote_balance_;
  remote_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_remote_balance() {
  
  if (remote_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    remote_balance_ = p;
  }
  return remote_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_remote_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.remote_balance)
  return _internal_mutable_remote_balance();
}
inline void ChannelBalanceResponse::set_allocated_remote_balance(::lnrpc::Amount* remote_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete remote_balance_;
  }
  if (remote_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      remote_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_balance, submessage_arena);
    }
    
  } else {
    
  }
  remote_balance_ = remote_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.remote_balance)
}

// .lnrpc.Amount unsettled_local_balance = 5;
inline bool ChannelBalanceResponse::_internal_has_unsettled_local_balance() const {
  return this != internal_default_instance() && unsettled_local_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_unsettled_local_balance() const {
  return _internal_has_unsettled_local_balance();
}
inline void ChannelBalanceResponse::clear_unsettled_local_balance() {
  if (GetArenaNoVirtual() == nullptr && unsettled_local_balance_ != nullptr) {
    delete unsettled_local_balance_;
  }
  unsettled_local_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_unsettled_local_balance() const {
  const ::lnrpc::Amount* p = unsettled_local_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::unsettled_local_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.unsettled_local_balance)
  return _internal_unsettled_local_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_unsettled_local_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.unsettled_local_balance)
  
  ::lnrpc::Amount* temp = unsettled_local_balance_;
  unsettled_local_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_unsettled_local_balance() {
  
  if (unsettled_local_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    unsettled_local_balance_ = p;
  }
  return unsettled_local_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_unsettled_local_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.unsettled_local_balance)
  return _internal_mutable_unsettled_local_balance();
}
inline void ChannelBalanceResponse::set_allocated_unsettled_local_balance(::lnrpc::Amount* unsettled_local_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unsettled_local_balance_;
  }
  if (unsettled_local_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsettled_local_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsettled_local_balance, submessage_arena);
    }
    
  } else {
    
  }
  unsettled_local_balance_ = unsettled_local_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.unsettled_local_balance)
}

// .lnrpc.Amount unsettled_remote_balance = 6;
inline bool ChannelBalanceResponse::_internal_has_unsettled_remote_balance() const {
  return this != internal_default_instance() && unsettled_remote_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_unsettled_remote_balance() const {
  return _internal_has_unsettled_remote_balance();
}
inline void ChannelBalanceResponse::clear_unsettled_remote_balance() {
  if (GetArenaNoVirtual() == nullptr && unsettled_remote_balance_ != nullptr) {
    delete unsettled_remote_balance_;
  }
  unsettled_remote_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_unsettled_remote_balance() const {
  const ::lnrpc::Amount* p = unsettled_remote_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::unsettled_remote_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.unsettled_remote_balance)
  return _internal_unsettled_remote_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_unsettled_remote_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.unsettled_remote_balance)
  
  ::lnrpc::Amount* temp = unsettled_remote_balance_;
  unsettled_remote_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_unsettled_remote_balance() {
  
  if (unsettled_remote_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    unsettled_remote_balance_ = p;
  }
  return unsettled_remote_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_unsettled_remote_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.unsettled_remote_balance)
  return _internal_mutable_unsettled_remote_balance();
}
inline void ChannelBalanceResponse::set_allocated_unsettled_remote_balance(::lnrpc::Amount* unsettled_remote_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete unsettled_remote_balance_;
  }
  if (unsettled_remote_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsettled_remote_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsettled_remote_balance, submessage_arena);
    }
    
  } else {
    
  }
  unsettled_remote_balance_ = unsettled_remote_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.unsettled_remote_balance)
}

// .lnrpc.Amount pending_open_local_balance = 7;
inline bool ChannelBalanceResponse::_internal_has_pending_open_local_balance() const {
  return this != internal_default_instance() && pending_open_local_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_pending_open_local_balance() const {
  return _internal_has_pending_open_local_balance();
}
inline void ChannelBalanceResponse::clear_pending_open_local_balance() {
  if (GetArenaNoVirtual() == nullptr && pending_open_local_balance_ != nullptr) {
    delete pending_open_local_balance_;
  }
  pending_open_local_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_pending_open_local_balance() const {
  const ::lnrpc::Amount* p = pending_open_local_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::pending_open_local_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.pending_open_local_balance)
  return _internal_pending_open_local_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_pending_open_local_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.pending_open_local_balance)
  
  ::lnrpc::Amount* temp = pending_open_local_balance_;
  pending_open_local_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_pending_open_local_balance() {
  
  if (pending_open_local_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    pending_open_local_balance_ = p;
  }
  return pending_open_local_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_pending_open_local_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.pending_open_local_balance)
  return _internal_mutable_pending_open_local_balance();
}
inline void ChannelBalanceResponse::set_allocated_pending_open_local_balance(::lnrpc::Amount* pending_open_local_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pending_open_local_balance_;
  }
  if (pending_open_local_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_open_local_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_open_local_balance, submessage_arena);
    }
    
  } else {
    
  }
  pending_open_local_balance_ = pending_open_local_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.pending_open_local_balance)
}

// .lnrpc.Amount pending_open_remote_balance = 8;
inline bool ChannelBalanceResponse::_internal_has_pending_open_remote_balance() const {
  return this != internal_default_instance() && pending_open_remote_balance_ != nullptr;
}
inline bool ChannelBalanceResponse::has_pending_open_remote_balance() const {
  return _internal_has_pending_open_remote_balance();
}
inline void ChannelBalanceResponse::clear_pending_open_remote_balance() {
  if (GetArenaNoVirtual() == nullptr && pending_open_remote_balance_ != nullptr) {
    delete pending_open_remote_balance_;
  }
  pending_open_remote_balance_ = nullptr;
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::_internal_pending_open_remote_balance() const {
  const ::lnrpc::Amount* p = pending_open_remote_balance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Amount*>(
      &::lnrpc::_Amount_default_instance_);
}
inline const ::lnrpc::Amount& ChannelBalanceResponse::pending_open_remote_balance() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBalanceResponse.pending_open_remote_balance)
  return _internal_pending_open_remote_balance();
}
inline ::lnrpc::Amount* ChannelBalanceResponse::release_pending_open_remote_balance() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBalanceResponse.pending_open_remote_balance)
  
  ::lnrpc::Amount* temp = pending_open_remote_balance_;
  pending_open_remote_balance_ = nullptr;
  return temp;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::_internal_mutable_pending_open_remote_balance() {
  
  if (pending_open_remote_balance_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Amount>(GetArenaNoVirtual());
    pending_open_remote_balance_ = p;
  }
  return pending_open_remote_balance_;
}
inline ::lnrpc::Amount* ChannelBalanceResponse::mutable_pending_open_remote_balance() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBalanceResponse.pending_open_remote_balance)
  return _internal_mutable_pending_open_remote_balance();
}
inline void ChannelBalanceResponse::set_allocated_pending_open_remote_balance(::lnrpc::Amount* pending_open_remote_balance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pending_open_remote_balance_;
  }
  if (pending_open_remote_balance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pending_open_remote_balance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_open_remote_balance, submessage_arena);
    }
    
  } else {
    
  }
  pending_open_remote_balance_ = pending_open_remote_balance;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBalanceResponse.pending_open_remote_balance)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// QueryRoutesRequest

// string pub_key = 1;
inline void QueryRoutesRequest::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRoutesRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.pub_key)
  return _internal_pub_key();
}
inline void QueryRoutesRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.pub_key)
}
inline std::string* QueryRoutesRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& QueryRoutesRequest::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void QueryRoutesRequest::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRoutesRequest::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.QueryRoutesRequest.pub_key)
}
inline void QueryRoutesRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.QueryRoutesRequest.pub_key)
}
inline void QueryRoutesRequest::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.QueryRoutesRequest.pub_key)
}
inline std::string* QueryRoutesRequest::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRoutesRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.QueryRoutesRequest.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRoutesRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.QueryRoutesRequest.pub_key)
}

// int64 amt = 2;
inline void QueryRoutesRequest::clear_amt() {
  amt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRoutesRequest::_internal_amt() const {
  return amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRoutesRequest::amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.amt)
  return _internal_amt();
}
inline void QueryRoutesRequest::_internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_ = value;
}
inline void QueryRoutesRequest::set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.amt)
}

// int64 amt_msat = 12;
inline void QueryRoutesRequest::clear_amt_msat() {
  amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRoutesRequest::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryRoutesRequest::amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.amt_msat)
  return _internal_amt_msat();
}
inline void QueryRoutesRequest::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_msat_ = value;
}
inline void QueryRoutesRequest::set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.amt_msat)
}

// int32 final_cltv_delta = 4;
inline void QueryRoutesRequest::clear_final_cltv_delta() {
  final_cltv_delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRoutesRequest::_internal_final_cltv_delta() const {
  return final_cltv_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRoutesRequest::final_cltv_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.final_cltv_delta)
  return _internal_final_cltv_delta();
}
inline void QueryRoutesRequest::_internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_cltv_delta_ = value;
}
inline void QueryRoutesRequest::set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_cltv_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.final_cltv_delta)
}

// .lnrpc.FeeLimit fee_limit = 5;
inline bool QueryRoutesRequest::_internal_has_fee_limit() const {
  return this != internal_default_instance() && fee_limit_ != nullptr;
}
inline bool QueryRoutesRequest::has_fee_limit() const {
  return _internal_has_fee_limit();
}
inline void QueryRoutesRequest::clear_fee_limit() {
  if (GetArenaNoVirtual() == nullptr && fee_limit_ != nullptr) {
    delete fee_limit_;
  }
  fee_limit_ = nullptr;
}
inline const ::lnrpc::FeeLimit& QueryRoutesRequest::_internal_fee_limit() const {
  const ::lnrpc::FeeLimit* p = fee_limit_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::FeeLimit*>(
      &::lnrpc::_FeeLimit_default_instance_);
}
inline const ::lnrpc::FeeLimit& QueryRoutesRequest::fee_limit() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.fee_limit)
  return _internal_fee_limit();
}
inline ::lnrpc::FeeLimit* QueryRoutesRequest::release_fee_limit() {
  // @@protoc_insertion_point(field_release:lnrpc.QueryRoutesRequest.fee_limit)
  
  ::lnrpc::FeeLimit* temp = fee_limit_;
  fee_limit_ = nullptr;
  return temp;
}
inline ::lnrpc::FeeLimit* QueryRoutesRequest::_internal_mutable_fee_limit() {
  
  if (fee_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::FeeLimit>(GetArenaNoVirtual());
    fee_limit_ = p;
  }
  return fee_limit_;
}
inline ::lnrpc::FeeLimit* QueryRoutesRequest::mutable_fee_limit() {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.fee_limit)
  return _internal_mutable_fee_limit();
}
inline void QueryRoutesRequest::set_allocated_fee_limit(::lnrpc::FeeLimit* fee_limit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fee_limit_;
  }
  if (fee_limit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee_limit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee_limit, submessage_arena);
    }
    
  } else {
    
  }
  fee_limit_ = fee_limit;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.QueryRoutesRequest.fee_limit)
}

// repeated bytes ignored_nodes = 6;
inline int QueryRoutesRequest::_internal_ignored_nodes_size() const {
  return ignored_nodes_.size();
}
inline int QueryRoutesRequest::ignored_nodes_size() const {
  return _internal_ignored_nodes_size();
}
inline void QueryRoutesRequest::clear_ignored_nodes() {
  ignored_nodes_.Clear();
}
inline std::string* QueryRoutesRequest::add_ignored_nodes() {
  // @@protoc_insertion_point(field_add_mutable:lnrpc.QueryRoutesRequest.ignored_nodes)
  return _internal_add_ignored_nodes();
}
inline const std::string& QueryRoutesRequest::_internal_ignored_nodes(int index) const {
  return ignored_nodes_.Get(index);
}
inline const std::string& QueryRoutesRequest::ignored_nodes(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.ignored_nodes)
  return _internal_ignored_nodes(index);
}
inline std::string* QueryRoutesRequest::mutable_ignored_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.ignored_nodes)
  return ignored_nodes_.Mutable(index);
}
inline void QueryRoutesRequest::set_ignored_nodes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.ignored_nodes)
  ignored_nodes_.Mutable(index)->assign(value);
}
inline void QueryRoutesRequest::set_ignored_nodes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.ignored_nodes)
  ignored_nodes_.Mutable(index)->assign(std::move(value));
}
inline void QueryRoutesRequest::set_ignored_nodes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_nodes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline void QueryRoutesRequest::set_ignored_nodes(int index, const void* value, size_t size) {
  ignored_nodes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline std::string* QueryRoutesRequest::_internal_add_ignored_nodes() {
  return ignored_nodes_.Add();
}
inline void QueryRoutesRequest::add_ignored_nodes(const std::string& value) {
  ignored_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline void QueryRoutesRequest::add_ignored_nodes(std::string&& value) {
  ignored_nodes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline void QueryRoutesRequest::add_ignored_nodes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ignored_nodes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline void QueryRoutesRequest::add_ignored_nodes(const void* value, size_t size) {
  ignored_nodes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lnrpc.QueryRoutesRequest.ignored_nodes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
QueryRoutesRequest::ignored_nodes() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesRequest.ignored_nodes)
  return ignored_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
QueryRoutesRequest::mutable_ignored_nodes() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesRequest.ignored_nodes)
  return &ignored_nodes_;
}

// repeated .lnrpc.EdgeLocator ignored_edges = 7 [deprecated = true];
inline int QueryRoutesRequest::_internal_ignored_edges_size() const {
  return ignored_edges_.size();
}
inline int QueryRoutesRequest::ignored_edges_size() const {
  return _internal_ignored_edges_size();
}
inline void QueryRoutesRequest::clear_ignored_edges() {
  ignored_edges_.Clear();
}
inline ::lnrpc::EdgeLocator* QueryRoutesRequest::mutable_ignored_edges(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.ignored_edges)
  return ignored_edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::EdgeLocator >*
QueryRoutesRequest::mutable_ignored_edges() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesRequest.ignored_edges)
  return &ignored_edges_;
}
inline const ::lnrpc::EdgeLocator& QueryRoutesRequest::_internal_ignored_edges(int index) const {
  return ignored_edges_.Get(index);
}
inline const ::lnrpc::EdgeLocator& QueryRoutesRequest::ignored_edges(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.ignored_edges)
  return _internal_ignored_edges(index);
}
inline ::lnrpc::EdgeLocator* QueryRoutesRequest::_internal_add_ignored_edges() {
  return ignored_edges_.Add();
}
inline ::lnrpc::EdgeLocator* QueryRoutesRequest::add_ignored_edges() {
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.ignored_edges)
  return _internal_add_ignored_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::EdgeLocator >&
QueryRoutesRequest::ignored_edges() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesRequest.ignored_edges)
  return ignored_edges_;
}

// string source_pub_key = 8;
inline void QueryRoutesRequest::clear_source_pub_key() {
  source_pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRoutesRequest::source_pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.source_pub_key)
  return _internal_source_pub_key();
}
inline void QueryRoutesRequest::set_source_pub_key(const std::string& value) {
  _internal_set_source_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.source_pub_key)
}
inline std::string* QueryRoutesRequest::mutable_source_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.source_pub_key)
  return _internal_mutable_source_pub_key();
}
inline const std::string& QueryRoutesRequest::_internal_source_pub_key() const {
  return source_pub_key_.GetNoArena();
}
inline void QueryRoutesRequest::_internal_set_source_pub_key(const std::string& value) {
  
  source_pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRoutesRequest::set_source_pub_key(std::string&& value) {
  
  source_pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.QueryRoutesRequest.source_pub_key)
}
inline void QueryRoutesRequest::set_source_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.QueryRoutesRequest.source_pub_key)
}
inline void QueryRoutesRequest::set_source_pub_key(const char* value, size_t size) {
  
  source_pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.QueryRoutesRequest.source_pub_key)
}
inline std::string* QueryRoutesRequest::_internal_mutable_source_pub_key() {
  
  return source_pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRoutesRequest::release_source_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.QueryRoutesRequest.source_pub_key)
  
  return source_pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRoutesRequest::set_allocated_source_pub_key(std::string* source_pub_key) {
  if (source_pub_key != nullptr) {
    
  } else {
    
  }
  source_pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.QueryRoutesRequest.source_pub_key)
}

// bool use_mission_control = 9;
inline void QueryRoutesRequest::clear_use_mission_control() {
  use_mission_control_ = false;
}
inline bool QueryRoutesRequest::_internal_use_mission_control() const {
  return use_mission_control_;
}
inline bool QueryRoutesRequest::use_mission_control() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.use_mission_control)
  return _internal_use_mission_control();
}
inline void QueryRoutesRequest::_internal_set_use_mission_control(bool value) {
  
  use_mission_control_ = value;
}
inline void QueryRoutesRequest::set_use_mission_control(bool value) {
  _internal_set_use_mission_control(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.use_mission_control)
}

// repeated .lnrpc.NodePair ignored_pairs = 10;
inline int QueryRoutesRequest::_internal_ignored_pairs_size() const {
  return ignored_pairs_.size();
}
inline int QueryRoutesRequest::ignored_pairs_size() const {
  return _internal_ignored_pairs_size();
}
inline void QueryRoutesRequest::clear_ignored_pairs() {
  ignored_pairs_.Clear();
}
inline ::lnrpc::NodePair* QueryRoutesRequest::mutable_ignored_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.ignored_pairs)
  return ignored_pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodePair >*
QueryRoutesRequest::mutable_ignored_pairs() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesRequest.ignored_pairs)
  return &ignored_pairs_;
}
inline const ::lnrpc::NodePair& QueryRoutesRequest::_internal_ignored_pairs(int index) const {
  return ignored_pairs_.Get(index);
}
inline const ::lnrpc::NodePair& QueryRoutesRequest::ignored_pairs(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.ignored_pairs)
  return _internal_ignored_pairs(index);
}
inline ::lnrpc::NodePair* QueryRoutesRequest::_internal_add_ignored_pairs() {
  return ignored_pairs_.Add();
}
inline ::lnrpc::NodePair* QueryRoutesRequest::add_ignored_pairs() {
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.ignored_pairs)
  return _internal_add_ignored_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodePair >&
QueryRoutesRequest::ignored_pairs() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesRequest.ignored_pairs)
  return ignored_pairs_;
}

// uint32 cltv_limit = 11;
inline void QueryRoutesRequest::clear_cltv_limit() {
  cltv_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryRoutesRequest::_internal_cltv_limit() const {
  return cltv_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryRoutesRequest::cltv_limit() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.cltv_limit)
  return _internal_cltv_limit();
}
inline void QueryRoutesRequest::_internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cltv_limit_ = value;
}
inline void QueryRoutesRequest::set_cltv_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cltv_limit(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.cltv_limit)
}

// map<uint64, bytes> dest_custom_records = 13;
inline int QueryRoutesRequest::_internal_dest_custom_records_size() const {
  return dest_custom_records_.size();
}
inline int QueryRoutesRequest::dest_custom_records_size() const {
  return _internal_dest_custom_records_size();
}
inline void QueryRoutesRequest::clear_dest_custom_records() {
  dest_custom_records_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
QueryRoutesRequest::_internal_dest_custom_records() const {
  return dest_custom_records_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
QueryRoutesRequest::dest_custom_records() const {
  // @@protoc_insertion_point(field_map:lnrpc.QueryRoutesRequest.dest_custom_records)
  return _internal_dest_custom_records();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
QueryRoutesRequest::_internal_mutable_dest_custom_records() {
  return dest_custom_records_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
QueryRoutesRequest::mutable_dest_custom_records() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.QueryRoutesRequest.dest_custom_records)
  return _internal_mutable_dest_custom_records();
}

// uint64 outgoing_chan_id = 14 [jstype = JS_STRING];
inline void QueryRoutesRequest::clear_outgoing_chan_id() {
  outgoing_chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRoutesRequest::_internal_outgoing_chan_id() const {
  return outgoing_chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 QueryRoutesRequest::outgoing_chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.outgoing_chan_id)
  return _internal_outgoing_chan_id();
}
inline void QueryRoutesRequest::_internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_chan_id_ = value;
}
inline void QueryRoutesRequest::set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.outgoing_chan_id)
}

// bytes last_hop_pubkey = 15;
inline void QueryRoutesRequest::clear_last_hop_pubkey() {
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryRoutesRequest::last_hop_pubkey() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.last_hop_pubkey)
  return _internal_last_hop_pubkey();
}
inline void QueryRoutesRequest::set_last_hop_pubkey(const std::string& value) {
  _internal_set_last_hop_pubkey(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.last_hop_pubkey)
}
inline std::string* QueryRoutesRequest::mutable_last_hop_pubkey() {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.last_hop_pubkey)
  return _internal_mutable_last_hop_pubkey();
}
inline const std::string& QueryRoutesRequest::_internal_last_hop_pubkey() const {
  return last_hop_pubkey_.GetNoArena();
}
inline void QueryRoutesRequest::_internal_set_last_hop_pubkey(const std::string& value) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryRoutesRequest::set_last_hop_pubkey(std::string&& value) {
  
  last_hop_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.QueryRoutesRequest.last_hop_pubkey)
}
inline void QueryRoutesRequest::set_last_hop_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.QueryRoutesRequest.last_hop_pubkey)
}
inline void QueryRoutesRequest::set_last_hop_pubkey(const void* value, size_t size) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.QueryRoutesRequest.last_hop_pubkey)
}
inline std::string* QueryRoutesRequest::_internal_mutable_last_hop_pubkey() {
  
  return last_hop_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryRoutesRequest::release_last_hop_pubkey() {
  // @@protoc_insertion_point(field_release:lnrpc.QueryRoutesRequest.last_hop_pubkey)
  
  return last_hop_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRoutesRequest::set_allocated_last_hop_pubkey(std::string* last_hop_pubkey) {
  if (last_hop_pubkey != nullptr) {
    
  } else {
    
  }
  last_hop_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_hop_pubkey);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.QueryRoutesRequest.last_hop_pubkey)
}

// repeated .lnrpc.RouteHint route_hints = 16;
inline int QueryRoutesRequest::_internal_route_hints_size() const {
  return route_hints_.size();
}
inline int QueryRoutesRequest::route_hints_size() const {
  return _internal_route_hints_size();
}
inline void QueryRoutesRequest::clear_route_hints() {
  route_hints_.Clear();
}
inline ::lnrpc::RouteHint* QueryRoutesRequest::mutable_route_hints(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesRequest.route_hints)
  return route_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
QueryRoutesRequest::mutable_route_hints() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesRequest.route_hints)
  return &route_hints_;
}
inline const ::lnrpc::RouteHint& QueryRoutesRequest::_internal_route_hints(int index) const {
  return route_hints_.Get(index);
}
inline const ::lnrpc::RouteHint& QueryRoutesRequest::route_hints(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.route_hints)
  return _internal_route_hints(index);
}
inline ::lnrpc::RouteHint* QueryRoutesRequest::_internal_add_route_hints() {
  return route_hints_.Add();
}
inline ::lnrpc::RouteHint* QueryRoutesRequest::add_route_hints() {
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.route_hints)
  return _internal_add_route_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
QueryRoutesRequest::route_hints() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesRequest.route_hints)
  return route_hints_;
}

// repeated .lnrpc.FeatureBit dest_features = 17;
inline int QueryRoutesRequest::_internal_dest_features_size() const {
  return dest_features_.size();
}
inline int QueryRoutesRequest::dest_features_size() const {
  return _internal_dest_features_size();
}
inline void QueryRoutesRequest::clear_dest_features() {
  dest_features_.Clear();
}
inline ::lnrpc::FeatureBit QueryRoutesRequest::_internal_dest_features(int index) const {
  return static_cast< ::lnrpc::FeatureBit >(dest_features_.Get(index));
}
inline ::lnrpc::FeatureBit QueryRoutesRequest::dest_features(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesRequest.dest_features)
  return _internal_dest_features(index);
}
inline void QueryRoutesRequest::set_dest_features(int index, ::lnrpc::FeatureBit value) {
  dest_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesRequest.dest_features)
}
inline void QueryRoutesRequest::_internal_add_dest_features(::lnrpc::FeatureBit value) {
  dest_features_.Add(value);
}
inline void QueryRoutesRequest::add_dest_features(::lnrpc::FeatureBit value) {
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesRequest.dest_features)
  _internal_add_dest_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
QueryRoutesRequest::dest_features() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesRequest.dest_features)
  return dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryRoutesRequest::_internal_mutable_dest_features() {
  return &dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
QueryRoutesRequest::mutable_dest_features() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesRequest.dest_features)
  return _internal_mutable_dest_features();
}

// -------------------------------------------------------------------

// NodePair

// bytes from = 1;
inline void NodePair::clear_from() {
  from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodePair::from() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodePair.from)
  return _internal_from();
}
inline void NodePair::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodePair.from)
}
inline std::string* NodePair::mutable_from() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodePair.from)
  return _internal_mutable_from();
}
inline const std::string& NodePair::_internal_from() const {
  return from_.GetNoArena();
}
inline void NodePair::_internal_set_from(const std::string& value) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodePair::set_from(std::string&& value) {
  
  from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodePair.from)
}
inline void NodePair::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodePair.from)
}
inline void NodePair::set_from(const void* value, size_t size) {
  
  from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodePair.from)
}
inline std::string* NodePair::_internal_mutable_from() {
  
  return from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodePair::release_from() {
  // @@protoc_insertion_point(field_release:lnrpc.NodePair.from)
  
  return from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodePair::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodePair.from)
}

// bytes to = 2;
inline void NodePair::clear_to() {
  to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodePair::to() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodePair.to)
  return _internal_to();
}
inline void NodePair::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodePair.to)
}
inline std::string* NodePair::mutable_to() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodePair.to)
  return _internal_mutable_to();
}
inline const std::string& NodePair::_internal_to() const {
  return to_.GetNoArena();
}
inline void NodePair::_internal_set_to(const std::string& value) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodePair::set_to(std::string&& value) {
  
  to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodePair.to)
}
inline void NodePair::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodePair.to)
}
inline void NodePair::set_to(const void* value, size_t size) {
  
  to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodePair.to)
}
inline std::string* NodePair::_internal_mutable_to() {
  
  return to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodePair::release_to() {
  // @@protoc_insertion_point(field_release:lnrpc.NodePair.to)
  
  return to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodePair::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodePair.to)
}

// -------------------------------------------------------------------

// EdgeLocator

// uint64 channel_id = 1 [jstype = JS_STRING];
inline void EdgeLocator::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeLocator::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EdgeLocator::channel_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.EdgeLocator.channel_id)
  return _internal_channel_id();
}
inline void EdgeLocator::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void EdgeLocator::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.EdgeLocator.channel_id)
}

// bool direction_reverse = 2;
inline void EdgeLocator::clear_direction_reverse() {
  direction_reverse_ = false;
}
inline bool EdgeLocator::_internal_direction_reverse() const {
  return direction_reverse_;
}
inline bool EdgeLocator::direction_reverse() const {
  // @@protoc_insertion_point(field_get:lnrpc.EdgeLocator.direction_reverse)
  return _internal_direction_reverse();
}
inline void EdgeLocator::_internal_set_direction_reverse(bool value) {
  
  direction_reverse_ = value;
}
inline void EdgeLocator::set_direction_reverse(bool value) {
  _internal_set_direction_reverse(value);
  // @@protoc_insertion_point(field_set:lnrpc.EdgeLocator.direction_reverse)
}

// -------------------------------------------------------------------

// QueryRoutesResponse

// repeated .lnrpc.Route routes = 1;
inline int QueryRoutesResponse::_internal_routes_size() const {
  return routes_.size();
}
inline int QueryRoutesResponse::routes_size() const {
  return _internal_routes_size();
}
inline void QueryRoutesResponse::clear_routes() {
  routes_.Clear();
}
inline ::lnrpc::Route* QueryRoutesResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.QueryRoutesResponse.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Route >*
QueryRoutesResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.QueryRoutesResponse.routes)
  return &routes_;
}
inline const ::lnrpc::Route& QueryRoutesResponse::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::lnrpc::Route& QueryRoutesResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesResponse.routes)
  return _internal_routes(index);
}
inline ::lnrpc::Route* QueryRoutesResponse::_internal_add_routes() {
  return routes_.Add();
}
inline ::lnrpc::Route* QueryRoutesResponse::add_routes() {
  // @@protoc_insertion_point(field_add:lnrpc.QueryRoutesResponse.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Route >&
QueryRoutesResponse::routes() const {
  // @@protoc_insertion_point(field_list:lnrpc.QueryRoutesResponse.routes)
  return routes_;
}

// double success_prob = 2;
inline void QueryRoutesResponse::clear_success_prob() {
  success_prob_ = 0;
}
inline double QueryRoutesResponse::_internal_success_prob() const {
  return success_prob_;
}
inline double QueryRoutesResponse::success_prob() const {
  // @@protoc_insertion_point(field_get:lnrpc.QueryRoutesResponse.success_prob)
  return _internal_success_prob();
}
inline void QueryRoutesResponse::_internal_set_success_prob(double value) {
  
  success_prob_ = value;
}
inline void QueryRoutesResponse::set_success_prob(double value) {
  _internal_set_success_prob(value);
  // @@protoc_insertion_point(field_set:lnrpc.QueryRoutesResponse.success_prob)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Hop

// uint64 chan_id = 1 [jstype = JS_STRING];
inline void Hop::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Hop::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Hop::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.chan_id)
  return _internal_chan_id();
}
inline void Hop::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void Hop::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.chan_id)
}

// int64 chan_capacity = 2;
inline void Hop::clear_chan_capacity() {
  chan_capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::_internal_chan_capacity() const {
  return chan_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::chan_capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.chan_capacity)
  return _internal_chan_capacity();
}
inline void Hop::_internal_set_chan_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  chan_capacity_ = value;
}
inline void Hop::set_chan_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_chan_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.chan_capacity)
}

// int64 amt_to_forward = 3 [deprecated = true];
inline void Hop::clear_amt_to_forward() {
  amt_to_forward_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::_internal_amt_to_forward() const {
  return amt_to_forward_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::amt_to_forward() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.amt_to_forward)
  return _internal_amt_to_forward();
}
inline void Hop::_internal_set_amt_to_forward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_to_forward_ = value;
}
inline void Hop::set_amt_to_forward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_to_forward(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.amt_to_forward)
}

// int64 fee = 4 [deprecated = true];
inline void Hop::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.fee)
  return _internal_fee();
}
inline void Hop::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void Hop::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.fee)
}

// uint32 expiry = 5;
inline void Hop::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hop::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Hop::expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.expiry)
  return _internal_expiry();
}
inline void Hop::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void Hop::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.expiry)
}

// int64 amt_to_forward_msat = 6;
inline void Hop::clear_amt_to_forward_msat() {
  amt_to_forward_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::_internal_amt_to_forward_msat() const {
  return amt_to_forward_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::amt_to_forward_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.amt_to_forward_msat)
  return _internal_amt_to_forward_msat();
}
inline void Hop::_internal_set_amt_to_forward_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_to_forward_msat_ = value;
}
inline void Hop::set_amt_to_forward_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_to_forward_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.amt_to_forward_msat)
}

// int64 fee_msat = 7;
inline void Hop::clear_fee_msat() {
  fee_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::_internal_fee_msat() const {
  return fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Hop::fee_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.fee_msat)
  return _internal_fee_msat();
}
inline void Hop::_internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_msat_ = value;
}
inline void Hop::set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.fee_msat)
}

// string pub_key = 8;
inline void Hop::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Hop::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.pub_key)
  return _internal_pub_key();
}
inline void Hop::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.pub_key)
}
inline std::string* Hop::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Hop.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& Hop::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void Hop::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Hop::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Hop.pub_key)
}
inline void Hop::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Hop.pub_key)
}
inline void Hop::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Hop.pub_key)
}
inline std::string* Hop::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Hop::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.Hop.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Hop::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Hop.pub_key)
}

// bool tlv_payload = 9;
inline void Hop::clear_tlv_payload() {
  tlv_payload_ = false;
}
inline bool Hop::_internal_tlv_payload() const {
  return tlv_payload_;
}
inline bool Hop::tlv_payload() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.tlv_payload)
  return _internal_tlv_payload();
}
inline void Hop::_internal_set_tlv_payload(bool value) {
  
  tlv_payload_ = value;
}
inline void Hop::set_tlv_payload(bool value) {
  _internal_set_tlv_payload(value);
  // @@protoc_insertion_point(field_set:lnrpc.Hop.tlv_payload)
}

// .lnrpc.MPPRecord mpp_record = 10;
inline bool Hop::_internal_has_mpp_record() const {
  return this != internal_default_instance() && mpp_record_ != nullptr;
}
inline bool Hop::has_mpp_record() const {
  return _internal_has_mpp_record();
}
inline void Hop::clear_mpp_record() {
  if (GetArenaNoVirtual() == nullptr && mpp_record_ != nullptr) {
    delete mpp_record_;
  }
  mpp_record_ = nullptr;
}
inline const ::lnrpc::MPPRecord& Hop::_internal_mpp_record() const {
  const ::lnrpc::MPPRecord* p = mpp_record_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::MPPRecord*>(
      &::lnrpc::_MPPRecord_default_instance_);
}
inline const ::lnrpc::MPPRecord& Hop::mpp_record() const {
  // @@protoc_insertion_point(field_get:lnrpc.Hop.mpp_record)
  return _internal_mpp_record();
}
inline ::lnrpc::MPPRecord* Hop::release_mpp_record() {
  // @@protoc_insertion_point(field_release:lnrpc.Hop.mpp_record)
  
  ::lnrpc::MPPRecord* temp = mpp_record_;
  mpp_record_ = nullptr;
  return temp;
}
inline ::lnrpc::MPPRecord* Hop::_internal_mutable_mpp_record() {
  
  if (mpp_record_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::MPPRecord>(GetArenaNoVirtual());
    mpp_record_ = p;
  }
  return mpp_record_;
}
inline ::lnrpc::MPPRecord* Hop::mutable_mpp_record() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Hop.mpp_record)
  return _internal_mutable_mpp_record();
}
inline void Hop::set_allocated_mpp_record(::lnrpc::MPPRecord* mpp_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mpp_record_;
  }
  if (mpp_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mpp_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mpp_record, submessage_arena);
    }
    
  } else {
    
  }
  mpp_record_ = mpp_record;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Hop.mpp_record)
}

// map<uint64, bytes> custom_records = 11;
inline int Hop::_internal_custom_records_size() const {
  return custom_records_.size();
}
inline int Hop::custom_records_size() const {
  return _internal_custom_records_size();
}
inline void Hop::clear_custom_records() {
  custom_records_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Hop::_internal_custom_records() const {
  return custom_records_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
Hop::custom_records() const {
  // @@protoc_insertion_point(field_map:lnrpc.Hop.custom_records)
  return _internal_custom_records();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Hop::_internal_mutable_custom_records() {
  return custom_records_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
Hop::mutable_custom_records() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.Hop.custom_records)
  return _internal_mutable_custom_records();
}

// -------------------------------------------------------------------

// MPPRecord

// bytes payment_addr = 11;
inline void MPPRecord::clear_payment_addr() {
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MPPRecord::payment_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.MPPRecord.payment_addr)
  return _internal_payment_addr();
}
inline void MPPRecord::set_payment_addr(const std::string& value) {
  _internal_set_payment_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.MPPRecord.payment_addr)
}
inline std::string* MPPRecord::mutable_payment_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MPPRecord.payment_addr)
  return _internal_mutable_payment_addr();
}
inline const std::string& MPPRecord::_internal_payment_addr() const {
  return payment_addr_.GetNoArena();
}
inline void MPPRecord::_internal_set_payment_addr(const std::string& value) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MPPRecord::set_payment_addr(std::string&& value) {
  
  payment_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MPPRecord.payment_addr)
}
inline void MPPRecord::set_payment_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MPPRecord.payment_addr)
}
inline void MPPRecord::set_payment_addr(const void* value, size_t size) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MPPRecord.payment_addr)
}
inline std::string* MPPRecord::_internal_mutable_payment_addr() {
  
  return payment_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MPPRecord::release_payment_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.MPPRecord.payment_addr)
  
  return payment_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MPPRecord::set_allocated_payment_addr(std::string* payment_addr) {
  if (payment_addr != nullptr) {
    
  } else {
    
  }
  payment_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MPPRecord.payment_addr)
}

// int64 total_amt_msat = 10;
inline void MPPRecord::clear_total_amt_msat() {
  total_amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MPPRecord::_internal_total_amt_msat() const {
  return total_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MPPRecord::total_amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.MPPRecord.total_amt_msat)
  return _internal_total_amt_msat();
}
inline void MPPRecord::_internal_set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_amt_msat_ = value;
}
inline void MPPRecord::set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.MPPRecord.total_amt_msat)
}

// -------------------------------------------------------------------

// Route

// uint32 total_time_lock = 1;
inline void Route::clear_total_time_lock() {
  total_time_lock_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::_internal_total_time_lock() const {
  return total_time_lock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Route::total_time_lock() const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.total_time_lock)
  return _internal_total_time_lock();
}
inline void Route::_internal_set_total_time_lock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_time_lock_ = value;
}
inline void Route::set_total_time_lock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_time_lock(value);
  // @@protoc_insertion_point(field_set:lnrpc.Route.total_time_lock)
}

// int64 total_fees = 2 [deprecated = true];
inline void Route::clear_total_fees() {
  total_fees_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::_internal_total_fees() const {
  return total_fees_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::total_fees() const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.total_fees)
  return _internal_total_fees();
}
inline void Route::_internal_set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_fees_ = value;
}
inline void Route::set_total_fees(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_fees(value);
  // @@protoc_insertion_point(field_set:lnrpc.Route.total_fees)
}

// int64 total_amt = 3 [deprecated = true];
inline void Route::clear_total_amt() {
  total_amt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::_internal_total_amt() const {
  return total_amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::total_amt() const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.total_amt)
  return _internal_total_amt();
}
inline void Route::_internal_set_total_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_amt_ = value;
}
inline void Route::set_total_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_amt(value);
  // @@protoc_insertion_point(field_set:lnrpc.Route.total_amt)
}

// repeated .lnrpc.Hop hops = 4;
inline int Route::_internal_hops_size() const {
  return hops_.size();
}
inline int Route::hops_size() const {
  return _internal_hops_size();
}
inline void Route::clear_hops() {
  hops_.Clear();
}
inline ::lnrpc::Hop* Route::mutable_hops(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Route.hops)
  return hops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Hop >*
Route::mutable_hops() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Route.hops)
  return &hops_;
}
inline const ::lnrpc::Hop& Route::_internal_hops(int index) const {
  return hops_.Get(index);
}
inline const ::lnrpc::Hop& Route::hops(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.hops)
  return _internal_hops(index);
}
inline ::lnrpc::Hop* Route::_internal_add_hops() {
  return hops_.Add();
}
inline ::lnrpc::Hop* Route::add_hops() {
  // @@protoc_insertion_point(field_add:lnrpc.Route.hops)
  return _internal_add_hops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Hop >&
Route::hops() const {
  // @@protoc_insertion_point(field_list:lnrpc.Route.hops)
  return hops_;
}

// int64 total_fees_msat = 5;
inline void Route::clear_total_fees_msat() {
  total_fees_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::_internal_total_fees_msat() const {
  return total_fees_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::total_fees_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.total_fees_msat)
  return _internal_total_fees_msat();
}
inline void Route::_internal_set_total_fees_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_fees_msat_ = value;
}
inline void Route::set_total_fees_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_fees_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Route.total_fees_msat)
}

// int64 total_amt_msat = 6;
inline void Route::clear_total_amt_msat() {
  total_amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::_internal_total_amt_msat() const {
  return total_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Route::total_amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Route.total_amt_msat)
  return _internal_total_amt_msat();
}
inline void Route::_internal_set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_amt_msat_ = value;
}
inline void Route::set_total_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Route.total_amt_msat)
}

// -------------------------------------------------------------------

// NodeInfoRequest

// string pub_key = 1;
inline void NodeInfoRequest::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfoRequest::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfoRequest.pub_key)
  return _internal_pub_key();
}
inline void NodeInfoRequest::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeInfoRequest.pub_key)
}
inline std::string* NodeInfoRequest::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeInfoRequest.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& NodeInfoRequest::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void NodeInfoRequest::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeInfoRequest::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeInfoRequest.pub_key)
}
inline void NodeInfoRequest::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeInfoRequest.pub_key)
}
inline void NodeInfoRequest::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeInfoRequest.pub_key)
}
inline std::string* NodeInfoRequest::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfoRequest::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeInfoRequest.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfoRequest::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeInfoRequest.pub_key)
}

// bool include_channels = 2;
inline void NodeInfoRequest::clear_include_channels() {
  include_channels_ = false;
}
inline bool NodeInfoRequest::_internal_include_channels() const {
  return include_channels_;
}
inline bool NodeInfoRequest::include_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfoRequest.include_channels)
  return _internal_include_channels();
}
inline void NodeInfoRequest::_internal_set_include_channels(bool value) {
  
  include_channels_ = value;
}
inline void NodeInfoRequest::set_include_channels(bool value) {
  _internal_set_include_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeInfoRequest.include_channels)
}

// -------------------------------------------------------------------

// NodeInfo

// .lnrpc.LightningNode node = 1;
inline bool NodeInfo::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool NodeInfo::has_node() const {
  return _internal_has_node();
}
inline void NodeInfo::clear_node() {
  if (GetArenaNoVirtual() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::lnrpc::LightningNode& NodeInfo::_internal_node() const {
  const ::lnrpc::LightningNode* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::LightningNode*>(
      &::lnrpc::_LightningNode_default_instance_);
}
inline const ::lnrpc::LightningNode& NodeInfo::node() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfo.node)
  return _internal_node();
}
inline ::lnrpc::LightningNode* NodeInfo::release_node() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeInfo.node)
  
  ::lnrpc::LightningNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::lnrpc::LightningNode* NodeInfo::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::LightningNode>(GetArenaNoVirtual());
    node_ = p;
  }
  return node_;
}
inline ::lnrpc::LightningNode* NodeInfo::mutable_node() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeInfo.node)
  return _internal_mutable_node();
}
inline void NodeInfo::set_allocated_node(::lnrpc::LightningNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeInfo.node)
}

// uint32 num_channels = 2;
inline void NodeInfo::clear_num_channels() {
  num_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::_internal_num_channels() const {
  return num_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NodeInfo::num_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfo.num_channels)
  return _internal_num_channels();
}
inline void NodeInfo::_internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_channels_ = value;
}
inline void NodeInfo::set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeInfo.num_channels)
}

// int64 total_capacity = 3;
inline void NodeInfo::clear_total_capacity() {
  total_capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::_internal_total_capacity() const {
  return total_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NodeInfo::total_capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfo.total_capacity)
  return _internal_total_capacity();
}
inline void NodeInfo::_internal_set_total_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_capacity_ = value;
}
inline void NodeInfo::set_total_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeInfo.total_capacity)
}

// repeated .lnrpc.ChannelEdge channels = 4;
inline int NodeInfo::_internal_channels_size() const {
  return channels_.size();
}
inline int NodeInfo::channels_size() const {
  return _internal_channels_size();
}
inline void NodeInfo::clear_channels() {
  channels_.Clear();
}
inline ::lnrpc::ChannelEdge* NodeInfo::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeInfo.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >*
NodeInfo::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.NodeInfo.channels)
  return &channels_;
}
inline const ::lnrpc::ChannelEdge& NodeInfo::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::lnrpc::ChannelEdge& NodeInfo::channels(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeInfo.channels)
  return _internal_channels(index);
}
inline ::lnrpc::ChannelEdge* NodeInfo::_internal_add_channels() {
  return channels_.Add();
}
inline ::lnrpc::ChannelEdge* NodeInfo::add_channels() {
  // @@protoc_insertion_point(field_add:lnrpc.NodeInfo.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >&
NodeInfo::channels() const {
  // @@protoc_insertion_point(field_list:lnrpc.NodeInfo.channels)
  return channels_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LightningNode

// uint32 last_update = 1;
inline void LightningNode::clear_last_update() {
  last_update_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LightningNode::_internal_last_update() const {
  return last_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LightningNode::last_update() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningNode.last_update)
  return _internal_last_update();
}
inline void LightningNode::_internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_update_ = value;
}
inline void LightningNode::set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_update(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningNode.last_update)
}

// string pub_key = 2;
inline void LightningNode::clear_pub_key() {
  pub_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningNode::pub_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningNode.pub_key)
  return _internal_pub_key();
}
inline void LightningNode::set_pub_key(const std::string& value) {
  _internal_set_pub_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningNode.pub_key)
}
inline std::string* LightningNode::mutable_pub_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningNode.pub_key)
  return _internal_mutable_pub_key();
}
inline const std::string& LightningNode::_internal_pub_key() const {
  return pub_key_.GetNoArena();
}
inline void LightningNode::_internal_set_pub_key(const std::string& value) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningNode::set_pub_key(std::string&& value) {
  
  pub_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.LightningNode.pub_key)
}
inline void LightningNode::set_pub_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.LightningNode.pub_key)
}
inline void LightningNode::set_pub_key(const char* value, size_t size) {
  
  pub_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.LightningNode.pub_key)
}
inline std::string* LightningNode::_internal_mutable_pub_key() {
  
  return pub_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningNode::release_pub_key() {
  // @@protoc_insertion_point(field_release:lnrpc.LightningNode.pub_key)
  
  return pub_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningNode::set_allocated_pub_key(std::string* pub_key) {
  if (pub_key != nullptr) {
    
  } else {
    
  }
  pub_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pub_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.LightningNode.pub_key)
}

// string alias = 3;
inline void LightningNode::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningNode::alias() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningNode.alias)
  return _internal_alias();
}
inline void LightningNode::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningNode.alias)
}
inline std::string* LightningNode::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningNode.alias)
  return _internal_mutable_alias();
}
inline const std::string& LightningNode::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void LightningNode::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningNode::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.LightningNode.alias)
}
inline void LightningNode::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.LightningNode.alias)
}
inline void LightningNode::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.LightningNode.alias)
}
inline std::string* LightningNode::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningNode::release_alias() {
  // @@protoc_insertion_point(field_release:lnrpc.LightningNode.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningNode::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.LightningNode.alias)
}

// repeated .lnrpc.NodeAddress addresses = 4;
inline int LightningNode::_internal_addresses_size() const {
  return addresses_.size();
}
inline int LightningNode::addresses_size() const {
  return _internal_addresses_size();
}
inline void LightningNode::clear_addresses() {
  addresses_.Clear();
}
inline ::lnrpc::NodeAddress* LightningNode::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningNode.addresses)
  return addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeAddress >*
LightningNode::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.LightningNode.addresses)
  return &addresses_;
}
inline const ::lnrpc::NodeAddress& LightningNode::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const ::lnrpc::NodeAddress& LightningNode::addresses(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningNode.addresses)
  return _internal_addresses(index);
}
inline ::lnrpc::NodeAddress* LightningNode::_internal_add_addresses() {
  return addresses_.Add();
}
inline ::lnrpc::NodeAddress* LightningNode::add_addresses() {
  // @@protoc_insertion_point(field_add:lnrpc.LightningNode.addresses)
  return _internal_add_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeAddress >&
LightningNode::addresses() const {
  // @@protoc_insertion_point(field_list:lnrpc.LightningNode.addresses)
  return addresses_;
}

// string color = 5;
inline void LightningNode::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LightningNode::color() const {
  // @@protoc_insertion_point(field_get:lnrpc.LightningNode.color)
  return _internal_color();
}
inline void LightningNode::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:lnrpc.LightningNode.color)
}
inline std::string* LightningNode::mutable_color() {
  // @@protoc_insertion_point(field_mutable:lnrpc.LightningNode.color)
  return _internal_mutable_color();
}
inline const std::string& LightningNode::_internal_color() const {
  return color_.GetNoArena();
}
inline void LightningNode::_internal_set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LightningNode::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.LightningNode.color)
}
inline void LightningNode::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.LightningNode.color)
}
inline void LightningNode::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.LightningNode.color)
}
inline std::string* LightningNode::_internal_mutable_color() {
  
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LightningNode::release_color() {
  // @@protoc_insertion_point(field_release:lnrpc.LightningNode.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LightningNode::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.LightningNode.color)
}

// map<uint32, .lnrpc.Feature> features = 6;
inline int LightningNode::_internal_features_size() const {
  return features_.size();
}
inline int LightningNode::features_size() const {
  return _internal_features_size();
}
inline void LightningNode::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
LightningNode::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
LightningNode::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.LightningNode.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
LightningNode::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
LightningNode::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.LightningNode.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// NodeAddress

// string network = 1;
inline void NodeAddress::clear_network() {
  network_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeAddress::network() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeAddress.network)
  return _internal_network();
}
inline void NodeAddress::set_network(const std::string& value) {
  _internal_set_network(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeAddress.network)
}
inline std::string* NodeAddress::mutable_network() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeAddress.network)
  return _internal_mutable_network();
}
inline const std::string& NodeAddress::_internal_network() const {
  return network_.GetNoArena();
}
inline void NodeAddress::_internal_set_network(const std::string& value) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeAddress::set_network(std::string&& value) {
  
  network_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeAddress.network)
}
inline void NodeAddress::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeAddress.network)
}
inline void NodeAddress::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeAddress.network)
}
inline std::string* NodeAddress::_internal_mutable_network() {
  
  return network_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeAddress::release_network() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeAddress.network)
  
  return network_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAddress::set_allocated_network(std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeAddress.network)
}

// string addr = 2;
inline void NodeAddress::clear_addr() {
  addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeAddress::addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeAddress.addr)
  return _internal_addr();
}
inline void NodeAddress::set_addr(const std::string& value) {
  _internal_set_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeAddress.addr)
}
inline std::string* NodeAddress::mutable_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeAddress.addr)
  return _internal_mutable_addr();
}
inline const std::string& NodeAddress::_internal_addr() const {
  return addr_.GetNoArena();
}
inline void NodeAddress::_internal_set_addr(const std::string& value) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeAddress::set_addr(std::string&& value) {
  
  addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeAddress.addr)
}
inline void NodeAddress::set_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeAddress.addr)
}
inline void NodeAddress::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeAddress.addr)
}
inline std::string* NodeAddress::_internal_mutable_addr() {
  
  return addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeAddress::release_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeAddress.addr)
  
  return addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAddress::set_allocated_addr(std::string* addr) {
  if (addr != nullptr) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeAddress.addr)
}

// -------------------------------------------------------------------

// RoutingPolicy

// uint32 time_lock_delta = 1;
inline void RoutingPolicy::clear_time_lock_delta() {
  time_lock_delta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingPolicy::_internal_time_lock_delta() const {
  return time_lock_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingPolicy::time_lock_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.time_lock_delta)
  return _internal_time_lock_delta();
}
inline void RoutingPolicy::_internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_lock_delta_ = value;
}
inline void RoutingPolicy::set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_lock_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.time_lock_delta)
}

// int64 min_htlc = 2;
inline void RoutingPolicy::clear_min_htlc() {
  min_htlc_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::_internal_min_htlc() const {
  return min_htlc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::min_htlc() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.min_htlc)
  return _internal_min_htlc();
}
inline void RoutingPolicy::_internal_set_min_htlc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_htlc_ = value;
}
inline void RoutingPolicy::set_min_htlc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_htlc(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.min_htlc)
}

// int64 fee_base_msat = 3;
inline void RoutingPolicy::clear_fee_base_msat() {
  fee_base_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::_internal_fee_base_msat() const {
  return fee_base_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::fee_base_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.fee_base_msat)
  return _internal_fee_base_msat();
}
inline void RoutingPolicy::_internal_set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_base_msat_ = value;
}
inline void RoutingPolicy::set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_base_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.fee_base_msat)
}

// int64 fee_rate_milli_msat = 4;
inline void RoutingPolicy::clear_fee_rate_milli_msat() {
  fee_rate_milli_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::_internal_fee_rate_milli_msat() const {
  return fee_rate_milli_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RoutingPolicy::fee_rate_milli_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.fee_rate_milli_msat)
  return _internal_fee_rate_milli_msat();
}
inline void RoutingPolicy::_internal_set_fee_rate_milli_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_rate_milli_msat_ = value;
}
inline void RoutingPolicy::set_fee_rate_milli_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_rate_milli_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.fee_rate_milli_msat)
}

// bool disabled = 5;
inline void RoutingPolicy::clear_disabled() {
  disabled_ = false;
}
inline bool RoutingPolicy::_internal_disabled() const {
  return disabled_;
}
inline bool RoutingPolicy::disabled() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.disabled)
  return _internal_disabled();
}
inline void RoutingPolicy::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void RoutingPolicy::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.disabled)
}

// uint64 max_htlc_msat = 6;
inline void RoutingPolicy::clear_max_htlc_msat() {
  max_htlc_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingPolicy::_internal_max_htlc_msat() const {
  return max_htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RoutingPolicy::max_htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.max_htlc_msat)
  return _internal_max_htlc_msat();
}
inline void RoutingPolicy::_internal_set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_htlc_msat_ = value;
}
inline void RoutingPolicy::set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.max_htlc_msat)
}

// uint32 last_update = 7;
inline void RoutingPolicy::clear_last_update() {
  last_update_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingPolicy::_internal_last_update() const {
  return last_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoutingPolicy::last_update() const {
  // @@protoc_insertion_point(field_get:lnrpc.RoutingPolicy.last_update)
  return _internal_last_update();
}
inline void RoutingPolicy::_internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_update_ = value;
}
inline void RoutingPolicy::set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_update(value);
  // @@protoc_insertion_point(field_set:lnrpc.RoutingPolicy.last_update)
}

// -------------------------------------------------------------------

// ChannelEdge

// uint64 channel_id = 1 [jstype = JS_STRING];
inline void ChannelEdge::clear_channel_id() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelEdge::_internal_channel_id() const {
  return channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelEdge::channel_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.channel_id)
  return _internal_channel_id();
}
inline void ChannelEdge::_internal_set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  channel_id_ = value;
}
inline void ChannelEdge::set_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_channel_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.channel_id)
}

// string chan_point = 2;
inline void ChannelEdge::clear_chan_point() {
  chan_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelEdge::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.chan_point)
  return _internal_chan_point();
}
inline void ChannelEdge::set_chan_point(const std::string& value) {
  _internal_set_chan_point(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.chan_point)
}
inline std::string* ChannelEdge::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdge.chan_point)
  return _internal_mutable_chan_point();
}
inline const std::string& ChannelEdge::_internal_chan_point() const {
  return chan_point_.GetNoArena();
}
inline void ChannelEdge::_internal_set_chan_point(const std::string& value) {
  
  chan_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelEdge::set_chan_point(std::string&& value) {
  
  chan_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelEdge.chan_point)
}
inline void ChannelEdge::set_chan_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chan_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelEdge.chan_point)
}
inline void ChannelEdge::set_chan_point(const char* value, size_t size) {
  
  chan_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelEdge.chan_point)
}
inline std::string* ChannelEdge::_internal_mutable_chan_point() {
  
  return chan_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelEdge::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdge.chan_point)
  
  return chan_point_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelEdge::set_allocated_chan_point(std::string* chan_point) {
  if (chan_point != nullptr) {
    
  } else {
    
  }
  chan_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chan_point);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdge.chan_point)
}

// uint32 last_update = 3 [deprecated = true];
inline void ChannelEdge::clear_last_update() {
  last_update_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelEdge::_internal_last_update() const {
  return last_update_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelEdge::last_update() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.last_update)
  return _internal_last_update();
}
inline void ChannelEdge::_internal_set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_update_ = value;
}
inline void ChannelEdge::set_last_update(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_update(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.last_update)
}

// string node1_pub = 4;
inline void ChannelEdge::clear_node1_pub() {
  node1_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelEdge::node1_pub() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.node1_pub)
  return _internal_node1_pub();
}
inline void ChannelEdge::set_node1_pub(const std::string& value) {
  _internal_set_node1_pub(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.node1_pub)
}
inline std::string* ChannelEdge::mutable_node1_pub() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdge.node1_pub)
  return _internal_mutable_node1_pub();
}
inline const std::string& ChannelEdge::_internal_node1_pub() const {
  return node1_pub_.GetNoArena();
}
inline void ChannelEdge::_internal_set_node1_pub(const std::string& value) {
  
  node1_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelEdge::set_node1_pub(std::string&& value) {
  
  node1_pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelEdge.node1_pub)
}
inline void ChannelEdge::set_node1_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node1_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelEdge.node1_pub)
}
inline void ChannelEdge::set_node1_pub(const char* value, size_t size) {
  
  node1_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelEdge.node1_pub)
}
inline std::string* ChannelEdge::_internal_mutable_node1_pub() {
  
  return node1_pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelEdge::release_node1_pub() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdge.node1_pub)
  
  return node1_pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelEdge::set_allocated_node1_pub(std::string* node1_pub) {
  if (node1_pub != nullptr) {
    
  } else {
    
  }
  node1_pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node1_pub);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdge.node1_pub)
}

// string node2_pub = 5;
inline void ChannelEdge::clear_node2_pub() {
  node2_pub_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelEdge::node2_pub() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.node2_pub)
  return _internal_node2_pub();
}
inline void ChannelEdge::set_node2_pub(const std::string& value) {
  _internal_set_node2_pub(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.node2_pub)
}
inline std::string* ChannelEdge::mutable_node2_pub() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdge.node2_pub)
  return _internal_mutable_node2_pub();
}
inline const std::string& ChannelEdge::_internal_node2_pub() const {
  return node2_pub_.GetNoArena();
}
inline void ChannelEdge::_internal_set_node2_pub(const std::string& value) {
  
  node2_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelEdge::set_node2_pub(std::string&& value) {
  
  node2_pub_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelEdge.node2_pub)
}
inline void ChannelEdge::set_node2_pub(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node2_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelEdge.node2_pub)
}
inline void ChannelEdge::set_node2_pub(const char* value, size_t size) {
  
  node2_pub_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelEdge.node2_pub)
}
inline std::string* ChannelEdge::_internal_mutable_node2_pub() {
  
  return node2_pub_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelEdge::release_node2_pub() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdge.node2_pub)
  
  return node2_pub_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelEdge::set_allocated_node2_pub(std::string* node2_pub) {
  if (node2_pub != nullptr) {
    
  } else {
    
  }
  node2_pub_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node2_pub);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdge.node2_pub)
}

// int64 capacity = 6;
inline void ChannelEdge::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelEdge::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelEdge::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.capacity)
  return _internal_capacity();
}
inline void ChannelEdge::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void ChannelEdge::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdge.capacity)
}

// .lnrpc.RoutingPolicy node1_policy = 7;
inline bool ChannelEdge::_internal_has_node1_policy() const {
  return this != internal_default_instance() && node1_policy_ != nullptr;
}
inline bool ChannelEdge::has_node1_policy() const {
  return _internal_has_node1_policy();
}
inline void ChannelEdge::clear_node1_policy() {
  if (GetArenaNoVirtual() == nullptr && node1_policy_ != nullptr) {
    delete node1_policy_;
  }
  node1_policy_ = nullptr;
}
inline const ::lnrpc::RoutingPolicy& ChannelEdge::_internal_node1_policy() const {
  const ::lnrpc::RoutingPolicy* p = node1_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::RoutingPolicy*>(
      &::lnrpc::_RoutingPolicy_default_instance_);
}
inline const ::lnrpc::RoutingPolicy& ChannelEdge::node1_policy() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.node1_policy)
  return _internal_node1_policy();
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::release_node1_policy() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdge.node1_policy)
  
  ::lnrpc::RoutingPolicy* temp = node1_policy_;
  node1_policy_ = nullptr;
  return temp;
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::_internal_mutable_node1_policy() {
  
  if (node1_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::RoutingPolicy>(GetArenaNoVirtual());
    node1_policy_ = p;
  }
  return node1_policy_;
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::mutable_node1_policy() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdge.node1_policy)
  return _internal_mutable_node1_policy();
}
inline void ChannelEdge::set_allocated_node1_policy(::lnrpc::RoutingPolicy* node1_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node1_policy_;
  }
  if (node1_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node1_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node1_policy, submessage_arena);
    }
    
  } else {
    
  }
  node1_policy_ = node1_policy;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdge.node1_policy)
}

// .lnrpc.RoutingPolicy node2_policy = 8;
inline bool ChannelEdge::_internal_has_node2_policy() const {
  return this != internal_default_instance() && node2_policy_ != nullptr;
}
inline bool ChannelEdge::has_node2_policy() const {
  return _internal_has_node2_policy();
}
inline void ChannelEdge::clear_node2_policy() {
  if (GetArenaNoVirtual() == nullptr && node2_policy_ != nullptr) {
    delete node2_policy_;
  }
  node2_policy_ = nullptr;
}
inline const ::lnrpc::RoutingPolicy& ChannelEdge::_internal_node2_policy() const {
  const ::lnrpc::RoutingPolicy* p = node2_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::RoutingPolicy*>(
      &::lnrpc::_RoutingPolicy_default_instance_);
}
inline const ::lnrpc::RoutingPolicy& ChannelEdge::node2_policy() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdge.node2_policy)
  return _internal_node2_policy();
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::release_node2_policy() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdge.node2_policy)
  
  ::lnrpc::RoutingPolicy* temp = node2_policy_;
  node2_policy_ = nullptr;
  return temp;
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::_internal_mutable_node2_policy() {
  
  if (node2_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::RoutingPolicy>(GetArenaNoVirtual());
    node2_policy_ = p;
  }
  return node2_policy_;
}
inline ::lnrpc::RoutingPolicy* ChannelEdge::mutable_node2_policy() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdge.node2_policy)
  return _internal_mutable_node2_policy();
}
inline void ChannelEdge::set_allocated_node2_policy(::lnrpc::RoutingPolicy* node2_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node2_policy_;
  }
  if (node2_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node2_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node2_policy, submessage_arena);
    }
    
  } else {
    
  }
  node2_policy_ = node2_policy;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdge.node2_policy)
}

// -------------------------------------------------------------------

// ChannelGraphRequest

// bool include_unannounced = 1;
inline void ChannelGraphRequest::clear_include_unannounced() {
  include_unannounced_ = false;
}
inline bool ChannelGraphRequest::_internal_include_unannounced() const {
  return include_unannounced_;
}
inline bool ChannelGraphRequest::include_unannounced() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelGraphRequest.include_unannounced)
  return _internal_include_unannounced();
}
inline void ChannelGraphRequest::_internal_set_include_unannounced(bool value) {
  
  include_unannounced_ = value;
}
inline void ChannelGraphRequest::set_include_unannounced(bool value) {
  _internal_set_include_unannounced(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelGraphRequest.include_unannounced)
}

// -------------------------------------------------------------------

// ChannelGraph

// repeated .lnrpc.LightningNode nodes = 1;
inline int ChannelGraph::_internal_nodes_size() const {
  return nodes_.size();
}
inline int ChannelGraph::nodes_size() const {
  return _internal_nodes_size();
}
inline void ChannelGraph::clear_nodes() {
  nodes_.Clear();
}
inline ::lnrpc::LightningNode* ChannelGraph::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelGraph.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::LightningNode >*
ChannelGraph::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ChannelGraph.nodes)
  return &nodes_;
}
inline const ::lnrpc::LightningNode& ChannelGraph::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::lnrpc::LightningNode& ChannelGraph::nodes(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelGraph.nodes)
  return _internal_nodes(index);
}
inline ::lnrpc::LightningNode* ChannelGraph::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::lnrpc::LightningNode* ChannelGraph::add_nodes() {
  // @@protoc_insertion_point(field_add:lnrpc.ChannelGraph.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::LightningNode >&
ChannelGraph::nodes() const {
  // @@protoc_insertion_point(field_list:lnrpc.ChannelGraph.nodes)
  return nodes_;
}

// repeated .lnrpc.ChannelEdge edges = 2;
inline int ChannelGraph::_internal_edges_size() const {
  return edges_.size();
}
inline int ChannelGraph::edges_size() const {
  return _internal_edges_size();
}
inline void ChannelGraph::clear_edges() {
  edges_.Clear();
}
inline ::lnrpc::ChannelEdge* ChannelGraph::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelGraph.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >*
ChannelGraph::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ChannelGraph.edges)
  return &edges_;
}
inline const ::lnrpc::ChannelEdge& ChannelGraph::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::lnrpc::ChannelEdge& ChannelGraph::edges(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelGraph.edges)
  return _internal_edges(index);
}
inline ::lnrpc::ChannelEdge* ChannelGraph::_internal_add_edges() {
  return edges_.Add();
}
inline ::lnrpc::ChannelEdge* ChannelGraph::add_edges() {
  // @@protoc_insertion_point(field_add:lnrpc.ChannelGraph.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdge >&
ChannelGraph::edges() const {
  // @@protoc_insertion_point(field_list:lnrpc.ChannelGraph.edges)
  return edges_;
}

// -------------------------------------------------------------------

// NodeMetricsRequest

// repeated .lnrpc.NodeMetricType types = 1;
inline int NodeMetricsRequest::_internal_types_size() const {
  return types_.size();
}
inline int NodeMetricsRequest::types_size() const {
  return _internal_types_size();
}
inline void NodeMetricsRequest::clear_types() {
  types_.Clear();
}
inline ::lnrpc::NodeMetricType NodeMetricsRequest::_internal_types(int index) const {
  return static_cast< ::lnrpc::NodeMetricType >(types_.Get(index));
}
inline ::lnrpc::NodeMetricType NodeMetricsRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeMetricsRequest.types)
  return _internal_types(index);
}
inline void NodeMetricsRequest::set_types(int index, ::lnrpc::NodeMetricType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeMetricsRequest.types)
}
inline void NodeMetricsRequest::_internal_add_types(::lnrpc::NodeMetricType value) {
  types_.Add(value);
}
inline void NodeMetricsRequest::add_types(::lnrpc::NodeMetricType value) {
  // @@protoc_insertion_point(field_add:lnrpc.NodeMetricsRequest.types)
  _internal_add_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
NodeMetricsRequest::types() const {
  // @@protoc_insertion_point(field_list:lnrpc.NodeMetricsRequest.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NodeMetricsRequest::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
NodeMetricsRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.NodeMetricsRequest.types)
  return _internal_mutable_types();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeMetricsResponse

// map<string, .lnrpc.FloatMetric> betweenness_centrality = 1;
inline int NodeMetricsResponse::_internal_betweenness_centrality_size() const {
  return betweenness_centrality_.size();
}
inline int NodeMetricsResponse::betweenness_centrality_size() const {
  return _internal_betweenness_centrality_size();
}
inline void NodeMetricsResponse::clear_betweenness_centrality() {
  betweenness_centrality_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >&
NodeMetricsResponse::_internal_betweenness_centrality() const {
  return betweenness_centrality_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >&
NodeMetricsResponse::betweenness_centrality() const {
  // @@protoc_insertion_point(field_map:lnrpc.NodeMetricsResponse.betweenness_centrality)
  return _internal_betweenness_centrality();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >*
NodeMetricsResponse::_internal_mutable_betweenness_centrality() {
  return betweenness_centrality_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::FloatMetric >*
NodeMetricsResponse::mutable_betweenness_centrality() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.NodeMetricsResponse.betweenness_centrality)
  return _internal_mutable_betweenness_centrality();
}

// -------------------------------------------------------------------

// FloatMetric

// double value = 1;
inline void FloatMetric::clear_value() {
  value_ = 0;
}
inline double FloatMetric::_internal_value() const {
  return value_;
}
inline double FloatMetric::value() const {
  // @@protoc_insertion_point(field_get:lnrpc.FloatMetric.value)
  return _internal_value();
}
inline void FloatMetric::_internal_set_value(double value) {
  
  value_ = value;
}
inline void FloatMetric::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lnrpc.FloatMetric.value)
}

// double normalized_value = 2;
inline void FloatMetric::clear_normalized_value() {
  normalized_value_ = 0;
}
inline double FloatMetric::_internal_normalized_value() const {
  return normalized_value_;
}
inline double FloatMetric::normalized_value() const {
  // @@protoc_insertion_point(field_get:lnrpc.FloatMetric.normalized_value)
  return _internal_normalized_value();
}
inline void FloatMetric::_internal_set_normalized_value(double value) {
  
  normalized_value_ = value;
}
inline void FloatMetric::set_normalized_value(double value) {
  _internal_set_normalized_value(value);
  // @@protoc_insertion_point(field_set:lnrpc.FloatMetric.normalized_value)
}

// -------------------------------------------------------------------

// ChanInfoRequest

// uint64 chan_id = 1 [jstype = JS_STRING];
inline void ChanInfoRequest::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChanInfoRequest::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChanInfoRequest::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanInfoRequest.chan_id)
  return _internal_chan_id();
}
inline void ChanInfoRequest::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ChanInfoRequest::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChanInfoRequest.chan_id)
}

// -------------------------------------------------------------------

// NetworkInfoRequest

// -------------------------------------------------------------------

// NetworkInfo

// uint32 graph_diameter = 1;
inline void NetworkInfo::clear_graph_diameter() {
  graph_diameter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::_internal_graph_diameter() const {
  return graph_diameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::graph_diameter() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.graph_diameter)
  return _internal_graph_diameter();
}
inline void NetworkInfo::_internal_set_graph_diameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  graph_diameter_ = value;
}
inline void NetworkInfo::set_graph_diameter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_graph_diameter(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.graph_diameter)
}

// double avg_out_degree = 2;
inline void NetworkInfo::clear_avg_out_degree() {
  avg_out_degree_ = 0;
}
inline double NetworkInfo::_internal_avg_out_degree() const {
  return avg_out_degree_;
}
inline double NetworkInfo::avg_out_degree() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.avg_out_degree)
  return _internal_avg_out_degree();
}
inline void NetworkInfo::_internal_set_avg_out_degree(double value) {
  
  avg_out_degree_ = value;
}
inline void NetworkInfo::set_avg_out_degree(double value) {
  _internal_set_avg_out_degree(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.avg_out_degree)
}

// uint32 max_out_degree = 3;
inline void NetworkInfo::clear_max_out_degree() {
  max_out_degree_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::_internal_max_out_degree() const {
  return max_out_degree_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::max_out_degree() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.max_out_degree)
  return _internal_max_out_degree();
}
inline void NetworkInfo::_internal_set_max_out_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_out_degree_ = value;
}
inline void NetworkInfo::set_max_out_degree(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_out_degree(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.max_out_degree)
}

// uint32 num_nodes = 4;
inline void NetworkInfo::clear_num_nodes() {
  num_nodes_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::_internal_num_nodes() const {
  return num_nodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::num_nodes() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.num_nodes)
  return _internal_num_nodes();
}
inline void NetworkInfo::_internal_set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_nodes_ = value;
}
inline void NetworkInfo::set_num_nodes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_nodes(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.num_nodes)
}

// uint32 num_channels = 5;
inline void NetworkInfo::clear_num_channels() {
  num_channels_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::_internal_num_channels() const {
  return num_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::num_channels() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.num_channels)
  return _internal_num_channels();
}
inline void NetworkInfo::_internal_set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_channels_ = value;
}
inline void NetworkInfo::set_num_channels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_channels(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.num_channels)
}

// int64 total_network_capacity = 6;
inline void NetworkInfo::clear_total_network_capacity() {
  total_network_capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::_internal_total_network_capacity() const {
  return total_network_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::total_network_capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.total_network_capacity)
  return _internal_total_network_capacity();
}
inline void NetworkInfo::_internal_set_total_network_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  total_network_capacity_ = value;
}
inline void NetworkInfo::set_total_network_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_total_network_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.total_network_capacity)
}

// double avg_channel_size = 7;
inline void NetworkInfo::clear_avg_channel_size() {
  avg_channel_size_ = 0;
}
inline double NetworkInfo::_internal_avg_channel_size() const {
  return avg_channel_size_;
}
inline double NetworkInfo::avg_channel_size() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.avg_channel_size)
  return _internal_avg_channel_size();
}
inline void NetworkInfo::_internal_set_avg_channel_size(double value) {
  
  avg_channel_size_ = value;
}
inline void NetworkInfo::set_avg_channel_size(double value) {
  _internal_set_avg_channel_size(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.avg_channel_size)
}

// int64 min_channel_size = 8;
inline void NetworkInfo::clear_min_channel_size() {
  min_channel_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::_internal_min_channel_size() const {
  return min_channel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::min_channel_size() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.min_channel_size)
  return _internal_min_channel_size();
}
inline void NetworkInfo::_internal_set_min_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_channel_size_ = value;
}
inline void NetworkInfo::set_min_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_channel_size(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.min_channel_size)
}

// int64 max_channel_size = 9;
inline void NetworkInfo::clear_max_channel_size() {
  max_channel_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::_internal_max_channel_size() const {
  return max_channel_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::max_channel_size() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.max_channel_size)
  return _internal_max_channel_size();
}
inline void NetworkInfo::_internal_set_max_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_channel_size_ = value;
}
inline void NetworkInfo::set_max_channel_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_channel_size(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.max_channel_size)
}

// int64 median_channel_size_sat = 10;
inline void NetworkInfo::clear_median_channel_size_sat() {
  median_channel_size_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::_internal_median_channel_size_sat() const {
  return median_channel_size_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NetworkInfo::median_channel_size_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.median_channel_size_sat)
  return _internal_median_channel_size_sat();
}
inline void NetworkInfo::_internal_set_median_channel_size_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  median_channel_size_sat_ = value;
}
inline void NetworkInfo::set_median_channel_size_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_median_channel_size_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.median_channel_size_sat)
}

// uint64 num_zombie_chans = 11;
inline void NetworkInfo::clear_num_zombie_chans() {
  num_zombie_chans_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkInfo::_internal_num_zombie_chans() const {
  return num_zombie_chans_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NetworkInfo::num_zombie_chans() const {
  // @@protoc_insertion_point(field_get:lnrpc.NetworkInfo.num_zombie_chans)
  return _internal_num_zombie_chans();
}
inline void NetworkInfo::_internal_set_num_zombie_chans(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_zombie_chans_ = value;
}
inline void NetworkInfo::set_num_zombie_chans(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_zombie_chans(value);
  // @@protoc_insertion_point(field_set:lnrpc.NetworkInfo.num_zombie_chans)
}

// -------------------------------------------------------------------

// StopRequest

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// GraphTopologySubscription

// -------------------------------------------------------------------

// GraphTopologyUpdate

// repeated .lnrpc.NodeUpdate node_updates = 1;
inline int GraphTopologyUpdate::_internal_node_updates_size() const {
  return node_updates_.size();
}
inline int GraphTopologyUpdate::node_updates_size() const {
  return _internal_node_updates_size();
}
inline void GraphTopologyUpdate::clear_node_updates() {
  node_updates_.Clear();
}
inline ::lnrpc::NodeUpdate* GraphTopologyUpdate::mutable_node_updates(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.GraphTopologyUpdate.node_updates)
  return node_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeUpdate >*
GraphTopologyUpdate::mutable_node_updates() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.GraphTopologyUpdate.node_updates)
  return &node_updates_;
}
inline const ::lnrpc::NodeUpdate& GraphTopologyUpdate::_internal_node_updates(int index) const {
  return node_updates_.Get(index);
}
inline const ::lnrpc::NodeUpdate& GraphTopologyUpdate::node_updates(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.GraphTopologyUpdate.node_updates)
  return _internal_node_updates(index);
}
inline ::lnrpc::NodeUpdate* GraphTopologyUpdate::_internal_add_node_updates() {
  return node_updates_.Add();
}
inline ::lnrpc::NodeUpdate* GraphTopologyUpdate::add_node_updates() {
  // @@protoc_insertion_point(field_add:lnrpc.GraphTopologyUpdate.node_updates)
  return _internal_add_node_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::NodeUpdate >&
GraphTopologyUpdate::node_updates() const {
  // @@protoc_insertion_point(field_list:lnrpc.GraphTopologyUpdate.node_updates)
  return node_updates_;
}

// repeated .lnrpc.ChannelEdgeUpdate channel_updates = 2;
inline int GraphTopologyUpdate::_internal_channel_updates_size() const {
  return channel_updates_.size();
}
inline int GraphTopologyUpdate::channel_updates_size() const {
  return _internal_channel_updates_size();
}
inline void GraphTopologyUpdate::clear_channel_updates() {
  channel_updates_.Clear();
}
inline ::lnrpc::ChannelEdgeUpdate* GraphTopologyUpdate::mutable_channel_updates(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.GraphTopologyUpdate.channel_updates)
  return channel_updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdgeUpdate >*
GraphTopologyUpdate::mutable_channel_updates() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.GraphTopologyUpdate.channel_updates)
  return &channel_updates_;
}
inline const ::lnrpc::ChannelEdgeUpdate& GraphTopologyUpdate::_internal_channel_updates(int index) const {
  return channel_updates_.Get(index);
}
inline const ::lnrpc::ChannelEdgeUpdate& GraphTopologyUpdate::channel_updates(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.GraphTopologyUpdate.channel_updates)
  return _internal_channel_updates(index);
}
inline ::lnrpc::ChannelEdgeUpdate* GraphTopologyUpdate::_internal_add_channel_updates() {
  return channel_updates_.Add();
}
inline ::lnrpc::ChannelEdgeUpdate* GraphTopologyUpdate::add_channel_updates() {
  // @@protoc_insertion_point(field_add:lnrpc.GraphTopologyUpdate.channel_updates)
  return _internal_add_channel_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelEdgeUpdate >&
GraphTopologyUpdate::channel_updates() const {
  // @@protoc_insertion_point(field_list:lnrpc.GraphTopologyUpdate.channel_updates)
  return channel_updates_;
}

// repeated .lnrpc.ClosedChannelUpdate closed_chans = 3;
inline int GraphTopologyUpdate::_internal_closed_chans_size() const {
  return closed_chans_.size();
}
inline int GraphTopologyUpdate::closed_chans_size() const {
  return _internal_closed_chans_size();
}
inline void GraphTopologyUpdate::clear_closed_chans() {
  closed_chans_.Clear();
}
inline ::lnrpc::ClosedChannelUpdate* GraphTopologyUpdate::mutable_closed_chans(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.GraphTopologyUpdate.closed_chans)
  return closed_chans_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ClosedChannelUpdate >*
GraphTopologyUpdate::mutable_closed_chans() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.GraphTopologyUpdate.closed_chans)
  return &closed_chans_;
}
inline const ::lnrpc::ClosedChannelUpdate& GraphTopologyUpdate::_internal_closed_chans(int index) const {
  return closed_chans_.Get(index);
}
inline const ::lnrpc::ClosedChannelUpdate& GraphTopologyUpdate::closed_chans(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.GraphTopologyUpdate.closed_chans)
  return _internal_closed_chans(index);
}
inline ::lnrpc::ClosedChannelUpdate* GraphTopologyUpdate::_internal_add_closed_chans() {
  return closed_chans_.Add();
}
inline ::lnrpc::ClosedChannelUpdate* GraphTopologyUpdate::add_closed_chans() {
  // @@protoc_insertion_point(field_add:lnrpc.GraphTopologyUpdate.closed_chans)
  return _internal_add_closed_chans();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ClosedChannelUpdate >&
GraphTopologyUpdate::closed_chans() const {
  // @@protoc_insertion_point(field_list:lnrpc.GraphTopologyUpdate.closed_chans)
  return closed_chans_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeUpdate

// repeated string addresses = 1;
inline int NodeUpdate::_internal_addresses_size() const {
  return addresses_.size();
}
inline int NodeUpdate::addresses_size() const {
  return _internal_addresses_size();
}
inline void NodeUpdate::clear_addresses() {
  addresses_.Clear();
}
inline std::string* NodeUpdate::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:lnrpc.NodeUpdate.addresses)
  return _internal_add_addresses();
}
inline const std::string& NodeUpdate::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& NodeUpdate::addresses(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeUpdate.addresses)
  return _internal_addresses(index);
}
inline std::string* NodeUpdate::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeUpdate.addresses)
  return addresses_.Mutable(index);
}
inline void NodeUpdate::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void NodeUpdate::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void NodeUpdate::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeUpdate.addresses)
}
inline void NodeUpdate::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeUpdate.addresses)
}
inline std::string* NodeUpdate::_internal_add_addresses() {
  return addresses_.Add();
}
inline void NodeUpdate::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lnrpc.NodeUpdate.addresses)
}
inline void NodeUpdate::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lnrpc.NodeUpdate.addresses)
}
inline void NodeUpdate::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lnrpc.NodeUpdate.addresses)
}
inline void NodeUpdate::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lnrpc.NodeUpdate.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NodeUpdate::addresses() const {
  // @@protoc_insertion_point(field_list:lnrpc.NodeUpdate.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NodeUpdate::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.NodeUpdate.addresses)
  return &addresses_;
}

// string identity_key = 2;
inline void NodeUpdate::clear_identity_key() {
  identity_key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeUpdate::identity_key() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeUpdate.identity_key)
  return _internal_identity_key();
}
inline void NodeUpdate::set_identity_key(const std::string& value) {
  _internal_set_identity_key(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.identity_key)
}
inline std::string* NodeUpdate::mutable_identity_key() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeUpdate.identity_key)
  return _internal_mutable_identity_key();
}
inline const std::string& NodeUpdate::_internal_identity_key() const {
  return identity_key_.GetNoArena();
}
inline void NodeUpdate::_internal_set_identity_key(const std::string& value) {
  
  identity_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeUpdate::set_identity_key(std::string&& value) {
  
  identity_key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeUpdate.identity_key)
}
inline void NodeUpdate::set_identity_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identity_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeUpdate.identity_key)
}
inline void NodeUpdate::set_identity_key(const char* value, size_t size) {
  
  identity_key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeUpdate.identity_key)
}
inline std::string* NodeUpdate::_internal_mutable_identity_key() {
  
  return identity_key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeUpdate::release_identity_key() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeUpdate.identity_key)
  
  return identity_key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUpdate::set_allocated_identity_key(std::string* identity_key) {
  if (identity_key != nullptr) {
    
  } else {
    
  }
  identity_key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identity_key);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeUpdate.identity_key)
}

// bytes global_features = 3 [deprecated = true];
inline void NodeUpdate::clear_global_features() {
  global_features_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeUpdate::global_features() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeUpdate.global_features)
  return _internal_global_features();
}
inline void NodeUpdate::set_global_features(const std::string& value) {
  _internal_set_global_features(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.global_features)
}
inline std::string* NodeUpdate::mutable_global_features() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeUpdate.global_features)
  return _internal_mutable_global_features();
}
inline const std::string& NodeUpdate::_internal_global_features() const {
  return global_features_.GetNoArena();
}
inline void NodeUpdate::_internal_set_global_features(const std::string& value) {
  
  global_features_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeUpdate::set_global_features(std::string&& value) {
  
  global_features_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeUpdate.global_features)
}
inline void NodeUpdate::set_global_features(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  global_features_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeUpdate.global_features)
}
inline void NodeUpdate::set_global_features(const void* value, size_t size) {
  
  global_features_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeUpdate.global_features)
}
inline std::string* NodeUpdate::_internal_mutable_global_features() {
  
  return global_features_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeUpdate::release_global_features() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeUpdate.global_features)
  
  return global_features_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUpdate::set_allocated_global_features(std::string* global_features) {
  if (global_features != nullptr) {
    
  } else {
    
  }
  global_features_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), global_features);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeUpdate.global_features)
}

// string alias = 4;
inline void NodeUpdate::clear_alias() {
  alias_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeUpdate::alias() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeUpdate.alias)
  return _internal_alias();
}
inline void NodeUpdate::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.alias)
}
inline std::string* NodeUpdate::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeUpdate.alias)
  return _internal_mutable_alias();
}
inline const std::string& NodeUpdate::_internal_alias() const {
  return alias_.GetNoArena();
}
inline void NodeUpdate::_internal_set_alias(const std::string& value) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeUpdate::set_alias(std::string&& value) {
  
  alias_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeUpdate.alias)
}
inline void NodeUpdate::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeUpdate.alias)
}
inline void NodeUpdate::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeUpdate.alias)
}
inline std::string* NodeUpdate::_internal_mutable_alias() {
  
  return alias_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeUpdate::release_alias() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeUpdate.alias)
  
  return alias_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUpdate::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeUpdate.alias)
}

// string color = 5;
inline void NodeUpdate::clear_color() {
  color_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeUpdate::color() const {
  // @@protoc_insertion_point(field_get:lnrpc.NodeUpdate.color)
  return _internal_color();
}
inline void NodeUpdate::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:lnrpc.NodeUpdate.color)
}
inline std::string* NodeUpdate::mutable_color() {
  // @@protoc_insertion_point(field_mutable:lnrpc.NodeUpdate.color)
  return _internal_mutable_color();
}
inline const std::string& NodeUpdate::_internal_color() const {
  return color_.GetNoArena();
}
inline void NodeUpdate::_internal_set_color(const std::string& value) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NodeUpdate::set_color(std::string&& value) {
  
  color_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.NodeUpdate.color)
}
inline void NodeUpdate::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.NodeUpdate.color)
}
inline void NodeUpdate::set_color(const char* value, size_t size) {
  
  color_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.NodeUpdate.color)
}
inline std::string* NodeUpdate::_internal_mutable_color() {
  
  return color_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeUpdate::release_color() {
  // @@protoc_insertion_point(field_release:lnrpc.NodeUpdate.color)
  
  return color_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeUpdate::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.NodeUpdate.color)
}

// map<uint32, .lnrpc.Feature> features = 6;
inline int NodeUpdate::_internal_features_size() const {
  return features_.size();
}
inline int NodeUpdate::features_size() const {
  return _internal_features_size();
}
inline void NodeUpdate::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
NodeUpdate::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
NodeUpdate::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.NodeUpdate.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
NodeUpdate::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
NodeUpdate::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.NodeUpdate.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// ChannelEdgeUpdate

// uint64 chan_id = 1 [jstype = JS_STRING];
inline void ChannelEdgeUpdate::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelEdgeUpdate::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelEdgeUpdate::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.chan_id)
  return _internal_chan_id();
}
inline void ChannelEdgeUpdate::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ChannelEdgeUpdate::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdgeUpdate.chan_id)
}

// .lnrpc.ChannelPoint chan_point = 2;
inline bool ChannelEdgeUpdate::_internal_has_chan_point() const {
  return this != internal_default_instance() && chan_point_ != nullptr;
}
inline bool ChannelEdgeUpdate::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void ChannelEdgeUpdate::clear_chan_point() {
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ChannelEdgeUpdate::_internal_chan_point() const {
  const ::lnrpc::ChannelPoint* p = chan_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChannelEdgeUpdate::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* ChannelEdgeUpdate::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdgeUpdate.chan_point)
  
  ::lnrpc::ChannelPoint* temp = chan_point_;
  chan_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ChannelEdgeUpdate::_internal_mutable_chan_point() {
  
  if (chan_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    chan_point_ = p;
  }
  return chan_point_;
}
inline ::lnrpc::ChannelPoint* ChannelEdgeUpdate::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdgeUpdate.chan_point)
  return _internal_mutable_chan_point();
}
inline void ChannelEdgeUpdate::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chan_point_;
  }
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    
  } else {
    
  }
  chan_point_ = chan_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdgeUpdate.chan_point)
}

// int64 capacity = 3;
inline void ChannelEdgeUpdate::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelEdgeUpdate::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelEdgeUpdate::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.capacity)
  return _internal_capacity();
}
inline void ChannelEdgeUpdate::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void ChannelEdgeUpdate::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdgeUpdate.capacity)
}

// .lnrpc.RoutingPolicy routing_policy = 4;
inline bool ChannelEdgeUpdate::_internal_has_routing_policy() const {
  return this != internal_default_instance() && routing_policy_ != nullptr;
}
inline bool ChannelEdgeUpdate::has_routing_policy() const {
  return _internal_has_routing_policy();
}
inline void ChannelEdgeUpdate::clear_routing_policy() {
  if (GetArenaNoVirtual() == nullptr && routing_policy_ != nullptr) {
    delete routing_policy_;
  }
  routing_policy_ = nullptr;
}
inline const ::lnrpc::RoutingPolicy& ChannelEdgeUpdate::_internal_routing_policy() const {
  const ::lnrpc::RoutingPolicy* p = routing_policy_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::RoutingPolicy*>(
      &::lnrpc::_RoutingPolicy_default_instance_);
}
inline const ::lnrpc::RoutingPolicy& ChannelEdgeUpdate::routing_policy() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.routing_policy)
  return _internal_routing_policy();
}
inline ::lnrpc::RoutingPolicy* ChannelEdgeUpdate::release_routing_policy() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdgeUpdate.routing_policy)
  
  ::lnrpc::RoutingPolicy* temp = routing_policy_;
  routing_policy_ = nullptr;
  return temp;
}
inline ::lnrpc::RoutingPolicy* ChannelEdgeUpdate::_internal_mutable_routing_policy() {
  
  if (routing_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::RoutingPolicy>(GetArenaNoVirtual());
    routing_policy_ = p;
  }
  return routing_policy_;
}
inline ::lnrpc::RoutingPolicy* ChannelEdgeUpdate::mutable_routing_policy() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdgeUpdate.routing_policy)
  return _internal_mutable_routing_policy();
}
inline void ChannelEdgeUpdate::set_allocated_routing_policy(::lnrpc::RoutingPolicy* routing_policy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete routing_policy_;
  }
  if (routing_policy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      routing_policy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_policy, submessage_arena);
    }
    
  } else {
    
  }
  routing_policy_ = routing_policy;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdgeUpdate.routing_policy)
}

// string advertising_node = 5;
inline void ChannelEdgeUpdate::clear_advertising_node() {
  advertising_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelEdgeUpdate::advertising_node() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.advertising_node)
  return _internal_advertising_node();
}
inline void ChannelEdgeUpdate::set_advertising_node(const std::string& value) {
  _internal_set_advertising_node(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdgeUpdate.advertising_node)
}
inline std::string* ChannelEdgeUpdate::mutable_advertising_node() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdgeUpdate.advertising_node)
  return _internal_mutable_advertising_node();
}
inline const std::string& ChannelEdgeUpdate::_internal_advertising_node() const {
  return advertising_node_.GetNoArena();
}
inline void ChannelEdgeUpdate::_internal_set_advertising_node(const std::string& value) {
  
  advertising_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelEdgeUpdate::set_advertising_node(std::string&& value) {
  
  advertising_node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelEdgeUpdate.advertising_node)
}
inline void ChannelEdgeUpdate::set_advertising_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  advertising_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelEdgeUpdate.advertising_node)
}
inline void ChannelEdgeUpdate::set_advertising_node(const char* value, size_t size) {
  
  advertising_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelEdgeUpdate.advertising_node)
}
inline std::string* ChannelEdgeUpdate::_internal_mutable_advertising_node() {
  
  return advertising_node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelEdgeUpdate::release_advertising_node() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdgeUpdate.advertising_node)
  
  return advertising_node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelEdgeUpdate::set_allocated_advertising_node(std::string* advertising_node) {
  if (advertising_node != nullptr) {
    
  } else {
    
  }
  advertising_node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), advertising_node);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdgeUpdate.advertising_node)
}

// string connecting_node = 6;
inline void ChannelEdgeUpdate::clear_connecting_node() {
  connecting_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelEdgeUpdate::connecting_node() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelEdgeUpdate.connecting_node)
  return _internal_connecting_node();
}
inline void ChannelEdgeUpdate::set_connecting_node(const std::string& value) {
  _internal_set_connecting_node(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelEdgeUpdate.connecting_node)
}
inline std::string* ChannelEdgeUpdate::mutable_connecting_node() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelEdgeUpdate.connecting_node)
  return _internal_mutable_connecting_node();
}
inline const std::string& ChannelEdgeUpdate::_internal_connecting_node() const {
  return connecting_node_.GetNoArena();
}
inline void ChannelEdgeUpdate::_internal_set_connecting_node(const std::string& value) {
  
  connecting_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelEdgeUpdate::set_connecting_node(std::string&& value) {
  
  connecting_node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelEdgeUpdate.connecting_node)
}
inline void ChannelEdgeUpdate::set_connecting_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connecting_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelEdgeUpdate.connecting_node)
}
inline void ChannelEdgeUpdate::set_connecting_node(const char* value, size_t size) {
  
  connecting_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelEdgeUpdate.connecting_node)
}
inline std::string* ChannelEdgeUpdate::_internal_mutable_connecting_node() {
  
  return connecting_node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelEdgeUpdate::release_connecting_node() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelEdgeUpdate.connecting_node)
  
  return connecting_node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelEdgeUpdate::set_allocated_connecting_node(std::string* connecting_node) {
  if (connecting_node != nullptr) {
    
  } else {
    
  }
  connecting_node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connecting_node);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelEdgeUpdate.connecting_node)
}

// -------------------------------------------------------------------

// ClosedChannelUpdate

// uint64 chan_id = 1 [jstype = JS_STRING];
inline void ClosedChannelUpdate::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClosedChannelUpdate::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ClosedChannelUpdate::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelUpdate.chan_id)
  return _internal_chan_id();
}
inline void ClosedChannelUpdate::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ClosedChannelUpdate::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelUpdate.chan_id)
}

// int64 capacity = 2;
inline void ClosedChannelUpdate::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClosedChannelUpdate::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ClosedChannelUpdate::capacity() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelUpdate.capacity)
  return _internal_capacity();
}
inline void ClosedChannelUpdate::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void ClosedChannelUpdate::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelUpdate.capacity)
}

// uint32 closed_height = 3;
inline void ClosedChannelUpdate::clear_closed_height() {
  closed_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClosedChannelUpdate::_internal_closed_height() const {
  return closed_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ClosedChannelUpdate::closed_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelUpdate.closed_height)
  return _internal_closed_height();
}
inline void ClosedChannelUpdate::_internal_set_closed_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  closed_height_ = value;
}
inline void ClosedChannelUpdate::set_closed_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_closed_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.ClosedChannelUpdate.closed_height)
}

// .lnrpc.ChannelPoint chan_point = 4;
inline bool ClosedChannelUpdate::_internal_has_chan_point() const {
  return this != internal_default_instance() && chan_point_ != nullptr;
}
inline bool ClosedChannelUpdate::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void ClosedChannelUpdate::clear_chan_point() {
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ClosedChannelUpdate::_internal_chan_point() const {
  const ::lnrpc::ChannelPoint* p = chan_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ClosedChannelUpdate::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ClosedChannelUpdate.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* ClosedChannelUpdate::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ClosedChannelUpdate.chan_point)
  
  ::lnrpc::ChannelPoint* temp = chan_point_;
  chan_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ClosedChannelUpdate::_internal_mutable_chan_point() {
  
  if (chan_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    chan_point_ = p;
  }
  return chan_point_;
}
inline ::lnrpc::ChannelPoint* ClosedChannelUpdate::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ClosedChannelUpdate.chan_point)
  return _internal_mutable_chan_point();
}
inline void ClosedChannelUpdate::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chan_point_;
  }
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    
  } else {
    
  }
  chan_point_ = chan_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ClosedChannelUpdate.chan_point)
}

// -------------------------------------------------------------------

// HopHint

// string node_id = 1;
inline void HopHint::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HopHint::node_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.HopHint.node_id)
  return _internal_node_id();
}
inline void HopHint::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.HopHint.node_id)
}
inline std::string* HopHint::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.HopHint.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& HopHint::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void HopHint::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HopHint::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.HopHint.node_id)
}
inline void HopHint::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.HopHint.node_id)
}
inline void HopHint::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.HopHint.node_id)
}
inline std::string* HopHint::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HopHint::release_node_id() {
  // @@protoc_insertion_point(field_release:lnrpc.HopHint.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HopHint::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.HopHint.node_id)
}

// uint64 chan_id = 2 [jstype = JS_STRING];
inline void HopHint::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HopHint::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HopHint::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.HopHint.chan_id)
  return _internal_chan_id();
}
inline void HopHint::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void HopHint::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.HopHint.chan_id)
}

// uint32 fee_base_msat = 3;
inline void HopHint::clear_fee_base_msat() {
  fee_base_msat_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::_internal_fee_base_msat() const {
  return fee_base_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::fee_base_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.HopHint.fee_base_msat)
  return _internal_fee_base_msat();
}
inline void HopHint::_internal_set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fee_base_msat_ = value;
}
inline void HopHint::set_fee_base_msat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fee_base_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.HopHint.fee_base_msat)
}

// uint32 fee_proportional_millionths = 4;
inline void HopHint::clear_fee_proportional_millionths() {
  fee_proportional_millionths_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::_internal_fee_proportional_millionths() const {
  return fee_proportional_millionths_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::fee_proportional_millionths() const {
  // @@protoc_insertion_point(field_get:lnrpc.HopHint.fee_proportional_millionths)
  return _internal_fee_proportional_millionths();
}
inline void HopHint::_internal_set_fee_proportional_millionths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fee_proportional_millionths_ = value;
}
inline void HopHint::set_fee_proportional_millionths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fee_proportional_millionths(value);
  // @@protoc_insertion_point(field_set:lnrpc.HopHint.fee_proportional_millionths)
}

// uint32 cltv_expiry_delta = 5;
inline void HopHint::clear_cltv_expiry_delta() {
  cltv_expiry_delta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::_internal_cltv_expiry_delta() const {
  return cltv_expiry_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HopHint::cltv_expiry_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.HopHint.cltv_expiry_delta)
  return _internal_cltv_expiry_delta();
}
inline void HopHint::_internal_set_cltv_expiry_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cltv_expiry_delta_ = value;
}
inline void HopHint::set_cltv_expiry_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cltv_expiry_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.HopHint.cltv_expiry_delta)
}

// -------------------------------------------------------------------

// RouteHint

// repeated .lnrpc.HopHint hop_hints = 1;
inline int RouteHint::_internal_hop_hints_size() const {
  return hop_hints_.size();
}
inline int RouteHint::hop_hints_size() const {
  return _internal_hop_hints_size();
}
inline void RouteHint::clear_hop_hints() {
  hop_hints_.Clear();
}
inline ::lnrpc::HopHint* RouteHint::mutable_hop_hints(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.RouteHint.hop_hints)
  return hop_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HopHint >*
RouteHint::mutable_hop_hints() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.RouteHint.hop_hints)
  return &hop_hints_;
}
inline const ::lnrpc::HopHint& RouteHint::_internal_hop_hints(int index) const {
  return hop_hints_.Get(index);
}
inline const ::lnrpc::HopHint& RouteHint::hop_hints(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.RouteHint.hop_hints)
  return _internal_hop_hints(index);
}
inline ::lnrpc::HopHint* RouteHint::_internal_add_hop_hints() {
  return hop_hints_.Add();
}
inline ::lnrpc::HopHint* RouteHint::add_hop_hints() {
  // @@protoc_insertion_point(field_add:lnrpc.RouteHint.hop_hints)
  return _internal_add_hop_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HopHint >&
RouteHint::hop_hints() const {
  // @@protoc_insertion_point(field_list:lnrpc.RouteHint.hop_hints)
  return hop_hints_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Invoice

// string memo = 1;
inline void Invoice::clear_memo() {
  memo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::memo() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.memo)
  return _internal_memo();
}
inline void Invoice::set_memo(const std::string& value) {
  _internal_set_memo(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.memo)
}
inline std::string* Invoice::mutable_memo() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.memo)
  return _internal_mutable_memo();
}
inline const std::string& Invoice::_internal_memo() const {
  return memo_.GetNoArena();
}
inline void Invoice::_internal_set_memo(const std::string& value) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_memo(std::string&& value) {
  
  memo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.memo)
}
inline void Invoice::set_memo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.memo)
}
inline void Invoice::set_memo(const char* value, size_t size) {
  
  memo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.memo)
}
inline std::string* Invoice::_internal_mutable_memo() {
  
  return memo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_memo() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.memo)
  
  return memo_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_memo(std::string* memo) {
  if (memo != nullptr) {
    
  } else {
    
  }
  memo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memo);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.memo)
}

// bytes r_preimage = 3;
inline void Invoice::clear_r_preimage() {
  r_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::r_preimage() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.r_preimage)
  return _internal_r_preimage();
}
inline void Invoice::set_r_preimage(const std::string& value) {
  _internal_set_r_preimage(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.r_preimage)
}
inline std::string* Invoice::mutable_r_preimage() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.r_preimage)
  return _internal_mutable_r_preimage();
}
inline const std::string& Invoice::_internal_r_preimage() const {
  return r_preimage_.GetNoArena();
}
inline void Invoice::_internal_set_r_preimage(const std::string& value) {
  
  r_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_r_preimage(std::string&& value) {
  
  r_preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.r_preimage)
}
inline void Invoice::set_r_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.r_preimage)
}
inline void Invoice::set_r_preimage(const void* value, size_t size) {
  
  r_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.r_preimage)
}
inline std::string* Invoice::_internal_mutable_r_preimage() {
  
  return r_preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_r_preimage() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.r_preimage)
  
  return r_preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_r_preimage(std::string* r_preimage) {
  if (r_preimage != nullptr) {
    
  } else {
    
  }
  r_preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_preimage);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.r_preimage)
}

// bytes r_hash = 4;
inline void Invoice::clear_r_hash() {
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::r_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.r_hash)
  return _internal_r_hash();
}
inline void Invoice::set_r_hash(const std::string& value) {
  _internal_set_r_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.r_hash)
}
inline std::string* Invoice::mutable_r_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.r_hash)
  return _internal_mutable_r_hash();
}
inline const std::string& Invoice::_internal_r_hash() const {
  return r_hash_.GetNoArena();
}
inline void Invoice::_internal_set_r_hash(const std::string& value) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_r_hash(std::string&& value) {
  
  r_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.r_hash)
}
inline void Invoice::set_r_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.r_hash)
}
inline void Invoice::set_r_hash(const void* value, size_t size) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.r_hash)
}
inline std::string* Invoice::_internal_mutable_r_hash() {
  
  return r_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_r_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.r_hash)
  
  return r_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_r_hash(std::string* r_hash) {
  if (r_hash != nullptr) {
    
  } else {
    
  }
  r_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.r_hash)
}

// int64 value = 5;
inline void Invoice::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::value() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.value)
  return _internal_value();
}
inline void Invoice::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Invoice::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.value)
}

// int64 value_msat = 23;
inline void Invoice::clear_value_msat() {
  value_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_value_msat() const {
  return value_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::value_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.value_msat)
  return _internal_value_msat();
}
inline void Invoice::_internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_msat_ = value;
}
inline void Invoice::set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.value_msat)
}

// bool settled = 6 [deprecated = true];
inline void Invoice::clear_settled() {
  settled_ = false;
}
inline bool Invoice::_internal_settled() const {
  return settled_;
}
inline bool Invoice::settled() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.settled)
  return _internal_settled();
}
inline void Invoice::_internal_set_settled(bool value) {
  
  settled_ = value;
}
inline void Invoice::set_settled(bool value) {
  _internal_set_settled(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.settled)
}

// int64 creation_date = 7;
inline void Invoice::clear_creation_date() {
  creation_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_creation_date() const {
  return creation_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::creation_date() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.creation_date)
  return _internal_creation_date();
}
inline void Invoice::_internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_date_ = value;
}
inline void Invoice::set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.creation_date)
}

// int64 settle_date = 8;
inline void Invoice::clear_settle_date() {
  settle_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_settle_date() const {
  return settle_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::settle_date() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.settle_date)
  return _internal_settle_date();
}
inline void Invoice::_internal_set_settle_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  settle_date_ = value;
}
inline void Invoice::set_settle_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_settle_date(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.settle_date)
}

// string payment_request = 9;
inline void Invoice::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::payment_request() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.payment_request)
  return _internal_payment_request();
}
inline void Invoice::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.payment_request)
}
inline std::string* Invoice::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& Invoice::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void Invoice::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.payment_request)
}
inline void Invoice::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.payment_request)
}
inline void Invoice::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.payment_request)
}
inline std::string* Invoice::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_payment_request() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.payment_request)
}

// bytes description_hash = 10;
inline void Invoice::clear_description_hash() {
  description_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::description_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.description_hash)
  return _internal_description_hash();
}
inline void Invoice::set_description_hash(const std::string& value) {
  _internal_set_description_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.description_hash)
}
inline std::string* Invoice::mutable_description_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.description_hash)
  return _internal_mutable_description_hash();
}
inline const std::string& Invoice::_internal_description_hash() const {
  return description_hash_.GetNoArena();
}
inline void Invoice::_internal_set_description_hash(const std::string& value) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_description_hash(std::string&& value) {
  
  description_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.description_hash)
}
inline void Invoice::set_description_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.description_hash)
}
inline void Invoice::set_description_hash(const void* value, size_t size) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.description_hash)
}
inline std::string* Invoice::_internal_mutable_description_hash() {
  
  return description_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_description_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.description_hash)
  
  return description_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_description_hash(std::string* description_hash) {
  if (description_hash != nullptr) {
    
  } else {
    
  }
  description_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.description_hash)
}

// int64 expiry = 11;
inline void Invoice::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.expiry)
  return _internal_expiry();
}
inline void Invoice::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void Invoice::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.expiry)
}

// string fallback_addr = 12;
inline void Invoice::clear_fallback_addr() {
  fallback_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::fallback_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.fallback_addr)
  return _internal_fallback_addr();
}
inline void Invoice::set_fallback_addr(const std::string& value) {
  _internal_set_fallback_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.fallback_addr)
}
inline std::string* Invoice::mutable_fallback_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.fallback_addr)
  return _internal_mutable_fallback_addr();
}
inline const std::string& Invoice::_internal_fallback_addr() const {
  return fallback_addr_.GetNoArena();
}
inline void Invoice::_internal_set_fallback_addr(const std::string& value) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_fallback_addr(std::string&& value) {
  
  fallback_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.fallback_addr)
}
inline void Invoice::set_fallback_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.fallback_addr)
}
inline void Invoice::set_fallback_addr(const char* value, size_t size) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.fallback_addr)
}
inline std::string* Invoice::_internal_mutable_fallback_addr() {
  
  return fallback_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_fallback_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.fallback_addr)
  
  return fallback_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_fallback_addr(std::string* fallback_addr) {
  if (fallback_addr != nullptr) {
    
  } else {
    
  }
  fallback_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.fallback_addr)
}

// uint64 cltv_expiry = 13;
inline void Invoice::clear_cltv_expiry() {
  cltv_expiry_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::_internal_cltv_expiry() const {
  return cltv_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::cltv_expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.cltv_expiry)
  return _internal_cltv_expiry();
}
inline void Invoice::_internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  cltv_expiry_ = value;
}
inline void Invoice::set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_cltv_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.cltv_expiry)
}

// repeated .lnrpc.RouteHint route_hints = 14;
inline int Invoice::_internal_route_hints_size() const {
  return route_hints_.size();
}
inline int Invoice::route_hints_size() const {
  return _internal_route_hints_size();
}
inline void Invoice::clear_route_hints() {
  route_hints_.Clear();
}
inline ::lnrpc::RouteHint* Invoice::mutable_route_hints(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.route_hints)
  return route_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
Invoice::mutable_route_hints() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Invoice.route_hints)
  return &route_hints_;
}
inline const ::lnrpc::RouteHint& Invoice::_internal_route_hints(int index) const {
  return route_hints_.Get(index);
}
inline const ::lnrpc::RouteHint& Invoice::route_hints(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.route_hints)
  return _internal_route_hints(index);
}
inline ::lnrpc::RouteHint* Invoice::_internal_add_route_hints() {
  return route_hints_.Add();
}
inline ::lnrpc::RouteHint* Invoice::add_route_hints() {
  // @@protoc_insertion_point(field_add:lnrpc.Invoice.route_hints)
  return _internal_add_route_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
Invoice::route_hints() const {
  // @@protoc_insertion_point(field_list:lnrpc.Invoice.route_hints)
  return route_hints_;
}

// bool private = 15;
inline void Invoice::clear_private_() {
  private__ = false;
}
inline bool Invoice::_internal_private_() const {
  return private__;
}
inline bool Invoice::private_() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.private)
  return _internal_private_();
}
inline void Invoice::_internal_set_private_(bool value) {
  
  private__ = value;
}
inline void Invoice::set_private_(bool value) {
  _internal_set_private_(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.private)
}

// uint64 add_index = 16;
inline void Invoice::clear_add_index() {
  add_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::_internal_add_index() const {
  return add_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::add_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.add_index)
  return _internal_add_index();
}
inline void Invoice::_internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  add_index_ = value;
}
inline void Invoice::set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_add_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.add_index)
}

// uint64 settle_index = 17;
inline void Invoice::clear_settle_index() {
  settle_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::_internal_settle_index() const {
  return settle_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Invoice::settle_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.settle_index)
  return _internal_settle_index();
}
inline void Invoice::_internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  settle_index_ = value;
}
inline void Invoice::set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_settle_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.settle_index)
}

// int64 amt_paid = 18 [deprecated = true];
inline void Invoice::clear_amt_paid() {
  amt_paid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_amt_paid() const {
  return amt_paid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::amt_paid() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.amt_paid)
  return _internal_amt_paid();
}
inline void Invoice::_internal_set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_paid_ = value;
}
inline void Invoice::set_amt_paid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_paid(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.amt_paid)
}

// int64 amt_paid_sat = 19;
inline void Invoice::clear_amt_paid_sat() {
  amt_paid_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_amt_paid_sat() const {
  return amt_paid_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::amt_paid_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.amt_paid_sat)
  return _internal_amt_paid_sat();
}
inline void Invoice::_internal_set_amt_paid_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_paid_sat_ = value;
}
inline void Invoice::set_amt_paid_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_paid_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.amt_paid_sat)
}

// int64 amt_paid_msat = 20;
inline void Invoice::clear_amt_paid_msat() {
  amt_paid_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::_internal_amt_paid_msat() const {
  return amt_paid_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Invoice::amt_paid_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.amt_paid_msat)
  return _internal_amt_paid_msat();
}
inline void Invoice::_internal_set_amt_paid_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_paid_msat_ = value;
}
inline void Invoice::set_amt_paid_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_paid_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.amt_paid_msat)
}

// .lnrpc.Invoice.InvoiceState state = 21;
inline void Invoice::clear_state() {
  state_ = 0;
}
inline ::lnrpc::Invoice_InvoiceState Invoice::_internal_state() const {
  return static_cast< ::lnrpc::Invoice_InvoiceState >(state_);
}
inline ::lnrpc::Invoice_InvoiceState Invoice::state() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.state)
  return _internal_state();
}
inline void Invoice::_internal_set_state(::lnrpc::Invoice_InvoiceState value) {
  
  state_ = value;
}
inline void Invoice::set_state(::lnrpc::Invoice_InvoiceState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.state)
}

// repeated .lnrpc.InvoiceHTLC htlcs = 22;
inline int Invoice::_internal_htlcs_size() const {
  return htlcs_.size();
}
inline int Invoice::htlcs_size() const {
  return _internal_htlcs_size();
}
inline void Invoice::clear_htlcs() {
  htlcs_.Clear();
}
inline ::lnrpc::InvoiceHTLC* Invoice::mutable_htlcs(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.htlcs)
  return htlcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::InvoiceHTLC >*
Invoice::mutable_htlcs() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Invoice.htlcs)
  return &htlcs_;
}
inline const ::lnrpc::InvoiceHTLC& Invoice::_internal_htlcs(int index) const {
  return htlcs_.Get(index);
}
inline const ::lnrpc::InvoiceHTLC& Invoice::htlcs(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.htlcs)
  return _internal_htlcs(index);
}
inline ::lnrpc::InvoiceHTLC* Invoice::_internal_add_htlcs() {
  return htlcs_.Add();
}
inline ::lnrpc::InvoiceHTLC* Invoice::add_htlcs() {
  // @@protoc_insertion_point(field_add:lnrpc.Invoice.htlcs)
  return _internal_add_htlcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::InvoiceHTLC >&
Invoice::htlcs() const {
  // @@protoc_insertion_point(field_list:lnrpc.Invoice.htlcs)
  return htlcs_;
}

// map<uint32, .lnrpc.Feature> features = 24;
inline int Invoice::_internal_features_size() const {
  return features_.size();
}
inline int Invoice::features_size() const {
  return _internal_features_size();
}
inline void Invoice::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
Invoice::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
Invoice::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.Invoice.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
Invoice::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
Invoice::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.Invoice.features)
  return _internal_mutable_features();
}

// bool is_keysend = 25;
inline void Invoice::clear_is_keysend() {
  is_keysend_ = false;
}
inline bool Invoice::_internal_is_keysend() const {
  return is_keysend_;
}
inline bool Invoice::is_keysend() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.is_keysend)
  return _internal_is_keysend();
}
inline void Invoice::_internal_set_is_keysend(bool value) {
  
  is_keysend_ = value;
}
inline void Invoice::set_is_keysend(bool value) {
  _internal_set_is_keysend(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.is_keysend)
}

// bytes payment_addr = 26;
inline void Invoice::clear_payment_addr() {
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Invoice::payment_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.Invoice.payment_addr)
  return _internal_payment_addr();
}
inline void Invoice::set_payment_addr(const std::string& value) {
  _internal_set_payment_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.Invoice.payment_addr)
}
inline std::string* Invoice::mutable_payment_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Invoice.payment_addr)
  return _internal_mutable_payment_addr();
}
inline const std::string& Invoice::_internal_payment_addr() const {
  return payment_addr_.GetNoArena();
}
inline void Invoice::_internal_set_payment_addr(const std::string& value) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Invoice::set_payment_addr(std::string&& value) {
  
  payment_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Invoice.payment_addr)
}
inline void Invoice::set_payment_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Invoice.payment_addr)
}
inline void Invoice::set_payment_addr(const void* value, size_t size) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Invoice.payment_addr)
}
inline std::string* Invoice::_internal_mutable_payment_addr() {
  
  return payment_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Invoice::release_payment_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.Invoice.payment_addr)
  
  return payment_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Invoice::set_allocated_payment_addr(std::string* payment_addr) {
  if (payment_addr != nullptr) {
    
  } else {
    
  }
  payment_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Invoice.payment_addr)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InvoiceHTLC

// uint64 chan_id = 1 [jstype = JS_STRING];
inline void InvoiceHTLC::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.chan_id)
  return _internal_chan_id();
}
inline void InvoiceHTLC::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void InvoiceHTLC::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.chan_id)
}

// uint64 htlc_index = 2;
inline void InvoiceHTLC::clear_htlc_index() {
  htlc_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::_internal_htlc_index() const {
  return htlc_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::htlc_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.htlc_index)
  return _internal_htlc_index();
}
inline void InvoiceHTLC::_internal_set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  htlc_index_ = value;
}
inline void InvoiceHTLC::set_htlc_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_htlc_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.htlc_index)
}

// uint64 amt_msat = 3;
inline void InvoiceHTLC::clear_amt_msat() {
  amt_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.amt_msat)
  return _internal_amt_msat();
}
inline void InvoiceHTLC::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amt_msat_ = value;
}
inline void InvoiceHTLC::set_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.amt_msat)
}

// int32 accept_height = 4;
inline void InvoiceHTLC::clear_accept_height() {
  accept_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvoiceHTLC::_internal_accept_height() const {
  return accept_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvoiceHTLC::accept_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.accept_height)
  return _internal_accept_height();
}
inline void InvoiceHTLC::_internal_set_accept_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  accept_height_ = value;
}
inline void InvoiceHTLC::set_accept_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accept_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.accept_height)
}

// int64 accept_time = 5;
inline void InvoiceHTLC::clear_accept_time() {
  accept_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvoiceHTLC::_internal_accept_time() const {
  return accept_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvoiceHTLC::accept_time() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.accept_time)
  return _internal_accept_time();
}
inline void InvoiceHTLC::_internal_set_accept_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  accept_time_ = value;
}
inline void InvoiceHTLC::set_accept_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_accept_time(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.accept_time)
}

// int64 resolve_time = 6;
inline void InvoiceHTLC::clear_resolve_time() {
  resolve_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvoiceHTLC::_internal_resolve_time() const {
  return resolve_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 InvoiceHTLC::resolve_time() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.resolve_time)
  return _internal_resolve_time();
}
inline void InvoiceHTLC::_internal_set_resolve_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resolve_time_ = value;
}
inline void InvoiceHTLC::set_resolve_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resolve_time(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.resolve_time)
}

// int32 expiry_height = 7;
inline void InvoiceHTLC::clear_expiry_height() {
  expiry_height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvoiceHTLC::_internal_expiry_height() const {
  return expiry_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InvoiceHTLC::expiry_height() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.expiry_height)
  return _internal_expiry_height();
}
inline void InvoiceHTLC::_internal_set_expiry_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expiry_height_ = value;
}
inline void InvoiceHTLC::set_expiry_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expiry_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.expiry_height)
}

// .lnrpc.InvoiceHTLCState state = 8;
inline void InvoiceHTLC::clear_state() {
  state_ = 0;
}
inline ::lnrpc::InvoiceHTLCState InvoiceHTLC::_internal_state() const {
  return static_cast< ::lnrpc::InvoiceHTLCState >(state_);
}
inline ::lnrpc::InvoiceHTLCState InvoiceHTLC::state() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.state)
  return _internal_state();
}
inline void InvoiceHTLC::_internal_set_state(::lnrpc::InvoiceHTLCState value) {
  
  state_ = value;
}
inline void InvoiceHTLC::set_state(::lnrpc::InvoiceHTLCState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.state)
}

// map<uint64, bytes> custom_records = 9;
inline int InvoiceHTLC::_internal_custom_records_size() const {
  return custom_records_.size();
}
inline int InvoiceHTLC::custom_records_size() const {
  return _internal_custom_records_size();
}
inline void InvoiceHTLC::clear_custom_records() {
  custom_records_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
InvoiceHTLC::_internal_custom_records() const {
  return custom_records_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
InvoiceHTLC::custom_records() const {
  // @@protoc_insertion_point(field_map:lnrpc.InvoiceHTLC.custom_records)
  return _internal_custom_records();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
InvoiceHTLC::_internal_mutable_custom_records() {
  return custom_records_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
InvoiceHTLC::mutable_custom_records() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.InvoiceHTLC.custom_records)
  return _internal_mutable_custom_records();
}

// uint64 mpp_total_amt_msat = 10;
inline void InvoiceHTLC::clear_mpp_total_amt_msat() {
  mpp_total_amt_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::_internal_mpp_total_amt_msat() const {
  return mpp_total_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceHTLC::mpp_total_amt_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.mpp_total_amt_msat)
  return _internal_mpp_total_amt_msat();
}
inline void InvoiceHTLC::_internal_set_mpp_total_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  mpp_total_amt_msat_ = value;
}
inline void InvoiceHTLC::set_mpp_total_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mpp_total_amt_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceHTLC.mpp_total_amt_msat)
}

// .lnrpc.AMP amp = 11;
inline bool InvoiceHTLC::_internal_has_amp() const {
  return this != internal_default_instance() && amp_ != nullptr;
}
inline bool InvoiceHTLC::has_amp() const {
  return _internal_has_amp();
}
inline void InvoiceHTLC::clear_amp() {
  if (GetArenaNoVirtual() == nullptr && amp_ != nullptr) {
    delete amp_;
  }
  amp_ = nullptr;
}
inline const ::lnrpc::AMP& InvoiceHTLC::_internal_amp() const {
  const ::lnrpc::AMP* p = amp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::AMP*>(
      &::lnrpc::_AMP_default_instance_);
}
inline const ::lnrpc::AMP& InvoiceHTLC::amp() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceHTLC.amp)
  return _internal_amp();
}
inline ::lnrpc::AMP* InvoiceHTLC::release_amp() {
  // @@protoc_insertion_point(field_release:lnrpc.InvoiceHTLC.amp)
  
  ::lnrpc::AMP* temp = amp_;
  amp_ = nullptr;
  return temp;
}
inline ::lnrpc::AMP* InvoiceHTLC::_internal_mutable_amp() {
  
  if (amp_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::AMP>(GetArenaNoVirtual());
    amp_ = p;
  }
  return amp_;
}
inline ::lnrpc::AMP* InvoiceHTLC::mutable_amp() {
  // @@protoc_insertion_point(field_mutable:lnrpc.InvoiceHTLC.amp)
  return _internal_mutable_amp();
}
inline void InvoiceHTLC::set_allocated_amp(::lnrpc::AMP* amp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amp_;
  }
  if (amp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amp, submessage_arena);
    }
    
  } else {
    
  }
  amp_ = amp;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.InvoiceHTLC.amp)
}

// -------------------------------------------------------------------

// AMP

// bytes root_share = 1;
inline void AMP::clear_root_share() {
  root_share_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMP::root_share() const {
  // @@protoc_insertion_point(field_get:lnrpc.AMP.root_share)
  return _internal_root_share();
}
inline void AMP::set_root_share(const std::string& value) {
  _internal_set_root_share(value);
  // @@protoc_insertion_point(field_set:lnrpc.AMP.root_share)
}
inline std::string* AMP::mutable_root_share() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AMP.root_share)
  return _internal_mutable_root_share();
}
inline const std::string& AMP::_internal_root_share() const {
  return root_share_.GetNoArena();
}
inline void AMP::_internal_set_root_share(const std::string& value) {
  
  root_share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AMP::set_root_share(std::string&& value) {
  
  root_share_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AMP.root_share)
}
inline void AMP::set_root_share(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  root_share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AMP.root_share)
}
inline void AMP::set_root_share(const void* value, size_t size) {
  
  root_share_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AMP.root_share)
}
inline std::string* AMP::_internal_mutable_root_share() {
  
  return root_share_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMP::release_root_share() {
  // @@protoc_insertion_point(field_release:lnrpc.AMP.root_share)
  
  return root_share_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMP::set_allocated_root_share(std::string* root_share) {
  if (root_share != nullptr) {
    
  } else {
    
  }
  root_share_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), root_share);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AMP.root_share)
}

// bytes set_id = 2;
inline void AMP::clear_set_id() {
  set_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMP::set_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.AMP.set_id)
  return _internal_set_id();
}
inline void AMP::set_set_id(const std::string& value) {
  _internal_set_set_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.AMP.set_id)
}
inline std::string* AMP::mutable_set_id() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AMP.set_id)
  return _internal_mutable_set_id();
}
inline const std::string& AMP::_internal_set_id() const {
  return set_id_.GetNoArena();
}
inline void AMP::_internal_set_set_id(const std::string& value) {
  
  set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AMP::set_set_id(std::string&& value) {
  
  set_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AMP.set_id)
}
inline void AMP::set_set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AMP.set_id)
}
inline void AMP::set_set_id(const void* value, size_t size) {
  
  set_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AMP.set_id)
}
inline std::string* AMP::_internal_mutable_set_id() {
  
  return set_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMP::release_set_id() {
  // @@protoc_insertion_point(field_release:lnrpc.AMP.set_id)
  
  return set_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMP::set_allocated_set_id(std::string* set_id) {
  if (set_id != nullptr) {
    
  } else {
    
  }
  set_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), set_id);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AMP.set_id)
}

// uint32 child_index = 3;
inline void AMP::clear_child_index() {
  child_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AMP::_internal_child_index() const {
  return child_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AMP::child_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.AMP.child_index)
  return _internal_child_index();
}
inline void AMP::_internal_set_child_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  child_index_ = value;
}
inline void AMP::set_child_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_child_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.AMP.child_index)
}

// bytes hash = 4;
inline void AMP::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMP::hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.AMP.hash)
  return _internal_hash();
}
inline void AMP::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.AMP.hash)
}
inline std::string* AMP::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AMP.hash)
  return _internal_mutable_hash();
}
inline const std::string& AMP::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void AMP::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AMP::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AMP.hash)
}
inline void AMP::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AMP.hash)
}
inline void AMP::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AMP.hash)
}
inline std::string* AMP::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMP::release_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.AMP.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMP::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AMP.hash)
}

// bytes preimage = 5;
inline void AMP::clear_preimage() {
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AMP::preimage() const {
  // @@protoc_insertion_point(field_get:lnrpc.AMP.preimage)
  return _internal_preimage();
}
inline void AMP::set_preimage(const std::string& value) {
  _internal_set_preimage(value);
  // @@protoc_insertion_point(field_set:lnrpc.AMP.preimage)
}
inline std::string* AMP::mutable_preimage() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AMP.preimage)
  return _internal_mutable_preimage();
}
inline const std::string& AMP::_internal_preimage() const {
  return preimage_.GetNoArena();
}
inline void AMP::_internal_set_preimage(const std::string& value) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AMP::set_preimage(std::string&& value) {
  
  preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AMP.preimage)
}
inline void AMP::set_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AMP.preimage)
}
inline void AMP::set_preimage(const void* value, size_t size) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AMP.preimage)
}
inline std::string* AMP::_internal_mutable_preimage() {
  
  return preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AMP::release_preimage() {
  // @@protoc_insertion_point(field_release:lnrpc.AMP.preimage)
  
  return preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AMP::set_allocated_preimage(std::string* preimage) {
  if (preimage != nullptr) {
    
  } else {
    
  }
  preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimage);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AMP.preimage)
}

// -------------------------------------------------------------------

// AddInvoiceResponse

// bytes r_hash = 1;
inline void AddInvoiceResponse::clear_r_hash() {
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddInvoiceResponse::r_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.AddInvoiceResponse.r_hash)
  return _internal_r_hash();
}
inline void AddInvoiceResponse::set_r_hash(const std::string& value) {
  _internal_set_r_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.AddInvoiceResponse.r_hash)
}
inline std::string* AddInvoiceResponse::mutable_r_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AddInvoiceResponse.r_hash)
  return _internal_mutable_r_hash();
}
inline const std::string& AddInvoiceResponse::_internal_r_hash() const {
  return r_hash_.GetNoArena();
}
inline void AddInvoiceResponse::_internal_set_r_hash(const std::string& value) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddInvoiceResponse::set_r_hash(std::string&& value) {
  
  r_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AddInvoiceResponse.r_hash)
}
inline void AddInvoiceResponse::set_r_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AddInvoiceResponse.r_hash)
}
inline void AddInvoiceResponse::set_r_hash(const void* value, size_t size) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AddInvoiceResponse.r_hash)
}
inline std::string* AddInvoiceResponse::_internal_mutable_r_hash() {
  
  return r_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddInvoiceResponse::release_r_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.AddInvoiceResponse.r_hash)
  
  return r_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddInvoiceResponse::set_allocated_r_hash(std::string* r_hash) {
  if (r_hash != nullptr) {
    
  } else {
    
  }
  r_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AddInvoiceResponse.r_hash)
}

// string payment_request = 2;
inline void AddInvoiceResponse::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddInvoiceResponse::payment_request() const {
  // @@protoc_insertion_point(field_get:lnrpc.AddInvoiceResponse.payment_request)
  return _internal_payment_request();
}
inline void AddInvoiceResponse::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:lnrpc.AddInvoiceResponse.payment_request)
}
inline std::string* AddInvoiceResponse::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AddInvoiceResponse.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& AddInvoiceResponse::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void AddInvoiceResponse::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddInvoiceResponse::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AddInvoiceResponse.payment_request)
}
inline void AddInvoiceResponse::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AddInvoiceResponse.payment_request)
}
inline void AddInvoiceResponse::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AddInvoiceResponse.payment_request)
}
inline std::string* AddInvoiceResponse::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddInvoiceResponse::release_payment_request() {
  // @@protoc_insertion_point(field_release:lnrpc.AddInvoiceResponse.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddInvoiceResponse::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AddInvoiceResponse.payment_request)
}

// uint64 add_index = 16;
inline void AddInvoiceResponse::clear_add_index() {
  add_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddInvoiceResponse::_internal_add_index() const {
  return add_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AddInvoiceResponse::add_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.AddInvoiceResponse.add_index)
  return _internal_add_index();
}
inline void AddInvoiceResponse::_internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  add_index_ = value;
}
inline void AddInvoiceResponse::set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_add_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.AddInvoiceResponse.add_index)
}

// bytes payment_addr = 17;
inline void AddInvoiceResponse::clear_payment_addr() {
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddInvoiceResponse::payment_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.AddInvoiceResponse.payment_addr)
  return _internal_payment_addr();
}
inline void AddInvoiceResponse::set_payment_addr(const std::string& value) {
  _internal_set_payment_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.AddInvoiceResponse.payment_addr)
}
inline std::string* AddInvoiceResponse::mutable_payment_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AddInvoiceResponse.payment_addr)
  return _internal_mutable_payment_addr();
}
inline const std::string& AddInvoiceResponse::_internal_payment_addr() const {
  return payment_addr_.GetNoArena();
}
inline void AddInvoiceResponse::_internal_set_payment_addr(const std::string& value) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddInvoiceResponse::set_payment_addr(std::string&& value) {
  
  payment_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.AddInvoiceResponse.payment_addr)
}
inline void AddInvoiceResponse::set_payment_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.AddInvoiceResponse.payment_addr)
}
inline void AddInvoiceResponse::set_payment_addr(const void* value, size_t size) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.AddInvoiceResponse.payment_addr)
}
inline std::string* AddInvoiceResponse::_internal_mutable_payment_addr() {
  
  return payment_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddInvoiceResponse::release_payment_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.AddInvoiceResponse.payment_addr)
  
  return payment_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddInvoiceResponse::set_allocated_payment_addr(std::string* payment_addr) {
  if (payment_addr != nullptr) {
    
  } else {
    
  }
  payment_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AddInvoiceResponse.payment_addr)
}

// -------------------------------------------------------------------

// PaymentHash

// string r_hash_str = 1 [deprecated = true];
inline void PaymentHash::clear_r_hash_str() {
  r_hash_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentHash::r_hash_str() const {
  // @@protoc_insertion_point(field_get:lnrpc.PaymentHash.r_hash_str)
  return _internal_r_hash_str();
}
inline void PaymentHash::set_r_hash_str(const std::string& value) {
  _internal_set_r_hash_str(value);
  // @@protoc_insertion_point(field_set:lnrpc.PaymentHash.r_hash_str)
}
inline std::string* PaymentHash::mutable_r_hash_str() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PaymentHash.r_hash_str)
  return _internal_mutable_r_hash_str();
}
inline const std::string& PaymentHash::_internal_r_hash_str() const {
  return r_hash_str_.GetNoArena();
}
inline void PaymentHash::_internal_set_r_hash_str(const std::string& value) {
  
  r_hash_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentHash::set_r_hash_str(std::string&& value) {
  
  r_hash_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PaymentHash.r_hash_str)
}
inline void PaymentHash::set_r_hash_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PaymentHash.r_hash_str)
}
inline void PaymentHash::set_r_hash_str(const char* value, size_t size) {
  
  r_hash_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PaymentHash.r_hash_str)
}
inline std::string* PaymentHash::_internal_mutable_r_hash_str() {
  
  return r_hash_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentHash::release_r_hash_str() {
  // @@protoc_insertion_point(field_release:lnrpc.PaymentHash.r_hash_str)
  
  return r_hash_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentHash::set_allocated_r_hash_str(std::string* r_hash_str) {
  if (r_hash_str != nullptr) {
    
  } else {
    
  }
  r_hash_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash_str);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PaymentHash.r_hash_str)
}

// bytes r_hash = 2;
inline void PaymentHash::clear_r_hash() {
  r_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentHash::r_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.PaymentHash.r_hash)
  return _internal_r_hash();
}
inline void PaymentHash::set_r_hash(const std::string& value) {
  _internal_set_r_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.PaymentHash.r_hash)
}
inline std::string* PaymentHash::mutable_r_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PaymentHash.r_hash)
  return _internal_mutable_r_hash();
}
inline const std::string& PaymentHash::_internal_r_hash() const {
  return r_hash_.GetNoArena();
}
inline void PaymentHash::_internal_set_r_hash(const std::string& value) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentHash::set_r_hash(std::string&& value) {
  
  r_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PaymentHash.r_hash)
}
inline void PaymentHash::set_r_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PaymentHash.r_hash)
}
inline void PaymentHash::set_r_hash(const void* value, size_t size) {
  
  r_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PaymentHash.r_hash)
}
inline std::string* PaymentHash::_internal_mutable_r_hash() {
  
  return r_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentHash::release_r_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.PaymentHash.r_hash)
  
  return r_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentHash::set_allocated_r_hash(std::string* r_hash) {
  if (r_hash != nullptr) {
    
  } else {
    
  }
  r_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PaymentHash.r_hash)
}

// -------------------------------------------------------------------

// ListInvoiceRequest

// bool pending_only = 1;
inline void ListInvoiceRequest::clear_pending_only() {
  pending_only_ = false;
}
inline bool ListInvoiceRequest::_internal_pending_only() const {
  return pending_only_;
}
inline bool ListInvoiceRequest::pending_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceRequest.pending_only)
  return _internal_pending_only();
}
inline void ListInvoiceRequest::_internal_set_pending_only(bool value) {
  
  pending_only_ = value;
}
inline void ListInvoiceRequest::set_pending_only(bool value) {
  _internal_set_pending_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceRequest.pending_only)
}

// uint64 index_offset = 4;
inline void ListInvoiceRequest::clear_index_offset() {
  index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceRequest::_internal_index_offset() const {
  return index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceRequest::index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceRequest.index_offset)
  return _internal_index_offset();
}
inline void ListInvoiceRequest::_internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_offset_ = value;
}
inline void ListInvoiceRequest::set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceRequest.index_offset)
}

// uint64 num_max_invoices = 5;
inline void ListInvoiceRequest::clear_num_max_invoices() {
  num_max_invoices_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceRequest::_internal_num_max_invoices() const {
  return num_max_invoices_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceRequest::num_max_invoices() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceRequest.num_max_invoices)
  return _internal_num_max_invoices();
}
inline void ListInvoiceRequest::_internal_set_num_max_invoices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_max_invoices_ = value;
}
inline void ListInvoiceRequest::set_num_max_invoices(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_max_invoices(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceRequest.num_max_invoices)
}

// bool reversed = 6;
inline void ListInvoiceRequest::clear_reversed() {
  reversed_ = false;
}
inline bool ListInvoiceRequest::_internal_reversed() const {
  return reversed_;
}
inline bool ListInvoiceRequest::reversed() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceRequest.reversed)
  return _internal_reversed();
}
inline void ListInvoiceRequest::_internal_set_reversed(bool value) {
  
  reversed_ = value;
}
inline void ListInvoiceRequest::set_reversed(bool value) {
  _internal_set_reversed(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceRequest.reversed)
}

// -------------------------------------------------------------------

// ListInvoiceResponse

// repeated .lnrpc.Invoice invoices = 1;
inline int ListInvoiceResponse::_internal_invoices_size() const {
  return invoices_.size();
}
inline int ListInvoiceResponse::invoices_size() const {
  return _internal_invoices_size();
}
inline void ListInvoiceResponse::clear_invoices() {
  invoices_.Clear();
}
inline ::lnrpc::Invoice* ListInvoiceResponse::mutable_invoices(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListInvoiceResponse.invoices)
  return invoices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Invoice >*
ListInvoiceResponse::mutable_invoices() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListInvoiceResponse.invoices)
  return &invoices_;
}
inline const ::lnrpc::Invoice& ListInvoiceResponse::_internal_invoices(int index) const {
  return invoices_.Get(index);
}
inline const ::lnrpc::Invoice& ListInvoiceResponse::invoices(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceResponse.invoices)
  return _internal_invoices(index);
}
inline ::lnrpc::Invoice* ListInvoiceResponse::_internal_add_invoices() {
  return invoices_.Add();
}
inline ::lnrpc::Invoice* ListInvoiceResponse::add_invoices() {
  // @@protoc_insertion_point(field_add:lnrpc.ListInvoiceResponse.invoices)
  return _internal_add_invoices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Invoice >&
ListInvoiceResponse::invoices() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListInvoiceResponse.invoices)
  return invoices_;
}

// uint64 last_index_offset = 2;
inline void ListInvoiceResponse::clear_last_index_offset() {
  last_index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceResponse::_internal_last_index_offset() const {
  return last_index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceResponse::last_index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceResponse.last_index_offset)
  return _internal_last_index_offset();
}
inline void ListInvoiceResponse::_internal_set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_index_offset_ = value;
}
inline void ListInvoiceResponse::set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceResponse.last_index_offset)
}

// uint64 first_index_offset = 3;
inline void ListInvoiceResponse::clear_first_index_offset() {
  first_index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceResponse::_internal_first_index_offset() const {
  return first_index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListInvoiceResponse::first_index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListInvoiceResponse.first_index_offset)
  return _internal_first_index_offset();
}
inline void ListInvoiceResponse::_internal_set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  first_index_offset_ = value;
}
inline void ListInvoiceResponse::set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListInvoiceResponse.first_index_offset)
}

// -------------------------------------------------------------------

// InvoiceSubscription

// uint64 add_index = 1;
inline void InvoiceSubscription::clear_add_index() {
  add_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceSubscription::_internal_add_index() const {
  return add_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceSubscription::add_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceSubscription.add_index)
  return _internal_add_index();
}
inline void InvoiceSubscription::_internal_set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  add_index_ = value;
}
inline void InvoiceSubscription::set_add_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_add_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceSubscription.add_index)
}

// uint64 settle_index = 2;
inline void InvoiceSubscription::clear_settle_index() {
  settle_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceSubscription::_internal_settle_index() const {
  return settle_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 InvoiceSubscription::settle_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.InvoiceSubscription.settle_index)
  return _internal_settle_index();
}
inline void InvoiceSubscription::_internal_set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  settle_index_ = value;
}
inline void InvoiceSubscription::set_settle_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_settle_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.InvoiceSubscription.settle_index)
}

// -------------------------------------------------------------------

// Payment

// string payment_hash = 1;
inline void Payment::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Payment::payment_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.payment_hash)
  return _internal_payment_hash();
}
inline void Payment::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.payment_hash)
}
inline std::string* Payment::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Payment.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& Payment::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void Payment::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Payment::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Payment.payment_hash)
}
inline void Payment::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Payment.payment_hash)
}
inline void Payment::set_payment_hash(const char* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Payment.payment_hash)
}
inline std::string* Payment::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Payment::release_payment_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.Payment.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Payment::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Payment.payment_hash)
}

// int64 value = 2 [deprecated = true];
inline void Payment::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::value() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.value)
  return _internal_value();
}
inline void Payment::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Payment::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.value)
}

// int64 creation_date = 3 [deprecated = true];
inline void Payment::clear_creation_date() {
  creation_date_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_creation_date() const {
  return creation_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::creation_date() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.creation_date)
  return _internal_creation_date();
}
inline void Payment::_internal_set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_date_ = value;
}
inline void Payment::set_creation_date(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_date(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.creation_date)
}

// int64 fee = 5 [deprecated = true];
inline void Payment::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.fee)
  return _internal_fee();
}
inline void Payment::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void Payment::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.fee)
}

// string payment_preimage = 6;
inline void Payment::clear_payment_preimage() {
  payment_preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Payment::payment_preimage() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.payment_preimage)
  return _internal_payment_preimage();
}
inline void Payment::set_payment_preimage(const std::string& value) {
  _internal_set_payment_preimage(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.payment_preimage)
}
inline std::string* Payment::mutable_payment_preimage() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Payment.payment_preimage)
  return _internal_mutable_payment_preimage();
}
inline const std::string& Payment::_internal_payment_preimage() const {
  return payment_preimage_.GetNoArena();
}
inline void Payment::_internal_set_payment_preimage(const std::string& value) {
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Payment::set_payment_preimage(std::string&& value) {
  
  payment_preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Payment.payment_preimage)
}
inline void Payment::set_payment_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Payment.payment_preimage)
}
inline void Payment::set_payment_preimage(const char* value, size_t size) {
  
  payment_preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Payment.payment_preimage)
}
inline std::string* Payment::_internal_mutable_payment_preimage() {
  
  return payment_preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Payment::release_payment_preimage() {
  // @@protoc_insertion_point(field_release:lnrpc.Payment.payment_preimage)
  
  return payment_preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Payment::set_allocated_payment_preimage(std::string* payment_preimage) {
  if (payment_preimage != nullptr) {
    
  } else {
    
  }
  payment_preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_preimage);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Payment.payment_preimage)
}

// int64 value_sat = 7;
inline void Payment::clear_value_sat() {
  value_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_value_sat() const {
  return value_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::value_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.value_sat)
  return _internal_value_sat();
}
inline void Payment::_internal_set_value_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_sat_ = value;
}
inline void Payment::set_value_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.value_sat)
}

// int64 value_msat = 8;
inline void Payment::clear_value_msat() {
  value_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_value_msat() const {
  return value_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::value_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.value_msat)
  return _internal_value_msat();
}
inline void Payment::_internal_set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_msat_ = value;
}
inline void Payment::set_value_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.value_msat)
}

// string payment_request = 9;
inline void Payment::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Payment::payment_request() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.payment_request)
  return _internal_payment_request();
}
inline void Payment::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.payment_request)
}
inline std::string* Payment::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Payment.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& Payment::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void Payment::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Payment::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Payment.payment_request)
}
inline void Payment::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Payment.payment_request)
}
inline void Payment::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Payment.payment_request)
}
inline std::string* Payment::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Payment::release_payment_request() {
  // @@protoc_insertion_point(field_release:lnrpc.Payment.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Payment::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Payment.payment_request)
}

// .lnrpc.Payment.PaymentStatus status = 10;
inline void Payment::clear_status() {
  status_ = 0;
}
inline ::lnrpc::Payment_PaymentStatus Payment::_internal_status() const {
  return static_cast< ::lnrpc::Payment_PaymentStatus >(status_);
}
inline ::lnrpc::Payment_PaymentStatus Payment::status() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.status)
  return _internal_status();
}
inline void Payment::_internal_set_status(::lnrpc::Payment_PaymentStatus value) {
  
  status_ = value;
}
inline void Payment::set_status(::lnrpc::Payment_PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.status)
}

// int64 fee_sat = 11;
inline void Payment::clear_fee_sat() {
  fee_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_fee_sat() const {
  return fee_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::fee_sat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.fee_sat)
  return _internal_fee_sat();
}
inline void Payment::_internal_set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_sat_ = value;
}
inline void Payment::set_fee_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_sat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.fee_sat)
}

// int64 fee_msat = 12;
inline void Payment::clear_fee_msat() {
  fee_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_fee_msat() const {
  return fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::fee_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.fee_msat)
  return _internal_fee_msat();
}
inline void Payment::_internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_msat_ = value;
}
inline void Payment::set_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.fee_msat)
}

// int64 creation_time_ns = 13;
inline void Payment::clear_creation_time_ns() {
  creation_time_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::_internal_creation_time_ns() const {
  return creation_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Payment::creation_time_ns() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.creation_time_ns)
  return _internal_creation_time_ns();
}
inline void Payment::_internal_set_creation_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  creation_time_ns_ = value;
}
inline void Payment::set_creation_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_creation_time_ns(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.creation_time_ns)
}

// repeated .lnrpc.HTLCAttempt htlcs = 14;
inline int Payment::_internal_htlcs_size() const {
  return htlcs_.size();
}
inline int Payment::htlcs_size() const {
  return _internal_htlcs_size();
}
inline void Payment::clear_htlcs() {
  htlcs_.Clear();
}
inline ::lnrpc::HTLCAttempt* Payment::mutable_htlcs(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Payment.htlcs)
  return htlcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >*
Payment::mutable_htlcs() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Payment.htlcs)
  return &htlcs_;
}
inline const ::lnrpc::HTLCAttempt& Payment::_internal_htlcs(int index) const {
  return htlcs_.Get(index);
}
inline const ::lnrpc::HTLCAttempt& Payment::htlcs(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.htlcs)
  return _internal_htlcs(index);
}
inline ::lnrpc::HTLCAttempt* Payment::_internal_add_htlcs() {
  return htlcs_.Add();
}
inline ::lnrpc::HTLCAttempt* Payment::add_htlcs() {
  // @@protoc_insertion_point(field_add:lnrpc.Payment.htlcs)
  return _internal_add_htlcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >&
Payment::htlcs() const {
  // @@protoc_insertion_point(field_list:lnrpc.Payment.htlcs)
  return htlcs_;
}

// uint64 payment_index = 15;
inline void Payment::clear_payment_index() {
  payment_index_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payment::_internal_payment_index() const {
  return payment_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Payment::payment_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.payment_index)
  return _internal_payment_index();
}
inline void Payment::_internal_set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  payment_index_ = value;
}
inline void Payment::set_payment_index(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_payment_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.payment_index)
}

// .lnrpc.PaymentFailureReason failure_reason = 16;
inline void Payment::clear_failure_reason() {
  failure_reason_ = 0;
}
inline ::lnrpc::PaymentFailureReason Payment::_internal_failure_reason() const {
  return static_cast< ::lnrpc::PaymentFailureReason >(failure_reason_);
}
inline ::lnrpc::PaymentFailureReason Payment::failure_reason() const {
  // @@protoc_insertion_point(field_get:lnrpc.Payment.failure_reason)
  return _internal_failure_reason();
}
inline void Payment::_internal_set_failure_reason(::lnrpc::PaymentFailureReason value) {
  
  failure_reason_ = value;
}
inline void Payment::set_failure_reason(::lnrpc::PaymentFailureReason value) {
  _internal_set_failure_reason(value);
  // @@protoc_insertion_point(field_set:lnrpc.Payment.failure_reason)
}

// -------------------------------------------------------------------

// HTLCAttempt

// uint64 attempt_id = 7;
inline void HTLCAttempt::clear_attempt_id() {
  attempt_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLCAttempt::_internal_attempt_id() const {
  return attempt_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HTLCAttempt::attempt_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.attempt_id)
  return _internal_attempt_id();
}
inline void HTLCAttempt::_internal_set_attempt_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  attempt_id_ = value;
}
inline void HTLCAttempt::set_attempt_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_attempt_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLCAttempt.attempt_id)
}

// .lnrpc.HTLCAttempt.HTLCStatus status = 1;
inline void HTLCAttempt::clear_status() {
  status_ = 0;
}
inline ::lnrpc::HTLCAttempt_HTLCStatus HTLCAttempt::_internal_status() const {
  return static_cast< ::lnrpc::HTLCAttempt_HTLCStatus >(status_);
}
inline ::lnrpc::HTLCAttempt_HTLCStatus HTLCAttempt::status() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.status)
  return _internal_status();
}
inline void HTLCAttempt::_internal_set_status(::lnrpc::HTLCAttempt_HTLCStatus value) {
  
  status_ = value;
}
inline void HTLCAttempt::set_status(::lnrpc::HTLCAttempt_HTLCStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLCAttempt.status)
}

// .lnrpc.Route route = 2;
inline bool HTLCAttempt::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool HTLCAttempt::has_route() const {
  return _internal_has_route();
}
inline void HTLCAttempt::clear_route() {
  if (GetArenaNoVirtual() == nullptr && route_ != nullptr) {
    delete route_;
  }
  route_ = nullptr;
}
inline const ::lnrpc::Route& HTLCAttempt::_internal_route() const {
  const ::lnrpc::Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Route*>(
      &::lnrpc::_Route_default_instance_);
}
inline const ::lnrpc::Route& HTLCAttempt::route() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.route)
  return _internal_route();
}
inline ::lnrpc::Route* HTLCAttempt::release_route() {
  // @@protoc_insertion_point(field_release:lnrpc.HTLCAttempt.route)
  
  ::lnrpc::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::lnrpc::Route* HTLCAttempt::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Route>(GetArenaNoVirtual());
    route_ = p;
  }
  return route_;
}
inline ::lnrpc::Route* HTLCAttempt::mutable_route() {
  // @@protoc_insertion_point(field_mutable:lnrpc.HTLCAttempt.route)
  return _internal_mutable_route();
}
inline void HTLCAttempt::set_allocated_route(::lnrpc::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.HTLCAttempt.route)
}

// int64 attempt_time_ns = 3;
inline void HTLCAttempt::clear_attempt_time_ns() {
  attempt_time_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLCAttempt::_internal_attempt_time_ns() const {
  return attempt_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLCAttempt::attempt_time_ns() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.attempt_time_ns)
  return _internal_attempt_time_ns();
}
inline void HTLCAttempt::_internal_set_attempt_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  attempt_time_ns_ = value;
}
inline void HTLCAttempt::set_attempt_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_attempt_time_ns(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLCAttempt.attempt_time_ns)
}

// int64 resolve_time_ns = 4;
inline void HTLCAttempt::clear_resolve_time_ns() {
  resolve_time_ns_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLCAttempt::_internal_resolve_time_ns() const {
  return resolve_time_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 HTLCAttempt::resolve_time_ns() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.resolve_time_ns)
  return _internal_resolve_time_ns();
}
inline void HTLCAttempt::_internal_set_resolve_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  resolve_time_ns_ = value;
}
inline void HTLCAttempt::set_resolve_time_ns(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_resolve_time_ns(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLCAttempt.resolve_time_ns)
}

// .lnrpc.Failure failure = 5;
inline bool HTLCAttempt::_internal_has_failure() const {
  return this != internal_default_instance() && failure_ != nullptr;
}
inline bool HTLCAttempt::has_failure() const {
  return _internal_has_failure();
}
inline void HTLCAttempt::clear_failure() {
  if (GetArenaNoVirtual() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
inline const ::lnrpc::Failure& HTLCAttempt::_internal_failure() const {
  const ::lnrpc::Failure* p = failure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Failure*>(
      &::lnrpc::_Failure_default_instance_);
}
inline const ::lnrpc::Failure& HTLCAttempt::failure() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.failure)
  return _internal_failure();
}
inline ::lnrpc::Failure* HTLCAttempt::release_failure() {
  // @@protoc_insertion_point(field_release:lnrpc.HTLCAttempt.failure)
  
  ::lnrpc::Failure* temp = failure_;
  failure_ = nullptr;
  return temp;
}
inline ::lnrpc::Failure* HTLCAttempt::_internal_mutable_failure() {
  
  if (failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Failure>(GetArenaNoVirtual());
    failure_ = p;
  }
  return failure_;
}
inline ::lnrpc::Failure* HTLCAttempt::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:lnrpc.HTLCAttempt.failure)
  return _internal_mutable_failure();
}
inline void HTLCAttempt::set_allocated_failure(::lnrpc::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete failure_;
  }
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.HTLCAttempt.failure)
}

// bytes preimage = 6;
inline void HTLCAttempt::clear_preimage() {
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& HTLCAttempt::preimage() const {
  // @@protoc_insertion_point(field_get:lnrpc.HTLCAttempt.preimage)
  return _internal_preimage();
}
inline void HTLCAttempt::set_preimage(const std::string& value) {
  _internal_set_preimage(value);
  // @@protoc_insertion_point(field_set:lnrpc.HTLCAttempt.preimage)
}
inline std::string* HTLCAttempt::mutable_preimage() {
  // @@protoc_insertion_point(field_mutable:lnrpc.HTLCAttempt.preimage)
  return _internal_mutable_preimage();
}
inline const std::string& HTLCAttempt::_internal_preimage() const {
  return preimage_.GetNoArena();
}
inline void HTLCAttempt::_internal_set_preimage(const std::string& value) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void HTLCAttempt::set_preimage(std::string&& value) {
  
  preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.HTLCAttempt.preimage)
}
inline void HTLCAttempt::set_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.HTLCAttempt.preimage)
}
inline void HTLCAttempt::set_preimage(const void* value, size_t size) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.HTLCAttempt.preimage)
}
inline std::string* HTLCAttempt::_internal_mutable_preimage() {
  
  return preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* HTLCAttempt::release_preimage() {
  // @@protoc_insertion_point(field_release:lnrpc.HTLCAttempt.preimage)
  
  return preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void HTLCAttempt::set_allocated_preimage(std::string* preimage) {
  if (preimage != nullptr) {
    
  } else {
    
  }
  preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimage);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.HTLCAttempt.preimage)
}

// -------------------------------------------------------------------

// ListPaymentsRequest

// bool include_incomplete = 1;
inline void ListPaymentsRequest::clear_include_incomplete() {
  include_incomplete_ = false;
}
inline bool ListPaymentsRequest::_internal_include_incomplete() const {
  return include_incomplete_;
}
inline bool ListPaymentsRequest::include_incomplete() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsRequest.include_incomplete)
  return _internal_include_incomplete();
}
inline void ListPaymentsRequest::_internal_set_include_incomplete(bool value) {
  
  include_incomplete_ = value;
}
inline void ListPaymentsRequest::set_include_incomplete(bool value) {
  _internal_set_include_incomplete(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsRequest.include_incomplete)
}

// uint64 index_offset = 2;
inline void ListPaymentsRequest::clear_index_offset() {
  index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsRequest::_internal_index_offset() const {
  return index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsRequest::index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsRequest.index_offset)
  return _internal_index_offset();
}
inline void ListPaymentsRequest::_internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  index_offset_ = value;
}
inline void ListPaymentsRequest::set_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsRequest.index_offset)
}

// uint64 max_payments = 3;
inline void ListPaymentsRequest::clear_max_payments() {
  max_payments_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsRequest::_internal_max_payments() const {
  return max_payments_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsRequest::max_payments() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsRequest.max_payments)
  return _internal_max_payments();
}
inline void ListPaymentsRequest::_internal_set_max_payments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_payments_ = value;
}
inline void ListPaymentsRequest::set_max_payments(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_payments(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsRequest.max_payments)
}

// bool reversed = 4;
inline void ListPaymentsRequest::clear_reversed() {
  reversed_ = false;
}
inline bool ListPaymentsRequest::_internal_reversed() const {
  return reversed_;
}
inline bool ListPaymentsRequest::reversed() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsRequest.reversed)
  return _internal_reversed();
}
inline void ListPaymentsRequest::_internal_set_reversed(bool value) {
  
  reversed_ = value;
}
inline void ListPaymentsRequest::set_reversed(bool value) {
  _internal_set_reversed(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsRequest.reversed)
}

// -------------------------------------------------------------------

// ListPaymentsResponse

// repeated .lnrpc.Payment payments = 1;
inline int ListPaymentsResponse::_internal_payments_size() const {
  return payments_.size();
}
inline int ListPaymentsResponse::payments_size() const {
  return _internal_payments_size();
}
inline void ListPaymentsResponse::clear_payments() {
  payments_.Clear();
}
inline ::lnrpc::Payment* ListPaymentsResponse::mutable_payments(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ListPaymentsResponse.payments)
  return payments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Payment >*
ListPaymentsResponse::mutable_payments() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListPaymentsResponse.payments)
  return &payments_;
}
inline const ::lnrpc::Payment& ListPaymentsResponse::_internal_payments(int index) const {
  return payments_.Get(index);
}
inline const ::lnrpc::Payment& ListPaymentsResponse::payments(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsResponse.payments)
  return _internal_payments(index);
}
inline ::lnrpc::Payment* ListPaymentsResponse::_internal_add_payments() {
  return payments_.Add();
}
inline ::lnrpc::Payment* ListPaymentsResponse::add_payments() {
  // @@protoc_insertion_point(field_add:lnrpc.ListPaymentsResponse.payments)
  return _internal_add_payments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Payment >&
ListPaymentsResponse::payments() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListPaymentsResponse.payments)
  return payments_;
}

// uint64 first_index_offset = 2;
inline void ListPaymentsResponse::clear_first_index_offset() {
  first_index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsResponse::_internal_first_index_offset() const {
  return first_index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsResponse::first_index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsResponse.first_index_offset)
  return _internal_first_index_offset();
}
inline void ListPaymentsResponse::_internal_set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  first_index_offset_ = value;
}
inline void ListPaymentsResponse::set_first_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_first_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsResponse.first_index_offset)
}

// uint64 last_index_offset = 3;
inline void ListPaymentsResponse::clear_last_index_offset() {
  last_index_offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsResponse::_internal_last_index_offset() const {
  return last_index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListPaymentsResponse::last_index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ListPaymentsResponse.last_index_offset)
  return _internal_last_index_offset();
}
inline void ListPaymentsResponse::_internal_set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  last_index_offset_ = value;
}
inline void ListPaymentsResponse::set_last_index_offset(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_last_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ListPaymentsResponse.last_index_offset)
}

// -------------------------------------------------------------------

// DeleteAllPaymentsRequest

// bool failed_payments_only = 1;
inline void DeleteAllPaymentsRequest::clear_failed_payments_only() {
  failed_payments_only_ = false;
}
inline bool DeleteAllPaymentsRequest::_internal_failed_payments_only() const {
  return failed_payments_only_;
}
inline bool DeleteAllPaymentsRequest::failed_payments_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.DeleteAllPaymentsRequest.failed_payments_only)
  return _internal_failed_payments_only();
}
inline void DeleteAllPaymentsRequest::_internal_set_failed_payments_only(bool value) {
  
  failed_payments_only_ = value;
}
inline void DeleteAllPaymentsRequest::set_failed_payments_only(bool value) {
  _internal_set_failed_payments_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.DeleteAllPaymentsRequest.failed_payments_only)
}

// bool failed_htlcs_only = 2;
inline void DeleteAllPaymentsRequest::clear_failed_htlcs_only() {
  failed_htlcs_only_ = false;
}
inline bool DeleteAllPaymentsRequest::_internal_failed_htlcs_only() const {
  return failed_htlcs_only_;
}
inline bool DeleteAllPaymentsRequest::failed_htlcs_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.DeleteAllPaymentsRequest.failed_htlcs_only)
  return _internal_failed_htlcs_only();
}
inline void DeleteAllPaymentsRequest::_internal_set_failed_htlcs_only(bool value) {
  
  failed_htlcs_only_ = value;
}
inline void DeleteAllPaymentsRequest::set_failed_htlcs_only(bool value) {
  _internal_set_failed_htlcs_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.DeleteAllPaymentsRequest.failed_htlcs_only)
}

// -------------------------------------------------------------------

// DeleteAllPaymentsResponse

// -------------------------------------------------------------------

// AbandonChannelRequest

// .lnrpc.ChannelPoint channel_point = 1;
inline bool AbandonChannelRequest::_internal_has_channel_point() const {
  return this != internal_default_instance() && channel_point_ != nullptr;
}
inline bool AbandonChannelRequest::has_channel_point() const {
  return _internal_has_channel_point();
}
inline void AbandonChannelRequest::clear_channel_point() {
  if (GetArenaNoVirtual() == nullptr && channel_point_ != nullptr) {
    delete channel_point_;
  }
  channel_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& AbandonChannelRequest::_internal_channel_point() const {
  const ::lnrpc::ChannelPoint* p = channel_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& AbandonChannelRequest::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.AbandonChannelRequest.channel_point)
  return _internal_channel_point();
}
inline ::lnrpc::ChannelPoint* AbandonChannelRequest::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.AbandonChannelRequest.channel_point)
  
  ::lnrpc::ChannelPoint* temp = channel_point_;
  channel_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* AbandonChannelRequest::_internal_mutable_channel_point() {
  
  if (channel_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    channel_point_ = p;
  }
  return channel_point_;
}
inline ::lnrpc::ChannelPoint* AbandonChannelRequest::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.AbandonChannelRequest.channel_point)
  return _internal_mutable_channel_point();
}
inline void AbandonChannelRequest::set_allocated_channel_point(::lnrpc::ChannelPoint* channel_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_point_;
  }
  if (channel_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_point, submessage_arena);
    }
    
  } else {
    
  }
  channel_point_ = channel_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.AbandonChannelRequest.channel_point)
}

// bool pending_funding_shim_only = 2;
inline void AbandonChannelRequest::clear_pending_funding_shim_only() {
  pending_funding_shim_only_ = false;
}
inline bool AbandonChannelRequest::_internal_pending_funding_shim_only() const {
  return pending_funding_shim_only_;
}
inline bool AbandonChannelRequest::pending_funding_shim_only() const {
  // @@protoc_insertion_point(field_get:lnrpc.AbandonChannelRequest.pending_funding_shim_only)
  return _internal_pending_funding_shim_only();
}
inline void AbandonChannelRequest::_internal_set_pending_funding_shim_only(bool value) {
  
  pending_funding_shim_only_ = value;
}
inline void AbandonChannelRequest::set_pending_funding_shim_only(bool value) {
  _internal_set_pending_funding_shim_only(value);
  // @@protoc_insertion_point(field_set:lnrpc.AbandonChannelRequest.pending_funding_shim_only)
}

// -------------------------------------------------------------------

// AbandonChannelResponse

// -------------------------------------------------------------------

// DebugLevelRequest

// bool show = 1;
inline void DebugLevelRequest::clear_show() {
  show_ = false;
}
inline bool DebugLevelRequest::_internal_show() const {
  return show_;
}
inline bool DebugLevelRequest::show() const {
  // @@protoc_insertion_point(field_get:lnrpc.DebugLevelRequest.show)
  return _internal_show();
}
inline void DebugLevelRequest::_internal_set_show(bool value) {
  
  show_ = value;
}
inline void DebugLevelRequest::set_show(bool value) {
  _internal_set_show(value);
  // @@protoc_insertion_point(field_set:lnrpc.DebugLevelRequest.show)
}

// string level_spec = 2;
inline void DebugLevelRequest::clear_level_spec() {
  level_spec_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DebugLevelRequest::level_spec() const {
  // @@protoc_insertion_point(field_get:lnrpc.DebugLevelRequest.level_spec)
  return _internal_level_spec();
}
inline void DebugLevelRequest::set_level_spec(const std::string& value) {
  _internal_set_level_spec(value);
  // @@protoc_insertion_point(field_set:lnrpc.DebugLevelRequest.level_spec)
}
inline std::string* DebugLevelRequest::mutable_level_spec() {
  // @@protoc_insertion_point(field_mutable:lnrpc.DebugLevelRequest.level_spec)
  return _internal_mutable_level_spec();
}
inline const std::string& DebugLevelRequest::_internal_level_spec() const {
  return level_spec_.GetNoArena();
}
inline void DebugLevelRequest::_internal_set_level_spec(const std::string& value) {
  
  level_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugLevelRequest::set_level_spec(std::string&& value) {
  
  level_spec_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.DebugLevelRequest.level_spec)
}
inline void DebugLevelRequest::set_level_spec(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  level_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.DebugLevelRequest.level_spec)
}
inline void DebugLevelRequest::set_level_spec(const char* value, size_t size) {
  
  level_spec_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.DebugLevelRequest.level_spec)
}
inline std::string* DebugLevelRequest::_internal_mutable_level_spec() {
  
  return level_spec_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugLevelRequest::release_level_spec() {
  // @@protoc_insertion_point(field_release:lnrpc.DebugLevelRequest.level_spec)
  
  return level_spec_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugLevelRequest::set_allocated_level_spec(std::string* level_spec) {
  if (level_spec != nullptr) {
    
  } else {
    
  }
  level_spec_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level_spec);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.DebugLevelRequest.level_spec)
}

// -------------------------------------------------------------------

// DebugLevelResponse

// string sub_systems = 1;
inline void DebugLevelResponse::clear_sub_systems() {
  sub_systems_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DebugLevelResponse::sub_systems() const {
  // @@protoc_insertion_point(field_get:lnrpc.DebugLevelResponse.sub_systems)
  return _internal_sub_systems();
}
inline void DebugLevelResponse::set_sub_systems(const std::string& value) {
  _internal_set_sub_systems(value);
  // @@protoc_insertion_point(field_set:lnrpc.DebugLevelResponse.sub_systems)
}
inline std::string* DebugLevelResponse::mutable_sub_systems() {
  // @@protoc_insertion_point(field_mutable:lnrpc.DebugLevelResponse.sub_systems)
  return _internal_mutable_sub_systems();
}
inline const std::string& DebugLevelResponse::_internal_sub_systems() const {
  return sub_systems_.GetNoArena();
}
inline void DebugLevelResponse::_internal_set_sub_systems(const std::string& value) {
  
  sub_systems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DebugLevelResponse::set_sub_systems(std::string&& value) {
  
  sub_systems_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.DebugLevelResponse.sub_systems)
}
inline void DebugLevelResponse::set_sub_systems(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sub_systems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.DebugLevelResponse.sub_systems)
}
inline void DebugLevelResponse::set_sub_systems(const char* value, size_t size) {
  
  sub_systems_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.DebugLevelResponse.sub_systems)
}
inline std::string* DebugLevelResponse::_internal_mutable_sub_systems() {
  
  return sub_systems_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DebugLevelResponse::release_sub_systems() {
  // @@protoc_insertion_point(field_release:lnrpc.DebugLevelResponse.sub_systems)
  
  return sub_systems_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DebugLevelResponse::set_allocated_sub_systems(std::string* sub_systems) {
  if (sub_systems != nullptr) {
    
  } else {
    
  }
  sub_systems_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_systems);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.DebugLevelResponse.sub_systems)
}

// -------------------------------------------------------------------

// PayReqString

// string pay_req = 1;
inline void PayReqString::clear_pay_req() {
  pay_req_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReqString::pay_req() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReqString.pay_req)
  return _internal_pay_req();
}
inline void PayReqString::set_pay_req(const std::string& value) {
  _internal_set_pay_req(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReqString.pay_req)
}
inline std::string* PayReqString::mutable_pay_req() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReqString.pay_req)
  return _internal_mutable_pay_req();
}
inline const std::string& PayReqString::_internal_pay_req() const {
  return pay_req_.GetNoArena();
}
inline void PayReqString::_internal_set_pay_req(const std::string& value) {
  
  pay_req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReqString::set_pay_req(std::string&& value) {
  
  pay_req_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReqString.pay_req)
}
inline void PayReqString::set_pay_req(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pay_req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReqString.pay_req)
}
inline void PayReqString::set_pay_req(const char* value, size_t size) {
  
  pay_req_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReqString.pay_req)
}
inline std::string* PayReqString::_internal_mutable_pay_req() {
  
  return pay_req_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReqString::release_pay_req() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReqString.pay_req)
  
  return pay_req_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReqString::set_allocated_pay_req(std::string* pay_req) {
  if (pay_req != nullptr) {
    
  } else {
    
  }
  pay_req_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pay_req);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReqString.pay_req)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PayReq

// string destination = 1;
inline void PayReq::clear_destination() {
  destination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::destination() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.destination)
  return _internal_destination();
}
inline void PayReq::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.destination)
}
inline std::string* PayReq::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.destination)
  return _internal_mutable_destination();
}
inline const std::string& PayReq::_internal_destination() const {
  return destination_.GetNoArena();
}
inline void PayReq::_internal_set_destination(const std::string& value) {
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_destination(std::string&& value) {
  
  destination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.destination)
}
inline void PayReq::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.destination)
}
inline void PayReq::set_destination(const char* value, size_t size) {
  
  destination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.destination)
}
inline std::string* PayReq::_internal_mutable_destination() {
  
  return destination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_destination() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.destination)
  
  return destination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.destination)
}

// string payment_hash = 2;
inline void PayReq::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::payment_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.payment_hash)
  return _internal_payment_hash();
}
inline void PayReq::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.payment_hash)
}
inline std::string* PayReq::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& PayReq::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void PayReq::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.payment_hash)
}
inline void PayReq::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.payment_hash)
}
inline void PayReq::set_payment_hash(const char* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.payment_hash)
}
inline std::string* PayReq::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_payment_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.payment_hash)
}

// int64 num_satoshis = 3;
inline void PayReq::clear_num_satoshis() {
  num_satoshis_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::_internal_num_satoshis() const {
  return num_satoshis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::num_satoshis() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.num_satoshis)
  return _internal_num_satoshis();
}
inline void PayReq::_internal_set_num_satoshis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_satoshis_ = value;
}
inline void PayReq::set_num_satoshis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_satoshis(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.num_satoshis)
}

// int64 timestamp = 4;
inline void PayReq::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::timestamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.timestamp)
  return _internal_timestamp();
}
inline void PayReq::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void PayReq::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.timestamp)
}

// int64 expiry = 5;
inline void PayReq::clear_expiry() {
  expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.expiry)
  return _internal_expiry();
}
inline void PayReq::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiry_ = value;
}
inline void PayReq::set_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.expiry)
}

// string description = 6;
inline void PayReq::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::description() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.description)
  return _internal_description();
}
inline void PayReq::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.description)
}
inline std::string* PayReq::mutable_description() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.description)
  return _internal_mutable_description();
}
inline const std::string& PayReq::_internal_description() const {
  return description_.GetNoArena();
}
inline void PayReq::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.description)
}
inline void PayReq::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.description)
}
inline void PayReq::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.description)
}
inline std::string* PayReq::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_description() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.description)
}

// string description_hash = 7;
inline void PayReq::clear_description_hash() {
  description_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::description_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.description_hash)
  return _internal_description_hash();
}
inline void PayReq::set_description_hash(const std::string& value) {
  _internal_set_description_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.description_hash)
}
inline std::string* PayReq::mutable_description_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.description_hash)
  return _internal_mutable_description_hash();
}
inline const std::string& PayReq::_internal_description_hash() const {
  return description_hash_.GetNoArena();
}
inline void PayReq::_internal_set_description_hash(const std::string& value) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_description_hash(std::string&& value) {
  
  description_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.description_hash)
}
inline void PayReq::set_description_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.description_hash)
}
inline void PayReq::set_description_hash(const char* value, size_t size) {
  
  description_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.description_hash)
}
inline std::string* PayReq::_internal_mutable_description_hash() {
  
  return description_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_description_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.description_hash)
  
  return description_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_description_hash(std::string* description_hash) {
  if (description_hash != nullptr) {
    
  } else {
    
  }
  description_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.description_hash)
}

// string fallback_addr = 8;
inline void PayReq::clear_fallback_addr() {
  fallback_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::fallback_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.fallback_addr)
  return _internal_fallback_addr();
}
inline void PayReq::set_fallback_addr(const std::string& value) {
  _internal_set_fallback_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.fallback_addr)
}
inline std::string* PayReq::mutable_fallback_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.fallback_addr)
  return _internal_mutable_fallback_addr();
}
inline const std::string& PayReq::_internal_fallback_addr() const {
  return fallback_addr_.GetNoArena();
}
inline void PayReq::_internal_set_fallback_addr(const std::string& value) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_fallback_addr(std::string&& value) {
  
  fallback_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.fallback_addr)
}
inline void PayReq::set_fallback_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.fallback_addr)
}
inline void PayReq::set_fallback_addr(const char* value, size_t size) {
  
  fallback_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.fallback_addr)
}
inline std::string* PayReq::_internal_mutable_fallback_addr() {
  
  return fallback_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_fallback_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.fallback_addr)
  
  return fallback_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_fallback_addr(std::string* fallback_addr) {
  if (fallback_addr != nullptr) {
    
  } else {
    
  }
  fallback_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fallback_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.fallback_addr)
}

// int64 cltv_expiry = 9;
inline void PayReq::clear_cltv_expiry() {
  cltv_expiry_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::_internal_cltv_expiry() const {
  return cltv_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::cltv_expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.cltv_expiry)
  return _internal_cltv_expiry();
}
inline void PayReq::_internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  cltv_expiry_ = value;
}
inline void PayReq::set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cltv_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.cltv_expiry)
}

// repeated .lnrpc.RouteHint route_hints = 10;
inline int PayReq::_internal_route_hints_size() const {
  return route_hints_.size();
}
inline int PayReq::route_hints_size() const {
  return _internal_route_hints_size();
}
inline void PayReq::clear_route_hints() {
  route_hints_.Clear();
}
inline ::lnrpc::RouteHint* PayReq::mutable_route_hints(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.route_hints)
  return route_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
PayReq::mutable_route_hints() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.PayReq.route_hints)
  return &route_hints_;
}
inline const ::lnrpc::RouteHint& PayReq::_internal_route_hints(int index) const {
  return route_hints_.Get(index);
}
inline const ::lnrpc::RouteHint& PayReq::route_hints(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.route_hints)
  return _internal_route_hints(index);
}
inline ::lnrpc::RouteHint* PayReq::_internal_add_route_hints() {
  return route_hints_.Add();
}
inline ::lnrpc::RouteHint* PayReq::add_route_hints() {
  // @@protoc_insertion_point(field_add:lnrpc.PayReq.route_hints)
  return _internal_add_route_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
PayReq::route_hints() const {
  // @@protoc_insertion_point(field_list:lnrpc.PayReq.route_hints)
  return route_hints_;
}

// bytes payment_addr = 11;
inline void PayReq::clear_payment_addr() {
  payment_addr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PayReq::payment_addr() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.payment_addr)
  return _internal_payment_addr();
}
inline void PayReq::set_payment_addr(const std::string& value) {
  _internal_set_payment_addr(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.payment_addr)
}
inline std::string* PayReq::mutable_payment_addr() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PayReq.payment_addr)
  return _internal_mutable_payment_addr();
}
inline const std::string& PayReq::_internal_payment_addr() const {
  return payment_addr_.GetNoArena();
}
inline void PayReq::_internal_set_payment_addr(const std::string& value) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PayReq::set_payment_addr(std::string&& value) {
  
  payment_addr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.PayReq.payment_addr)
}
inline void PayReq::set_payment_addr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.PayReq.payment_addr)
}
inline void PayReq::set_payment_addr(const void* value, size_t size) {
  
  payment_addr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.PayReq.payment_addr)
}
inline std::string* PayReq::_internal_mutable_payment_addr() {
  
  return payment_addr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PayReq::release_payment_addr() {
  // @@protoc_insertion_point(field_release:lnrpc.PayReq.payment_addr)
  
  return payment_addr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PayReq::set_allocated_payment_addr(std::string* payment_addr) {
  if (payment_addr != nullptr) {
    
  } else {
    
  }
  payment_addr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_addr);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.PayReq.payment_addr)
}

// int64 num_msat = 12;
inline void PayReq::clear_num_msat() {
  num_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::_internal_num_msat() const {
  return num_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PayReq::num_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PayReq.num_msat)
  return _internal_num_msat();
}
inline void PayReq::_internal_set_num_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_msat_ = value;
}
inline void PayReq::set_num_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PayReq.num_msat)
}

// map<uint32, .lnrpc.Feature> features = 13;
inline int PayReq::_internal_features_size() const {
  return features_.size();
}
inline int PayReq::features_size() const {
  return _internal_features_size();
}
inline void PayReq::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
PayReq::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >&
PayReq::features() const {
  // @@protoc_insertion_point(field_map:lnrpc.PayReq.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
PayReq::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, ::lnrpc::Feature >*
PayReq::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.PayReq.features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// Feature

// string name = 2;
inline void Feature::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Feature::name() const {
  // @@protoc_insertion_point(field_get:lnrpc.Feature.name)
  return _internal_name();
}
inline void Feature::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:lnrpc.Feature.name)
}
inline std::string* Feature::mutable_name() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Feature.name)
  return _internal_mutable_name();
}
inline const std::string& Feature::_internal_name() const {
  return name_.GetNoArena();
}
inline void Feature::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Feature::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Feature.name)
}
inline void Feature::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Feature.name)
}
inline void Feature::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Feature.name)
}
inline std::string* Feature::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Feature::release_name() {
  // @@protoc_insertion_point(field_release:lnrpc.Feature.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Feature::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Feature.name)
}

// bool is_required = 3;
inline void Feature::clear_is_required() {
  is_required_ = false;
}
inline bool Feature::_internal_is_required() const {
  return is_required_;
}
inline bool Feature::is_required() const {
  // @@protoc_insertion_point(field_get:lnrpc.Feature.is_required)
  return _internal_is_required();
}
inline void Feature::_internal_set_is_required(bool value) {
  
  is_required_ = value;
}
inline void Feature::set_is_required(bool value) {
  _internal_set_is_required(value);
  // @@protoc_insertion_point(field_set:lnrpc.Feature.is_required)
}

// bool is_known = 4;
inline void Feature::clear_is_known() {
  is_known_ = false;
}
inline bool Feature::_internal_is_known() const {
  return is_known_;
}
inline bool Feature::is_known() const {
  // @@protoc_insertion_point(field_get:lnrpc.Feature.is_known)
  return _internal_is_known();
}
inline void Feature::_internal_set_is_known(bool value) {
  
  is_known_ = value;
}
inline void Feature::set_is_known(bool value) {
  _internal_set_is_known(value);
  // @@protoc_insertion_point(field_set:lnrpc.Feature.is_known)
}

// -------------------------------------------------------------------

// FeeReportRequest

// -------------------------------------------------------------------

// ChannelFeeReport

// uint64 chan_id = 5 [jstype = JS_STRING];
inline void ChannelFeeReport::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelFeeReport::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelFeeReport::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelFeeReport.chan_id)
  return _internal_chan_id();
}
inline void ChannelFeeReport::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ChannelFeeReport::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelFeeReport.chan_id)
}

// string channel_point = 1;
inline void ChannelFeeReport::clear_channel_point() {
  channel_point_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelFeeReport::channel_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelFeeReport.channel_point)
  return _internal_channel_point();
}
inline void ChannelFeeReport::set_channel_point(const std::string& value) {
  _internal_set_channel_point(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelFeeReport.channel_point)
}
inline std::string* ChannelFeeReport::mutable_channel_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelFeeReport.channel_point)
  return _internal_mutable_channel_point();
}
inline const std::string& ChannelFeeReport::_internal_channel_point() const {
  return channel_point_.GetNoArena();
}
inline void ChannelFeeReport::_internal_set_channel_point(const std::string& value) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelFeeReport::set_channel_point(std::string&& value) {
  
  channel_point_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelFeeReport.channel_point)
}
inline void ChannelFeeReport::set_channel_point(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelFeeReport.channel_point)
}
inline void ChannelFeeReport::set_channel_point(const char* value, size_t size) {
  
  channel_point_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelFeeReport.channel_point)
}
inline std::string* ChannelFeeReport::_internal_mutable_channel_point() {
  
  return channel_point_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelFeeReport::release_channel_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelFeeReport.channel_point)
  
  return channel_point_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelFeeReport::set_allocated_channel_point(std::string* channel_point) {
  if (channel_point != nullptr) {
    
  } else {
    
  }
  channel_point_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_point);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelFeeReport.channel_point)
}

// int64 base_fee_msat = 2;
inline void ChannelFeeReport::clear_base_fee_msat() {
  base_fee_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelFeeReport::_internal_base_fee_msat() const {
  return base_fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelFeeReport::base_fee_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelFeeReport.base_fee_msat)
  return _internal_base_fee_msat();
}
inline void ChannelFeeReport::_internal_set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  base_fee_msat_ = value;
}
inline void ChannelFeeReport::set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_base_fee_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelFeeReport.base_fee_msat)
}

// int64 fee_per_mil = 3;
inline void ChannelFeeReport::clear_fee_per_mil() {
  fee_per_mil_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelFeeReport::_internal_fee_per_mil() const {
  return fee_per_mil_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ChannelFeeReport::fee_per_mil() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelFeeReport.fee_per_mil)
  return _internal_fee_per_mil();
}
inline void ChannelFeeReport::_internal_set_fee_per_mil(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_per_mil_ = value;
}
inline void ChannelFeeReport::set_fee_per_mil(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_per_mil(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelFeeReport.fee_per_mil)
}

// double fee_rate = 4;
inline void ChannelFeeReport::clear_fee_rate() {
  fee_rate_ = 0;
}
inline double ChannelFeeReport::_internal_fee_rate() const {
  return fee_rate_;
}
inline double ChannelFeeReport::fee_rate() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelFeeReport.fee_rate)
  return _internal_fee_rate();
}
inline void ChannelFeeReport::_internal_set_fee_rate(double value) {
  
  fee_rate_ = value;
}
inline void ChannelFeeReport::set_fee_rate(double value) {
  _internal_set_fee_rate(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelFeeReport.fee_rate)
}

// -------------------------------------------------------------------

// FeeReportResponse

// repeated .lnrpc.ChannelFeeReport channel_fees = 1;
inline int FeeReportResponse::_internal_channel_fees_size() const {
  return channel_fees_.size();
}
inline int FeeReportResponse::channel_fees_size() const {
  return _internal_channel_fees_size();
}
inline void FeeReportResponse::clear_channel_fees() {
  channel_fees_.Clear();
}
inline ::lnrpc::ChannelFeeReport* FeeReportResponse::mutable_channel_fees(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.FeeReportResponse.channel_fees)
  return channel_fees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelFeeReport >*
FeeReportResponse::mutable_channel_fees() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.FeeReportResponse.channel_fees)
  return &channel_fees_;
}
inline const ::lnrpc::ChannelFeeReport& FeeReportResponse::_internal_channel_fees(int index) const {
  return channel_fees_.Get(index);
}
inline const ::lnrpc::ChannelFeeReport& FeeReportResponse::channel_fees(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeReportResponse.channel_fees)
  return _internal_channel_fees(index);
}
inline ::lnrpc::ChannelFeeReport* FeeReportResponse::_internal_add_channel_fees() {
  return channel_fees_.Add();
}
inline ::lnrpc::ChannelFeeReport* FeeReportResponse::add_channel_fees() {
  // @@protoc_insertion_point(field_add:lnrpc.FeeReportResponse.channel_fees)
  return _internal_add_channel_fees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelFeeReport >&
FeeReportResponse::channel_fees() const {
  // @@protoc_insertion_point(field_list:lnrpc.FeeReportResponse.channel_fees)
  return channel_fees_;
}

// uint64 day_fee_sum = 2;
inline void FeeReportResponse::clear_day_fee_sum() {
  day_fee_sum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::_internal_day_fee_sum() const {
  return day_fee_sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::day_fee_sum() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeReportResponse.day_fee_sum)
  return _internal_day_fee_sum();
}
inline void FeeReportResponse::_internal_set_day_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  day_fee_sum_ = value;
}
inline void FeeReportResponse::set_day_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_day_fee_sum(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeReportResponse.day_fee_sum)
}

// uint64 week_fee_sum = 3;
inline void FeeReportResponse::clear_week_fee_sum() {
  week_fee_sum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::_internal_week_fee_sum() const {
  return week_fee_sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::week_fee_sum() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeReportResponse.week_fee_sum)
  return _internal_week_fee_sum();
}
inline void FeeReportResponse::_internal_set_week_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  week_fee_sum_ = value;
}
inline void FeeReportResponse::set_week_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_week_fee_sum(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeReportResponse.week_fee_sum)
}

// uint64 month_fee_sum = 4;
inline void FeeReportResponse::clear_month_fee_sum() {
  month_fee_sum_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::_internal_month_fee_sum() const {
  return month_fee_sum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FeeReportResponse::month_fee_sum() const {
  // @@protoc_insertion_point(field_get:lnrpc.FeeReportResponse.month_fee_sum)
  return _internal_month_fee_sum();
}
inline void FeeReportResponse::_internal_set_month_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  month_fee_sum_ = value;
}
inline void FeeReportResponse::set_month_fee_sum(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_month_fee_sum(value);
  // @@protoc_insertion_point(field_set:lnrpc.FeeReportResponse.month_fee_sum)
}

// -------------------------------------------------------------------

// PolicyUpdateRequest

// bool global = 1;
inline bool PolicyUpdateRequest::_internal_has_global() const {
  return scope_case() == kGlobal;
}
inline void PolicyUpdateRequest::set_has_global() {
  _oneof_case_[0] = kGlobal;
}
inline void PolicyUpdateRequest::clear_global() {
  if (_internal_has_global()) {
    scope_.global_ = false;
    clear_has_scope();
  }
}
inline bool PolicyUpdateRequest::_internal_global() const {
  if (_internal_has_global()) {
    return scope_.global_;
  }
  return false;
}
inline void PolicyUpdateRequest::_internal_set_global(bool value) {
  if (!_internal_has_global()) {
    clear_scope();
    set_has_global();
  }
  scope_.global_ = value;
}
inline bool PolicyUpdateRequest::global() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.global)
  return _internal_global();
}
inline void PolicyUpdateRequest::set_global(bool value) {
  _internal_set_global(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.global)
}

// .lnrpc.ChannelPoint chan_point = 2;
inline bool PolicyUpdateRequest::_internal_has_chan_point() const {
  return scope_case() == kChanPoint;
}
inline bool PolicyUpdateRequest::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void PolicyUpdateRequest::set_has_chan_point() {
  _oneof_case_[0] = kChanPoint;
}
inline void PolicyUpdateRequest::clear_chan_point() {
  if (_internal_has_chan_point()) {
    delete scope_.chan_point_;
    clear_has_scope();
  }
}
inline ::lnrpc::ChannelPoint* PolicyUpdateRequest::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.PolicyUpdateRequest.chan_point)
  if (_internal_has_chan_point()) {
    clear_has_scope();
      ::lnrpc::ChannelPoint* temp = scope_.chan_point_;
    scope_.chan_point_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelPoint& PolicyUpdateRequest::_internal_chan_point() const {
  return _internal_has_chan_point()
      ? *scope_.chan_point_
      : *reinterpret_cast< ::lnrpc::ChannelPoint*>(&::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& PolicyUpdateRequest::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* PolicyUpdateRequest::_internal_mutable_chan_point() {
  if (!_internal_has_chan_point()) {
    clear_scope();
    set_has_chan_point();
    scope_.chan_point_ = CreateMaybeMessage< ::lnrpc::ChannelPoint >(
        GetArenaNoVirtual());
  }
  return scope_.chan_point_;
}
inline ::lnrpc::ChannelPoint* PolicyUpdateRequest::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.PolicyUpdateRequest.chan_point)
  return _internal_mutable_chan_point();
}

// int64 base_fee_msat = 3;
inline void PolicyUpdateRequest::clear_base_fee_msat() {
  base_fee_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PolicyUpdateRequest::_internal_base_fee_msat() const {
  return base_fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PolicyUpdateRequest::base_fee_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.base_fee_msat)
  return _internal_base_fee_msat();
}
inline void PolicyUpdateRequest::_internal_set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  base_fee_msat_ = value;
}
inline void PolicyUpdateRequest::set_base_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_base_fee_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.base_fee_msat)
}

// double fee_rate = 4;
inline void PolicyUpdateRequest::clear_fee_rate() {
  fee_rate_ = 0;
}
inline double PolicyUpdateRequest::_internal_fee_rate() const {
  return fee_rate_;
}
inline double PolicyUpdateRequest::fee_rate() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.fee_rate)
  return _internal_fee_rate();
}
inline void PolicyUpdateRequest::_internal_set_fee_rate(double value) {
  
  fee_rate_ = value;
}
inline void PolicyUpdateRequest::set_fee_rate(double value) {
  _internal_set_fee_rate(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.fee_rate)
}

// uint32 time_lock_delta = 5;
inline void PolicyUpdateRequest::clear_time_lock_delta() {
  time_lock_delta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyUpdateRequest::_internal_time_lock_delta() const {
  return time_lock_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyUpdateRequest::time_lock_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.time_lock_delta)
  return _internal_time_lock_delta();
}
inline void PolicyUpdateRequest::_internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_lock_delta_ = value;
}
inline void PolicyUpdateRequest::set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_lock_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.time_lock_delta)
}

// uint64 max_htlc_msat = 6;
inline void PolicyUpdateRequest::clear_max_htlc_msat() {
  max_htlc_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PolicyUpdateRequest::_internal_max_htlc_msat() const {
  return max_htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PolicyUpdateRequest::max_htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.max_htlc_msat)
  return _internal_max_htlc_msat();
}
inline void PolicyUpdateRequest::_internal_set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  max_htlc_msat_ = value;
}
inline void PolicyUpdateRequest::set_max_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_max_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.max_htlc_msat)
}

// uint64 min_htlc_msat = 7;
inline void PolicyUpdateRequest::clear_min_htlc_msat() {
  min_htlc_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PolicyUpdateRequest::_internal_min_htlc_msat() const {
  return min_htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PolicyUpdateRequest::min_htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.min_htlc_msat)
  return _internal_min_htlc_msat();
}
inline void PolicyUpdateRequest::_internal_set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  min_htlc_msat_ = value;
}
inline void PolicyUpdateRequest::set_min_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_min_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.min_htlc_msat)
}

// bool min_htlc_msat_specified = 8;
inline void PolicyUpdateRequest::clear_min_htlc_msat_specified() {
  min_htlc_msat_specified_ = false;
}
inline bool PolicyUpdateRequest::_internal_min_htlc_msat_specified() const {
  return min_htlc_msat_specified_;
}
inline bool PolicyUpdateRequest::min_htlc_msat_specified() const {
  // @@protoc_insertion_point(field_get:lnrpc.PolicyUpdateRequest.min_htlc_msat_specified)
  return _internal_min_htlc_msat_specified();
}
inline void PolicyUpdateRequest::_internal_set_min_htlc_msat_specified(bool value) {
  
  min_htlc_msat_specified_ = value;
}
inline void PolicyUpdateRequest::set_min_htlc_msat_specified(bool value) {
  _internal_set_min_htlc_msat_specified(value);
  // @@protoc_insertion_point(field_set:lnrpc.PolicyUpdateRequest.min_htlc_msat_specified)
}

inline bool PolicyUpdateRequest::has_scope() const {
  return scope_case() != SCOPE_NOT_SET;
}
inline void PolicyUpdateRequest::clear_has_scope() {
  _oneof_case_[0] = SCOPE_NOT_SET;
}
inline PolicyUpdateRequest::ScopeCase PolicyUpdateRequest::scope_case() const {
  return PolicyUpdateRequest::ScopeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PolicyUpdateResponse

// -------------------------------------------------------------------

// ForwardingHistoryRequest

// uint64 start_time = 1;
inline void ForwardingHistoryRequest::clear_start_time() {
  start_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingHistoryRequest::_internal_start_time() const {
  return start_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingHistoryRequest::start_time() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryRequest.start_time)
  return _internal_start_time();
}
inline void ForwardingHistoryRequest::_internal_set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_time_ = value;
}
inline void ForwardingHistoryRequest::set_start_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_start_time(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingHistoryRequest.start_time)
}

// uint64 end_time = 2;
inline void ForwardingHistoryRequest::clear_end_time() {
  end_time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingHistoryRequest::_internal_end_time() const {
  return end_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingHistoryRequest::end_time() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryRequest.end_time)
  return _internal_end_time();
}
inline void ForwardingHistoryRequest::_internal_set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  end_time_ = value;
}
inline void ForwardingHistoryRequest::set_end_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_end_time(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingHistoryRequest.end_time)
}

// uint32 index_offset = 3;
inline void ForwardingHistoryRequest::clear_index_offset() {
  index_offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryRequest::_internal_index_offset() const {
  return index_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryRequest::index_offset() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryRequest.index_offset)
  return _internal_index_offset();
}
inline void ForwardingHistoryRequest::_internal_set_index_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_offset_ = value;
}
inline void ForwardingHistoryRequest::set_index_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index_offset(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingHistoryRequest.index_offset)
}

// uint32 num_max_events = 4;
inline void ForwardingHistoryRequest::clear_num_max_events() {
  num_max_events_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryRequest::_internal_num_max_events() const {
  return num_max_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryRequest::num_max_events() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryRequest.num_max_events)
  return _internal_num_max_events();
}
inline void ForwardingHistoryRequest::_internal_set_num_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_max_events_ = value;
}
inline void ForwardingHistoryRequest::set_num_max_events(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_max_events(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingHistoryRequest.num_max_events)
}

// -------------------------------------------------------------------

// ForwardingEvent

// uint64 timestamp = 1 [deprecated = true];
inline void ForwardingEvent::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.timestamp)
  return _internal_timestamp();
}
inline void ForwardingEvent::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
}
inline void ForwardingEvent::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.timestamp)
}

// uint64 chan_id_in = 2 [jstype = JS_STRING];
inline void ForwardingEvent::clear_chan_id_in() {
  chan_id_in_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_chan_id_in() const {
  return chan_id_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::chan_id_in() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.chan_id_in)
  return _internal_chan_id_in();
}
inline void ForwardingEvent::_internal_set_chan_id_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_in_ = value;
}
inline void ForwardingEvent::set_chan_id_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id_in(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.chan_id_in)
}

// uint64 chan_id_out = 4 [jstype = JS_STRING];
inline void ForwardingEvent::clear_chan_id_out() {
  chan_id_out_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_chan_id_out() const {
  return chan_id_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::chan_id_out() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.chan_id_out)
  return _internal_chan_id_out();
}
inline void ForwardingEvent::_internal_set_chan_id_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_out_ = value;
}
inline void ForwardingEvent::set_chan_id_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id_out(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.chan_id_out)
}

// uint64 amt_in = 5;
inline void ForwardingEvent::clear_amt_in() {
  amt_in_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_amt_in() const {
  return amt_in_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::amt_in() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.amt_in)
  return _internal_amt_in();
}
inline void ForwardingEvent::_internal_set_amt_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amt_in_ = value;
}
inline void ForwardingEvent::set_amt_in(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amt_in(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.amt_in)
}

// uint64 amt_out = 6;
inline void ForwardingEvent::clear_amt_out() {
  amt_out_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_amt_out() const {
  return amt_out_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::amt_out() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.amt_out)
  return _internal_amt_out();
}
inline void ForwardingEvent::_internal_set_amt_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amt_out_ = value;
}
inline void ForwardingEvent::set_amt_out(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amt_out(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.amt_out)
}

// uint64 fee = 7;
inline void ForwardingEvent::clear_fee() {
  fee_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.fee)
  return _internal_fee();
}
inline void ForwardingEvent::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_ = value;
}
inline void ForwardingEvent::set_fee(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.fee)
}

// uint64 fee_msat = 8;
inline void ForwardingEvent::clear_fee_msat() {
  fee_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_fee_msat() const {
  return fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::fee_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.fee_msat)
  return _internal_fee_msat();
}
inline void ForwardingEvent::_internal_set_fee_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  fee_msat_ = value;
}
inline void ForwardingEvent::set_fee_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fee_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.fee_msat)
}

// uint64 amt_in_msat = 9;
inline void ForwardingEvent::clear_amt_in_msat() {
  amt_in_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_amt_in_msat() const {
  return amt_in_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::amt_in_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.amt_in_msat)
  return _internal_amt_in_msat();
}
inline void ForwardingEvent::_internal_set_amt_in_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amt_in_msat_ = value;
}
inline void ForwardingEvent::set_amt_in_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amt_in_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.amt_in_msat)
}

// uint64 amt_out_msat = 10;
inline void ForwardingEvent::clear_amt_out_msat() {
  amt_out_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_amt_out_msat() const {
  return amt_out_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::amt_out_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.amt_out_msat)
  return _internal_amt_out_msat();
}
inline void ForwardingEvent::_internal_set_amt_out_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amt_out_msat_ = value;
}
inline void ForwardingEvent::set_amt_out_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amt_out_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.amt_out_msat)
}

// uint64 timestamp_ns = 11;
inline void ForwardingEvent::clear_timestamp_ns() {
  timestamp_ns_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::_internal_timestamp_ns() const {
  return timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ForwardingEvent::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingEvent.timestamp_ns)
  return _internal_timestamp_ns();
}
inline void ForwardingEvent::_internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ns_ = value;
}
inline void ForwardingEvent::set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingEvent.timestamp_ns)
}

// -------------------------------------------------------------------

// ForwardingHistoryResponse

// repeated .lnrpc.ForwardingEvent forwarding_events = 1;
inline int ForwardingHistoryResponse::_internal_forwarding_events_size() const {
  return forwarding_events_.size();
}
inline int ForwardingHistoryResponse::forwarding_events_size() const {
  return _internal_forwarding_events_size();
}
inline void ForwardingHistoryResponse::clear_forwarding_events() {
  forwarding_events_.Clear();
}
inline ::lnrpc::ForwardingEvent* ForwardingHistoryResponse::mutable_forwarding_events(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ForwardingHistoryResponse.forwarding_events)
  return forwarding_events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ForwardingEvent >*
ForwardingHistoryResponse::mutable_forwarding_events() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ForwardingHistoryResponse.forwarding_events)
  return &forwarding_events_;
}
inline const ::lnrpc::ForwardingEvent& ForwardingHistoryResponse::_internal_forwarding_events(int index) const {
  return forwarding_events_.Get(index);
}
inline const ::lnrpc::ForwardingEvent& ForwardingHistoryResponse::forwarding_events(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryResponse.forwarding_events)
  return _internal_forwarding_events(index);
}
inline ::lnrpc::ForwardingEvent* ForwardingHistoryResponse::_internal_add_forwarding_events() {
  return forwarding_events_.Add();
}
inline ::lnrpc::ForwardingEvent* ForwardingHistoryResponse::add_forwarding_events() {
  // @@protoc_insertion_point(field_add:lnrpc.ForwardingHistoryResponse.forwarding_events)
  return _internal_add_forwarding_events();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ForwardingEvent >&
ForwardingHistoryResponse::forwarding_events() const {
  // @@protoc_insertion_point(field_list:lnrpc.ForwardingHistoryResponse.forwarding_events)
  return forwarding_events_;
}

// uint32 last_offset_index = 2;
inline void ForwardingHistoryResponse::clear_last_offset_index() {
  last_offset_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryResponse::_internal_last_offset_index() const {
  return last_offset_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ForwardingHistoryResponse::last_offset_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.ForwardingHistoryResponse.last_offset_index)
  return _internal_last_offset_index();
}
inline void ForwardingHistoryResponse::_internal_set_last_offset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  last_offset_index_ = value;
}
inline void ForwardingHistoryResponse::set_last_offset_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_last_offset_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.ForwardingHistoryResponse.last_offset_index)
}

// -------------------------------------------------------------------

// ExportChannelBackupRequest

// .lnrpc.ChannelPoint chan_point = 1;
inline bool ExportChannelBackupRequest::_internal_has_chan_point() const {
  return this != internal_default_instance() && chan_point_ != nullptr;
}
inline bool ExportChannelBackupRequest::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void ExportChannelBackupRequest::clear_chan_point() {
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ExportChannelBackupRequest::_internal_chan_point() const {
  const ::lnrpc::ChannelPoint* p = chan_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ExportChannelBackupRequest::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ExportChannelBackupRequest.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* ExportChannelBackupRequest::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ExportChannelBackupRequest.chan_point)
  
  ::lnrpc::ChannelPoint* temp = chan_point_;
  chan_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ExportChannelBackupRequest::_internal_mutable_chan_point() {
  
  if (chan_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    chan_point_ = p;
  }
  return chan_point_;
}
inline ::lnrpc::ChannelPoint* ExportChannelBackupRequest::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ExportChannelBackupRequest.chan_point)
  return _internal_mutable_chan_point();
}
inline void ExportChannelBackupRequest::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chan_point_;
  }
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    
  } else {
    
  }
  chan_point_ = chan_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ExportChannelBackupRequest.chan_point)
}

// -------------------------------------------------------------------

// ChannelBackup

// .lnrpc.ChannelPoint chan_point = 1;
inline bool ChannelBackup::_internal_has_chan_point() const {
  return this != internal_default_instance() && chan_point_ != nullptr;
}
inline bool ChannelBackup::has_chan_point() const {
  return _internal_has_chan_point();
}
inline void ChannelBackup::clear_chan_point() {
  if (GetArenaNoVirtual() == nullptr && chan_point_ != nullptr) {
    delete chan_point_;
  }
  chan_point_ = nullptr;
}
inline const ::lnrpc::ChannelPoint& ChannelBackup::_internal_chan_point() const {
  const ::lnrpc::ChannelPoint* p = chan_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelPoint*>(
      &::lnrpc::_ChannelPoint_default_instance_);
}
inline const ::lnrpc::ChannelPoint& ChannelBackup::chan_point() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBackup.chan_point)
  return _internal_chan_point();
}
inline ::lnrpc::ChannelPoint* ChannelBackup::release_chan_point() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBackup.chan_point)
  
  ::lnrpc::ChannelPoint* temp = chan_point_;
  chan_point_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelPoint* ChannelBackup::_internal_mutable_chan_point() {
  
  if (chan_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelPoint>(GetArenaNoVirtual());
    chan_point_ = p;
  }
  return chan_point_;
}
inline ::lnrpc::ChannelPoint* ChannelBackup::mutable_chan_point() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBackup.chan_point)
  return _internal_mutable_chan_point();
}
inline void ChannelBackup::set_allocated_chan_point(::lnrpc::ChannelPoint* chan_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete chan_point_;
  }
  if (chan_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      chan_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chan_point, submessage_arena);
    }
    
  } else {
    
  }
  chan_point_ = chan_point;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBackup.chan_point)
}

// bytes chan_backup = 2;
inline void ChannelBackup::clear_chan_backup() {
  chan_backup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelBackup::chan_backup() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBackup.chan_backup)
  return _internal_chan_backup();
}
inline void ChannelBackup::set_chan_backup(const std::string& value) {
  _internal_set_chan_backup(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelBackup.chan_backup)
}
inline std::string* ChannelBackup::mutable_chan_backup() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBackup.chan_backup)
  return _internal_mutable_chan_backup();
}
inline const std::string& ChannelBackup::_internal_chan_backup() const {
  return chan_backup_.GetNoArena();
}
inline void ChannelBackup::_internal_set_chan_backup(const std::string& value) {
  
  chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelBackup::set_chan_backup(std::string&& value) {
  
  chan_backup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelBackup.chan_backup)
}
inline void ChannelBackup::set_chan_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelBackup.chan_backup)
}
inline void ChannelBackup::set_chan_backup(const void* value, size_t size) {
  
  chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelBackup.chan_backup)
}
inline std::string* ChannelBackup::_internal_mutable_chan_backup() {
  
  return chan_backup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelBackup::release_chan_backup() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelBackup.chan_backup)
  
  return chan_backup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelBackup::set_allocated_chan_backup(std::string* chan_backup) {
  if (chan_backup != nullptr) {
    
  } else {
    
  }
  chan_backup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chan_backup);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelBackup.chan_backup)
}

// -------------------------------------------------------------------

// MultiChanBackup

// repeated .lnrpc.ChannelPoint chan_points = 1;
inline int MultiChanBackup::_internal_chan_points_size() const {
  return chan_points_.size();
}
inline int MultiChanBackup::chan_points_size() const {
  return _internal_chan_points_size();
}
inline void MultiChanBackup::clear_chan_points() {
  chan_points_.Clear();
}
inline ::lnrpc::ChannelPoint* MultiChanBackup::mutable_chan_points(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.MultiChanBackup.chan_points)
  return chan_points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelPoint >*
MultiChanBackup::mutable_chan_points() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.MultiChanBackup.chan_points)
  return &chan_points_;
}
inline const ::lnrpc::ChannelPoint& MultiChanBackup::_internal_chan_points(int index) const {
  return chan_points_.Get(index);
}
inline const ::lnrpc::ChannelPoint& MultiChanBackup::chan_points(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.MultiChanBackup.chan_points)
  return _internal_chan_points(index);
}
inline ::lnrpc::ChannelPoint* MultiChanBackup::_internal_add_chan_points() {
  return chan_points_.Add();
}
inline ::lnrpc::ChannelPoint* MultiChanBackup::add_chan_points() {
  // @@protoc_insertion_point(field_add:lnrpc.MultiChanBackup.chan_points)
  return _internal_add_chan_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelPoint >&
MultiChanBackup::chan_points() const {
  // @@protoc_insertion_point(field_list:lnrpc.MultiChanBackup.chan_points)
  return chan_points_;
}

// bytes multi_chan_backup = 2;
inline void MultiChanBackup::clear_multi_chan_backup() {
  multi_chan_backup_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MultiChanBackup::multi_chan_backup() const {
  // @@protoc_insertion_point(field_get:lnrpc.MultiChanBackup.multi_chan_backup)
  return _internal_multi_chan_backup();
}
inline void MultiChanBackup::set_multi_chan_backup(const std::string& value) {
  _internal_set_multi_chan_backup(value);
  // @@protoc_insertion_point(field_set:lnrpc.MultiChanBackup.multi_chan_backup)
}
inline std::string* MultiChanBackup::mutable_multi_chan_backup() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MultiChanBackup.multi_chan_backup)
  return _internal_mutable_multi_chan_backup();
}
inline const std::string& MultiChanBackup::_internal_multi_chan_backup() const {
  return multi_chan_backup_.GetNoArena();
}
inline void MultiChanBackup::_internal_set_multi_chan_backup(const std::string& value) {
  
  multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MultiChanBackup::set_multi_chan_backup(std::string&& value) {
  
  multi_chan_backup_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MultiChanBackup.multi_chan_backup)
}
inline void MultiChanBackup::set_multi_chan_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MultiChanBackup.multi_chan_backup)
}
inline void MultiChanBackup::set_multi_chan_backup(const void* value, size_t size) {
  
  multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MultiChanBackup.multi_chan_backup)
}
inline std::string* MultiChanBackup::_internal_mutable_multi_chan_backup() {
  
  return multi_chan_backup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MultiChanBackup::release_multi_chan_backup() {
  // @@protoc_insertion_point(field_release:lnrpc.MultiChanBackup.multi_chan_backup)
  
  return multi_chan_backup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MultiChanBackup::set_allocated_multi_chan_backup(std::string* multi_chan_backup) {
  if (multi_chan_backup != nullptr) {
    
  } else {
    
  }
  multi_chan_backup_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), multi_chan_backup);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MultiChanBackup.multi_chan_backup)
}

// -------------------------------------------------------------------

// ChanBackupExportRequest

// -------------------------------------------------------------------

// ChanBackupSnapshot

// .lnrpc.ChannelBackups single_chan_backups = 1;
inline bool ChanBackupSnapshot::_internal_has_single_chan_backups() const {
  return this != internal_default_instance() && single_chan_backups_ != nullptr;
}
inline bool ChanBackupSnapshot::has_single_chan_backups() const {
  return _internal_has_single_chan_backups();
}
inline void ChanBackupSnapshot::clear_single_chan_backups() {
  if (GetArenaNoVirtual() == nullptr && single_chan_backups_ != nullptr) {
    delete single_chan_backups_;
  }
  single_chan_backups_ = nullptr;
}
inline const ::lnrpc::ChannelBackups& ChanBackupSnapshot::_internal_single_chan_backups() const {
  const ::lnrpc::ChannelBackups* p = single_chan_backups_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelBackups*>(
      &::lnrpc::_ChannelBackups_default_instance_);
}
inline const ::lnrpc::ChannelBackups& ChanBackupSnapshot::single_chan_backups() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanBackupSnapshot.single_chan_backups)
  return _internal_single_chan_backups();
}
inline ::lnrpc::ChannelBackups* ChanBackupSnapshot::release_single_chan_backups() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanBackupSnapshot.single_chan_backups)
  
  ::lnrpc::ChannelBackups* temp = single_chan_backups_;
  single_chan_backups_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelBackups* ChanBackupSnapshot::_internal_mutable_single_chan_backups() {
  
  if (single_chan_backups_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelBackups>(GetArenaNoVirtual());
    single_chan_backups_ = p;
  }
  return single_chan_backups_;
}
inline ::lnrpc::ChannelBackups* ChanBackupSnapshot::mutable_single_chan_backups() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanBackupSnapshot.single_chan_backups)
  return _internal_mutable_single_chan_backups();
}
inline void ChanBackupSnapshot::set_allocated_single_chan_backups(::lnrpc::ChannelBackups* single_chan_backups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete single_chan_backups_;
  }
  if (single_chan_backups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      single_chan_backups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, single_chan_backups, submessage_arena);
    }
    
  } else {
    
  }
  single_chan_backups_ = single_chan_backups;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanBackupSnapshot.single_chan_backups)
}

// .lnrpc.MultiChanBackup multi_chan_backup = 2;
inline bool ChanBackupSnapshot::_internal_has_multi_chan_backup() const {
  return this != internal_default_instance() && multi_chan_backup_ != nullptr;
}
inline bool ChanBackupSnapshot::has_multi_chan_backup() const {
  return _internal_has_multi_chan_backup();
}
inline void ChanBackupSnapshot::clear_multi_chan_backup() {
  if (GetArenaNoVirtual() == nullptr && multi_chan_backup_ != nullptr) {
    delete multi_chan_backup_;
  }
  multi_chan_backup_ = nullptr;
}
inline const ::lnrpc::MultiChanBackup& ChanBackupSnapshot::_internal_multi_chan_backup() const {
  const ::lnrpc::MultiChanBackup* p = multi_chan_backup_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::MultiChanBackup*>(
      &::lnrpc::_MultiChanBackup_default_instance_);
}
inline const ::lnrpc::MultiChanBackup& ChanBackupSnapshot::multi_chan_backup() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChanBackupSnapshot.multi_chan_backup)
  return _internal_multi_chan_backup();
}
inline ::lnrpc::MultiChanBackup* ChanBackupSnapshot::release_multi_chan_backup() {
  // @@protoc_insertion_point(field_release:lnrpc.ChanBackupSnapshot.multi_chan_backup)
  
  ::lnrpc::MultiChanBackup* temp = multi_chan_backup_;
  multi_chan_backup_ = nullptr;
  return temp;
}
inline ::lnrpc::MultiChanBackup* ChanBackupSnapshot::_internal_mutable_multi_chan_backup() {
  
  if (multi_chan_backup_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::MultiChanBackup>(GetArenaNoVirtual());
    multi_chan_backup_ = p;
  }
  return multi_chan_backup_;
}
inline ::lnrpc::MultiChanBackup* ChanBackupSnapshot::mutable_multi_chan_backup() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChanBackupSnapshot.multi_chan_backup)
  return _internal_mutable_multi_chan_backup();
}
inline void ChanBackupSnapshot::set_allocated_multi_chan_backup(::lnrpc::MultiChanBackup* multi_chan_backup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete multi_chan_backup_;
  }
  if (multi_chan_backup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      multi_chan_backup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multi_chan_backup, submessage_arena);
    }
    
  } else {
    
  }
  multi_chan_backup_ = multi_chan_backup;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChanBackupSnapshot.multi_chan_backup)
}

// -------------------------------------------------------------------

// ChannelBackups

// repeated .lnrpc.ChannelBackup chan_backups = 1;
inline int ChannelBackups::_internal_chan_backups_size() const {
  return chan_backups_.size();
}
inline int ChannelBackups::chan_backups_size() const {
  return _internal_chan_backups_size();
}
inline void ChannelBackups::clear_chan_backups() {
  chan_backups_.Clear();
}
inline ::lnrpc::ChannelBackup* ChannelBackups::mutable_chan_backups(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelBackups.chan_backups)
  return chan_backups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelBackup >*
ChannelBackups::mutable_chan_backups() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ChannelBackups.chan_backups)
  return &chan_backups_;
}
inline const ::lnrpc::ChannelBackup& ChannelBackups::_internal_chan_backups(int index) const {
  return chan_backups_.Get(index);
}
inline const ::lnrpc::ChannelBackup& ChannelBackups::chan_backups(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelBackups.chan_backups)
  return _internal_chan_backups(index);
}
inline ::lnrpc::ChannelBackup* ChannelBackups::_internal_add_chan_backups() {
  return chan_backups_.Add();
}
inline ::lnrpc::ChannelBackup* ChannelBackups::add_chan_backups() {
  // @@protoc_insertion_point(field_add:lnrpc.ChannelBackups.chan_backups)
  return _internal_add_chan_backups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::ChannelBackup >&
ChannelBackups::chan_backups() const {
  // @@protoc_insertion_point(field_list:lnrpc.ChannelBackups.chan_backups)
  return chan_backups_;
}

// -------------------------------------------------------------------

// RestoreChanBackupRequest

// .lnrpc.ChannelBackups chan_backups = 1;
inline bool RestoreChanBackupRequest::_internal_has_chan_backups() const {
  return backup_case() == kChanBackups;
}
inline bool RestoreChanBackupRequest::has_chan_backups() const {
  return _internal_has_chan_backups();
}
inline void RestoreChanBackupRequest::set_has_chan_backups() {
  _oneof_case_[0] = kChanBackups;
}
inline void RestoreChanBackupRequest::clear_chan_backups() {
  if (_internal_has_chan_backups()) {
    delete backup_.chan_backups_;
    clear_has_backup();
  }
}
inline ::lnrpc::ChannelBackups* RestoreChanBackupRequest::release_chan_backups() {
  // @@protoc_insertion_point(field_release:lnrpc.RestoreChanBackupRequest.chan_backups)
  if (_internal_has_chan_backups()) {
    clear_has_backup();
      ::lnrpc::ChannelBackups* temp = backup_.chan_backups_;
    backup_.chan_backups_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lnrpc::ChannelBackups& RestoreChanBackupRequest::_internal_chan_backups() const {
  return _internal_has_chan_backups()
      ? *backup_.chan_backups_
      : *reinterpret_cast< ::lnrpc::ChannelBackups*>(&::lnrpc::_ChannelBackups_default_instance_);
}
inline const ::lnrpc::ChannelBackups& RestoreChanBackupRequest::chan_backups() const {
  // @@protoc_insertion_point(field_get:lnrpc.RestoreChanBackupRequest.chan_backups)
  return _internal_chan_backups();
}
inline ::lnrpc::ChannelBackups* RestoreChanBackupRequest::_internal_mutable_chan_backups() {
  if (!_internal_has_chan_backups()) {
    clear_backup();
    set_has_chan_backups();
    backup_.chan_backups_ = CreateMaybeMessage< ::lnrpc::ChannelBackups >(
        GetArenaNoVirtual());
  }
  return backup_.chan_backups_;
}
inline ::lnrpc::ChannelBackups* RestoreChanBackupRequest::mutable_chan_backups() {
  // @@protoc_insertion_point(field_mutable:lnrpc.RestoreChanBackupRequest.chan_backups)
  return _internal_mutable_chan_backups();
}

// bytes multi_chan_backup = 2;
inline bool RestoreChanBackupRequest::_internal_has_multi_chan_backup() const {
  return backup_case() == kMultiChanBackup;
}
inline void RestoreChanBackupRequest::set_has_multi_chan_backup() {
  _oneof_case_[0] = kMultiChanBackup;
}
inline void RestoreChanBackupRequest::clear_multi_chan_backup() {
  if (_internal_has_multi_chan_backup()) {
    backup_.multi_chan_backup_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_backup();
  }
}
inline const std::string& RestoreChanBackupRequest::multi_chan_backup() const {
  // @@protoc_insertion_point(field_get:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
  return _internal_multi_chan_backup();
}
inline void RestoreChanBackupRequest::set_multi_chan_backup(const std::string& value) {
  _internal_set_multi_chan_backup(value);
  // @@protoc_insertion_point(field_set:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
}
inline std::string* RestoreChanBackupRequest::mutable_multi_chan_backup() {
  // @@protoc_insertion_point(field_mutable:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
  return _internal_mutable_multi_chan_backup();
}
inline const std::string& RestoreChanBackupRequest::_internal_multi_chan_backup() const {
  if (_internal_has_multi_chan_backup()) {
    return backup_.multi_chan_backup_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void RestoreChanBackupRequest::_internal_set_multi_chan_backup(const std::string& value) {
  if (!_internal_has_multi_chan_backup()) {
    clear_backup();
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  backup_.multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RestoreChanBackupRequest::set_multi_chan_backup(std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
  if (!_internal_has_multi_chan_backup()) {
    clear_backup();
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  backup_.multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
}
inline void RestoreChanBackupRequest::set_multi_chan_backup(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_multi_chan_backup()) {
    clear_backup();
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  backup_.multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
}
inline void RestoreChanBackupRequest::set_multi_chan_backup(const void* value, size_t size) {
  if (!_internal_has_multi_chan_backup()) {
    clear_backup();
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  backup_.multi_chan_backup_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
}
inline std::string* RestoreChanBackupRequest::_internal_mutable_multi_chan_backup() {
  if (!_internal_has_multi_chan_backup()) {
    clear_backup();
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return backup_.multi_chan_backup_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RestoreChanBackupRequest::release_multi_chan_backup() {
  // @@protoc_insertion_point(field_release:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
  if (_internal_has_multi_chan_backup()) {
    clear_has_backup();
    return backup_.multi_chan_backup_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void RestoreChanBackupRequest::set_allocated_multi_chan_backup(std::string* multi_chan_backup) {
  if (has_backup()) {
    clear_backup();
  }
  if (multi_chan_backup != nullptr) {
    set_has_multi_chan_backup();
    backup_.multi_chan_backup_.UnsafeSetDefault(multi_chan_backup);
  }
  // @@protoc_insertion_point(field_set_allocated:lnrpc.RestoreChanBackupRequest.multi_chan_backup)
}

inline bool RestoreChanBackupRequest::has_backup() const {
  return backup_case() != BACKUP_NOT_SET;
}
inline void RestoreChanBackupRequest::clear_has_backup() {
  _oneof_case_[0] = BACKUP_NOT_SET;
}
inline RestoreChanBackupRequest::BackupCase RestoreChanBackupRequest::backup_case() const {
  return RestoreChanBackupRequest::BackupCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RestoreBackupResponse

// -------------------------------------------------------------------

// ChannelBackupSubscription

// -------------------------------------------------------------------

// VerifyChanBackupResponse

// -------------------------------------------------------------------

// MacaroonPermission

// string entity = 1;
inline void MacaroonPermission::clear_entity() {
  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MacaroonPermission::entity() const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonPermission.entity)
  return _internal_entity();
}
inline void MacaroonPermission::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:lnrpc.MacaroonPermission.entity)
}
inline std::string* MacaroonPermission::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonPermission.entity)
  return _internal_mutable_entity();
}
inline const std::string& MacaroonPermission::_internal_entity() const {
  return entity_.GetNoArena();
}
inline void MacaroonPermission::_internal_set_entity(const std::string& value) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MacaroonPermission::set_entity(std::string&& value) {
  
  entity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MacaroonPermission.entity)
}
inline void MacaroonPermission::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MacaroonPermission.entity)
}
inline void MacaroonPermission::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MacaroonPermission.entity)
}
inline std::string* MacaroonPermission::_internal_mutable_entity() {
  
  return entity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MacaroonPermission::release_entity() {
  // @@protoc_insertion_point(field_release:lnrpc.MacaroonPermission.entity)
  
  return entity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MacaroonPermission::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MacaroonPermission.entity)
}

// string action = 2;
inline void MacaroonPermission::clear_action() {
  action_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MacaroonPermission::action() const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonPermission.action)
  return _internal_action();
}
inline void MacaroonPermission::set_action(const std::string& value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:lnrpc.MacaroonPermission.action)
}
inline std::string* MacaroonPermission::mutable_action() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonPermission.action)
  return _internal_mutable_action();
}
inline const std::string& MacaroonPermission::_internal_action() const {
  return action_.GetNoArena();
}
inline void MacaroonPermission::_internal_set_action(const std::string& value) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MacaroonPermission::set_action(std::string&& value) {
  
  action_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MacaroonPermission.action)
}
inline void MacaroonPermission::set_action(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MacaroonPermission.action)
}
inline void MacaroonPermission::set_action(const char* value, size_t size) {
  
  action_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MacaroonPermission.action)
}
inline std::string* MacaroonPermission::_internal_mutable_action() {
  
  return action_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MacaroonPermission::release_action() {
  // @@protoc_insertion_point(field_release:lnrpc.MacaroonPermission.action)
  
  return action_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MacaroonPermission::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MacaroonPermission.action)
}

// -------------------------------------------------------------------

// BakeMacaroonRequest

// repeated .lnrpc.MacaroonPermission permissions = 1;
inline int BakeMacaroonRequest::_internal_permissions_size() const {
  return permissions_.size();
}
inline int BakeMacaroonRequest::permissions_size() const {
  return _internal_permissions_size();
}
inline void BakeMacaroonRequest::clear_permissions() {
  permissions_.Clear();
}
inline ::lnrpc::MacaroonPermission* BakeMacaroonRequest::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.BakeMacaroonRequest.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >*
BakeMacaroonRequest::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.BakeMacaroonRequest.permissions)
  return &permissions_;
}
inline const ::lnrpc::MacaroonPermission& BakeMacaroonRequest::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::lnrpc::MacaroonPermission& BakeMacaroonRequest::permissions(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.BakeMacaroonRequest.permissions)
  return _internal_permissions(index);
}
inline ::lnrpc::MacaroonPermission* BakeMacaroonRequest::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::lnrpc::MacaroonPermission* BakeMacaroonRequest::add_permissions() {
  // @@protoc_insertion_point(field_add:lnrpc.BakeMacaroonRequest.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >&
BakeMacaroonRequest::permissions() const {
  // @@protoc_insertion_point(field_list:lnrpc.BakeMacaroonRequest.permissions)
  return permissions_;
}

// uint64 root_key_id = 2;
inline void BakeMacaroonRequest::clear_root_key_id() {
  root_key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BakeMacaroonRequest::_internal_root_key_id() const {
  return root_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BakeMacaroonRequest::root_key_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.BakeMacaroonRequest.root_key_id)
  return _internal_root_key_id();
}
inline void BakeMacaroonRequest::_internal_set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  root_key_id_ = value;
}
inline void BakeMacaroonRequest::set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_root_key_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.BakeMacaroonRequest.root_key_id)
}

// -------------------------------------------------------------------

// BakeMacaroonResponse

// string macaroon = 1;
inline void BakeMacaroonResponse::clear_macaroon() {
  macaroon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BakeMacaroonResponse::macaroon() const {
  // @@protoc_insertion_point(field_get:lnrpc.BakeMacaroonResponse.macaroon)
  return _internal_macaroon();
}
inline void BakeMacaroonResponse::set_macaroon(const std::string& value) {
  _internal_set_macaroon(value);
  // @@protoc_insertion_point(field_set:lnrpc.BakeMacaroonResponse.macaroon)
}
inline std::string* BakeMacaroonResponse::mutable_macaroon() {
  // @@protoc_insertion_point(field_mutable:lnrpc.BakeMacaroonResponse.macaroon)
  return _internal_mutable_macaroon();
}
inline const std::string& BakeMacaroonResponse::_internal_macaroon() const {
  return macaroon_.GetNoArena();
}
inline void BakeMacaroonResponse::_internal_set_macaroon(const std::string& value) {
  
  macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BakeMacaroonResponse::set_macaroon(std::string&& value) {
  
  macaroon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.BakeMacaroonResponse.macaroon)
}
inline void BakeMacaroonResponse::set_macaroon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.BakeMacaroonResponse.macaroon)
}
inline void BakeMacaroonResponse::set_macaroon(const char* value, size_t size) {
  
  macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.BakeMacaroonResponse.macaroon)
}
inline std::string* BakeMacaroonResponse::_internal_mutable_macaroon() {
  
  return macaroon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BakeMacaroonResponse::release_macaroon() {
  // @@protoc_insertion_point(field_release:lnrpc.BakeMacaroonResponse.macaroon)
  
  return macaroon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BakeMacaroonResponse::set_allocated_macaroon(std::string* macaroon) {
  if (macaroon != nullptr) {
    
  } else {
    
  }
  macaroon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaroon);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.BakeMacaroonResponse.macaroon)
}

// -------------------------------------------------------------------

// ListMacaroonIDsRequest

// -------------------------------------------------------------------

// ListMacaroonIDsResponse

// repeated uint64 root_key_ids = 1;
inline int ListMacaroonIDsResponse::_internal_root_key_ids_size() const {
  return root_key_ids_.size();
}
inline int ListMacaroonIDsResponse::root_key_ids_size() const {
  return _internal_root_key_ids_size();
}
inline void ListMacaroonIDsResponse::clear_root_key_ids() {
  root_key_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListMacaroonIDsResponse::_internal_root_key_ids(int index) const {
  return root_key_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ListMacaroonIDsResponse::root_key_ids(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.ListMacaroonIDsResponse.root_key_ids)
  return _internal_root_key_ids(index);
}
inline void ListMacaroonIDsResponse::set_root_key_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  root_key_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:lnrpc.ListMacaroonIDsResponse.root_key_ids)
}
inline void ListMacaroonIDsResponse::_internal_add_root_key_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  root_key_ids_.Add(value);
}
inline void ListMacaroonIDsResponse::add_root_key_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_root_key_ids(value);
  // @@protoc_insertion_point(field_add:lnrpc.ListMacaroonIDsResponse.root_key_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ListMacaroonIDsResponse::_internal_root_key_ids() const {
  return root_key_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
ListMacaroonIDsResponse::root_key_ids() const {
  // @@protoc_insertion_point(field_list:lnrpc.ListMacaroonIDsResponse.root_key_ids)
  return _internal_root_key_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ListMacaroonIDsResponse::_internal_mutable_root_key_ids() {
  return &root_key_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
ListMacaroonIDsResponse::mutable_root_key_ids() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.ListMacaroonIDsResponse.root_key_ids)
  return _internal_mutable_root_key_ids();
}

// -------------------------------------------------------------------

// DeleteMacaroonIDRequest

// uint64 root_key_id = 1;
inline void DeleteMacaroonIDRequest::clear_root_key_id() {
  root_key_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMacaroonIDRequest::_internal_root_key_id() const {
  return root_key_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteMacaroonIDRequest::root_key_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.DeleteMacaroonIDRequest.root_key_id)
  return _internal_root_key_id();
}
inline void DeleteMacaroonIDRequest::_internal_set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  root_key_id_ = value;
}
inline void DeleteMacaroonIDRequest::set_root_key_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_root_key_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.DeleteMacaroonIDRequest.root_key_id)
}

// -------------------------------------------------------------------

// DeleteMacaroonIDResponse

// bool deleted = 1;
inline void DeleteMacaroonIDResponse::clear_deleted() {
  deleted_ = false;
}
inline bool DeleteMacaroonIDResponse::_internal_deleted() const {
  return deleted_;
}
inline bool DeleteMacaroonIDResponse::deleted() const {
  // @@protoc_insertion_point(field_get:lnrpc.DeleteMacaroonIDResponse.deleted)
  return _internal_deleted();
}
inline void DeleteMacaroonIDResponse::_internal_set_deleted(bool value) {
  
  deleted_ = value;
}
inline void DeleteMacaroonIDResponse::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:lnrpc.DeleteMacaroonIDResponse.deleted)
}

// -------------------------------------------------------------------

// MacaroonPermissionList

// repeated .lnrpc.MacaroonPermission permissions = 1;
inline int MacaroonPermissionList::_internal_permissions_size() const {
  return permissions_.size();
}
inline int MacaroonPermissionList::permissions_size() const {
  return _internal_permissions_size();
}
inline void MacaroonPermissionList::clear_permissions() {
  permissions_.Clear();
}
inline ::lnrpc::MacaroonPermission* MacaroonPermissionList::mutable_permissions(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonPermissionList.permissions)
  return permissions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >*
MacaroonPermissionList::mutable_permissions() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.MacaroonPermissionList.permissions)
  return &permissions_;
}
inline const ::lnrpc::MacaroonPermission& MacaroonPermissionList::_internal_permissions(int index) const {
  return permissions_.Get(index);
}
inline const ::lnrpc::MacaroonPermission& MacaroonPermissionList::permissions(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonPermissionList.permissions)
  return _internal_permissions(index);
}
inline ::lnrpc::MacaroonPermission* MacaroonPermissionList::_internal_add_permissions() {
  return permissions_.Add();
}
inline ::lnrpc::MacaroonPermission* MacaroonPermissionList::add_permissions() {
  // @@protoc_insertion_point(field_add:lnrpc.MacaroonPermissionList.permissions)
  return _internal_add_permissions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::MacaroonPermission >&
MacaroonPermissionList::permissions() const {
  // @@protoc_insertion_point(field_list:lnrpc.MacaroonPermissionList.permissions)
  return permissions_;
}

// -------------------------------------------------------------------

// ListPermissionsRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListPermissionsResponse

// map<string, .lnrpc.MacaroonPermissionList> method_permissions = 1;
inline int ListPermissionsResponse::_internal_method_permissions_size() const {
  return method_permissions_.size();
}
inline int ListPermissionsResponse::method_permissions_size() const {
  return _internal_method_permissions_size();
}
inline void ListPermissionsResponse::clear_method_permissions() {
  method_permissions_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >&
ListPermissionsResponse::_internal_method_permissions() const {
  return method_permissions_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >&
ListPermissionsResponse::method_permissions() const {
  // @@protoc_insertion_point(field_map:lnrpc.ListPermissionsResponse.method_permissions)
  return _internal_method_permissions();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >*
ListPermissionsResponse::_internal_mutable_method_permissions() {
  return method_permissions_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::lnrpc::MacaroonPermissionList >*
ListPermissionsResponse::mutable_method_permissions() {
  // @@protoc_insertion_point(field_mutable_map:lnrpc.ListPermissionsResponse.method_permissions)
  return _internal_mutable_method_permissions();
}

// -------------------------------------------------------------------

// Failure

// .lnrpc.Failure.FailureCode code = 1;
inline void Failure::clear_code() {
  code_ = 0;
}
inline ::lnrpc::Failure_FailureCode Failure::_internal_code() const {
  return static_cast< ::lnrpc::Failure_FailureCode >(code_);
}
inline ::lnrpc::Failure_FailureCode Failure::code() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.code)
  return _internal_code();
}
inline void Failure::_internal_set_code(::lnrpc::Failure_FailureCode value) {
  
  code_ = value;
}
inline void Failure::set_code(::lnrpc::Failure_FailureCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.code)
}

// .lnrpc.ChannelUpdate channel_update = 3;
inline bool Failure::_internal_has_channel_update() const {
  return this != internal_default_instance() && channel_update_ != nullptr;
}
inline bool Failure::has_channel_update() const {
  return _internal_has_channel_update();
}
inline void Failure::clear_channel_update() {
  if (GetArenaNoVirtual() == nullptr && channel_update_ != nullptr) {
    delete channel_update_;
  }
  channel_update_ = nullptr;
}
inline const ::lnrpc::ChannelUpdate& Failure::_internal_channel_update() const {
  const ::lnrpc::ChannelUpdate* p = channel_update_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::ChannelUpdate*>(
      &::lnrpc::_ChannelUpdate_default_instance_);
}
inline const ::lnrpc::ChannelUpdate& Failure::channel_update() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.channel_update)
  return _internal_channel_update();
}
inline ::lnrpc::ChannelUpdate* Failure::release_channel_update() {
  // @@protoc_insertion_point(field_release:lnrpc.Failure.channel_update)
  
  ::lnrpc::ChannelUpdate* temp = channel_update_;
  channel_update_ = nullptr;
  return temp;
}
inline ::lnrpc::ChannelUpdate* Failure::_internal_mutable_channel_update() {
  
  if (channel_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::ChannelUpdate>(GetArenaNoVirtual());
    channel_update_ = p;
  }
  return channel_update_;
}
inline ::lnrpc::ChannelUpdate* Failure::mutable_channel_update() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Failure.channel_update)
  return _internal_mutable_channel_update();
}
inline void Failure::set_allocated_channel_update(::lnrpc::ChannelUpdate* channel_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete channel_update_;
  }
  if (channel_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_update, submessage_arena);
    }
    
  } else {
    
  }
  channel_update_ = channel_update;
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Failure.channel_update)
}

// uint64 htlc_msat = 4;
inline void Failure::clear_htlc_msat() {
  htlc_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Failure::_internal_htlc_msat() const {
  return htlc_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Failure::htlc_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.htlc_msat)
  return _internal_htlc_msat();
}
inline void Failure::_internal_set_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  htlc_msat_ = value;
}
inline void Failure::set_htlc_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_htlc_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.htlc_msat)
}

// bytes onion_sha_256 = 5;
inline void Failure::clear_onion_sha_256() {
  onion_sha_256_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Failure::onion_sha_256() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.onion_sha_256)
  return _internal_onion_sha_256();
}
inline void Failure::set_onion_sha_256(const std::string& value) {
  _internal_set_onion_sha_256(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.onion_sha_256)
}
inline std::string* Failure::mutable_onion_sha_256() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Failure.onion_sha_256)
  return _internal_mutable_onion_sha_256();
}
inline const std::string& Failure::_internal_onion_sha_256() const {
  return onion_sha_256_.GetNoArena();
}
inline void Failure::_internal_set_onion_sha_256(const std::string& value) {
  
  onion_sha_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Failure::set_onion_sha_256(std::string&& value) {
  
  onion_sha_256_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Failure.onion_sha_256)
}
inline void Failure::set_onion_sha_256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  onion_sha_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Failure.onion_sha_256)
}
inline void Failure::set_onion_sha_256(const void* value, size_t size) {
  
  onion_sha_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Failure.onion_sha_256)
}
inline std::string* Failure::_internal_mutable_onion_sha_256() {
  
  return onion_sha_256_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Failure::release_onion_sha_256() {
  // @@protoc_insertion_point(field_release:lnrpc.Failure.onion_sha_256)
  
  return onion_sha_256_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Failure::set_allocated_onion_sha_256(std::string* onion_sha_256) {
  if (onion_sha_256 != nullptr) {
    
  } else {
    
  }
  onion_sha_256_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onion_sha_256);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Failure.onion_sha_256)
}

// uint32 cltv_expiry = 6;
inline void Failure::clear_cltv_expiry() {
  cltv_expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::_internal_cltv_expiry() const {
  return cltv_expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::cltv_expiry() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.cltv_expiry)
  return _internal_cltv_expiry();
}
inline void Failure::_internal_set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cltv_expiry_ = value;
}
inline void Failure::set_cltv_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cltv_expiry(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.cltv_expiry)
}

// uint32 flags = 7;
inline void Failure::clear_flags() {
  flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::flags() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.flags)
  return _internal_flags();
}
inline void Failure::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flags_ = value;
}
inline void Failure::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.flags)
}

// uint32 failure_source_index = 8;
inline void Failure::clear_failure_source_index() {
  failure_source_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::_internal_failure_source_index() const {
  return failure_source_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::failure_source_index() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.failure_source_index)
  return _internal_failure_source_index();
}
inline void Failure::_internal_set_failure_source_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  failure_source_index_ = value;
}
inline void Failure::set_failure_source_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_failure_source_index(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.failure_source_index)
}

// uint32 height = 9;
inline void Failure::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Failure::height() const {
  // @@protoc_insertion_point(field_get:lnrpc.Failure.height)
  return _internal_height();
}
inline void Failure::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Failure::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:lnrpc.Failure.height)
}

// -------------------------------------------------------------------

// ChannelUpdate

// bytes signature = 1;
inline void ChannelUpdate::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelUpdate::signature() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.signature)
  return _internal_signature();
}
inline void ChannelUpdate::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.signature)
}
inline std::string* ChannelUpdate::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelUpdate.signature)
  return _internal_mutable_signature();
}
inline const std::string& ChannelUpdate::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void ChannelUpdate::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelUpdate::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelUpdate.signature)
}
inline void ChannelUpdate::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelUpdate.signature)
}
inline void ChannelUpdate::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelUpdate.signature)
}
inline std::string* ChannelUpdate::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelUpdate::release_signature() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelUpdate.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelUpdate::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelUpdate.signature)
}

// bytes chain_hash = 2;
inline void ChannelUpdate::clear_chain_hash() {
  chain_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelUpdate::chain_hash() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.chain_hash)
  return _internal_chain_hash();
}
inline void ChannelUpdate::set_chain_hash(const std::string& value) {
  _internal_set_chain_hash(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.chain_hash)
}
inline std::string* ChannelUpdate::mutable_chain_hash() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelUpdate.chain_hash)
  return _internal_mutable_chain_hash();
}
inline const std::string& ChannelUpdate::_internal_chain_hash() const {
  return chain_hash_.GetNoArena();
}
inline void ChannelUpdate::_internal_set_chain_hash(const std::string& value) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelUpdate::set_chain_hash(std::string&& value) {
  
  chain_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelUpdate.chain_hash)
}
inline void ChannelUpdate::set_chain_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelUpdate.chain_hash)
}
inline void ChannelUpdate::set_chain_hash(const void* value, size_t size) {
  
  chain_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelUpdate.chain_hash)
}
inline std::string* ChannelUpdate::_internal_mutable_chain_hash() {
  
  return chain_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelUpdate::release_chain_hash() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelUpdate.chain_hash)
  
  return chain_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelUpdate::set_allocated_chain_hash(std::string* chain_hash) {
  if (chain_hash != nullptr) {
    
  } else {
    
  }
  chain_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chain_hash);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelUpdate.chain_hash)
}

// uint64 chan_id = 3 [jstype = JS_STRING];
inline void ChannelUpdate::clear_chan_id() {
  chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::_internal_chan_id() const {
  return chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::chan_id() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.chan_id)
  return _internal_chan_id();
}
inline void ChannelUpdate::_internal_set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chan_id_ = value;
}
inline void ChannelUpdate::set_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chan_id(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.chan_id)
}

// uint32 timestamp = 4;
inline void ChannelUpdate::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.timestamp)
  return _internal_timestamp();
}
inline void ChannelUpdate::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void ChannelUpdate::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.timestamp)
}

// uint32 message_flags = 10;
inline void ChannelUpdate::clear_message_flags() {
  message_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_message_flags() const {
  return message_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::message_flags() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.message_flags)
  return _internal_message_flags();
}
inline void ChannelUpdate::_internal_set_message_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  message_flags_ = value;
}
inline void ChannelUpdate::set_message_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_message_flags(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.message_flags)
}

// uint32 channel_flags = 5;
inline void ChannelUpdate::clear_channel_flags() {
  channel_flags_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_channel_flags() const {
  return channel_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::channel_flags() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.channel_flags)
  return _internal_channel_flags();
}
inline void ChannelUpdate::_internal_set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_flags_ = value;
}
inline void ChannelUpdate::set_channel_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel_flags(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.channel_flags)
}

// uint32 time_lock_delta = 6;
inline void ChannelUpdate::clear_time_lock_delta() {
  time_lock_delta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_time_lock_delta() const {
  return time_lock_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::time_lock_delta() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.time_lock_delta)
  return _internal_time_lock_delta();
}
inline void ChannelUpdate::_internal_set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_lock_delta_ = value;
}
inline void ChannelUpdate::set_time_lock_delta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_lock_delta(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.time_lock_delta)
}

// uint64 htlc_minimum_msat = 7;
inline void ChannelUpdate::clear_htlc_minimum_msat() {
  htlc_minimum_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::_internal_htlc_minimum_msat() const {
  return htlc_minimum_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::htlc_minimum_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.htlc_minimum_msat)
  return _internal_htlc_minimum_msat();
}
inline void ChannelUpdate::_internal_set_htlc_minimum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  htlc_minimum_msat_ = value;
}
inline void ChannelUpdate::set_htlc_minimum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_htlc_minimum_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.htlc_minimum_msat)
}

// uint32 base_fee = 8;
inline void ChannelUpdate::clear_base_fee() {
  base_fee_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_base_fee() const {
  return base_fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::base_fee() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.base_fee)
  return _internal_base_fee();
}
inline void ChannelUpdate::_internal_set_base_fee(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  base_fee_ = value;
}
inline void ChannelUpdate::set_base_fee(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_base_fee(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.base_fee)
}

// uint32 fee_rate = 9;
inline void ChannelUpdate::clear_fee_rate() {
  fee_rate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::_internal_fee_rate() const {
  return fee_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ChannelUpdate::fee_rate() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.fee_rate)
  return _internal_fee_rate();
}
inline void ChannelUpdate::_internal_set_fee_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  fee_rate_ = value;
}
inline void ChannelUpdate::set_fee_rate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fee_rate(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.fee_rate)
}

// uint64 htlc_maximum_msat = 11;
inline void ChannelUpdate::clear_htlc_maximum_msat() {
  htlc_maximum_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::_internal_htlc_maximum_msat() const {
  return htlc_maximum_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChannelUpdate::htlc_maximum_msat() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.htlc_maximum_msat)
  return _internal_htlc_maximum_msat();
}
inline void ChannelUpdate::_internal_set_htlc_maximum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  htlc_maximum_msat_ = value;
}
inline void ChannelUpdate::set_htlc_maximum_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_htlc_maximum_msat(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.htlc_maximum_msat)
}

// bytes extra_opaque_data = 12;
inline void ChannelUpdate::clear_extra_opaque_data() {
  extra_opaque_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ChannelUpdate::extra_opaque_data() const {
  // @@protoc_insertion_point(field_get:lnrpc.ChannelUpdate.extra_opaque_data)
  return _internal_extra_opaque_data();
}
inline void ChannelUpdate::set_extra_opaque_data(const std::string& value) {
  _internal_set_extra_opaque_data(value);
  // @@protoc_insertion_point(field_set:lnrpc.ChannelUpdate.extra_opaque_data)
}
inline std::string* ChannelUpdate::mutable_extra_opaque_data() {
  // @@protoc_insertion_point(field_mutable:lnrpc.ChannelUpdate.extra_opaque_data)
  return _internal_mutable_extra_opaque_data();
}
inline const std::string& ChannelUpdate::_internal_extra_opaque_data() const {
  return extra_opaque_data_.GetNoArena();
}
inline void ChannelUpdate::_internal_set_extra_opaque_data(const std::string& value) {
  
  extra_opaque_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ChannelUpdate::set_extra_opaque_data(std::string&& value) {
  
  extra_opaque_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.ChannelUpdate.extra_opaque_data)
}
inline void ChannelUpdate::set_extra_opaque_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extra_opaque_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.ChannelUpdate.extra_opaque_data)
}
inline void ChannelUpdate::set_extra_opaque_data(const void* value, size_t size) {
  
  extra_opaque_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.ChannelUpdate.extra_opaque_data)
}
inline std::string* ChannelUpdate::_internal_mutable_extra_opaque_data() {
  
  return extra_opaque_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ChannelUpdate::release_extra_opaque_data() {
  // @@protoc_insertion_point(field_release:lnrpc.ChannelUpdate.extra_opaque_data)
  
  return extra_opaque_data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ChannelUpdate::set_allocated_extra_opaque_data(std::string* extra_opaque_data) {
  if (extra_opaque_data != nullptr) {
    
  } else {
    
  }
  extra_opaque_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_opaque_data);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.ChannelUpdate.extra_opaque_data)
}

// -------------------------------------------------------------------

// MacaroonId

// bytes nonce = 1;
inline void MacaroonId::clear_nonce() {
  nonce_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MacaroonId::nonce() const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonId.nonce)
  return _internal_nonce();
}
inline void MacaroonId::set_nonce(const std::string& value) {
  _internal_set_nonce(value);
  // @@protoc_insertion_point(field_set:lnrpc.MacaroonId.nonce)
}
inline std::string* MacaroonId::mutable_nonce() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonId.nonce)
  return _internal_mutable_nonce();
}
inline const std::string& MacaroonId::_internal_nonce() const {
  return nonce_.GetNoArena();
}
inline void MacaroonId::_internal_set_nonce(const std::string& value) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MacaroonId::set_nonce(std::string&& value) {
  
  nonce_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MacaroonId.nonce)
}
inline void MacaroonId::set_nonce(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MacaroonId.nonce)
}
inline void MacaroonId::set_nonce(const void* value, size_t size) {
  
  nonce_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MacaroonId.nonce)
}
inline std::string* MacaroonId::_internal_mutable_nonce() {
  
  return nonce_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MacaroonId::release_nonce() {
  // @@protoc_insertion_point(field_release:lnrpc.MacaroonId.nonce)
  
  return nonce_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MacaroonId::set_allocated_nonce(std::string* nonce) {
  if (nonce != nullptr) {
    
  } else {
    
  }
  nonce_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nonce);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MacaroonId.nonce)
}

// bytes storageId = 2;
inline void MacaroonId::clear_storageid() {
  storageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MacaroonId::storageid() const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonId.storageId)
  return _internal_storageid();
}
inline void MacaroonId::set_storageid(const std::string& value) {
  _internal_set_storageid(value);
  // @@protoc_insertion_point(field_set:lnrpc.MacaroonId.storageId)
}
inline std::string* MacaroonId::mutable_storageid() {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonId.storageId)
  return _internal_mutable_storageid();
}
inline const std::string& MacaroonId::_internal_storageid() const {
  return storageid_.GetNoArena();
}
inline void MacaroonId::_internal_set_storageid(const std::string& value) {
  
  storageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MacaroonId::set_storageid(std::string&& value) {
  
  storageid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.MacaroonId.storageId)
}
inline void MacaroonId::set_storageid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  storageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.MacaroonId.storageId)
}
inline void MacaroonId::set_storageid(const void* value, size_t size) {
  
  storageid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.MacaroonId.storageId)
}
inline std::string* MacaroonId::_internal_mutable_storageid() {
  
  return storageid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MacaroonId::release_storageid() {
  // @@protoc_insertion_point(field_release:lnrpc.MacaroonId.storageId)
  
  return storageid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MacaroonId::set_allocated_storageid(std::string* storageid) {
  if (storageid != nullptr) {
    
  } else {
    
  }
  storageid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), storageid);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.MacaroonId.storageId)
}

// repeated .lnrpc.Op ops = 3;
inline int MacaroonId::_internal_ops_size() const {
  return ops_.size();
}
inline int MacaroonId::ops_size() const {
  return _internal_ops_size();
}
inline void MacaroonId::clear_ops() {
  ops_.Clear();
}
inline ::lnrpc::Op* MacaroonId::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.MacaroonId.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Op >*
MacaroonId::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.MacaroonId.ops)
  return &ops_;
}
inline const ::lnrpc::Op& MacaroonId::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::lnrpc::Op& MacaroonId::ops(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.MacaroonId.ops)
  return _internal_ops(index);
}
inline ::lnrpc::Op* MacaroonId::_internal_add_ops() {
  return ops_.Add();
}
inline ::lnrpc::Op* MacaroonId::add_ops() {
  // @@protoc_insertion_point(field_add:lnrpc.MacaroonId.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::Op >&
MacaroonId::ops() const {
  // @@protoc_insertion_point(field_list:lnrpc.MacaroonId.ops)
  return ops_;
}

// -------------------------------------------------------------------

// Op

// string entity = 1;
inline void Op::clear_entity() {
  entity_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Op::entity() const {
  // @@protoc_insertion_point(field_get:lnrpc.Op.entity)
  return _internal_entity();
}
inline void Op::set_entity(const std::string& value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:lnrpc.Op.entity)
}
inline std::string* Op::mutable_entity() {
  // @@protoc_insertion_point(field_mutable:lnrpc.Op.entity)
  return _internal_mutable_entity();
}
inline const std::string& Op::_internal_entity() const {
  return entity_.GetNoArena();
}
inline void Op::_internal_set_entity(const std::string& value) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Op::set_entity(std::string&& value) {
  
  entity_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lnrpc.Op.entity)
}
inline void Op::set_entity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lnrpc.Op.entity)
}
inline void Op::set_entity(const char* value, size_t size) {
  
  entity_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Op.entity)
}
inline std::string* Op::_internal_mutable_entity() {
  
  return entity_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Op::release_entity() {
  // @@protoc_insertion_point(field_release:lnrpc.Op.entity)
  
  return entity_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Op::set_allocated_entity(std::string* entity) {
  if (entity != nullptr) {
    
  } else {
    
  }
  entity_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), entity);
  // @@protoc_insertion_point(field_set_allocated:lnrpc.Op.entity)
}

// repeated string actions = 2;
inline int Op::_internal_actions_size() const {
  return actions_.size();
}
inline int Op::actions_size() const {
  return _internal_actions_size();
}
inline void Op::clear_actions() {
  actions_.Clear();
}
inline std::string* Op::add_actions() {
  // @@protoc_insertion_point(field_add_mutable:lnrpc.Op.actions)
  return _internal_add_actions();
}
inline const std::string& Op::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const std::string& Op::actions(int index) const {
  // @@protoc_insertion_point(field_get:lnrpc.Op.actions)
  return _internal_actions(index);
}
inline std::string* Op::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:lnrpc.Op.actions)
  return actions_.Mutable(index);
}
inline void Op::set_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lnrpc.Op.actions)
  actions_.Mutable(index)->assign(value);
}
inline void Op::set_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lnrpc.Op.actions)
  actions_.Mutable(index)->assign(std::move(value));
}
inline void Op::set_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lnrpc.Op.actions)
}
inline void Op::set_actions(int index, const char* value, size_t size) {
  actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lnrpc.Op.actions)
}
inline std::string* Op::_internal_add_actions() {
  return actions_.Add();
}
inline void Op::add_actions(const std::string& value) {
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lnrpc.Op.actions)
}
inline void Op::add_actions(std::string&& value) {
  actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lnrpc.Op.actions)
}
inline void Op::add_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lnrpc.Op.actions)
}
inline void Op::add_actions(const char* value, size_t size) {
  actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lnrpc.Op.actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Op::actions() const {
  // @@protoc_insertion_point(field_list:lnrpc.Op.actions)
  return actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Op::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:lnrpc.Op.actions)
  return &actions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lnrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lnrpc::ChannelCloseSummary_ClosureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::ChannelCloseSummary_ClosureType>() {
  return ::lnrpc::ChannelCloseSummary_ClosureType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::Peer_SyncType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::Peer_SyncType>() {
  return ::lnrpc::Peer_SyncType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::PeerEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::PeerEvent_EventType>() {
  return ::lnrpc::PeerEvent_EventType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState>() {
  return ::lnrpc::PendingChannelsResponse_ForceClosedChannel_AnchorState_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::ChannelEventUpdate_UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::ChannelEventUpdate_UpdateType>() {
  return ::lnrpc::ChannelEventUpdate_UpdateType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::Invoice_InvoiceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::Invoice_InvoiceState>() {
  return ::lnrpc::Invoice_InvoiceState_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::Payment_PaymentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::Payment_PaymentStatus>() {
  return ::lnrpc::Payment_PaymentStatus_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::HTLCAttempt_HTLCStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::HTLCAttempt_HTLCStatus>() {
  return ::lnrpc::HTLCAttempt_HTLCStatus_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::Failure_FailureCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::Failure_FailureCode>() {
  return ::lnrpc::Failure_FailureCode_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::AddressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::AddressType>() {
  return ::lnrpc::AddressType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::CommitmentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::CommitmentType>() {
  return ::lnrpc::CommitmentType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::Initiator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::Initiator>() {
  return ::lnrpc::Initiator_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::ResolutionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::ResolutionType>() {
  return ::lnrpc::ResolutionType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::ResolutionOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::ResolutionOutcome>() {
  return ::lnrpc::ResolutionOutcome_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::NodeMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::NodeMetricType>() {
  return ::lnrpc::NodeMetricType_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::InvoiceHTLCState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::InvoiceHTLCState>() {
  return ::lnrpc::InvoiceHTLCState_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::PaymentFailureReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::PaymentFailureReason>() {
  return ::lnrpc::PaymentFailureReason_descriptor();
}
template <> struct is_proto_enum< ::lnrpc::FeatureBit> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lnrpc::FeatureBit>() {
  return ::lnrpc::FeatureBit_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
