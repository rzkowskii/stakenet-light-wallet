// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: router.proto
#ifndef GRPC_router_2eproto__INCLUDED
#define GRPC_router_2eproto__INCLUDED

#include "router.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace routerrpc {

class Router final {
 public:
  static constexpr char const* service_full_name() {
    return "routerrpc.Router";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // SendPaymentV2 attempts to route a payment described by the passed
    // PaymentRequest to the final destination. The call returns a stream of
    // payment updates.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Payment>> SendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Payment>>(SendPaymentV2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>> AsyncSendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>>(AsyncSendPaymentV2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>> PrepareAsyncSendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>>(PrepareAsyncSendPaymentV2Raw(context, request, cq));
    }
    // *
    // TrackPaymentV2 returns an update stream for the payment identified by the
    // payment hash.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Payment>> TrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Payment>>(TrackPaymentV2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>> AsyncTrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>>(AsyncTrackPaymentV2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>> PrepareAsyncTrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>>(PrepareAsyncTrackPaymentV2Raw(context, request, cq));
    }
    // *
    // EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
    // may cost to send an HTLC to the target end destination.
    virtual ::grpc::Status EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::routerrpc::RouteFeeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>> AsyncEstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>>(AsyncEstimateRouteFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>> PrepareAsyncEstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>>(PrepareAsyncEstimateRouteFeeRaw(context, request, cq));
    }
    // *
    // SendToRoute attempts to make a payment via the specified route. This method
    // differs from SendPayment in that it allows users to specify a full route
    // manually. This can be used for things like rebalancing, and atomic swaps.
    virtual ::grpc::Status SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::routerrpc::SendToRouteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>> AsyncSendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>>(AsyncSendToRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>> PrepareAsyncSendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>>(PrepareAsyncSendToRouteRaw(context, request, cq));
    }
    // *
    // ResetMissionControl clears all mission control state and starts with a clean
    // slate.
    virtual ::grpc::Status ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::routerrpc::ResetMissionControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>> AsyncResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>>(AsyncResetMissionControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>> PrepareAsyncResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>>(PrepareAsyncResetMissionControlRaw(context, request, cq));
    }
    // *
    // QueryMissionControl exposes the internal mission control state to callers.
    // It is a development feature.
    virtual ::grpc::Status QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::routerrpc::QueryMissionControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>> AsyncQueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>>(AsyncQueryMissionControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>> PrepareAsyncQueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>>(PrepareAsyncQueryMissionControlRaw(context, request, cq));
    }
    // *
    // QueryProbability returns the current success probability estimate for a
    // given node pair and amount.
    virtual ::grpc::Status QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::routerrpc::QueryProbabilityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>> AsyncQueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>>(AsyncQueryProbabilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>> PrepareAsyncQueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>>(PrepareAsyncQueryProbabilityRaw(context, request, cq));
    }
    // *
    // BuildRoute builds a fully specified route based on a list of hop public
    // keys. It retrieves the relevant channel policies from the graph in order to
    // calculate the correct fees and time locks.
    virtual ::grpc::Status BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::routerrpc::BuildRouteResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>> AsyncBuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>>(AsyncBuildRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>> PrepareAsyncBuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>>(PrepareAsyncBuildRouteRaw(context, request, cq));
    }
    // *
    // SubscribeHtlcEvents creates a uni-directional stream from the server to
    // the client which delivers a stream of htlc events.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::HtlcEvent>> SubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::HtlcEvent>>(SubscribeHtlcEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>> AsyncSubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>>(AsyncSubscribeHtlcEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>> PrepareAsyncSubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>>(PrepareAsyncSubscribeHtlcEventsRaw(context, request, cq));
    }
    // *
    // Deprecated, use SendPaymentV2. SendPayment attempts to route a payment 
    // described by the passed PaymentRequest to the final destination. The call
    // returns a stream of payment status updates.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>> SendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>>(SendPaymentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>> AsyncSendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>>(AsyncSendPaymentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>> PrepareAsyncSendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>>(PrepareAsyncSendPaymentRaw(context, request, cq));
    }
    // *
    // Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
    // the payment identified by the payment hash.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>> TrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>>(TrackPaymentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>> AsyncTrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>>(AsyncTrackPaymentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>> PrepareAsyncTrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>>(PrepareAsyncTrackPaymentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // *
      // SendPaymentV2 attempts to route a payment described by the passed
      // PaymentRequest to the final destination. The call returns a stream of
      // payment updates.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPaymentV2(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Payment>* reactor) = 0;
      #else
      virtual void SendPaymentV2(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) = 0;
      #endif
      // *
      // TrackPaymentV2 returns an update stream for the payment identified by the
      // payment hash.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TrackPaymentV2(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Payment>* reactor) = 0;
      #else
      virtual void TrackPaymentV2(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) = 0;
      #endif
      // *
      // EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
      // may cost to send an HTLC to the target end destination.
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // SendToRoute attempts to make a payment via the specified route. This method
      // differs from SendPayment in that it allows users to specify a full route
      // manually. This can be used for things like rebalancing, and atomic swaps.
      virtual void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // ResetMissionControl clears all mission control state and starts with a clean
      // slate.
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // QueryMissionControl exposes the internal mission control state to callers.
      // It is a development feature.
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // QueryProbability returns the current success probability estimate for a
      // given node pair and amount.
      virtual void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // BuildRoute builds a fully specified route based on a list of hop public
      // keys. It retrieves the relevant channel policies from the graph in order to
      // calculate the correct fees and time locks.
      virtual void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // SubscribeHtlcEvents creates a uni-directional stream from the server to
      // the client which delivers a stream of htlc events.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeHtlcEvents(::grpc::ClientContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::ClientReadReactor< ::routerrpc::HtlcEvent>* reactor) = 0;
      #else
      virtual void SubscribeHtlcEvents(::grpc::ClientContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::HtlcEvent>* reactor) = 0;
      #endif
      // *
      // Deprecated, use SendPaymentV2. SendPayment attempts to route a payment 
      // described by the passed PaymentRequest to the final destination. The call
      // returns a stream of payment status updates.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SendPayment(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) = 0;
      #else
      virtual void SendPayment(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) = 0;
      #endif
      // *
      // Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
      // the payment identified by the payment hash.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TrackPayment(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) = 0;
      #else
      virtual void TrackPayment(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::lnrpc::Payment>* SendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>* AsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>* PrepareAsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::lnrpc::Payment>* TrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>* AsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Payment>* PrepareAsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>* AsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::RouteFeeResponse>* PrepareAsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>* AsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::SendToRouteResponse>* PrepareAsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>* AsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::ResetMissionControlResponse>* PrepareAsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>* AsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryMissionControlResponse>* PrepareAsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>* AsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::QueryProbabilityResponse>* PrepareAsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>* AsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::routerrpc::BuildRouteResponse>* PrepareAsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::routerrpc::HtlcEvent>* SubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>* AsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::HtlcEvent>* PrepareAsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>* SendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>* AsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>* PrepareAsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::routerrpc::PaymentStatus>* TrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>* AsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::routerrpc::PaymentStatus>* PrepareAsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Payment>> SendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Payment>>(SendPaymentV2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>> AsyncSendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>>(AsyncSendPaymentV2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>> PrepareAsyncSendPaymentV2(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>>(PrepareAsyncSendPaymentV2Raw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Payment>> TrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Payment>>(TrackPaymentV2Raw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>> AsyncTrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>>(AsyncTrackPaymentV2Raw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>> PrepareAsyncTrackPaymentV2(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Payment>>(PrepareAsyncTrackPaymentV2Raw(context, request, cq));
    }
    ::grpc::Status EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::routerrpc::RouteFeeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>> AsyncEstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>>(AsyncEstimateRouteFeeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>> PrepareAsyncEstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>>(PrepareAsyncEstimateRouteFeeRaw(context, request, cq));
    }
    ::grpc::Status SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::routerrpc::SendToRouteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>> AsyncSendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>>(AsyncSendToRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>> PrepareAsyncSendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>>(PrepareAsyncSendToRouteRaw(context, request, cq));
    }
    ::grpc::Status ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::routerrpc::ResetMissionControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>> AsyncResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>>(AsyncResetMissionControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>> PrepareAsyncResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>>(PrepareAsyncResetMissionControlRaw(context, request, cq));
    }
    ::grpc::Status QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::routerrpc::QueryMissionControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>> AsyncQueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>>(AsyncQueryMissionControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>> PrepareAsyncQueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>>(PrepareAsyncQueryMissionControlRaw(context, request, cq));
    }
    ::grpc::Status QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::routerrpc::QueryProbabilityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>> AsyncQueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>>(AsyncQueryProbabilityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>> PrepareAsyncQueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>>(PrepareAsyncQueryProbabilityRaw(context, request, cq));
    }
    ::grpc::Status BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::routerrpc::BuildRouteResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>> AsyncBuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>>(AsyncBuildRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>> PrepareAsyncBuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>>(PrepareAsyncBuildRouteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::routerrpc::HtlcEvent>> SubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::routerrpc::HtlcEvent>>(SubscribeHtlcEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>> AsyncSubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>>(AsyncSubscribeHtlcEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>> PrepareAsyncSubscribeHtlcEvents(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>>(PrepareAsyncSubscribeHtlcEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::routerrpc::PaymentStatus>> SendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::routerrpc::PaymentStatus>>(SendPaymentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>> AsyncSendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>>(AsyncSendPaymentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>> PrepareAsyncSendPayment(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>>(PrepareAsyncSendPaymentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::routerrpc::PaymentStatus>> TrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::routerrpc::PaymentStatus>>(TrackPaymentRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>> AsyncTrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>>(AsyncTrackPaymentRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>> PrepareAsyncTrackPayment(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>>(PrepareAsyncTrackPaymentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPaymentV2(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Payment>* reactor) override;
      #else
      void SendPaymentV2(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TrackPaymentV2(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Payment>* reactor) override;
      #else
      void TrackPaymentV2(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Payment>* reactor) override;
      #endif
      void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)>) override;
      void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EstimateRouteFee(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void EstimateRouteFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::RouteFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)>) override;
      void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendToRoute(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SendToRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::SendToRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetMissionControl(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ResetMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::ResetMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryMissionControl(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryMissionControl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryMissionControlResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryProbability(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryProbability(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::QueryProbabilityResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)>) override;
      void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BuildRoute(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void BuildRoute(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::routerrpc::BuildRouteResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeHtlcEvents(::grpc::ClientContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::ClientReadReactor< ::routerrpc::HtlcEvent>* reactor) override;
      #else
      void SubscribeHtlcEvents(::grpc::ClientContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::HtlcEvent>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SendPayment(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) override;
      #else
      void SendPayment(::grpc::ClientContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TrackPayment(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) override;
      #else
      void TrackPayment(::grpc::ClientContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::experimental::ClientReadReactor< ::routerrpc::PaymentStatus>* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::lnrpc::Payment>* SendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Payment>* AsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Payment>* PrepareAsyncSendPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::lnrpc::Payment>* TrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Payment>* AsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Payment>* PrepareAsyncTrackPaymentV2Raw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>* AsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::RouteFeeResponse>* PrepareAsyncEstimateRouteFeeRaw(::grpc::ClientContext* context, const ::routerrpc::RouteFeeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>* AsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::SendToRouteResponse>* PrepareAsyncSendToRouteRaw(::grpc::ClientContext* context, const ::routerrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>* AsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::ResetMissionControlResponse>* PrepareAsyncResetMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::ResetMissionControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>* AsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryMissionControlResponse>* PrepareAsyncQueryMissionControlRaw(::grpc::ClientContext* context, const ::routerrpc::QueryMissionControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>* AsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::QueryProbabilityResponse>* PrepareAsyncQueryProbabilityRaw(::grpc::ClientContext* context, const ::routerrpc::QueryProbabilityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>* AsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::routerrpc::BuildRouteResponse>* PrepareAsyncBuildRouteRaw(::grpc::ClientContext* context, const ::routerrpc::BuildRouteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::routerrpc::HtlcEvent>* SubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>* AsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::routerrpc::HtlcEvent>* PrepareAsyncSubscribeHtlcEventsRaw(::grpc::ClientContext* context, const ::routerrpc::SubscribeHtlcEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::routerrpc::PaymentStatus>* SendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request) override;
    ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* AsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* PrepareAsyncSendPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::SendPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::routerrpc::PaymentStatus>* TrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request) override;
    ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* AsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::routerrpc::PaymentStatus>* PrepareAsyncTrackPaymentRaw(::grpc::ClientContext* context, const ::routerrpc::TrackPaymentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendPaymentV2_;
    const ::grpc::internal::RpcMethod rpcmethod_TrackPaymentV2_;
    const ::grpc::internal::RpcMethod rpcmethod_EstimateRouteFee_;
    const ::grpc::internal::RpcMethod rpcmethod_SendToRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetMissionControl_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryMissionControl_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryProbability_;
    const ::grpc::internal::RpcMethod rpcmethod_BuildRoute_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeHtlcEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_SendPayment_;
    const ::grpc::internal::RpcMethod rpcmethod_TrackPayment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // SendPaymentV2 attempts to route a payment described by the passed
    // PaymentRequest to the final destination. The call returns a stream of
    // payment updates.
    virtual ::grpc::Status SendPaymentV2(::grpc::ServerContext* context, const ::routerrpc::SendPaymentRequest* request, ::grpc::ServerWriter< ::lnrpc::Payment>* writer);
    // *
    // TrackPaymentV2 returns an update stream for the payment identified by the
    // payment hash.
    virtual ::grpc::Status TrackPaymentV2(::grpc::ServerContext* context, const ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerWriter< ::lnrpc::Payment>* writer);
    // *
    // EstimateRouteFee allows callers to obtain a lower bound w.r.t how much it
    // may cost to send an HTLC to the target end destination.
    virtual ::grpc::Status EstimateRouteFee(::grpc::ServerContext* context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response);
    // *
    // SendToRoute attempts to make a payment via the specified route. This method
    // differs from SendPayment in that it allows users to specify a full route
    // manually. This can be used for things like rebalancing, and atomic swaps.
    virtual ::grpc::Status SendToRoute(::grpc::ServerContext* context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response);
    // *
    // ResetMissionControl clears all mission control state and starts with a clean
    // slate.
    virtual ::grpc::Status ResetMissionControl(::grpc::ServerContext* context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response);
    // *
    // QueryMissionControl exposes the internal mission control state to callers.
    // It is a development feature.
    virtual ::grpc::Status QueryMissionControl(::grpc::ServerContext* context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response);
    // *
    // QueryProbability returns the current success probability estimate for a
    // given node pair and amount.
    virtual ::grpc::Status QueryProbability(::grpc::ServerContext* context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response);
    // *
    // BuildRoute builds a fully specified route based on a list of hop public
    // keys. It retrieves the relevant channel policies from the graph in order to
    // calculate the correct fees and time locks.
    virtual ::grpc::Status BuildRoute(::grpc::ServerContext* context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response);
    // *
    // SubscribeHtlcEvents creates a uni-directional stream from the server to
    // the client which delivers a stream of htlc events.
    virtual ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* context, const ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* writer);
    // *
    // Deprecated, use SendPaymentV2. SendPayment attempts to route a payment 
    // described by the passed PaymentRequest to the final destination. The call
    // returns a stream of payment status updates.
    virtual ::grpc::Status SendPayment(::grpc::ServerContext* context, const ::routerrpc::SendPaymentRequest* request, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* writer);
    // *
    // Deprecated, use TrackPaymentV2. TrackPayment returns an update stream for
    // the payment identified by the payment hash.
    virtual ::grpc::Status TrackPayment(::grpc::ServerContext* context, const ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPaymentV2() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPaymentV2(::grpc::ServerContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ServerAsyncWriter< ::lnrpc::Payment>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TrackPaymentV2() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrackPaymentV2(::grpc::ServerContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerAsyncWriter< ::lnrpc::Payment>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EstimateRouteFee() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateRouteFee(::grpc::ServerContext* context, ::routerrpc::RouteFeeRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::RouteFeeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendToRoute() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToRoute(::grpc::ServerContext* context, ::routerrpc::SendToRouteRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::SendToRouteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetMissionControl() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetMissionControl(::grpc::ServerContext* context, ::routerrpc::ResetMissionControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::ResetMissionControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryMissionControl() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryMissionControl(::grpc::ServerContext* context, ::routerrpc::QueryMissionControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::QueryMissionControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryProbability() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProbability(::grpc::ServerContext* context, ::routerrpc::QueryProbabilityRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::QueryProbabilityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_BuildRoute() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildRoute(::grpc::ServerContext* context, ::routerrpc::BuildRouteRequest* request, ::grpc::ServerAsyncResponseWriter< ::routerrpc::BuildRouteResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeHtlcEvents() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeHtlcEvents(::grpc::ServerContext* context, ::routerrpc::SubscribeHtlcEventsRequest* request, ::grpc::ServerAsyncWriter< ::routerrpc::HtlcEvent>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendPayment() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPayment(::grpc::ServerContext* context, ::routerrpc::SendPaymentRequest* request, ::grpc::ServerAsyncWriter< ::routerrpc::PaymentStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TrackPayment() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrackPayment(::grpc::ServerContext* context, ::routerrpc::TrackPaymentRequest* request, ::grpc::ServerAsyncWriter< ::routerrpc::PaymentStatus>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendPaymentV2<WithAsyncMethod_TrackPaymentV2<WithAsyncMethod_EstimateRouteFee<WithAsyncMethod_SendToRoute<WithAsyncMethod_ResetMissionControl<WithAsyncMethod_QueryMissionControl<WithAsyncMethod_QueryProbability<WithAsyncMethod_BuildRoute<WithAsyncMethod_SubscribeHtlcEvents<WithAsyncMethod_SendPayment<WithAsyncMethod_TrackPayment<Service > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendPaymentV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routerrpc::SendPaymentRequest, ::lnrpc::Payment>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::SendPaymentRequest* request) { return this->SendPaymentV2(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::lnrpc::Payment>* SendPaymentV2(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::lnrpc::Payment>* SendPaymentV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TrackPaymentV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routerrpc::TrackPaymentRequest, ::lnrpc::Payment>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::TrackPaymentRequest* request) { return this->TrackPaymentV2(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::lnrpc::Payment>* TrackPaymentV2(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::lnrpc::Payment>* TrackPaymentV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_EstimateRouteFee() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::RouteFeeRequest, ::routerrpc::RouteFeeResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::RouteFeeRequest* request, ::routerrpc::RouteFeeResponse* response) { return this->EstimateRouteFee(context, request, response); }));}
    void SetMessageAllocatorFor_EstimateRouteFee(
        ::grpc::experimental::MessageAllocator< ::routerrpc::RouteFeeRequest, ::routerrpc::RouteFeeResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::RouteFeeRequest, ::routerrpc::RouteFeeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EstimateRouteFee(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EstimateRouteFee(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendToRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::SendToRouteRequest, ::routerrpc::SendToRouteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::SendToRouteRequest* request, ::routerrpc::SendToRouteResponse* response) { return this->SendToRoute(context, request, response); }));}
    void SetMessageAllocatorFor_SendToRoute(
        ::grpc::experimental::MessageAllocator< ::routerrpc::SendToRouteRequest, ::routerrpc::SendToRouteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::SendToRouteRequest, ::routerrpc::SendToRouteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendToRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendToRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ResetMissionControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::ResetMissionControlRequest, ::routerrpc::ResetMissionControlResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::ResetMissionControlRequest* request, ::routerrpc::ResetMissionControlResponse* response) { return this->ResetMissionControl(context, request, response); }));}
    void SetMessageAllocatorFor_ResetMissionControl(
        ::grpc::experimental::MessageAllocator< ::routerrpc::ResetMissionControlRequest, ::routerrpc::ResetMissionControlResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::ResetMissionControlRequest, ::routerrpc::ResetMissionControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetMissionControl(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetMissionControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryMissionControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::QueryMissionControlRequest, ::routerrpc::QueryMissionControlResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::QueryMissionControlRequest* request, ::routerrpc::QueryMissionControlResponse* response) { return this->QueryMissionControl(context, request, response); }));}
    void SetMessageAllocatorFor_QueryMissionControl(
        ::grpc::experimental::MessageAllocator< ::routerrpc::QueryMissionControlRequest, ::routerrpc::QueryMissionControlResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::QueryMissionControlRequest, ::routerrpc::QueryMissionControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryMissionControl(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryMissionControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryProbability() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::QueryProbabilityRequest, ::routerrpc::QueryProbabilityResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::QueryProbabilityRequest* request, ::routerrpc::QueryProbabilityResponse* response) { return this->QueryProbability(context, request, response); }));}
    void SetMessageAllocatorFor_QueryProbability(
        ::grpc::experimental::MessageAllocator< ::routerrpc::QueryProbabilityRequest, ::routerrpc::QueryProbabilityResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::QueryProbabilityRequest, ::routerrpc::QueryProbabilityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryProbability(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryProbability(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_BuildRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::BuildRouteRequest, ::routerrpc::BuildRouteResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::BuildRouteRequest* request, ::routerrpc::BuildRouteResponse* response) { return this->BuildRoute(context, request, response); }));}
    void SetMessageAllocatorFor_BuildRoute(
        ::grpc::experimental::MessageAllocator< ::routerrpc::BuildRouteRequest, ::routerrpc::BuildRouteResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::routerrpc::BuildRouteRequest, ::routerrpc::BuildRouteResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BuildRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BuildRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeHtlcEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routerrpc::SubscribeHtlcEventsRequest, ::routerrpc::HtlcEvent>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::SubscribeHtlcEventsRequest* request) { return this->SubscribeHtlcEvents(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::routerrpc::HtlcEvent>* SubscribeHtlcEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::routerrpc::HtlcEvent>* SubscribeHtlcEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SendPayment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routerrpc::SendPaymentRequest, ::routerrpc::PaymentStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::SendPaymentRequest* request) { return this->SendPayment(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::routerrpc::PaymentStatus>* SendPayment(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::routerrpc::PaymentStatus>* SendPayment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TrackPayment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::routerrpc::TrackPaymentRequest, ::routerrpc::PaymentStatus>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::routerrpc::TrackPaymentRequest* request) { return this->TrackPayment(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::routerrpc::PaymentStatus>* TrackPayment(
      ::grpc::CallbackServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::routerrpc::PaymentStatus>* TrackPayment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SendPaymentV2<ExperimentalWithCallbackMethod_TrackPaymentV2<ExperimentalWithCallbackMethod_EstimateRouteFee<ExperimentalWithCallbackMethod_SendToRoute<ExperimentalWithCallbackMethod_ResetMissionControl<ExperimentalWithCallbackMethod_QueryMissionControl<ExperimentalWithCallbackMethod_QueryProbability<ExperimentalWithCallbackMethod_BuildRoute<ExperimentalWithCallbackMethod_SubscribeHtlcEvents<ExperimentalWithCallbackMethod_SendPayment<ExperimentalWithCallbackMethod_TrackPayment<Service > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SendPaymentV2<ExperimentalWithCallbackMethod_TrackPaymentV2<ExperimentalWithCallbackMethod_EstimateRouteFee<ExperimentalWithCallbackMethod_SendToRoute<ExperimentalWithCallbackMethod_ResetMissionControl<ExperimentalWithCallbackMethod_QueryMissionControl<ExperimentalWithCallbackMethod_QueryProbability<ExperimentalWithCallbackMethod_BuildRoute<ExperimentalWithCallbackMethod_SubscribeHtlcEvents<ExperimentalWithCallbackMethod_SendPayment<ExperimentalWithCallbackMethod_TrackPayment<Service > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPaymentV2() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TrackPaymentV2() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EstimateRouteFee() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendToRoute() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetMissionControl() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryMissionControl() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryProbability() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_BuildRoute() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeHtlcEvents() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendPayment() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TrackPayment() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPaymentV2() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPaymentV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TrackPaymentV2() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrackPaymentV2(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EstimateRouteFee() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEstimateRouteFee(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendToRoute() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendToRoute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetMissionControl() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetMissionControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryMissionControl() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryMissionControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryProbability() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryProbability(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_BuildRoute() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBuildRoute(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeHtlcEvents() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeHtlcEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendPayment() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendPayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TrackPayment() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTrackPayment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendPaymentV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SendPaymentV2(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SendPaymentV2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SendPaymentV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TrackPaymentV2() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->TrackPaymentV2(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TrackPaymentV2(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* TrackPaymentV2(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_EstimateRouteFee() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EstimateRouteFee(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* EstimateRouteFee(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* EstimateRouteFee(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendToRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendToRoute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SendToRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SendToRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ResetMissionControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetMissionControl(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ResetMissionControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ResetMissionControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryMissionControl() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryMissionControl(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryMissionControl(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryMissionControl(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryProbability() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryProbability(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryProbability(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryProbability(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_BuildRoute() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->BuildRoute(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* BuildRoute(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* BuildRoute(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeHtlcEvents() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeHtlcEvents(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeHtlcEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeHtlcEvents(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SendPayment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SendPayment(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SendPayment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SendPayment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TrackPayment() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->TrackPayment(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TrackPayment(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* TrackPayment(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EstimateRouteFee : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EstimateRouteFee() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::RouteFeeRequest, ::routerrpc::RouteFeeResponse>(std::bind(&WithStreamedUnaryMethod_EstimateRouteFee<BaseClass>::StreamedEstimateRouteFee, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_EstimateRouteFee() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EstimateRouteFee(::grpc::ServerContext* /*context*/, const ::routerrpc::RouteFeeRequest* /*request*/, ::routerrpc::RouteFeeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEstimateRouteFee(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::RouteFeeRequest,::routerrpc::RouteFeeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendToRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendToRoute() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::SendToRouteRequest, ::routerrpc::SendToRouteResponse>(std::bind(&WithStreamedUnaryMethod_SendToRoute<BaseClass>::StreamedSendToRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendToRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendToRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::SendToRouteRequest* /*request*/, ::routerrpc::SendToRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendToRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::SendToRouteRequest,::routerrpc::SendToRouteResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetMissionControl() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::ResetMissionControlRequest, ::routerrpc::ResetMissionControlResponse>(std::bind(&WithStreamedUnaryMethod_ResetMissionControl<BaseClass>::StreamedResetMissionControl, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ResetMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::ResetMissionControlRequest* /*request*/, ::routerrpc::ResetMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetMissionControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::ResetMissionControlRequest,::routerrpc::ResetMissionControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryMissionControl : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryMissionControl() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::QueryMissionControlRequest, ::routerrpc::QueryMissionControlResponse>(std::bind(&WithStreamedUnaryMethod_QueryMissionControl<BaseClass>::StreamedQueryMissionControl, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryMissionControl() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryMissionControl(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryMissionControlRequest* /*request*/, ::routerrpc::QueryMissionControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryMissionControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::QueryMissionControlRequest,::routerrpc::QueryMissionControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryProbability : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryProbability() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::QueryProbabilityRequest, ::routerrpc::QueryProbabilityResponse>(std::bind(&WithStreamedUnaryMethod_QueryProbability<BaseClass>::StreamedQueryProbability, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryProbability() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryProbability(::grpc::ServerContext* /*context*/, const ::routerrpc::QueryProbabilityRequest* /*request*/, ::routerrpc::QueryProbabilityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryProbability(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::QueryProbabilityRequest,::routerrpc::QueryProbabilityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BuildRoute : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_BuildRoute() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::routerrpc::BuildRouteRequest, ::routerrpc::BuildRouteResponse>(std::bind(&WithStreamedUnaryMethod_BuildRoute<BaseClass>::StreamedBuildRoute, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BuildRoute() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BuildRoute(::grpc::ServerContext* /*context*/, const ::routerrpc::BuildRouteRequest* /*request*/, ::routerrpc::BuildRouteResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBuildRoute(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::routerrpc::BuildRouteRequest,::routerrpc::BuildRouteResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EstimateRouteFee<WithStreamedUnaryMethod_SendToRoute<WithStreamedUnaryMethod_ResetMissionControl<WithStreamedUnaryMethod_QueryMissionControl<WithStreamedUnaryMethod_QueryProbability<WithStreamedUnaryMethod_BuildRoute<Service > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SendPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SendPaymentV2() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::routerrpc::SendPaymentRequest, ::lnrpc::Payment>(std::bind(&WithSplitStreamingMethod_SendPaymentV2<BaseClass>::StreamedSendPaymentV2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SendPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSendPaymentV2(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routerrpc::SendPaymentRequest,::lnrpc::Payment>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_TrackPaymentV2 : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TrackPaymentV2() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::routerrpc::TrackPaymentRequest, ::lnrpc::Payment>(std::bind(&WithSplitStreamingMethod_TrackPaymentV2<BaseClass>::StreamedTrackPaymentV2, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_TrackPaymentV2() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TrackPaymentV2(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Payment>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTrackPaymentV2(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routerrpc::TrackPaymentRequest,::lnrpc::Payment>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeHtlcEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeHtlcEvents() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler< ::routerrpc::SubscribeHtlcEventsRequest, ::routerrpc::HtlcEvent>(std::bind(&WithSplitStreamingMethod_SubscribeHtlcEvents<BaseClass>::StreamedSubscribeHtlcEvents, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeHtlcEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeHtlcEvents(::grpc::ServerContext* /*context*/, const ::routerrpc::SubscribeHtlcEventsRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::HtlcEvent>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeHtlcEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routerrpc::SubscribeHtlcEventsRequest,::routerrpc::HtlcEvent>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SendPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SendPayment() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::routerrpc::SendPaymentRequest, ::routerrpc::PaymentStatus>(std::bind(&WithSplitStreamingMethod_SendPayment<BaseClass>::StreamedSendPayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SendPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::SendPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSendPayment(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routerrpc::SendPaymentRequest,::routerrpc::PaymentStatus>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_TrackPayment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TrackPayment() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler< ::routerrpc::TrackPaymentRequest, ::routerrpc::PaymentStatus>(std::bind(&WithSplitStreamingMethod_TrackPayment<BaseClass>::StreamedTrackPayment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_TrackPayment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TrackPayment(::grpc::ServerContext* /*context*/, const ::routerrpc::TrackPaymentRequest* /*request*/, ::grpc::ServerWriter< ::routerrpc::PaymentStatus>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTrackPayment(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::routerrpc::TrackPaymentRequest,::routerrpc::PaymentStatus>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SendPaymentV2<WithSplitStreamingMethod_TrackPaymentV2<WithSplitStreamingMethod_SubscribeHtlcEvents<WithSplitStreamingMethod_SendPayment<WithSplitStreamingMethod_TrackPayment<Service > > > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_SendPaymentV2<WithSplitStreamingMethod_TrackPaymentV2<WithStreamedUnaryMethod_EstimateRouteFee<WithStreamedUnaryMethod_SendToRoute<WithStreamedUnaryMethod_ResetMissionControl<WithStreamedUnaryMethod_QueryMissionControl<WithStreamedUnaryMethod_QueryProbability<WithStreamedUnaryMethod_BuildRoute<WithSplitStreamingMethod_SubscribeHtlcEvents<WithSplitStreamingMethod_SendPayment<WithSplitStreamingMethod_TrackPayment<Service > > > > > > > > > > > StreamedService;
};

}  // namespace routerrpc


#endif  // GRPC_router_2eproto__INCLUDED
