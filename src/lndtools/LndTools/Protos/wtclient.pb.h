// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wtclient.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wtclient_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_wtclient_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_wtclient_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_wtclient_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wtclient_2eproto;
namespace wtclientrpc {
class AddTowerRequest;
class AddTowerRequestDefaultTypeInternal;
extern AddTowerRequestDefaultTypeInternal _AddTowerRequest_default_instance_;
class AddTowerResponse;
class AddTowerResponseDefaultTypeInternal;
extern AddTowerResponseDefaultTypeInternal _AddTowerResponse_default_instance_;
class GetTowerInfoRequest;
class GetTowerInfoRequestDefaultTypeInternal;
extern GetTowerInfoRequestDefaultTypeInternal _GetTowerInfoRequest_default_instance_;
class ListTowersRequest;
class ListTowersRequestDefaultTypeInternal;
extern ListTowersRequestDefaultTypeInternal _ListTowersRequest_default_instance_;
class ListTowersResponse;
class ListTowersResponseDefaultTypeInternal;
extern ListTowersResponseDefaultTypeInternal _ListTowersResponse_default_instance_;
class PolicyRequest;
class PolicyRequestDefaultTypeInternal;
extern PolicyRequestDefaultTypeInternal _PolicyRequest_default_instance_;
class PolicyResponse;
class PolicyResponseDefaultTypeInternal;
extern PolicyResponseDefaultTypeInternal _PolicyResponse_default_instance_;
class RemoveTowerRequest;
class RemoveTowerRequestDefaultTypeInternal;
extern RemoveTowerRequestDefaultTypeInternal _RemoveTowerRequest_default_instance_;
class RemoveTowerResponse;
class RemoveTowerResponseDefaultTypeInternal;
extern RemoveTowerResponseDefaultTypeInternal _RemoveTowerResponse_default_instance_;
class StatsRequest;
class StatsRequestDefaultTypeInternal;
extern StatsRequestDefaultTypeInternal _StatsRequest_default_instance_;
class StatsResponse;
class StatsResponseDefaultTypeInternal;
extern StatsResponseDefaultTypeInternal _StatsResponse_default_instance_;
class Tower;
class TowerDefaultTypeInternal;
extern TowerDefaultTypeInternal _Tower_default_instance_;
class TowerSession;
class TowerSessionDefaultTypeInternal;
extern TowerSessionDefaultTypeInternal _TowerSession_default_instance_;
}  // namespace wtclientrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::wtclientrpc::AddTowerRequest* Arena::CreateMaybeMessage<::wtclientrpc::AddTowerRequest>(Arena*);
template<> ::wtclientrpc::AddTowerResponse* Arena::CreateMaybeMessage<::wtclientrpc::AddTowerResponse>(Arena*);
template<> ::wtclientrpc::GetTowerInfoRequest* Arena::CreateMaybeMessage<::wtclientrpc::GetTowerInfoRequest>(Arena*);
template<> ::wtclientrpc::ListTowersRequest* Arena::CreateMaybeMessage<::wtclientrpc::ListTowersRequest>(Arena*);
template<> ::wtclientrpc::ListTowersResponse* Arena::CreateMaybeMessage<::wtclientrpc::ListTowersResponse>(Arena*);
template<> ::wtclientrpc::PolicyRequest* Arena::CreateMaybeMessage<::wtclientrpc::PolicyRequest>(Arena*);
template<> ::wtclientrpc::PolicyResponse* Arena::CreateMaybeMessage<::wtclientrpc::PolicyResponse>(Arena*);
template<> ::wtclientrpc::RemoveTowerRequest* Arena::CreateMaybeMessage<::wtclientrpc::RemoveTowerRequest>(Arena*);
template<> ::wtclientrpc::RemoveTowerResponse* Arena::CreateMaybeMessage<::wtclientrpc::RemoveTowerResponse>(Arena*);
template<> ::wtclientrpc::StatsRequest* Arena::CreateMaybeMessage<::wtclientrpc::StatsRequest>(Arena*);
template<> ::wtclientrpc::StatsResponse* Arena::CreateMaybeMessage<::wtclientrpc::StatsResponse>(Arena*);
template<> ::wtclientrpc::Tower* Arena::CreateMaybeMessage<::wtclientrpc::Tower>(Arena*);
template<> ::wtclientrpc::TowerSession* Arena::CreateMaybeMessage<::wtclientrpc::TowerSession>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wtclientrpc {

// ===================================================================

class AddTowerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.AddTowerRequest) */ {
 public:
  AddTowerRequest();
  virtual ~AddTowerRequest();

  AddTowerRequest(const AddTowerRequest& from);
  AddTowerRequest(AddTowerRequest&& from) noexcept
    : AddTowerRequest() {
    *this = ::std::move(from);
  }

  inline AddTowerRequest& operator=(const AddTowerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTowerRequest& operator=(AddTowerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTowerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTowerRequest* internal_default_instance() {
    return reinterpret_cast<const AddTowerRequest*>(
               &_AddTowerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AddTowerRequest& a, AddTowerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTowerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTowerRequest* New() const final {
    return CreateMaybeMessage<AddTowerRequest>(nullptr);
  }

  AddTowerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTowerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTowerRequest& from);
  void MergeFrom(const AddTowerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTowerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.AddTowerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.AddTowerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class AddTowerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.AddTowerResponse) */ {
 public:
  AddTowerResponse();
  virtual ~AddTowerResponse();

  AddTowerResponse(const AddTowerResponse& from);
  AddTowerResponse(AddTowerResponse&& from) noexcept
    : AddTowerResponse() {
    *this = ::std::move(from);
  }

  inline AddTowerResponse& operator=(const AddTowerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddTowerResponse& operator=(AddTowerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddTowerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTowerResponse* internal_default_instance() {
    return reinterpret_cast<const AddTowerResponse*>(
               &_AddTowerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddTowerResponse& a, AddTowerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddTowerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddTowerResponse* New() const final {
    return CreateMaybeMessage<AddTowerResponse>(nullptr);
  }

  AddTowerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddTowerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddTowerResponse& from);
  void MergeFrom(const AddTowerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTowerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.AddTowerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wtclientrpc.AddTowerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class RemoveTowerRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.RemoveTowerRequest) */ {
 public:
  RemoveTowerRequest();
  virtual ~RemoveTowerRequest();

  RemoveTowerRequest(const RemoveTowerRequest& from);
  RemoveTowerRequest(RemoveTowerRequest&& from) noexcept
    : RemoveTowerRequest() {
    *this = ::std::move(from);
  }

  inline RemoveTowerRequest& operator=(const RemoveTowerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTowerRequest& operator=(RemoveTowerRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveTowerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveTowerRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveTowerRequest*>(
               &_RemoveTowerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoveTowerRequest& a, RemoveTowerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTowerRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveTowerRequest* New() const final {
    return CreateMaybeMessage<RemoveTowerRequest>(nullptr);
  }

  RemoveTowerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveTowerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveTowerRequest& from);
  void MergeFrom(const RemoveTowerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTowerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.RemoveTowerRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.RemoveTowerRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class RemoveTowerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.RemoveTowerResponse) */ {
 public:
  RemoveTowerResponse();
  virtual ~RemoveTowerResponse();

  RemoveTowerResponse(const RemoveTowerResponse& from);
  RemoveTowerResponse(RemoveTowerResponse&& from) noexcept
    : RemoveTowerResponse() {
    *this = ::std::move(from);
  }

  inline RemoveTowerResponse& operator=(const RemoveTowerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveTowerResponse& operator=(RemoveTowerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveTowerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveTowerResponse* internal_default_instance() {
    return reinterpret_cast<const RemoveTowerResponse*>(
               &_RemoveTowerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoveTowerResponse& a, RemoveTowerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveTowerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveTowerResponse* New() const final {
    return CreateMaybeMessage<RemoveTowerResponse>(nullptr);
  }

  RemoveTowerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveTowerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveTowerResponse& from);
  void MergeFrom(const RemoveTowerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveTowerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.RemoveTowerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wtclientrpc.RemoveTowerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class GetTowerInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.GetTowerInfoRequest) */ {
 public:
  GetTowerInfoRequest();
  virtual ~GetTowerInfoRequest();

  GetTowerInfoRequest(const GetTowerInfoRequest& from);
  GetTowerInfoRequest(GetTowerInfoRequest&& from) noexcept
    : GetTowerInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetTowerInfoRequest& operator=(const GetTowerInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTowerInfoRequest& operator=(GetTowerInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTowerInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTowerInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetTowerInfoRequest*>(
               &_GetTowerInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTowerInfoRequest& a, GetTowerInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTowerInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTowerInfoRequest* New() const final {
    return CreateMaybeMessage<GetTowerInfoRequest>(nullptr);
  }

  GetTowerInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTowerInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTowerInfoRequest& from);
  void MergeFrom(const GetTowerInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTowerInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.GetTowerInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPubkeyFieldNumber = 1,
    kIncludeSessionsFieldNumber = 2,
  };
  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bool include_sessions = 2;
  void clear_include_sessions();
  bool include_sessions() const;
  void set_include_sessions(bool value);
  private:
  bool _internal_include_sessions() const;
  void _internal_set_include_sessions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.GetTowerInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  bool include_sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class TowerSession :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.TowerSession) */ {
 public:
  TowerSession();
  virtual ~TowerSession();

  TowerSession(const TowerSession& from);
  TowerSession(TowerSession&& from) noexcept
    : TowerSession() {
    *this = ::std::move(from);
  }

  inline TowerSession& operator=(const TowerSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline TowerSession& operator=(TowerSession&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TowerSession& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TowerSession* internal_default_instance() {
    return reinterpret_cast<const TowerSession*>(
               &_TowerSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TowerSession& a, TowerSession& b) {
    a.Swap(&b);
  }
  inline void Swap(TowerSession* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TowerSession* New() const final {
    return CreateMaybeMessage<TowerSession>(nullptr);
  }

  TowerSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TowerSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TowerSession& from);
  void MergeFrom(const TowerSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TowerSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.TowerSession";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBackupsFieldNumber = 1,
    kNumPendingBackupsFieldNumber = 2,
    kMaxBackupsFieldNumber = 3,
    kSweepSatPerByteFieldNumber = 4,
  };
  // uint32 num_backups = 1;
  void clear_num_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backups() const;
  void set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_backups() const;
  void _internal_set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_pending_backups = 2;
  void clear_num_pending_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_backups() const;
  void set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pending_backups() const;
  void _internal_set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_backups = 3;
  void clear_max_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_backups() const;
  void set_max_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_backups() const;
  void _internal_set_max_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_sat_per_byte = 4;
  void clear_sweep_sat_per_byte();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_sat_per_byte() const;
  void set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_sat_per_byte() const;
  void _internal_set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.TowerSession)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_sat_per_byte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class Tower :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.Tower) */ {
 public:
  Tower();
  virtual ~Tower();

  Tower(const Tower& from);
  Tower(Tower&& from) noexcept
    : Tower() {
    *this = ::std::move(from);
  }

  inline Tower& operator=(const Tower& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tower& operator=(Tower&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tower& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tower* internal_default_instance() {
    return reinterpret_cast<const Tower*>(
               &_Tower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Tower& a, Tower& b) {
    a.Swap(&b);
  }
  inline void Swap(Tower* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tower* New() const final {
    return CreateMaybeMessage<Tower>(nullptr);
  }

  Tower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tower& from);
  void MergeFrom(const Tower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.Tower";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 2,
    kSessionsFieldNumber = 5,
    kPubkeyFieldNumber = 1,
    kActiveSessionCandidateFieldNumber = 3,
    kNumSessionsFieldNumber = 4,
  };
  // repeated string addresses = 2;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // repeated .wtclientrpc.TowerSession sessions = 5;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::wtclientrpc::TowerSession* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::TowerSession >*
      mutable_sessions();
  private:
  const ::wtclientrpc::TowerSession& _internal_sessions(int index) const;
  ::wtclientrpc::TowerSession* _internal_add_sessions();
  public:
  const ::wtclientrpc::TowerSession& sessions(int index) const;
  ::wtclientrpc::TowerSession* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::TowerSession >&
      sessions() const;

  // bytes pubkey = 1;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bool active_session_candidate = 3;
  void clear_active_session_candidate();
  bool active_session_candidate() const;
  void set_active_session_candidate(bool value);
  private:
  bool _internal_active_session_candidate() const;
  void _internal_set_active_session_candidate(bool value);
  public:

  // uint32 num_sessions = 4;
  void clear_num_sessions();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions() const;
  void set_num_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sessions() const;
  void _internal_set_num_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.Tower)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::TowerSession > sessions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  bool active_session_candidate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class ListTowersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.ListTowersRequest) */ {
 public:
  ListTowersRequest();
  virtual ~ListTowersRequest();

  ListTowersRequest(const ListTowersRequest& from);
  ListTowersRequest(ListTowersRequest&& from) noexcept
    : ListTowersRequest() {
    *this = ::std::move(from);
  }

  inline ListTowersRequest& operator=(const ListTowersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTowersRequest& operator=(ListTowersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTowersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTowersRequest* internal_default_instance() {
    return reinterpret_cast<const ListTowersRequest*>(
               &_ListTowersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListTowersRequest& a, ListTowersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTowersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTowersRequest* New() const final {
    return CreateMaybeMessage<ListTowersRequest>(nullptr);
  }

  ListTowersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTowersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTowersRequest& from);
  void MergeFrom(const ListTowersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTowersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.ListTowersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncludeSessionsFieldNumber = 1,
  };
  // bool include_sessions = 1;
  void clear_include_sessions();
  bool include_sessions() const;
  void set_include_sessions(bool value);
  private:
  bool _internal_include_sessions() const;
  void _internal_set_include_sessions(bool value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.ListTowersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool include_sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class ListTowersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.ListTowersResponse) */ {
 public:
  ListTowersResponse();
  virtual ~ListTowersResponse();

  ListTowersResponse(const ListTowersResponse& from);
  ListTowersResponse(ListTowersResponse&& from) noexcept
    : ListTowersResponse() {
    *this = ::std::move(from);
  }

  inline ListTowersResponse& operator=(const ListTowersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTowersResponse& operator=(ListTowersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTowersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTowersResponse* internal_default_instance() {
    return reinterpret_cast<const ListTowersResponse*>(
               &_ListTowersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListTowersResponse& a, ListTowersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTowersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTowersResponse* New() const final {
    return CreateMaybeMessage<ListTowersResponse>(nullptr);
  }

  ListTowersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTowersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTowersResponse& from);
  void MergeFrom(const ListTowersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTowersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.ListTowersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTowersFieldNumber = 1,
  };
  // repeated .wtclientrpc.Tower towers = 1;
  int towers_size() const;
  private:
  int _internal_towers_size() const;
  public:
  void clear_towers();
  ::wtclientrpc::Tower* mutable_towers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::Tower >*
      mutable_towers();
  private:
  const ::wtclientrpc::Tower& _internal_towers(int index) const;
  ::wtclientrpc::Tower* _internal_add_towers();
  public:
  const ::wtclientrpc::Tower& towers(int index) const;
  ::wtclientrpc::Tower* add_towers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::Tower >&
      towers() const;

  // @@protoc_insertion_point(class_scope:wtclientrpc.ListTowersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::Tower > towers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class StatsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.StatsRequest) */ {
 public:
  StatsRequest();
  virtual ~StatsRequest();

  StatsRequest(const StatsRequest& from);
  StatsRequest(StatsRequest&& from) noexcept
    : StatsRequest() {
    *this = ::std::move(from);
  }

  inline StatsRequest& operator=(const StatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsRequest& operator=(StatsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsRequest* internal_default_instance() {
    return reinterpret_cast<const StatsRequest*>(
               &_StatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StatsRequest& a, StatsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsRequest* New() const final {
    return CreateMaybeMessage<StatsRequest>(nullptr);
  }

  StatsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatsRequest& from);
  void MergeFrom(const StatsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.StatsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wtclientrpc.StatsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class StatsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.StatsResponse) */ {
 public:
  StatsResponse();
  virtual ~StatsResponse();

  StatsResponse(const StatsResponse& from);
  StatsResponse(StatsResponse&& from) noexcept
    : StatsResponse() {
    *this = ::std::move(from);
  }

  inline StatsResponse& operator=(const StatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatsResponse& operator=(StatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatsResponse* internal_default_instance() {
    return reinterpret_cast<const StatsResponse*>(
               &_StatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StatsResponse& a, StatsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StatsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatsResponse* New() const final {
    return CreateMaybeMessage<StatsResponse>(nullptr);
  }

  StatsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatsResponse& from);
  void MergeFrom(const StatsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.StatsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBackupsFieldNumber = 1,
    kNumPendingBackupsFieldNumber = 2,
    kNumFailedBackupsFieldNumber = 3,
    kNumSessionsAcquiredFieldNumber = 4,
    kNumSessionsExhaustedFieldNumber = 5,
  };
  // uint32 num_backups = 1;
  void clear_num_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backups() const;
  void set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_backups() const;
  void _internal_set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_pending_backups = 2;
  void clear_num_pending_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_backups() const;
  void set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pending_backups() const;
  void _internal_set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_failed_backups = 3;
  void clear_num_failed_backups();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_failed_backups() const;
  void set_num_failed_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_failed_backups() const;
  void _internal_set_num_failed_backups(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_sessions_acquired = 4;
  void clear_num_sessions_acquired();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions_acquired() const;
  void set_num_sessions_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sessions_acquired() const;
  void _internal_set_num_sessions_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 num_sessions_exhausted = 5;
  void clear_num_sessions_exhausted();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions_exhausted() const;
  void set_num_sessions_exhausted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_sessions_exhausted() const;
  void _internal_set_num_sessions_exhausted(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.StatsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pending_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_failed_backups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions_acquired_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_sessions_exhausted_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class PolicyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.PolicyRequest) */ {
 public:
  PolicyRequest();
  virtual ~PolicyRequest();

  PolicyRequest(const PolicyRequest& from);
  PolicyRequest(PolicyRequest&& from) noexcept
    : PolicyRequest() {
    *this = ::std::move(from);
  }

  inline PolicyRequest& operator=(const PolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRequest& operator=(PolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyRequest* internal_default_instance() {
    return reinterpret_cast<const PolicyRequest*>(
               &_PolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PolicyRequest& a, PolicyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyRequest* New() const final {
    return CreateMaybeMessage<PolicyRequest>(nullptr);
  }

  PolicyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyRequest& from);
  void MergeFrom(const PolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.PolicyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:wtclientrpc.PolicyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// -------------------------------------------------------------------

class PolicyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wtclientrpc.PolicyResponse) */ {
 public:
  PolicyResponse();
  virtual ~PolicyResponse();

  PolicyResponse(const PolicyResponse& from);
  PolicyResponse(PolicyResponse&& from) noexcept
    : PolicyResponse() {
    *this = ::std::move(from);
  }

  inline PolicyResponse& operator=(const PolicyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyResponse& operator=(PolicyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PolicyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PolicyResponse* internal_default_instance() {
    return reinterpret_cast<const PolicyResponse*>(
               &_PolicyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PolicyResponse& a, PolicyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PolicyResponse* New() const final {
    return CreateMaybeMessage<PolicyResponse>(nullptr);
  }

  PolicyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PolicyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PolicyResponse& from);
  void MergeFrom(const PolicyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wtclientrpc.PolicyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_wtclient_2eproto);
    return ::descriptor_table_wtclient_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxUpdatesFieldNumber = 1,
    kSweepSatPerByteFieldNumber = 2,
  };
  // uint32 max_updates = 1;
  void clear_max_updates();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_updates() const;
  void set_max_updates(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_updates() const;
  void _internal_set_max_updates(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sweep_sat_per_byte = 2;
  void clear_sweep_sat_per_byte();
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_sat_per_byte() const;
  void set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sweep_sat_per_byte() const;
  void _internal_set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:wtclientrpc.PolicyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sweep_sat_per_byte_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_wtclient_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AddTowerRequest

// bytes pubkey = 1;
inline void AddTowerRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddTowerRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.AddTowerRequest.pubkey)
  return _internal_pubkey();
}
inline void AddTowerRequest::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.AddTowerRequest.pubkey)
}
inline std::string* AddTowerRequest::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.AddTowerRequest.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& AddTowerRequest::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void AddTowerRequest::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddTowerRequest::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.AddTowerRequest.pubkey)
}
inline void AddTowerRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.AddTowerRequest.pubkey)
}
inline void AddTowerRequest::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.AddTowerRequest.pubkey)
}
inline std::string* AddTowerRequest::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddTowerRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:wtclientrpc.AddTowerRequest.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddTowerRequest::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.AddTowerRequest.pubkey)
}

// string address = 2;
inline void AddTowerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddTowerRequest::address() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.AddTowerRequest.address)
  return _internal_address();
}
inline void AddTowerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.AddTowerRequest.address)
}
inline std::string* AddTowerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.AddTowerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& AddTowerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void AddTowerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddTowerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.AddTowerRequest.address)
}
inline void AddTowerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.AddTowerRequest.address)
}
inline void AddTowerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.AddTowerRequest.address)
}
inline std::string* AddTowerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddTowerRequest::release_address() {
  // @@protoc_insertion_point(field_release:wtclientrpc.AddTowerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddTowerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.AddTowerRequest.address)
}

// -------------------------------------------------------------------

// AddTowerResponse

// -------------------------------------------------------------------

// RemoveTowerRequest

// bytes pubkey = 1;
inline void RemoveTowerRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveTowerRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.RemoveTowerRequest.pubkey)
  return _internal_pubkey();
}
inline void RemoveTowerRequest::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.RemoveTowerRequest.pubkey)
}
inline std::string* RemoveTowerRequest::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.RemoveTowerRequest.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& RemoveTowerRequest::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void RemoveTowerRequest::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveTowerRequest::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.RemoveTowerRequest.pubkey)
}
inline void RemoveTowerRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.RemoveTowerRequest.pubkey)
}
inline void RemoveTowerRequest::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.RemoveTowerRequest.pubkey)
}
inline std::string* RemoveTowerRequest::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveTowerRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:wtclientrpc.RemoveTowerRequest.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveTowerRequest::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.RemoveTowerRequest.pubkey)
}

// string address = 2;
inline void RemoveTowerRequest::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RemoveTowerRequest::address() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.RemoveTowerRequest.address)
  return _internal_address();
}
inline void RemoveTowerRequest::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.RemoveTowerRequest.address)
}
inline std::string* RemoveTowerRequest::mutable_address() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.RemoveTowerRequest.address)
  return _internal_mutable_address();
}
inline const std::string& RemoveTowerRequest::_internal_address() const {
  return address_.GetNoArena();
}
inline void RemoveTowerRequest::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RemoveTowerRequest::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.RemoveTowerRequest.address)
}
inline void RemoveTowerRequest::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.RemoveTowerRequest.address)
}
inline void RemoveTowerRequest::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.RemoveTowerRequest.address)
}
inline std::string* RemoveTowerRequest::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RemoveTowerRequest::release_address() {
  // @@protoc_insertion_point(field_release:wtclientrpc.RemoveTowerRequest.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveTowerRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.RemoveTowerRequest.address)
}

// -------------------------------------------------------------------

// RemoveTowerResponse

// -------------------------------------------------------------------

// GetTowerInfoRequest

// bytes pubkey = 1;
inline void GetTowerInfoRequest::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetTowerInfoRequest::pubkey() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.GetTowerInfoRequest.pubkey)
  return _internal_pubkey();
}
inline void GetTowerInfoRequest::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.GetTowerInfoRequest.pubkey)
}
inline std::string* GetTowerInfoRequest::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.GetTowerInfoRequest.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& GetTowerInfoRequest::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void GetTowerInfoRequest::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetTowerInfoRequest::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.GetTowerInfoRequest.pubkey)
}
inline void GetTowerInfoRequest::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.GetTowerInfoRequest.pubkey)
}
inline void GetTowerInfoRequest::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.GetTowerInfoRequest.pubkey)
}
inline std::string* GetTowerInfoRequest::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetTowerInfoRequest::release_pubkey() {
  // @@protoc_insertion_point(field_release:wtclientrpc.GetTowerInfoRequest.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetTowerInfoRequest::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.GetTowerInfoRequest.pubkey)
}

// bool include_sessions = 2;
inline void GetTowerInfoRequest::clear_include_sessions() {
  include_sessions_ = false;
}
inline bool GetTowerInfoRequest::_internal_include_sessions() const {
  return include_sessions_;
}
inline bool GetTowerInfoRequest::include_sessions() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.GetTowerInfoRequest.include_sessions)
  return _internal_include_sessions();
}
inline void GetTowerInfoRequest::_internal_set_include_sessions(bool value) {
  
  include_sessions_ = value;
}
inline void GetTowerInfoRequest::set_include_sessions(bool value) {
  _internal_set_include_sessions(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.GetTowerInfoRequest.include_sessions)
}

// -------------------------------------------------------------------

// TowerSession

// uint32 num_backups = 1;
inline void TowerSession::clear_num_backups() {
  num_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::_internal_num_backups() const {
  return num_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::num_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.TowerSession.num_backups)
  return _internal_num_backups();
}
inline void TowerSession::_internal_set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_backups_ = value;
}
inline void TowerSession::set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.TowerSession.num_backups)
}

// uint32 num_pending_backups = 2;
inline void TowerSession::clear_num_pending_backups() {
  num_pending_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::_internal_num_pending_backups() const {
  return num_pending_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::num_pending_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.TowerSession.num_pending_backups)
  return _internal_num_pending_backups();
}
inline void TowerSession::_internal_set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_pending_backups_ = value;
}
inline void TowerSession::set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pending_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.TowerSession.num_pending_backups)
}

// uint32 max_backups = 3;
inline void TowerSession::clear_max_backups() {
  max_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::_internal_max_backups() const {
  return max_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::max_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.TowerSession.max_backups)
  return _internal_max_backups();
}
inline void TowerSession::_internal_set_max_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_backups_ = value;
}
inline void TowerSession::set_max_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.TowerSession.max_backups)
}

// uint32 sweep_sat_per_byte = 4;
inline void TowerSession::clear_sweep_sat_per_byte() {
  sweep_sat_per_byte_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::_internal_sweep_sat_per_byte() const {
  return sweep_sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TowerSession::sweep_sat_per_byte() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.TowerSession.sweep_sat_per_byte)
  return _internal_sweep_sat_per_byte();
}
inline void TowerSession::_internal_set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_sat_per_byte_ = value;
}
inline void TowerSession::set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.TowerSession.sweep_sat_per_byte)
}

// -------------------------------------------------------------------

// Tower

// bytes pubkey = 1;
inline void Tower::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Tower::pubkey() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.Tower.pubkey)
  return _internal_pubkey();
}
inline void Tower::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.Tower.pubkey)
}
inline std::string* Tower::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.Tower.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& Tower::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void Tower::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Tower::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wtclientrpc.Tower.pubkey)
}
inline void Tower::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wtclientrpc.Tower.pubkey)
}
inline void Tower::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.Tower.pubkey)
}
inline std::string* Tower::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Tower::release_pubkey() {
  // @@protoc_insertion_point(field_release:wtclientrpc.Tower.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Tower::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:wtclientrpc.Tower.pubkey)
}

// repeated string addresses = 2;
inline int Tower::_internal_addresses_size() const {
  return addresses_.size();
}
inline int Tower::addresses_size() const {
  return _internal_addresses_size();
}
inline void Tower::clear_addresses() {
  addresses_.Clear();
}
inline std::string* Tower::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:wtclientrpc.Tower.addresses)
  return _internal_add_addresses();
}
inline const std::string& Tower::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& Tower::addresses(int index) const {
  // @@protoc_insertion_point(field_get:wtclientrpc.Tower.addresses)
  return _internal_addresses(index);
}
inline std::string* Tower::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.Tower.addresses)
  return addresses_.Mutable(index);
}
inline void Tower::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:wtclientrpc.Tower.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void Tower::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:wtclientrpc.Tower.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void Tower::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:wtclientrpc.Tower.addresses)
}
inline void Tower::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:wtclientrpc.Tower.addresses)
}
inline std::string* Tower::_internal_add_addresses() {
  return addresses_.Add();
}
inline void Tower::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:wtclientrpc.Tower.addresses)
}
inline void Tower::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:wtclientrpc.Tower.addresses)
}
inline void Tower::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:wtclientrpc.Tower.addresses)
}
inline void Tower::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:wtclientrpc.Tower.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Tower::addresses() const {
  // @@protoc_insertion_point(field_list:wtclientrpc.Tower.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Tower::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:wtclientrpc.Tower.addresses)
  return &addresses_;
}

// bool active_session_candidate = 3;
inline void Tower::clear_active_session_candidate() {
  active_session_candidate_ = false;
}
inline bool Tower::_internal_active_session_candidate() const {
  return active_session_candidate_;
}
inline bool Tower::active_session_candidate() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.Tower.active_session_candidate)
  return _internal_active_session_candidate();
}
inline void Tower::_internal_set_active_session_candidate(bool value) {
  
  active_session_candidate_ = value;
}
inline void Tower::set_active_session_candidate(bool value) {
  _internal_set_active_session_candidate(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.Tower.active_session_candidate)
}

// uint32 num_sessions = 4;
inline void Tower::clear_num_sessions() {
  num_sessions_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tower::_internal_num_sessions() const {
  return num_sessions_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tower::num_sessions() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.Tower.num_sessions)
  return _internal_num_sessions();
}
inline void Tower::_internal_set_num_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_sessions_ = value;
}
inline void Tower::set_num_sessions(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sessions(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.Tower.num_sessions)
}

// repeated .wtclientrpc.TowerSession sessions = 5;
inline int Tower::_internal_sessions_size() const {
  return sessions_.size();
}
inline int Tower::sessions_size() const {
  return _internal_sessions_size();
}
inline void Tower::clear_sessions() {
  sessions_.Clear();
}
inline ::wtclientrpc::TowerSession* Tower::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.Tower.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::TowerSession >*
Tower::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:wtclientrpc.Tower.sessions)
  return &sessions_;
}
inline const ::wtclientrpc::TowerSession& Tower::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::wtclientrpc::TowerSession& Tower::sessions(int index) const {
  // @@protoc_insertion_point(field_get:wtclientrpc.Tower.sessions)
  return _internal_sessions(index);
}
inline ::wtclientrpc::TowerSession* Tower::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::wtclientrpc::TowerSession* Tower::add_sessions() {
  // @@protoc_insertion_point(field_add:wtclientrpc.Tower.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::TowerSession >&
Tower::sessions() const {
  // @@protoc_insertion_point(field_list:wtclientrpc.Tower.sessions)
  return sessions_;
}

// -------------------------------------------------------------------

// ListTowersRequest

// bool include_sessions = 1;
inline void ListTowersRequest::clear_include_sessions() {
  include_sessions_ = false;
}
inline bool ListTowersRequest::_internal_include_sessions() const {
  return include_sessions_;
}
inline bool ListTowersRequest::include_sessions() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.ListTowersRequest.include_sessions)
  return _internal_include_sessions();
}
inline void ListTowersRequest::_internal_set_include_sessions(bool value) {
  
  include_sessions_ = value;
}
inline void ListTowersRequest::set_include_sessions(bool value) {
  _internal_set_include_sessions(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.ListTowersRequest.include_sessions)
}

// -------------------------------------------------------------------

// ListTowersResponse

// repeated .wtclientrpc.Tower towers = 1;
inline int ListTowersResponse::_internal_towers_size() const {
  return towers_.size();
}
inline int ListTowersResponse::towers_size() const {
  return _internal_towers_size();
}
inline void ListTowersResponse::clear_towers() {
  towers_.Clear();
}
inline ::wtclientrpc::Tower* ListTowersResponse::mutable_towers(int index) {
  // @@protoc_insertion_point(field_mutable:wtclientrpc.ListTowersResponse.towers)
  return towers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::Tower >*
ListTowersResponse::mutable_towers() {
  // @@protoc_insertion_point(field_mutable_list:wtclientrpc.ListTowersResponse.towers)
  return &towers_;
}
inline const ::wtclientrpc::Tower& ListTowersResponse::_internal_towers(int index) const {
  return towers_.Get(index);
}
inline const ::wtclientrpc::Tower& ListTowersResponse::towers(int index) const {
  // @@protoc_insertion_point(field_get:wtclientrpc.ListTowersResponse.towers)
  return _internal_towers(index);
}
inline ::wtclientrpc::Tower* ListTowersResponse::_internal_add_towers() {
  return towers_.Add();
}
inline ::wtclientrpc::Tower* ListTowersResponse::add_towers() {
  // @@protoc_insertion_point(field_add:wtclientrpc.ListTowersResponse.towers)
  return _internal_add_towers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wtclientrpc::Tower >&
ListTowersResponse::towers() const {
  // @@protoc_insertion_point(field_list:wtclientrpc.ListTowersResponse.towers)
  return towers_;
}

// -------------------------------------------------------------------

// StatsRequest

// -------------------------------------------------------------------

// StatsResponse

// uint32 num_backups = 1;
inline void StatsResponse::clear_num_backups() {
  num_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_num_backups() const {
  return num_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::num_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.StatsResponse.num_backups)
  return _internal_num_backups();
}
inline void StatsResponse::_internal_set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_backups_ = value;
}
inline void StatsResponse::set_num_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.StatsResponse.num_backups)
}

// uint32 num_pending_backups = 2;
inline void StatsResponse::clear_num_pending_backups() {
  num_pending_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_num_pending_backups() const {
  return num_pending_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::num_pending_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.StatsResponse.num_pending_backups)
  return _internal_num_pending_backups();
}
inline void StatsResponse::_internal_set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_pending_backups_ = value;
}
inline void StatsResponse::set_num_pending_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pending_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.StatsResponse.num_pending_backups)
}

// uint32 num_failed_backups = 3;
inline void StatsResponse::clear_num_failed_backups() {
  num_failed_backups_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_num_failed_backups() const {
  return num_failed_backups_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::num_failed_backups() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.StatsResponse.num_failed_backups)
  return _internal_num_failed_backups();
}
inline void StatsResponse::_internal_set_num_failed_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_failed_backups_ = value;
}
inline void StatsResponse::set_num_failed_backups(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_failed_backups(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.StatsResponse.num_failed_backups)
}

// uint32 num_sessions_acquired = 4;
inline void StatsResponse::clear_num_sessions_acquired() {
  num_sessions_acquired_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_num_sessions_acquired() const {
  return num_sessions_acquired_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::num_sessions_acquired() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.StatsResponse.num_sessions_acquired)
  return _internal_num_sessions_acquired();
}
inline void StatsResponse::_internal_set_num_sessions_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_sessions_acquired_ = value;
}
inline void StatsResponse::set_num_sessions_acquired(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sessions_acquired(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.StatsResponse.num_sessions_acquired)
}

// uint32 num_sessions_exhausted = 5;
inline void StatsResponse::clear_num_sessions_exhausted() {
  num_sessions_exhausted_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::_internal_num_sessions_exhausted() const {
  return num_sessions_exhausted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StatsResponse::num_sessions_exhausted() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.StatsResponse.num_sessions_exhausted)
  return _internal_num_sessions_exhausted();
}
inline void StatsResponse::_internal_set_num_sessions_exhausted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_sessions_exhausted_ = value;
}
inline void StatsResponse::set_num_sessions_exhausted(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_sessions_exhausted(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.StatsResponse.num_sessions_exhausted)
}

// -------------------------------------------------------------------

// PolicyRequest

// -------------------------------------------------------------------

// PolicyResponse

// uint32 max_updates = 1;
inline void PolicyResponse::clear_max_updates() {
  max_updates_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyResponse::_internal_max_updates() const {
  return max_updates_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyResponse::max_updates() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.PolicyResponse.max_updates)
  return _internal_max_updates();
}
inline void PolicyResponse::_internal_set_max_updates(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_updates_ = value;
}
inline void PolicyResponse::set_max_updates(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_updates(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.PolicyResponse.max_updates)
}

// uint32 sweep_sat_per_byte = 2;
inline void PolicyResponse::clear_sweep_sat_per_byte() {
  sweep_sat_per_byte_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyResponse::_internal_sweep_sat_per_byte() const {
  return sweep_sat_per_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PolicyResponse::sweep_sat_per_byte() const {
  // @@protoc_insertion_point(field_get:wtclientrpc.PolicyResponse.sweep_sat_per_byte)
  return _internal_sweep_sat_per_byte();
}
inline void PolicyResponse::_internal_set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sweep_sat_per_byte_ = value;
}
inline void PolicyResponse::set_sweep_sat_per_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sweep_sat_per_byte(value);
  // @@protoc_insertion_point(field_set:wtclientrpc.PolicyResponse.sweep_sat_per_byte)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace wtclientrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_wtclient_2eproto
