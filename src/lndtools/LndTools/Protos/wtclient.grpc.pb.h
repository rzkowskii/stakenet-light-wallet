// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wtclient.proto
#ifndef GRPC_wtclient_2eproto__INCLUDED
#define GRPC_wtclient_2eproto__INCLUDED

#include "wtclient.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace wtclientrpc {

class WatchtowerClient final {
 public:
  static constexpr char const* service_full_name() {
    return "wtclientrpc.WatchtowerClient";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    //
    // AddTower adds a new watchtower reachable at the given address and
    // considers it for new sessions. If the watchtower already exists, then
    // any new addresses included will be considered when dialing it for
    // session negotiations and backups.
    virtual ::grpc::Status AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::wtclientrpc::AddTowerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>> AsyncAddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>>(AsyncAddTowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>> PrepareAsyncAddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>>(PrepareAsyncAddTowerRaw(context, request, cq));
    }
    //
    // RemoveTower removes a watchtower from being considered for future session
    // negotiations and from being used for any subsequent backups until it's added
    // again. If an address is provided, then this RPC only serves as a way of
    // removing the address from the watchtower instead.
    virtual ::grpc::Status RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::wtclientrpc::RemoveTowerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>> AsyncRemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>>(AsyncRemoveTowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>> PrepareAsyncRemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>>(PrepareAsyncRemoveTowerRaw(context, request, cq));
    }
    // ListTowers returns the list of watchtowers registered with the client.
    virtual ::grpc::Status ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::wtclientrpc::ListTowersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>> AsyncListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>>(AsyncListTowersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>> PrepareAsyncListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>>(PrepareAsyncListTowersRaw(context, request, cq));
    }
    // GetTowerInfo retrieves information for a registered watchtower.
    virtual ::grpc::Status GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::wtclientrpc::Tower* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>> AsyncGetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>>(AsyncGetTowerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>> PrepareAsyncGetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>>(PrepareAsyncGetTowerInfoRaw(context, request, cq));
    }
    // Stats returns the in-memory statistics of the client since startup.
    virtual ::grpc::Status Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::wtclientrpc::StatsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>> AsyncStats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>>(AsyncStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>> PrepareAsyncStats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>>(PrepareAsyncStatsRaw(context, request, cq));
    }
    // Policy returns the active watchtower client policy configuration.
    virtual ::grpc::Status Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::wtclientrpc::PolicyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>> AsyncPolicy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>>(AsyncPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>> PrepareAsyncPolicy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>>(PrepareAsyncPolicyRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      //
      // AddTower adds a new watchtower reachable at the given address and
      // considers it for new sessions. If the watchtower already exists, then
      // any new addresses included will be considered when dialing it for
      // session negotiations and backups.
      virtual void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      //
      // RemoveTower removes a watchtower from being considered for future session
      // negotiations and from being used for any subsequent backups until it's added
      // again. If an address is provided, then this RPC only serves as a way of
      // removing the address from the watchtower instead.
      virtual void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ListTowers returns the list of watchtowers registered with the client.
      virtual void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // GetTowerInfo retrieves information for a registered watchtower.
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Stats returns the in-memory statistics of the client since startup.
      virtual void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // Policy returns the active watchtower client policy configuration.
      virtual void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>* AsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::AddTowerResponse>* PrepareAsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>* AsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::RemoveTowerResponse>* PrepareAsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>* AsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::ListTowersResponse>* PrepareAsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>* AsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::Tower>* PrepareAsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>* AsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::StatsResponse>* PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>* AsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::wtclientrpc::PolicyResponse>* PrepareAsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::wtclientrpc::AddTowerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>> AsyncAddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>>(AsyncAddTowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>> PrepareAsyncAddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>>(PrepareAsyncAddTowerRaw(context, request, cq));
    }
    ::grpc::Status RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::wtclientrpc::RemoveTowerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>> AsyncRemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>>(AsyncRemoveTowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>> PrepareAsyncRemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>>(PrepareAsyncRemoveTowerRaw(context, request, cq));
    }
    ::grpc::Status ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::wtclientrpc::ListTowersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>> AsyncListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>>(AsyncListTowersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>> PrepareAsyncListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>>(PrepareAsyncListTowersRaw(context, request, cq));
    }
    ::grpc::Status GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::wtclientrpc::Tower* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>> AsyncGetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>>(AsyncGetTowerInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>> PrepareAsyncGetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>>(PrepareAsyncGetTowerInfoRaw(context, request, cq));
    }
    ::grpc::Status Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::wtclientrpc::StatsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>> AsyncStats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>>(AsyncStatsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>> PrepareAsyncStats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>>(PrepareAsyncStatsRaw(context, request, cq));
    }
    ::grpc::Status Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::wtclientrpc::PolicyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>> AsyncPolicy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>>(AsyncPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>> PrepareAsyncPolicy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>>(PrepareAsyncPolicyRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)>) override;
      void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)>) override;
      void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)>) override;
      void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)>) override;
      void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)>) override;
      void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>* AsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>* PrepareAsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>* AsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>* PrepareAsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>* AsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>* PrepareAsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>* AsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>* PrepareAsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>* AsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>* PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>* AsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>* PrepareAsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_AddTower_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveTower_;
    const ::grpc::internal::RpcMethod rpcmethod_ListTowers_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTowerInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_Stats_;
    const ::grpc::internal::RpcMethod rpcmethod_Policy_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    //
    // AddTower adds a new watchtower reachable at the given address and
    // considers it for new sessions. If the watchtower already exists, then
    // any new addresses included will be considered when dialing it for
    // session negotiations and backups.
    virtual ::grpc::Status AddTower(::grpc::ServerContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response);
    //
    // RemoveTower removes a watchtower from being considered for future session
    // negotiations and from being used for any subsequent backups until it's added
    // again. If an address is provided, then this RPC only serves as a way of
    // removing the address from the watchtower instead.
    virtual ::grpc::Status RemoveTower(::grpc::ServerContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response);
    // ListTowers returns the list of watchtowers registered with the client.
    virtual ::grpc::Status ListTowers(::grpc::ServerContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response);
    // GetTowerInfo retrieves information for a registered watchtower.
    virtual ::grpc::Status GetTowerInfo(::grpc::ServerContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response);
    // Stats returns the in-memory statistics of the client since startup.
    virtual ::grpc::Status Stats(::grpc::ServerContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response);
    // Policy returns the active watchtower client policy configuration.
    virtual ::grpc::Status Policy(::grpc::ServerContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddTower() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTower(::grpc::ServerContext* context, ::wtclientrpc::AddTowerRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::AddTowerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveTower() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTower(::grpc::ServerContext* context, ::wtclientrpc::RemoveTowerRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::RemoveTowerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListTowers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTowers(::grpc::ServerContext* context, ::wtclientrpc::ListTowersRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::ListTowersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetTowerInfo() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTowerInfo(::grpc::ServerContext* context, ::wtclientrpc::GetTowerInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::Tower>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stats() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStats(::grpc::ServerContext* context, ::wtclientrpc::StatsRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::StatsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Policy() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicy(::grpc::ServerContext* context, ::wtclientrpc::PolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::wtclientrpc::PolicyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_AddTower<WithAsyncMethod_RemoveTower<WithAsyncMethod_ListTowers<WithAsyncMethod_GetTowerInfo<WithAsyncMethod_Stats<WithAsyncMethod_Policy<Service > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddTower() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::AddTowerRequest, ::wtclientrpc::AddTowerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response) { return this->AddTower(context, request, response); }));}
    void SetMessageAllocatorFor_AddTower(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::AddTowerRequest, ::wtclientrpc::AddTowerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::AddTowerRequest, ::wtclientrpc::AddTowerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddTower(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddTower(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveTower() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::RemoveTowerRequest, ::wtclientrpc::RemoveTowerResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response) { return this->RemoveTower(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveTower(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::RemoveTowerRequest, ::wtclientrpc::RemoveTowerResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::RemoveTowerRequest, ::wtclientrpc::RemoveTowerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveTower(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveTower(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ListTowers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::ListTowersRequest, ::wtclientrpc::ListTowersResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response) { return this->ListTowers(context, request, response); }));}
    void SetMessageAllocatorFor_ListTowers(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::ListTowersRequest, ::wtclientrpc::ListTowersResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::ListTowersRequest, ::wtclientrpc::ListTowersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTowers(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTowers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetTowerInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::GetTowerInfoRequest, ::wtclientrpc::Tower>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response) { return this->GetTowerInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetTowerInfo(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::GetTowerInfoRequest, ::wtclientrpc::Tower>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::GetTowerInfoRequest, ::wtclientrpc::Tower>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTowerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTowerInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Stats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::StatsRequest, ::wtclientrpc::StatsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response) { return this->Stats(context, request, response); }));}
    void SetMessageAllocatorFor_Stats(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::StatsRequest, ::wtclientrpc::StatsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::StatsRequest, ::wtclientrpc::StatsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stats(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Policy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::PolicyRequest, ::wtclientrpc::PolicyResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response) { return this->Policy(context, request, response); }));}
    void SetMessageAllocatorFor_Policy(
        ::grpc::experimental::MessageAllocator< ::wtclientrpc::PolicyRequest, ::wtclientrpc::PolicyResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::wtclientrpc::PolicyRequest, ::wtclientrpc::PolicyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Policy(
      ::grpc::CallbackServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Policy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_AddTower<ExperimentalWithCallbackMethod_RemoveTower<ExperimentalWithCallbackMethod_ListTowers<ExperimentalWithCallbackMethod_GetTowerInfo<ExperimentalWithCallbackMethod_Stats<ExperimentalWithCallbackMethod_Policy<Service > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_AddTower<ExperimentalWithCallbackMethod_RemoveTower<ExperimentalWithCallbackMethod_ListTowers<ExperimentalWithCallbackMethod_GetTowerInfo<ExperimentalWithCallbackMethod_Stats<ExperimentalWithCallbackMethod_Policy<Service > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddTower() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveTower() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListTowers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetTowerInfo() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stats() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Policy() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddTower() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddTower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveTower() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveTower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListTowers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListTowers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetTowerInfo() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTowerInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stats() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStats(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Policy() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddTower() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddTower(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddTower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddTower(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveTower() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveTower(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveTower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveTower(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ListTowers() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListTowers(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ListTowers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ListTowers(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTowerInfo() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetTowerInfo(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetTowerInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetTowerInfo(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Stats() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stats(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Stats(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Stats(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Policy() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Policy(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Policy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Policy(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddTower() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::AddTowerRequest, ::wtclientrpc::AddTowerResponse>(std::bind(&WithStreamedUnaryMethod_AddTower<BaseClass>::StreamedAddTower, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::AddTowerRequest* /*request*/, ::wtclientrpc::AddTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddTower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::AddTowerRequest,::wtclientrpc::AddTowerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveTower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveTower() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::RemoveTowerRequest, ::wtclientrpc::RemoveTowerResponse>(std::bind(&WithStreamedUnaryMethod_RemoveTower<BaseClass>::StreamedRemoveTower, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RemoveTower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveTower(::grpc::ServerContext* /*context*/, const ::wtclientrpc::RemoveTowerRequest* /*request*/, ::wtclientrpc::RemoveTowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveTower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::RemoveTowerRequest,::wtclientrpc::RemoveTowerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListTowers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListTowers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::ListTowersRequest, ::wtclientrpc::ListTowersResponse>(std::bind(&WithStreamedUnaryMethod_ListTowers<BaseClass>::StreamedListTowers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListTowers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListTowers(::grpc::ServerContext* /*context*/, const ::wtclientrpc::ListTowersRequest* /*request*/, ::wtclientrpc::ListTowersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListTowers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::ListTowersRequest,::wtclientrpc::ListTowersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetTowerInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetTowerInfo() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::GetTowerInfoRequest, ::wtclientrpc::Tower>(std::bind(&WithStreamedUnaryMethod_GetTowerInfo<BaseClass>::StreamedGetTowerInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetTowerInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTowerInfo(::grpc::ServerContext* /*context*/, const ::wtclientrpc::GetTowerInfoRequest* /*request*/, ::wtclientrpc::Tower* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetTowerInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::GetTowerInfoRequest,::wtclientrpc::Tower>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stats : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stats() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::StatsRequest, ::wtclientrpc::StatsResponse>(std::bind(&WithStreamedUnaryMethod_Stats<BaseClass>::StreamedStats, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Stats() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stats(::grpc::ServerContext* /*context*/, const ::wtclientrpc::StatsRequest* /*request*/, ::wtclientrpc::StatsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStats(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::StatsRequest,::wtclientrpc::StatsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Policy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Policy() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::wtclientrpc::PolicyRequest, ::wtclientrpc::PolicyResponse>(std::bind(&WithStreamedUnaryMethod_Policy<BaseClass>::StreamedPolicy, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Policy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Policy(::grpc::ServerContext* /*context*/, const ::wtclientrpc::PolicyRequest* /*request*/, ::wtclientrpc::PolicyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::wtclientrpc::PolicyRequest,::wtclientrpc::PolicyResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_AddTower<WithStreamedUnaryMethod_RemoveTower<WithStreamedUnaryMethod_ListTowers<WithStreamedUnaryMethod_GetTowerInfo<WithStreamedUnaryMethod_Stats<WithStreamedUnaryMethod_Policy<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_AddTower<WithStreamedUnaryMethod_RemoveTower<WithStreamedUnaryMethod_ListTowers<WithStreamedUnaryMethod_GetTowerInfo<WithStreamedUnaryMethod_Stats<WithStreamedUnaryMethod_Policy<Service > > > > > > StreamedService;
};

}  // namespace wtclientrpc


#endif  // GRPC_wtclient_2eproto__INCLUDED
