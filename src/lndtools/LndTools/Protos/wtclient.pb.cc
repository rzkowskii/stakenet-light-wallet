// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wtclient.proto

#include "wtclient.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_wtclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tower_wtclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_wtclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerSession_wtclient_2eproto;
namespace wtclientrpc {
class AddTowerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTowerRequest> _instance;
} _AddTowerRequest_default_instance_;
class AddTowerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddTowerResponse> _instance;
} _AddTowerResponse_default_instance_;
class RemoveTowerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveTowerRequest> _instance;
} _RemoveTowerRequest_default_instance_;
class RemoveTowerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoveTowerResponse> _instance;
} _RemoveTowerResponse_default_instance_;
class GetTowerInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTowerInfoRequest> _instance;
} _GetTowerInfoRequest_default_instance_;
class TowerSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TowerSession> _instance;
} _TowerSession_default_instance_;
class TowerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tower> _instance;
} _Tower_default_instance_;
class ListTowersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTowersRequest> _instance;
} _ListTowersRequest_default_instance_;
class ListTowersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTowersResponse> _instance;
} _ListTowersResponse_default_instance_;
class StatsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsRequest> _instance;
} _StatsRequest_default_instance_;
class StatsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StatsResponse> _instance;
} _StatsResponse_default_instance_;
class PolicyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyRequest> _instance;
} _PolicyRequest_default_instance_;
class PolicyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PolicyResponse> _instance;
} _PolicyResponse_default_instance_;
}  // namespace wtclientrpc
static void InitDefaultsscc_info_AddTowerRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_AddTowerRequest_default_instance_;
    new (ptr) ::wtclientrpc::AddTowerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::AddTowerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddTowerRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddTowerRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_AddTowerResponse_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_AddTowerResponse_default_instance_;
    new (ptr) ::wtclientrpc::AddTowerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::AddTowerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AddTowerResponse_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AddTowerResponse_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_GetTowerInfoRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_GetTowerInfoRequest_default_instance_;
    new (ptr) ::wtclientrpc::GetTowerInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::GetTowerInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTowerInfoRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTowerInfoRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_ListTowersRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_ListTowersRequest_default_instance_;
    new (ptr) ::wtclientrpc::ListTowersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::ListTowersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTowersRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTowersRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_ListTowersResponse_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_ListTowersResponse_default_instance_;
    new (ptr) ::wtclientrpc::ListTowersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::ListTowersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTowersResponse_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTowersResponse_wtclient_2eproto}, {
      &scc_info_Tower_wtclient_2eproto.base,}};

static void InitDefaultsscc_info_PolicyRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_PolicyRequest_default_instance_;
    new (ptr) ::wtclientrpc::PolicyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::PolicyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolicyRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_PolicyResponse_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_PolicyResponse_default_instance_;
    new (ptr) ::wtclientrpc::PolicyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::PolicyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PolicyResponse_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PolicyResponse_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_RemoveTowerRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_RemoveTowerRequest_default_instance_;
    new (ptr) ::wtclientrpc::RemoveTowerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::RemoveTowerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveTowerRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveTowerRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_RemoveTowerResponse_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_RemoveTowerResponse_default_instance_;
    new (ptr) ::wtclientrpc::RemoveTowerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::RemoveTowerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoveTowerResponse_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoveTowerResponse_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_StatsRequest_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_StatsRequest_default_instance_;
    new (ptr) ::wtclientrpc::StatsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::StatsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsRequest_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsRequest_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_StatsResponse_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_StatsResponse_default_instance_;
    new (ptr) ::wtclientrpc::StatsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::StatsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StatsResponse_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StatsResponse_wtclient_2eproto}, {}};

static void InitDefaultsscc_info_Tower_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_Tower_default_instance_;
    new (ptr) ::wtclientrpc::Tower();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::Tower::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Tower_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Tower_wtclient_2eproto}, {
      &scc_info_TowerSession_wtclient_2eproto.base,}};

static void InitDefaultsscc_info_TowerSession_wtclient_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wtclientrpc::_TowerSession_default_instance_;
    new (ptr) ::wtclientrpc::TowerSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wtclientrpc::TowerSession::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TowerSession_wtclient_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TowerSession_wtclient_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_wtclient_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_wtclient_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_wtclient_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_wtclient_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::AddTowerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::AddTowerRequest, pubkey_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::AddTowerRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::AddTowerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::RemoveTowerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::RemoveTowerRequest, pubkey_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::RemoveTowerRequest, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::RemoveTowerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::GetTowerInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::GetTowerInfoRequest, pubkey_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::GetTowerInfoRequest, include_sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::TowerSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::TowerSession, num_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::TowerSession, num_pending_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::TowerSession, max_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::TowerSession, sweep_sat_per_byte_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, pubkey_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, addresses_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, active_session_candidate_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, num_sessions_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::Tower, sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::ListTowersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::ListTowersRequest, include_sessions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::ListTowersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::ListTowersResponse, towers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, num_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, num_pending_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, num_failed_backups_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, num_sessions_acquired_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::StatsResponse, num_sessions_exhausted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::PolicyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::PolicyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::PolicyResponse, max_updates_),
  PROTOBUF_FIELD_OFFSET(::wtclientrpc::PolicyResponse, sweep_sat_per_byte_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wtclientrpc::AddTowerRequest)},
  { 7, -1, sizeof(::wtclientrpc::AddTowerResponse)},
  { 12, -1, sizeof(::wtclientrpc::RemoveTowerRequest)},
  { 19, -1, sizeof(::wtclientrpc::RemoveTowerResponse)},
  { 24, -1, sizeof(::wtclientrpc::GetTowerInfoRequest)},
  { 31, -1, sizeof(::wtclientrpc::TowerSession)},
  { 40, -1, sizeof(::wtclientrpc::Tower)},
  { 50, -1, sizeof(::wtclientrpc::ListTowersRequest)},
  { 56, -1, sizeof(::wtclientrpc::ListTowersResponse)},
  { 62, -1, sizeof(::wtclientrpc::StatsRequest)},
  { 67, -1, sizeof(::wtclientrpc::StatsResponse)},
  { 77, -1, sizeof(::wtclientrpc::PolicyRequest)},
  { 82, -1, sizeof(::wtclientrpc::PolicyResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_AddTowerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_AddTowerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_RemoveTowerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_RemoveTowerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_GetTowerInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_TowerSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_Tower_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_ListTowersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_ListTowersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_StatsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_StatsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_PolicyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wtclientrpc::_PolicyResponse_default_instance_),
};

const char descriptor_table_protodef_wtclient_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016wtclient.proto\022\013wtclientrpc\"2\n\017AddTowe"
  "rRequest\022\016\n\006pubkey\030\001 \001(\014\022\017\n\007address\030\002 \001("
  "\t\"\022\n\020AddTowerResponse\"5\n\022RemoveTowerRequ"
  "est\022\016\n\006pubkey\030\001 \001(\014\022\017\n\007address\030\002 \001(\t\"\025\n\023"
  "RemoveTowerResponse\"\?\n\023GetTowerInfoReque"
  "st\022\016\n\006pubkey\030\001 \001(\014\022\030\n\020include_sessions\030\002"
  " \001(\010\"q\n\014TowerSession\022\023\n\013num_backups\030\001 \001("
  "\r\022\033\n\023num_pending_backups\030\002 \001(\r\022\023\n\013max_ba"
  "ckups\030\003 \001(\r\022\032\n\022sweep_sat_per_byte\030\004 \001(\r\""
  "\217\001\n\005Tower\022\016\n\006pubkey\030\001 \001(\014\022\021\n\taddresses\030\002"
  " \003(\t\022 \n\030active_session_candidate\030\003 \001(\010\022\024"
  "\n\014num_sessions\030\004 \001(\r\022+\n\010sessions\030\005 \003(\0132\031"
  ".wtclientrpc.TowerSession\"-\n\021ListTowersR"
  "equest\022\030\n\020include_sessions\030\001 \001(\010\"8\n\022List"
  "TowersResponse\022\"\n\006towers\030\001 \003(\0132\022.wtclien"
  "trpc.Tower\"\016\n\014StatsRequest\"\234\001\n\rStatsResp"
  "onse\022\023\n\013num_backups\030\001 \001(\r\022\033\n\023num_pending"
  "_backups\030\002 \001(\r\022\032\n\022num_failed_backups\030\003 \001"
  "(\r\022\035\n\025num_sessions_acquired\030\004 \001(\r\022\036\n\026num"
  "_sessions_exhausted\030\005 \001(\r\"\017\n\rPolicyReque"
  "st\"A\n\016PolicyResponse\022\023\n\013max_updates\030\001 \001("
  "\r\022\032\n\022sweep_sat_per_byte\030\002 \001(\r2\305\003\n\020Watcht"
  "owerClient\022G\n\010AddTower\022\034.wtclientrpc.Add"
  "TowerRequest\032\035.wtclientrpc.AddTowerRespo"
  "nse\022P\n\013RemoveTower\022\037.wtclientrpc.RemoveT"
  "owerRequest\032 .wtclientrpc.RemoveTowerRes"
  "ponse\022M\n\nListTowers\022\036.wtclientrpc.ListTo"
  "wersRequest\032\037.wtclientrpc.ListTowersResp"
  "onse\022D\n\014GetTowerInfo\022 .wtclientrpc.GetTo"
  "werInfoRequest\032\022.wtclientrpc.Tower\022>\n\005St"
  "ats\022\031.wtclientrpc.StatsRequest\032\032.wtclien"
  "trpc.StatsResponse\022A\n\006Policy\022\032.wtclientr"
  "pc.PolicyRequest\032\033.wtclientrpc.PolicyRes"
  "ponseB3Z1github.com/lightningnetwork/lnd"
  "/lnrpc/wtclientrpcb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_wtclient_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_wtclient_2eproto_sccs[13] = {
  &scc_info_AddTowerRequest_wtclient_2eproto.base,
  &scc_info_AddTowerResponse_wtclient_2eproto.base,
  &scc_info_GetTowerInfoRequest_wtclient_2eproto.base,
  &scc_info_ListTowersRequest_wtclient_2eproto.base,
  &scc_info_ListTowersResponse_wtclient_2eproto.base,
  &scc_info_PolicyRequest_wtclient_2eproto.base,
  &scc_info_PolicyResponse_wtclient_2eproto.base,
  &scc_info_RemoveTowerRequest_wtclient_2eproto.base,
  &scc_info_RemoveTowerResponse_wtclient_2eproto.base,
  &scc_info_StatsRequest_wtclient_2eproto.base,
  &scc_info_StatsResponse_wtclient_2eproto.base,
  &scc_info_Tower_wtclient_2eproto.base,
  &scc_info_TowerSession_wtclient_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_wtclient_2eproto_once;
static bool descriptor_table_wtclient_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_wtclient_2eproto = {
  &descriptor_table_wtclient_2eproto_initialized, descriptor_table_protodef_wtclient_2eproto, "wtclient.proto", 1386,
  &descriptor_table_wtclient_2eproto_once, descriptor_table_wtclient_2eproto_sccs, descriptor_table_wtclient_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_wtclient_2eproto::offsets,
  file_level_metadata_wtclient_2eproto, 13, file_level_enum_descriptors_wtclient_2eproto, file_level_service_descriptors_wtclient_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_wtclient_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_wtclient_2eproto), true);
namespace wtclientrpc {

// ===================================================================

void AddTowerRequest::InitAsDefaultInstance() {
}
class AddTowerRequest::_Internal {
 public:
};

AddTowerRequest::AddTowerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.AddTowerRequest)
}
AddTowerRequest::AddTowerRequest(const AddTowerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.AddTowerRequest)
}

void AddTowerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddTowerRequest_wtclient_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AddTowerRequest::~AddTowerRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.AddTowerRequest)
  SharedDtor();
}

void AddTowerRequest::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AddTowerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTowerRequest& AddTowerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTowerRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void AddTowerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.AddTowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* AddTowerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wtclientrpc.AddTowerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTowerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.AddTowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wtclientrpc.AddTowerRequest.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.AddTowerRequest)
  return target;
}

size_t AddTowerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.AddTowerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTowerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.AddTowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTowerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTowerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.AddTowerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.AddTowerRequest)
    MergeFrom(*source);
  }
}

void AddTowerRequest::MergeFrom(const AddTowerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.AddTowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void AddTowerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.AddTowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTowerRequest::CopyFrom(const AddTowerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.AddTowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTowerRequest::IsInitialized() const {
  return true;
}

void AddTowerRequest::InternalSwap(AddTowerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTowerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AddTowerResponse::InitAsDefaultInstance() {
}
class AddTowerResponse::_Internal {
 public:
};

AddTowerResponse::AddTowerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.AddTowerResponse)
}
AddTowerResponse::AddTowerResponse(const AddTowerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.AddTowerResponse)
}

void AddTowerResponse::SharedCtor() {
}

AddTowerResponse::~AddTowerResponse() {
  // @@protoc_insertion_point(destructor:wtclientrpc.AddTowerResponse)
  SharedDtor();
}

void AddTowerResponse::SharedDtor() {
}

void AddTowerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddTowerResponse& AddTowerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddTowerResponse_wtclient_2eproto.base);
  return *internal_default_instance();
}


void AddTowerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.AddTowerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* AddTowerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddTowerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.AddTowerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.AddTowerResponse)
  return target;
}

size_t AddTowerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.AddTowerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTowerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.AddTowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTowerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddTowerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.AddTowerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.AddTowerResponse)
    MergeFrom(*source);
  }
}

void AddTowerResponse::MergeFrom(const AddTowerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.AddTowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddTowerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.AddTowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTowerResponse::CopyFrom(const AddTowerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.AddTowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTowerResponse::IsInitialized() const {
  return true;
}

void AddTowerResponse::InternalSwap(AddTowerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddTowerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveTowerRequest::InitAsDefaultInstance() {
}
class RemoveTowerRequest::_Internal {
 public:
};

RemoveTowerRequest::RemoveTowerRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.RemoveTowerRequest)
}
RemoveTowerRequest::RemoveTowerRequest(const RemoveTowerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.RemoveTowerRequest)
}

void RemoveTowerRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoveTowerRequest_wtclient_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RemoveTowerRequest::~RemoveTowerRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.RemoveTowerRequest)
  SharedDtor();
}

void RemoveTowerRequest::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoveTowerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveTowerRequest& RemoveTowerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveTowerRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void RemoveTowerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.RemoveTowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RemoveTowerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wtclientrpc.RemoveTowerRequest.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveTowerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.RemoveTowerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // string address = 2;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wtclientrpc.RemoveTowerRequest.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.RemoveTowerRequest)
  return target;
}

size_t RemoveTowerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.RemoveTowerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // string address = 2;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTowerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.RemoveTowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTowerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveTowerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.RemoveTowerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.RemoveTowerRequest)
    MergeFrom(*source);
  }
}

void RemoveTowerRequest::MergeFrom(const RemoveTowerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.RemoveTowerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void RemoveTowerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.RemoveTowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTowerRequest::CopyFrom(const RemoveTowerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.RemoveTowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTowerRequest::IsInitialized() const {
  return true;
}

void RemoveTowerRequest::InternalSwap(RemoveTowerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTowerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoveTowerResponse::InitAsDefaultInstance() {
}
class RemoveTowerResponse::_Internal {
 public:
};

RemoveTowerResponse::RemoveTowerResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.RemoveTowerResponse)
}
RemoveTowerResponse::RemoveTowerResponse(const RemoveTowerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.RemoveTowerResponse)
}

void RemoveTowerResponse::SharedCtor() {
}

RemoveTowerResponse::~RemoveTowerResponse() {
  // @@protoc_insertion_point(destructor:wtclientrpc.RemoveTowerResponse)
  SharedDtor();
}

void RemoveTowerResponse::SharedDtor() {
}

void RemoveTowerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoveTowerResponse& RemoveTowerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoveTowerResponse_wtclient_2eproto.base);
  return *internal_default_instance();
}


void RemoveTowerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.RemoveTowerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* RemoveTowerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoveTowerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.RemoveTowerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.RemoveTowerResponse)
  return target;
}

size_t RemoveTowerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.RemoveTowerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveTowerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.RemoveTowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveTowerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoveTowerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.RemoveTowerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.RemoveTowerResponse)
    MergeFrom(*source);
  }
}

void RemoveTowerResponse::MergeFrom(const RemoveTowerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.RemoveTowerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveTowerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.RemoveTowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveTowerResponse::CopyFrom(const RemoveTowerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.RemoveTowerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveTowerResponse::IsInitialized() const {
  return true;
}

void RemoveTowerResponse::InternalSwap(RemoveTowerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveTowerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTowerInfoRequest::InitAsDefaultInstance() {
}
class GetTowerInfoRequest::_Internal {
 public:
};

GetTowerInfoRequest::GetTowerInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.GetTowerInfoRequest)
}
GetTowerInfoRequest::GetTowerInfoRequest(const GetTowerInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  include_sessions_ = from.include_sessions_;
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.GetTowerInfoRequest)
}

void GetTowerInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTowerInfoRequest_wtclient_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_sessions_ = false;
}

GetTowerInfoRequest::~GetTowerInfoRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.GetTowerInfoRequest)
  SharedDtor();
}

void GetTowerInfoRequest::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTowerInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTowerInfoRequest& GetTowerInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTowerInfoRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void GetTowerInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.GetTowerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_sessions_ = false;
  _internal_metadata_.Clear();
}

const char* GetTowerInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_sessions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          include_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTowerInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.GetTowerInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // bool include_sessions = 2;
  if (this->include_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_include_sessions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.GetTowerInfoRequest)
  return target;
}

size_t GetTowerInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.GetTowerInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bool include_sessions = 2;
  if (this->include_sessions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTowerInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.GetTowerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTowerInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTowerInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.GetTowerInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.GetTowerInfoRequest)
    MergeFrom(*source);
  }
}

void GetTowerInfoRequest::MergeFrom(const GetTowerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.GetTowerInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.include_sessions() != 0) {
    _internal_set_include_sessions(from._internal_include_sessions());
  }
}

void GetTowerInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.GetTowerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTowerInfoRequest::CopyFrom(const GetTowerInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.GetTowerInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTowerInfoRequest::IsInitialized() const {
  return true;
}

void GetTowerInfoRequest::InternalSwap(GetTowerInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(include_sessions_, other->include_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTowerInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TowerSession::InitAsDefaultInstance() {
}
class TowerSession::_Internal {
 public:
};

TowerSession::TowerSession()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.TowerSession)
}
TowerSession::TowerSession(const TowerSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_backups_, &from.num_backups_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_sat_per_byte_) -
    reinterpret_cast<char*>(&num_backups_)) + sizeof(sweep_sat_per_byte_));
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.TowerSession)
}

void TowerSession::SharedCtor() {
  ::memset(&num_backups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_sat_per_byte_) -
      reinterpret_cast<char*>(&num_backups_)) + sizeof(sweep_sat_per_byte_));
}

TowerSession::~TowerSession() {
  // @@protoc_insertion_point(destructor:wtclientrpc.TowerSession)
  SharedDtor();
}

void TowerSession::SharedDtor() {
}

void TowerSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TowerSession& TowerSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TowerSession_wtclient_2eproto.base);
  return *internal_default_instance();
}


void TowerSession::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.TowerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_backups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_sat_per_byte_) -
      reinterpret_cast<char*>(&num_backups_)) + sizeof(sweep_sat_per_byte_));
  _internal_metadata_.Clear();
}

const char* TowerSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_backups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_pending_backups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_pending_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_backups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_sat_per_byte = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sweep_sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TowerSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.TowerSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_backups = 1;
  if (this->num_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_backups(), target);
  }

  // uint32 num_pending_backups = 2;
  if (this->num_pending_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_pending_backups(), target);
  }

  // uint32 max_backups = 3;
  if (this->max_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_backups(), target);
  }

  // uint32 sweep_sat_per_byte = 4;
  if (this->sweep_sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sweep_sat_per_byte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.TowerSession)
  return target;
}

size_t TowerSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.TowerSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_backups = 1;
  if (this->num_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_backups());
  }

  // uint32 num_pending_backups = 2;
  if (this->num_pending_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_pending_backups());
  }

  // uint32 max_backups = 3;
  if (this->max_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_backups());
  }

  // uint32 sweep_sat_per_byte = 4;
  if (this->sweep_sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_sat_per_byte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TowerSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.TowerSession)
  GOOGLE_DCHECK_NE(&from, this);
  const TowerSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TowerSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.TowerSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.TowerSession)
    MergeFrom(*source);
  }
}

void TowerSession::MergeFrom(const TowerSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.TowerSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_backups() != 0) {
    _internal_set_num_backups(from._internal_num_backups());
  }
  if (from.num_pending_backups() != 0) {
    _internal_set_num_pending_backups(from._internal_num_pending_backups());
  }
  if (from.max_backups() != 0) {
    _internal_set_max_backups(from._internal_max_backups());
  }
  if (from.sweep_sat_per_byte() != 0) {
    _internal_set_sweep_sat_per_byte(from._internal_sweep_sat_per_byte());
  }
}

void TowerSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.TowerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerSession::CopyFrom(const TowerSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.TowerSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerSession::IsInitialized() const {
  return true;
}

void TowerSession::InternalSwap(TowerSession* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_backups_, other->num_backups_);
  swap(num_pending_backups_, other->num_pending_backups_);
  swap(max_backups_, other->max_backups_);
  swap(sweep_sat_per_byte_, other->sweep_sat_per_byte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TowerSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tower::InitAsDefaultInstance() {
}
class Tower::_Internal {
 public:
};

Tower::Tower()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.Tower)
}
Tower::Tower(const Tower& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  ::memcpy(&active_session_candidate_, &from.active_session_candidate_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_) -
    reinterpret_cast<char*>(&active_session_candidate_)) + sizeof(num_sessions_));
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.Tower)
}

void Tower::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tower_wtclient_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_session_candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_) -
      reinterpret_cast<char*>(&active_session_candidate_)) + sizeof(num_sessions_));
}

Tower::~Tower() {
  // @@protoc_insertion_point(destructor:wtclientrpc.Tower)
  SharedDtor();
}

void Tower::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Tower::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tower& Tower::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tower_wtclient_2eproto.base);
  return *internal_default_instance();
}


void Tower::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.Tower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  sessions_.Clear();
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&active_session_candidate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_) -
      reinterpret_cast<char*>(&active_session_candidate_)) + sizeof(num_sessions_));
  _internal_metadata_.Clear();
}

const char* Tower::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes pubkey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "wtclientrpc.Tower.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool active_session_candidate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          active_session_candidate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_sessions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .wtclientrpc.TowerSession sessions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tower::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.Tower)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // repeated string addresses = 2;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "wtclientrpc.Tower.addresses");
    target = stream->WriteString(2, s, target);
  }

  // bool active_session_candidate = 3;
  if (this->active_session_candidate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_active_session_candidate(), target);
  }

  // uint32 num_sessions = 4;
  if (this->num_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_sessions(), target);
  }

  // repeated .wtclientrpc.TowerSession sessions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.Tower)
  return target;
}

size_t Tower::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.Tower)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // repeated .wtclientrpc.TowerSession sessions = 5;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes pubkey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bool active_session_candidate = 3;
  if (this->active_session_candidate() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_sessions = 4;
  if (this->num_sessions() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_sessions());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tower::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.Tower)
  GOOGLE_DCHECK_NE(&from, this);
  const Tower* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tower>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.Tower)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.Tower)
    MergeFrom(*source);
  }
}

void Tower::MergeFrom(const Tower& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.Tower)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  sessions_.MergeFrom(from.sessions_);
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.active_session_candidate() != 0) {
    _internal_set_active_session_candidate(from._internal_active_session_candidate());
  }
  if (from.num_sessions() != 0) {
    _internal_set_num_sessions(from._internal_num_sessions());
  }
}

void Tower::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.Tower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tower::CopyFrom(const Tower& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.Tower)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tower::IsInitialized() const {
  return true;
}

void Tower::InternalSwap(Tower* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  sessions_.InternalSwap(&other->sessions_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(active_session_candidate_, other->active_session_candidate_);
  swap(num_sessions_, other->num_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tower::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTowersRequest::InitAsDefaultInstance() {
}
class ListTowersRequest::_Internal {
 public:
};

ListTowersRequest::ListTowersRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.ListTowersRequest)
}
ListTowersRequest::ListTowersRequest(const ListTowersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  include_sessions_ = from.include_sessions_;
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.ListTowersRequest)
}

void ListTowersRequest::SharedCtor() {
  include_sessions_ = false;
}

ListTowersRequest::~ListTowersRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.ListTowersRequest)
  SharedDtor();
}

void ListTowersRequest::SharedDtor() {
}

void ListTowersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTowersRequest& ListTowersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTowersRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void ListTowersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.ListTowersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  include_sessions_ = false;
  _internal_metadata_.Clear();
}

const char* ListTowersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool include_sessions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          include_sessions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTowersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.ListTowersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_sessions = 1;
  if (this->include_sessions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_include_sessions(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.ListTowersRequest)
  return target;
}

size_t ListTowersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.ListTowersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool include_sessions = 1;
  if (this->include_sessions() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTowersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.ListTowersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTowersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTowersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.ListTowersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.ListTowersRequest)
    MergeFrom(*source);
  }
}

void ListTowersRequest::MergeFrom(const ListTowersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.ListTowersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.include_sessions() != 0) {
    _internal_set_include_sessions(from._internal_include_sessions());
  }
}

void ListTowersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.ListTowersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTowersRequest::CopyFrom(const ListTowersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.ListTowersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTowersRequest::IsInitialized() const {
  return true;
}

void ListTowersRequest::InternalSwap(ListTowersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(include_sessions_, other->include_sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTowersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTowersResponse::InitAsDefaultInstance() {
}
class ListTowersResponse::_Internal {
 public:
};

ListTowersResponse::ListTowersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.ListTowersResponse)
}
ListTowersResponse::ListTowersResponse(const ListTowersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      towers_(from.towers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.ListTowersResponse)
}

void ListTowersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTowersResponse_wtclient_2eproto.base);
}

ListTowersResponse::~ListTowersResponse() {
  // @@protoc_insertion_point(destructor:wtclientrpc.ListTowersResponse)
  SharedDtor();
}

void ListTowersResponse::SharedDtor() {
}

void ListTowersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTowersResponse& ListTowersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTowersResponse_wtclient_2eproto.base);
  return *internal_default_instance();
}


void ListTowersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.ListTowersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  towers_.Clear();
  _internal_metadata_.Clear();
}

const char* ListTowersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .wtclientrpc.Tower towers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_towers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTowersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.ListTowersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .wtclientrpc.Tower towers = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_towers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_towers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.ListTowersResponse)
  return target;
}

size_t ListTowersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.ListTowersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wtclientrpc.Tower towers = 1;
  total_size += 1UL * this->_internal_towers_size();
  for (const auto& msg : this->towers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTowersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.ListTowersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTowersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTowersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.ListTowersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.ListTowersResponse)
    MergeFrom(*source);
  }
}

void ListTowersResponse::MergeFrom(const ListTowersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.ListTowersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  towers_.MergeFrom(from.towers_);
}

void ListTowersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.ListTowersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTowersResponse::CopyFrom(const ListTowersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.ListTowersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTowersResponse::IsInitialized() const {
  return true;
}

void ListTowersResponse::InternalSwap(ListTowersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  towers_.InternalSwap(&other->towers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTowersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatsRequest::InitAsDefaultInstance() {
}
class StatsRequest::_Internal {
 public:
};

StatsRequest::StatsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.StatsRequest)
}
StatsRequest::StatsRequest(const StatsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.StatsRequest)
}

void StatsRequest::SharedCtor() {
}

StatsRequest::~StatsRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.StatsRequest)
  SharedDtor();
}

void StatsRequest::SharedDtor() {
}

void StatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsRequest& StatsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void StatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.StatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StatsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.StatsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.StatsRequest)
  return target;
}

size_t StatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.StatsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.StatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.StatsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.StatsRequest)
    MergeFrom(*source);
  }
}

void StatsRequest::MergeFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.StatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StatsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.StatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsRequest::CopyFrom(const StatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.StatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsRequest::IsInitialized() const {
  return true;
}

void StatsRequest::InternalSwap(StatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StatsResponse::InitAsDefaultInstance() {
}
class StatsResponse::_Internal {
 public:
};

StatsResponse::StatsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.StatsResponse)
}
StatsResponse::StatsResponse(const StatsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&num_backups_, &from.num_backups_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_sessions_exhausted_) -
    reinterpret_cast<char*>(&num_backups_)) + sizeof(num_sessions_exhausted_));
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.StatsResponse)
}

void StatsResponse::SharedCtor() {
  ::memset(&num_backups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_exhausted_) -
      reinterpret_cast<char*>(&num_backups_)) + sizeof(num_sessions_exhausted_));
}

StatsResponse::~StatsResponse() {
  // @@protoc_insertion_point(destructor:wtclientrpc.StatsResponse)
  SharedDtor();
}

void StatsResponse::SharedDtor() {
}

void StatsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StatsResponse& StatsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StatsResponse_wtclient_2eproto.base);
  return *internal_default_instance();
}


void StatsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.StatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&num_backups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_sessions_exhausted_) -
      reinterpret_cast<char*>(&num_backups_)) + sizeof(num_sessions_exhausted_));
  _internal_metadata_.Clear();
}

const char* StatsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 num_backups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_pending_backups = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_pending_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_failed_backups = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_failed_backups_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_sessions_acquired = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          num_sessions_acquired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_sessions_exhausted = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          num_sessions_exhausted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StatsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.StatsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 num_backups = 1;
  if (this->num_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_backups(), target);
  }

  // uint32 num_pending_backups = 2;
  if (this->num_pending_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_pending_backups(), target);
  }

  // uint32 num_failed_backups = 3;
  if (this->num_failed_backups() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_failed_backups(), target);
  }

  // uint32 num_sessions_acquired = 4;
  if (this->num_sessions_acquired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_num_sessions_acquired(), target);
  }

  // uint32 num_sessions_exhausted = 5;
  if (this->num_sessions_exhausted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_num_sessions_exhausted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.StatsResponse)
  return target;
}

size_t StatsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.StatsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 num_backups = 1;
  if (this->num_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_backups());
  }

  // uint32 num_pending_backups = 2;
  if (this->num_pending_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_pending_backups());
  }

  // uint32 num_failed_backups = 3;
  if (this->num_failed_backups() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_failed_backups());
  }

  // uint32 num_sessions_acquired = 4;
  if (this->num_sessions_acquired() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_sessions_acquired());
  }

  // uint32 num_sessions_exhausted = 5;
  if (this->num_sessions_exhausted() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_sessions_exhausted());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StatsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.StatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StatsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StatsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.StatsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.StatsResponse)
    MergeFrom(*source);
  }
}

void StatsResponse::MergeFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.StatsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.num_backups() != 0) {
    _internal_set_num_backups(from._internal_num_backups());
  }
  if (from.num_pending_backups() != 0) {
    _internal_set_num_pending_backups(from._internal_num_pending_backups());
  }
  if (from.num_failed_backups() != 0) {
    _internal_set_num_failed_backups(from._internal_num_failed_backups());
  }
  if (from.num_sessions_acquired() != 0) {
    _internal_set_num_sessions_acquired(from._internal_num_sessions_acquired());
  }
  if (from.num_sessions_exhausted() != 0) {
    _internal_set_num_sessions_exhausted(from._internal_num_sessions_exhausted());
  }
}

void StatsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.StatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatsResponse::CopyFrom(const StatsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.StatsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatsResponse::IsInitialized() const {
  return true;
}

void StatsResponse::InternalSwap(StatsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(num_backups_, other->num_backups_);
  swap(num_pending_backups_, other->num_pending_backups_);
  swap(num_failed_backups_, other->num_failed_backups_);
  swap(num_sessions_acquired_, other->num_sessions_acquired_);
  swap(num_sessions_exhausted_, other->num_sessions_exhausted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyRequest::InitAsDefaultInstance() {
}
class PolicyRequest::_Internal {
 public:
};

PolicyRequest::PolicyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.PolicyRequest)
}
PolicyRequest::PolicyRequest(const PolicyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.PolicyRequest)
}

void PolicyRequest::SharedCtor() {
}

PolicyRequest::~PolicyRequest() {
  // @@protoc_insertion_point(destructor:wtclientrpc.PolicyRequest)
  SharedDtor();
}

void PolicyRequest::SharedDtor() {
}

void PolicyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyRequest& PolicyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyRequest_wtclient_2eproto.base);
  return *internal_default_instance();
}


void PolicyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.PolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PolicyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.PolicyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.PolicyRequest)
  return target;
}

size_t PolicyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.PolicyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.PolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.PolicyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.PolicyRequest)
    MergeFrom(*source);
  }
}

void PolicyRequest::MergeFrom(const PolicyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.PolicyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PolicyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.PolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyRequest::CopyFrom(const PolicyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.PolicyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyRequest::IsInitialized() const {
  return true;
}

void PolicyRequest::InternalSwap(PolicyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PolicyResponse::InitAsDefaultInstance() {
}
class PolicyResponse::_Internal {
 public:
};

PolicyResponse::PolicyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wtclientrpc.PolicyResponse)
}
PolicyResponse::PolicyResponse(const PolicyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_updates_, &from.max_updates_,
    static_cast<size_t>(reinterpret_cast<char*>(&sweep_sat_per_byte_) -
    reinterpret_cast<char*>(&max_updates_)) + sizeof(sweep_sat_per_byte_));
  // @@protoc_insertion_point(copy_constructor:wtclientrpc.PolicyResponse)
}

void PolicyResponse::SharedCtor() {
  ::memset(&max_updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_sat_per_byte_) -
      reinterpret_cast<char*>(&max_updates_)) + sizeof(sweep_sat_per_byte_));
}

PolicyResponse::~PolicyResponse() {
  // @@protoc_insertion_point(destructor:wtclientrpc.PolicyResponse)
  SharedDtor();
}

void PolicyResponse::SharedDtor() {
}

void PolicyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PolicyResponse& PolicyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PolicyResponse_wtclient_2eproto.base);
  return *internal_default_instance();
}


void PolicyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wtclientrpc.PolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_updates_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sweep_sat_per_byte_) -
      reinterpret_cast<char*>(&max_updates_)) + sizeof(sweep_sat_per_byte_));
  _internal_metadata_.Clear();
}

const char* PolicyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 max_updates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_updates_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sweep_sat_per_byte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sweep_sat_per_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PolicyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wtclientrpc.PolicyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 max_updates = 1;
  if (this->max_updates() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_max_updates(), target);
  }

  // uint32 sweep_sat_per_byte = 2;
  if (this->sweep_sat_per_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sweep_sat_per_byte(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wtclientrpc.PolicyResponse)
  return target;
}

size_t PolicyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wtclientrpc.PolicyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 max_updates = 1;
  if (this->max_updates() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_updates());
  }

  // uint32 sweep_sat_per_byte = 2;
  if (this->sweep_sat_per_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sweep_sat_per_byte());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PolicyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wtclientrpc.PolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PolicyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PolicyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wtclientrpc.PolicyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wtclientrpc.PolicyResponse)
    MergeFrom(*source);
  }
}

void PolicyResponse::MergeFrom(const PolicyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wtclientrpc.PolicyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_updates() != 0) {
    _internal_set_max_updates(from._internal_max_updates());
  }
  if (from.sweep_sat_per_byte() != 0) {
    _internal_set_sweep_sat_per_byte(from._internal_sweep_sat_per_byte());
  }
}

void PolicyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wtclientrpc.PolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PolicyResponse::CopyFrom(const PolicyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wtclientrpc.PolicyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyResponse::IsInitialized() const {
  return true;
}

void PolicyResponse::InternalSwap(PolicyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_updates_, other->max_updates_);
  swap(sweep_sat_per_byte_, other->sweep_sat_per_byte_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace wtclientrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wtclientrpc::AddTowerRequest* Arena::CreateMaybeMessage< ::wtclientrpc::AddTowerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::AddTowerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::AddTowerResponse* Arena::CreateMaybeMessage< ::wtclientrpc::AddTowerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::AddTowerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::RemoveTowerRequest* Arena::CreateMaybeMessage< ::wtclientrpc::RemoveTowerRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::RemoveTowerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::RemoveTowerResponse* Arena::CreateMaybeMessage< ::wtclientrpc::RemoveTowerResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::RemoveTowerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::GetTowerInfoRequest* Arena::CreateMaybeMessage< ::wtclientrpc::GetTowerInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::GetTowerInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::TowerSession* Arena::CreateMaybeMessage< ::wtclientrpc::TowerSession >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::TowerSession >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::Tower* Arena::CreateMaybeMessage< ::wtclientrpc::Tower >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::Tower >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::ListTowersRequest* Arena::CreateMaybeMessage< ::wtclientrpc::ListTowersRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::ListTowersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::ListTowersResponse* Arena::CreateMaybeMessage< ::wtclientrpc::ListTowersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::ListTowersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::StatsRequest* Arena::CreateMaybeMessage< ::wtclientrpc::StatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::StatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::StatsResponse* Arena::CreateMaybeMessage< ::wtclientrpc::StatsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::StatsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::PolicyRequest* Arena::CreateMaybeMessage< ::wtclientrpc::PolicyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::PolicyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wtclientrpc::PolicyResponse* Arena::CreateMaybeMessage< ::wtclientrpc::PolicyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::wtclientrpc::PolicyResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
