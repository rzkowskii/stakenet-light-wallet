// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: KeychainService.proto
#ifndef GRPC_KeychainService_2eproto__INCLUDED
#define GRPC_KeychainService_2eproto__INCLUDED

#include "KeychainService.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace lightwalletrpc {

class KeychainService final {
 public:
  static constexpr char const* service_full_name() {
    return "lightwalletrpc.KeychainService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::lightwalletrpc::KeyDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>> AsyncDeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>>(AsyncDeriveNextKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>> PrepareAsyncDeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>>(PrepareAsyncDeriveNextKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::lightwalletrpc::KeyDescriptor* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>> AsyncDeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>>(AsyncDeriveKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>> PrepareAsyncDeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>>(PrepareAsyncDeriveKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::lightwalletrpc::HexEncoded* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>> AsyncDerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>>(AsyncDerivePrivKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>> PrepareAsyncDerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>>(PrepareAsyncDerivePrivKeyRaw(context, request, cq));
    }
    virtual ::grpc::Status IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::lightwalletrpc::IsOurAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>> AsyncIsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>>(AsyncIsOurAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>> PrepareAsyncIsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>>(PrepareAsyncIsOurAddressRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>* AsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>* PrepareAsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>* AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::KeyDescriptor>* PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>* AsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::HexEncoded>* PrepareAsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>* AsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::lightwalletrpc::IsOurAddressResponse>* PrepareAsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::lightwalletrpc::KeyDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>> AsyncDeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>>(AsyncDeriveNextKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>> PrepareAsyncDeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>>(PrepareAsyncDeriveNextKeyRaw(context, request, cq));
    }
    ::grpc::Status DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::lightwalletrpc::KeyDescriptor* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>> AsyncDeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>>(AsyncDeriveKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>> PrepareAsyncDeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>>(PrepareAsyncDeriveKeyRaw(context, request, cq));
    }
    ::grpc::Status DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::lightwalletrpc::HexEncoded* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>> AsyncDerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>>(AsyncDerivePrivKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>> PrepareAsyncDerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>>(PrepareAsyncDerivePrivKeyRaw(context, request, cq));
    }
    ::grpc::Status IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::lightwalletrpc::IsOurAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>> AsyncIsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>>(AsyncIsOurAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>> PrepareAsyncIsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>>(PrepareAsyncIsOurAddressRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) override;
      void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) override;
      void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)>) override;
      void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* AsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* PrepareAsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* AsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* PrepareAsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>* AsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>* PrepareAsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DeriveNextKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DeriveKey_;
    const ::grpc::internal::RpcMethod rpcmethod_DerivePrivKey_;
    const ::grpc::internal::RpcMethod rpcmethod_IsOurAddress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DeriveNextKey(::grpc::ServerContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response);
    virtual ::grpc::Status DeriveKey(::grpc::ServerContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response);
    virtual ::grpc::Status DerivePrivKey(::grpc::ServerContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response);
    virtual ::grpc::Status IsOurAddress(::grpc::ServerContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeriveNextKey() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveNextKey(::grpc::ServerContext* context, ::lightwalletrpc::DeriveNextKeyReq* request, ::grpc::ServerAsyncResponseWriter< ::lightwalletrpc::KeyDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeriveKey() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveKey(::grpc::ServerContext* context, ::lightwalletrpc::KeyLocator* request, ::grpc::ServerAsyncResponseWriter< ::lightwalletrpc::KeyDescriptor>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DerivePrivKey() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDerivePrivKey(::grpc::ServerContext* context, ::lightwalletrpc::KeyDescriptor* request, ::grpc::ServerAsyncResponseWriter< ::lightwalletrpc::HexEncoded>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsOurAddress() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsOurAddress(::grpc::ServerContext* context, ::lightwalletrpc::HexEncoded* request, ::grpc::ServerAsyncResponseWriter< ::lightwalletrpc::IsOurAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DeriveNextKey<WithAsyncMethod_DeriveKey<WithAsyncMethod_DerivePrivKey<WithAsyncMethod_IsOurAddress<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeriveNextKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::DeriveNextKeyReq, ::lightwalletrpc::KeyDescriptor>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response) { return this->DeriveNextKey(context, request, response); }));}
    void SetMessageAllocatorFor_DeriveNextKey(
        ::grpc::experimental::MessageAllocator< ::lightwalletrpc::DeriveNextKeyReq, ::lightwalletrpc::KeyDescriptor>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::DeriveNextKeyReq, ::lightwalletrpc::KeyDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeriveNextKey(
      ::grpc::CallbackServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeriveNextKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DeriveKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::KeyLocator, ::lightwalletrpc::KeyDescriptor>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response) { return this->DeriveKey(context, request, response); }));}
    void SetMessageAllocatorFor_DeriveKey(
        ::grpc::experimental::MessageAllocator< ::lightwalletrpc::KeyLocator, ::lightwalletrpc::KeyDescriptor>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::KeyLocator, ::lightwalletrpc::KeyDescriptor>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeriveKey(
      ::grpc::CallbackServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeriveKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DerivePrivKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::KeyDescriptor, ::lightwalletrpc::HexEncoded>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response) { return this->DerivePrivKey(context, request, response); }));}
    void SetMessageAllocatorFor_DerivePrivKey(
        ::grpc::experimental::MessageAllocator< ::lightwalletrpc::KeyDescriptor, ::lightwalletrpc::HexEncoded>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::KeyDescriptor, ::lightwalletrpc::HexEncoded>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DerivePrivKey(
      ::grpc::CallbackServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DerivePrivKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_IsOurAddress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::HexEncoded, ::lightwalletrpc::IsOurAddressResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response) { return this->IsOurAddress(context, request, response); }));}
    void SetMessageAllocatorFor_IsOurAddress(
        ::grpc::experimental::MessageAllocator< ::lightwalletrpc::HexEncoded, ::lightwalletrpc::IsOurAddressResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::lightwalletrpc::HexEncoded, ::lightwalletrpc::IsOurAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsOurAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsOurAddress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DeriveNextKey<ExperimentalWithCallbackMethod_DeriveKey<ExperimentalWithCallbackMethod_DerivePrivKey<ExperimentalWithCallbackMethod_IsOurAddress<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DeriveNextKey<ExperimentalWithCallbackMethod_DeriveKey<ExperimentalWithCallbackMethod_DerivePrivKey<ExperimentalWithCallbackMethod_IsOurAddress<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeriveNextKey() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeriveKey() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DerivePrivKey() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsOurAddress() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeriveNextKey() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveNextKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeriveKey() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeriveKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DerivePrivKey() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDerivePrivKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsOurAddress() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsOurAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeriveNextKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeriveNextKey(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeriveNextKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeriveNextKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DeriveKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeriveKey(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DeriveKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DeriveKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DerivePrivKey() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DerivePrivKey(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DerivePrivKey(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DerivePrivKey(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_IsOurAddress() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsOurAddress(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* IsOurAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* IsOurAddress(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeriveNextKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeriveNextKey() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::lightwalletrpc::DeriveNextKeyReq, ::lightwalletrpc::KeyDescriptor>(std::bind(&WithStreamedUnaryMethod_DeriveNextKey<BaseClass>::StreamedDeriveNextKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeriveNextKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeriveNextKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::DeriveNextKeyReq* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeriveNextKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightwalletrpc::DeriveNextKeyReq,::lightwalletrpc::KeyDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeriveKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeriveKey() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::lightwalletrpc::KeyLocator, ::lightwalletrpc::KeyDescriptor>(std::bind(&WithStreamedUnaryMethod_DeriveKey<BaseClass>::StreamedDeriveKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeriveKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeriveKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyLocator* /*request*/, ::lightwalletrpc::KeyDescriptor* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeriveKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightwalletrpc::KeyLocator,::lightwalletrpc::KeyDescriptor>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DerivePrivKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DerivePrivKey() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::lightwalletrpc::KeyDescriptor, ::lightwalletrpc::HexEncoded>(std::bind(&WithStreamedUnaryMethod_DerivePrivKey<BaseClass>::StreamedDerivePrivKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DerivePrivKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DerivePrivKey(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::KeyDescriptor* /*request*/, ::lightwalletrpc::HexEncoded* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDerivePrivKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightwalletrpc::KeyDescriptor,::lightwalletrpc::HexEncoded>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsOurAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsOurAddress() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::lightwalletrpc::HexEncoded, ::lightwalletrpc::IsOurAddressResponse>(std::bind(&WithStreamedUnaryMethod_IsOurAddress<BaseClass>::StreamedIsOurAddress, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_IsOurAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsOurAddress(::grpc::ServerContext* /*context*/, const ::lightwalletrpc::HexEncoded* /*request*/, ::lightwalletrpc::IsOurAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsOurAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::lightwalletrpc::HexEncoded,::lightwalletrpc::IsOurAddressResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DeriveNextKey<WithStreamedUnaryMethod_DeriveKey<WithStreamedUnaryMethod_DerivePrivKey<WithStreamedUnaryMethod_IsOurAddress<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DeriveNextKey<WithStreamedUnaryMethod_DeriveKey<WithStreamedUnaryMethod_DerivePrivKey<WithStreamedUnaryMethod_IsOurAddress<Service > > > > StreamedService;
};

}  // namespace lightwalletrpc


#endif  // GRPC_KeychainService_2eproto__INCLUDED
