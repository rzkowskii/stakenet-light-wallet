// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: invoices.proto
#ifndef GRPC_invoices_2eproto__INCLUDED
#define GRPC_invoices_2eproto__INCLUDED

#include "invoices.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace invoicesrpc {

// Invoices is a service that can be used to create, accept, settle and cancel
// invoices.
class Invoices final {
 public:
  static constexpr char const* service_full_name() {
    return "invoicesrpc.Invoices";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // SubscribeSingleInvoice returns a uni-directional stream (server -> client)
    // to notify the client of state transitions of the specified invoice.
    // Initially the current invoice state is always sent out.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Invoice>> SubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::lnrpc::Invoice>>(SubscribeSingleInvoiceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>> AsyncSubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>>(AsyncSubscribeSingleInvoiceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>> PrepareAsyncSubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>>(PrepareAsyncSubscribeSingleInvoiceRaw(context, request, cq));
    }
    // *
    // CancelInvoice cancels a currently open invoice. If the invoice is already
    // canceled, this call will succeed. If the invoice is already settled, it will
    // fail.
    virtual ::grpc::Status CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::invoicesrpc::CancelInvoiceResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>> AsyncCancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>>(AsyncCancelInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>> PrepareAsyncCancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>>(PrepareAsyncCancelInvoiceRaw(context, request, cq));
    }
    // *
    // AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
    // supplied in the request.
    virtual ::grpc::Status AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::invoicesrpc::AddHoldInvoiceResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>> AsyncAddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>>(AsyncAddHoldInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>> PrepareAsyncAddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>>(PrepareAsyncAddHoldInvoiceRaw(context, request, cq));
    }
    // *
    // SettleInvoice settles an accepted invoice. If the invoice is already
    // settled, this call will succeed.
    virtual ::grpc::Status SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::invoicesrpc::SettleInvoiceResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>> AsyncSettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>>(AsyncSettleInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>> PrepareAsyncSettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>>(PrepareAsyncSettleInvoiceRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // *
      // SubscribeSingleInvoice returns a uni-directional stream (server -> client)
      // to notify the client of state transitions of the specified invoice.
      // Initially the current invoice state is always sent out.
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SubscribeSingleInvoice(::grpc::ClientContext* context, ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Invoice>* reactor) = 0;
      #else
      virtual void SubscribeSingleInvoice(::grpc::ClientContext* context, ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Invoice>* reactor) = 0;
      #endif
      // *
      // CancelInvoice cancels a currently open invoice. If the invoice is already
      // canceled, this call will succeed. If the invoice is already settled, it will
      // fail.
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
      // supplied in the request.
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // SettleInvoice settles an accepted invoice. If the invoice is already
      // settled, this call will succeed.
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::lnrpc::Invoice>* SubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>* AsyncSubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::lnrpc::Invoice>* PrepareAsyncSubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>* AsyncCancelInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::CancelInvoiceResp>* PrepareAsyncCancelInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>* AsyncAddHoldInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::AddHoldInvoiceResp>* PrepareAsyncAddHoldInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>* AsyncSettleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::invoicesrpc::SettleInvoiceResp>* PrepareAsyncSettleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Invoice>> SubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::lnrpc::Invoice>>(SubscribeSingleInvoiceRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Invoice>> AsyncSubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Invoice>>(AsyncSubscribeSingleInvoiceRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Invoice>> PrepareAsyncSubscribeSingleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::lnrpc::Invoice>>(PrepareAsyncSubscribeSingleInvoiceRaw(context, request, cq));
    }
    ::grpc::Status CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::invoicesrpc::CancelInvoiceResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>> AsyncCancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>>(AsyncCancelInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>> PrepareAsyncCancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>>(PrepareAsyncCancelInvoiceRaw(context, request, cq));
    }
    ::grpc::Status AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::invoicesrpc::AddHoldInvoiceResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>> AsyncAddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>>(AsyncAddHoldInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>> PrepareAsyncAddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>>(PrepareAsyncAddHoldInvoiceRaw(context, request, cq));
    }
    ::grpc::Status SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::invoicesrpc::SettleInvoiceResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>> AsyncSettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>>(AsyncSettleInvoiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>> PrepareAsyncSettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>>(PrepareAsyncSettleInvoiceRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SubscribeSingleInvoice(::grpc::ClientContext* context, ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::ClientReadReactor< ::lnrpc::Invoice>* reactor) override;
      #else
      void SubscribeSingleInvoice(::grpc::ClientContext* context, ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Invoice>* reactor) override;
      #endif
      void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelInvoice(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CancelInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::CancelInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddHoldInvoice(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddHoldInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::AddHoldInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SettleInvoice(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SettleInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::invoicesrpc::SettleInvoiceResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::lnrpc::Invoice>* SubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Invoice>* AsyncSubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::lnrpc::Invoice>* PrepareAsyncSubscribeSingleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>* AsyncCancelInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::CancelInvoiceResp>* PrepareAsyncCancelInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::CancelInvoiceMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>* AsyncAddHoldInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::AddHoldInvoiceResp>* PrepareAsyncAddHoldInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::AddHoldInvoiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>* AsyncSettleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::invoicesrpc::SettleInvoiceResp>* PrepareAsyncSettleInvoiceRaw(::grpc::ClientContext* context, const ::invoicesrpc::SettleInvoiceMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeSingleInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_AddHoldInvoice_;
    const ::grpc::internal::RpcMethod rpcmethod_SettleInvoice_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // SubscribeSingleInvoice returns a uni-directional stream (server -> client)
    // to notify the client of state transitions of the specified invoice.
    // Initially the current invoice state is always sent out.
    virtual ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* context, const ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::ServerWriter< ::lnrpc::Invoice>* writer);
    // *
    // CancelInvoice cancels a currently open invoice. If the invoice is already
    // canceled, this call will succeed. If the invoice is already settled, it will
    // fail.
    virtual ::grpc::Status CancelInvoice(::grpc::ServerContext* context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response);
    // *
    // AddHoldInvoice creates a hold invoice. It ties the invoice to the hash
    // supplied in the request.
    virtual ::grpc::Status AddHoldInvoice(::grpc::ServerContext* context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response);
    // *
    // SettleInvoice settles an accepted invoice. If the invoice is already
    // settled, this call will succeed.
    virtual ::grpc::Status SettleInvoice(::grpc::ServerContext* context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SubscribeSingleInvoice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSingleInvoice(::grpc::ServerContext* context, ::invoicesrpc::SubscribeSingleInvoiceRequest* request, ::grpc::ServerAsyncWriter< ::lnrpc::Invoice>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelInvoice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelInvoice(::grpc::ServerContext* context, ::invoicesrpc::CancelInvoiceMsg* request, ::grpc::ServerAsyncResponseWriter< ::invoicesrpc::CancelInvoiceResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddHoldInvoice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHoldInvoice(::grpc::ServerContext* context, ::invoicesrpc::AddHoldInvoiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::invoicesrpc::AddHoldInvoiceResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SettleInvoice() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSettleInvoice(::grpc::ServerContext* context, ::invoicesrpc::SettleInvoiceMsg* request, ::grpc::ServerAsyncResponseWriter< ::invoicesrpc::SettleInvoiceResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeSingleInvoice<WithAsyncMethod_CancelInvoice<WithAsyncMethod_AddHoldInvoice<WithAsyncMethod_SettleInvoice<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeSingleInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::invoicesrpc::SubscribeSingleInvoiceRequest, ::lnrpc::Invoice>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::invoicesrpc::SubscribeSingleInvoiceRequest* request) { return this->SubscribeSingleInvoice(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::lnrpc::Invoice>* SubscribeSingleInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::lnrpc::Invoice>* SubscribeSingleInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CancelInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::CancelInvoiceMsg, ::invoicesrpc::CancelInvoiceResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::invoicesrpc::CancelInvoiceMsg* request, ::invoicesrpc::CancelInvoiceResp* response) { return this->CancelInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_CancelInvoice(
        ::grpc::experimental::MessageAllocator< ::invoicesrpc::CancelInvoiceMsg, ::invoicesrpc::CancelInvoiceResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::CancelInvoiceMsg, ::invoicesrpc::CancelInvoiceResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddHoldInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::AddHoldInvoiceRequest, ::invoicesrpc::AddHoldInvoiceResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::invoicesrpc::AddHoldInvoiceRequest* request, ::invoicesrpc::AddHoldInvoiceResp* response) { return this->AddHoldInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_AddHoldInvoice(
        ::grpc::experimental::MessageAllocator< ::invoicesrpc::AddHoldInvoiceRequest, ::invoicesrpc::AddHoldInvoiceResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::AddHoldInvoiceRequest, ::invoicesrpc::AddHoldInvoiceResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddHoldInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddHoldInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SettleInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::SettleInvoiceMsg, ::invoicesrpc::SettleInvoiceResp>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::invoicesrpc::SettleInvoiceMsg* request, ::invoicesrpc::SettleInvoiceResp* response) { return this->SettleInvoice(context, request, response); }));}
    void SetMessageAllocatorFor_SettleInvoice(
        ::grpc::experimental::MessageAllocator< ::invoicesrpc::SettleInvoiceMsg, ::invoicesrpc::SettleInvoiceResp>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::invoicesrpc::SettleInvoiceMsg, ::invoicesrpc::SettleInvoiceResp>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SettleInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SettleInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_SubscribeSingleInvoice<ExperimentalWithCallbackMethod_CancelInvoice<ExperimentalWithCallbackMethod_AddHoldInvoice<ExperimentalWithCallbackMethod_SettleInvoice<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_SubscribeSingleInvoice<ExperimentalWithCallbackMethod_CancelInvoice<ExperimentalWithCallbackMethod_AddHoldInvoice<ExperimentalWithCallbackMethod_SettleInvoice<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SubscribeSingleInvoice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelInvoice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddHoldInvoice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SettleInvoice() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SubscribeSingleInvoice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeSingleInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelInvoice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddHoldInvoice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddHoldInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SettleInvoice() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSettleInvoice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeSingleInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->SubscribeSingleInvoice(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSingleInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* SubscribeSingleInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CancelInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelInvoice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CancelInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CancelInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddHoldInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddHoldInvoice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddHoldInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddHoldInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SettleInvoice() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SettleInvoice(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SettleInvoice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SettleInvoice(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelInvoice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::invoicesrpc::CancelInvoiceMsg, ::invoicesrpc::CancelInvoiceResp>(std::bind(&WithStreamedUnaryMethod_CancelInvoice<BaseClass>::StreamedCancelInvoice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CancelInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::CancelInvoiceMsg* /*request*/, ::invoicesrpc::CancelInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::invoicesrpc::CancelInvoiceMsg,::invoicesrpc::CancelInvoiceResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddHoldInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddHoldInvoice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::invoicesrpc::AddHoldInvoiceRequest, ::invoicesrpc::AddHoldInvoiceResp>(std::bind(&WithStreamedUnaryMethod_AddHoldInvoice<BaseClass>::StreamedAddHoldInvoice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddHoldInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddHoldInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::AddHoldInvoiceRequest* /*request*/, ::invoicesrpc::AddHoldInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddHoldInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::invoicesrpc::AddHoldInvoiceRequest,::invoicesrpc::AddHoldInvoiceResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SettleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SettleInvoice() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::invoicesrpc::SettleInvoiceMsg, ::invoicesrpc::SettleInvoiceResp>(std::bind(&WithStreamedUnaryMethod_SettleInvoice<BaseClass>::StreamedSettleInvoice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SettleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SettleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SettleInvoiceMsg* /*request*/, ::invoicesrpc::SettleInvoiceResp* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSettleInvoice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::invoicesrpc::SettleInvoiceMsg,::invoicesrpc::SettleInvoiceResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CancelInvoice<WithStreamedUnaryMethod_AddHoldInvoice<WithStreamedUnaryMethod_SettleInvoice<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeSingleInvoice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_SubscribeSingleInvoice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::invoicesrpc::SubscribeSingleInvoiceRequest, ::lnrpc::Invoice>(std::bind(&WithSplitStreamingMethod_SubscribeSingleInvoice<BaseClass>::StreamedSubscribeSingleInvoice, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeSingleInvoice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeSingleInvoice(::grpc::ServerContext* /*context*/, const ::invoicesrpc::SubscribeSingleInvoiceRequest* /*request*/, ::grpc::ServerWriter< ::lnrpc::Invoice>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeSingleInvoice(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::invoicesrpc::SubscribeSingleInvoiceRequest,::lnrpc::Invoice>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeSingleInvoice<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeSingleInvoice<WithStreamedUnaryMethod_CancelInvoice<WithStreamedUnaryMethod_AddHoldInvoice<WithStreamedUnaryMethod_SettleInvoice<Service > > > > StreamedService;
};

}  // namespace invoicesrpc


#endif  // GRPC_invoices_2eproto__INCLUDED
