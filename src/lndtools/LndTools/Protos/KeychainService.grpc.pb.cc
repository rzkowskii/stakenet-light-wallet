// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: KeychainService.proto

#include "KeychainService.pb.h"
#include "KeychainService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lightwalletrpc {

static const char* KeychainService_method_names[] = {
  "/lightwalletrpc.KeychainService/DeriveNextKey",
  "/lightwalletrpc.KeychainService/DeriveKey",
  "/lightwalletrpc.KeychainService/DerivePrivKey",
  "/lightwalletrpc.KeychainService/IsOurAddress",
};

std::unique_ptr< KeychainService::Stub> KeychainService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< KeychainService::Stub> stub(new KeychainService::Stub(channel));
  return stub;
}

KeychainService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DeriveNextKey_(KeychainService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeriveKey_(KeychainService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DerivePrivKey_(KeychainService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsOurAddress_(KeychainService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status KeychainService::Stub::DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::lightwalletrpc::KeyDescriptor* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeriveNextKey_, context, request, response);
}

void KeychainService::Stub::experimental_async::DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveNextKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveNextKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DeriveNextKey(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveNextKey_, context, request, response, reactor);
}

void KeychainService::Stub::experimental_async::DeriveNextKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveNextKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* KeychainService::Stub::AsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::KeyDescriptor>::Create(channel_.get(), cq, rpcmethod_DeriveNextKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* KeychainService::Stub::PrepareAsyncDeriveNextKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DeriveNextKeyReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::KeyDescriptor>::Create(channel_.get(), cq, rpcmethod_DeriveNextKey_, context, request, false);
}

::grpc::Status KeychainService::Stub::DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::lightwalletrpc::KeyDescriptor* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeriveKey_, context, request, response);
}

void KeychainService::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, reactor);
}

void KeychainService::Stub::experimental_async::DeriveKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::KeyDescriptor* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeriveKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* KeychainService::Stub::AsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::KeyDescriptor>::Create(channel_.get(), cq, rpcmethod_DeriveKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::KeyDescriptor>* KeychainService::Stub::PrepareAsyncDeriveKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyLocator& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::KeyDescriptor>::Create(channel_.get(), cq, rpcmethod_DeriveKey_, context, request, false);
}

::grpc::Status KeychainService::Stub::DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::lightwalletrpc::HexEncoded* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DerivePrivKey_, context, request, response);
}

void KeychainService::Stub::experimental_async::DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DerivePrivKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DerivePrivKey_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::DerivePrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DerivePrivKey_, context, request, response, reactor);
}

void KeychainService::Stub::experimental_async::DerivePrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DerivePrivKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* KeychainService::Stub::AsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_DerivePrivKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* KeychainService::Stub::PrepareAsyncDerivePrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::KeyDescriptor& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_DerivePrivKey_, context, request, false);
}

::grpc::Status KeychainService::Stub::IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::lightwalletrpc::IsOurAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_IsOurAddress_, context, request, response);
}

void KeychainService::Stub::experimental_async::IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsOurAddress_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_IsOurAddress_, context, request, response, std::move(f));
}

void KeychainService::Stub::experimental_async::IsOurAddress(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsOurAddress_, context, request, response, reactor);
}

void KeychainService::Stub::experimental_async::IsOurAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::IsOurAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_IsOurAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>* KeychainService::Stub::AsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::IsOurAddressResponse>::Create(channel_.get(), cq, rpcmethod_IsOurAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::IsOurAddressResponse>* KeychainService::Stub::PrepareAsyncIsOurAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::IsOurAddressResponse>::Create(channel_.get(), cq, rpcmethod_IsOurAddress_, context, request, false);
}

KeychainService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainService::Service, ::lightwalletrpc::DeriveNextKeyReq, ::lightwalletrpc::KeyDescriptor>(
          std::mem_fn(&KeychainService::Service::DeriveNextKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainService::Service, ::lightwalletrpc::KeyLocator, ::lightwalletrpc::KeyDescriptor>(
          std::mem_fn(&KeychainService::Service::DeriveKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainService::Service, ::lightwalletrpc::KeyDescriptor, ::lightwalletrpc::HexEncoded>(
          std::mem_fn(&KeychainService::Service::DerivePrivKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      KeychainService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< KeychainService::Service, ::lightwalletrpc::HexEncoded, ::lightwalletrpc::IsOurAddressResponse>(
          std::mem_fn(&KeychainService::Service::IsOurAddress), this)));
}

KeychainService::Service::~Service() {
}

::grpc::Status KeychainService::Service::DeriveNextKey(::grpc::ServerContext* context, const ::lightwalletrpc::DeriveNextKeyReq* request, ::lightwalletrpc::KeyDescriptor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeychainService::Service::DeriveKey(::grpc::ServerContext* context, const ::lightwalletrpc::KeyLocator* request, ::lightwalletrpc::KeyDescriptor* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeychainService::Service::DerivePrivKey(::grpc::ServerContext* context, const ::lightwalletrpc::KeyDescriptor* request, ::lightwalletrpc::HexEncoded* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status KeychainService::Service::IsOurAddress(::grpc::ServerContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::IsOurAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lightwalletrpc

