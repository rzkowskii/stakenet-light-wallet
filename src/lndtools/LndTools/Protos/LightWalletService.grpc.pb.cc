// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LightWalletService.proto

#include "LightWalletService.pb.h"
#include "LightWalletService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lightwalletrpc {

static const char* LightWalletService_method_names[] = {
  "/lightwalletrpc.LightWalletService/GetChainInfo",
  "/lightwalletrpc.LightWalletService/GetBlockHash",
  "/lightwalletrpc.LightWalletService/GetBlock",
  "/lightwalletrpc.LightWalletService/GetBlockHeader",
  "/lightwalletrpc.LightWalletService/GetBlockHeaderVerbose",
  "/lightwalletrpc.LightWalletService/GetFilterBlock",
  "/lightwalletrpc.LightWalletService/GetBlockFilter",
  "/lightwalletrpc.LightWalletService/GetTxOut",
  "/lightwalletrpc.LightWalletService/GetRawTransaction",
  "/lightwalletrpc.LightWalletService/GetRawTxByIndex",
  "/lightwalletrpc.LightWalletService/GetLastAddress",
  "/lightwalletrpc.LightWalletService/ListUtxos",
  "/lightwalletrpc.LightWalletService/DumpPrivKey",
  "/lightwalletrpc.LightWalletService/SendRawTransaction",
  "/lightwalletrpc.LightWalletService/GetConfirmedBalance",
  "/lightwalletrpc.LightWalletService/Generate",
  "/lightwalletrpc.LightWalletService/LoadSecondLayerCache",
  "/lightwalletrpc.LightWalletService/FreeSecondLayerCache",
  "/lightwalletrpc.LightWalletService/EstimateNetworkFee",
  "/lightwalletrpc.LightWalletService/LockOutpoint",
  "/lightwalletrpc.LightWalletService/UnlockOutpoint",
  "/lightwalletrpc.LightWalletService/GetSpendingDetails",
};

std::unique_ptr< LightWalletService::Stub> LightWalletService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LightWalletService::Stub> stub(new LightWalletService::Stub(channel));
  return stub;
}

LightWalletService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetChainInfo_(LightWalletService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHash_(LightWalletService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlock_(LightWalletService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeader_(LightWalletService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockHeaderVerbose_(LightWalletService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetFilterBlock_(LightWalletService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockFilter_(LightWalletService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTxOut_(LightWalletService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRawTransaction_(LightWalletService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRawTxByIndex_(LightWalletService_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLastAddress_(LightWalletService_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUtxos_(LightWalletService_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DumpPrivKey_(LightWalletService_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendRawTransaction_(LightWalletService_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetConfirmedBalance_(LightWalletService_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Generate_(LightWalletService_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LoadSecondLayerCache_(LightWalletService_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FreeSecondLayerCache_(LightWalletService_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateNetworkFee_(LightWalletService_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockOutpoint_(LightWalletService_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockOutpoint_(LightWalletService_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSpendingDetails_(LightWalletService_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LightWalletService::Stub::GetChainInfo(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::lightwalletrpc::GetChainInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChainInfo_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetChainInfo(::grpc::ClientContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::GetChainInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChainInfo_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetChainInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetChainInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChainInfo_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetChainInfo(::grpc::ClientContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::GetChainInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChainInfo_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetChainInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetChainInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChainInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetChainInfoResponse>* LightWalletService::Stub::AsyncGetChainInfoRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetChainInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetChainInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetChainInfoResponse>* LightWalletService::Stub::PrepareAsyncGetChainInfoRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetChainInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetChainInfo_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetBlockHash(::grpc::ClientContext* context, const ::lightwalletrpc::Height& request, ::lightwalletrpc::BlockHash* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockHash_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetBlockHash(::grpc::ClientContext* context, const ::lightwalletrpc::Height* request, ::lightwalletrpc::BlockHash* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHash_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockHash* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHash_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHash(::grpc::ClientContext* context, const ::lightwalletrpc::Height* request, ::lightwalletrpc::BlockHash* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHash_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetBlockHash(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockHash* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHash_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockHash>* LightWalletService::Stub::AsyncGetBlockHashRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Height& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockHash>::Create(channel_.get(), cq, rpcmethod_GetBlockHash_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockHash>* LightWalletService::Stub::PrepareAsyncGetBlockHashRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Height& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockHash>::Create(channel_.get(), cq, rpcmethod_GetBlockHash_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::lightwalletrpc::GetBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::GetBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::GetBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetBlockResponse>* LightWalletService::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetBlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetBlockResponse>* LightWalletService::Stub::PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetBlockResponse>::Create(channel_.get(), cq, rpcmethod_GetBlock_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetBlockHeader(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::lightwalletrpc::HexEncoded* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockHeader_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetBlockHeader(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeader_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeader_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHeader(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeader_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetBlockHeader(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeader_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* LightWalletService::Stub::AsyncGetBlockHeaderRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_GetBlockHeader_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* LightWalletService::Stub::PrepareAsyncGetBlockHeaderRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_GetBlockHeader_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetBlockHeaderVerbose(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::lightwalletrpc::BlockHeader* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockHeaderVerbose_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetBlockHeaderVerbose(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockHeader* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderVerbose_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHeaderVerbose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockHeader* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderVerbose_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockHeaderVerbose(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockHeader* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderVerbose_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetBlockHeaderVerbose(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockHeader* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockHeaderVerbose_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockHeader>* LightWalletService::Stub::AsyncGetBlockHeaderVerboseRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockHeader>::Create(channel_.get(), cq, rpcmethod_GetBlockHeaderVerbose_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockHeader>* LightWalletService::Stub::PrepareAsyncGetBlockHeaderVerboseRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockHeader>::Create(channel_.get(), cq, rpcmethod_GetBlockHeaderVerbose_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetFilterBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::lightwalletrpc::FilterBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetFilterBlock_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetFilterBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::FilterBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFilterBlock_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetFilterBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::FilterBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetFilterBlock_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetFilterBlock(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::FilterBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFilterBlock_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetFilterBlock(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::FilterBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetFilterBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::FilterBlockResponse>* LightWalletService::Stub::AsyncGetFilterBlockRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::FilterBlockResponse>::Create(channel_.get(), cq, rpcmethod_GetFilterBlock_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::FilterBlockResponse>* LightWalletService::Stub::PrepareAsyncGetFilterBlockRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::FilterBlockResponse>::Create(channel_.get(), cq, rpcmethod_GetFilterBlock_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetBlockFilter(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::lightwalletrpc::BlockFilter* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetBlockFilter_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetBlockFilter(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockFilter* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockFilter_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockFilter* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetBlockFilter_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetBlockFilter(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockFilter* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockFilter_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetBlockFilter(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::BlockFilter* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetBlockFilter_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockFilter>* LightWalletService::Stub::AsyncGetBlockFilterRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockFilter>::Create(channel_.get(), cq, rpcmethod_GetBlockFilter_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::BlockFilter>* LightWalletService::Stub::PrepareAsyncGetBlockFilterRaw(::grpc::ClientContext* context, const ::lightwalletrpc::BlockHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::BlockFilter>::Create(channel_.get(), cq, rpcmethod_GetBlockFilter_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetTxOut(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::lightwalletrpc::TxOut* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTxOut_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetTxOut(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::TxOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxOut_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetTxOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::TxOut* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTxOut_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetTxOut(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::TxOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxOut_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetTxOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::TxOut* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTxOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::TxOut>* LightWalletService::Stub::AsyncGetTxOutRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::TxOut>::Create(channel_.get(), cq, rpcmethod_GetTxOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::TxOut>* LightWalletService::Stub::PrepareAsyncGetTxOutRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::TxOut>::Create(channel_.get(), cq, rpcmethod_GetTxOut_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::TxID& request, ::lightwalletrpc::GetRawTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRawTransaction_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::TxID* request, ::lightwalletrpc::GetRawTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRawTransaction_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetRawTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRawTransaction_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::TxID* request, ::lightwalletrpc::GetRawTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRawTransaction_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetRawTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRawTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTransactionResponse>* LightWalletService::Stub::AsyncGetRawTransactionRaw(::grpc::ClientContext* context, const ::lightwalletrpc::TxID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetRawTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTransactionResponse>* LightWalletService::Stub::PrepareAsyncGetRawTransactionRaw(::grpc::ClientContext* context, const ::lightwalletrpc::TxID& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetRawTransaction_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetRawTxByIndex(::grpc::ClientContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest& request, ::lightwalletrpc::GetRawTxByIndexResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRawTxByIndex_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetRawTxByIndex(::grpc::ClientContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest* request, ::lightwalletrpc::GetRawTxByIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRawTxByIndex_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetRawTxByIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTxByIndexResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRawTxByIndex_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetRawTxByIndex(::grpc::ClientContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest* request, ::lightwalletrpc::GetRawTxByIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRawTxByIndex_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetRawTxByIndex(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTxByIndexResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRawTxByIndex_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTxByIndexResponse>* LightWalletService::Stub::AsyncGetRawTxByIndexRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTxByIndexResponse>::Create(channel_.get(), cq, rpcmethod_GetRawTxByIndex_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTxByIndexResponse>* LightWalletService::Stub::PrepareAsyncGetRawTxByIndexRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTxByIndexResponse>::Create(channel_.get(), cq, rpcmethod_GetRawTxByIndex_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetLastAddress(::grpc::ClientContext* context, const ::lightwalletrpc::GetLastAddressRequest& request, ::lightwalletrpc::GetLastAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetLastAddress_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetLastAddress(::grpc::ClientContext* context, const ::lightwalletrpc::GetLastAddressRequest* request, ::lightwalletrpc::GetLastAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastAddress_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetLastAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetLastAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetLastAddress_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetLastAddress(::grpc::ClientContext* context, const ::lightwalletrpc::GetLastAddressRequest* request, ::lightwalletrpc::GetLastAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastAddress_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetLastAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetLastAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetLastAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetLastAddressResponse>* LightWalletService::Stub::AsyncGetLastAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetLastAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetLastAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetLastAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetLastAddressResponse>* LightWalletService::Stub::PrepareAsyncGetLastAddressRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetLastAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetLastAddressResponse>::Create(channel_.get(), cq, rpcmethod_GetLastAddress_, context, request, false);
}

::grpc::Status LightWalletService::Stub::ListUtxos(::grpc::ClientContext* context, const ::lightwalletrpc::ListUtxosRequest& request, ::lightwalletrpc::ListUtxoResult* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUtxos_, context, request, response);
}

void LightWalletService::Stub::experimental_async::ListUtxos(::grpc::ClientContext* context, const ::lightwalletrpc::ListUtxosRequest* request, ::lightwalletrpc::ListUtxoResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUtxos_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::ListUtxos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::ListUtxoResult* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUtxos_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::ListUtxos(::grpc::ClientContext* context, const ::lightwalletrpc::ListUtxosRequest* request, ::lightwalletrpc::ListUtxoResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUtxos_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::ListUtxos(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::ListUtxoResult* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUtxos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::ListUtxoResult>* LightWalletService::Stub::AsyncListUtxosRaw(::grpc::ClientContext* context, const ::lightwalletrpc::ListUtxosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::ListUtxoResult>::Create(channel_.get(), cq, rpcmethod_ListUtxos_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::ListUtxoResult>* LightWalletService::Stub::PrepareAsyncListUtxosRaw(::grpc::ClientContext* context, const ::lightwalletrpc::ListUtxosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::ListUtxoResult>::Create(channel_.get(), cq, rpcmethod_ListUtxos_, context, request, false);
}

::grpc::Status LightWalletService::Stub::DumpPrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::DumpPrivKeyRequest& request, ::lightwalletrpc::HexEncoded* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DumpPrivKey_, context, request, response);
}

void LightWalletService::Stub::experimental_async::DumpPrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::DumpPrivKeyRequest* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpPrivKey_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::DumpPrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DumpPrivKey_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::DumpPrivKey(::grpc::ClientContext* context, const ::lightwalletrpc::DumpPrivKeyRequest* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DumpPrivKey_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::DumpPrivKey(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::HexEncoded* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DumpPrivKey_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* LightWalletService::Stub::AsyncDumpPrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DumpPrivKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_DumpPrivKey_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::HexEncoded>* LightWalletService::Stub::PrepareAsyncDumpPrivKeyRaw(::grpc::ClientContext* context, const ::lightwalletrpc::DumpPrivKeyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::HexEncoded>::Create(channel_.get(), cq, rpcmethod_DumpPrivKey_, context, request, false);
}

::grpc::Status LightWalletService::Stub::SendRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::lightwalletrpc::TxID* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendRawTransaction_, context, request, response);
}

void LightWalletService::Stub::experimental_async::SendRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::TxID* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRawTransaction_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::SendRawTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::TxID* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendRawTransaction_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::SendRawTransaction(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::TxID* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendRawTransaction_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::SendRawTransaction(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::TxID* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendRawTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::TxID>* LightWalletService::Stub::AsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::TxID>::Create(channel_.get(), cq, rpcmethod_SendRawTransaction_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::TxID>* LightWalletService::Stub::PrepareAsyncSendRawTransactionRaw(::grpc::ClientContext* context, const ::lightwalletrpc::HexEncoded& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::TxID>::Create(channel_.get(), cq, rpcmethod_SendRawTransaction_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetConfirmedBalance(::grpc::ClientContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest& request, ::lightwalletrpc::GetConfirmedBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetConfirmedBalance_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetConfirmedBalance(::grpc::ClientContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest* request, ::lightwalletrpc::GetConfirmedBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConfirmedBalance_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetConfirmedBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetConfirmedBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetConfirmedBalance_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetConfirmedBalance(::grpc::ClientContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest* request, ::lightwalletrpc::GetConfirmedBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConfirmedBalance_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetConfirmedBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetConfirmedBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetConfirmedBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetConfirmedBalanceResponse>* LightWalletService::Stub::AsyncGetConfirmedBalanceRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetConfirmedBalanceResponse>::Create(channel_.get(), cq, rpcmethod_GetConfirmedBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetConfirmedBalanceResponse>* LightWalletService::Stub::PrepareAsyncGetConfirmedBalanceRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetConfirmedBalanceResponse>::Create(channel_.get(), cq, rpcmethod_GetConfirmedBalance_, context, request, false);
}

::grpc::Status LightWalletService::Stub::Generate(::grpc::ClientContext* context, const ::lightwalletrpc::GenerateRequest& request, ::lightwalletrpc::GenerateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Generate_, context, request, response);
}

void LightWalletService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::lightwalletrpc::GenerateRequest* request, ::lightwalletrpc::GenerateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GenerateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::lightwalletrpc::GenerateRequest* request, ::lightwalletrpc::GenerateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::Generate(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GenerateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Generate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GenerateResponse>* LightWalletService::Stub::AsyncGenerateRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GenerateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GenerateResponse>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GenerateResponse>* LightWalletService::Stub::PrepareAsyncGenerateRaw(::grpc::ClientContext* context, const ::lightwalletrpc::GenerateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GenerateResponse>::Create(channel_.get(), cq, rpcmethod_Generate_, context, request, false);
}

::grpc::Status LightWalletService::Stub::LoadSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::LoadCacheRequest& request, ::lightwalletrpc::LoadCacheResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LoadSecondLayerCache_, context, request, response);
}

void LightWalletService::Stub::experimental_async::LoadSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::LoadCacheRequest* request, ::lightwalletrpc::LoadCacheResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadSecondLayerCache_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::LoadSecondLayerCache(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::LoadCacheResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LoadSecondLayerCache_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::LoadSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::LoadCacheRequest* request, ::lightwalletrpc::LoadCacheResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadSecondLayerCache_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::LoadSecondLayerCache(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::LoadCacheResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LoadSecondLayerCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::LoadCacheResponse>* LightWalletService::Stub::AsyncLoadSecondLayerCacheRaw(::grpc::ClientContext* context, const ::lightwalletrpc::LoadCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::LoadCacheResponse>::Create(channel_.get(), cq, rpcmethod_LoadSecondLayerCache_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::LoadCacheResponse>* LightWalletService::Stub::PrepareAsyncLoadSecondLayerCacheRaw(::grpc::ClientContext* context, const ::lightwalletrpc::LoadCacheRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::LoadCacheResponse>::Create(channel_.get(), cq, rpcmethod_LoadSecondLayerCache_, context, request, false);
}

::grpc::Status LightWalletService::Stub::FreeSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::lightwalletrpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FreeSecondLayerCache_, context, request, response);
}

void LightWalletService::Stub::experimental_async::FreeSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FreeSecondLayerCache_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::FreeSecondLayerCache(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FreeSecondLayerCache_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::FreeSecondLayerCache(::grpc::ClientContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FreeSecondLayerCache_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::FreeSecondLayerCache(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FreeSecondLayerCache_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::AsyncFreeSecondLayerCacheRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_FreeSecondLayerCache_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::PrepareAsyncFreeSecondLayerCacheRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_FreeSecondLayerCache_, context, request, false);
}

::grpc::Status LightWalletService::Stub::EstimateNetworkFee(::grpc::ClientContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest& request, ::lightwalletrpc::EstimateNetworkFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EstimateNetworkFee_, context, request, response);
}

void LightWalletService::Stub::experimental_async::EstimateNetworkFee(::grpc::ClientContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest* request, ::lightwalletrpc::EstimateNetworkFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateNetworkFee_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::EstimateNetworkFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::EstimateNetworkFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateNetworkFee_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::EstimateNetworkFee(::grpc::ClientContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest* request, ::lightwalletrpc::EstimateNetworkFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateNetworkFee_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::EstimateNetworkFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::EstimateNetworkFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateNetworkFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::EstimateNetworkFeeResponse>* LightWalletService::Stub::AsyncEstimateNetworkFeeRaw(::grpc::ClientContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::EstimateNetworkFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateNetworkFee_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::EstimateNetworkFeeResponse>* LightWalletService::Stub::PrepareAsyncEstimateNetworkFeeRaw(::grpc::ClientContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::EstimateNetworkFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateNetworkFee_, context, request, false);
}

::grpc::Status LightWalletService::Stub::LockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::lightwalletrpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LockOutpoint_, context, request, response);
}

void LightWalletService::Stub::experimental_async::LockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockOutpoint_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::LockOutpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LockOutpoint_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::LockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockOutpoint_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::LockOutpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LockOutpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::AsyncLockOutpointRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_LockOutpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::PrepareAsyncLockOutpointRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_LockOutpoint_, context, request, false);
}

::grpc::Status LightWalletService::Stub::UnlockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::lightwalletrpc::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UnlockOutpoint_, context, request, response);
}

void LightWalletService::Stub::experimental_async::UnlockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlockOutpoint_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::UnlockOutpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UnlockOutpoint_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::UnlockOutpoint(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnlockOutpoint_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::UnlockOutpoint(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UnlockOutpoint_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::AsyncUnlockOutpointRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_UnlockOutpoint_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::Empty>* LightWalletService::Stub::PrepareAsyncUnlockOutpointRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::Empty>::Create(channel_.get(), cq, rpcmethod_UnlockOutpoint_, context, request, false);
}

::grpc::Status LightWalletService::Stub::GetSpendingDetails(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::lightwalletrpc::GetRawTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetSpendingDetails_, context, request, response);
}

void LightWalletService::Stub::experimental_async::GetSpendingDetails(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::GetRawTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpendingDetails_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetSpendingDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetSpendingDetails_, context, request, response, std::move(f));
}

void LightWalletService::Stub::experimental_async::GetSpendingDetails(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::GetRawTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpendingDetails_, context, request, response, reactor);
}

void LightWalletService::Stub::experimental_async::GetSpendingDetails(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lightwalletrpc::GetRawTransactionResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetSpendingDetails_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTransactionResponse>* LightWalletService::Stub::AsyncGetSpendingDetailsRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetSpendingDetails_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lightwalletrpc::GetRawTransactionResponse>* LightWalletService::Stub::PrepareAsyncGetSpendingDetailsRaw(::grpc::ClientContext* context, const ::lightwalletrpc::Outpoint& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lightwalletrpc::GetRawTransactionResponse>::Create(channel_.get(), cq, rpcmethod_GetSpendingDetails_, context, request, false);
}

LightWalletService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Empty, ::lightwalletrpc::GetChainInfoResponse>(
          std::mem_fn(&LightWalletService::Service::GetChainInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Height, ::lightwalletrpc::BlockHash>(
          std::mem_fn(&LightWalletService::Service::GetBlockHash), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::BlockHash, ::lightwalletrpc::GetBlockResponse>(
          std::mem_fn(&LightWalletService::Service::GetBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::BlockHash, ::lightwalletrpc::HexEncoded>(
          std::mem_fn(&LightWalletService::Service::GetBlockHeader), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::BlockHash, ::lightwalletrpc::BlockHeader>(
          std::mem_fn(&LightWalletService::Service::GetBlockHeaderVerbose), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::BlockHash, ::lightwalletrpc::FilterBlockResponse>(
          std::mem_fn(&LightWalletService::Service::GetFilterBlock), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::BlockHash, ::lightwalletrpc::BlockFilter>(
          std::mem_fn(&LightWalletService::Service::GetBlockFilter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Outpoint, ::lightwalletrpc::TxOut>(
          std::mem_fn(&LightWalletService::Service::GetTxOut), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::TxID, ::lightwalletrpc::GetRawTransactionResponse>(
          std::mem_fn(&LightWalletService::Service::GetRawTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::GetRawTxByIndexRequest, ::lightwalletrpc::GetRawTxByIndexResponse>(
          std::mem_fn(&LightWalletService::Service::GetRawTxByIndex), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::GetLastAddressRequest, ::lightwalletrpc::GetLastAddressResponse>(
          std::mem_fn(&LightWalletService::Service::GetLastAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::ListUtxosRequest, ::lightwalletrpc::ListUtxoResult>(
          std::mem_fn(&LightWalletService::Service::ListUtxos), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::DumpPrivKeyRequest, ::lightwalletrpc::HexEncoded>(
          std::mem_fn(&LightWalletService::Service::DumpPrivKey), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::HexEncoded, ::lightwalletrpc::TxID>(
          std::mem_fn(&LightWalletService::Service::SendRawTransaction), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::GetConfirmedBalanceRequest, ::lightwalletrpc::GetConfirmedBalanceResponse>(
          std::mem_fn(&LightWalletService::Service::GetConfirmedBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::GenerateRequest, ::lightwalletrpc::GenerateResponse>(
          std::mem_fn(&LightWalletService::Service::Generate), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::LoadCacheRequest, ::lightwalletrpc::LoadCacheResponse>(
          std::mem_fn(&LightWalletService::Service::LoadSecondLayerCache), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Empty, ::lightwalletrpc::Empty>(
          std::mem_fn(&LightWalletService::Service::FreeSecondLayerCache), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::EstimateNetworkFeeRequest, ::lightwalletrpc::EstimateNetworkFeeResponse>(
          std::mem_fn(&LightWalletService::Service::EstimateNetworkFee), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Outpoint, ::lightwalletrpc::Empty>(
          std::mem_fn(&LightWalletService::Service::LockOutpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Outpoint, ::lightwalletrpc::Empty>(
          std::mem_fn(&LightWalletService::Service::UnlockOutpoint), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LightWalletService_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LightWalletService::Service, ::lightwalletrpc::Outpoint, ::lightwalletrpc::GetRawTransactionResponse>(
          std::mem_fn(&LightWalletService::Service::GetSpendingDetails), this)));
}

LightWalletService::Service::~Service() {
}

::grpc::Status LightWalletService::Service::GetChainInfo(::grpc::ServerContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::GetChainInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetBlockHash(::grpc::ServerContext* context, const ::lightwalletrpc::Height* request, ::lightwalletrpc::BlockHash* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetBlock(::grpc::ServerContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::GetBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetBlockHeader(::grpc::ServerContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::HexEncoded* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetBlockHeaderVerbose(::grpc::ServerContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockHeader* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetFilterBlock(::grpc::ServerContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::FilterBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetBlockFilter(::grpc::ServerContext* context, const ::lightwalletrpc::BlockHash* request, ::lightwalletrpc::BlockFilter* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetTxOut(::grpc::ServerContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::TxOut* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetRawTransaction(::grpc::ServerContext* context, const ::lightwalletrpc::TxID* request, ::lightwalletrpc::GetRawTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetRawTxByIndex(::grpc::ServerContext* context, const ::lightwalletrpc::GetRawTxByIndexRequest* request, ::lightwalletrpc::GetRawTxByIndexResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetLastAddress(::grpc::ServerContext* context, const ::lightwalletrpc::GetLastAddressRequest* request, ::lightwalletrpc::GetLastAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::ListUtxos(::grpc::ServerContext* context, const ::lightwalletrpc::ListUtxosRequest* request, ::lightwalletrpc::ListUtxoResult* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::DumpPrivKey(::grpc::ServerContext* context, const ::lightwalletrpc::DumpPrivKeyRequest* request, ::lightwalletrpc::HexEncoded* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::SendRawTransaction(::grpc::ServerContext* context, const ::lightwalletrpc::HexEncoded* request, ::lightwalletrpc::TxID* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetConfirmedBalance(::grpc::ServerContext* context, const ::lightwalletrpc::GetConfirmedBalanceRequest* request, ::lightwalletrpc::GetConfirmedBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::Generate(::grpc::ServerContext* context, const ::lightwalletrpc::GenerateRequest* request, ::lightwalletrpc::GenerateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::LoadSecondLayerCache(::grpc::ServerContext* context, const ::lightwalletrpc::LoadCacheRequest* request, ::lightwalletrpc::LoadCacheResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::FreeSecondLayerCache(::grpc::ServerContext* context, const ::lightwalletrpc::Empty* request, ::lightwalletrpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::EstimateNetworkFee(::grpc::ServerContext* context, const ::lightwalletrpc::EstimateNetworkFeeRequest* request, ::lightwalletrpc::EstimateNetworkFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::LockOutpoint(::grpc::ServerContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::UnlockOutpoint(::grpc::ServerContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LightWalletService::Service::GetSpendingDetails(::grpc::ServerContext* context, const ::lightwalletrpc::Outpoint* request, ::lightwalletrpc::GetRawTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lightwalletrpc

