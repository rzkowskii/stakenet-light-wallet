// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: autopilot.proto

#include "autopilot.pb.h"
#include "autopilot.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace autopilotrpc {

static const char* Autopilot_method_names[] = {
  "/autopilotrpc.Autopilot/Status",
  "/autopilotrpc.Autopilot/ModifyStatus",
  "/autopilotrpc.Autopilot/QueryScores",
  "/autopilotrpc.Autopilot/SetScores",
  "/autopilotrpc.Autopilot/RestartWNewConstraints",
};

std::unique_ptr< Autopilot::Stub> Autopilot::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Autopilot::Stub> stub(new Autopilot::Stub(channel));
  return stub;
}

Autopilot::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Status_(Autopilot_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ModifyStatus_(Autopilot_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryScores_(Autopilot_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetScores_(Autopilot_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestartWNewConstraints_(Autopilot_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Autopilot::Stub::Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::autopilotrpc::StatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Status_, context, request, response);
}

void Autopilot::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

void Autopilot::Stub::experimental_async::Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>* Autopilot::Stub::AsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>* Autopilot::Stub::PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::StatusResponse>::Create(channel_.get(), cq, rpcmethod_Status_, context, request, false);
}

::grpc::Status Autopilot::Stub::ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::autopilotrpc::ModifyStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ModifyStatus_, context, request, response);
}

void Autopilot::Stub::experimental_async::ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModifyStatus_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ModifyStatus_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModifyStatus_, context, request, response, reactor);
}

void Autopilot::Stub::experimental_async::ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ModifyStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>* Autopilot::Stub::AsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::ModifyStatusResponse>::Create(channel_.get(), cq, rpcmethod_ModifyStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>* Autopilot::Stub::PrepareAsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::ModifyStatusResponse>::Create(channel_.get(), cq, rpcmethod_ModifyStatus_, context, request, false);
}

::grpc::Status Autopilot::Stub::QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::autopilotrpc::QueryScoresResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryScores_, context, request, response);
}

void Autopilot::Stub::experimental_async::QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryScores_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryScores_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryScores_, context, request, response, reactor);
}

void Autopilot::Stub::experimental_async::QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryScores_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>* Autopilot::Stub::AsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::QueryScoresResponse>::Create(channel_.get(), cq, rpcmethod_QueryScores_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>* Autopilot::Stub::PrepareAsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::QueryScoresResponse>::Create(channel_.get(), cq, rpcmethod_QueryScores_, context, request, false);
}

::grpc::Status Autopilot::Stub::SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::autopilotrpc::SetScoresResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetScores_, context, request, response);
}

void Autopilot::Stub::experimental_async::SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetScores_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SetScores_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetScores_, context, request, response, reactor);
}

void Autopilot::Stub::experimental_async::SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SetScores_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>* Autopilot::Stub::AsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::SetScoresResponse>::Create(channel_.get(), cq, rpcmethod_SetScores_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>* Autopilot::Stub::PrepareAsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::SetScoresResponse>::Create(channel_.get(), cq, rpcmethod_SetScores_, context, request, false);
}

::grpc::Status Autopilot::Stub::RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::autopilotrpc::RestartConstraintsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestartWNewConstraints_, context, request, response);
}

void Autopilot::Stub::experimental_async::RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartWNewConstraints_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestartWNewConstraints_, context, request, response, std::move(f));
}

void Autopilot::Stub::experimental_async::RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartWNewConstraints_, context, request, response, reactor);
}

void Autopilot::Stub::experimental_async::RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestartWNewConstraints_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>* Autopilot::Stub::AsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::RestartConstraintsResponse>::Create(channel_.get(), cq, rpcmethod_RestartWNewConstraints_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>* Autopilot::Stub::PrepareAsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::autopilotrpc::RestartConstraintsResponse>::Create(channel_.get(), cq, rpcmethod_RestartWNewConstraints_, context, request, false);
}

Autopilot::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Autopilot_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Autopilot::Service, ::autopilotrpc::StatusRequest, ::autopilotrpc::StatusResponse>(
          std::mem_fn(&Autopilot::Service::Status), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Autopilot_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Autopilot::Service, ::autopilotrpc::ModifyStatusRequest, ::autopilotrpc::ModifyStatusResponse>(
          std::mem_fn(&Autopilot::Service::ModifyStatus), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Autopilot_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Autopilot::Service, ::autopilotrpc::QueryScoresRequest, ::autopilotrpc::QueryScoresResponse>(
          std::mem_fn(&Autopilot::Service::QueryScores), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Autopilot_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Autopilot::Service, ::autopilotrpc::SetScoresRequest, ::autopilotrpc::SetScoresResponse>(
          std::mem_fn(&Autopilot::Service::SetScores), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Autopilot_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Autopilot::Service, ::autopilotrpc::RestartConstraintsRequest, ::autopilotrpc::RestartConstraintsResponse>(
          std::mem_fn(&Autopilot::Service::RestartWNewConstraints), this)));
}

Autopilot::Service::~Service() {
}

::grpc::Status Autopilot::Service::Status(::grpc::ServerContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Autopilot::Service::ModifyStatus(::grpc::ServerContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Autopilot::Service::QueryScores(::grpc::ServerContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Autopilot::Service::SetScores(::grpc::ServerContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Autopilot::Service::RestartWNewConstraints(::grpc::ServerContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace autopilotrpc

