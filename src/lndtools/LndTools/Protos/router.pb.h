// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_router_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_router_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "rpc.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_router_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_router_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[25]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_router_2eproto;
namespace routerrpc {
class BuildRouteRequest;
class BuildRouteRequestDefaultTypeInternal;
extern BuildRouteRequestDefaultTypeInternal _BuildRouteRequest_default_instance_;
class BuildRouteResponse;
class BuildRouteResponseDefaultTypeInternal;
extern BuildRouteResponseDefaultTypeInternal _BuildRouteResponse_default_instance_;
class ForwardEvent;
class ForwardEventDefaultTypeInternal;
extern ForwardEventDefaultTypeInternal _ForwardEvent_default_instance_;
class ForwardFailEvent;
class ForwardFailEventDefaultTypeInternal;
extern ForwardFailEventDefaultTypeInternal _ForwardFailEvent_default_instance_;
class HtlcEvent;
class HtlcEventDefaultTypeInternal;
extern HtlcEventDefaultTypeInternal _HtlcEvent_default_instance_;
class HtlcInfo;
class HtlcInfoDefaultTypeInternal;
extern HtlcInfoDefaultTypeInternal _HtlcInfo_default_instance_;
class LinkFailEvent;
class LinkFailEventDefaultTypeInternal;
extern LinkFailEventDefaultTypeInternal _LinkFailEvent_default_instance_;
class PairData;
class PairDataDefaultTypeInternal;
extern PairDataDefaultTypeInternal _PairData_default_instance_;
class PairHistory;
class PairHistoryDefaultTypeInternal;
extern PairHistoryDefaultTypeInternal _PairHistory_default_instance_;
class PaymentStatus;
class PaymentStatusDefaultTypeInternal;
extern PaymentStatusDefaultTypeInternal _PaymentStatus_default_instance_;
class QueryMissionControlRequest;
class QueryMissionControlRequestDefaultTypeInternal;
extern QueryMissionControlRequestDefaultTypeInternal _QueryMissionControlRequest_default_instance_;
class QueryMissionControlResponse;
class QueryMissionControlResponseDefaultTypeInternal;
extern QueryMissionControlResponseDefaultTypeInternal _QueryMissionControlResponse_default_instance_;
class QueryProbabilityRequest;
class QueryProbabilityRequestDefaultTypeInternal;
extern QueryProbabilityRequestDefaultTypeInternal _QueryProbabilityRequest_default_instance_;
class QueryProbabilityResponse;
class QueryProbabilityResponseDefaultTypeInternal;
extern QueryProbabilityResponseDefaultTypeInternal _QueryProbabilityResponse_default_instance_;
class ResetMissionControlRequest;
class ResetMissionControlRequestDefaultTypeInternal;
extern ResetMissionControlRequestDefaultTypeInternal _ResetMissionControlRequest_default_instance_;
class ResetMissionControlResponse;
class ResetMissionControlResponseDefaultTypeInternal;
extern ResetMissionControlResponseDefaultTypeInternal _ResetMissionControlResponse_default_instance_;
class RouteFeeRequest;
class RouteFeeRequestDefaultTypeInternal;
extern RouteFeeRequestDefaultTypeInternal _RouteFeeRequest_default_instance_;
class RouteFeeResponse;
class RouteFeeResponseDefaultTypeInternal;
extern RouteFeeResponseDefaultTypeInternal _RouteFeeResponse_default_instance_;
class SendPaymentRequest;
class SendPaymentRequestDefaultTypeInternal;
extern SendPaymentRequestDefaultTypeInternal _SendPaymentRequest_default_instance_;
class SendPaymentRequest_DestCustomRecordsEntry_DoNotUse;
class SendPaymentRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal;
extern SendPaymentRequest_DestCustomRecordsEntry_DoNotUseDefaultTypeInternal _SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_default_instance_;
class SendToRouteRequest;
class SendToRouteRequestDefaultTypeInternal;
extern SendToRouteRequestDefaultTypeInternal _SendToRouteRequest_default_instance_;
class SendToRouteResponse;
class SendToRouteResponseDefaultTypeInternal;
extern SendToRouteResponseDefaultTypeInternal _SendToRouteResponse_default_instance_;
class SettleEvent;
class SettleEventDefaultTypeInternal;
extern SettleEventDefaultTypeInternal _SettleEvent_default_instance_;
class SubscribeHtlcEventsRequest;
class SubscribeHtlcEventsRequestDefaultTypeInternal;
extern SubscribeHtlcEventsRequestDefaultTypeInternal _SubscribeHtlcEventsRequest_default_instance_;
class TrackPaymentRequest;
class TrackPaymentRequestDefaultTypeInternal;
extern TrackPaymentRequestDefaultTypeInternal _TrackPaymentRequest_default_instance_;
}  // namespace routerrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::routerrpc::BuildRouteRequest* Arena::CreateMaybeMessage<::routerrpc::BuildRouteRequest>(Arena*);
template<> ::routerrpc::BuildRouteResponse* Arena::CreateMaybeMessage<::routerrpc::BuildRouteResponse>(Arena*);
template<> ::routerrpc::ForwardEvent* Arena::CreateMaybeMessage<::routerrpc::ForwardEvent>(Arena*);
template<> ::routerrpc::ForwardFailEvent* Arena::CreateMaybeMessage<::routerrpc::ForwardFailEvent>(Arena*);
template<> ::routerrpc::HtlcEvent* Arena::CreateMaybeMessage<::routerrpc::HtlcEvent>(Arena*);
template<> ::routerrpc::HtlcInfo* Arena::CreateMaybeMessage<::routerrpc::HtlcInfo>(Arena*);
template<> ::routerrpc::LinkFailEvent* Arena::CreateMaybeMessage<::routerrpc::LinkFailEvent>(Arena*);
template<> ::routerrpc::PairData* Arena::CreateMaybeMessage<::routerrpc::PairData>(Arena*);
template<> ::routerrpc::PairHistory* Arena::CreateMaybeMessage<::routerrpc::PairHistory>(Arena*);
template<> ::routerrpc::PaymentStatus* Arena::CreateMaybeMessage<::routerrpc::PaymentStatus>(Arena*);
template<> ::routerrpc::QueryMissionControlRequest* Arena::CreateMaybeMessage<::routerrpc::QueryMissionControlRequest>(Arena*);
template<> ::routerrpc::QueryMissionControlResponse* Arena::CreateMaybeMessage<::routerrpc::QueryMissionControlResponse>(Arena*);
template<> ::routerrpc::QueryProbabilityRequest* Arena::CreateMaybeMessage<::routerrpc::QueryProbabilityRequest>(Arena*);
template<> ::routerrpc::QueryProbabilityResponse* Arena::CreateMaybeMessage<::routerrpc::QueryProbabilityResponse>(Arena*);
template<> ::routerrpc::ResetMissionControlRequest* Arena::CreateMaybeMessage<::routerrpc::ResetMissionControlRequest>(Arena*);
template<> ::routerrpc::ResetMissionControlResponse* Arena::CreateMaybeMessage<::routerrpc::ResetMissionControlResponse>(Arena*);
template<> ::routerrpc::RouteFeeRequest* Arena::CreateMaybeMessage<::routerrpc::RouteFeeRequest>(Arena*);
template<> ::routerrpc::RouteFeeResponse* Arena::CreateMaybeMessage<::routerrpc::RouteFeeResponse>(Arena*);
template<> ::routerrpc::SendPaymentRequest* Arena::CreateMaybeMessage<::routerrpc::SendPaymentRequest>(Arena*);
template<> ::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse* Arena::CreateMaybeMessage<::routerrpc::SendPaymentRequest_DestCustomRecordsEntry_DoNotUse>(Arena*);
template<> ::routerrpc::SendToRouteRequest* Arena::CreateMaybeMessage<::routerrpc::SendToRouteRequest>(Arena*);
template<> ::routerrpc::SendToRouteResponse* Arena::CreateMaybeMessage<::routerrpc::SendToRouteResponse>(Arena*);
template<> ::routerrpc::SettleEvent* Arena::CreateMaybeMessage<::routerrpc::SettleEvent>(Arena*);
template<> ::routerrpc::SubscribeHtlcEventsRequest* Arena::CreateMaybeMessage<::routerrpc::SubscribeHtlcEventsRequest>(Arena*);
template<> ::routerrpc::TrackPaymentRequest* Arena::CreateMaybeMessage<::routerrpc::TrackPaymentRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace routerrpc {

enum HtlcEvent_EventType : int {
  HtlcEvent_EventType_UNKNOWN = 0,
  HtlcEvent_EventType_SEND = 1,
  HtlcEvent_EventType_RECEIVE = 2,
  HtlcEvent_EventType_FORWARD = 3,
  HtlcEvent_EventType_HtlcEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HtlcEvent_EventType_HtlcEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HtlcEvent_EventType_IsValid(int value);
constexpr HtlcEvent_EventType HtlcEvent_EventType_EventType_MIN = HtlcEvent_EventType_UNKNOWN;
constexpr HtlcEvent_EventType HtlcEvent_EventType_EventType_MAX = HtlcEvent_EventType_FORWARD;
constexpr int HtlcEvent_EventType_EventType_ARRAYSIZE = HtlcEvent_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HtlcEvent_EventType_descriptor();
template<typename T>
inline const std::string& HtlcEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HtlcEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HtlcEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HtlcEvent_EventType_descriptor(), enum_t_value);
}
inline bool HtlcEvent_EventType_Parse(
    const std::string& name, HtlcEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HtlcEvent_EventType>(
    HtlcEvent_EventType_descriptor(), name, value);
}
enum FailureDetail : int {
  UNKNOWN = 0,
  NO_DETAIL = 1,
  ONION_DECODE = 2,
  LINK_NOT_ELIGIBLE = 3,
  ON_CHAIN_TIMEOUT = 4,
  HTLC_EXCEEDS_MAX = 5,
  INSUFFICIENT_BALANCE = 6,
  INCOMPLETE_FORWARD = 7,
  HTLC_ADD_FAILED = 8,
  FORWARDS_DISABLED = 9,
  INVOICE_CANCELED = 10,
  INVOICE_UNDERPAID = 11,
  INVOICE_EXPIRY_TOO_SOON = 12,
  INVOICE_NOT_OPEN = 13,
  MPP_INVOICE_TIMEOUT = 14,
  ADDRESS_MISMATCH = 15,
  SET_TOTAL_MISMATCH = 16,
  SET_TOTAL_TOO_LOW = 17,
  SET_OVERPAID = 18,
  UNKNOWN_INVOICE = 19,
  INVALID_KEYSEND = 20,
  MPP_IN_PROGRESS = 21,
  CIRCULAR_ROUTE = 22,
  FailureDetail_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FailureDetail_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FailureDetail_IsValid(int value);
constexpr FailureDetail FailureDetail_MIN = UNKNOWN;
constexpr FailureDetail FailureDetail_MAX = CIRCULAR_ROUTE;
constexpr int FailureDetail_ARRAYSIZE = FailureDetail_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FailureDetail_descriptor();
template<typename T>
inline const std::string& FailureDetail_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FailureDetail>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FailureDetail_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FailureDetail_descriptor(), enum_t_value);
}
inline bool FailureDetail_Parse(
    const std::string& name, FailureDetail* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FailureDetail>(
    FailureDetail_descriptor(), name, value);
}
enum PaymentState : int {
  IN_FLIGHT = 0,
  SUCCEEDED = 1,
  FAILED_TIMEOUT = 2,
  FAILED_NO_ROUTE = 3,
  FAILED_ERROR = 4,
  FAILED_INCORRECT_PAYMENT_DETAILS = 5,
  FAILED_INSUFFICIENT_BALANCE = 6,
  PaymentState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PaymentState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PaymentState_IsValid(int value);
constexpr PaymentState PaymentState_MIN = IN_FLIGHT;
constexpr PaymentState PaymentState_MAX = FAILED_INSUFFICIENT_BALANCE;
constexpr int PaymentState_ARRAYSIZE = PaymentState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PaymentState_descriptor();
template<typename T>
inline const std::string& PaymentState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PaymentState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PaymentState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PaymentState_descriptor(), enum_t_value);
}
inline bool PaymentState_Parse(
    const std::string& name, PaymentState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PaymentState>(
    PaymentState_descriptor(), name, value);
}
// ===================================================================

class SendPaymentRequest_DestCustomRecordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<SendPaymentRequest_DestCustomRecordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  SendPaymentRequest_DestCustomRecordsEntry_DoNotUse();
  SendPaymentRequest_DestCustomRecordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SendPaymentRequest_DestCustomRecordsEntry_DoNotUse& other);
  static const SendPaymentRequest_DestCustomRecordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SendPaymentRequest_DestCustomRecordsEntry_DoNotUse*>(&_SendPaymentRequest_DestCustomRecordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class SendPaymentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.SendPaymentRequest) */ {
 public:
  SendPaymentRequest();
  virtual ~SendPaymentRequest();

  SendPaymentRequest(const SendPaymentRequest& from);
  SendPaymentRequest(SendPaymentRequest&& from) noexcept
    : SendPaymentRequest() {
    *this = ::std::move(from);
  }

  inline SendPaymentRequest& operator=(const SendPaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendPaymentRequest& operator=(SendPaymentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendPaymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendPaymentRequest* internal_default_instance() {
    return reinterpret_cast<const SendPaymentRequest*>(
               &_SendPaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendPaymentRequest& a, SendPaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendPaymentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendPaymentRequest* New() const final {
    return CreateMaybeMessage<SendPaymentRequest>(nullptr);
  }

  SendPaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendPaymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendPaymentRequest& from);
  void MergeFrom(const SendPaymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendPaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.SendPaymentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRouteHintsFieldNumber = 10,
    kDestCustomRecordsFieldNumber = 11,
    kDestFeaturesFieldNumber = 16,
    kDestFieldNumber = 1,
    kPaymentHashFieldNumber = 3,
    kPaymentRequestFieldNumber = 5,
    kLastHopPubkeyFieldNumber = 14,
    kAmtFieldNumber = 2,
    kFinalCltvDeltaFieldNumber = 4,
    kTimeoutSecondsFieldNumber = 6,
    kFeeLimitSatFieldNumber = 7,
    kOutgoingChanIdFieldNumber = 8,
    kAmtMsatFieldNumber = 12,
    kFeeLimitMsatFieldNumber = 13,
    kCltvLimitFieldNumber = 9,
    kAllowSelfPaymentFieldNumber = 15,
    kNoInflightUpdatesFieldNumber = 18,
    kMaxPartsFieldNumber = 17,
  };
  // repeated .lnrpc.RouteHint route_hints = 10;
  int route_hints_size() const;
  private:
  int _internal_route_hints_size() const;
  public:
  void clear_route_hints();
  ::lnrpc::RouteHint* mutable_route_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
      mutable_route_hints();
  private:
  const ::lnrpc::RouteHint& _internal_route_hints(int index) const;
  ::lnrpc::RouteHint* _internal_add_route_hints();
  public:
  const ::lnrpc::RouteHint& route_hints(int index) const;
  ::lnrpc::RouteHint* add_route_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
      route_hints() const;

  // map<uint64, bytes> dest_custom_records = 11;
  int dest_custom_records_size() const;
  private:
  int _internal_dest_custom_records_size() const;
  public:
  void clear_dest_custom_records();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      _internal_dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      _internal_mutable_dest_custom_records();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
      dest_custom_records() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
      mutable_dest_custom_records();

  // repeated .lnrpc.FeatureBit dest_features = 16;
  int dest_features_size() const;
  private:
  int _internal_dest_features_size() const;
  public:
  void clear_dest_features();
  private:
  ::lnrpc::FeatureBit _internal_dest_features(int index) const;
  void _internal_add_dest_features(::lnrpc::FeatureBit value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_dest_features();
  public:
  ::lnrpc::FeatureBit dest_features(int index) const;
  void set_dest_features(int index, ::lnrpc::FeatureBit value);
  void add_dest_features(::lnrpc::FeatureBit value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& dest_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_dest_features();

  // bytes dest = 1;
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const void* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // bytes payment_hash = 3;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // string payment_request = 5;
  void clear_payment_request();
  const std::string& payment_request() const;
  void set_payment_request(const std::string& value);
  void set_payment_request(std::string&& value);
  void set_payment_request(const char* value);
  void set_payment_request(const char* value, size_t size);
  std::string* mutable_payment_request();
  std::string* release_payment_request();
  void set_allocated_payment_request(std::string* payment_request);
  private:
  const std::string& _internal_payment_request() const;
  void _internal_set_payment_request(const std::string& value);
  std::string* _internal_mutable_payment_request();
  public:

  // bytes last_hop_pubkey = 14;
  void clear_last_hop_pubkey();
  const std::string& last_hop_pubkey() const;
  void set_last_hop_pubkey(const std::string& value);
  void set_last_hop_pubkey(std::string&& value);
  void set_last_hop_pubkey(const char* value);
  void set_last_hop_pubkey(const void* value, size_t size);
  std::string* mutable_last_hop_pubkey();
  std::string* release_last_hop_pubkey();
  void set_allocated_last_hop_pubkey(std::string* last_hop_pubkey);
  private:
  const std::string& _internal_last_hop_pubkey() const;
  void _internal_set_last_hop_pubkey(const std::string& value);
  std::string* _internal_mutable_last_hop_pubkey();
  public:

  // int64 amt = 2;
  void clear_amt();
  ::PROTOBUF_NAMESPACE_ID::int64 amt() const;
  void set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt() const;
  void _internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 final_cltv_delta = 4;
  void clear_final_cltv_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta() const;
  void set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_cltv_delta() const;
  void _internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 timeout_seconds = 6;
  void clear_timeout_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_seconds() const;
  void set_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeout_seconds() const;
  void _internal_set_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 fee_limit_sat = 7;
  void clear_fee_limit_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit_sat() const;
  void set_fee_limit_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_limit_sat() const;
  void _internal_set_fee_limit_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 outgoing_chan_id = 8 [jstype = JS_STRING];
  void clear_outgoing_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id() const;
  void set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_chan_id() const;
  void _internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 amt_msat = 12;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fee_limit_msat = 13;
  void clear_fee_limit_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit_msat() const;
  void set_fee_limit_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee_limit_msat() const;
  void _internal_set_fee_limit_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 cltv_limit = 9;
  void clear_cltv_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 cltv_limit() const;
  void set_cltv_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cltv_limit() const;
  void _internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool allow_self_payment = 15;
  void clear_allow_self_payment();
  bool allow_self_payment() const;
  void set_allow_self_payment(bool value);
  private:
  bool _internal_allow_self_payment() const;
  void _internal_set_allow_self_payment(bool value);
  public:

  // bool no_inflight_updates = 18;
  void clear_no_inflight_updates();
  bool no_inflight_updates() const;
  void set_no_inflight_updates(bool value);
  private:
  bool _internal_no_inflight_updates() const;
  void _internal_set_no_inflight_updates(bool value);
  public:

  // uint32 max_parts = 17;
  void clear_max_parts();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_parts() const;
  void set_max_parts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_parts() const;
  void _internal_set_max_parts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.SendPaymentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint > route_hints_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      SendPaymentRequest_DestCustomRecordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint64, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BYTES,
      0 > dest_custom_records_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> dest_features_;
  mutable std::atomic<int> _dest_features_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_hop_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeout_seconds_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit_sat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_limit_msat_;
  ::PROTOBUF_NAMESPACE_ID::int32 cltv_limit_;
  bool allow_self_payment_;
  bool no_inflight_updates_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_parts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class TrackPaymentRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.TrackPaymentRequest) */ {
 public:
  TrackPaymentRequest();
  virtual ~TrackPaymentRequest();

  TrackPaymentRequest(const TrackPaymentRequest& from);
  TrackPaymentRequest(TrackPaymentRequest&& from) noexcept
    : TrackPaymentRequest() {
    *this = ::std::move(from);
  }

  inline TrackPaymentRequest& operator=(const TrackPaymentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPaymentRequest& operator=(TrackPaymentRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackPaymentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackPaymentRequest* internal_default_instance() {
    return reinterpret_cast<const TrackPaymentRequest*>(
               &_TrackPaymentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackPaymentRequest& a, TrackPaymentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPaymentRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackPaymentRequest* New() const final {
    return CreateMaybeMessage<TrackPaymentRequest>(nullptr);
  }

  TrackPaymentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackPaymentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackPaymentRequest& from);
  void MergeFrom(const TrackPaymentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPaymentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.TrackPaymentRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kNoInflightUpdatesFieldNumber = 2,
  };
  // bytes payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // bool no_inflight_updates = 2;
  void clear_no_inflight_updates();
  bool no_inflight_updates() const;
  void set_no_inflight_updates(bool value);
  private:
  bool _internal_no_inflight_updates() const;
  void _internal_set_no_inflight_updates(bool value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.TrackPaymentRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  bool no_inflight_updates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteFeeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.RouteFeeRequest) */ {
 public:
  RouteFeeRequest();
  virtual ~RouteFeeRequest();

  RouteFeeRequest(const RouteFeeRequest& from);
  RouteFeeRequest(RouteFeeRequest&& from) noexcept
    : RouteFeeRequest() {
    *this = ::std::move(from);
  }

  inline RouteFeeRequest& operator=(const RouteFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteFeeRequest& operator=(RouteFeeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteFeeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteFeeRequest* internal_default_instance() {
    return reinterpret_cast<const RouteFeeRequest*>(
               &_RouteFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RouteFeeRequest& a, RouteFeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteFeeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteFeeRequest* New() const final {
    return CreateMaybeMessage<RouteFeeRequest>(nullptr);
  }

  RouteFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteFeeRequest& from);
  void MergeFrom(const RouteFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.RouteFeeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestFieldNumber = 1,
    kAmtSatFieldNumber = 2,
  };
  // bytes dest = 1;
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const void* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // int64 amt_sat = 2;
  void clear_amt_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_sat() const;
  void set_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_sat() const;
  void _internal_set_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.RouteFeeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_sat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class RouteFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.RouteFeeResponse) */ {
 public:
  RouteFeeResponse();
  virtual ~RouteFeeResponse();

  RouteFeeResponse(const RouteFeeResponse& from);
  RouteFeeResponse(RouteFeeResponse&& from) noexcept
    : RouteFeeResponse() {
    *this = ::std::move(from);
  }

  inline RouteFeeResponse& operator=(const RouteFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteFeeResponse& operator=(RouteFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteFeeResponse* internal_default_instance() {
    return reinterpret_cast<const RouteFeeResponse*>(
               &_RouteFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteFeeResponse& a, RouteFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteFeeResponse* New() const final {
    return CreateMaybeMessage<RouteFeeResponse>(nullptr);
  }

  RouteFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteFeeResponse& from);
  void MergeFrom(const RouteFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.RouteFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoutingFeeMsatFieldNumber = 1,
    kTimeLockDelayFieldNumber = 2,
  };
  // int64 routing_fee_msat = 1;
  void clear_routing_fee_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 routing_fee_msat() const;
  void set_routing_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_routing_fee_msat() const;
  void _internal_set_routing_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 time_lock_delay = 2;
  void clear_time_lock_delay();
  ::PROTOBUF_NAMESPACE_ID::int64 time_lock_delay() const;
  void set_time_lock_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_lock_delay() const;
  void _internal_set_time_lock_delay(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.RouteFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 routing_fee_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_lock_delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SendToRouteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.SendToRouteRequest) */ {
 public:
  SendToRouteRequest();
  virtual ~SendToRouteRequest();

  SendToRouteRequest(const SendToRouteRequest& from);
  SendToRouteRequest(SendToRouteRequest&& from) noexcept
    : SendToRouteRequest() {
    *this = ::std::move(from);
  }

  inline SendToRouteRequest& operator=(const SendToRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToRouteRequest& operator=(SendToRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRouteRequest* internal_default_instance() {
    return reinterpret_cast<const SendToRouteRequest*>(
               &_SendToRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendToRouteRequest& a, SendToRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToRouteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToRouteRequest* New() const final {
    return CreateMaybeMessage<SendToRouteRequest>(nullptr);
  }

  SendToRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToRouteRequest& from);
  void MergeFrom(const SendToRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.SendToRouteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kRouteFieldNumber = 2,
  };
  // bytes payment_hash = 1;
  void clear_payment_hash();
  const std::string& payment_hash() const;
  void set_payment_hash(const std::string& value);
  void set_payment_hash(std::string&& value);
  void set_payment_hash(const char* value);
  void set_payment_hash(const void* value, size_t size);
  std::string* mutable_payment_hash();
  std::string* release_payment_hash();
  void set_allocated_payment_hash(std::string* payment_hash);
  private:
  const std::string& _internal_payment_hash() const;
  void _internal_set_payment_hash(const std::string& value);
  std::string* _internal_mutable_payment_hash();
  public:

  // .lnrpc.Route route = 2;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::lnrpc::Route& route() const;
  ::lnrpc::Route* release_route();
  ::lnrpc::Route* mutable_route();
  void set_allocated_route(::lnrpc::Route* route);
  private:
  const ::lnrpc::Route& _internal_route() const;
  ::lnrpc::Route* _internal_mutable_route();
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.SendToRouteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payment_hash_;
  ::lnrpc::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SendToRouteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.SendToRouteResponse) */ {
 public:
  SendToRouteResponse();
  virtual ~SendToRouteResponse();

  SendToRouteResponse(const SendToRouteResponse& from);
  SendToRouteResponse(SendToRouteResponse&& from) noexcept
    : SendToRouteResponse() {
    *this = ::std::move(from);
  }

  inline SendToRouteResponse& operator=(const SendToRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendToRouteResponse& operator=(SendToRouteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendToRouteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendToRouteResponse* internal_default_instance() {
    return reinterpret_cast<const SendToRouteResponse*>(
               &_SendToRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SendToRouteResponse& a, SendToRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendToRouteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendToRouteResponse* New() const final {
    return CreateMaybeMessage<SendToRouteResponse>(nullptr);
  }

  SendToRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendToRouteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendToRouteResponse& from);
  void MergeFrom(const SendToRouteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendToRouteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.SendToRouteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreimageFieldNumber = 1,
    kFailureFieldNumber = 2,
  };
  // bytes preimage = 1;
  void clear_preimage();
  const std::string& preimage() const;
  void set_preimage(const std::string& value);
  void set_preimage(std::string&& value);
  void set_preimage(const char* value);
  void set_preimage(const void* value, size_t size);
  std::string* mutable_preimage();
  std::string* release_preimage();
  void set_allocated_preimage(std::string* preimage);
  private:
  const std::string& _internal_preimage() const;
  void _internal_set_preimage(const std::string& value);
  std::string* _internal_mutable_preimage();
  public:

  // .lnrpc.Failure failure = 2;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::lnrpc::Failure& failure() const;
  ::lnrpc::Failure* release_failure();
  ::lnrpc::Failure* mutable_failure();
  void set_allocated_failure(::lnrpc::Failure* failure);
  private:
  const ::lnrpc::Failure& _internal_failure() const;
  ::lnrpc::Failure* _internal_mutable_failure();
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.SendToRouteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimage_;
  ::lnrpc::Failure* failure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class ResetMissionControlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.ResetMissionControlRequest) */ {
 public:
  ResetMissionControlRequest();
  virtual ~ResetMissionControlRequest();

  ResetMissionControlRequest(const ResetMissionControlRequest& from);
  ResetMissionControlRequest(ResetMissionControlRequest&& from) noexcept
    : ResetMissionControlRequest() {
    *this = ::std::move(from);
  }

  inline ResetMissionControlRequest& operator=(const ResetMissionControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMissionControlRequest& operator=(ResetMissionControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMissionControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetMissionControlRequest* internal_default_instance() {
    return reinterpret_cast<const ResetMissionControlRequest*>(
               &_ResetMissionControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ResetMissionControlRequest& a, ResetMissionControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMissionControlRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMissionControlRequest* New() const final {
    return CreateMaybeMessage<ResetMissionControlRequest>(nullptr);
  }

  ResetMissionControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMissionControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMissionControlRequest& from);
  void MergeFrom(const ResetMissionControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMissionControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.ResetMissionControlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.ResetMissionControlRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class ResetMissionControlResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.ResetMissionControlResponse) */ {
 public:
  ResetMissionControlResponse();
  virtual ~ResetMissionControlResponse();

  ResetMissionControlResponse(const ResetMissionControlResponse& from);
  ResetMissionControlResponse(ResetMissionControlResponse&& from) noexcept
    : ResetMissionControlResponse() {
    *this = ::std::move(from);
  }

  inline ResetMissionControlResponse& operator=(const ResetMissionControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMissionControlResponse& operator=(ResetMissionControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetMissionControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetMissionControlResponse* internal_default_instance() {
    return reinterpret_cast<const ResetMissionControlResponse*>(
               &_ResetMissionControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResetMissionControlResponse& a, ResetMissionControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMissionControlResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetMissionControlResponse* New() const final {
    return CreateMaybeMessage<ResetMissionControlResponse>(nullptr);
  }

  ResetMissionControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetMissionControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetMissionControlResponse& from);
  void MergeFrom(const ResetMissionControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetMissionControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.ResetMissionControlResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.ResetMissionControlResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class QueryMissionControlRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.QueryMissionControlRequest) */ {
 public:
  QueryMissionControlRequest();
  virtual ~QueryMissionControlRequest();

  QueryMissionControlRequest(const QueryMissionControlRequest& from);
  QueryMissionControlRequest(QueryMissionControlRequest&& from) noexcept
    : QueryMissionControlRequest() {
    *this = ::std::move(from);
  }

  inline QueryMissionControlRequest& operator=(const QueryMissionControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMissionControlRequest& operator=(QueryMissionControlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryMissionControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryMissionControlRequest* internal_default_instance() {
    return reinterpret_cast<const QueryMissionControlRequest*>(
               &_QueryMissionControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(QueryMissionControlRequest& a, QueryMissionControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMissionControlRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMissionControlRequest* New() const final {
    return CreateMaybeMessage<QueryMissionControlRequest>(nullptr);
  }

  QueryMissionControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMissionControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryMissionControlRequest& from);
  void MergeFrom(const QueryMissionControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMissionControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.QueryMissionControlRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.QueryMissionControlRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class QueryMissionControlResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.QueryMissionControlResponse) */ {
 public:
  QueryMissionControlResponse();
  virtual ~QueryMissionControlResponse();

  QueryMissionControlResponse(const QueryMissionControlResponse& from);
  QueryMissionControlResponse(QueryMissionControlResponse&& from) noexcept
    : QueryMissionControlResponse() {
    *this = ::std::move(from);
  }

  inline QueryMissionControlResponse& operator=(const QueryMissionControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryMissionControlResponse& operator=(QueryMissionControlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryMissionControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryMissionControlResponse* internal_default_instance() {
    return reinterpret_cast<const QueryMissionControlResponse*>(
               &_QueryMissionControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(QueryMissionControlResponse& a, QueryMissionControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryMissionControlResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryMissionControlResponse* New() const final {
    return CreateMaybeMessage<QueryMissionControlResponse>(nullptr);
  }

  QueryMissionControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryMissionControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryMissionControlResponse& from);
  void MergeFrom(const QueryMissionControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryMissionControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.QueryMissionControlResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairsFieldNumber = 2,
  };
  // repeated .routerrpc.PairHistory pairs = 2;
  int pairs_size() const;
  private:
  int _internal_pairs_size() const;
  public:
  void clear_pairs();
  ::routerrpc::PairHistory* mutable_pairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routerrpc::PairHistory >*
      mutable_pairs();
  private:
  const ::routerrpc::PairHistory& _internal_pairs(int index) const;
  ::routerrpc::PairHistory* _internal_add_pairs();
  public:
  const ::routerrpc::PairHistory& pairs(int index) const;
  ::routerrpc::PairHistory* add_pairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routerrpc::PairHistory >&
      pairs() const;

  // @@protoc_insertion_point(class_scope:routerrpc.QueryMissionControlResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routerrpc::PairHistory > pairs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class PairHistory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.PairHistory) */ {
 public:
  PairHistory();
  virtual ~PairHistory();

  PairHistory(const PairHistory& from);
  PairHistory(PairHistory&& from) noexcept
    : PairHistory() {
    *this = ::std::move(from);
  }

  inline PairHistory& operator=(const PairHistory& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairHistory& operator=(PairHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairHistory* internal_default_instance() {
    return reinterpret_cast<const PairHistory*>(
               &_PairHistory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PairHistory& a, PairHistory& b) {
    a.Swap(&b);
  }
  inline void Swap(PairHistory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairHistory* New() const final {
    return CreateMaybeMessage<PairHistory>(nullptr);
  }

  PairHistory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairHistory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairHistory& from);
  void MergeFrom(const PairHistory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairHistory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.PairHistory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFromFieldNumber = 1,
    kNodeToFieldNumber = 2,
    kHistoryFieldNumber = 7,
  };
  // bytes node_from = 1;
  void clear_node_from();
  const std::string& node_from() const;
  void set_node_from(const std::string& value);
  void set_node_from(std::string&& value);
  void set_node_from(const char* value);
  void set_node_from(const void* value, size_t size);
  std::string* mutable_node_from();
  std::string* release_node_from();
  void set_allocated_node_from(std::string* node_from);
  private:
  const std::string& _internal_node_from() const;
  void _internal_set_node_from(const std::string& value);
  std::string* _internal_mutable_node_from();
  public:

  // bytes node_to = 2;
  void clear_node_to();
  const std::string& node_to() const;
  void set_node_to(const std::string& value);
  void set_node_to(std::string&& value);
  void set_node_to(const char* value);
  void set_node_to(const void* value, size_t size);
  std::string* mutable_node_to();
  std::string* release_node_to();
  void set_allocated_node_to(std::string* node_to);
  private:
  const std::string& _internal_node_to() const;
  void _internal_set_node_to(const std::string& value);
  std::string* _internal_mutable_node_to();
  public:

  // .routerrpc.PairData history = 7;
  bool has_history() const;
  private:
  bool _internal_has_history() const;
  public:
  void clear_history();
  const ::routerrpc::PairData& history() const;
  ::routerrpc::PairData* release_history();
  ::routerrpc::PairData* mutable_history();
  void set_allocated_history(::routerrpc::PairData* history);
  private:
  const ::routerrpc::PairData& _internal_history() const;
  ::routerrpc::PairData* _internal_mutable_history();
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.PairHistory)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_to_;
  ::routerrpc::PairData* history_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class PairData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.PairData) */ {
 public:
  PairData();
  virtual ~PairData();

  PairData(const PairData& from);
  PairData(PairData&& from) noexcept
    : PairData() {
    *this = ::std::move(from);
  }

  inline PairData& operator=(const PairData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairData& operator=(PairData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairData* internal_default_instance() {
    return reinterpret_cast<const PairData*>(
               &_PairData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PairData& a, PairData& b) {
    a.Swap(&b);
  }
  inline void Swap(PairData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairData* New() const final {
    return CreateMaybeMessage<PairData>(nullptr);
  }

  PairData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairData& from);
  void MergeFrom(const PairData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.PairData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailTimeFieldNumber = 1,
    kFailAmtSatFieldNumber = 2,
    kFailAmtMsatFieldNumber = 4,
    kSuccessTimeFieldNumber = 5,
    kSuccessAmtSatFieldNumber = 6,
    kSuccessAmtMsatFieldNumber = 7,
  };
  // int64 fail_time = 1;
  void clear_fail_time();
  ::PROTOBUF_NAMESPACE_ID::int64 fail_time() const;
  void set_fail_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fail_time() const;
  void _internal_set_fail_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fail_amt_sat = 2;
  void clear_fail_amt_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 fail_amt_sat() const;
  void set_fail_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fail_amt_sat() const;
  void _internal_set_fail_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 fail_amt_msat = 4;
  void clear_fail_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 fail_amt_msat() const;
  void set_fail_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fail_amt_msat() const;
  void _internal_set_fail_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 success_time = 5;
  void clear_success_time();
  ::PROTOBUF_NAMESPACE_ID::int64 success_time() const;
  void set_success_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_success_time() const;
  void _internal_set_success_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 success_amt_sat = 6;
  void clear_success_amt_sat();
  ::PROTOBUF_NAMESPACE_ID::int64 success_amt_sat() const;
  void set_success_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_success_amt_sat() const;
  void _internal_set_success_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 success_amt_msat = 7;
  void clear_success_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 success_amt_msat() const;
  void set_success_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_success_amt_msat() const;
  void _internal_set_success_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.PairData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 fail_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 fail_amt_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 fail_amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::int64 success_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 success_amt_sat_;
  ::PROTOBUF_NAMESPACE_ID::int64 success_amt_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class QueryProbabilityRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.QueryProbabilityRequest) */ {
 public:
  QueryProbabilityRequest();
  virtual ~QueryProbabilityRequest();

  QueryProbabilityRequest(const QueryProbabilityRequest& from);
  QueryProbabilityRequest(QueryProbabilityRequest&& from) noexcept
    : QueryProbabilityRequest() {
    *this = ::std::move(from);
  }

  inline QueryProbabilityRequest& operator=(const QueryProbabilityRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProbabilityRequest& operator=(QueryProbabilityRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryProbabilityRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryProbabilityRequest* internal_default_instance() {
    return reinterpret_cast<const QueryProbabilityRequest*>(
               &_QueryProbabilityRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(QueryProbabilityRequest& a, QueryProbabilityRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProbabilityRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryProbabilityRequest* New() const final {
    return CreateMaybeMessage<QueryProbabilityRequest>(nullptr);
  }

  QueryProbabilityRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryProbabilityRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryProbabilityRequest& from);
  void MergeFrom(const QueryProbabilityRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProbabilityRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.QueryProbabilityRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromNodeFieldNumber = 1,
    kToNodeFieldNumber = 2,
    kAmtMsatFieldNumber = 3,
  };
  // bytes from_node = 1;
  void clear_from_node();
  const std::string& from_node() const;
  void set_from_node(const std::string& value);
  void set_from_node(std::string&& value);
  void set_from_node(const char* value);
  void set_from_node(const void* value, size_t size);
  std::string* mutable_from_node();
  std::string* release_from_node();
  void set_allocated_from_node(std::string* from_node);
  private:
  const std::string& _internal_from_node() const;
  void _internal_set_from_node(const std::string& value);
  std::string* _internal_mutable_from_node();
  public:

  // bytes to_node = 2;
  void clear_to_node();
  const std::string& to_node() const;
  void set_to_node(const std::string& value);
  void set_to_node(std::string&& value);
  void set_to_node(const char* value);
  void set_to_node(const void* value, size_t size);
  std::string* mutable_to_node();
  std::string* release_to_node();
  void set_allocated_to_node(std::string* to_node);
  private:
  const std::string& _internal_to_node() const;
  void _internal_set_to_node(const std::string& value);
  std::string* _internal_mutable_to_node();
  public:

  // int64 amt_msat = 3;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.QueryProbabilityRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_node_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_node_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class QueryProbabilityResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.QueryProbabilityResponse) */ {
 public:
  QueryProbabilityResponse();
  virtual ~QueryProbabilityResponse();

  QueryProbabilityResponse(const QueryProbabilityResponse& from);
  QueryProbabilityResponse(QueryProbabilityResponse&& from) noexcept
    : QueryProbabilityResponse() {
    *this = ::std::move(from);
  }

  inline QueryProbabilityResponse& operator=(const QueryProbabilityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryProbabilityResponse& operator=(QueryProbabilityResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryProbabilityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryProbabilityResponse* internal_default_instance() {
    return reinterpret_cast<const QueryProbabilityResponse*>(
               &_QueryProbabilityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(QueryProbabilityResponse& a, QueryProbabilityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryProbabilityResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryProbabilityResponse* New() const final {
    return CreateMaybeMessage<QueryProbabilityResponse>(nullptr);
  }

  QueryProbabilityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryProbabilityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryProbabilityResponse& from);
  void MergeFrom(const QueryProbabilityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryProbabilityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.QueryProbabilityResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // .routerrpc.PairData history = 2;
  bool has_history() const;
  private:
  bool _internal_has_history() const;
  public:
  void clear_history();
  const ::routerrpc::PairData& history() const;
  ::routerrpc::PairData* release_history();
  ::routerrpc::PairData* mutable_history();
  void set_allocated_history(::routerrpc::PairData* history);
  private:
  const ::routerrpc::PairData& _internal_history() const;
  ::routerrpc::PairData* _internal_mutable_history();
  public:

  // double probability = 1;
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.QueryProbabilityResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::routerrpc::PairData* history_;
  double probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class BuildRouteRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.BuildRouteRequest) */ {
 public:
  BuildRouteRequest();
  virtual ~BuildRouteRequest();

  BuildRouteRequest(const BuildRouteRequest& from);
  BuildRouteRequest(BuildRouteRequest&& from) noexcept
    : BuildRouteRequest() {
    *this = ::std::move(from);
  }

  inline BuildRouteRequest& operator=(const BuildRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildRouteRequest& operator=(BuildRouteRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildRouteRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildRouteRequest* internal_default_instance() {
    return reinterpret_cast<const BuildRouteRequest*>(
               &_BuildRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BuildRouteRequest& a, BuildRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildRouteRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildRouteRequest* New() const final {
    return CreateMaybeMessage<BuildRouteRequest>(nullptr);
  }

  BuildRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildRouteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildRouteRequest& from);
  void MergeFrom(const BuildRouteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildRouteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.BuildRouteRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHopPubkeysFieldNumber = 4,
    kAmtMsatFieldNumber = 1,
    kOutgoingChanIdFieldNumber = 3,
    kFinalCltvDeltaFieldNumber = 2,
  };
  // repeated bytes hop_pubkeys = 4;
  int hop_pubkeys_size() const;
  private:
  int _internal_hop_pubkeys_size() const;
  public:
  void clear_hop_pubkeys();
  const std::string& hop_pubkeys(int index) const;
  std::string* mutable_hop_pubkeys(int index);
  void set_hop_pubkeys(int index, const std::string& value);
  void set_hop_pubkeys(int index, std::string&& value);
  void set_hop_pubkeys(int index, const char* value);
  void set_hop_pubkeys(int index, const void* value, size_t size);
  std::string* add_hop_pubkeys();
  void add_hop_pubkeys(const std::string& value);
  void add_hop_pubkeys(std::string&& value);
  void add_hop_pubkeys(const char* value);
  void add_hop_pubkeys(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& hop_pubkeys() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_hop_pubkeys();
  private:
  const std::string& _internal_hop_pubkeys(int index) const;
  std::string* _internal_add_hop_pubkeys();
  public:

  // int64 amt_msat = 1;
  void clear_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat() const;
  void set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amt_msat() const;
  void _internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 outgoing_chan_id = 3 [jstype = JS_STRING];
  void clear_outgoing_chan_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id() const;
  void set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_chan_id() const;
  void _internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 final_cltv_delta = 2;
  void clear_final_cltv_delta();
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta() const;
  void set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_final_cltv_delta() const;
  void _internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.BuildRouteRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> hop_pubkeys_;
  ::PROTOBUF_NAMESPACE_ID::int64 amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_chan_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 final_cltv_delta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class BuildRouteResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.BuildRouteResponse) */ {
 public:
  BuildRouteResponse();
  virtual ~BuildRouteResponse();

  BuildRouteResponse(const BuildRouteResponse& from);
  BuildRouteResponse(BuildRouteResponse&& from) noexcept
    : BuildRouteResponse() {
    *this = ::std::move(from);
  }

  inline BuildRouteResponse& operator=(const BuildRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BuildRouteResponse& operator=(BuildRouteResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BuildRouteResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuildRouteResponse* internal_default_instance() {
    return reinterpret_cast<const BuildRouteResponse*>(
               &_BuildRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BuildRouteResponse& a, BuildRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BuildRouteResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BuildRouteResponse* New() const final {
    return CreateMaybeMessage<BuildRouteResponse>(nullptr);
  }

  BuildRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BuildRouteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BuildRouteResponse& from);
  void MergeFrom(const BuildRouteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuildRouteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.BuildRouteResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
  };
  // .lnrpc.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::lnrpc::Route& route() const;
  ::lnrpc::Route* release_route();
  ::lnrpc::Route* mutable_route();
  void set_allocated_route(::lnrpc::Route* route);
  private:
  const ::lnrpc::Route& _internal_route() const;
  ::lnrpc::Route* _internal_mutable_route();
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.BuildRouteResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lnrpc::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SubscribeHtlcEventsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.SubscribeHtlcEventsRequest) */ {
 public:
  SubscribeHtlcEventsRequest();
  virtual ~SubscribeHtlcEventsRequest();

  SubscribeHtlcEventsRequest(const SubscribeHtlcEventsRequest& from);
  SubscribeHtlcEventsRequest(SubscribeHtlcEventsRequest&& from) noexcept
    : SubscribeHtlcEventsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeHtlcEventsRequest& operator=(const SubscribeHtlcEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeHtlcEventsRequest& operator=(SubscribeHtlcEventsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeHtlcEventsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeHtlcEventsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeHtlcEventsRequest*>(
               &_SubscribeHtlcEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SubscribeHtlcEventsRequest& a, SubscribeHtlcEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeHtlcEventsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeHtlcEventsRequest* New() const final {
    return CreateMaybeMessage<SubscribeHtlcEventsRequest>(nullptr);
  }

  SubscribeHtlcEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeHtlcEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeHtlcEventsRequest& from);
  void MergeFrom(const SubscribeHtlcEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeHtlcEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.SubscribeHtlcEventsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.SubscribeHtlcEventsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class HtlcEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.HtlcEvent) */ {
 public:
  HtlcEvent();
  virtual ~HtlcEvent();

  HtlcEvent(const HtlcEvent& from);
  HtlcEvent(HtlcEvent&& from) noexcept
    : HtlcEvent() {
    *this = ::std::move(from);
  }

  inline HtlcEvent& operator=(const HtlcEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline HtlcEvent& operator=(HtlcEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HtlcEvent& default_instance();

  enum EventCase {
    kForwardEvent = 7,
    kForwardFailEvent = 8,
    kSettleEvent = 9,
    kLinkFailEvent = 10,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HtlcEvent* internal_default_instance() {
    return reinterpret_cast<const HtlcEvent*>(
               &_HtlcEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(HtlcEvent& a, HtlcEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(HtlcEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HtlcEvent* New() const final {
    return CreateMaybeMessage<HtlcEvent>(nullptr);
  }

  HtlcEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HtlcEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HtlcEvent& from);
  void MergeFrom(const HtlcEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HtlcEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.HtlcEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HtlcEvent_EventType EventType;
  static constexpr EventType UNKNOWN =
    HtlcEvent_EventType_UNKNOWN;
  static constexpr EventType SEND =
    HtlcEvent_EventType_SEND;
  static constexpr EventType RECEIVE =
    HtlcEvent_EventType_RECEIVE;
  static constexpr EventType FORWARD =
    HtlcEvent_EventType_FORWARD;
  static inline bool EventType_IsValid(int value) {
    return HtlcEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    HtlcEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    HtlcEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    HtlcEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return HtlcEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return HtlcEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(const std::string& name,
      EventType* value) {
    return HtlcEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIncomingChannelIdFieldNumber = 1,
    kOutgoingChannelIdFieldNumber = 2,
    kIncomingHtlcIdFieldNumber = 3,
    kOutgoingHtlcIdFieldNumber = 4,
    kTimestampNsFieldNumber = 5,
    kEventTypeFieldNumber = 6,
    kForwardEventFieldNumber = 7,
    kForwardFailEventFieldNumber = 8,
    kSettleEventFieldNumber = 9,
    kLinkFailEventFieldNumber = 10,
  };
  // uint64 incoming_channel_id = 1;
  void clear_incoming_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_channel_id() const;
  void set_incoming_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_incoming_channel_id() const;
  void _internal_set_incoming_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 outgoing_channel_id = 2;
  void clear_outgoing_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_channel_id() const;
  void set_outgoing_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_channel_id() const;
  void _internal_set_outgoing_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 incoming_htlc_id = 3;
  void clear_incoming_htlc_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_htlc_id() const;
  void set_incoming_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_incoming_htlc_id() const;
  void _internal_set_incoming_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 outgoing_htlc_id = 4;
  void clear_outgoing_htlc_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_htlc_id() const;
  void set_outgoing_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_htlc_id() const;
  void _internal_set_outgoing_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 timestamp_ns = 5;
  void clear_timestamp_ns();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns() const;
  void set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_timestamp_ns() const;
  void _internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .routerrpc.HtlcEvent.EventType event_type = 6;
  void clear_event_type();
  ::routerrpc::HtlcEvent_EventType event_type() const;
  void set_event_type(::routerrpc::HtlcEvent_EventType value);
  private:
  ::routerrpc::HtlcEvent_EventType _internal_event_type() const;
  void _internal_set_event_type(::routerrpc::HtlcEvent_EventType value);
  public:

  // .routerrpc.ForwardEvent forward_event = 7;
  bool has_forward_event() const;
  private:
  bool _internal_has_forward_event() const;
  public:
  void clear_forward_event();
  const ::routerrpc::ForwardEvent& forward_event() const;
  ::routerrpc::ForwardEvent* release_forward_event();
  ::routerrpc::ForwardEvent* mutable_forward_event();
  void set_allocated_forward_event(::routerrpc::ForwardEvent* forward_event);
  private:
  const ::routerrpc::ForwardEvent& _internal_forward_event() const;
  ::routerrpc::ForwardEvent* _internal_mutable_forward_event();
  public:

  // .routerrpc.ForwardFailEvent forward_fail_event = 8;
  bool has_forward_fail_event() const;
  private:
  bool _internal_has_forward_fail_event() const;
  public:
  void clear_forward_fail_event();
  const ::routerrpc::ForwardFailEvent& forward_fail_event() const;
  ::routerrpc::ForwardFailEvent* release_forward_fail_event();
  ::routerrpc::ForwardFailEvent* mutable_forward_fail_event();
  void set_allocated_forward_fail_event(::routerrpc::ForwardFailEvent* forward_fail_event);
  private:
  const ::routerrpc::ForwardFailEvent& _internal_forward_fail_event() const;
  ::routerrpc::ForwardFailEvent* _internal_mutable_forward_fail_event();
  public:

  // .routerrpc.SettleEvent settle_event = 9;
  bool has_settle_event() const;
  private:
  bool _internal_has_settle_event() const;
  public:
  void clear_settle_event();
  const ::routerrpc::SettleEvent& settle_event() const;
  ::routerrpc::SettleEvent* release_settle_event();
  ::routerrpc::SettleEvent* mutable_settle_event();
  void set_allocated_settle_event(::routerrpc::SettleEvent* settle_event);
  private:
  const ::routerrpc::SettleEvent& _internal_settle_event() const;
  ::routerrpc::SettleEvent* _internal_mutable_settle_event();
  public:

  // .routerrpc.LinkFailEvent link_fail_event = 10;
  bool has_link_fail_event() const;
  private:
  bool _internal_has_link_fail_event() const;
  public:
  void clear_link_fail_event();
  const ::routerrpc::LinkFailEvent& link_fail_event() const;
  ::routerrpc::LinkFailEvent* release_link_fail_event();
  ::routerrpc::LinkFailEvent* mutable_link_fail_event();
  void set_allocated_link_fail_event(::routerrpc::LinkFailEvent* link_fail_event);
  private:
  const ::routerrpc::LinkFailEvent& _internal_link_fail_event() const;
  ::routerrpc::LinkFailEvent* _internal_mutable_link_fail_event();
  public:

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:routerrpc.HtlcEvent)
 private:
  class _Internal;
  void set_has_forward_event();
  void set_has_forward_fail_event();
  void set_has_settle_event();
  void set_has_link_fail_event();

  inline bool has_event() const;
  inline void clear_has_event();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_htlc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_htlc_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_ns_;
  int event_type_;
  union EventUnion {
    EventUnion() {}
    ::routerrpc::ForwardEvent* forward_event_;
    ::routerrpc::ForwardFailEvent* forward_fail_event_;
    ::routerrpc::SettleEvent* settle_event_;
    ::routerrpc::LinkFailEvent* link_fail_event_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class HtlcInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.HtlcInfo) */ {
 public:
  HtlcInfo();
  virtual ~HtlcInfo();

  HtlcInfo(const HtlcInfo& from);
  HtlcInfo(HtlcInfo&& from) noexcept
    : HtlcInfo() {
    *this = ::std::move(from);
  }

  inline HtlcInfo& operator=(const HtlcInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HtlcInfo& operator=(HtlcInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HtlcInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HtlcInfo* internal_default_instance() {
    return reinterpret_cast<const HtlcInfo*>(
               &_HtlcInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HtlcInfo& a, HtlcInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HtlcInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HtlcInfo* New() const final {
    return CreateMaybeMessage<HtlcInfo>(nullptr);
  }

  HtlcInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HtlcInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HtlcInfo& from);
  void MergeFrom(const HtlcInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HtlcInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.HtlcInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncomingTimelockFieldNumber = 1,
    kOutgoingTimelockFieldNumber = 2,
    kIncomingAmtMsatFieldNumber = 3,
    kOutgoingAmtMsatFieldNumber = 4,
  };
  // uint32 incoming_timelock = 1;
  void clear_incoming_timelock();
  ::PROTOBUF_NAMESPACE_ID::uint32 incoming_timelock() const;
  void set_incoming_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_incoming_timelock() const;
  void _internal_set_incoming_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 outgoing_timelock = 2;
  void clear_outgoing_timelock();
  ::PROTOBUF_NAMESPACE_ID::uint32 outgoing_timelock() const;
  void set_outgoing_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_outgoing_timelock() const;
  void _internal_set_outgoing_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 incoming_amt_msat = 3;
  void clear_incoming_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_amt_msat() const;
  void set_incoming_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_incoming_amt_msat() const;
  void _internal_set_incoming_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 outgoing_amt_msat = 4;
  void clear_outgoing_amt_msat();
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_amt_msat() const;
  void set_outgoing_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_outgoing_amt_msat() const;
  void _internal_set_outgoing_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.HtlcInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 incoming_timelock_;
  ::PROTOBUF_NAMESPACE_ID::uint32 outgoing_timelock_;
  ::PROTOBUF_NAMESPACE_ID::uint64 incoming_amt_msat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 outgoing_amt_msat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class ForwardEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.ForwardEvent) */ {
 public:
  ForwardEvent();
  virtual ~ForwardEvent();

  ForwardEvent(const ForwardEvent& from);
  ForwardEvent(ForwardEvent&& from) noexcept
    : ForwardEvent() {
    *this = ::std::move(from);
  }

  inline ForwardEvent& operator=(const ForwardEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardEvent& operator=(ForwardEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardEvent* internal_default_instance() {
    return reinterpret_cast<const ForwardEvent*>(
               &_ForwardEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ForwardEvent& a, ForwardEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardEvent* New() const final {
    return CreateMaybeMessage<ForwardEvent>(nullptr);
  }

  ForwardEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardEvent& from);
  void MergeFrom(const ForwardEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.ForwardEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .routerrpc.HtlcInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::routerrpc::HtlcInfo& info() const;
  ::routerrpc::HtlcInfo* release_info();
  ::routerrpc::HtlcInfo* mutable_info();
  void set_allocated_info(::routerrpc::HtlcInfo* info);
  private:
  const ::routerrpc::HtlcInfo& _internal_info() const;
  ::routerrpc::HtlcInfo* _internal_mutable_info();
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.ForwardEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::routerrpc::HtlcInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class ForwardFailEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.ForwardFailEvent) */ {
 public:
  ForwardFailEvent();
  virtual ~ForwardFailEvent();

  ForwardFailEvent(const ForwardFailEvent& from);
  ForwardFailEvent(ForwardFailEvent&& from) noexcept
    : ForwardFailEvent() {
    *this = ::std::move(from);
  }

  inline ForwardFailEvent& operator=(const ForwardFailEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ForwardFailEvent& operator=(ForwardFailEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ForwardFailEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ForwardFailEvent* internal_default_instance() {
    return reinterpret_cast<const ForwardFailEvent*>(
               &_ForwardFailEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ForwardFailEvent& a, ForwardFailEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ForwardFailEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ForwardFailEvent* New() const final {
    return CreateMaybeMessage<ForwardFailEvent>(nullptr);
  }

  ForwardFailEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ForwardFailEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ForwardFailEvent& from);
  void MergeFrom(const ForwardFailEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ForwardFailEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.ForwardFailEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.ForwardFailEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class SettleEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.SettleEvent) */ {
 public:
  SettleEvent();
  virtual ~SettleEvent();

  SettleEvent(const SettleEvent& from);
  SettleEvent(SettleEvent&& from) noexcept
    : SettleEvent() {
    *this = ::std::move(from);
  }

  inline SettleEvent& operator=(const SettleEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SettleEvent& operator=(SettleEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SettleEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SettleEvent* internal_default_instance() {
    return reinterpret_cast<const SettleEvent*>(
               &_SettleEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SettleEvent& a, SettleEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(SettleEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SettleEvent* New() const final {
    return CreateMaybeMessage<SettleEvent>(nullptr);
  }

  SettleEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SettleEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SettleEvent& from);
  void MergeFrom(const SettleEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SettleEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.SettleEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:routerrpc.SettleEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class LinkFailEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.LinkFailEvent) */ {
 public:
  LinkFailEvent();
  virtual ~LinkFailEvent();

  LinkFailEvent(const LinkFailEvent& from);
  LinkFailEvent(LinkFailEvent&& from) noexcept
    : LinkFailEvent() {
    *this = ::std::move(from);
  }

  inline LinkFailEvent& operator=(const LinkFailEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinkFailEvent& operator=(LinkFailEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinkFailEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinkFailEvent* internal_default_instance() {
    return reinterpret_cast<const LinkFailEvent*>(
               &_LinkFailEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(LinkFailEvent& a, LinkFailEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(LinkFailEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinkFailEvent* New() const final {
    return CreateMaybeMessage<LinkFailEvent>(nullptr);
  }

  LinkFailEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinkFailEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinkFailEvent& from);
  void MergeFrom(const LinkFailEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinkFailEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.LinkFailEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFailureStringFieldNumber = 4,
    kInfoFieldNumber = 1,
    kWireFailureFieldNumber = 2,
    kFailureDetailFieldNumber = 3,
  };
  // string failure_string = 4;
  void clear_failure_string();
  const std::string& failure_string() const;
  void set_failure_string(const std::string& value);
  void set_failure_string(std::string&& value);
  void set_failure_string(const char* value);
  void set_failure_string(const char* value, size_t size);
  std::string* mutable_failure_string();
  std::string* release_failure_string();
  void set_allocated_failure_string(std::string* failure_string);
  private:
  const std::string& _internal_failure_string() const;
  void _internal_set_failure_string(const std::string& value);
  std::string* _internal_mutable_failure_string();
  public:

  // .routerrpc.HtlcInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::routerrpc::HtlcInfo& info() const;
  ::routerrpc::HtlcInfo* release_info();
  ::routerrpc::HtlcInfo* mutable_info();
  void set_allocated_info(::routerrpc::HtlcInfo* info);
  private:
  const ::routerrpc::HtlcInfo& _internal_info() const;
  ::routerrpc::HtlcInfo* _internal_mutable_info();
  public:

  // .lnrpc.Failure.FailureCode wire_failure = 2;
  void clear_wire_failure();
  ::lnrpc::Failure_FailureCode wire_failure() const;
  void set_wire_failure(::lnrpc::Failure_FailureCode value);
  private:
  ::lnrpc::Failure_FailureCode _internal_wire_failure() const;
  void _internal_set_wire_failure(::lnrpc::Failure_FailureCode value);
  public:

  // .routerrpc.FailureDetail failure_detail = 3;
  void clear_failure_detail();
  ::routerrpc::FailureDetail failure_detail() const;
  void set_failure_detail(::routerrpc::FailureDetail value);
  private:
  ::routerrpc::FailureDetail _internal_failure_detail() const;
  void _internal_set_failure_detail(::routerrpc::FailureDetail value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.LinkFailEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failure_string_;
  ::routerrpc::HtlcInfo* info_;
  int wire_failure_;
  int failure_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// -------------------------------------------------------------------

class PaymentStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:routerrpc.PaymentStatus) */ {
 public:
  PaymentStatus();
  virtual ~PaymentStatus();

  PaymentStatus(const PaymentStatus& from);
  PaymentStatus(PaymentStatus&& from) noexcept
    : PaymentStatus() {
    *this = ::std::move(from);
  }

  inline PaymentStatus& operator=(const PaymentStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentStatus& operator=(PaymentStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PaymentStatus* internal_default_instance() {
    return reinterpret_cast<const PaymentStatus*>(
               &_PaymentStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PaymentStatus& a, PaymentStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentStatus* New() const final {
    return CreateMaybeMessage<PaymentStatus>(nullptr);
  }

  PaymentStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentStatus& from);
  void MergeFrom(const PaymentStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "routerrpc.PaymentStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_router_2eproto);
    return ::descriptor_table_router_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHtlcsFieldNumber = 4,
    kPreimageFieldNumber = 2,
    kStateFieldNumber = 1,
  };
  // repeated .lnrpc.HTLCAttempt htlcs = 4;
  int htlcs_size() const;
  private:
  int _internal_htlcs_size() const;
  public:
  void clear_htlcs();
  ::lnrpc::HTLCAttempt* mutable_htlcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >*
      mutable_htlcs();
  private:
  const ::lnrpc::HTLCAttempt& _internal_htlcs(int index) const;
  ::lnrpc::HTLCAttempt* _internal_add_htlcs();
  public:
  const ::lnrpc::HTLCAttempt& htlcs(int index) const;
  ::lnrpc::HTLCAttempt* add_htlcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >&
      htlcs() const;

  // bytes preimage = 2;
  void clear_preimage();
  const std::string& preimage() const;
  void set_preimage(const std::string& value);
  void set_preimage(std::string&& value);
  void set_preimage(const char* value);
  void set_preimage(const void* value, size_t size);
  std::string* mutable_preimage();
  std::string* release_preimage();
  void set_allocated_preimage(std::string* preimage);
  private:
  const std::string& _internal_preimage() const;
  void _internal_set_preimage(const std::string& value);
  std::string* _internal_mutable_preimage();
  public:

  // .routerrpc.PaymentState state = 1;
  void clear_state();
  ::routerrpc::PaymentState state() const;
  void set_state(::routerrpc::PaymentState value);
  private:
  ::routerrpc::PaymentState _internal_state() const;
  void _internal_set_state(::routerrpc::PaymentState value);
  public:

  // @@protoc_insertion_point(class_scope:routerrpc.PaymentStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt > htlcs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimage_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_router_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SendPaymentRequest

// bytes dest = 1;
inline void SendPaymentRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendPaymentRequest::dest() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.dest)
  return _internal_dest();
}
inline void SendPaymentRequest::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.dest)
}
inline std::string* SendPaymentRequest::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendPaymentRequest.dest)
  return _internal_mutable_dest();
}
inline const std::string& SendPaymentRequest::_internal_dest() const {
  return dest_.GetNoArena();
}
inline void SendPaymentRequest::_internal_set_dest(const std::string& value) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendPaymentRequest::set_dest(std::string&& value) {
  
  dest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendPaymentRequest.dest)
}
inline void SendPaymentRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendPaymentRequest.dest)
}
inline void SendPaymentRequest::set_dest(const void* value, size_t size) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendPaymentRequest.dest)
}
inline std::string* SendPaymentRequest::_internal_mutable_dest() {
  
  return dest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendPaymentRequest::release_dest() {
  // @@protoc_insertion_point(field_release:routerrpc.SendPaymentRequest.dest)
  
  return dest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendPaymentRequest::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendPaymentRequest.dest)
}

// int64 amt = 2;
inline void SendPaymentRequest::clear_amt() {
  amt_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::_internal_amt() const {
  return amt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::amt() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.amt)
  return _internal_amt();
}
inline void SendPaymentRequest::_internal_set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_ = value;
}
inline void SendPaymentRequest::set_amt(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.amt)
}

// int64 amt_msat = 12;
inline void SendPaymentRequest::clear_amt_msat() {
  amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.amt_msat)
  return _internal_amt_msat();
}
inline void SendPaymentRequest::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_msat_ = value;
}
inline void SendPaymentRequest::set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.amt_msat)
}

// bytes payment_hash = 3;
inline void SendPaymentRequest::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendPaymentRequest::payment_hash() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.payment_hash)
  return _internal_payment_hash();
}
inline void SendPaymentRequest::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.payment_hash)
}
inline std::string* SendPaymentRequest::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendPaymentRequest.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& SendPaymentRequest::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void SendPaymentRequest::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendPaymentRequest::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendPaymentRequest.payment_hash)
}
inline void SendPaymentRequest::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendPaymentRequest.payment_hash)
}
inline void SendPaymentRequest::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendPaymentRequest.payment_hash)
}
inline std::string* SendPaymentRequest::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendPaymentRequest::release_payment_hash() {
  // @@protoc_insertion_point(field_release:routerrpc.SendPaymentRequest.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendPaymentRequest::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendPaymentRequest.payment_hash)
}

// int32 final_cltv_delta = 4;
inline void SendPaymentRequest::clear_final_cltv_delta() {
  final_cltv_delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::_internal_final_cltv_delta() const {
  return final_cltv_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::final_cltv_delta() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.final_cltv_delta)
  return _internal_final_cltv_delta();
}
inline void SendPaymentRequest::_internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_cltv_delta_ = value;
}
inline void SendPaymentRequest::set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_cltv_delta(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.final_cltv_delta)
}

// string payment_request = 5;
inline void SendPaymentRequest::clear_payment_request() {
  payment_request_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendPaymentRequest::payment_request() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.payment_request)
  return _internal_payment_request();
}
inline void SendPaymentRequest::set_payment_request(const std::string& value) {
  _internal_set_payment_request(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.payment_request)
}
inline std::string* SendPaymentRequest::mutable_payment_request() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendPaymentRequest.payment_request)
  return _internal_mutable_payment_request();
}
inline const std::string& SendPaymentRequest::_internal_payment_request() const {
  return payment_request_.GetNoArena();
}
inline void SendPaymentRequest::_internal_set_payment_request(const std::string& value) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendPaymentRequest::set_payment_request(std::string&& value) {
  
  payment_request_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendPaymentRequest.payment_request)
}
inline void SendPaymentRequest::set_payment_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendPaymentRequest.payment_request)
}
inline void SendPaymentRequest::set_payment_request(const char* value, size_t size) {
  
  payment_request_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendPaymentRequest.payment_request)
}
inline std::string* SendPaymentRequest::_internal_mutable_payment_request() {
  
  return payment_request_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendPaymentRequest::release_payment_request() {
  // @@protoc_insertion_point(field_release:routerrpc.SendPaymentRequest.payment_request)
  
  return payment_request_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendPaymentRequest::set_allocated_payment_request(std::string* payment_request) {
  if (payment_request != nullptr) {
    
  } else {
    
  }
  payment_request_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_request);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendPaymentRequest.payment_request)
}

// int32 timeout_seconds = 6;
inline void SendPaymentRequest::clear_timeout_seconds() {
  timeout_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::_internal_timeout_seconds() const {
  return timeout_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::timeout_seconds() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.timeout_seconds)
  return _internal_timeout_seconds();
}
inline void SendPaymentRequest::_internal_set_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  timeout_seconds_ = value;
}
inline void SendPaymentRequest::set_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.timeout_seconds)
}

// int64 fee_limit_sat = 7;
inline void SendPaymentRequest::clear_fee_limit_sat() {
  fee_limit_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::_internal_fee_limit_sat() const {
  return fee_limit_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::fee_limit_sat() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.fee_limit_sat)
  return _internal_fee_limit_sat();
}
inline void SendPaymentRequest::_internal_set_fee_limit_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_limit_sat_ = value;
}
inline void SendPaymentRequest::set_fee_limit_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_limit_sat(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.fee_limit_sat)
}

// int64 fee_limit_msat = 13;
inline void SendPaymentRequest::clear_fee_limit_msat() {
  fee_limit_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::_internal_fee_limit_msat() const {
  return fee_limit_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SendPaymentRequest::fee_limit_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.fee_limit_msat)
  return _internal_fee_limit_msat();
}
inline void SendPaymentRequest::_internal_set_fee_limit_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_limit_msat_ = value;
}
inline void SendPaymentRequest::set_fee_limit_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee_limit_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.fee_limit_msat)
}

// uint64 outgoing_chan_id = 8 [jstype = JS_STRING];
inline void SendPaymentRequest::clear_outgoing_chan_id() {
  outgoing_chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendPaymentRequest::_internal_outgoing_chan_id() const {
  return outgoing_chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SendPaymentRequest::outgoing_chan_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.outgoing_chan_id)
  return _internal_outgoing_chan_id();
}
inline void SendPaymentRequest::_internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_chan_id_ = value;
}
inline void SendPaymentRequest::set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_chan_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.outgoing_chan_id)
}

// bytes last_hop_pubkey = 14;
inline void SendPaymentRequest::clear_last_hop_pubkey() {
  last_hop_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendPaymentRequest::last_hop_pubkey() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.last_hop_pubkey)
  return _internal_last_hop_pubkey();
}
inline void SendPaymentRequest::set_last_hop_pubkey(const std::string& value) {
  _internal_set_last_hop_pubkey(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.last_hop_pubkey)
}
inline std::string* SendPaymentRequest::mutable_last_hop_pubkey() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendPaymentRequest.last_hop_pubkey)
  return _internal_mutable_last_hop_pubkey();
}
inline const std::string& SendPaymentRequest::_internal_last_hop_pubkey() const {
  return last_hop_pubkey_.GetNoArena();
}
inline void SendPaymentRequest::_internal_set_last_hop_pubkey(const std::string& value) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendPaymentRequest::set_last_hop_pubkey(std::string&& value) {
  
  last_hop_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendPaymentRequest.last_hop_pubkey)
}
inline void SendPaymentRequest::set_last_hop_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendPaymentRequest.last_hop_pubkey)
}
inline void SendPaymentRequest::set_last_hop_pubkey(const void* value, size_t size) {
  
  last_hop_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendPaymentRequest.last_hop_pubkey)
}
inline std::string* SendPaymentRequest::_internal_mutable_last_hop_pubkey() {
  
  return last_hop_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendPaymentRequest::release_last_hop_pubkey() {
  // @@protoc_insertion_point(field_release:routerrpc.SendPaymentRequest.last_hop_pubkey)
  
  return last_hop_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendPaymentRequest::set_allocated_last_hop_pubkey(std::string* last_hop_pubkey) {
  if (last_hop_pubkey != nullptr) {
    
  } else {
    
  }
  last_hop_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_hop_pubkey);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendPaymentRequest.last_hop_pubkey)
}

// int32 cltv_limit = 9;
inline void SendPaymentRequest::clear_cltv_limit() {
  cltv_limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::_internal_cltv_limit() const {
  return cltv_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendPaymentRequest::cltv_limit() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.cltv_limit)
  return _internal_cltv_limit();
}
inline void SendPaymentRequest::_internal_set_cltv_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cltv_limit_ = value;
}
inline void SendPaymentRequest::set_cltv_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cltv_limit(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.cltv_limit)
}

// repeated .lnrpc.RouteHint route_hints = 10;
inline int SendPaymentRequest::_internal_route_hints_size() const {
  return route_hints_.size();
}
inline int SendPaymentRequest::route_hints_size() const {
  return _internal_route_hints_size();
}
inline ::lnrpc::RouteHint* SendPaymentRequest::mutable_route_hints(int index) {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendPaymentRequest.route_hints)
  return route_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >*
SendPaymentRequest::mutable_route_hints() {
  // @@protoc_insertion_point(field_mutable_list:routerrpc.SendPaymentRequest.route_hints)
  return &route_hints_;
}
inline const ::lnrpc::RouteHint& SendPaymentRequest::_internal_route_hints(int index) const {
  return route_hints_.Get(index);
}
inline const ::lnrpc::RouteHint& SendPaymentRequest::route_hints(int index) const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.route_hints)
  return _internal_route_hints(index);
}
inline ::lnrpc::RouteHint* SendPaymentRequest::_internal_add_route_hints() {
  return route_hints_.Add();
}
inline ::lnrpc::RouteHint* SendPaymentRequest::add_route_hints() {
  // @@protoc_insertion_point(field_add:routerrpc.SendPaymentRequest.route_hints)
  return _internal_add_route_hints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::RouteHint >&
SendPaymentRequest::route_hints() const {
  // @@protoc_insertion_point(field_list:routerrpc.SendPaymentRequest.route_hints)
  return route_hints_;
}

// map<uint64, bytes> dest_custom_records = 11;
inline int SendPaymentRequest::_internal_dest_custom_records_size() const {
  return dest_custom_records_.size();
}
inline int SendPaymentRequest::dest_custom_records_size() const {
  return _internal_dest_custom_records_size();
}
inline void SendPaymentRequest::clear_dest_custom_records() {
  dest_custom_records_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
SendPaymentRequest::_internal_dest_custom_records() const {
  return dest_custom_records_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >&
SendPaymentRequest::dest_custom_records() const {
  // @@protoc_insertion_point(field_map:routerrpc.SendPaymentRequest.dest_custom_records)
  return _internal_dest_custom_records();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
SendPaymentRequest::_internal_mutable_dest_custom_records() {
  return dest_custom_records_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint64, std::string >*
SendPaymentRequest::mutable_dest_custom_records() {
  // @@protoc_insertion_point(field_mutable_map:routerrpc.SendPaymentRequest.dest_custom_records)
  return _internal_mutable_dest_custom_records();
}

// bool allow_self_payment = 15;
inline void SendPaymentRequest::clear_allow_self_payment() {
  allow_self_payment_ = false;
}
inline bool SendPaymentRequest::_internal_allow_self_payment() const {
  return allow_self_payment_;
}
inline bool SendPaymentRequest::allow_self_payment() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.allow_self_payment)
  return _internal_allow_self_payment();
}
inline void SendPaymentRequest::_internal_set_allow_self_payment(bool value) {
  
  allow_self_payment_ = value;
}
inline void SendPaymentRequest::set_allow_self_payment(bool value) {
  _internal_set_allow_self_payment(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.allow_self_payment)
}

// repeated .lnrpc.FeatureBit dest_features = 16;
inline int SendPaymentRequest::_internal_dest_features_size() const {
  return dest_features_.size();
}
inline int SendPaymentRequest::dest_features_size() const {
  return _internal_dest_features_size();
}
inline void SendPaymentRequest::clear_dest_features() {
  dest_features_.Clear();
}
inline ::lnrpc::FeatureBit SendPaymentRequest::_internal_dest_features(int index) const {
  return static_cast< ::lnrpc::FeatureBit >(dest_features_.Get(index));
}
inline ::lnrpc::FeatureBit SendPaymentRequest::dest_features(int index) const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.dest_features)
  return _internal_dest_features(index);
}
inline void SendPaymentRequest::set_dest_features(int index, ::lnrpc::FeatureBit value) {
  dest_features_.Set(index, value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.dest_features)
}
inline void SendPaymentRequest::_internal_add_dest_features(::lnrpc::FeatureBit value) {
  dest_features_.Add(value);
}
inline void SendPaymentRequest::add_dest_features(::lnrpc::FeatureBit value) {
  // @@protoc_insertion_point(field_add:routerrpc.SendPaymentRequest.dest_features)
  _internal_add_dest_features(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SendPaymentRequest::dest_features() const {
  // @@protoc_insertion_point(field_list:routerrpc.SendPaymentRequest.dest_features)
  return dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SendPaymentRequest::_internal_mutable_dest_features() {
  return &dest_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SendPaymentRequest::mutable_dest_features() {
  // @@protoc_insertion_point(field_mutable_list:routerrpc.SendPaymentRequest.dest_features)
  return _internal_mutable_dest_features();
}

// uint32 max_parts = 17;
inline void SendPaymentRequest::clear_max_parts() {
  max_parts_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendPaymentRequest::_internal_max_parts() const {
  return max_parts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SendPaymentRequest::max_parts() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.max_parts)
  return _internal_max_parts();
}
inline void SendPaymentRequest::_internal_set_max_parts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_parts_ = value;
}
inline void SendPaymentRequest::set_max_parts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_parts(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.max_parts)
}

// bool no_inflight_updates = 18;
inline void SendPaymentRequest::clear_no_inflight_updates() {
  no_inflight_updates_ = false;
}
inline bool SendPaymentRequest::_internal_no_inflight_updates() const {
  return no_inflight_updates_;
}
inline bool SendPaymentRequest::no_inflight_updates() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendPaymentRequest.no_inflight_updates)
  return _internal_no_inflight_updates();
}
inline void SendPaymentRequest::_internal_set_no_inflight_updates(bool value) {
  
  no_inflight_updates_ = value;
}
inline void SendPaymentRequest::set_no_inflight_updates(bool value) {
  _internal_set_no_inflight_updates(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendPaymentRequest.no_inflight_updates)
}

// -------------------------------------------------------------------

// TrackPaymentRequest

// bytes payment_hash = 1;
inline void TrackPaymentRequest::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TrackPaymentRequest::payment_hash() const {
  // @@protoc_insertion_point(field_get:routerrpc.TrackPaymentRequest.payment_hash)
  return _internal_payment_hash();
}
inline void TrackPaymentRequest::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:routerrpc.TrackPaymentRequest.payment_hash)
}
inline std::string* TrackPaymentRequest::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:routerrpc.TrackPaymentRequest.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& TrackPaymentRequest::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void TrackPaymentRequest::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrackPaymentRequest::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.TrackPaymentRequest.payment_hash)
}
inline void TrackPaymentRequest::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.TrackPaymentRequest.payment_hash)
}
inline void TrackPaymentRequest::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.TrackPaymentRequest.payment_hash)
}
inline std::string* TrackPaymentRequest::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrackPaymentRequest::release_payment_hash() {
  // @@protoc_insertion_point(field_release:routerrpc.TrackPaymentRequest.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrackPaymentRequest::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.TrackPaymentRequest.payment_hash)
}

// bool no_inflight_updates = 2;
inline void TrackPaymentRequest::clear_no_inflight_updates() {
  no_inflight_updates_ = false;
}
inline bool TrackPaymentRequest::_internal_no_inflight_updates() const {
  return no_inflight_updates_;
}
inline bool TrackPaymentRequest::no_inflight_updates() const {
  // @@protoc_insertion_point(field_get:routerrpc.TrackPaymentRequest.no_inflight_updates)
  return _internal_no_inflight_updates();
}
inline void TrackPaymentRequest::_internal_set_no_inflight_updates(bool value) {
  
  no_inflight_updates_ = value;
}
inline void TrackPaymentRequest::set_no_inflight_updates(bool value) {
  _internal_set_no_inflight_updates(value);
  // @@protoc_insertion_point(field_set:routerrpc.TrackPaymentRequest.no_inflight_updates)
}

// -------------------------------------------------------------------

// RouteFeeRequest

// bytes dest = 1;
inline void RouteFeeRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RouteFeeRequest::dest() const {
  // @@protoc_insertion_point(field_get:routerrpc.RouteFeeRequest.dest)
  return _internal_dest();
}
inline void RouteFeeRequest::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:routerrpc.RouteFeeRequest.dest)
}
inline std::string* RouteFeeRequest::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:routerrpc.RouteFeeRequest.dest)
  return _internal_mutable_dest();
}
inline const std::string& RouteFeeRequest::_internal_dest() const {
  return dest_.GetNoArena();
}
inline void RouteFeeRequest::_internal_set_dest(const std::string& value) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RouteFeeRequest::set_dest(std::string&& value) {
  
  dest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.RouteFeeRequest.dest)
}
inline void RouteFeeRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.RouteFeeRequest.dest)
}
inline void RouteFeeRequest::set_dest(const void* value, size_t size) {
  
  dest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.RouteFeeRequest.dest)
}
inline std::string* RouteFeeRequest::_internal_mutable_dest() {
  
  return dest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RouteFeeRequest::release_dest() {
  // @@protoc_insertion_point(field_release:routerrpc.RouteFeeRequest.dest)
  
  return dest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RouteFeeRequest::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    
  } else {
    
  }
  dest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.RouteFeeRequest.dest)
}

// int64 amt_sat = 2;
inline void RouteFeeRequest::clear_amt_sat() {
  amt_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeRequest::_internal_amt_sat() const {
  return amt_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeRequest::amt_sat() const {
  // @@protoc_insertion_point(field_get:routerrpc.RouteFeeRequest.amt_sat)
  return _internal_amt_sat();
}
inline void RouteFeeRequest::_internal_set_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_sat_ = value;
}
inline void RouteFeeRequest::set_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_sat(value);
  // @@protoc_insertion_point(field_set:routerrpc.RouteFeeRequest.amt_sat)
}

// -------------------------------------------------------------------

// RouteFeeResponse

// int64 routing_fee_msat = 1;
inline void RouteFeeResponse::clear_routing_fee_msat() {
  routing_fee_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeResponse::_internal_routing_fee_msat() const {
  return routing_fee_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeResponse::routing_fee_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.RouteFeeResponse.routing_fee_msat)
  return _internal_routing_fee_msat();
}
inline void RouteFeeResponse::_internal_set_routing_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  routing_fee_msat_ = value;
}
inline void RouteFeeResponse::set_routing_fee_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_routing_fee_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.RouteFeeResponse.routing_fee_msat)
}

// int64 time_lock_delay = 2;
inline void RouteFeeResponse::clear_time_lock_delay() {
  time_lock_delay_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeResponse::_internal_time_lock_delay() const {
  return time_lock_delay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RouteFeeResponse::time_lock_delay() const {
  // @@protoc_insertion_point(field_get:routerrpc.RouteFeeResponse.time_lock_delay)
  return _internal_time_lock_delay();
}
inline void RouteFeeResponse::_internal_set_time_lock_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  time_lock_delay_ = value;
}
inline void RouteFeeResponse::set_time_lock_delay(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_lock_delay(value);
  // @@protoc_insertion_point(field_set:routerrpc.RouteFeeResponse.time_lock_delay)
}

// -------------------------------------------------------------------

// SendToRouteRequest

// bytes payment_hash = 1;
inline void SendToRouteRequest::clear_payment_hash() {
  payment_hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToRouteRequest::payment_hash() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendToRouteRequest.payment_hash)
  return _internal_payment_hash();
}
inline void SendToRouteRequest::set_payment_hash(const std::string& value) {
  _internal_set_payment_hash(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendToRouteRequest.payment_hash)
}
inline std::string* SendToRouteRequest::mutable_payment_hash() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendToRouteRequest.payment_hash)
  return _internal_mutable_payment_hash();
}
inline const std::string& SendToRouteRequest::_internal_payment_hash() const {
  return payment_hash_.GetNoArena();
}
inline void SendToRouteRequest::_internal_set_payment_hash(const std::string& value) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToRouteRequest::set_payment_hash(std::string&& value) {
  
  payment_hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendToRouteRequest.payment_hash)
}
inline void SendToRouteRequest::set_payment_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendToRouteRequest.payment_hash)
}
inline void SendToRouteRequest::set_payment_hash(const void* value, size_t size) {
  
  payment_hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendToRouteRequest.payment_hash)
}
inline std::string* SendToRouteRequest::_internal_mutable_payment_hash() {
  
  return payment_hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToRouteRequest::release_payment_hash() {
  // @@protoc_insertion_point(field_release:routerrpc.SendToRouteRequest.payment_hash)
  
  return payment_hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToRouteRequest::set_allocated_payment_hash(std::string* payment_hash) {
  if (payment_hash != nullptr) {
    
  } else {
    
  }
  payment_hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payment_hash);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendToRouteRequest.payment_hash)
}

// .lnrpc.Route route = 2;
inline bool SendToRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool SendToRouteRequest::has_route() const {
  return _internal_has_route();
}
inline const ::lnrpc::Route& SendToRouteRequest::_internal_route() const {
  const ::lnrpc::Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Route*>(
      &::lnrpc::_Route_default_instance_);
}
inline const ::lnrpc::Route& SendToRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendToRouteRequest.route)
  return _internal_route();
}
inline ::lnrpc::Route* SendToRouteRequest::release_route() {
  // @@protoc_insertion_point(field_release:routerrpc.SendToRouteRequest.route)
  
  ::lnrpc::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::lnrpc::Route* SendToRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Route>(GetArenaNoVirtual());
    route_ = p;
  }
  return route_;
}
inline ::lnrpc::Route* SendToRouteRequest::mutable_route() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendToRouteRequest.route)
  return _internal_mutable_route();
}
inline void SendToRouteRequest::set_allocated_route(::lnrpc::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendToRouteRequest.route)
}

// -------------------------------------------------------------------

// SendToRouteResponse

// bytes preimage = 1;
inline void SendToRouteResponse::clear_preimage() {
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendToRouteResponse::preimage() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendToRouteResponse.preimage)
  return _internal_preimage();
}
inline void SendToRouteResponse::set_preimage(const std::string& value) {
  _internal_set_preimage(value);
  // @@protoc_insertion_point(field_set:routerrpc.SendToRouteResponse.preimage)
}
inline std::string* SendToRouteResponse::mutable_preimage() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendToRouteResponse.preimage)
  return _internal_mutable_preimage();
}
inline const std::string& SendToRouteResponse::_internal_preimage() const {
  return preimage_.GetNoArena();
}
inline void SendToRouteResponse::_internal_set_preimage(const std::string& value) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendToRouteResponse::set_preimage(std::string&& value) {
  
  preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.SendToRouteResponse.preimage)
}
inline void SendToRouteResponse::set_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.SendToRouteResponse.preimage)
}
inline void SendToRouteResponse::set_preimage(const void* value, size_t size) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.SendToRouteResponse.preimage)
}
inline std::string* SendToRouteResponse::_internal_mutable_preimage() {
  
  return preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendToRouteResponse::release_preimage() {
  // @@protoc_insertion_point(field_release:routerrpc.SendToRouteResponse.preimage)
  
  return preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendToRouteResponse::set_allocated_preimage(std::string* preimage) {
  if (preimage != nullptr) {
    
  } else {
    
  }
  preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimage);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendToRouteResponse.preimage)
}

// .lnrpc.Failure failure = 2;
inline bool SendToRouteResponse::_internal_has_failure() const {
  return this != internal_default_instance() && failure_ != nullptr;
}
inline bool SendToRouteResponse::has_failure() const {
  return _internal_has_failure();
}
inline const ::lnrpc::Failure& SendToRouteResponse::_internal_failure() const {
  const ::lnrpc::Failure* p = failure_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Failure*>(
      &::lnrpc::_Failure_default_instance_);
}
inline const ::lnrpc::Failure& SendToRouteResponse::failure() const {
  // @@protoc_insertion_point(field_get:routerrpc.SendToRouteResponse.failure)
  return _internal_failure();
}
inline ::lnrpc::Failure* SendToRouteResponse::release_failure() {
  // @@protoc_insertion_point(field_release:routerrpc.SendToRouteResponse.failure)
  
  ::lnrpc::Failure* temp = failure_;
  failure_ = nullptr;
  return temp;
}
inline ::lnrpc::Failure* SendToRouteResponse::_internal_mutable_failure() {
  
  if (failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Failure>(GetArenaNoVirtual());
    failure_ = p;
  }
  return failure_;
}
inline ::lnrpc::Failure* SendToRouteResponse::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:routerrpc.SendToRouteResponse.failure)
  return _internal_mutable_failure();
}
inline void SendToRouteResponse::set_allocated_failure(::lnrpc::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_);
  }
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.SendToRouteResponse.failure)
}

// -------------------------------------------------------------------

// ResetMissionControlRequest

// -------------------------------------------------------------------

// ResetMissionControlResponse

// -------------------------------------------------------------------

// QueryMissionControlRequest

// -------------------------------------------------------------------

// QueryMissionControlResponse

// repeated .routerrpc.PairHistory pairs = 2;
inline int QueryMissionControlResponse::_internal_pairs_size() const {
  return pairs_.size();
}
inline int QueryMissionControlResponse::pairs_size() const {
  return _internal_pairs_size();
}
inline void QueryMissionControlResponse::clear_pairs() {
  pairs_.Clear();
}
inline ::routerrpc::PairHistory* QueryMissionControlResponse::mutable_pairs(int index) {
  // @@protoc_insertion_point(field_mutable:routerrpc.QueryMissionControlResponse.pairs)
  return pairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routerrpc::PairHistory >*
QueryMissionControlResponse::mutable_pairs() {
  // @@protoc_insertion_point(field_mutable_list:routerrpc.QueryMissionControlResponse.pairs)
  return &pairs_;
}
inline const ::routerrpc::PairHistory& QueryMissionControlResponse::_internal_pairs(int index) const {
  return pairs_.Get(index);
}
inline const ::routerrpc::PairHistory& QueryMissionControlResponse::pairs(int index) const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryMissionControlResponse.pairs)
  return _internal_pairs(index);
}
inline ::routerrpc::PairHistory* QueryMissionControlResponse::_internal_add_pairs() {
  return pairs_.Add();
}
inline ::routerrpc::PairHistory* QueryMissionControlResponse::add_pairs() {
  // @@protoc_insertion_point(field_add:routerrpc.QueryMissionControlResponse.pairs)
  return _internal_add_pairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::routerrpc::PairHistory >&
QueryMissionControlResponse::pairs() const {
  // @@protoc_insertion_point(field_list:routerrpc.QueryMissionControlResponse.pairs)
  return pairs_;
}

// -------------------------------------------------------------------

// PairHistory

// bytes node_from = 1;
inline void PairHistory::clear_node_from() {
  node_from_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PairHistory::node_from() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairHistory.node_from)
  return _internal_node_from();
}
inline void PairHistory::set_node_from(const std::string& value) {
  _internal_set_node_from(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairHistory.node_from)
}
inline std::string* PairHistory::mutable_node_from() {
  // @@protoc_insertion_point(field_mutable:routerrpc.PairHistory.node_from)
  return _internal_mutable_node_from();
}
inline const std::string& PairHistory::_internal_node_from() const {
  return node_from_.GetNoArena();
}
inline void PairHistory::_internal_set_node_from(const std::string& value) {
  
  node_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PairHistory::set_node_from(std::string&& value) {
  
  node_from_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.PairHistory.node_from)
}
inline void PairHistory::set_node_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.PairHistory.node_from)
}
inline void PairHistory::set_node_from(const void* value, size_t size) {
  
  node_from_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.PairHistory.node_from)
}
inline std::string* PairHistory::_internal_mutable_node_from() {
  
  return node_from_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PairHistory::release_node_from() {
  // @@protoc_insertion_point(field_release:routerrpc.PairHistory.node_from)
  
  return node_from_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PairHistory::set_allocated_node_from(std::string* node_from) {
  if (node_from != nullptr) {
    
  } else {
    
  }
  node_from_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_from);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.PairHistory.node_from)
}

// bytes node_to = 2;
inline void PairHistory::clear_node_to() {
  node_to_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PairHistory::node_to() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairHistory.node_to)
  return _internal_node_to();
}
inline void PairHistory::set_node_to(const std::string& value) {
  _internal_set_node_to(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairHistory.node_to)
}
inline std::string* PairHistory::mutable_node_to() {
  // @@protoc_insertion_point(field_mutable:routerrpc.PairHistory.node_to)
  return _internal_mutable_node_to();
}
inline const std::string& PairHistory::_internal_node_to() const {
  return node_to_.GetNoArena();
}
inline void PairHistory::_internal_set_node_to(const std::string& value) {
  
  node_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PairHistory::set_node_to(std::string&& value) {
  
  node_to_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.PairHistory.node_to)
}
inline void PairHistory::set_node_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.PairHistory.node_to)
}
inline void PairHistory::set_node_to(const void* value, size_t size) {
  
  node_to_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.PairHistory.node_to)
}
inline std::string* PairHistory::_internal_mutable_node_to() {
  
  return node_to_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PairHistory::release_node_to() {
  // @@protoc_insertion_point(field_release:routerrpc.PairHistory.node_to)
  
  return node_to_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PairHistory::set_allocated_node_to(std::string* node_to) {
  if (node_to != nullptr) {
    
  } else {
    
  }
  node_to_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_to);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.PairHistory.node_to)
}

// .routerrpc.PairData history = 7;
inline bool PairHistory::_internal_has_history() const {
  return this != internal_default_instance() && history_ != nullptr;
}
inline bool PairHistory::has_history() const {
  return _internal_has_history();
}
inline void PairHistory::clear_history() {
  if (GetArenaNoVirtual() == nullptr && history_ != nullptr) {
    delete history_;
  }
  history_ = nullptr;
}
inline const ::routerrpc::PairData& PairHistory::_internal_history() const {
  const ::routerrpc::PairData* p = history_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routerrpc::PairData*>(
      &::routerrpc::_PairData_default_instance_);
}
inline const ::routerrpc::PairData& PairHistory::history() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairHistory.history)
  return _internal_history();
}
inline ::routerrpc::PairData* PairHistory::release_history() {
  // @@protoc_insertion_point(field_release:routerrpc.PairHistory.history)
  
  ::routerrpc::PairData* temp = history_;
  history_ = nullptr;
  return temp;
}
inline ::routerrpc::PairData* PairHistory::_internal_mutable_history() {
  
  if (history_ == nullptr) {
    auto* p = CreateMaybeMessage<::routerrpc::PairData>(GetArenaNoVirtual());
    history_ = p;
  }
  return history_;
}
inline ::routerrpc::PairData* PairHistory::mutable_history() {
  // @@protoc_insertion_point(field_mutable:routerrpc.PairHistory.history)
  return _internal_mutable_history();
}
inline void PairHistory::set_allocated_history(::routerrpc::PairData* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete history_;
  }
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    
  } else {
    
  }
  history_ = history;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.PairHistory.history)
}

// -------------------------------------------------------------------

// PairData

// int64 fail_time = 1;
inline void PairData::clear_fail_time() {
  fail_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_fail_time() const {
  return fail_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::fail_time() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.fail_time)
  return _internal_fail_time();
}
inline void PairData::_internal_set_fail_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fail_time_ = value;
}
inline void PairData::set_fail_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fail_time(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.fail_time)
}

// int64 fail_amt_sat = 2;
inline void PairData::clear_fail_amt_sat() {
  fail_amt_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_fail_amt_sat() const {
  return fail_amt_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::fail_amt_sat() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.fail_amt_sat)
  return _internal_fail_amt_sat();
}
inline void PairData::_internal_set_fail_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fail_amt_sat_ = value;
}
inline void PairData::set_fail_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fail_amt_sat(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.fail_amt_sat)
}

// int64 fail_amt_msat = 4;
inline void PairData::clear_fail_amt_msat() {
  fail_amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_fail_amt_msat() const {
  return fail_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::fail_amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.fail_amt_msat)
  return _internal_fail_amt_msat();
}
inline void PairData::_internal_set_fail_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fail_amt_msat_ = value;
}
inline void PairData::set_fail_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fail_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.fail_amt_msat)
}

// int64 success_time = 5;
inline void PairData::clear_success_time() {
  success_time_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_success_time() const {
  return success_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::success_time() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.success_time)
  return _internal_success_time();
}
inline void PairData::_internal_set_success_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  success_time_ = value;
}
inline void PairData::set_success_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_success_time(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.success_time)
}

// int64 success_amt_sat = 6;
inline void PairData::clear_success_amt_sat() {
  success_amt_sat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_success_amt_sat() const {
  return success_amt_sat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::success_amt_sat() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.success_amt_sat)
  return _internal_success_amt_sat();
}
inline void PairData::_internal_set_success_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  success_amt_sat_ = value;
}
inline void PairData::set_success_amt_sat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_success_amt_sat(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.success_amt_sat)
}

// int64 success_amt_msat = 7;
inline void PairData::clear_success_amt_msat() {
  success_amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::_internal_success_amt_msat() const {
  return success_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PairData::success_amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.PairData.success_amt_msat)
  return _internal_success_amt_msat();
}
inline void PairData::_internal_set_success_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  success_amt_msat_ = value;
}
inline void PairData::set_success_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_success_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.PairData.success_amt_msat)
}

// -------------------------------------------------------------------

// QueryProbabilityRequest

// bytes from_node = 1;
inline void QueryProbabilityRequest::clear_from_node() {
  from_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryProbabilityRequest::from_node() const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryProbabilityRequest.from_node)
  return _internal_from_node();
}
inline void QueryProbabilityRequest::set_from_node(const std::string& value) {
  _internal_set_from_node(value);
  // @@protoc_insertion_point(field_set:routerrpc.QueryProbabilityRequest.from_node)
}
inline std::string* QueryProbabilityRequest::mutable_from_node() {
  // @@protoc_insertion_point(field_mutable:routerrpc.QueryProbabilityRequest.from_node)
  return _internal_mutable_from_node();
}
inline const std::string& QueryProbabilityRequest::_internal_from_node() const {
  return from_node_.GetNoArena();
}
inline void QueryProbabilityRequest::_internal_set_from_node(const std::string& value) {
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryProbabilityRequest::set_from_node(std::string&& value) {
  
  from_node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.QueryProbabilityRequest.from_node)
}
inline void QueryProbabilityRequest::set_from_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.QueryProbabilityRequest.from_node)
}
inline void QueryProbabilityRequest::set_from_node(const void* value, size_t size) {
  
  from_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.QueryProbabilityRequest.from_node)
}
inline std::string* QueryProbabilityRequest::_internal_mutable_from_node() {
  
  return from_node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryProbabilityRequest::release_from_node() {
  // @@protoc_insertion_point(field_release:routerrpc.QueryProbabilityRequest.from_node)
  
  return from_node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryProbabilityRequest::set_allocated_from_node(std::string* from_node) {
  if (from_node != nullptr) {
    
  } else {
    
  }
  from_node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from_node);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.QueryProbabilityRequest.from_node)
}

// bytes to_node = 2;
inline void QueryProbabilityRequest::clear_to_node() {
  to_node_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryProbabilityRequest::to_node() const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryProbabilityRequest.to_node)
  return _internal_to_node();
}
inline void QueryProbabilityRequest::set_to_node(const std::string& value) {
  _internal_set_to_node(value);
  // @@protoc_insertion_point(field_set:routerrpc.QueryProbabilityRequest.to_node)
}
inline std::string* QueryProbabilityRequest::mutable_to_node() {
  // @@protoc_insertion_point(field_mutable:routerrpc.QueryProbabilityRequest.to_node)
  return _internal_mutable_to_node();
}
inline const std::string& QueryProbabilityRequest::_internal_to_node() const {
  return to_node_.GetNoArena();
}
inline void QueryProbabilityRequest::_internal_set_to_node(const std::string& value) {
  
  to_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void QueryProbabilityRequest::set_to_node(std::string&& value) {
  
  to_node_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.QueryProbabilityRequest.to_node)
}
inline void QueryProbabilityRequest::set_to_node(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.QueryProbabilityRequest.to_node)
}
inline void QueryProbabilityRequest::set_to_node(const void* value, size_t size) {
  
  to_node_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.QueryProbabilityRequest.to_node)
}
inline std::string* QueryProbabilityRequest::_internal_mutable_to_node() {
  
  return to_node_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryProbabilityRequest::release_to_node() {
  // @@protoc_insertion_point(field_release:routerrpc.QueryProbabilityRequest.to_node)
  
  return to_node_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryProbabilityRequest::set_allocated_to_node(std::string* to_node) {
  if (to_node != nullptr) {
    
  } else {
    
  }
  to_node_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to_node);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.QueryProbabilityRequest.to_node)
}

// int64 amt_msat = 3;
inline void QueryProbabilityRequest::clear_amt_msat() {
  amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryProbabilityRequest::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryProbabilityRequest::amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryProbabilityRequest.amt_msat)
  return _internal_amt_msat();
}
inline void QueryProbabilityRequest::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_msat_ = value;
}
inline void QueryProbabilityRequest::set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.QueryProbabilityRequest.amt_msat)
}

// -------------------------------------------------------------------

// QueryProbabilityResponse

// double probability = 1;
inline void QueryProbabilityResponse::clear_probability() {
  probability_ = 0;
}
inline double QueryProbabilityResponse::_internal_probability() const {
  return probability_;
}
inline double QueryProbabilityResponse::probability() const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryProbabilityResponse.probability)
  return _internal_probability();
}
inline void QueryProbabilityResponse::_internal_set_probability(double value) {
  
  probability_ = value;
}
inline void QueryProbabilityResponse::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:routerrpc.QueryProbabilityResponse.probability)
}

// .routerrpc.PairData history = 2;
inline bool QueryProbabilityResponse::_internal_has_history() const {
  return this != internal_default_instance() && history_ != nullptr;
}
inline bool QueryProbabilityResponse::has_history() const {
  return _internal_has_history();
}
inline void QueryProbabilityResponse::clear_history() {
  if (GetArenaNoVirtual() == nullptr && history_ != nullptr) {
    delete history_;
  }
  history_ = nullptr;
}
inline const ::routerrpc::PairData& QueryProbabilityResponse::_internal_history() const {
  const ::routerrpc::PairData* p = history_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routerrpc::PairData*>(
      &::routerrpc::_PairData_default_instance_);
}
inline const ::routerrpc::PairData& QueryProbabilityResponse::history() const {
  // @@protoc_insertion_point(field_get:routerrpc.QueryProbabilityResponse.history)
  return _internal_history();
}
inline ::routerrpc::PairData* QueryProbabilityResponse::release_history() {
  // @@protoc_insertion_point(field_release:routerrpc.QueryProbabilityResponse.history)
  
  ::routerrpc::PairData* temp = history_;
  history_ = nullptr;
  return temp;
}
inline ::routerrpc::PairData* QueryProbabilityResponse::_internal_mutable_history() {
  
  if (history_ == nullptr) {
    auto* p = CreateMaybeMessage<::routerrpc::PairData>(GetArenaNoVirtual());
    history_ = p;
  }
  return history_;
}
inline ::routerrpc::PairData* QueryProbabilityResponse::mutable_history() {
  // @@protoc_insertion_point(field_mutable:routerrpc.QueryProbabilityResponse.history)
  return _internal_mutable_history();
}
inline void QueryProbabilityResponse::set_allocated_history(::routerrpc::PairData* history) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete history_;
  }
  if (history) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      history = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, history, submessage_arena);
    }
    
  } else {
    
  }
  history_ = history;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.QueryProbabilityResponse.history)
}

// -------------------------------------------------------------------

// BuildRouteRequest

// int64 amt_msat = 1;
inline void BuildRouteRequest::clear_amt_msat() {
  amt_msat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildRouteRequest::_internal_amt_msat() const {
  return amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BuildRouteRequest::amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.BuildRouteRequest.amt_msat)
  return _internal_amt_msat();
}
inline void BuildRouteRequest::_internal_set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amt_msat_ = value;
}
inline void BuildRouteRequest::set_amt_msat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.BuildRouteRequest.amt_msat)
}

// int32 final_cltv_delta = 2;
inline void BuildRouteRequest::clear_final_cltv_delta() {
  final_cltv_delta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildRouteRequest::_internal_final_cltv_delta() const {
  return final_cltv_delta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BuildRouteRequest::final_cltv_delta() const {
  // @@protoc_insertion_point(field_get:routerrpc.BuildRouteRequest.final_cltv_delta)
  return _internal_final_cltv_delta();
}
inline void BuildRouteRequest::_internal_set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  final_cltv_delta_ = value;
}
inline void BuildRouteRequest::set_final_cltv_delta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_final_cltv_delta(value);
  // @@protoc_insertion_point(field_set:routerrpc.BuildRouteRequest.final_cltv_delta)
}

// uint64 outgoing_chan_id = 3 [jstype = JS_STRING];
inline void BuildRouteRequest::clear_outgoing_chan_id() {
  outgoing_chan_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildRouteRequest::_internal_outgoing_chan_id() const {
  return outgoing_chan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BuildRouteRequest::outgoing_chan_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.BuildRouteRequest.outgoing_chan_id)
  return _internal_outgoing_chan_id();
}
inline void BuildRouteRequest::_internal_set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_chan_id_ = value;
}
inline void BuildRouteRequest::set_outgoing_chan_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_chan_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.BuildRouteRequest.outgoing_chan_id)
}

// repeated bytes hop_pubkeys = 4;
inline int BuildRouteRequest::_internal_hop_pubkeys_size() const {
  return hop_pubkeys_.size();
}
inline int BuildRouteRequest::hop_pubkeys_size() const {
  return _internal_hop_pubkeys_size();
}
inline void BuildRouteRequest::clear_hop_pubkeys() {
  hop_pubkeys_.Clear();
}
inline std::string* BuildRouteRequest::add_hop_pubkeys() {
  // @@protoc_insertion_point(field_add_mutable:routerrpc.BuildRouteRequest.hop_pubkeys)
  return _internal_add_hop_pubkeys();
}
inline const std::string& BuildRouteRequest::_internal_hop_pubkeys(int index) const {
  return hop_pubkeys_.Get(index);
}
inline const std::string& BuildRouteRequest::hop_pubkeys(int index) const {
  // @@protoc_insertion_point(field_get:routerrpc.BuildRouteRequest.hop_pubkeys)
  return _internal_hop_pubkeys(index);
}
inline std::string* BuildRouteRequest::mutable_hop_pubkeys(int index) {
  // @@protoc_insertion_point(field_mutable:routerrpc.BuildRouteRequest.hop_pubkeys)
  return hop_pubkeys_.Mutable(index);
}
inline void BuildRouteRequest::set_hop_pubkeys(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:routerrpc.BuildRouteRequest.hop_pubkeys)
  hop_pubkeys_.Mutable(index)->assign(value);
}
inline void BuildRouteRequest::set_hop_pubkeys(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:routerrpc.BuildRouteRequest.hop_pubkeys)
  hop_pubkeys_.Mutable(index)->assign(std::move(value));
}
inline void BuildRouteRequest::set_hop_pubkeys(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hop_pubkeys_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline void BuildRouteRequest::set_hop_pubkeys(int index, const void* value, size_t size) {
  hop_pubkeys_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline std::string* BuildRouteRequest::_internal_add_hop_pubkeys() {
  return hop_pubkeys_.Add();
}
inline void BuildRouteRequest::add_hop_pubkeys(const std::string& value) {
  hop_pubkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline void BuildRouteRequest::add_hop_pubkeys(std::string&& value) {
  hop_pubkeys_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline void BuildRouteRequest::add_hop_pubkeys(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  hop_pubkeys_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline void BuildRouteRequest::add_hop_pubkeys(const void* value, size_t size) {
  hop_pubkeys_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:routerrpc.BuildRouteRequest.hop_pubkeys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BuildRouteRequest::hop_pubkeys() const {
  // @@protoc_insertion_point(field_list:routerrpc.BuildRouteRequest.hop_pubkeys)
  return hop_pubkeys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BuildRouteRequest::mutable_hop_pubkeys() {
  // @@protoc_insertion_point(field_mutable_list:routerrpc.BuildRouteRequest.hop_pubkeys)
  return &hop_pubkeys_;
}

// -------------------------------------------------------------------

// BuildRouteResponse

// .lnrpc.Route route = 1;
inline bool BuildRouteResponse::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool BuildRouteResponse::has_route() const {
  return _internal_has_route();
}
inline const ::lnrpc::Route& BuildRouteResponse::_internal_route() const {
  const ::lnrpc::Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lnrpc::Route*>(
      &::lnrpc::_Route_default_instance_);
}
inline const ::lnrpc::Route& BuildRouteResponse::route() const {
  // @@protoc_insertion_point(field_get:routerrpc.BuildRouteResponse.route)
  return _internal_route();
}
inline ::lnrpc::Route* BuildRouteResponse::release_route() {
  // @@protoc_insertion_point(field_release:routerrpc.BuildRouteResponse.route)
  
  ::lnrpc::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::lnrpc::Route* BuildRouteResponse::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::lnrpc::Route>(GetArenaNoVirtual());
    route_ = p;
  }
  return route_;
}
inline ::lnrpc::Route* BuildRouteResponse::mutable_route() {
  // @@protoc_insertion_point(field_mutable:routerrpc.BuildRouteResponse.route)
  return _internal_mutable_route();
}
inline void BuildRouteResponse::set_allocated_route(::lnrpc::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.BuildRouteResponse.route)
}

// -------------------------------------------------------------------

// SubscribeHtlcEventsRequest

// -------------------------------------------------------------------

// HtlcEvent

// uint64 incoming_channel_id = 1;
inline void HtlcEvent::clear_incoming_channel_id() {
  incoming_channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::_internal_incoming_channel_id() const {
  return incoming_channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::incoming_channel_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.incoming_channel_id)
  return _internal_incoming_channel_id();
}
inline void HtlcEvent::_internal_set_incoming_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  incoming_channel_id_ = value;
}
inline void HtlcEvent::set_incoming_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_incoming_channel_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.incoming_channel_id)
}

// uint64 outgoing_channel_id = 2;
inline void HtlcEvent::clear_outgoing_channel_id() {
  outgoing_channel_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::_internal_outgoing_channel_id() const {
  return outgoing_channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::outgoing_channel_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.outgoing_channel_id)
  return _internal_outgoing_channel_id();
}
inline void HtlcEvent::_internal_set_outgoing_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_channel_id_ = value;
}
inline void HtlcEvent::set_outgoing_channel_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_channel_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.outgoing_channel_id)
}

// uint64 incoming_htlc_id = 3;
inline void HtlcEvent::clear_incoming_htlc_id() {
  incoming_htlc_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::_internal_incoming_htlc_id() const {
  return incoming_htlc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::incoming_htlc_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.incoming_htlc_id)
  return _internal_incoming_htlc_id();
}
inline void HtlcEvent::_internal_set_incoming_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  incoming_htlc_id_ = value;
}
inline void HtlcEvent::set_incoming_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_incoming_htlc_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.incoming_htlc_id)
}

// uint64 outgoing_htlc_id = 4;
inline void HtlcEvent::clear_outgoing_htlc_id() {
  outgoing_htlc_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::_internal_outgoing_htlc_id() const {
  return outgoing_htlc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::outgoing_htlc_id() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.outgoing_htlc_id)
  return _internal_outgoing_htlc_id();
}
inline void HtlcEvent::_internal_set_outgoing_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_htlc_id_ = value;
}
inline void HtlcEvent::set_outgoing_htlc_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_htlc_id(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.outgoing_htlc_id)
}

// uint64 timestamp_ns = 5;
inline void HtlcEvent::clear_timestamp_ns() {
  timestamp_ns_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::_internal_timestamp_ns() const {
  return timestamp_ns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcEvent::timestamp_ns() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.timestamp_ns)
  return _internal_timestamp_ns();
}
inline void HtlcEvent::_internal_set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ns_ = value;
}
inline void HtlcEvent::set_timestamp_ns(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_timestamp_ns(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.timestamp_ns)
}

// .routerrpc.HtlcEvent.EventType event_type = 6;
inline void HtlcEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::routerrpc::HtlcEvent_EventType HtlcEvent::_internal_event_type() const {
  return static_cast< ::routerrpc::HtlcEvent_EventType >(event_type_);
}
inline ::routerrpc::HtlcEvent_EventType HtlcEvent::event_type() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.event_type)
  return _internal_event_type();
}
inline void HtlcEvent::_internal_set_event_type(::routerrpc::HtlcEvent_EventType value) {
  
  event_type_ = value;
}
inline void HtlcEvent::set_event_type(::routerrpc::HtlcEvent_EventType value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcEvent.event_type)
}

// .routerrpc.ForwardEvent forward_event = 7;
inline bool HtlcEvent::_internal_has_forward_event() const {
  return event_case() == kForwardEvent;
}
inline bool HtlcEvent::has_forward_event() const {
  return _internal_has_forward_event();
}
inline void HtlcEvent::set_has_forward_event() {
  _oneof_case_[0] = kForwardEvent;
}
inline void HtlcEvent::clear_forward_event() {
  if (_internal_has_forward_event()) {
    delete event_.forward_event_;
    clear_has_event();
  }
}
inline ::routerrpc::ForwardEvent* HtlcEvent::release_forward_event() {
  // @@protoc_insertion_point(field_release:routerrpc.HtlcEvent.forward_event)
  if (_internal_has_forward_event()) {
    clear_has_event();
      ::routerrpc::ForwardEvent* temp = event_.forward_event_;
    event_.forward_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::routerrpc::ForwardEvent& HtlcEvent::_internal_forward_event() const {
  return _internal_has_forward_event()
      ? *event_.forward_event_
      : *reinterpret_cast< ::routerrpc::ForwardEvent*>(&::routerrpc::_ForwardEvent_default_instance_);
}
inline const ::routerrpc::ForwardEvent& HtlcEvent::forward_event() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.forward_event)
  return _internal_forward_event();
}
inline ::routerrpc::ForwardEvent* HtlcEvent::_internal_mutable_forward_event() {
  if (!_internal_has_forward_event()) {
    clear_event();
    set_has_forward_event();
    event_.forward_event_ = CreateMaybeMessage< ::routerrpc::ForwardEvent >(
        GetArenaNoVirtual());
  }
  return event_.forward_event_;
}
inline ::routerrpc::ForwardEvent* HtlcEvent::mutable_forward_event() {
  // @@protoc_insertion_point(field_mutable:routerrpc.HtlcEvent.forward_event)
  return _internal_mutable_forward_event();
}

// .routerrpc.ForwardFailEvent forward_fail_event = 8;
inline bool HtlcEvent::_internal_has_forward_fail_event() const {
  return event_case() == kForwardFailEvent;
}
inline bool HtlcEvent::has_forward_fail_event() const {
  return _internal_has_forward_fail_event();
}
inline void HtlcEvent::set_has_forward_fail_event() {
  _oneof_case_[0] = kForwardFailEvent;
}
inline void HtlcEvent::clear_forward_fail_event() {
  if (_internal_has_forward_fail_event()) {
    delete event_.forward_fail_event_;
    clear_has_event();
  }
}
inline ::routerrpc::ForwardFailEvent* HtlcEvent::release_forward_fail_event() {
  // @@protoc_insertion_point(field_release:routerrpc.HtlcEvent.forward_fail_event)
  if (_internal_has_forward_fail_event()) {
    clear_has_event();
      ::routerrpc::ForwardFailEvent* temp = event_.forward_fail_event_;
    event_.forward_fail_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::routerrpc::ForwardFailEvent& HtlcEvent::_internal_forward_fail_event() const {
  return _internal_has_forward_fail_event()
      ? *event_.forward_fail_event_
      : *reinterpret_cast< ::routerrpc::ForwardFailEvent*>(&::routerrpc::_ForwardFailEvent_default_instance_);
}
inline const ::routerrpc::ForwardFailEvent& HtlcEvent::forward_fail_event() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.forward_fail_event)
  return _internal_forward_fail_event();
}
inline ::routerrpc::ForwardFailEvent* HtlcEvent::_internal_mutable_forward_fail_event() {
  if (!_internal_has_forward_fail_event()) {
    clear_event();
    set_has_forward_fail_event();
    event_.forward_fail_event_ = CreateMaybeMessage< ::routerrpc::ForwardFailEvent >(
        GetArenaNoVirtual());
  }
  return event_.forward_fail_event_;
}
inline ::routerrpc::ForwardFailEvent* HtlcEvent::mutable_forward_fail_event() {
  // @@protoc_insertion_point(field_mutable:routerrpc.HtlcEvent.forward_fail_event)
  return _internal_mutable_forward_fail_event();
}

// .routerrpc.SettleEvent settle_event = 9;
inline bool HtlcEvent::_internal_has_settle_event() const {
  return event_case() == kSettleEvent;
}
inline bool HtlcEvent::has_settle_event() const {
  return _internal_has_settle_event();
}
inline void HtlcEvent::set_has_settle_event() {
  _oneof_case_[0] = kSettleEvent;
}
inline void HtlcEvent::clear_settle_event() {
  if (_internal_has_settle_event()) {
    delete event_.settle_event_;
    clear_has_event();
  }
}
inline ::routerrpc::SettleEvent* HtlcEvent::release_settle_event() {
  // @@protoc_insertion_point(field_release:routerrpc.HtlcEvent.settle_event)
  if (_internal_has_settle_event()) {
    clear_has_event();
      ::routerrpc::SettleEvent* temp = event_.settle_event_;
    event_.settle_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::routerrpc::SettleEvent& HtlcEvent::_internal_settle_event() const {
  return _internal_has_settle_event()
      ? *event_.settle_event_
      : *reinterpret_cast< ::routerrpc::SettleEvent*>(&::routerrpc::_SettleEvent_default_instance_);
}
inline const ::routerrpc::SettleEvent& HtlcEvent::settle_event() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.settle_event)
  return _internal_settle_event();
}
inline ::routerrpc::SettleEvent* HtlcEvent::_internal_mutable_settle_event() {
  if (!_internal_has_settle_event()) {
    clear_event();
    set_has_settle_event();
    event_.settle_event_ = CreateMaybeMessage< ::routerrpc::SettleEvent >(
        GetArenaNoVirtual());
  }
  return event_.settle_event_;
}
inline ::routerrpc::SettleEvent* HtlcEvent::mutable_settle_event() {
  // @@protoc_insertion_point(field_mutable:routerrpc.HtlcEvent.settle_event)
  return _internal_mutable_settle_event();
}

// .routerrpc.LinkFailEvent link_fail_event = 10;
inline bool HtlcEvent::_internal_has_link_fail_event() const {
  return event_case() == kLinkFailEvent;
}
inline bool HtlcEvent::has_link_fail_event() const {
  return _internal_has_link_fail_event();
}
inline void HtlcEvent::set_has_link_fail_event() {
  _oneof_case_[0] = kLinkFailEvent;
}
inline void HtlcEvent::clear_link_fail_event() {
  if (_internal_has_link_fail_event()) {
    delete event_.link_fail_event_;
    clear_has_event();
  }
}
inline ::routerrpc::LinkFailEvent* HtlcEvent::release_link_fail_event() {
  // @@protoc_insertion_point(field_release:routerrpc.HtlcEvent.link_fail_event)
  if (_internal_has_link_fail_event()) {
    clear_has_event();
      ::routerrpc::LinkFailEvent* temp = event_.link_fail_event_;
    event_.link_fail_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::routerrpc::LinkFailEvent& HtlcEvent::_internal_link_fail_event() const {
  return _internal_has_link_fail_event()
      ? *event_.link_fail_event_
      : *reinterpret_cast< ::routerrpc::LinkFailEvent*>(&::routerrpc::_LinkFailEvent_default_instance_);
}
inline const ::routerrpc::LinkFailEvent& HtlcEvent::link_fail_event() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcEvent.link_fail_event)
  return _internal_link_fail_event();
}
inline ::routerrpc::LinkFailEvent* HtlcEvent::_internal_mutable_link_fail_event() {
  if (!_internal_has_link_fail_event()) {
    clear_event();
    set_has_link_fail_event();
    event_.link_fail_event_ = CreateMaybeMessage< ::routerrpc::LinkFailEvent >(
        GetArenaNoVirtual());
  }
  return event_.link_fail_event_;
}
inline ::routerrpc::LinkFailEvent* HtlcEvent::mutable_link_fail_event() {
  // @@protoc_insertion_point(field_mutable:routerrpc.HtlcEvent.link_fail_event)
  return _internal_mutable_link_fail_event();
}

inline bool HtlcEvent::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void HtlcEvent::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline HtlcEvent::EventCase HtlcEvent::event_case() const {
  return HtlcEvent::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// HtlcInfo

// uint32 incoming_timelock = 1;
inline void HtlcInfo::clear_incoming_timelock() {
  incoming_timelock_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HtlcInfo::_internal_incoming_timelock() const {
  return incoming_timelock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HtlcInfo::incoming_timelock() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcInfo.incoming_timelock)
  return _internal_incoming_timelock();
}
inline void HtlcInfo::_internal_set_incoming_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  incoming_timelock_ = value;
}
inline void HtlcInfo::set_incoming_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_incoming_timelock(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcInfo.incoming_timelock)
}

// uint32 outgoing_timelock = 2;
inline void HtlcInfo::clear_outgoing_timelock() {
  outgoing_timelock_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HtlcInfo::_internal_outgoing_timelock() const {
  return outgoing_timelock_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HtlcInfo::outgoing_timelock() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcInfo.outgoing_timelock)
  return _internal_outgoing_timelock();
}
inline void HtlcInfo::_internal_set_outgoing_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  outgoing_timelock_ = value;
}
inline void HtlcInfo::set_outgoing_timelock(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_outgoing_timelock(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcInfo.outgoing_timelock)
}

// uint64 incoming_amt_msat = 3;
inline void HtlcInfo::clear_incoming_amt_msat() {
  incoming_amt_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcInfo::_internal_incoming_amt_msat() const {
  return incoming_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcInfo::incoming_amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcInfo.incoming_amt_msat)
  return _internal_incoming_amt_msat();
}
inline void HtlcInfo::_internal_set_incoming_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  incoming_amt_msat_ = value;
}
inline void HtlcInfo::set_incoming_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_incoming_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcInfo.incoming_amt_msat)
}

// uint64 outgoing_amt_msat = 4;
inline void HtlcInfo::clear_outgoing_amt_msat() {
  outgoing_amt_msat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcInfo::_internal_outgoing_amt_msat() const {
  return outgoing_amt_msat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 HtlcInfo::outgoing_amt_msat() const {
  // @@protoc_insertion_point(field_get:routerrpc.HtlcInfo.outgoing_amt_msat)
  return _internal_outgoing_amt_msat();
}
inline void HtlcInfo::_internal_set_outgoing_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  outgoing_amt_msat_ = value;
}
inline void HtlcInfo::set_outgoing_amt_msat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_outgoing_amt_msat(value);
  // @@protoc_insertion_point(field_set:routerrpc.HtlcInfo.outgoing_amt_msat)
}

// -------------------------------------------------------------------

// ForwardEvent

// .routerrpc.HtlcInfo info = 1;
inline bool ForwardEvent::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ForwardEvent::has_info() const {
  return _internal_has_info();
}
inline void ForwardEvent::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::routerrpc::HtlcInfo& ForwardEvent::_internal_info() const {
  const ::routerrpc::HtlcInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routerrpc::HtlcInfo*>(
      &::routerrpc::_HtlcInfo_default_instance_);
}
inline const ::routerrpc::HtlcInfo& ForwardEvent::info() const {
  // @@protoc_insertion_point(field_get:routerrpc.ForwardEvent.info)
  return _internal_info();
}
inline ::routerrpc::HtlcInfo* ForwardEvent::release_info() {
  // @@protoc_insertion_point(field_release:routerrpc.ForwardEvent.info)
  
  ::routerrpc::HtlcInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::routerrpc::HtlcInfo* ForwardEvent::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::routerrpc::HtlcInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::routerrpc::HtlcInfo* ForwardEvent::mutable_info() {
  // @@protoc_insertion_point(field_mutable:routerrpc.ForwardEvent.info)
  return _internal_mutable_info();
}
inline void ForwardEvent::set_allocated_info(::routerrpc::HtlcInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.ForwardEvent.info)
}

// -------------------------------------------------------------------

// ForwardFailEvent

// -------------------------------------------------------------------

// SettleEvent

// -------------------------------------------------------------------

// LinkFailEvent

// .routerrpc.HtlcInfo info = 1;
inline bool LinkFailEvent::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool LinkFailEvent::has_info() const {
  return _internal_has_info();
}
inline void LinkFailEvent::clear_info() {
  if (GetArenaNoVirtual() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::routerrpc::HtlcInfo& LinkFailEvent::_internal_info() const {
  const ::routerrpc::HtlcInfo* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::routerrpc::HtlcInfo*>(
      &::routerrpc::_HtlcInfo_default_instance_);
}
inline const ::routerrpc::HtlcInfo& LinkFailEvent::info() const {
  // @@protoc_insertion_point(field_get:routerrpc.LinkFailEvent.info)
  return _internal_info();
}
inline ::routerrpc::HtlcInfo* LinkFailEvent::release_info() {
  // @@protoc_insertion_point(field_release:routerrpc.LinkFailEvent.info)
  
  ::routerrpc::HtlcInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::routerrpc::HtlcInfo* LinkFailEvent::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::routerrpc::HtlcInfo>(GetArenaNoVirtual());
    info_ = p;
  }
  return info_;
}
inline ::routerrpc::HtlcInfo* LinkFailEvent::mutable_info() {
  // @@protoc_insertion_point(field_mutable:routerrpc.LinkFailEvent.info)
  return _internal_mutable_info();
}
inline void LinkFailEvent::set_allocated_info(::routerrpc::HtlcInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:routerrpc.LinkFailEvent.info)
}

// .lnrpc.Failure.FailureCode wire_failure = 2;
inline void LinkFailEvent::clear_wire_failure() {
  wire_failure_ = 0;
}
inline ::lnrpc::Failure_FailureCode LinkFailEvent::_internal_wire_failure() const {
  return static_cast< ::lnrpc::Failure_FailureCode >(wire_failure_);
}
inline ::lnrpc::Failure_FailureCode LinkFailEvent::wire_failure() const {
  // @@protoc_insertion_point(field_get:routerrpc.LinkFailEvent.wire_failure)
  return _internal_wire_failure();
}
inline void LinkFailEvent::_internal_set_wire_failure(::lnrpc::Failure_FailureCode value) {
  
  wire_failure_ = value;
}
inline void LinkFailEvent::set_wire_failure(::lnrpc::Failure_FailureCode value) {
  _internal_set_wire_failure(value);
  // @@protoc_insertion_point(field_set:routerrpc.LinkFailEvent.wire_failure)
}

// .routerrpc.FailureDetail failure_detail = 3;
inline void LinkFailEvent::clear_failure_detail() {
  failure_detail_ = 0;
}
inline ::routerrpc::FailureDetail LinkFailEvent::_internal_failure_detail() const {
  return static_cast< ::routerrpc::FailureDetail >(failure_detail_);
}
inline ::routerrpc::FailureDetail LinkFailEvent::failure_detail() const {
  // @@protoc_insertion_point(field_get:routerrpc.LinkFailEvent.failure_detail)
  return _internal_failure_detail();
}
inline void LinkFailEvent::_internal_set_failure_detail(::routerrpc::FailureDetail value) {
  
  failure_detail_ = value;
}
inline void LinkFailEvent::set_failure_detail(::routerrpc::FailureDetail value) {
  _internal_set_failure_detail(value);
  // @@protoc_insertion_point(field_set:routerrpc.LinkFailEvent.failure_detail)
}

// string failure_string = 4;
inline void LinkFailEvent::clear_failure_string() {
  failure_string_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LinkFailEvent::failure_string() const {
  // @@protoc_insertion_point(field_get:routerrpc.LinkFailEvent.failure_string)
  return _internal_failure_string();
}
inline void LinkFailEvent::set_failure_string(const std::string& value) {
  _internal_set_failure_string(value);
  // @@protoc_insertion_point(field_set:routerrpc.LinkFailEvent.failure_string)
}
inline std::string* LinkFailEvent::mutable_failure_string() {
  // @@protoc_insertion_point(field_mutable:routerrpc.LinkFailEvent.failure_string)
  return _internal_mutable_failure_string();
}
inline const std::string& LinkFailEvent::_internal_failure_string() const {
  return failure_string_.GetNoArena();
}
inline void LinkFailEvent::_internal_set_failure_string(const std::string& value) {
  
  failure_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinkFailEvent::set_failure_string(std::string&& value) {
  
  failure_string_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.LinkFailEvent.failure_string)
}
inline void LinkFailEvent::set_failure_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failure_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.LinkFailEvent.failure_string)
}
inline void LinkFailEvent::set_failure_string(const char* value, size_t size) {
  
  failure_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.LinkFailEvent.failure_string)
}
inline std::string* LinkFailEvent::_internal_mutable_failure_string() {
  
  return failure_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinkFailEvent::release_failure_string() {
  // @@protoc_insertion_point(field_release:routerrpc.LinkFailEvent.failure_string)
  
  return failure_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinkFailEvent::set_allocated_failure_string(std::string* failure_string) {
  if (failure_string != nullptr) {
    
  } else {
    
  }
  failure_string_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failure_string);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.LinkFailEvent.failure_string)
}

// -------------------------------------------------------------------

// PaymentStatus

// .routerrpc.PaymentState state = 1;
inline void PaymentStatus::clear_state() {
  state_ = 0;
}
inline ::routerrpc::PaymentState PaymentStatus::_internal_state() const {
  return static_cast< ::routerrpc::PaymentState >(state_);
}
inline ::routerrpc::PaymentState PaymentStatus::state() const {
  // @@protoc_insertion_point(field_get:routerrpc.PaymentStatus.state)
  return _internal_state();
}
inline void PaymentStatus::_internal_set_state(::routerrpc::PaymentState value) {
  
  state_ = value;
}
inline void PaymentStatus::set_state(::routerrpc::PaymentState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:routerrpc.PaymentStatus.state)
}

// bytes preimage = 2;
inline void PaymentStatus::clear_preimage() {
  preimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PaymentStatus::preimage() const {
  // @@protoc_insertion_point(field_get:routerrpc.PaymentStatus.preimage)
  return _internal_preimage();
}
inline void PaymentStatus::set_preimage(const std::string& value) {
  _internal_set_preimage(value);
  // @@protoc_insertion_point(field_set:routerrpc.PaymentStatus.preimage)
}
inline std::string* PaymentStatus::mutable_preimage() {
  // @@protoc_insertion_point(field_mutable:routerrpc.PaymentStatus.preimage)
  return _internal_mutable_preimage();
}
inline const std::string& PaymentStatus::_internal_preimage() const {
  return preimage_.GetNoArena();
}
inline void PaymentStatus::_internal_set_preimage(const std::string& value) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PaymentStatus::set_preimage(std::string&& value) {
  
  preimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:routerrpc.PaymentStatus.preimage)
}
inline void PaymentStatus::set_preimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:routerrpc.PaymentStatus.preimage)
}
inline void PaymentStatus::set_preimage(const void* value, size_t size) {
  
  preimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:routerrpc.PaymentStatus.preimage)
}
inline std::string* PaymentStatus::_internal_mutable_preimage() {
  
  return preimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PaymentStatus::release_preimage() {
  // @@protoc_insertion_point(field_release:routerrpc.PaymentStatus.preimage)
  
  return preimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PaymentStatus::set_allocated_preimage(std::string* preimage) {
  if (preimage != nullptr) {
    
  } else {
    
  }
  preimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimage);
  // @@protoc_insertion_point(field_set_allocated:routerrpc.PaymentStatus.preimage)
}

// repeated .lnrpc.HTLCAttempt htlcs = 4;
inline int PaymentStatus::_internal_htlcs_size() const {
  return htlcs_.size();
}
inline int PaymentStatus::htlcs_size() const {
  return _internal_htlcs_size();
}
inline ::lnrpc::HTLCAttempt* PaymentStatus::mutable_htlcs(int index) {
  // @@protoc_insertion_point(field_mutable:routerrpc.PaymentStatus.htlcs)
  return htlcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >*
PaymentStatus::mutable_htlcs() {
  // @@protoc_insertion_point(field_mutable_list:routerrpc.PaymentStatus.htlcs)
  return &htlcs_;
}
inline const ::lnrpc::HTLCAttempt& PaymentStatus::_internal_htlcs(int index) const {
  return htlcs_.Get(index);
}
inline const ::lnrpc::HTLCAttempt& PaymentStatus::htlcs(int index) const {
  // @@protoc_insertion_point(field_get:routerrpc.PaymentStatus.htlcs)
  return _internal_htlcs(index);
}
inline ::lnrpc::HTLCAttempt* PaymentStatus::_internal_add_htlcs() {
  return htlcs_.Add();
}
inline ::lnrpc::HTLCAttempt* PaymentStatus::add_htlcs() {
  // @@protoc_insertion_point(field_add:routerrpc.PaymentStatus.htlcs)
  return _internal_add_htlcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lnrpc::HTLCAttempt >&
PaymentStatus::htlcs() const {
  // @@protoc_insertion_point(field_list:routerrpc.PaymentStatus.htlcs)
  return htlcs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace routerrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::routerrpc::HtlcEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::routerrpc::HtlcEvent_EventType>() {
  return ::routerrpc::HtlcEvent_EventType_descriptor();
}
template <> struct is_proto_enum< ::routerrpc::FailureDetail> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::routerrpc::FailureDetail>() {
  return ::routerrpc::FailureDetail_descriptor();
}
template <> struct is_proto_enum< ::routerrpc::PaymentState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::routerrpc::PaymentState>() {
  return ::routerrpc::PaymentState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_router_2eproto
