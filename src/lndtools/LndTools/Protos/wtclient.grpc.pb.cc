// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: wtclient.proto

#include "wtclient.pb.h"
#include "wtclient.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace wtclientrpc {

static const char* WatchtowerClient_method_names[] = {
  "/wtclientrpc.WatchtowerClient/AddTower",
  "/wtclientrpc.WatchtowerClient/RemoveTower",
  "/wtclientrpc.WatchtowerClient/ListTowers",
  "/wtclientrpc.WatchtowerClient/GetTowerInfo",
  "/wtclientrpc.WatchtowerClient/Stats",
  "/wtclientrpc.WatchtowerClient/Policy",
};

std::unique_ptr< WatchtowerClient::Stub> WatchtowerClient::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< WatchtowerClient::Stub> stub(new WatchtowerClient::Stub(channel));
  return stub;
}

WatchtowerClient::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AddTower_(WatchtowerClient_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RemoveTower_(WatchtowerClient_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTowers_(WatchtowerClient_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTowerInfo_(WatchtowerClient_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Stats_(WatchtowerClient_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Policy_(WatchtowerClient_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status WatchtowerClient::Stub::AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::wtclientrpc::AddTowerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddTower_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTower_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddTower_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::AddTower(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTower_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::AddTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::AddTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddTower_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>* WatchtowerClient::Stub::AsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::AddTowerResponse>::Create(channel_.get(), cq, rpcmethod_AddTower_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::AddTowerResponse>* WatchtowerClient::Stub::PrepareAsyncAddTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::AddTowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::AddTowerResponse>::Create(channel_.get(), cq, rpcmethod_AddTower_, context, request, false);
}

::grpc::Status WatchtowerClient::Stub::RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::wtclientrpc::RemoveTowerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RemoveTower_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveTower_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RemoveTower_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::RemoveTower(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveTower_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::RemoveTower(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::RemoveTowerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RemoveTower_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>* WatchtowerClient::Stub::AsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::RemoveTowerResponse>::Create(channel_.get(), cq, rpcmethod_RemoveTower_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::RemoveTowerResponse>* WatchtowerClient::Stub::PrepareAsyncRemoveTowerRaw(::grpc::ClientContext* context, const ::wtclientrpc::RemoveTowerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::RemoveTowerResponse>::Create(channel_.get(), cq, rpcmethod_RemoveTower_, context, request, false);
}

::grpc::Status WatchtowerClient::Stub::ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::wtclientrpc::ListTowersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTowers_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTowers_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTowers_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::ListTowers(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTowers_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::ListTowers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::ListTowersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListTowers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>* WatchtowerClient::Stub::AsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::ListTowersResponse>::Create(channel_.get(), cq, rpcmethod_ListTowers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::ListTowersResponse>* WatchtowerClient::Stub::PrepareAsyncListTowersRaw(::grpc::ClientContext* context, const ::wtclientrpc::ListTowersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::ListTowersResponse>::Create(channel_.get(), cq, rpcmethod_ListTowers_, context, request, false);
}

::grpc::Status WatchtowerClient::Stub::GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::wtclientrpc::Tower* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTowerInfo_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTowerInfo_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTowerInfo_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::GetTowerInfo(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTowerInfo_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::GetTowerInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::Tower* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTowerInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>* WatchtowerClient::Stub::AsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::Tower>::Create(channel_.get(), cq, rpcmethod_GetTowerInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::Tower>* WatchtowerClient::Stub::PrepareAsyncGetTowerInfoRaw(::grpc::ClientContext* context, const ::wtclientrpc::GetTowerInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::Tower>::Create(channel_.get(), cq, rpcmethod_GetTowerInfo_, context, request, false);
}

::grpc::Status WatchtowerClient::Stub::Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::wtclientrpc::StatsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Stats_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::Stats(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::StatsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Stats_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>* WatchtowerClient::Stub::AsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::StatsResponse>::Create(channel_.get(), cq, rpcmethod_Stats_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::StatsResponse>* WatchtowerClient::Stub::PrepareAsyncStatsRaw(::grpc::ClientContext* context, const ::wtclientrpc::StatsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::StatsResponse>::Create(channel_.get(), cq, rpcmethod_Stats_, context, request, false);
}

::grpc::Status WatchtowerClient::Stub::Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::wtclientrpc::PolicyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Policy_, context, request, response);
}

void WatchtowerClient::Stub::experimental_async::Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Policy_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Policy_, context, request, response, std::move(f));
}

void WatchtowerClient::Stub::experimental_async::Policy(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Policy_, context, request, response, reactor);
}

void WatchtowerClient::Stub::experimental_async::Policy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::wtclientrpc::PolicyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Policy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>* WatchtowerClient::Stub::AsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::PolicyResponse>::Create(channel_.get(), cq, rpcmethod_Policy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::wtclientrpc::PolicyResponse>* WatchtowerClient::Stub::PrepareAsyncPolicyRaw(::grpc::ClientContext* context, const ::wtclientrpc::PolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::wtclientrpc::PolicyResponse>::Create(channel_.get(), cq, rpcmethod_Policy_, context, request, false);
}

WatchtowerClient::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::AddTowerRequest, ::wtclientrpc::AddTowerResponse>(
          std::mem_fn(&WatchtowerClient::Service::AddTower), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::RemoveTowerRequest, ::wtclientrpc::RemoveTowerResponse>(
          std::mem_fn(&WatchtowerClient::Service::RemoveTower), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::ListTowersRequest, ::wtclientrpc::ListTowersResponse>(
          std::mem_fn(&WatchtowerClient::Service::ListTowers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::GetTowerInfoRequest, ::wtclientrpc::Tower>(
          std::mem_fn(&WatchtowerClient::Service::GetTowerInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::StatsRequest, ::wtclientrpc::StatsResponse>(
          std::mem_fn(&WatchtowerClient::Service::Stats), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      WatchtowerClient_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< WatchtowerClient::Service, ::wtclientrpc::PolicyRequest, ::wtclientrpc::PolicyResponse>(
          std::mem_fn(&WatchtowerClient::Service::Policy), this)));
}

WatchtowerClient::Service::~Service() {
}

::grpc::Status WatchtowerClient::Service::AddTower(::grpc::ServerContext* context, const ::wtclientrpc::AddTowerRequest* request, ::wtclientrpc::AddTowerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchtowerClient::Service::RemoveTower(::grpc::ServerContext* context, const ::wtclientrpc::RemoveTowerRequest* request, ::wtclientrpc::RemoveTowerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchtowerClient::Service::ListTowers(::grpc::ServerContext* context, const ::wtclientrpc::ListTowersRequest* request, ::wtclientrpc::ListTowersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchtowerClient::Service::GetTowerInfo(::grpc::ServerContext* context, const ::wtclientrpc::GetTowerInfoRequest* request, ::wtclientrpc::Tower* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchtowerClient::Service::Stats(::grpc::ServerContext* context, const ::wtclientrpc::StatsRequest* request, ::wtclientrpc::StatsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status WatchtowerClient::Service::Policy(::grpc::ServerContext* context, const ::wtclientrpc::PolicyRequest* request, ::wtclientrpc::PolicyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace wtclientrpc

