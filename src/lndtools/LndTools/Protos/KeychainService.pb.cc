// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KeychainService.proto

#include "KeychainService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_KeychainService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyLocator_KeychainService_2eproto;
namespace lightwalletrpc {
class KeyLocatorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyLocator> _instance;
} _KeyLocator_default_instance_;
class KeyDescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyDescriptor> _instance;
} _KeyDescriptor_default_instance_;
class DeriveNextKeyReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeriveNextKeyReq> _instance;
} _DeriveNextKeyReq_default_instance_;
class IsOurAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsOurAddressResponse> _instance;
} _IsOurAddressResponse_default_instance_;
}  // namespace lightwalletrpc
static void InitDefaultsscc_info_DeriveNextKeyReq_KeychainService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_DeriveNextKeyReq_default_instance_;
    new (ptr) ::lightwalletrpc::DeriveNextKeyReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::DeriveNextKeyReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeriveNextKeyReq_KeychainService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeriveNextKeyReq_KeychainService_2eproto}, {}};

static void InitDefaultsscc_info_IsOurAddressResponse_KeychainService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_IsOurAddressResponse_default_instance_;
    new (ptr) ::lightwalletrpc::IsOurAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::IsOurAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsOurAddressResponse_KeychainService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsOurAddressResponse_KeychainService_2eproto}, {}};

static void InitDefaultsscc_info_KeyDescriptor_KeychainService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_KeyDescriptor_default_instance_;
    new (ptr) ::lightwalletrpc::KeyDescriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::KeyDescriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyDescriptor_KeychainService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyDescriptor_KeychainService_2eproto}, {
      &scc_info_KeyLocator_KeychainService_2eproto.base,}};

static void InitDefaultsscc_info_KeyLocator_KeychainService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_KeyLocator_default_instance_;
    new (ptr) ::lightwalletrpc::KeyLocator();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::KeyLocator::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyLocator_KeychainService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyLocator_KeychainService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_KeychainService_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_KeychainService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_KeychainService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_KeychainService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyLocator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyLocator, keyfamily_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyLocator, keyindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyDescriptor, pubkey_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::KeyDescriptor, locator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::DeriveNextKeyReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::DeriveNextKeyReq, keyfamily_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::IsOurAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::IsOurAddressResponse, isour_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lightwalletrpc::KeyLocator)},
  { 7, -1, sizeof(::lightwalletrpc::KeyDescriptor)},
  { 14, -1, sizeof(::lightwalletrpc::DeriveNextKeyReq)},
  { 20, -1, sizeof(::lightwalletrpc::IsOurAddressResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_KeyLocator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_KeyDescriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_DeriveNextKeyReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_IsOurAddressResponse_default_instance_),
};

const char descriptor_table_protodef_KeychainService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025KeychainService.proto\022\016lightwalletrpc\032"
  "\014Common.proto\"1\n\nKeyLocator\022\021\n\tkeyFamily"
  "\030\001 \001(\r\022\020\n\010keyIndex\030\002 \001(\r\"L\n\rKeyDescripto"
  "r\022\016\n\006pubKey\030\001 \001(\t\022+\n\007locator\030\002 \001(\0132\032.lig"
  "htwalletrpc.KeyLocator\"%\n\020DeriveNextKeyR"
  "eq\022\021\n\tkeyFamily\030\001 \001(\r\"%\n\024IsOurAddressRes"
  "ponse\022\r\n\005isOur\030\001 \001(\0102\311\002\n\017KeychainService"
  "\022P\n\rDeriveNextKey\022 .lightwalletrpc.Deriv"
  "eNextKeyReq\032\035.lightwalletrpc.KeyDescript"
  "or\022F\n\tDeriveKey\022\032.lightwalletrpc.KeyLoca"
  "tor\032\035.lightwalletrpc.KeyDescriptor\022J\n\rDe"
  "rivePrivKey\022\035.lightwalletrpc.KeyDescript"
  "or\032\032.lightwalletrpc.HexEncoded\022P\n\014IsOurA"
  "ddress\022\032.lightwalletrpc.HexEncoded\032$.lig"
  "htwalletrpc.IsOurAddressResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_KeychainService_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_KeychainService_2eproto_sccs[4] = {
  &scc_info_DeriveNextKeyReq_KeychainService_2eproto.base,
  &scc_info_IsOurAddressResponse_KeychainService_2eproto.base,
  &scc_info_KeyDescriptor_KeychainService_2eproto.base,
  &scc_info_KeyLocator_KeychainService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_KeychainService_2eproto_once;
static bool descriptor_table_KeychainService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_KeychainService_2eproto = {
  &descriptor_table_KeychainService_2eproto_initialized, descriptor_table_protodef_KeychainService_2eproto, "KeychainService.proto", 600,
  &descriptor_table_KeychainService_2eproto_once, descriptor_table_KeychainService_2eproto_sccs, descriptor_table_KeychainService_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_KeychainService_2eproto::offsets,
  file_level_metadata_KeychainService_2eproto, 4, file_level_enum_descriptors_KeychainService_2eproto, file_level_service_descriptors_KeychainService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_KeychainService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_KeychainService_2eproto), true);
namespace lightwalletrpc {

// ===================================================================

void KeyLocator::InitAsDefaultInstance() {
}
class KeyLocator::_Internal {
 public:
};

KeyLocator::KeyLocator()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.KeyLocator)
}
KeyLocator::KeyLocator(const KeyLocator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&keyfamily_, &from.keyfamily_,
    static_cast<size_t>(reinterpret_cast<char*>(&keyindex_) -
    reinterpret_cast<char*>(&keyfamily_)) + sizeof(keyindex_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.KeyLocator)
}

void KeyLocator::SharedCtor() {
  ::memset(&keyfamily_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyindex_) -
      reinterpret_cast<char*>(&keyfamily_)) + sizeof(keyindex_));
}

KeyLocator::~KeyLocator() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.KeyLocator)
  SharedDtor();
}

void KeyLocator::SharedDtor() {
}

void KeyLocator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyLocator& KeyLocator::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyLocator_KeychainService_2eproto.base);
  return *internal_default_instance();
}


void KeyLocator::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.KeyLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&keyfamily_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&keyindex_) -
      reinterpret_cast<char*>(&keyfamily_)) + sizeof(keyindex_));
  _internal_metadata_.Clear();
}

const char* KeyLocator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyFamily = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyfamily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 keyIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          keyindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyLocator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.KeyLocator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyFamily = 1;
  if (this->keyfamily() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyfamily(), target);
  }

  // uint32 keyIndex = 2;
  if (this->keyindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_keyindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.KeyLocator)
  return target;
}

size_t KeyLocator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.KeyLocator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keyFamily = 1;
  if (this->keyfamily() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyfamily());
  }

  // uint32 keyIndex = 2;
  if (this->keyindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyLocator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.KeyLocator)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyLocator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyLocator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.KeyLocator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.KeyLocator)
    MergeFrom(*source);
  }
}

void KeyLocator::MergeFrom(const KeyLocator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.KeyLocator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keyfamily() != 0) {
    _internal_set_keyfamily(from._internal_keyfamily());
  }
  if (from.keyindex() != 0) {
    _internal_set_keyindex(from._internal_keyindex());
  }
}

void KeyLocator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.KeyLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyLocator::CopyFrom(const KeyLocator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.KeyLocator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyLocator::IsInitialized() const {
  return true;
}

void KeyLocator::InternalSwap(KeyLocator* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(keyfamily_, other->keyfamily_);
  swap(keyindex_, other->keyindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyLocator::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyDescriptor::InitAsDefaultInstance() {
  ::lightwalletrpc::_KeyDescriptor_default_instance_._instance.get_mutable()->locator_ = const_cast< ::lightwalletrpc::KeyLocator*>(
      ::lightwalletrpc::KeyLocator::internal_default_instance());
}
class KeyDescriptor::_Internal {
 public:
  static const ::lightwalletrpc::KeyLocator& locator(const KeyDescriptor* msg);
};

const ::lightwalletrpc::KeyLocator&
KeyDescriptor::_Internal::locator(const KeyDescriptor* msg) {
  return *msg->locator_;
}
KeyDescriptor::KeyDescriptor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.KeyDescriptor)
}
KeyDescriptor::KeyDescriptor(const KeyDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from._internal_has_locator()) {
    locator_ = new ::lightwalletrpc::KeyLocator(*from.locator_);
  } else {
    locator_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.KeyDescriptor)
}

void KeyDescriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyDescriptor_KeychainService_2eproto.base);
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locator_ = nullptr;
}

KeyDescriptor::~KeyDescriptor() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.KeyDescriptor)
  SharedDtor();
}

void KeyDescriptor::SharedDtor() {
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete locator_;
}

void KeyDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyDescriptor& KeyDescriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyDescriptor_KeychainService_2eproto.base);
  return *internal_default_instance();
}


void KeyDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.KeyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && locator_ != nullptr) {
    delete locator_;
  }
  locator_ = nullptr;
  _internal_metadata_.Clear();
}

const char* KeyDescriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string pubKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.KeyDescriptor.pubKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .lightwalletrpc.KeyLocator locator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_locator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDescriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.KeyDescriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string pubKey = 1;
  if (this->pubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pubkey().data(), static_cast<int>(this->_internal_pubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.KeyDescriptor.pubKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pubkey(), target);
  }

  // .lightwalletrpc.KeyLocator locator = 2;
  if (this->has_locator()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::locator(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.KeyDescriptor)
  return target;
}

size_t KeyDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.KeyDescriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pubKey = 1;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pubkey());
  }

  // .lightwalletrpc.KeyLocator locator = 2;
  if (this->has_locator()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *locator_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDescriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.KeyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDescriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDescriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.KeyDescriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.KeyDescriptor)
    MergeFrom(*source);
  }
}

void KeyDescriptor::MergeFrom(const KeyDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.KeyDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.has_locator()) {
    _internal_mutable_locator()->::lightwalletrpc::KeyLocator::MergeFrom(from._internal_locator());
  }
}

void KeyDescriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.KeyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDescriptor::CopyFrom(const KeyDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.KeyDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDescriptor::IsInitialized() const {
  return true;
}

void KeyDescriptor::InternalSwap(KeyDescriptor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(locator_, other->locator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDescriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeriveNextKeyReq::InitAsDefaultInstance() {
}
class DeriveNextKeyReq::_Internal {
 public:
};

DeriveNextKeyReq::DeriveNextKeyReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.DeriveNextKeyReq)
}
DeriveNextKeyReq::DeriveNextKeyReq(const DeriveNextKeyReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyfamily_ = from.keyfamily_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.DeriveNextKeyReq)
}

void DeriveNextKeyReq::SharedCtor() {
  keyfamily_ = 0u;
}

DeriveNextKeyReq::~DeriveNextKeyReq() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.DeriveNextKeyReq)
  SharedDtor();
}

void DeriveNextKeyReq::SharedDtor() {
}

void DeriveNextKeyReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeriveNextKeyReq& DeriveNextKeyReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeriveNextKeyReq_KeychainService_2eproto.base);
  return *internal_default_instance();
}


void DeriveNextKeyReq::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.DeriveNextKeyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keyfamily_ = 0u;
  _internal_metadata_.Clear();
}

const char* DeriveNextKeyReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 keyFamily = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          keyfamily_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeriveNextKeyReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.DeriveNextKeyReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 keyFamily = 1;
  if (this->keyfamily() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_keyfamily(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.DeriveNextKeyReq)
  return target;
}

size_t DeriveNextKeyReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.DeriveNextKeyReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 keyFamily = 1;
  if (this->keyfamily() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_keyfamily());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeriveNextKeyReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.DeriveNextKeyReq)
  GOOGLE_DCHECK_NE(&from, this);
  const DeriveNextKeyReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeriveNextKeyReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.DeriveNextKeyReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.DeriveNextKeyReq)
    MergeFrom(*source);
  }
}

void DeriveNextKeyReq::MergeFrom(const DeriveNextKeyReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.DeriveNextKeyReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keyfamily() != 0) {
    _internal_set_keyfamily(from._internal_keyfamily());
  }
}

void DeriveNextKeyReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.DeriveNextKeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeriveNextKeyReq::CopyFrom(const DeriveNextKeyReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.DeriveNextKeyReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeriveNextKeyReq::IsInitialized() const {
  return true;
}

void DeriveNextKeyReq::InternalSwap(DeriveNextKeyReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(keyfamily_, other->keyfamily_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeriveNextKeyReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsOurAddressResponse::InitAsDefaultInstance() {
}
class IsOurAddressResponse::_Internal {
 public:
};

IsOurAddressResponse::IsOurAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.IsOurAddressResponse)
}
IsOurAddressResponse::IsOurAddressResponse(const IsOurAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isour_ = from.isour_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.IsOurAddressResponse)
}

void IsOurAddressResponse::SharedCtor() {
  isour_ = false;
}

IsOurAddressResponse::~IsOurAddressResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.IsOurAddressResponse)
  SharedDtor();
}

void IsOurAddressResponse::SharedDtor() {
}

void IsOurAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsOurAddressResponse& IsOurAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsOurAddressResponse_KeychainService_2eproto.base);
  return *internal_default_instance();
}


void IsOurAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.IsOurAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  isour_ = false;
  _internal_metadata_.Clear();
}

const char* IsOurAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isOur = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          isour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsOurAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.IsOurAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isOur = 1;
  if (this->isour() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isour(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.IsOurAddressResponse)
  return target;
}

size_t IsOurAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.IsOurAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isOur = 1;
  if (this->isour() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsOurAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.IsOurAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsOurAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsOurAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.IsOurAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.IsOurAddressResponse)
    MergeFrom(*source);
  }
}

void IsOurAddressResponse::MergeFrom(const IsOurAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.IsOurAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.isour() != 0) {
    _internal_set_isour(from._internal_isour());
  }
}

void IsOurAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.IsOurAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsOurAddressResponse::CopyFrom(const IsOurAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.IsOurAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOurAddressResponse::IsInitialized() const {
  return true;
}

void IsOurAddressResponse::InternalSwap(IsOurAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(isour_, other->isour_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsOurAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lightwalletrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lightwalletrpc::KeyLocator* Arena::CreateMaybeMessage< ::lightwalletrpc::KeyLocator >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::KeyLocator >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::KeyDescriptor* Arena::CreateMaybeMessage< ::lightwalletrpc::KeyDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::KeyDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::DeriveNextKeyReq* Arena::CreateMaybeMessage< ::lightwalletrpc::DeriveNextKeyReq >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::DeriveNextKeyReq >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::IsOurAddressResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::IsOurAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::IsOurAddressResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
