// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LightWalletService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LightWalletService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LightWalletService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LightWalletService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LightWalletService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LightWalletService_2eproto;
namespace lightwalletrpc {
class BlockFilter;
class BlockFilterDefaultTypeInternal;
extern BlockFilterDefaultTypeInternal _BlockFilter_default_instance_;
class DumpPrivKeyRequest;
class DumpPrivKeyRequestDefaultTypeInternal;
extern DumpPrivKeyRequestDefaultTypeInternal _DumpPrivKeyRequest_default_instance_;
class EstimateNetworkFeeRequest;
class EstimateNetworkFeeRequestDefaultTypeInternal;
extern EstimateNetworkFeeRequestDefaultTypeInternal _EstimateNetworkFeeRequest_default_instance_;
class EstimateNetworkFeeResponse;
class EstimateNetworkFeeResponseDefaultTypeInternal;
extern EstimateNetworkFeeResponseDefaultTypeInternal _EstimateNetworkFeeResponse_default_instance_;
class FilterBlockResponse;
class FilterBlockResponseDefaultTypeInternal;
extern FilterBlockResponseDefaultTypeInternal _FilterBlockResponse_default_instance_;
class GenerateRequest;
class GenerateRequestDefaultTypeInternal;
extern GenerateRequestDefaultTypeInternal _GenerateRequest_default_instance_;
class GenerateResponse;
class GenerateResponseDefaultTypeInternal;
extern GenerateResponseDefaultTypeInternal _GenerateResponse_default_instance_;
class GetBlockHeaderRequest;
class GetBlockHeaderRequestDefaultTypeInternal;
extern GetBlockHeaderRequestDefaultTypeInternal _GetBlockHeaderRequest_default_instance_;
class GetBlockResponse;
class GetBlockResponseDefaultTypeInternal;
extern GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
class GetChainInfoResponse;
class GetChainInfoResponseDefaultTypeInternal;
extern GetChainInfoResponseDefaultTypeInternal _GetChainInfoResponse_default_instance_;
class GetConfirmedBalanceRequest;
class GetConfirmedBalanceRequestDefaultTypeInternal;
extern GetConfirmedBalanceRequestDefaultTypeInternal _GetConfirmedBalanceRequest_default_instance_;
class GetConfirmedBalanceResponse;
class GetConfirmedBalanceResponseDefaultTypeInternal;
extern GetConfirmedBalanceResponseDefaultTypeInternal _GetConfirmedBalanceResponse_default_instance_;
class GetLastAddressRequest;
class GetLastAddressRequestDefaultTypeInternal;
extern GetLastAddressRequestDefaultTypeInternal _GetLastAddressRequest_default_instance_;
class GetLastAddressResponse;
class GetLastAddressResponseDefaultTypeInternal;
extern GetLastAddressResponseDefaultTypeInternal _GetLastAddressResponse_default_instance_;
class GetRawTransactionResponse;
class GetRawTransactionResponseDefaultTypeInternal;
extern GetRawTransactionResponseDefaultTypeInternal _GetRawTransactionResponse_default_instance_;
class GetRawTxByIndexRequest;
class GetRawTxByIndexRequestDefaultTypeInternal;
extern GetRawTxByIndexRequestDefaultTypeInternal _GetRawTxByIndexRequest_default_instance_;
class GetRawTxByIndexResponse;
class GetRawTxByIndexResponseDefaultTypeInternal;
extern GetRawTxByIndexResponseDefaultTypeInternal _GetRawTxByIndexResponse_default_instance_;
class ListUtxoResult;
class ListUtxoResultDefaultTypeInternal;
extern ListUtxoResultDefaultTypeInternal _ListUtxoResult_default_instance_;
class ListUtxosRequest;
class ListUtxosRequestDefaultTypeInternal;
extern ListUtxosRequestDefaultTypeInternal _ListUtxosRequest_default_instance_;
class LoadCacheRequest;
class LoadCacheRequestDefaultTypeInternal;
extern LoadCacheRequestDefaultTypeInternal _LoadCacheRequest_default_instance_;
class LoadCacheResponse;
class LoadCacheResponseDefaultTypeInternal;
extern LoadCacheResponseDefaultTypeInternal _LoadCacheResponse_default_instance_;
class Utxo;
class UtxoDefaultTypeInternal;
extern UtxoDefaultTypeInternal _Utxo_default_instance_;
}  // namespace lightwalletrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::lightwalletrpc::BlockFilter* Arena::CreateMaybeMessage<::lightwalletrpc::BlockFilter>(Arena*);
template<> ::lightwalletrpc::DumpPrivKeyRequest* Arena::CreateMaybeMessage<::lightwalletrpc::DumpPrivKeyRequest>(Arena*);
template<> ::lightwalletrpc::EstimateNetworkFeeRequest* Arena::CreateMaybeMessage<::lightwalletrpc::EstimateNetworkFeeRequest>(Arena*);
template<> ::lightwalletrpc::EstimateNetworkFeeResponse* Arena::CreateMaybeMessage<::lightwalletrpc::EstimateNetworkFeeResponse>(Arena*);
template<> ::lightwalletrpc::FilterBlockResponse* Arena::CreateMaybeMessage<::lightwalletrpc::FilterBlockResponse>(Arena*);
template<> ::lightwalletrpc::GenerateRequest* Arena::CreateMaybeMessage<::lightwalletrpc::GenerateRequest>(Arena*);
template<> ::lightwalletrpc::GenerateResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GenerateResponse>(Arena*);
template<> ::lightwalletrpc::GetBlockHeaderRequest* Arena::CreateMaybeMessage<::lightwalletrpc::GetBlockHeaderRequest>(Arena*);
template<> ::lightwalletrpc::GetBlockResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetBlockResponse>(Arena*);
template<> ::lightwalletrpc::GetChainInfoResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetChainInfoResponse>(Arena*);
template<> ::lightwalletrpc::GetConfirmedBalanceRequest* Arena::CreateMaybeMessage<::lightwalletrpc::GetConfirmedBalanceRequest>(Arena*);
template<> ::lightwalletrpc::GetConfirmedBalanceResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetConfirmedBalanceResponse>(Arena*);
template<> ::lightwalletrpc::GetLastAddressRequest* Arena::CreateMaybeMessage<::lightwalletrpc::GetLastAddressRequest>(Arena*);
template<> ::lightwalletrpc::GetLastAddressResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetLastAddressResponse>(Arena*);
template<> ::lightwalletrpc::GetRawTransactionResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetRawTransactionResponse>(Arena*);
template<> ::lightwalletrpc::GetRawTxByIndexRequest* Arena::CreateMaybeMessage<::lightwalletrpc::GetRawTxByIndexRequest>(Arena*);
template<> ::lightwalletrpc::GetRawTxByIndexResponse* Arena::CreateMaybeMessage<::lightwalletrpc::GetRawTxByIndexResponse>(Arena*);
template<> ::lightwalletrpc::ListUtxoResult* Arena::CreateMaybeMessage<::lightwalletrpc::ListUtxoResult>(Arena*);
template<> ::lightwalletrpc::ListUtxosRequest* Arena::CreateMaybeMessage<::lightwalletrpc::ListUtxosRequest>(Arena*);
template<> ::lightwalletrpc::LoadCacheRequest* Arena::CreateMaybeMessage<::lightwalletrpc::LoadCacheRequest>(Arena*);
template<> ::lightwalletrpc::LoadCacheResponse* Arena::CreateMaybeMessage<::lightwalletrpc::LoadCacheResponse>(Arena*);
template<> ::lightwalletrpc::Utxo* Arena::CreateMaybeMessage<::lightwalletrpc::Utxo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lightwalletrpc {

// ===================================================================

class GetChainInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetChainInfoResponse) */ {
 public:
  GetChainInfoResponse();
  virtual ~GetChainInfoResponse();

  GetChainInfoResponse(const GetChainInfoResponse& from);
  GetChainInfoResponse(GetChainInfoResponse&& from) noexcept
    : GetChainInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetChainInfoResponse& operator=(const GetChainInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChainInfoResponse& operator=(GetChainInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChainInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChainInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetChainInfoResponse*>(
               &_GetChainInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetChainInfoResponse& a, GetChainInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChainInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChainInfoResponse* New() const final {
    return CreateMaybeMessage<GetChainInfoResponse>(nullptr);
  }

  GetChainInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChainInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChainInfoResponse& from);
  void MergeFrom(const GetChainInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChainInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetChainInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestBlockHashFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // string bestBlockHash = 1;
  void clear_bestblockhash();
  const std::string& bestblockhash() const;
  void set_bestblockhash(const std::string& value);
  void set_bestblockhash(std::string&& value);
  void set_bestblockhash(const char* value);
  void set_bestblockhash(const char* value, size_t size);
  std::string* mutable_bestblockhash();
  std::string* release_bestblockhash();
  void set_allocated_bestblockhash(std::string* bestblockhash);
  private:
  const std::string& _internal_bestblockhash() const;
  void _internal_set_bestblockhash(const std::string& value);
  std::string* _internal_mutable_bestblockhash();
  public:

  // int32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetChainInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bestblockhash_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetBlockHeaderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetBlockHeaderRequest) */ {
 public:
  GetBlockHeaderRequest();
  virtual ~GetBlockHeaderRequest();

  GetBlockHeaderRequest(const GetBlockHeaderRequest& from);
  GetBlockHeaderRequest(GetBlockHeaderRequest&& from) noexcept
    : GetBlockHeaderRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockHeaderRequest& operator=(const GetBlockHeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockHeaderRequest& operator=(GetBlockHeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockHeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockHeaderRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockHeaderRequest*>(
               &_GetBlockHeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetBlockHeaderRequest& a, GetBlockHeaderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockHeaderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockHeaderRequest* New() const final {
    return CreateMaybeMessage<GetBlockHeaderRequest>(nullptr);
  }

  GetBlockHeaderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockHeaderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockHeaderRequest& from);
  void MergeFrom(const GetBlockHeaderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockHeaderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetBlockHeaderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashFieldNumber = 1,
    kVerboseFieldNumber = 2,
  };
  // string hash = 1;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const char* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bool verbose = 2;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetBlockHeaderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class FilterBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.FilterBlockResponse) */ {
 public:
  FilterBlockResponse();
  virtual ~FilterBlockResponse();

  FilterBlockResponse(const FilterBlockResponse& from);
  FilterBlockResponse(FilterBlockResponse&& from) noexcept
    : FilterBlockResponse() {
    *this = ::std::move(from);
  }

  inline FilterBlockResponse& operator=(const FilterBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterBlockResponse& operator=(FilterBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterBlockResponse* internal_default_instance() {
    return reinterpret_cast<const FilterBlockResponse*>(
               &_FilterBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FilterBlockResponse& a, FilterBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterBlockResponse* New() const final {
    return CreateMaybeMessage<FilterBlockResponse>(nullptr);
  }

  FilterBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterBlockResponse& from);
  void MergeFrom(const FilterBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.FilterBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionsFieldNumber = 1,
  };
  // repeated string transactions = 1;
  int transactions_size() const;
  private:
  int _internal_transactions_size() const;
  public:
  void clear_transactions();
  const std::string& transactions(int index) const;
  std::string* mutable_transactions(int index);
  void set_transactions(int index, const std::string& value);
  void set_transactions(int index, std::string&& value);
  void set_transactions(int index, const char* value);
  void set_transactions(int index, const char* value, size_t size);
  std::string* add_transactions();
  void add_transactions(const std::string& value);
  void add_transactions(std::string&& value);
  void add_transactions(const char* value);
  void add_transactions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& transactions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_transactions();
  private:
  const std::string& _internal_transactions(int index) const;
  std::string* _internal_add_transactions();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.FilterBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> transactions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class BlockFilter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.BlockFilter) */ {
 public:
  BlockFilter();
  virtual ~BlockFilter();

  BlockFilter(const BlockFilter& from);
  BlockFilter(BlockFilter&& from) noexcept
    : BlockFilter() {
    *this = ::std::move(from);
  }

  inline BlockFilter& operator=(const BlockFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockFilter& operator=(BlockFilter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BlockFilter* internal_default_instance() {
    return reinterpret_cast<const BlockFilter*>(
               &_BlockFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BlockFilter& a, BlockFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockFilter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockFilter* New() const final {
    return CreateMaybeMessage<BlockFilter>(nullptr);
  }

  BlockFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockFilter& from);
  void MergeFrom(const BlockFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.BlockFilter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBytesFieldNumber = 4,
    kMFieldNumber = 2,
    kNFieldNumber = 1,
    kPFieldNumber = 3,
  };
  // string bytes = 4;
  void clear_bytes();
  const std::string& bytes() const;
  void set_bytes(const std::string& value);
  void set_bytes(std::string&& value);
  void set_bytes(const char* value);
  void set_bytes(const char* value, size_t size);
  std::string* mutable_bytes();
  std::string* release_bytes();
  void set_allocated_bytes(std::string* bytes);
  private:
  const std::string& _internal_bytes() const;
  void _internal_set_bytes(const std::string& value);
  std::string* _internal_mutable_bytes();
  public:

  // uint64 m = 2;
  void clear_m();
  ::PROTOBUF_NAMESPACE_ID::uint64 m() const;
  void set_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_m() const;
  void _internal_set_m(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 n = 1;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::uint32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 p = 3;
  void clear_p();
  ::PROTOBUF_NAMESPACE_ID::uint32 p() const;
  void set_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_p() const;
  void _internal_set_p(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.BlockFilter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 m_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_;
  ::PROTOBUF_NAMESPACE_ID::uint32 p_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class DumpPrivKeyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.DumpPrivKeyRequest) */ {
 public:
  DumpPrivKeyRequest();
  virtual ~DumpPrivKeyRequest();

  DumpPrivKeyRequest(const DumpPrivKeyRequest& from);
  DumpPrivKeyRequest(DumpPrivKeyRequest&& from) noexcept
    : DumpPrivKeyRequest() {
    *this = ::std::move(from);
  }

  inline DumpPrivKeyRequest& operator=(const DumpPrivKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DumpPrivKeyRequest& operator=(DumpPrivKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DumpPrivKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DumpPrivKeyRequest* internal_default_instance() {
    return reinterpret_cast<const DumpPrivKeyRequest*>(
               &_DumpPrivKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DumpPrivKeyRequest& a, DumpPrivKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DumpPrivKeyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DumpPrivKeyRequest* New() const final {
    return CreateMaybeMessage<DumpPrivKeyRequest>(nullptr);
  }

  DumpPrivKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DumpPrivKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DumpPrivKeyRequest& from);
  void MergeFrom(const DumpPrivKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DumpPrivKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.DumpPrivKeyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptPubKeyFieldNumber = 1,
  };
  // string scriptPubKey = 1;
  void clear_scriptpubkey();
  const std::string& scriptpubkey() const;
  void set_scriptpubkey(const std::string& value);
  void set_scriptpubkey(std::string&& value);
  void set_scriptpubkey(const char* value);
  void set_scriptpubkey(const char* value, size_t size);
  std::string* mutable_scriptpubkey();
  std::string* release_scriptpubkey();
  void set_allocated_scriptpubkey(std::string* scriptpubkey);
  private:
  const std::string& _internal_scriptpubkey() const;
  void _internal_set_scriptpubkey(const std::string& value);
  std::string* _internal_mutable_scriptpubkey();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.DumpPrivKeyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpubkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class Utxo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.Utxo) */ {
 public:
  Utxo();
  virtual ~Utxo();

  Utxo(const Utxo& from);
  Utxo(Utxo&& from) noexcept
    : Utxo() {
    *this = ::std::move(from);
  }

  inline Utxo& operator=(const Utxo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Utxo& operator=(Utxo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Utxo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Utxo* internal_default_instance() {
    return reinterpret_cast<const Utxo*>(
               &_Utxo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Utxo& a, Utxo& b) {
    a.Swap(&b);
  }
  inline void Swap(Utxo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Utxo* New() const final {
    return CreateMaybeMessage<Utxo>(nullptr);
  }

  Utxo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Utxo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Utxo& from);
  void MergeFrom(const Utxo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Utxo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.Utxo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 2,
    kScriptPubKeyFieldNumber = 4,
    kValueFieldNumber = 3,
    kConfirmationsFieldNumber = 5,
    kVoutFieldNumber = 1,
  };
  // string txid = 2;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const char* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // string scriptPubKey = 4;
  void clear_scriptpubkey();
  const std::string& scriptpubkey() const;
  void set_scriptpubkey(const std::string& value);
  void set_scriptpubkey(std::string&& value);
  void set_scriptpubkey(const char* value);
  void set_scriptpubkey(const char* value, size_t size);
  std::string* mutable_scriptpubkey();
  std::string* release_scriptpubkey();
  void set_allocated_scriptpubkey(std::string* scriptpubkey);
  private:
  const std::string& _internal_scriptpubkey() const;
  void _internal_set_scriptpubkey(const std::string& value);
  std::string* _internal_mutable_scriptpubkey();
  public:

  // int64 value = 3;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 confirmations = 5;
  void clear_confirmations();
  ::PROTOBUF_NAMESPACE_ID::int64 confirmations() const;
  void set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_confirmations() const;
  void _internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 vout = 1;
  void clear_vout();
  ::PROTOBUF_NAMESPACE_ID::uint32 vout() const;
  void set_vout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vout() const;
  void _internal_set_vout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.Utxo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scriptpubkey_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  ::PROTOBUF_NAMESPACE_ID::int64 confirmations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class ListUtxoResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.ListUtxoResult) */ {
 public:
  ListUtxoResult();
  virtual ~ListUtxoResult();

  ListUtxoResult(const ListUtxoResult& from);
  ListUtxoResult(ListUtxoResult&& from) noexcept
    : ListUtxoResult() {
    *this = ::std::move(from);
  }

  inline ListUtxoResult& operator=(const ListUtxoResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUtxoResult& operator=(ListUtxoResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUtxoResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUtxoResult* internal_default_instance() {
    return reinterpret_cast<const ListUtxoResult*>(
               &_ListUtxoResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListUtxoResult& a, ListUtxoResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUtxoResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUtxoResult* New() const final {
    return CreateMaybeMessage<ListUtxoResult>(nullptr);
  }

  ListUtxoResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUtxoResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUtxoResult& from);
  void MergeFrom(const ListUtxoResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUtxoResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.ListUtxoResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUtxosFieldNumber = 1,
  };
  // repeated .lightwalletrpc.Utxo utxos = 1;
  int utxos_size() const;
  private:
  int _internal_utxos_size() const;
  public:
  void clear_utxos();
  ::lightwalletrpc::Utxo* mutable_utxos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightwalletrpc::Utxo >*
      mutable_utxos();
  private:
  const ::lightwalletrpc::Utxo& _internal_utxos(int index) const;
  ::lightwalletrpc::Utxo* _internal_add_utxos();
  public:
  const ::lightwalletrpc::Utxo& utxos(int index) const;
  ::lightwalletrpc::Utxo* add_utxos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightwalletrpc::Utxo >&
      utxos() const;

  // @@protoc_insertion_point(class_scope:lightwalletrpc.ListUtxoResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightwalletrpc::Utxo > utxos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetLastAddressRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetLastAddressRequest) */ {
 public:
  GetLastAddressRequest();
  virtual ~GetLastAddressRequest();

  GetLastAddressRequest(const GetLastAddressRequest& from);
  GetLastAddressRequest(GetLastAddressRequest&& from) noexcept
    : GetLastAddressRequest() {
    *this = ::std::move(from);
  }

  inline GetLastAddressRequest& operator=(const GetLastAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastAddressRequest& operator=(GetLastAddressRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastAddressRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastAddressRequest* internal_default_instance() {
    return reinterpret_cast<const GetLastAddressRequest*>(
               &_GetLastAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetLastAddressRequest& a, GetLastAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastAddressRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastAddressRequest* New() const final {
    return CreateMaybeMessage<GetLastAddressRequest>(nullptr);
  }

  GetLastAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastAddressRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastAddressRequest& from);
  void MergeFrom(const GetLastAddressRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastAddressRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetLastAddressRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsChangeFieldNumber = 1,
  };
  // bool isChange = 1;
  void clear_ischange();
  bool ischange() const;
  void set_ischange(bool value);
  private:
  bool _internal_ischange() const;
  void _internal_set_ischange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetLastAddressRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool ischange_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetLastAddressResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetLastAddressResponse) */ {
 public:
  GetLastAddressResponse();
  virtual ~GetLastAddressResponse();

  GetLastAddressResponse(const GetLastAddressResponse& from);
  GetLastAddressResponse(GetLastAddressResponse&& from) noexcept
    : GetLastAddressResponse() {
    *this = ::std::move(from);
  }

  inline GetLastAddressResponse& operator=(const GetLastAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastAddressResponse& operator=(GetLastAddressResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLastAddressResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLastAddressResponse* internal_default_instance() {
    return reinterpret_cast<const GetLastAddressResponse*>(
               &_GetLastAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetLastAddressResponse& a, GetLastAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLastAddressResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLastAddressResponse* New() const final {
    return CreateMaybeMessage<GetLastAddressResponse>(nullptr);
  }

  GetLastAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLastAddressResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLastAddressResponse& from);
  void MergeFrom(const GetLastAddressResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLastAddressResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetLastAddressResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 1,
  };
  // string address = 1;
  void clear_address();
  const std::string& address() const;
  void set_address(const std::string& value);
  void set_address(std::string&& value);
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  std::string* mutable_address();
  std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetLastAddressResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class ListUtxosRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.ListUtxosRequest) */ {
 public:
  ListUtxosRequest();
  virtual ~ListUtxosRequest();

  ListUtxosRequest(const ListUtxosRequest& from);
  ListUtxosRequest(ListUtxosRequest&& from) noexcept
    : ListUtxosRequest() {
    *this = ::std::move(from);
  }

  inline ListUtxosRequest& operator=(const ListUtxosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUtxosRequest& operator=(ListUtxosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListUtxosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUtxosRequest* internal_default_instance() {
    return reinterpret_cast<const ListUtxosRequest*>(
               &_ListUtxosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListUtxosRequest& a, ListUtxosRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUtxosRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListUtxosRequest* New() const final {
    return CreateMaybeMessage<ListUtxosRequest>(nullptr);
  }

  ListUtxosRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListUtxosRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListUtxosRequest& from);
  void MergeFrom(const ListUtxosRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUtxosRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.ListUtxosRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddressesFieldNumber = 3,
    kMinConfFieldNumber = 1,
    kMaxConfFieldNumber = 2,
  };
  // repeated string addresses = 3;
  int addresses_size() const;
  private:
  int _internal_addresses_size() const;
  public:
  void clear_addresses();
  const std::string& addresses(int index) const;
  std::string* mutable_addresses(int index);
  void set_addresses(int index, const std::string& value);
  void set_addresses(int index, std::string&& value);
  void set_addresses(int index, const char* value);
  void set_addresses(int index, const char* value, size_t size);
  std::string* add_addresses();
  void add_addresses(const std::string& value);
  void add_addresses(std::string&& value);
  void add_addresses(const char* value);
  void add_addresses(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_addresses();
  private:
  const std::string& _internal_addresses(int index) const;
  std::string* _internal_add_addresses();
  public:

  // int32 minConf = 1;
  void clear_minconf();
  ::PROTOBUF_NAMESPACE_ID::int32 minconf() const;
  void set_minconf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minconf() const;
  void _internal_set_minconf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 maxConf = 2;
  void clear_maxconf();
  ::PROTOBUF_NAMESPACE_ID::int32 maxconf() const;
  void set_maxconf(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxconf() const;
  void _internal_set_maxconf(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.ListUtxosRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> addresses_;
  ::PROTOBUF_NAMESPACE_ID::int32 minconf_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxconf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GenerateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GenerateRequest) */ {
 public:
  GenerateRequest();
  virtual ~GenerateRequest();

  GenerateRequest(const GenerateRequest& from);
  GenerateRequest(GenerateRequest&& from) noexcept
    : GenerateRequest() {
    *this = ::std::move(from);
  }

  inline GenerateRequest& operator=(const GenerateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateRequest& operator=(GenerateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateRequest* internal_default_instance() {
    return reinterpret_cast<const GenerateRequest*>(
               &_GenerateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GenerateRequest& a, GenerateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateRequest* New() const final {
    return CreateMaybeMessage<GenerateRequest>(nullptr);
  }

  GenerateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateRequest& from);
  void MergeFrom(const GenerateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GenerateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumBlocksFieldNumber = 1,
  };
  // uint32 numBlocks = 1;
  void clear_numblocks();
  ::PROTOBUF_NAMESPACE_ID::uint32 numblocks() const;
  void set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_numblocks() const;
  void _internal_set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GenerateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 numblocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GenerateResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GenerateResponse) */ {
 public:
  GenerateResponse();
  virtual ~GenerateResponse();

  GenerateResponse(const GenerateResponse& from);
  GenerateResponse(GenerateResponse&& from) noexcept
    : GenerateResponse() {
    *this = ::std::move(from);
  }

  inline GenerateResponse& operator=(const GenerateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateResponse& operator=(GenerateResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateResponse*>(
               &_GenerateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GenerateResponse& a, GenerateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateResponse* New() const final {
    return CreateMaybeMessage<GenerateResponse>(nullptr);
  }

  GenerateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateResponse& from);
  void MergeFrom(const GenerateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GenerateResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockHashFieldNumber = 1,
  };
  // repeated string blockHash = 1;
  int blockhash_size() const;
  private:
  int _internal_blockhash_size() const;
  public:
  void clear_blockhash();
  const std::string& blockhash(int index) const;
  std::string* mutable_blockhash(int index);
  void set_blockhash(int index, const std::string& value);
  void set_blockhash(int index, std::string&& value);
  void set_blockhash(int index, const char* value);
  void set_blockhash(int index, const char* value, size_t size);
  std::string* add_blockhash();
  void add_blockhash(const std::string& value);
  void add_blockhash(std::string&& value);
  void add_blockhash(const char* value);
  void add_blockhash(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& blockhash() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_blockhash();
  private:
  const std::string& _internal_blockhash(int index) const;
  std::string* _internal_add_blockhash();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GenerateResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> blockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetBlockResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetBlockResponse) */ {
 public:
  GetBlockResponse();
  virtual ~GetBlockResponse();

  GetBlockResponse(const GetBlockResponse& from);
  GetBlockResponse(GetBlockResponse&& from) noexcept
    : GetBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockResponse& operator=(const GetBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockResponse& operator=(GetBlockResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponse*>(
               &_GetBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetBlockResponse& a, GetBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockResponse* New() const final {
    return CreateMaybeMessage<GetBlockResponse>(nullptr);
  }

  GetBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockResponse& from);
  void MergeFrom(const GetBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetBlockResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // bytes block = 1;
  void clear_block();
  const std::string& block() const;
  void set_block(const std::string& value);
  void set_block(std::string&& value);
  void set_block(const char* value);
  void set_block(const void* value, size_t size);
  std::string* mutable_block();
  std::string* release_block();
  void set_allocated_block(std::string* block);
  private:
  const std::string& _internal_block() const;
  void _internal_set_block(const std::string& value);
  std::string* _internal_mutable_block();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetBlockResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetConfirmedBalanceRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetConfirmedBalanceRequest) */ {
 public:
  GetConfirmedBalanceRequest();
  virtual ~GetConfirmedBalanceRequest();

  GetConfirmedBalanceRequest(const GetConfirmedBalanceRequest& from);
  GetConfirmedBalanceRequest(GetConfirmedBalanceRequest&& from) noexcept
    : GetConfirmedBalanceRequest() {
    *this = ::std::move(from);
  }

  inline GetConfirmedBalanceRequest& operator=(const GetConfirmedBalanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfirmedBalanceRequest& operator=(GetConfirmedBalanceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfirmedBalanceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfirmedBalanceRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfirmedBalanceRequest*>(
               &_GetConfirmedBalanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetConfirmedBalanceRequest& a, GetConfirmedBalanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfirmedBalanceRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfirmedBalanceRequest* New() const final {
    return CreateMaybeMessage<GetConfirmedBalanceRequest>(nullptr);
  }

  GetConfirmedBalanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfirmedBalanceRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfirmedBalanceRequest& from);
  void MergeFrom(const GetConfirmedBalanceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfirmedBalanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetConfirmedBalanceRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfsFieldNumber = 1,
  };
  // int32 confs = 1;
  void clear_confs();
  ::PROTOBUF_NAMESPACE_ID::int32 confs() const;
  void set_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_confs() const;
  void _internal_set_confs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetConfirmedBalanceRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 confs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetConfirmedBalanceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetConfirmedBalanceResponse) */ {
 public:
  GetConfirmedBalanceResponse();
  virtual ~GetConfirmedBalanceResponse();

  GetConfirmedBalanceResponse(const GetConfirmedBalanceResponse& from);
  GetConfirmedBalanceResponse(GetConfirmedBalanceResponse&& from) noexcept
    : GetConfirmedBalanceResponse() {
    *this = ::std::move(from);
  }

  inline GetConfirmedBalanceResponse& operator=(const GetConfirmedBalanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfirmedBalanceResponse& operator=(GetConfirmedBalanceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConfirmedBalanceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConfirmedBalanceResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfirmedBalanceResponse*>(
               &_GetConfirmedBalanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetConfirmedBalanceResponse& a, GetConfirmedBalanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfirmedBalanceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfirmedBalanceResponse* New() const final {
    return CreateMaybeMessage<GetConfirmedBalanceResponse>(nullptr);
  }

  GetConfirmedBalanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfirmedBalanceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfirmedBalanceResponse& from);
  void MergeFrom(const GetConfirmedBalanceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfirmedBalanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetConfirmedBalanceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
  };
  // int64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetConfirmedBalanceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class EstimateNetworkFeeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.EstimateNetworkFeeRequest) */ {
 public:
  EstimateNetworkFeeRequest();
  virtual ~EstimateNetworkFeeRequest();

  EstimateNetworkFeeRequest(const EstimateNetworkFeeRequest& from);
  EstimateNetworkFeeRequest(EstimateNetworkFeeRequest&& from) noexcept
    : EstimateNetworkFeeRequest() {
    *this = ::std::move(from);
  }

  inline EstimateNetworkFeeRequest& operator=(const EstimateNetworkFeeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateNetworkFeeRequest& operator=(EstimateNetworkFeeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateNetworkFeeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateNetworkFeeRequest* internal_default_instance() {
    return reinterpret_cast<const EstimateNetworkFeeRequest*>(
               &_EstimateNetworkFeeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EstimateNetworkFeeRequest& a, EstimateNetworkFeeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateNetworkFeeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateNetworkFeeRequest* New() const final {
    return CreateMaybeMessage<EstimateNetworkFeeRequest>(nullptr);
  }

  EstimateNetworkFeeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateNetworkFeeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateNetworkFeeRequest& from);
  void MergeFrom(const EstimateNetworkFeeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateNetworkFeeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.EstimateNetworkFeeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
  };
  // uint64 blocks = 1;
  void clear_blocks();
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks() const;
  void set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_blocks() const;
  void _internal_set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.EstimateNetworkFeeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 blocks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class EstimateNetworkFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.EstimateNetworkFeeResponse) */ {
 public:
  EstimateNetworkFeeResponse();
  virtual ~EstimateNetworkFeeResponse();

  EstimateNetworkFeeResponse(const EstimateNetworkFeeResponse& from);
  EstimateNetworkFeeResponse(EstimateNetworkFeeResponse&& from) noexcept
    : EstimateNetworkFeeResponse() {
    *this = ::std::move(from);
  }

  inline EstimateNetworkFeeResponse& operator=(const EstimateNetworkFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EstimateNetworkFeeResponse& operator=(EstimateNetworkFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EstimateNetworkFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EstimateNetworkFeeResponse* internal_default_instance() {
    return reinterpret_cast<const EstimateNetworkFeeResponse*>(
               &_EstimateNetworkFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EstimateNetworkFeeResponse& a, EstimateNetworkFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EstimateNetworkFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EstimateNetworkFeeResponse* New() const final {
    return CreateMaybeMessage<EstimateNetworkFeeResponse>(nullptr);
  }

  EstimateNetworkFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EstimateNetworkFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EstimateNetworkFeeResponse& from);
  void MergeFrom(const EstimateNetworkFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EstimateNetworkFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.EstimateNetworkFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 1,
  };
  // int64 fee = 1;
  void clear_fee();
  ::PROTOBUF_NAMESPACE_ID::int64 fee() const;
  void set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_fee() const;
  void _internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.EstimateNetworkFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetRawTransactionResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetRawTransactionResponse) */ {
 public:
  GetRawTransactionResponse();
  virtual ~GetRawTransactionResponse();

  GetRawTransactionResponse(const GetRawTransactionResponse& from);
  GetRawTransactionResponse(GetRawTransactionResponse&& from) noexcept
    : GetRawTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetRawTransactionResponse& operator=(const GetRawTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawTransactionResponse& operator=(GetRawTransactionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawTransactionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawTransactionResponse*>(
               &_GetRawTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetRawTransactionResponse& a, GetRawTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawTransactionResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawTransactionResponse* New() const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(nullptr);
  }

  GetRawTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTransactionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawTransactionResponse& from);
  void MergeFrom(const GetRawTransactionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTransactionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetRawTransactionResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHexFieldNumber = 1,
    kBlockHashFieldNumber = 2,
    kBlockHeightFieldNumber = 3,
    kTxIndexFieldNumber = 4,
  };
  // string transactionHex = 1;
  void clear_transactionhex();
  const std::string& transactionhex() const;
  void set_transactionhex(const std::string& value);
  void set_transactionhex(std::string&& value);
  void set_transactionhex(const char* value);
  void set_transactionhex(const char* value, size_t size);
  std::string* mutable_transactionhex();
  std::string* release_transactionhex();
  void set_allocated_transactionhex(std::string* transactionhex);
  private:
  const std::string& _internal_transactionhex() const;
  void _internal_set_transactionhex(const std::string& value);
  std::string* _internal_mutable_transactionhex();
  public:

  // string blockHash = 2;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const char* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // uint32 blockHeight = 3;
  void clear_blockheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight() const;
  void set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blockheight() const;
  void _internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 txIndex = 4;
  void clear_txindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 txindex() const;
  void set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_txindex() const;
  void _internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetRawTransactionResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionhex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blockheight_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetRawTxByIndexRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetRawTxByIndexRequest) */ {
 public:
  GetRawTxByIndexRequest();
  virtual ~GetRawTxByIndexRequest();

  GetRawTxByIndexRequest(const GetRawTxByIndexRequest& from);
  GetRawTxByIndexRequest(GetRawTxByIndexRequest&& from) noexcept
    : GetRawTxByIndexRequest() {
    *this = ::std::move(from);
  }

  inline GetRawTxByIndexRequest& operator=(const GetRawTxByIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawTxByIndexRequest& operator=(GetRawTxByIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawTxByIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTxByIndexRequest* internal_default_instance() {
    return reinterpret_cast<const GetRawTxByIndexRequest*>(
               &_GetRawTxByIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetRawTxByIndexRequest& a, GetRawTxByIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawTxByIndexRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawTxByIndexRequest* New() const final {
    return CreateMaybeMessage<GetRawTxByIndexRequest>(nullptr);
  }

  GetRawTxByIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTxByIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawTxByIndexRequest& from);
  void MergeFrom(const GetRawTxByIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTxByIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetRawTxByIndexRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockNumFieldNumber = 1,
    kTxIndexFieldNumber = 2,
  };
  // int64 blockNum = 1;
  void clear_blocknum();
  ::PROTOBUF_NAMESPACE_ID::int64 blocknum() const;
  void set_blocknum(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_blocknum() const;
  void _internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 txIndex = 2;
  void clear_txindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 txindex() const;
  void set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_txindex() const;
  void _internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetRawTxByIndexRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 blocknum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class GetRawTxByIndexResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.GetRawTxByIndexResponse) */ {
 public:
  GetRawTxByIndexResponse();
  virtual ~GetRawTxByIndexResponse();

  GetRawTxByIndexResponse(const GetRawTxByIndexResponse& from);
  GetRawTxByIndexResponse(GetRawTxByIndexResponse&& from) noexcept
    : GetRawTxByIndexResponse() {
    *this = ::std::move(from);
  }

  inline GetRawTxByIndexResponse& operator=(const GetRawTxByIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawTxByIndexResponse& operator=(GetRawTxByIndexResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRawTxByIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRawTxByIndexResponse* internal_default_instance() {
    return reinterpret_cast<const GetRawTxByIndexResponse*>(
               &_GetRawTxByIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetRawTxByIndexResponse& a, GetRawTxByIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawTxByIndexResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRawTxByIndexResponse* New() const final {
    return CreateMaybeMessage<GetRawTxByIndexResponse>(nullptr);
  }

  GetRawTxByIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRawTxByIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRawTxByIndexResponse& from);
  void MergeFrom(const GetRawTxByIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRawTxByIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.GetRawTxByIndexResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxHexFieldNumber = 1,
  };
  // string txHex = 1;
  void clear_txhex();
  const std::string& txhex() const;
  void set_txhex(const std::string& value);
  void set_txhex(std::string&& value);
  void set_txhex(const char* value);
  void set_txhex(const char* value, size_t size);
  std::string* mutable_txhex();
  std::string* release_txhex();
  void set_allocated_txhex(std::string* txhex);
  private:
  const std::string& _internal_txhex() const;
  void _internal_set_txhex(const std::string& value);
  std::string* _internal_mutable_txhex();
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.GetRawTxByIndexResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txhex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class LoadCacheRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.LoadCacheRequest) */ {
 public:
  LoadCacheRequest();
  virtual ~LoadCacheRequest();

  LoadCacheRequest(const LoadCacheRequest& from);
  LoadCacheRequest(LoadCacheRequest&& from) noexcept
    : LoadCacheRequest() {
    *this = ::std::move(from);
  }

  inline LoadCacheRequest& operator=(const LoadCacheRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadCacheRequest& operator=(LoadCacheRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadCacheRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadCacheRequest* internal_default_instance() {
    return reinterpret_cast<const LoadCacheRequest*>(
               &_LoadCacheRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(LoadCacheRequest& a, LoadCacheRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadCacheRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadCacheRequest* New() const final {
    return CreateMaybeMessage<LoadCacheRequest>(nullptr);
  }

  LoadCacheRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadCacheRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadCacheRequest& from);
  void MergeFrom(const LoadCacheRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCacheRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.LoadCacheRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartHeightFieldNumber = 1,
  };
  // uint32 startHeight = 1;
  void clear_startheight();
  ::PROTOBUF_NAMESPACE_ID::uint32 startheight() const;
  void set_startheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startheight() const;
  void _internal_set_startheight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.LoadCacheRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// -------------------------------------------------------------------

class LoadCacheResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lightwalletrpc.LoadCacheResponse) */ {
 public:
  LoadCacheResponse();
  virtual ~LoadCacheResponse();

  LoadCacheResponse(const LoadCacheResponse& from);
  LoadCacheResponse(LoadCacheResponse&& from) noexcept
    : LoadCacheResponse() {
    *this = ::std::move(from);
  }

  inline LoadCacheResponse& operator=(const LoadCacheResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadCacheResponse& operator=(LoadCacheResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoadCacheResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadCacheResponse* internal_default_instance() {
    return reinterpret_cast<const LoadCacheResponse*>(
               &_LoadCacheResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(LoadCacheResponse& a, LoadCacheResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadCacheResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadCacheResponse* New() const final {
    return CreateMaybeMessage<LoadCacheResponse>(nullptr);
  }

  LoadCacheResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadCacheResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadCacheResponse& from);
  void MergeFrom(const LoadCacheResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadCacheResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lightwalletrpc.LoadCacheResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_LightWalletService_2eproto);
    return ::descriptor_table_LightWalletService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoadedFieldNumber = 1,
  };
  // bool loaded = 1;
  void clear_loaded();
  bool loaded() const;
  void set_loaded(bool value);
  private:
  bool _internal_loaded() const;
  void _internal_set_loaded(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lightwalletrpc.LoadCacheResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool loaded_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_LightWalletService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetChainInfoResponse

// string bestBlockHash = 1;
inline void GetChainInfoResponse::clear_bestblockhash() {
  bestblockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetChainInfoResponse::bestblockhash() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
  return _internal_bestblockhash();
}
inline void GetChainInfoResponse::set_bestblockhash(const std::string& value) {
  _internal_set_bestblockhash(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
}
inline std::string* GetChainInfoResponse::mutable_bestblockhash() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
  return _internal_mutable_bestblockhash();
}
inline const std::string& GetChainInfoResponse::_internal_bestblockhash() const {
  return bestblockhash_.GetNoArena();
}
inline void GetChainInfoResponse::_internal_set_bestblockhash(const std::string& value) {
  
  bestblockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetChainInfoResponse::set_bestblockhash(std::string&& value) {
  
  bestblockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
}
inline void GetChainInfoResponse::set_bestblockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bestblockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
}
inline void GetChainInfoResponse::set_bestblockhash(const char* value, size_t size) {
  
  bestblockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
}
inline std::string* GetChainInfoResponse::_internal_mutable_bestblockhash() {
  
  return bestblockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetChainInfoResponse::release_bestblockhash() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
  
  return bestblockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetChainInfoResponse::set_allocated_bestblockhash(std::string* bestblockhash) {
  if (bestblockhash != nullptr) {
    
  } else {
    
  }
  bestblockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bestblockhash);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetChainInfoResponse.bestBlockHash)
}

// int32 height = 2;
inline void GetChainInfoResponse::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChainInfoResponse::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetChainInfoResponse::height() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetChainInfoResponse.height)
  return _internal_height();
}
inline void GetChainInfoResponse::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void GetChainInfoResponse::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetChainInfoResponse.height)
}

// -------------------------------------------------------------------

// GetBlockHeaderRequest

// string hash = 1;
inline void GetBlockHeaderRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockHeaderRequest::hash() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetBlockHeaderRequest.hash)
  return _internal_hash();
}
inline void GetBlockHeaderRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetBlockHeaderRequest.hash)
}
inline std::string* GetBlockHeaderRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetBlockHeaderRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& GetBlockHeaderRequest::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void GetBlockHeaderRequest::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockHeaderRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetBlockHeaderRequest.hash)
}
inline void GetBlockHeaderRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetBlockHeaderRequest.hash)
}
inline void GetBlockHeaderRequest::set_hash(const char* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetBlockHeaderRequest.hash)
}
inline std::string* GetBlockHeaderRequest::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockHeaderRequest::release_hash() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetBlockHeaderRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockHeaderRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetBlockHeaderRequest.hash)
}

// bool verbose = 2;
inline void GetBlockHeaderRequest::clear_verbose() {
  verbose_ = false;
}
inline bool GetBlockHeaderRequest::_internal_verbose() const {
  return verbose_;
}
inline bool GetBlockHeaderRequest::verbose() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetBlockHeaderRequest.verbose)
  return _internal_verbose();
}
inline void GetBlockHeaderRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void GetBlockHeaderRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetBlockHeaderRequest.verbose)
}

// -------------------------------------------------------------------

// FilterBlockResponse

// repeated string transactions = 1;
inline int FilterBlockResponse::_internal_transactions_size() const {
  return transactions_.size();
}
inline int FilterBlockResponse::transactions_size() const {
  return _internal_transactions_size();
}
inline void FilterBlockResponse::clear_transactions() {
  transactions_.Clear();
}
inline std::string* FilterBlockResponse::add_transactions() {
  // @@protoc_insertion_point(field_add_mutable:lightwalletrpc.FilterBlockResponse.transactions)
  return _internal_add_transactions();
}
inline const std::string& FilterBlockResponse::_internal_transactions(int index) const {
  return transactions_.Get(index);
}
inline const std::string& FilterBlockResponse::transactions(int index) const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.FilterBlockResponse.transactions)
  return _internal_transactions(index);
}
inline std::string* FilterBlockResponse::mutable_transactions(int index) {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.FilterBlockResponse.transactions)
  return transactions_.Mutable(index);
}
inline void FilterBlockResponse::set_transactions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.FilterBlockResponse.transactions)
  transactions_.Mutable(index)->assign(value);
}
inline void FilterBlockResponse::set_transactions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.FilterBlockResponse.transactions)
  transactions_.Mutable(index)->assign(std::move(value));
}
inline void FilterBlockResponse::set_transactions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.FilterBlockResponse.transactions)
}
inline void FilterBlockResponse::set_transactions(int index, const char* value, size_t size) {
  transactions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.FilterBlockResponse.transactions)
}
inline std::string* FilterBlockResponse::_internal_add_transactions() {
  return transactions_.Add();
}
inline void FilterBlockResponse::add_transactions(const std::string& value) {
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightwalletrpc.FilterBlockResponse.transactions)
}
inline void FilterBlockResponse::add_transactions(std::string&& value) {
  transactions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightwalletrpc.FilterBlockResponse.transactions)
}
inline void FilterBlockResponse::add_transactions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  transactions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightwalletrpc.FilterBlockResponse.transactions)
}
inline void FilterBlockResponse::add_transactions(const char* value, size_t size) {
  transactions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightwalletrpc.FilterBlockResponse.transactions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FilterBlockResponse::transactions() const {
  // @@protoc_insertion_point(field_list:lightwalletrpc.FilterBlockResponse.transactions)
  return transactions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FilterBlockResponse::mutable_transactions() {
  // @@protoc_insertion_point(field_mutable_list:lightwalletrpc.FilterBlockResponse.transactions)
  return &transactions_;
}

// -------------------------------------------------------------------

// BlockFilter

// uint32 n = 1;
inline void BlockFilter::clear_n() {
  n_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockFilter::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockFilter::n() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.BlockFilter.n)
  return _internal_n();
}
inline void BlockFilter::_internal_set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  n_ = value;
}
inline void BlockFilter::set_n(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.BlockFilter.n)
}

// uint64 m = 2;
inline void BlockFilter::clear_m() {
  m_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockFilter::_internal_m() const {
  return m_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BlockFilter::m() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.BlockFilter.m)
  return _internal_m();
}
inline void BlockFilter::_internal_set_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  m_ = value;
}
inline void BlockFilter::set_m(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_m(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.BlockFilter.m)
}

// uint32 p = 3;
inline void BlockFilter::clear_p() {
  p_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockFilter::_internal_p() const {
  return p_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockFilter::p() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.BlockFilter.p)
  return _internal_p();
}
inline void BlockFilter::_internal_set_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  p_ = value;
}
inline void BlockFilter::set_p(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.BlockFilter.p)
}

// string bytes = 4;
inline void BlockFilter::clear_bytes() {
  bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BlockFilter::bytes() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.BlockFilter.bytes)
  return _internal_bytes();
}
inline void BlockFilter::set_bytes(const std::string& value) {
  _internal_set_bytes(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.BlockFilter.bytes)
}
inline std::string* BlockFilter::mutable_bytes() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.BlockFilter.bytes)
  return _internal_mutable_bytes();
}
inline const std::string& BlockFilter::_internal_bytes() const {
  return bytes_.GetNoArena();
}
inline void BlockFilter::_internal_set_bytes(const std::string& value) {
  
  bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BlockFilter::set_bytes(std::string&& value) {
  
  bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.BlockFilter.bytes)
}
inline void BlockFilter::set_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.BlockFilter.bytes)
}
inline void BlockFilter::set_bytes(const char* value, size_t size) {
  
  bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.BlockFilter.bytes)
}
inline std::string* BlockFilter::_internal_mutable_bytes() {
  
  return bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BlockFilter::release_bytes() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.BlockFilter.bytes)
  
  return bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BlockFilter::set_allocated_bytes(std::string* bytes) {
  if (bytes != nullptr) {
    
  } else {
    
  }
  bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.BlockFilter.bytes)
}

// -------------------------------------------------------------------

// DumpPrivKeyRequest

// string scriptPubKey = 1;
inline void DumpPrivKeyRequest::clear_scriptpubkey() {
  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DumpPrivKeyRequest::scriptpubkey() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
  return _internal_scriptpubkey();
}
inline void DumpPrivKeyRequest::set_scriptpubkey(const std::string& value) {
  _internal_set_scriptpubkey(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
}
inline std::string* DumpPrivKeyRequest::mutable_scriptpubkey() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
  return _internal_mutable_scriptpubkey();
}
inline const std::string& DumpPrivKeyRequest::_internal_scriptpubkey() const {
  return scriptpubkey_.GetNoArena();
}
inline void DumpPrivKeyRequest::_internal_set_scriptpubkey(const std::string& value) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DumpPrivKeyRequest::set_scriptpubkey(std::string&& value) {
  
  scriptpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
}
inline void DumpPrivKeyRequest::set_scriptpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
}
inline void DumpPrivKeyRequest::set_scriptpubkey(const char* value, size_t size) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
}
inline std::string* DumpPrivKeyRequest::_internal_mutable_scriptpubkey() {
  
  return scriptpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DumpPrivKeyRequest::release_scriptpubkey() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
  
  return scriptpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DumpPrivKeyRequest::set_allocated_scriptpubkey(std::string* scriptpubkey) {
  if (scriptpubkey != nullptr) {
    
  } else {
    
  }
  scriptpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpubkey);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.DumpPrivKeyRequest.scriptPubKey)
}

// -------------------------------------------------------------------

// Utxo

// uint32 vout = 1;
inline void Utxo::clear_vout() {
  vout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Utxo::_internal_vout() const {
  return vout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Utxo::vout() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.Utxo.vout)
  return _internal_vout();
}
inline void Utxo::_internal_set_vout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vout_ = value;
}
inline void Utxo::set_vout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vout(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.Utxo.vout)
}

// string txid = 2;
inline void Utxo::clear_txid() {
  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Utxo::txid() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.Utxo.txid)
  return _internal_txid();
}
inline void Utxo::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.Utxo.txid)
}
inline std::string* Utxo::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.Utxo.txid)
  return _internal_mutable_txid();
}
inline const std::string& Utxo::_internal_txid() const {
  return txid_.GetNoArena();
}
inline void Utxo::_internal_set_txid(const std::string& value) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Utxo::set_txid(std::string&& value) {
  
  txid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.Utxo.txid)
}
inline void Utxo::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.Utxo.txid)
}
inline void Utxo::set_txid(const char* value, size_t size) {
  
  txid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.Utxo.txid)
}
inline std::string* Utxo::_internal_mutable_txid() {
  
  return txid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Utxo::release_txid() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.Utxo.txid)
  
  return txid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.Utxo.txid)
}

// int64 value = 3;
inline void Utxo::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::value() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.Utxo.value)
  return _internal_value();
}
inline void Utxo::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void Utxo::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.Utxo.value)
}

// string scriptPubKey = 4;
inline void Utxo::clear_scriptpubkey() {
  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Utxo::scriptpubkey() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.Utxo.scriptPubKey)
  return _internal_scriptpubkey();
}
inline void Utxo::set_scriptpubkey(const std::string& value) {
  _internal_set_scriptpubkey(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.Utxo.scriptPubKey)
}
inline std::string* Utxo::mutable_scriptpubkey() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.Utxo.scriptPubKey)
  return _internal_mutable_scriptpubkey();
}
inline const std::string& Utxo::_internal_scriptpubkey() const {
  return scriptpubkey_.GetNoArena();
}
inline void Utxo::_internal_set_scriptpubkey(const std::string& value) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Utxo::set_scriptpubkey(std::string&& value) {
  
  scriptpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.Utxo.scriptPubKey)
}
inline void Utxo::set_scriptpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.Utxo.scriptPubKey)
}
inline void Utxo::set_scriptpubkey(const char* value, size_t size) {
  
  scriptpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.Utxo.scriptPubKey)
}
inline std::string* Utxo::_internal_mutable_scriptpubkey() {
  
  return scriptpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Utxo::release_scriptpubkey() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.Utxo.scriptPubKey)
  
  return scriptpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Utxo::set_allocated_scriptpubkey(std::string* scriptpubkey) {
  if (scriptpubkey != nullptr) {
    
  } else {
    
  }
  scriptpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scriptpubkey);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.Utxo.scriptPubKey)
}

// int64 confirmations = 5;
inline void Utxo::clear_confirmations() {
  confirmations_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::_internal_confirmations() const {
  return confirmations_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Utxo::confirmations() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.Utxo.confirmations)
  return _internal_confirmations();
}
inline void Utxo::_internal_set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  confirmations_ = value;
}
inline void Utxo::set_confirmations(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_confirmations(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.Utxo.confirmations)
}

// -------------------------------------------------------------------

// ListUtxoResult

// repeated .lightwalletrpc.Utxo utxos = 1;
inline int ListUtxoResult::_internal_utxos_size() const {
  return utxos_.size();
}
inline int ListUtxoResult::utxos_size() const {
  return _internal_utxos_size();
}
inline void ListUtxoResult::clear_utxos() {
  utxos_.Clear();
}
inline ::lightwalletrpc::Utxo* ListUtxoResult::mutable_utxos(int index) {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.ListUtxoResult.utxos)
  return utxos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightwalletrpc::Utxo >*
ListUtxoResult::mutable_utxos() {
  // @@protoc_insertion_point(field_mutable_list:lightwalletrpc.ListUtxoResult.utxos)
  return &utxos_;
}
inline const ::lightwalletrpc::Utxo& ListUtxoResult::_internal_utxos(int index) const {
  return utxos_.Get(index);
}
inline const ::lightwalletrpc::Utxo& ListUtxoResult::utxos(int index) const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.ListUtxoResult.utxos)
  return _internal_utxos(index);
}
inline ::lightwalletrpc::Utxo* ListUtxoResult::_internal_add_utxos() {
  return utxos_.Add();
}
inline ::lightwalletrpc::Utxo* ListUtxoResult::add_utxos() {
  // @@protoc_insertion_point(field_add:lightwalletrpc.ListUtxoResult.utxos)
  return _internal_add_utxos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lightwalletrpc::Utxo >&
ListUtxoResult::utxos() const {
  // @@protoc_insertion_point(field_list:lightwalletrpc.ListUtxoResult.utxos)
  return utxos_;
}

// -------------------------------------------------------------------

// GetLastAddressRequest

// bool isChange = 1;
inline void GetLastAddressRequest::clear_ischange() {
  ischange_ = false;
}
inline bool GetLastAddressRequest::_internal_ischange() const {
  return ischange_;
}
inline bool GetLastAddressRequest::ischange() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetLastAddressRequest.isChange)
  return _internal_ischange();
}
inline void GetLastAddressRequest::_internal_set_ischange(bool value) {
  
  ischange_ = value;
}
inline void GetLastAddressRequest::set_ischange(bool value) {
  _internal_set_ischange(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetLastAddressRequest.isChange)
}

// -------------------------------------------------------------------

// GetLastAddressResponse

// string address = 1;
inline void GetLastAddressResponse::clear_address() {
  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLastAddressResponse::address() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetLastAddressResponse.address)
  return _internal_address();
}
inline void GetLastAddressResponse::set_address(const std::string& value) {
  _internal_set_address(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetLastAddressResponse.address)
}
inline std::string* GetLastAddressResponse::mutable_address() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetLastAddressResponse.address)
  return _internal_mutable_address();
}
inline const std::string& GetLastAddressResponse::_internal_address() const {
  return address_.GetNoArena();
}
inline void GetLastAddressResponse::_internal_set_address(const std::string& value) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLastAddressResponse::set_address(std::string&& value) {
  
  address_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetLastAddressResponse.address)
}
inline void GetLastAddressResponse::set_address(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetLastAddressResponse.address)
}
inline void GetLastAddressResponse::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetLastAddressResponse.address)
}
inline std::string* GetLastAddressResponse::_internal_mutable_address() {
  
  return address_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLastAddressResponse::release_address() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetLastAddressResponse.address)
  
  return address_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLastAddressResponse::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetLastAddressResponse.address)
}

// -------------------------------------------------------------------

// ListUtxosRequest

// int32 minConf = 1;
inline void ListUtxosRequest::clear_minconf() {
  minconf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUtxosRequest::_internal_minconf() const {
  return minconf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUtxosRequest::minconf() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.ListUtxosRequest.minConf)
  return _internal_minconf();
}
inline void ListUtxosRequest::_internal_set_minconf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  minconf_ = value;
}
inline void ListUtxosRequest::set_minconf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minconf(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.ListUtxosRequest.minConf)
}

// int32 maxConf = 2;
inline void ListUtxosRequest::clear_maxconf() {
  maxconf_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUtxosRequest::_internal_maxconf() const {
  return maxconf_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListUtxosRequest::maxconf() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.ListUtxosRequest.maxConf)
  return _internal_maxconf();
}
inline void ListUtxosRequest::_internal_set_maxconf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  maxconf_ = value;
}
inline void ListUtxosRequest::set_maxconf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxconf(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.ListUtxosRequest.maxConf)
}

// repeated string addresses = 3;
inline int ListUtxosRequest::_internal_addresses_size() const {
  return addresses_.size();
}
inline int ListUtxosRequest::addresses_size() const {
  return _internal_addresses_size();
}
inline void ListUtxosRequest::clear_addresses() {
  addresses_.Clear();
}
inline std::string* ListUtxosRequest::add_addresses() {
  // @@protoc_insertion_point(field_add_mutable:lightwalletrpc.ListUtxosRequest.addresses)
  return _internal_add_addresses();
}
inline const std::string& ListUtxosRequest::_internal_addresses(int index) const {
  return addresses_.Get(index);
}
inline const std::string& ListUtxosRequest::addresses(int index) const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.ListUtxosRequest.addresses)
  return _internal_addresses(index);
}
inline std::string* ListUtxosRequest::mutable_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.ListUtxosRequest.addresses)
  return addresses_.Mutable(index);
}
inline void ListUtxosRequest::set_addresses(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.ListUtxosRequest.addresses)
  addresses_.Mutable(index)->assign(value);
}
inline void ListUtxosRequest::set_addresses(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.ListUtxosRequest.addresses)
  addresses_.Mutable(index)->assign(std::move(value));
}
inline void ListUtxosRequest::set_addresses(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.ListUtxosRequest.addresses)
}
inline void ListUtxosRequest::set_addresses(int index, const char* value, size_t size) {
  addresses_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.ListUtxosRequest.addresses)
}
inline std::string* ListUtxosRequest::_internal_add_addresses() {
  return addresses_.Add();
}
inline void ListUtxosRequest::add_addresses(const std::string& value) {
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightwalletrpc.ListUtxosRequest.addresses)
}
inline void ListUtxosRequest::add_addresses(std::string&& value) {
  addresses_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightwalletrpc.ListUtxosRequest.addresses)
}
inline void ListUtxosRequest::add_addresses(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  addresses_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightwalletrpc.ListUtxosRequest.addresses)
}
inline void ListUtxosRequest::add_addresses(const char* value, size_t size) {
  addresses_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightwalletrpc.ListUtxosRequest.addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListUtxosRequest::addresses() const {
  // @@protoc_insertion_point(field_list:lightwalletrpc.ListUtxosRequest.addresses)
  return addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListUtxosRequest::mutable_addresses() {
  // @@protoc_insertion_point(field_mutable_list:lightwalletrpc.ListUtxosRequest.addresses)
  return &addresses_;
}

// -------------------------------------------------------------------

// GenerateRequest

// uint32 numBlocks = 1;
inline void GenerateRequest::clear_numblocks() {
  numblocks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenerateRequest::_internal_numblocks() const {
  return numblocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GenerateRequest::numblocks() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GenerateRequest.numBlocks)
  return _internal_numblocks();
}
inline void GenerateRequest::_internal_set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  numblocks_ = value;
}
inline void GenerateRequest::set_numblocks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_numblocks(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GenerateRequest.numBlocks)
}

// -------------------------------------------------------------------

// GenerateResponse

// repeated string blockHash = 1;
inline int GenerateResponse::_internal_blockhash_size() const {
  return blockhash_.size();
}
inline int GenerateResponse::blockhash_size() const {
  return _internal_blockhash_size();
}
inline void GenerateResponse::clear_blockhash() {
  blockhash_.Clear();
}
inline std::string* GenerateResponse::add_blockhash() {
  // @@protoc_insertion_point(field_add_mutable:lightwalletrpc.GenerateResponse.blockHash)
  return _internal_add_blockhash();
}
inline const std::string& GenerateResponse::_internal_blockhash(int index) const {
  return blockhash_.Get(index);
}
inline const std::string& GenerateResponse::blockhash(int index) const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GenerateResponse.blockHash)
  return _internal_blockhash(index);
}
inline std::string* GenerateResponse::mutable_blockhash(int index) {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GenerateResponse.blockHash)
  return blockhash_.Mutable(index);
}
inline void GenerateResponse::set_blockhash(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.GenerateResponse.blockHash)
  blockhash_.Mutable(index)->assign(value);
}
inline void GenerateResponse::set_blockhash(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lightwalletrpc.GenerateResponse.blockHash)
  blockhash_.Mutable(index)->assign(std::move(value));
}
inline void GenerateResponse::set_blockhash(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blockhash_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GenerateResponse.blockHash)
}
inline void GenerateResponse::set_blockhash(int index, const char* value, size_t size) {
  blockhash_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GenerateResponse.blockHash)
}
inline std::string* GenerateResponse::_internal_add_blockhash() {
  return blockhash_.Add();
}
inline void GenerateResponse::add_blockhash(const std::string& value) {
  blockhash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lightwalletrpc.GenerateResponse.blockHash)
}
inline void GenerateResponse::add_blockhash(std::string&& value) {
  blockhash_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lightwalletrpc.GenerateResponse.blockHash)
}
inline void GenerateResponse::add_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  blockhash_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lightwalletrpc.GenerateResponse.blockHash)
}
inline void GenerateResponse::add_blockhash(const char* value, size_t size) {
  blockhash_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lightwalletrpc.GenerateResponse.blockHash)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GenerateResponse::blockhash() const {
  // @@protoc_insertion_point(field_list:lightwalletrpc.GenerateResponse.blockHash)
  return blockhash_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GenerateResponse::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable_list:lightwalletrpc.GenerateResponse.blockHash)
  return &blockhash_;
}

// -------------------------------------------------------------------

// GetBlockResponse

// bytes block = 1;
inline void GetBlockResponse::clear_block() {
  block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetBlockResponse.block)
  return _internal_block();
}
inline void GetBlockResponse::set_block(const std::string& value) {
  _internal_set_block(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetBlockResponse.block)
}
inline std::string* GetBlockResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetBlockResponse.block)
  return _internal_mutable_block();
}
inline const std::string& GetBlockResponse::_internal_block() const {
  return block_.GetNoArena();
}
inline void GetBlockResponse::_internal_set_block(const std::string& value) {
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBlockResponse::set_block(std::string&& value) {
  
  block_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetBlockResponse.block)
}
inline void GetBlockResponse::set_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetBlockResponse.block)
}
inline void GetBlockResponse::set_block(const void* value, size_t size) {
  
  block_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetBlockResponse.block)
}
inline std::string* GetBlockResponse::_internal_mutable_block() {
  
  return block_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBlockResponse::release_block() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetBlockResponse.block)
  
  return block_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBlockResponse::set_allocated_block(std::string* block) {
  if (block != nullptr) {
    
  } else {
    
  }
  block_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetBlockResponse.block)
}

// -------------------------------------------------------------------

// GetConfirmedBalanceRequest

// int32 confs = 1;
inline void GetConfirmedBalanceRequest::clear_confs() {
  confs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetConfirmedBalanceRequest::_internal_confs() const {
  return confs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetConfirmedBalanceRequest::confs() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetConfirmedBalanceRequest.confs)
  return _internal_confs();
}
inline void GetConfirmedBalanceRequest::_internal_set_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  confs_ = value;
}
inline void GetConfirmedBalanceRequest::set_confs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_confs(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetConfirmedBalanceRequest.confs)
}

// -------------------------------------------------------------------

// GetConfirmedBalanceResponse

// int64 amount = 1;
inline void GetConfirmedBalanceResponse::clear_amount() {
  amount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConfirmedBalanceResponse::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetConfirmedBalanceResponse::amount() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetConfirmedBalanceResponse.amount)
  return _internal_amount();
}
inline void GetConfirmedBalanceResponse::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  amount_ = value;
}
inline void GetConfirmedBalanceResponse::set_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetConfirmedBalanceResponse.amount)
}

// -------------------------------------------------------------------

// EstimateNetworkFeeRequest

// uint64 blocks = 1;
inline void EstimateNetworkFeeRequest::clear_blocks() {
  blocks_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateNetworkFeeRequest::_internal_blocks() const {
  return blocks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 EstimateNetworkFeeRequest::blocks() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.EstimateNetworkFeeRequest.blocks)
  return _internal_blocks();
}
inline void EstimateNetworkFeeRequest::_internal_set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  blocks_ = value;
}
inline void EstimateNetworkFeeRequest::set_blocks(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_blocks(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.EstimateNetworkFeeRequest.blocks)
}

// -------------------------------------------------------------------

// EstimateNetworkFeeResponse

// int64 fee = 1;
inline void EstimateNetworkFeeResponse::clear_fee() {
  fee_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateNetworkFeeResponse::_internal_fee() const {
  return fee_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EstimateNetworkFeeResponse::fee() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.EstimateNetworkFeeResponse.fee)
  return _internal_fee();
}
inline void EstimateNetworkFeeResponse::_internal_set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  fee_ = value;
}
inline void EstimateNetworkFeeResponse::set_fee(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_fee(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.EstimateNetworkFeeResponse.fee)
}

// -------------------------------------------------------------------

// GetRawTransactionResponse

// string transactionHex = 1;
inline void GetRawTransactionResponse::clear_transactionhex() {
  transactionhex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRawTransactionResponse::transactionhex() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTransactionResponse.transactionHex)
  return _internal_transactionhex();
}
inline void GetRawTransactionResponse::set_transactionhex(const std::string& value) {
  _internal_set_transactionhex(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTransactionResponse.transactionHex)
}
inline std::string* GetRawTransactionResponse::mutable_transactionhex() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetRawTransactionResponse.transactionHex)
  return _internal_mutable_transactionhex();
}
inline const std::string& GetRawTransactionResponse::_internal_transactionhex() const {
  return transactionhex_.GetNoArena();
}
inline void GetRawTransactionResponse::_internal_set_transactionhex(const std::string& value) {
  
  transactionhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRawTransactionResponse::set_transactionhex(std::string&& value) {
  
  transactionhex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetRawTransactionResponse.transactionHex)
}
inline void GetRawTransactionResponse::set_transactionhex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetRawTransactionResponse.transactionHex)
}
inline void GetRawTransactionResponse::set_transactionhex(const char* value, size_t size) {
  
  transactionhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetRawTransactionResponse.transactionHex)
}
inline std::string* GetRawTransactionResponse::_internal_mutable_transactionhex() {
  
  return transactionhex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRawTransactionResponse::release_transactionhex() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetRawTransactionResponse.transactionHex)
  
  return transactionhex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRawTransactionResponse::set_allocated_transactionhex(std::string* transactionhex) {
  if (transactionhex != nullptr) {
    
  } else {
    
  }
  transactionhex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionhex);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetRawTransactionResponse.transactionHex)
}

// string blockHash = 2;
inline void GetRawTransactionResponse::clear_blockhash() {
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRawTransactionResponse::blockhash() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTransactionResponse.blockHash)
  return _internal_blockhash();
}
inline void GetRawTransactionResponse::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTransactionResponse.blockHash)
}
inline std::string* GetRawTransactionResponse::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetRawTransactionResponse.blockHash)
  return _internal_mutable_blockhash();
}
inline const std::string& GetRawTransactionResponse::_internal_blockhash() const {
  return blockhash_.GetNoArena();
}
inline void GetRawTransactionResponse::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRawTransactionResponse::set_blockhash(std::string&& value) {
  
  blockhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetRawTransactionResponse.blockHash)
}
inline void GetRawTransactionResponse::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetRawTransactionResponse.blockHash)
}
inline void GetRawTransactionResponse::set_blockhash(const char* value, size_t size) {
  
  blockhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetRawTransactionResponse.blockHash)
}
inline std::string* GetRawTransactionResponse::_internal_mutable_blockhash() {
  
  return blockhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRawTransactionResponse::release_blockhash() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetRawTransactionResponse.blockHash)
  
  return blockhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRawTransactionResponse::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetRawTransactionResponse.blockHash)
}

// uint32 blockHeight = 3;
inline void GetRawTransactionResponse::clear_blockheight() {
  blockheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTransactionResponse::_internal_blockheight() const {
  return blockheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTransactionResponse::blockheight() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTransactionResponse.blockHeight)
  return _internal_blockheight();
}
inline void GetRawTransactionResponse::_internal_set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blockheight_ = value;
}
inline void GetRawTransactionResponse::set_blockheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blockheight(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTransactionResponse.blockHeight)
}

// uint32 txIndex = 4;
inline void GetRawTransactionResponse::clear_txindex() {
  txindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTransactionResponse::_internal_txindex() const {
  return txindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTransactionResponse::txindex() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTransactionResponse.txIndex)
  return _internal_txindex();
}
inline void GetRawTransactionResponse::_internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  txindex_ = value;
}
inline void GetRawTransactionResponse::set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_txindex(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTransactionResponse.txIndex)
}

// -------------------------------------------------------------------

// GetRawTxByIndexRequest

// int64 blockNum = 1;
inline void GetRawTxByIndexRequest::clear_blocknum() {
  blocknum_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawTxByIndexRequest::_internal_blocknum() const {
  return blocknum_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetRawTxByIndexRequest::blocknum() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTxByIndexRequest.blockNum)
  return _internal_blocknum();
}
inline void GetRawTxByIndexRequest::_internal_set_blocknum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  blocknum_ = value;
}
inline void GetRawTxByIndexRequest::set_blocknum(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_blocknum(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTxByIndexRequest.blockNum)
}

// uint32 txIndex = 2;
inline void GetRawTxByIndexRequest::clear_txindex() {
  txindex_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTxByIndexRequest::_internal_txindex() const {
  return txindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRawTxByIndexRequest::txindex() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTxByIndexRequest.txIndex)
  return _internal_txindex();
}
inline void GetRawTxByIndexRequest::_internal_set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  txindex_ = value;
}
inline void GetRawTxByIndexRequest::set_txindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_txindex(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTxByIndexRequest.txIndex)
}

// -------------------------------------------------------------------

// GetRawTxByIndexResponse

// string txHex = 1;
inline void GetRawTxByIndexResponse::clear_txhex() {
  txhex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRawTxByIndexResponse::txhex() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.GetRawTxByIndexResponse.txHex)
  return _internal_txhex();
}
inline void GetRawTxByIndexResponse::set_txhex(const std::string& value) {
  _internal_set_txhex(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.GetRawTxByIndexResponse.txHex)
}
inline std::string* GetRawTxByIndexResponse::mutable_txhex() {
  // @@protoc_insertion_point(field_mutable:lightwalletrpc.GetRawTxByIndexResponse.txHex)
  return _internal_mutable_txhex();
}
inline const std::string& GetRawTxByIndexResponse::_internal_txhex() const {
  return txhex_.GetNoArena();
}
inline void GetRawTxByIndexResponse::_internal_set_txhex(const std::string& value) {
  
  txhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRawTxByIndexResponse::set_txhex(std::string&& value) {
  
  txhex_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lightwalletrpc.GetRawTxByIndexResponse.txHex)
}
inline void GetRawTxByIndexResponse::set_txhex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lightwalletrpc.GetRawTxByIndexResponse.txHex)
}
inline void GetRawTxByIndexResponse::set_txhex(const char* value, size_t size) {
  
  txhex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lightwalletrpc.GetRawTxByIndexResponse.txHex)
}
inline std::string* GetRawTxByIndexResponse::_internal_mutable_txhex() {
  
  return txhex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRawTxByIndexResponse::release_txhex() {
  // @@protoc_insertion_point(field_release:lightwalletrpc.GetRawTxByIndexResponse.txHex)
  
  return txhex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRawTxByIndexResponse::set_allocated_txhex(std::string* txhex) {
  if (txhex != nullptr) {
    
  } else {
    
  }
  txhex_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txhex);
  // @@protoc_insertion_point(field_set_allocated:lightwalletrpc.GetRawTxByIndexResponse.txHex)
}

// -------------------------------------------------------------------

// LoadCacheRequest

// uint32 startHeight = 1;
inline void LoadCacheRequest::clear_startheight() {
  startheight_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadCacheRequest::_internal_startheight() const {
  return startheight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoadCacheRequest::startheight() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.LoadCacheRequest.startHeight)
  return _internal_startheight();
}
inline void LoadCacheRequest::_internal_set_startheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startheight_ = value;
}
inline void LoadCacheRequest::set_startheight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startheight(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.LoadCacheRequest.startHeight)
}

// -------------------------------------------------------------------

// LoadCacheResponse

// bool loaded = 1;
inline void LoadCacheResponse::clear_loaded() {
  loaded_ = false;
}
inline bool LoadCacheResponse::_internal_loaded() const {
  return loaded_;
}
inline bool LoadCacheResponse::loaded() const {
  // @@protoc_insertion_point(field_get:lightwalletrpc.LoadCacheResponse.loaded)
  return _internal_loaded();
}
inline void LoadCacheResponse::_internal_set_loaded(bool value) {
  
  loaded_ = value;
}
inline void LoadCacheResponse::set_loaded(bool value) {
  _internal_set_loaded(value);
  // @@protoc_insertion_point(field_set:lightwalletrpc.LoadCacheResponse.loaded)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lightwalletrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LightWalletService_2eproto
