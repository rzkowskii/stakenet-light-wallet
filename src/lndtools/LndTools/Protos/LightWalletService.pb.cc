// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LightWalletService.proto

#include "LightWalletService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LightWalletService_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Utxo_LightWalletService_2eproto;
namespace lightwalletrpc {
class GetChainInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChainInfoResponse> _instance;
} _GetChainInfoResponse_default_instance_;
class GetBlockHeaderRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockHeaderRequest> _instance;
} _GetBlockHeaderRequest_default_instance_;
class FilterBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterBlockResponse> _instance;
} _FilterBlockResponse_default_instance_;
class BlockFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockFilter> _instance;
} _BlockFilter_default_instance_;
class DumpPrivKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DumpPrivKeyRequest> _instance;
} _DumpPrivKeyRequest_default_instance_;
class UtxoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Utxo> _instance;
} _Utxo_default_instance_;
class ListUtxoResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUtxoResult> _instance;
} _ListUtxoResult_default_instance_;
class GetLastAddressRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastAddressRequest> _instance;
} _GetLastAddressRequest_default_instance_;
class GetLastAddressResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLastAddressResponse> _instance;
} _GetLastAddressResponse_default_instance_;
class ListUtxosRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUtxosRequest> _instance;
} _ListUtxosRequest_default_instance_;
class GenerateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateRequest> _instance;
} _GenerateRequest_default_instance_;
class GenerateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateResponse> _instance;
} _GenerateResponse_default_instance_;
class GetBlockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBlockResponse> _instance;
} _GetBlockResponse_default_instance_;
class GetConfirmedBalanceRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConfirmedBalanceRequest> _instance;
} _GetConfirmedBalanceRequest_default_instance_;
class GetConfirmedBalanceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConfirmedBalanceResponse> _instance;
} _GetConfirmedBalanceResponse_default_instance_;
class EstimateNetworkFeeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateNetworkFeeRequest> _instance;
} _EstimateNetworkFeeRequest_default_instance_;
class EstimateNetworkFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EstimateNetworkFeeResponse> _instance;
} _EstimateNetworkFeeResponse_default_instance_;
class GetRawTransactionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawTransactionResponse> _instance;
} _GetRawTransactionResponse_default_instance_;
class GetRawTxByIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawTxByIndexRequest> _instance;
} _GetRawTxByIndexRequest_default_instance_;
class GetRawTxByIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRawTxByIndexResponse> _instance;
} _GetRawTxByIndexResponse_default_instance_;
class LoadCacheRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCacheRequest> _instance;
} _LoadCacheRequest_default_instance_;
class LoadCacheResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoadCacheResponse> _instance;
} _LoadCacheResponse_default_instance_;
}  // namespace lightwalletrpc
static void InitDefaultsscc_info_BlockFilter_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_BlockFilter_default_instance_;
    new (ptr) ::lightwalletrpc::BlockFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::BlockFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BlockFilter_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BlockFilter_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_DumpPrivKeyRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_DumpPrivKeyRequest_default_instance_;
    new (ptr) ::lightwalletrpc::DumpPrivKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::DumpPrivKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DumpPrivKeyRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DumpPrivKeyRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_EstimateNetworkFeeRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_EstimateNetworkFeeRequest_default_instance_;
    new (ptr) ::lightwalletrpc::EstimateNetworkFeeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::EstimateNetworkFeeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstimateNetworkFeeRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EstimateNetworkFeeRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_EstimateNetworkFeeResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_EstimateNetworkFeeResponse_default_instance_;
    new (ptr) ::lightwalletrpc::EstimateNetworkFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::EstimateNetworkFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EstimateNetworkFeeResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EstimateNetworkFeeResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_FilterBlockResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_FilterBlockResponse_default_instance_;
    new (ptr) ::lightwalletrpc::FilterBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::FilterBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterBlockResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterBlockResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GenerateRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GenerateRequest_default_instance_;
    new (ptr) ::lightwalletrpc::GenerateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GenerateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GenerateResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GenerateResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GenerateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GenerateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockHeaderRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetBlockHeaderRequest_default_instance_;
    new (ptr) ::lightwalletrpc::GetBlockHeaderRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetBlockHeaderRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockHeaderRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockHeaderRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetBlockResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetBlockResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetBlockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetBlockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBlockResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBlockResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetChainInfoResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetChainInfoResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetChainInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetChainInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChainInfoResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChainInfoResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetConfirmedBalanceRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetConfirmedBalanceRequest_default_instance_;
    new (ptr) ::lightwalletrpc::GetConfirmedBalanceRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetConfirmedBalanceRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConfirmedBalanceRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConfirmedBalanceRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetConfirmedBalanceResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetConfirmedBalanceResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetConfirmedBalanceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetConfirmedBalanceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConfirmedBalanceResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConfirmedBalanceResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetLastAddressRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetLastAddressRequest_default_instance_;
    new (ptr) ::lightwalletrpc::GetLastAddressRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetLastAddressRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastAddressRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastAddressRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetLastAddressResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetLastAddressResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetLastAddressResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetLastAddressResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLastAddressResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLastAddressResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetRawTransactionResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetRawTransactionResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetRawTransactionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetRawTransactionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawTransactionResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawTransactionResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetRawTxByIndexRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetRawTxByIndexRequest_default_instance_;
    new (ptr) ::lightwalletrpc::GetRawTxByIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetRawTxByIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawTxByIndexRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawTxByIndexRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_GetRawTxByIndexResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_GetRawTxByIndexResponse_default_instance_;
    new (ptr) ::lightwalletrpc::GetRawTxByIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::GetRawTxByIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetRawTxByIndexResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetRawTxByIndexResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_ListUtxoResult_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_ListUtxoResult_default_instance_;
    new (ptr) ::lightwalletrpc::ListUtxoResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::ListUtxoResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUtxoResult_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUtxoResult_LightWalletService_2eproto}, {
      &scc_info_Utxo_LightWalletService_2eproto.base,}};

static void InitDefaultsscc_info_ListUtxosRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_ListUtxosRequest_default_instance_;
    new (ptr) ::lightwalletrpc::ListUtxosRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::ListUtxosRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUtxosRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUtxosRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_LoadCacheRequest_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_LoadCacheRequest_default_instance_;
    new (ptr) ::lightwalletrpc::LoadCacheRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::LoadCacheRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCacheRequest_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadCacheRequest_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_LoadCacheResponse_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_LoadCacheResponse_default_instance_;
    new (ptr) ::lightwalletrpc::LoadCacheResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::LoadCacheResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoadCacheResponse_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoadCacheResponse_LightWalletService_2eproto}, {}};

static void InitDefaultsscc_info_Utxo_LightWalletService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::lightwalletrpc::_Utxo_default_instance_;
    new (ptr) ::lightwalletrpc::Utxo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lightwalletrpc::Utxo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Utxo_LightWalletService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Utxo_LightWalletService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_LightWalletService_2eproto[22];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_LightWalletService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_LightWalletService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_LightWalletService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetChainInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetChainInfoResponse, bestblockhash_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetChainInfoResponse, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetBlockHeaderRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetBlockHeaderRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetBlockHeaderRequest, verbose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::FilterBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::FilterBlockResponse, transactions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::BlockFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::BlockFilter, n_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::BlockFilter, m_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::BlockFilter, p_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::BlockFilter, bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::DumpPrivKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::DumpPrivKeyRequest, scriptpubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, vout_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, txid_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, value_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, scriptpubkey_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::Utxo, confirmations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxoResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxoResult, utxos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetLastAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetLastAddressRequest, ischange_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetLastAddressResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetLastAddressResponse, address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxosRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxosRequest, minconf_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxosRequest, maxconf_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::ListUtxosRequest, addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GenerateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GenerateRequest, numblocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GenerateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GenerateResponse, blockhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetBlockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetBlockResponse, block_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetConfirmedBalanceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetConfirmedBalanceRequest, confs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetConfirmedBalanceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetConfirmedBalanceResponse, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::EstimateNetworkFeeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::EstimateNetworkFeeRequest, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::EstimateNetworkFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::EstimateNetworkFeeResponse, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTransactionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTransactionResponse, transactionhex_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTransactionResponse, blockhash_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTransactionResponse, blockheight_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTransactionResponse, txindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTxByIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTxByIndexRequest, blocknum_),
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTxByIndexRequest, txindex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTxByIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::GetRawTxByIndexResponse, txhex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::LoadCacheRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::LoadCacheRequest, startheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::LoadCacheResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lightwalletrpc::LoadCacheResponse, loaded_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::lightwalletrpc::GetChainInfoResponse)},
  { 7, -1, sizeof(::lightwalletrpc::GetBlockHeaderRequest)},
  { 14, -1, sizeof(::lightwalletrpc::FilterBlockResponse)},
  { 20, -1, sizeof(::lightwalletrpc::BlockFilter)},
  { 29, -1, sizeof(::lightwalletrpc::DumpPrivKeyRequest)},
  { 35, -1, sizeof(::lightwalletrpc::Utxo)},
  { 45, -1, sizeof(::lightwalletrpc::ListUtxoResult)},
  { 51, -1, sizeof(::lightwalletrpc::GetLastAddressRequest)},
  { 57, -1, sizeof(::lightwalletrpc::GetLastAddressResponse)},
  { 63, -1, sizeof(::lightwalletrpc::ListUtxosRequest)},
  { 71, -1, sizeof(::lightwalletrpc::GenerateRequest)},
  { 77, -1, sizeof(::lightwalletrpc::GenerateResponse)},
  { 83, -1, sizeof(::lightwalletrpc::GetBlockResponse)},
  { 89, -1, sizeof(::lightwalletrpc::GetConfirmedBalanceRequest)},
  { 95, -1, sizeof(::lightwalletrpc::GetConfirmedBalanceResponse)},
  { 101, -1, sizeof(::lightwalletrpc::EstimateNetworkFeeRequest)},
  { 107, -1, sizeof(::lightwalletrpc::EstimateNetworkFeeResponse)},
  { 113, -1, sizeof(::lightwalletrpc::GetRawTransactionResponse)},
  { 122, -1, sizeof(::lightwalletrpc::GetRawTxByIndexRequest)},
  { 129, -1, sizeof(::lightwalletrpc::GetRawTxByIndexResponse)},
  { 135, -1, sizeof(::lightwalletrpc::LoadCacheRequest)},
  { 141, -1, sizeof(::lightwalletrpc::LoadCacheResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetChainInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetBlockHeaderRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_FilterBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_BlockFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_DumpPrivKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_Utxo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_ListUtxoResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetLastAddressRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetLastAddressResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_ListUtxosRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GenerateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GenerateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetBlockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetConfirmedBalanceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetConfirmedBalanceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_EstimateNetworkFeeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_EstimateNetworkFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetRawTransactionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetRawTxByIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_GetRawTxByIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_LoadCacheRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::lightwalletrpc::_LoadCacheResponse_default_instance_),
};

const char descriptor_table_protodef_LightWalletService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030LightWalletService.proto\022\016lightwalletr"
  "pc\032\014Common.proto\"=\n\024GetChainInfoResponse"
  "\022\025\n\rbestBlockHash\030\001 \001(\t\022\016\n\006height\030\002 \001(\005\""
  "6\n\025GetBlockHeaderRequest\022\014\n\004hash\030\001 \001(\t\022\017"
  "\n\007verbose\030\002 \001(\010\"+\n\023FilterBlockResponse\022\024"
  "\n\014transactions\030\001 \003(\t\"=\n\013BlockFilter\022\t\n\001n"
  "\030\001 \001(\r\022\t\n\001m\030\002 \001(\004\022\t\n\001p\030\003 \001(\r\022\r\n\005bytes\030\004 "
  "\001(\t\"*\n\022DumpPrivKeyRequest\022\024\n\014scriptPubKe"
  "y\030\001 \001(\t\"^\n\004Utxo\022\014\n\004vout\030\001 \001(\r\022\014\n\004txid\030\002 "
  "\001(\t\022\r\n\005value\030\003 \001(\003\022\024\n\014scriptPubKey\030\004 \001(\t"
  "\022\025\n\rconfirmations\030\005 \001(\003\"5\n\016ListUtxoResul"
  "t\022#\n\005utxos\030\001 \003(\0132\024.lightwalletrpc.Utxo\")"
  "\n\025GetLastAddressRequest\022\020\n\010isChange\030\001 \001("
  "\010\")\n\026GetLastAddressResponse\022\017\n\007address\030\001"
  " \001(\t\"G\n\020ListUtxosRequest\022\017\n\007minConf\030\001 \001("
  "\005\022\017\n\007maxConf\030\002 \001(\005\022\021\n\taddresses\030\003 \003(\t\"$\n"
  "\017GenerateRequest\022\021\n\tnumBlocks\030\001 \001(\r\"%\n\020G"
  "enerateResponse\022\021\n\tblockHash\030\001 \003(\t\"!\n\020Ge"
  "tBlockResponse\022\r\n\005block\030\001 \001(\014\"+\n\032GetConf"
  "irmedBalanceRequest\022\r\n\005confs\030\001 \001(\005\"-\n\033Ge"
  "tConfirmedBalanceResponse\022\016\n\006amount\030\001 \001("
  "\003\"+\n\031EstimateNetworkFeeRequest\022\016\n\006blocks"
  "\030\001 \001(\004\")\n\032EstimateNetworkFeeResponse\022\013\n\003"
  "fee\030\001 \001(\003\"l\n\031GetRawTransactionResponse\022\026"
  "\n\016transactionHex\030\001 \001(\t\022\021\n\tblockHash\030\002 \001("
  "\t\022\023\n\013blockHeight\030\003 \001(\r\022\017\n\007txIndex\030\004 \001(\r\""
  ";\n\026GetRawTxByIndexRequest\022\020\n\010blockNum\030\001 "
  "\001(\003\022\017\n\007txIndex\030\002 \001(\r\"(\n\027GetRawTxByIndexR"
  "esponse\022\r\n\005txHex\030\001 \001(\t\"\'\n\020LoadCacheReque"
  "st\022\023\n\013startHeight\030\001 \001(\r\"#\n\021LoadCacheResp"
  "onse\022\016\n\006loaded\030\001 \001(\0102\217\016\n\022LightWalletServ"
  "ice\022K\n\014GetChainInfo\022\025.lightwalletrpc.Emp"
  "ty\032$.lightwalletrpc.GetChainInfoResponse"
  "\022A\n\014GetBlockHash\022\026.lightwalletrpc.Height"
  "\032\031.lightwalletrpc.BlockHash\022G\n\010GetBlock\022"
  "\031.lightwalletrpc.BlockHash\032 .lightwallet"
  "rpc.GetBlockResponse\022G\n\016GetBlockHeader\022\031"
  ".lightwalletrpc.BlockHash\032\032.lightwalletr"
  "pc.HexEncoded\022O\n\025GetBlockHeaderVerbose\022\031"
  ".lightwalletrpc.BlockHash\032\033.lightwalletr"
  "pc.BlockHeader\022P\n\016GetFilterBlock\022\031.light"
  "walletrpc.BlockHash\032#.lightwalletrpc.Fil"
  "terBlockResponse\022H\n\016GetBlockFilter\022\031.lig"
  "htwalletrpc.BlockHash\032\033.lightwalletrpc.B"
  "lockFilter\022;\n\010GetTxOut\022\030.lightwalletrpc."
  "Outpoint\032\025.lightwalletrpc.TxOut\022T\n\021GetRa"
  "wTransaction\022\024.lightwalletrpc.TxID\032).lig"
  "htwalletrpc.GetRawTransactionResponse\022b\n"
  "\017GetRawTxByIndex\022&.lightwalletrpc.GetRaw"
  "TxByIndexRequest\032\'.lightwalletrpc.GetRaw"
  "TxByIndexResponse\022_\n\016GetLastAddress\022%.li"
  "ghtwalletrpc.GetLastAddressRequest\032&.lig"
  "htwalletrpc.GetLastAddressResponse\022M\n\tLi"
  "stUtxos\022 .lightwalletrpc.ListUtxosReques"
  "t\032\036.lightwalletrpc.ListUtxoResult\022M\n\013Dum"
  "pPrivKey\022\".lightwalletrpc.DumpPrivKeyReq"
  "uest\032\032.lightwalletrpc.HexEncoded\022F\n\022Send"
  "RawTransaction\022\032.lightwalletrpc.HexEncod"
  "ed\032\024.lightwalletrpc.TxID\022n\n\023GetConfirmed"
  "Balance\022*.lightwalletrpc.GetConfirmedBal"
  "anceRequest\032+.lightwalletrpc.GetConfirme"
  "dBalanceResponse\022M\n\010Generate\022\037.lightwall"
  "etrpc.GenerateRequest\032 .lightwalletrpc.G"
  "enerateResponse\022[\n\024LoadSecondLayerCache\022"
  " .lightwalletrpc.LoadCacheRequest\032!.ligh"
  "twalletrpc.LoadCacheResponse\022D\n\024FreeSeco"
  "ndLayerCache\022\025.lightwalletrpc.Empty\032\025.li"
  "ghtwalletrpc.Empty\022k\n\022EstimateNetworkFee"
  "\022).lightwalletrpc.EstimateNetworkFeeRequ"
  "est\032*.lightwalletrpc.EstimateNetworkFeeR"
  "esponse\022\?\n\014LockOutpoint\022\030.lightwalletrpc"
  ".Outpoint\032\025.lightwalletrpc.Empty\022A\n\016Unlo"
  "ckOutpoint\022\030.lightwalletrpc.Outpoint\032\025.l"
  "ightwalletrpc.Empty\022Y\n\022GetSpendingDetail"
  "s\022\030.lightwalletrpc.Outpoint\032).lightwalle"
  "trpc.GetRawTransactionResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_LightWalletService_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_LightWalletService_2eproto_sccs[22] = {
  &scc_info_BlockFilter_LightWalletService_2eproto.base,
  &scc_info_DumpPrivKeyRequest_LightWalletService_2eproto.base,
  &scc_info_EstimateNetworkFeeRequest_LightWalletService_2eproto.base,
  &scc_info_EstimateNetworkFeeResponse_LightWalletService_2eproto.base,
  &scc_info_FilterBlockResponse_LightWalletService_2eproto.base,
  &scc_info_GenerateRequest_LightWalletService_2eproto.base,
  &scc_info_GenerateResponse_LightWalletService_2eproto.base,
  &scc_info_GetBlockHeaderRequest_LightWalletService_2eproto.base,
  &scc_info_GetBlockResponse_LightWalletService_2eproto.base,
  &scc_info_GetChainInfoResponse_LightWalletService_2eproto.base,
  &scc_info_GetConfirmedBalanceRequest_LightWalletService_2eproto.base,
  &scc_info_GetConfirmedBalanceResponse_LightWalletService_2eproto.base,
  &scc_info_GetLastAddressRequest_LightWalletService_2eproto.base,
  &scc_info_GetLastAddressResponse_LightWalletService_2eproto.base,
  &scc_info_GetRawTransactionResponse_LightWalletService_2eproto.base,
  &scc_info_GetRawTxByIndexRequest_LightWalletService_2eproto.base,
  &scc_info_GetRawTxByIndexResponse_LightWalletService_2eproto.base,
  &scc_info_ListUtxoResult_LightWalletService_2eproto.base,
  &scc_info_ListUtxosRequest_LightWalletService_2eproto.base,
  &scc_info_LoadCacheRequest_LightWalletService_2eproto.base,
  &scc_info_LoadCacheResponse_LightWalletService_2eproto.base,
  &scc_info_Utxo_LightWalletService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_LightWalletService_2eproto_once;
static bool descriptor_table_LightWalletService_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_LightWalletService_2eproto = {
  &descriptor_table_LightWalletService_2eproto_initialized, descriptor_table_protodef_LightWalletService_2eproto, "LightWalletService.proto", 3038,
  &descriptor_table_LightWalletService_2eproto_once, descriptor_table_LightWalletService_2eproto_sccs, descriptor_table_LightWalletService_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_LightWalletService_2eproto::offsets,
  file_level_metadata_LightWalletService_2eproto, 22, file_level_enum_descriptors_LightWalletService_2eproto, file_level_service_descriptors_LightWalletService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_LightWalletService_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_LightWalletService_2eproto), true);
namespace lightwalletrpc {

// ===================================================================

void GetChainInfoResponse::InitAsDefaultInstance() {
}
class GetChainInfoResponse::_Internal {
 public:
};

GetChainInfoResponse::GetChainInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetChainInfoResponse)
}
GetChainInfoResponse::GetChainInfoResponse(const GetChainInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bestblockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bestblockhash().empty()) {
    bestblockhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bestblockhash_);
  }
  height_ = from.height_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetChainInfoResponse)
}

void GetChainInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChainInfoResponse_LightWalletService_2eproto.base);
  bestblockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0;
}

GetChainInfoResponse::~GetChainInfoResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetChainInfoResponse)
  SharedDtor();
}

void GetChainInfoResponse::SharedDtor() {
  bestblockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChainInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChainInfoResponse& GetChainInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChainInfoResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetChainInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetChainInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bestblockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  height_ = 0;
  _internal_metadata_.Clear();
}

const char* GetChainInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string bestBlockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_bestblockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetChainInfoResponse.bestBlockHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChainInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetChainInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bestBlockHash = 1;
  if (this->bestblockhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bestblockhash().data(), static_cast<int>(this->_internal_bestblockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetChainInfoResponse.bestBlockHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bestblockhash(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetChainInfoResponse)
  return target;
}

size_t GetChainInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetChainInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bestBlockHash = 1;
  if (this->bestblockhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bestblockhash());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChainInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetChainInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChainInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChainInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetChainInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetChainInfoResponse)
    MergeFrom(*source);
  }
}

void GetChainInfoResponse::MergeFrom(const GetChainInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetChainInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bestblockhash().size() > 0) {

    bestblockhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bestblockhash_);
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void GetChainInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetChainInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChainInfoResponse::CopyFrom(const GetChainInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetChainInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChainInfoResponse::IsInitialized() const {
  return true;
}

void GetChainInfoResponse::InternalSwap(GetChainInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bestblockhash_.Swap(&other->bestblockhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(height_, other->height_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChainInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockHeaderRequest::InitAsDefaultInstance() {
}
class GetBlockHeaderRequest::_Internal {
 public:
};

GetBlockHeaderRequest::GetBlockHeaderRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetBlockHeaderRequest)
}
GetBlockHeaderRequest::GetBlockHeaderRequest(const GetBlockHeaderRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  verbose_ = from.verbose_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetBlockHeaderRequest)
}

void GetBlockHeaderRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockHeaderRequest_LightWalletService_2eproto.base);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbose_ = false;
}

GetBlockHeaderRequest::~GetBlockHeaderRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetBlockHeaderRequest)
  SharedDtor();
}

void GetBlockHeaderRequest::SharedDtor() {
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockHeaderRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockHeaderRequest& GetBlockHeaderRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockHeaderRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetBlockHeaderRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  verbose_ = false;
  _internal_metadata_.Clear();
}

const char* GetBlockHeaderRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetBlockHeaderRequest.hash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool verbose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockHeaderRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetBlockHeaderRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetBlockHeaderRequest.hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hash(), target);
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_verbose(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetBlockHeaderRequest)
  return target;
}

size_t GetBlockHeaderRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetBlockHeaderRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hash = 1;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hash());
  }

  // bool verbose = 2;
  if (this->verbose() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockHeaderRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockHeaderRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockHeaderRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetBlockHeaderRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetBlockHeaderRequest)
    MergeFrom(*source);
  }
}

void GetBlockHeaderRequest::MergeFrom(const GetBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetBlockHeaderRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.verbose() != 0) {
    _internal_set_verbose(from._internal_verbose());
  }
}

void GetBlockHeaderRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockHeaderRequest::CopyFrom(const GetBlockHeaderRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetBlockHeaderRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockHeaderRequest::IsInitialized() const {
  return true;
}

void GetBlockHeaderRequest::InternalSwap(GetBlockHeaderRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(verbose_, other->verbose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockHeaderRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterBlockResponse::InitAsDefaultInstance() {
}
class FilterBlockResponse::_Internal {
 public:
};

FilterBlockResponse::FilterBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.FilterBlockResponse)
}
FilterBlockResponse::FilterBlockResponse(const FilterBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.FilterBlockResponse)
}

void FilterBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterBlockResponse_LightWalletService_2eproto.base);
}

FilterBlockResponse::~FilterBlockResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.FilterBlockResponse)
  SharedDtor();
}

void FilterBlockResponse::SharedDtor() {
}

void FilterBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterBlockResponse& FilterBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterBlockResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void FilterBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.FilterBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear();
}

const char* FilterBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_transactions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.FilterBlockResponse.transactions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.FilterBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string transactions = 1;
  for (int i = 0, n = this->_internal_transactions_size(); i < n; i++) {
    const auto& s = this->_internal_transactions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.FilterBlockResponse.transactions");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.FilterBlockResponse)
  return target;
}

size_t FilterBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.FilterBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string transactions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(transactions_.size());
  for (int i = 0, n = transactions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      transactions_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.FilterBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.FilterBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.FilterBlockResponse)
    MergeFrom(*source);
  }
}

void FilterBlockResponse::MergeFrom(const FilterBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.FilterBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void FilterBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.FilterBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterBlockResponse::CopyFrom(const FilterBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.FilterBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterBlockResponse::IsInitialized() const {
  return true;
}

void FilterBlockResponse::InternalSwap(FilterBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BlockFilter::InitAsDefaultInstance() {
}
class BlockFilter::_Internal {
 public:
};

BlockFilter::BlockFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.BlockFilter)
}
BlockFilter::BlockFilter(const BlockFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_bytes().empty()) {
    bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_);
  }
  ::memcpy(&m_, &from.m_,
    static_cast<size_t>(reinterpret_cast<char*>(&p_) -
    reinterpret_cast<char*>(&m_)) + sizeof(p_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.BlockFilter)
}

void BlockFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockFilter_LightWalletService_2eproto.base);
  bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_) -
      reinterpret_cast<char*>(&m_)) + sizeof(p_));
}

BlockFilter::~BlockFilter() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.BlockFilter)
  SharedDtor();
}

void BlockFilter::SharedDtor() {
  bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlockFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockFilter& BlockFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockFilter_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void BlockFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.BlockFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p_) -
      reinterpret_cast<char*>(&m_)) + sizeof(p_));
  _internal_metadata_.Clear();
}

const char* BlockFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 p = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.BlockFilter.bytes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.BlockFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 n = 1;
  if (this->n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_n(), target);
  }

  // uint64 m = 2;
  if (this->m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_m(), target);
  }

  // uint32 p = 3;
  if (this->p() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_p(), target);
  }

  // string bytes = 4;
  if (this->bytes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bytes().data(), static_cast<int>(this->_internal_bytes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.BlockFilter.bytes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.BlockFilter)
  return target;
}

size_t BlockFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.BlockFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bytes = 4;
  if (this->bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bytes());
  }

  // uint64 m = 2;
  if (this->m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_m());
  }

  // uint32 n = 1;
  if (this->n() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_n());
  }

  // uint32 p = 3;
  if (this->p() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_p());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.BlockFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.BlockFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.BlockFilter)
    MergeFrom(*source);
  }
}

void BlockFilter::MergeFrom(const BlockFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.BlockFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bytes().size() > 0) {

    bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.bytes_);
  }
  if (from.m() != 0) {
    _internal_set_m(from._internal_m());
  }
  if (from.n() != 0) {
    _internal_set_n(from._internal_n());
  }
  if (from.p() != 0) {
    _internal_set_p(from._internal_p());
  }
}

void BlockFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.BlockFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockFilter::CopyFrom(const BlockFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.BlockFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockFilter::IsInitialized() const {
  return true;
}

void BlockFilter::InternalSwap(BlockFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bytes_.Swap(&other->bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(m_, other->m_);
  swap(n_, other->n_);
  swap(p_, other->p_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DumpPrivKeyRequest::InitAsDefaultInstance() {
}
class DumpPrivKeyRequest::_Internal {
 public:
};

DumpPrivKeyRequest::DumpPrivKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.DumpPrivKeyRequest)
}
DumpPrivKeyRequest::DumpPrivKeyRequest(const DumpPrivKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scriptpubkey().empty()) {
    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.DumpPrivKeyRequest)
}

void DumpPrivKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DumpPrivKeyRequest_LightWalletService_2eproto.base);
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DumpPrivKeyRequest::~DumpPrivKeyRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.DumpPrivKeyRequest)
  SharedDtor();
}

void DumpPrivKeyRequest::SharedDtor() {
  scriptpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DumpPrivKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DumpPrivKeyRequest& DumpPrivKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DumpPrivKeyRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void DumpPrivKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.DumpPrivKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DumpPrivKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string scriptPubKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_scriptpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.DumpPrivKeyRequest.scriptPubKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DumpPrivKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.DumpPrivKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string scriptPubKey = 1;
  if (this->scriptpubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpubkey().data(), static_cast<int>(this->_internal_scriptpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.DumpPrivKeyRequest.scriptPubKey");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_scriptpubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.DumpPrivKeyRequest)
  return target;
}

size_t DumpPrivKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.DumpPrivKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string scriptPubKey = 1;
  if (this->scriptpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpubkey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DumpPrivKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.DumpPrivKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DumpPrivKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DumpPrivKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.DumpPrivKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.DumpPrivKeyRequest)
    MergeFrom(*source);
  }
}

void DumpPrivKeyRequest::MergeFrom(const DumpPrivKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.DumpPrivKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.scriptpubkey().size() > 0) {

    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
}

void DumpPrivKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.DumpPrivKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DumpPrivKeyRequest::CopyFrom(const DumpPrivKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.DumpPrivKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DumpPrivKeyRequest::IsInitialized() const {
  return true;
}

void DumpPrivKeyRequest::InternalSwap(DumpPrivKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  scriptpubkey_.Swap(&other->scriptpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DumpPrivKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Utxo::InitAsDefaultInstance() {
}
class Utxo::_Internal {
 public:
};

Utxo::Utxo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.Utxo)
}
Utxo::Utxo(const Utxo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txid().empty()) {
    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scriptpubkey().empty()) {
    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&vout_) -
    reinterpret_cast<char*>(&value_)) + sizeof(vout_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.Utxo)
}

void Utxo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Utxo_LightWalletService_2eproto.base);
  txid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vout_) -
      reinterpret_cast<char*>(&value_)) + sizeof(vout_));
}

Utxo::~Utxo() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.Utxo)
  SharedDtor();
}

void Utxo::SharedDtor() {
  txid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Utxo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Utxo& Utxo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Utxo_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void Utxo::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.Utxo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scriptpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vout_) -
      reinterpret_cast<char*>(&value_)) + sizeof(vout_));
  _internal_metadata_.Clear();
}

const char* Utxo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 vout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string txid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_txid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.Utxo.txid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scriptPubKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_scriptpubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.Utxo.scriptPubKey"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 confirmations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          confirmations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Utxo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.Utxo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vout = 1;
  if (this->vout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vout(), target);
  }

  // string txid = 2;
  if (this->txid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txid().data(), static_cast<int>(this->_internal_txid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.Utxo.txid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_txid(), target);
  }

  // int64 value = 3;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  // string scriptPubKey = 4;
  if (this->scriptpubkey().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scriptpubkey().data(), static_cast<int>(this->_internal_scriptpubkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.Utxo.scriptPubKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_scriptpubkey(), target);
  }

  // int64 confirmations = 5;
  if (this->confirmations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_confirmations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.Utxo)
  return target;
}

size_t Utxo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.Utxo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txid = 2;
  if (this->txid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txid());
  }

  // string scriptPubKey = 4;
  if (this->scriptpubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scriptpubkey());
  }

  // int64 value = 3;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  // int64 confirmations = 5;
  if (this->confirmations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_confirmations());
  }

  // uint32 vout = 1;
  if (this->vout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vout());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Utxo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.Utxo)
  GOOGLE_DCHECK_NE(&from, this);
  const Utxo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Utxo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.Utxo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.Utxo)
    MergeFrom(*source);
  }
}

void Utxo::MergeFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.Utxo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txid().size() > 0) {

    txid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txid_);
  }
  if (from.scriptpubkey().size() > 0) {

    scriptpubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.scriptpubkey_);
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.confirmations() != 0) {
    _internal_set_confirmations(from._internal_confirmations());
  }
  if (from.vout() != 0) {
    _internal_set_vout(from._internal_vout());
  }
}

void Utxo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Utxo::CopyFrom(const Utxo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.Utxo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Utxo::IsInitialized() const {
  return true;
}

void Utxo::InternalSwap(Utxo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txid_.Swap(&other->txid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scriptpubkey_.Swap(&other->scriptpubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(confirmations_, other->confirmations_);
  swap(vout_, other->vout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Utxo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUtxoResult::InitAsDefaultInstance() {
}
class ListUtxoResult::_Internal {
 public:
};

ListUtxoResult::ListUtxoResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.ListUtxoResult)
}
ListUtxoResult::ListUtxoResult(const ListUtxoResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      utxos_(from.utxos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.ListUtxoResult)
}

void ListUtxoResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUtxoResult_LightWalletService_2eproto.base);
}

ListUtxoResult::~ListUtxoResult() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.ListUtxoResult)
  SharedDtor();
}

void ListUtxoResult::SharedDtor() {
}

void ListUtxoResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUtxoResult& ListUtxoResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUtxoResult_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void ListUtxoResult::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.ListUtxoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  utxos_.Clear();
  _internal_metadata_.Clear();
}

const char* ListUtxoResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .lightwalletrpc.Utxo utxos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_utxos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUtxoResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.ListUtxoResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .lightwalletrpc.Utxo utxos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_utxos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_utxos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.ListUtxoResult)
  return target;
}

size_t ListUtxoResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.ListUtxoResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .lightwalletrpc.Utxo utxos = 1;
  total_size += 1UL * this->_internal_utxos_size();
  for (const auto& msg : this->utxos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUtxoResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.ListUtxoResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUtxoResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUtxoResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.ListUtxoResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.ListUtxoResult)
    MergeFrom(*source);
  }
}

void ListUtxoResult::MergeFrom(const ListUtxoResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.ListUtxoResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  utxos_.MergeFrom(from.utxos_);
}

void ListUtxoResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.ListUtxoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUtxoResult::CopyFrom(const ListUtxoResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.ListUtxoResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUtxoResult::IsInitialized() const {
  return true;
}

void ListUtxoResult::InternalSwap(ListUtxoResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  utxos_.InternalSwap(&other->utxos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUtxoResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLastAddressRequest::InitAsDefaultInstance() {
}
class GetLastAddressRequest::_Internal {
 public:
};

GetLastAddressRequest::GetLastAddressRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetLastAddressRequest)
}
GetLastAddressRequest::GetLastAddressRequest(const GetLastAddressRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ischange_ = from.ischange_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetLastAddressRequest)
}

void GetLastAddressRequest::SharedCtor() {
  ischange_ = false;
}

GetLastAddressRequest::~GetLastAddressRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetLastAddressRequest)
  SharedDtor();
}

void GetLastAddressRequest::SharedDtor() {
}

void GetLastAddressRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastAddressRequest& GetLastAddressRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastAddressRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetLastAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetLastAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ischange_ = false;
  _internal_metadata_.Clear();
}

const char* GetLastAddressRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool isChange = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ischange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastAddressRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetLastAddressRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool isChange = 1;
  if (this->ischange() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_ischange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetLastAddressRequest)
  return target;
}

size_t GetLastAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetLastAddressRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool isChange = 1;
  if (this->ischange() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastAddressRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetLastAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastAddressRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLastAddressRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetLastAddressRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetLastAddressRequest)
    MergeFrom(*source);
  }
}

void GetLastAddressRequest::MergeFrom(const GetLastAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetLastAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ischange() != 0) {
    _internal_set_ischange(from._internal_ischange());
  }
}

void GetLastAddressRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetLastAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastAddressRequest::CopyFrom(const GetLastAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetLastAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastAddressRequest::IsInitialized() const {
  return true;
}

void GetLastAddressRequest::InternalSwap(GetLastAddressRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ischange_, other->ischange_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastAddressRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLastAddressResponse::InitAsDefaultInstance() {
}
class GetLastAddressResponse::_Internal {
 public:
};

GetLastAddressResponse::GetLastAddressResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetLastAddressResponse)
}
GetLastAddressResponse::GetLastAddressResponse(const GetLastAddressResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_address().empty()) {
    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetLastAddressResponse)
}

void GetLastAddressResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLastAddressResponse_LightWalletService_2eproto.base);
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLastAddressResponse::~GetLastAddressResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetLastAddressResponse)
  SharedDtor();
}

void GetLastAddressResponse::SharedDtor() {
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLastAddressResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLastAddressResponse& GetLastAddressResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLastAddressResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetLastAddressResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetLastAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  address_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetLastAddressResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetLastAddressResponse.address"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLastAddressResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetLastAddressResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetLastAddressResponse.address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetLastAddressResponse)
  return target;
}

size_t GetLastAddressResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetLastAddressResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string address = 1;
  if (this->address().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLastAddressResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetLastAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLastAddressResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLastAddressResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetLastAddressResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetLastAddressResponse)
    MergeFrom(*source);
  }
}

void GetLastAddressResponse::MergeFrom(const GetLastAddressResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetLastAddressResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.address().size() > 0) {

    address_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
}

void GetLastAddressResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetLastAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastAddressResponse::CopyFrom(const GetLastAddressResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetLastAddressResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastAddressResponse::IsInitialized() const {
  return true;
}

void GetLastAddressResponse::InternalSwap(GetLastAddressResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  address_.Swap(&other->address_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLastAddressResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUtxosRequest::InitAsDefaultInstance() {
}
class ListUtxosRequest::_Internal {
 public:
};

ListUtxosRequest::ListUtxosRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.ListUtxosRequest)
}
ListUtxosRequest::ListUtxosRequest(const ListUtxosRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      addresses_(from.addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&minconf_, &from.minconf_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxconf_) -
    reinterpret_cast<char*>(&minconf_)) + sizeof(maxconf_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.ListUtxosRequest)
}

void ListUtxosRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUtxosRequest_LightWalletService_2eproto.base);
  ::memset(&minconf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxconf_) -
      reinterpret_cast<char*>(&minconf_)) + sizeof(maxconf_));
}

ListUtxosRequest::~ListUtxosRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.ListUtxosRequest)
  SharedDtor();
}

void ListUtxosRequest::SharedDtor() {
}

void ListUtxosRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUtxosRequest& ListUtxosRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUtxosRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void ListUtxosRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.ListUtxosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addresses_.Clear();
  ::memset(&minconf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxconf_) -
      reinterpret_cast<char*>(&minconf_)) + sizeof(maxconf_));
  _internal_metadata_.Clear();
}

const char* ListUtxosRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 minConf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          minconf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 maxConf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          maxconf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string addresses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_addresses();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.ListUtxosRequest.addresses"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUtxosRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.ListUtxosRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minConf = 1;
  if (this->minconf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minconf(), target);
  }

  // int32 maxConf = 2;
  if (this->maxconf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxconf(), target);
  }

  // repeated string addresses = 3;
  for (int i = 0, n = this->_internal_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.ListUtxosRequest.addresses");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.ListUtxosRequest)
  return target;
}

size_t ListUtxosRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.ListUtxosRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string addresses = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(addresses_.size());
  for (int i = 0, n = addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      addresses_.Get(i));
  }

  // int32 minConf = 1;
  if (this->minconf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minconf());
  }

  // int32 maxConf = 2;
  if (this->maxconf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_maxconf());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUtxosRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.ListUtxosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUtxosRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUtxosRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.ListUtxosRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.ListUtxosRequest)
    MergeFrom(*source);
  }
}

void ListUtxosRequest::MergeFrom(const ListUtxosRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.ListUtxosRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addresses_.MergeFrom(from.addresses_);
  if (from.minconf() != 0) {
    _internal_set_minconf(from._internal_minconf());
  }
  if (from.maxconf() != 0) {
    _internal_set_maxconf(from._internal_maxconf());
  }
}

void ListUtxosRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.ListUtxosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUtxosRequest::CopyFrom(const ListUtxosRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.ListUtxosRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUtxosRequest::IsInitialized() const {
  return true;
}

void ListUtxosRequest::InternalSwap(ListUtxosRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  addresses_.InternalSwap(&other->addresses_);
  swap(minconf_, other->minconf_);
  swap(maxconf_, other->maxconf_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUtxosRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateRequest::InitAsDefaultInstance() {
}
class GenerateRequest::_Internal {
 public:
};

GenerateRequest::GenerateRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GenerateRequest)
}
GenerateRequest::GenerateRequest(const GenerateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  numblocks_ = from.numblocks_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GenerateRequest)
}

void GenerateRequest::SharedCtor() {
  numblocks_ = 0u;
}

GenerateRequest::~GenerateRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GenerateRequest)
  SharedDtor();
}

void GenerateRequest::SharedDtor() {
}

void GenerateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateRequest& GenerateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GenerateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GenerateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  numblocks_ = 0u;
  _internal_metadata_.Clear();
}

const char* GenerateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 numBlocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          numblocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GenerateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 numBlocks = 1;
  if (this->numblocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_numblocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GenerateRequest)
  return target;
}

size_t GenerateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GenerateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 numBlocks = 1;
  if (this->numblocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_numblocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GenerateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GenerateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GenerateRequest)
    MergeFrom(*source);
  }
}

void GenerateRequest::MergeFrom(const GenerateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GenerateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.numblocks() != 0) {
    _internal_set_numblocks(from._internal_numblocks());
  }
}

void GenerateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GenerateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateRequest::CopyFrom(const GenerateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GenerateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateRequest::IsInitialized() const {
  return true;
}

void GenerateRequest::InternalSwap(GenerateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(numblocks_, other->numblocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateResponse::InitAsDefaultInstance() {
}
class GenerateResponse::_Internal {
 public:
};

GenerateResponse::GenerateResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GenerateResponse)
}
GenerateResponse::GenerateResponse(const GenerateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      blockhash_(from.blockhash_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GenerateResponse)
}

void GenerateResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateResponse_LightWalletService_2eproto.base);
}

GenerateResponse::~GenerateResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GenerateResponse)
  SharedDtor();
}

void GenerateResponse::SharedDtor() {
}

void GenerateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateResponse& GenerateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GenerateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockhash_.Clear();
  _internal_metadata_.Clear();
}

const char* GenerateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string blockHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blockhash();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GenerateResponse.blockHash"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GenerateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string blockHash = 1;
  for (int i = 0, n = this->_internal_blockhash_size(); i < n; i++) {
    const auto& s = this->_internal_blockhash(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GenerateResponse.blockHash");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GenerateResponse)
  return target;
}

size_t GenerateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GenerateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string blockHash = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blockhash_.size());
  for (int i = 0, n = blockhash_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blockhash_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GenerateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GenerateResponse)
    MergeFrom(*source);
  }
}

void GenerateResponse::MergeFrom(const GenerateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GenerateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockhash_.MergeFrom(from.blockhash_);
}

void GenerateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateResponse::CopyFrom(const GenerateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GenerateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateResponse::IsInitialized() const {
  return true;
}

void GenerateResponse::InternalSwap(GenerateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  blockhash_.InternalSwap(&other->blockhash_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBlockResponse::InitAsDefaultInstance() {
}
class GetBlockResponse::_Internal {
 public:
};

GetBlockResponse::GetBlockResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetBlockResponse)
}
GetBlockResponse::GetBlockResponse(const GetBlockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_block().empty()) {
    block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetBlockResponse)
}

void GetBlockResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBlockResponse_LightWalletService_2eproto.base);
  block_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetBlockResponse::~GetBlockResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetBlockResponse)
  SharedDtor();
}

void GetBlockResponse::SharedDtor() {
  block_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBlockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBlockResponse& GetBlockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBlockResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetBlockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  block_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetBlockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes block = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_block();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBlockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetBlockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes block = 1;
  if (this->block().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetBlockResponse)
  return target;
}

size_t GetBlockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetBlockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes block = 1;
  if (this->block().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_block());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBlockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBlockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBlockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetBlockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetBlockResponse)
    MergeFrom(*source);
  }
}

void GetBlockResponse::MergeFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetBlockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.block().size() > 0) {

    block_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.block_);
  }
}

void GetBlockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBlockResponse::CopyFrom(const GetBlockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetBlockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBlockResponse::IsInitialized() const {
  return true;
}

void GetBlockResponse::InternalSwap(GetBlockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  block_.Swap(&other->block_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBlockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConfirmedBalanceRequest::InitAsDefaultInstance() {
}
class GetConfirmedBalanceRequest::_Internal {
 public:
};

GetConfirmedBalanceRequest::GetConfirmedBalanceRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetConfirmedBalanceRequest)
}
GetConfirmedBalanceRequest::GetConfirmedBalanceRequest(const GetConfirmedBalanceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  confs_ = from.confs_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetConfirmedBalanceRequest)
}

void GetConfirmedBalanceRequest::SharedCtor() {
  confs_ = 0;
}

GetConfirmedBalanceRequest::~GetConfirmedBalanceRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetConfirmedBalanceRequest)
  SharedDtor();
}

void GetConfirmedBalanceRequest::SharedDtor() {
}

void GetConfirmedBalanceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConfirmedBalanceRequest& GetConfirmedBalanceRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConfirmedBalanceRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetConfirmedBalanceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetConfirmedBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  confs_ = 0;
  _internal_metadata_.Clear();
}

const char* GetConfirmedBalanceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 confs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          confs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConfirmedBalanceRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetConfirmedBalanceRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 confs = 1;
  if (this->confs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_confs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetConfirmedBalanceRequest)
  return target;
}

size_t GetConfirmedBalanceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetConfirmedBalanceRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 confs = 1;
  if (this->confs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_confs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConfirmedBalanceRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetConfirmedBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfirmedBalanceRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConfirmedBalanceRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetConfirmedBalanceRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetConfirmedBalanceRequest)
    MergeFrom(*source);
  }
}

void GetConfirmedBalanceRequest::MergeFrom(const GetConfirmedBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetConfirmedBalanceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.confs() != 0) {
    _internal_set_confs(from._internal_confs());
  }
}

void GetConfirmedBalanceRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetConfirmedBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfirmedBalanceRequest::CopyFrom(const GetConfirmedBalanceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetConfirmedBalanceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfirmedBalanceRequest::IsInitialized() const {
  return true;
}

void GetConfirmedBalanceRequest::InternalSwap(GetConfirmedBalanceRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(confs_, other->confs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConfirmedBalanceRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConfirmedBalanceResponse::InitAsDefaultInstance() {
}
class GetConfirmedBalanceResponse::_Internal {
 public:
};

GetConfirmedBalanceResponse::GetConfirmedBalanceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetConfirmedBalanceResponse)
}
GetConfirmedBalanceResponse::GetConfirmedBalanceResponse(const GetConfirmedBalanceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  amount_ = from.amount_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetConfirmedBalanceResponse)
}

void GetConfirmedBalanceResponse::SharedCtor() {
  amount_ = PROTOBUF_LONGLONG(0);
}

GetConfirmedBalanceResponse::~GetConfirmedBalanceResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetConfirmedBalanceResponse)
  SharedDtor();
}

void GetConfirmedBalanceResponse::SharedDtor() {
}

void GetConfirmedBalanceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConfirmedBalanceResponse& GetConfirmedBalanceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConfirmedBalanceResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetConfirmedBalanceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetConfirmedBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amount_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetConfirmedBalanceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 amount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          amount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConfirmedBalanceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetConfirmedBalanceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_amount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetConfirmedBalanceResponse)
  return target;
}

size_t GetConfirmedBalanceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetConfirmedBalanceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 amount = 1;
  if (this->amount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_amount());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConfirmedBalanceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetConfirmedBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConfirmedBalanceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConfirmedBalanceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetConfirmedBalanceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetConfirmedBalanceResponse)
    MergeFrom(*source);
  }
}

void GetConfirmedBalanceResponse::MergeFrom(const GetConfirmedBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetConfirmedBalanceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.amount() != 0) {
    _internal_set_amount(from._internal_amount());
  }
}

void GetConfirmedBalanceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetConfirmedBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConfirmedBalanceResponse::CopyFrom(const GetConfirmedBalanceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetConfirmedBalanceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConfirmedBalanceResponse::IsInitialized() const {
  return true;
}

void GetConfirmedBalanceResponse::InternalSwap(GetConfirmedBalanceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConfirmedBalanceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EstimateNetworkFeeRequest::InitAsDefaultInstance() {
}
class EstimateNetworkFeeRequest::_Internal {
 public:
};

EstimateNetworkFeeRequest::EstimateNetworkFeeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.EstimateNetworkFeeRequest)
}
EstimateNetworkFeeRequest::EstimateNetworkFeeRequest(const EstimateNetworkFeeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  blocks_ = from.blocks_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.EstimateNetworkFeeRequest)
}

void EstimateNetworkFeeRequest::SharedCtor() {
  blocks_ = PROTOBUF_ULONGLONG(0);
}

EstimateNetworkFeeRequest::~EstimateNetworkFeeRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.EstimateNetworkFeeRequest)
  SharedDtor();
}

void EstimateNetworkFeeRequest::SharedDtor() {
}

void EstimateNetworkFeeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateNetworkFeeRequest& EstimateNetworkFeeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateNetworkFeeRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void EstimateNetworkFeeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.EstimateNetworkFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EstimateNetworkFeeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateNetworkFeeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.EstimateNetworkFeeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 blocks = 1;
  if (this->blocks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_blocks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.EstimateNetworkFeeRequest)
  return target;
}

size_t EstimateNetworkFeeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.EstimateNetworkFeeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 blocks = 1;
  if (this->blocks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_blocks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateNetworkFeeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.EstimateNetworkFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateNetworkFeeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateNetworkFeeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.EstimateNetworkFeeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.EstimateNetworkFeeRequest)
    MergeFrom(*source);
  }
}

void EstimateNetworkFeeRequest::MergeFrom(const EstimateNetworkFeeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.EstimateNetworkFeeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blocks() != 0) {
    _internal_set_blocks(from._internal_blocks());
  }
}

void EstimateNetworkFeeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.EstimateNetworkFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateNetworkFeeRequest::CopyFrom(const EstimateNetworkFeeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.EstimateNetworkFeeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateNetworkFeeRequest::IsInitialized() const {
  return true;
}

void EstimateNetworkFeeRequest::InternalSwap(EstimateNetworkFeeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blocks_, other->blocks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateNetworkFeeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EstimateNetworkFeeResponse::InitAsDefaultInstance() {
}
class EstimateNetworkFeeResponse::_Internal {
 public:
};

EstimateNetworkFeeResponse::EstimateNetworkFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.EstimateNetworkFeeResponse)
}
EstimateNetworkFeeResponse::EstimateNetworkFeeResponse(const EstimateNetworkFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fee_ = from.fee_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.EstimateNetworkFeeResponse)
}

void EstimateNetworkFeeResponse::SharedCtor() {
  fee_ = PROTOBUF_LONGLONG(0);
}

EstimateNetworkFeeResponse::~EstimateNetworkFeeResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.EstimateNetworkFeeResponse)
  SharedDtor();
}

void EstimateNetworkFeeResponse::SharedDtor() {
}

void EstimateNetworkFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EstimateNetworkFeeResponse& EstimateNetworkFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EstimateNetworkFeeResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void EstimateNetworkFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.EstimateNetworkFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fee_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* EstimateNetworkFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          fee_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EstimateNetworkFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.EstimateNetworkFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_fee(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.EstimateNetworkFeeResponse)
  return target;
}

size_t EstimateNetworkFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.EstimateNetworkFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 fee = 1;
  if (this->fee() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_fee());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EstimateNetworkFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.EstimateNetworkFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const EstimateNetworkFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EstimateNetworkFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.EstimateNetworkFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.EstimateNetworkFeeResponse)
    MergeFrom(*source);
  }
}

void EstimateNetworkFeeResponse::MergeFrom(const EstimateNetworkFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.EstimateNetworkFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fee() != 0) {
    _internal_set_fee(from._internal_fee());
  }
}

void EstimateNetworkFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.EstimateNetworkFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EstimateNetworkFeeResponse::CopyFrom(const EstimateNetworkFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.EstimateNetworkFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EstimateNetworkFeeResponse::IsInitialized() const {
  return true;
}

void EstimateNetworkFeeResponse::InternalSwap(EstimateNetworkFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EstimateNetworkFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawTransactionResponse::InitAsDefaultInstance() {
}
class GetRawTransactionResponse::_Internal {
 public:
};

GetRawTransactionResponse::GetRawTransactionResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetRawTransactionResponse)
}
GetRawTransactionResponse::GetRawTransactionResponse(const GetRawTransactionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionhex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionhex().empty()) {
    transactionhex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhex_);
  }
  blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_blockhash().empty()) {
    blockhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockhash_);
  }
  ::memcpy(&blockheight_, &from.blockheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&txindex_) -
    reinterpret_cast<char*>(&blockheight_)) + sizeof(txindex_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetRawTransactionResponse)
}

void GetRawTransactionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawTransactionResponse_LightWalletService_2eproto.base);
  transactionhex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txindex_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(txindex_));
}

GetRawTransactionResponse::~GetRawTransactionResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetRawTransactionResponse)
  SharedDtor();
}

void GetRawTransactionResponse::SharedDtor() {
  transactionhex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRawTransactionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawTransactionResponse& GetRawTransactionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawTransactionResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetRawTransactionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionhex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  blockhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&blockheight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txindex_) -
      reinterpret_cast<char*>(&blockheight_)) + sizeof(txindex_));
  _internal_metadata_.Clear();
}

const char* GetRawTransactionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transactionHex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionhex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetRawTransactionResponse.transactionHex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string blockHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_blockhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetRawTransactionResponse.blockHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blockHeight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blockheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 txIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          txindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawTransactionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetRawTransactionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionHex = 1;
  if (this->transactionhex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionhex().data(), static_cast<int>(this->_internal_transactionhex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetRawTransactionResponse.transactionHex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionhex(), target);
  }

  // string blockHash = 2;
  if (this->blockhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blockhash().data(), static_cast<int>(this->_internal_blockhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetRawTransactionResponse.blockHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_blockhash(), target);
  }

  // uint32 blockHeight = 3;
  if (this->blockheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blockheight(), target);
  }

  // uint32 txIndex = 4;
  if (this->txindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_txindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetRawTransactionResponse)
  return target;
}

size_t GetRawTransactionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetRawTransactionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionHex = 1;
  if (this->transactionhex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionhex());
  }

  // string blockHash = 2;
  if (this->blockhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blockhash());
  }

  // uint32 blockHeight = 3;
  if (this->blockheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blockheight());
  }

  // uint32 txIndex = 4;
  if (this->txindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_txindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawTransactionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawTransactionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawTransactionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetRawTransactionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetRawTransactionResponse)
    MergeFrom(*source);
  }
}

void GetRawTransactionResponse::MergeFrom(const GetRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetRawTransactionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transactionhex().size() > 0) {

    transactionhex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhex_);
  }
  if (from.blockhash().size() > 0) {

    blockhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.blockhash_);
  }
  if (from.blockheight() != 0) {
    _internal_set_blockheight(from._internal_blockheight());
  }
  if (from.txindex() != 0) {
    _internal_set_txindex(from._internal_txindex());
  }
}

void GetRawTransactionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawTransactionResponse::CopyFrom(const GetRawTransactionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetRawTransactionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawTransactionResponse::IsInitialized() const {
  return true;
}

void GetRawTransactionResponse::InternalSwap(GetRawTransactionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactionhex_.Swap(&other->transactionhex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  blockhash_.Swap(&other->blockhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(blockheight_, other->blockheight_);
  swap(txindex_, other->txindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawTransactionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawTxByIndexRequest::InitAsDefaultInstance() {
}
class GetRawTxByIndexRequest::_Internal {
 public:
};

GetRawTxByIndexRequest::GetRawTxByIndexRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetRawTxByIndexRequest)
}
GetRawTxByIndexRequest::GetRawTxByIndexRequest(const GetRawTxByIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&blocknum_, &from.blocknum_,
    static_cast<size_t>(reinterpret_cast<char*>(&txindex_) -
    reinterpret_cast<char*>(&blocknum_)) + sizeof(txindex_));
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetRawTxByIndexRequest)
}

void GetRawTxByIndexRequest::SharedCtor() {
  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txindex_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(txindex_));
}

GetRawTxByIndexRequest::~GetRawTxByIndexRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetRawTxByIndexRequest)
  SharedDtor();
}

void GetRawTxByIndexRequest::SharedDtor() {
}

void GetRawTxByIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawTxByIndexRequest& GetRawTxByIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawTxByIndexRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetRawTxByIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetRawTxByIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&blocknum_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&txindex_) -
      reinterpret_cast<char*>(&blocknum_)) + sizeof(txindex_));
  _internal_metadata_.Clear();
}

const char* GetRawTxByIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 blockNum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          blocknum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 txIndex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          txindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawTxByIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetRawTxByIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 blockNum = 1;
  if (this->blocknum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_blocknum(), target);
  }

  // uint32 txIndex = 2;
  if (this->txindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_txindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetRawTxByIndexRequest)
  return target;
}

size_t GetRawTxByIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetRawTxByIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 blockNum = 1;
  if (this->blocknum() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_blocknum());
  }

  // uint32 txIndex = 2;
  if (this->txindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_txindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawTxByIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetRawTxByIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawTxByIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawTxByIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetRawTxByIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetRawTxByIndexRequest)
    MergeFrom(*source);
  }
}

void GetRawTxByIndexRequest::MergeFrom(const GetRawTxByIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetRawTxByIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.blocknum() != 0) {
    _internal_set_blocknum(from._internal_blocknum());
  }
  if (from.txindex() != 0) {
    _internal_set_txindex(from._internal_txindex());
  }
}

void GetRawTxByIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetRawTxByIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawTxByIndexRequest::CopyFrom(const GetRawTxByIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetRawTxByIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawTxByIndexRequest::IsInitialized() const {
  return true;
}

void GetRawTxByIndexRequest::InternalSwap(GetRawTxByIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(blocknum_, other->blocknum_);
  swap(txindex_, other->txindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawTxByIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRawTxByIndexResponse::InitAsDefaultInstance() {
}
class GetRawTxByIndexResponse::_Internal {
 public:
};

GetRawTxByIndexResponse::GetRawTxByIndexResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.GetRawTxByIndexResponse)
}
GetRawTxByIndexResponse::GetRawTxByIndexResponse(const GetRawTxByIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txhex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_txhex().empty()) {
    txhex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txhex_);
  }
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.GetRawTxByIndexResponse)
}

void GetRawTxByIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRawTxByIndexResponse_LightWalletService_2eproto.base);
  txhex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRawTxByIndexResponse::~GetRawTxByIndexResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.GetRawTxByIndexResponse)
  SharedDtor();
}

void GetRawTxByIndexResponse::SharedDtor() {
  txhex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRawTxByIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRawTxByIndexResponse& GetRawTxByIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRawTxByIndexResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void GetRawTxByIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.GetRawTxByIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txhex_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetRawTxByIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string txHex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_txhex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lightwalletrpc.GetRawTxByIndexResponse.txHex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRawTxByIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.GetRawTxByIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string txHex = 1;
  if (this->txhex().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_txhex().data(), static_cast<int>(this->_internal_txhex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lightwalletrpc.GetRawTxByIndexResponse.txHex");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_txhex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.GetRawTxByIndexResponse)
  return target;
}

size_t GetRawTxByIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.GetRawTxByIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string txHex = 1;
  if (this->txhex().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_txhex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawTxByIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.GetRawTxByIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRawTxByIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRawTxByIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.GetRawTxByIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.GetRawTxByIndexResponse)
    MergeFrom(*source);
  }
}

void GetRawTxByIndexResponse::MergeFrom(const GetRawTxByIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.GetRawTxByIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.txhex().size() > 0) {

    txhex_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.txhex_);
  }
}

void GetRawTxByIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.GetRawTxByIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRawTxByIndexResponse::CopyFrom(const GetRawTxByIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.GetRawTxByIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawTxByIndexResponse::IsInitialized() const {
  return true;
}

void GetRawTxByIndexResponse::InternalSwap(GetRawTxByIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  txhex_.Swap(&other->txhex_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRawTxByIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadCacheRequest::InitAsDefaultInstance() {
}
class LoadCacheRequest::_Internal {
 public:
};

LoadCacheRequest::LoadCacheRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.LoadCacheRequest)
}
LoadCacheRequest::LoadCacheRequest(const LoadCacheRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  startheight_ = from.startheight_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.LoadCacheRequest)
}

void LoadCacheRequest::SharedCtor() {
  startheight_ = 0u;
}

LoadCacheRequest::~LoadCacheRequest() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.LoadCacheRequest)
  SharedDtor();
}

void LoadCacheRequest::SharedDtor() {
}

void LoadCacheRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCacheRequest& LoadCacheRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCacheRequest_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void LoadCacheRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.LoadCacheRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  startheight_ = 0u;
  _internal_metadata_.Clear();
}

const char* LoadCacheRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 startHeight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCacheRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.LoadCacheRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 startHeight = 1;
  if (this->startheight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.LoadCacheRequest)
  return target;
}

size_t LoadCacheRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.LoadCacheRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 startHeight = 1;
  if (this->startheight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startheight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCacheRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.LoadCacheRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCacheRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCacheRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.LoadCacheRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.LoadCacheRequest)
    MergeFrom(*source);
  }
}

void LoadCacheRequest::MergeFrom(const LoadCacheRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.LoadCacheRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.startheight() != 0) {
    _internal_set_startheight(from._internal_startheight());
  }
}

void LoadCacheRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.LoadCacheRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCacheRequest::CopyFrom(const LoadCacheRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.LoadCacheRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCacheRequest::IsInitialized() const {
  return true;
}

void LoadCacheRequest::InternalSwap(LoadCacheRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(startheight_, other->startheight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCacheRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoadCacheResponse::InitAsDefaultInstance() {
}
class LoadCacheResponse::_Internal {
 public:
};

LoadCacheResponse::LoadCacheResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lightwalletrpc.LoadCacheResponse)
}
LoadCacheResponse::LoadCacheResponse(const LoadCacheResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  loaded_ = from.loaded_;
  // @@protoc_insertion_point(copy_constructor:lightwalletrpc.LoadCacheResponse)
}

void LoadCacheResponse::SharedCtor() {
  loaded_ = false;
}

LoadCacheResponse::~LoadCacheResponse() {
  // @@protoc_insertion_point(destructor:lightwalletrpc.LoadCacheResponse)
  SharedDtor();
}

void LoadCacheResponse::SharedDtor() {
}

void LoadCacheResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoadCacheResponse& LoadCacheResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoadCacheResponse_LightWalletService_2eproto.base);
  return *internal_default_instance();
}


void LoadCacheResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:lightwalletrpc.LoadCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  loaded_ = false;
  _internal_metadata_.Clear();
}

const char* LoadCacheResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool loaded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          loaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoadCacheResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lightwalletrpc.LoadCacheResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool loaded = 1;
  if (this->loaded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_loaded(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lightwalletrpc.LoadCacheResponse)
  return target;
}

size_t LoadCacheResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lightwalletrpc.LoadCacheResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool loaded = 1;
  if (this->loaded() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoadCacheResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lightwalletrpc.LoadCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoadCacheResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoadCacheResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lightwalletrpc.LoadCacheResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lightwalletrpc.LoadCacheResponse)
    MergeFrom(*source);
  }
}

void LoadCacheResponse::MergeFrom(const LoadCacheResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lightwalletrpc.LoadCacheResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.loaded() != 0) {
    _internal_set_loaded(from._internal_loaded());
  }
}

void LoadCacheResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lightwalletrpc.LoadCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadCacheResponse::CopyFrom(const LoadCacheResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lightwalletrpc.LoadCacheResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadCacheResponse::IsInitialized() const {
  return true;
}

void LoadCacheResponse::InternalSwap(LoadCacheResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(loaded_, other->loaded_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadCacheResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace lightwalletrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetChainInfoResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetChainInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetChainInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetBlockHeaderRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::GetBlockHeaderRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetBlockHeaderRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::FilterBlockResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::FilterBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::FilterBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::BlockFilter* Arena::CreateMaybeMessage< ::lightwalletrpc::BlockFilter >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::BlockFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::DumpPrivKeyRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::DumpPrivKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::DumpPrivKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::Utxo* Arena::CreateMaybeMessage< ::lightwalletrpc::Utxo >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::Utxo >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::ListUtxoResult* Arena::CreateMaybeMessage< ::lightwalletrpc::ListUtxoResult >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::ListUtxoResult >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetLastAddressRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::GetLastAddressRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetLastAddressRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetLastAddressResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetLastAddressResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetLastAddressResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::ListUtxosRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::ListUtxosRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::ListUtxosRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GenerateRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::GenerateRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GenerateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GenerateResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GenerateResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GenerateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetBlockResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetBlockResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetBlockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetConfirmedBalanceRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::GetConfirmedBalanceRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetConfirmedBalanceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetConfirmedBalanceResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetConfirmedBalanceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetConfirmedBalanceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::EstimateNetworkFeeRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::EstimateNetworkFeeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::EstimateNetworkFeeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::EstimateNetworkFeeResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::EstimateNetworkFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::EstimateNetworkFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetRawTransactionResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetRawTransactionResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetRawTransactionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetRawTxByIndexRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::GetRawTxByIndexRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetRawTxByIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::GetRawTxByIndexResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::GetRawTxByIndexResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::GetRawTxByIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::LoadCacheRequest* Arena::CreateMaybeMessage< ::lightwalletrpc::LoadCacheRequest >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::LoadCacheRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::lightwalletrpc::LoadCacheResponse* Arena::CreateMaybeMessage< ::lightwalletrpc::LoadCacheResponse >(Arena* arena) {
  return Arena::CreateInternal< ::lightwalletrpc::LoadCacheResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
