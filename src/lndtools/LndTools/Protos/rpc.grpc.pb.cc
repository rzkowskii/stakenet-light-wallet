// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace lnrpc {

static const char* Lightning_method_names[] = {
  "/lnrpc.Lightning/WalletBalance",
  "/lnrpc.Lightning/ChannelBalance",
  "/lnrpc.Lightning/GetTransactions",
  "/lnrpc.Lightning/EstimateFee",
  "/lnrpc.Lightning/SendCoins",
  "/lnrpc.Lightning/ListUnspent",
  "/lnrpc.Lightning/SubscribeTransactions",
  "/lnrpc.Lightning/SendMany",
  "/lnrpc.Lightning/NewAddress",
  "/lnrpc.Lightning/SignMessage",
  "/lnrpc.Lightning/VerifyMessage",
  "/lnrpc.Lightning/ConnectPeer",
  "/lnrpc.Lightning/DisconnectPeer",
  "/lnrpc.Lightning/ListPeers",
  "/lnrpc.Lightning/SubscribePeerEvents",
  "/lnrpc.Lightning/GetInfo",
  "/lnrpc.Lightning/GetRecoveryInfo",
  "/lnrpc.Lightning/PendingChannels",
  "/lnrpc.Lightning/ListChannels",
  "/lnrpc.Lightning/SubscribeChannelEvents",
  "/lnrpc.Lightning/ClosedChannels",
  "/lnrpc.Lightning/OpenChannelSync",
  "/lnrpc.Lightning/OpenChannel",
  "/lnrpc.Lightning/FundingStateStep",
  "/lnrpc.Lightning/ChannelAcceptor",
  "/lnrpc.Lightning/CloseChannel",
  "/lnrpc.Lightning/AbandonChannel",
  "/lnrpc.Lightning/SendPayment",
  "/lnrpc.Lightning/SendPaymentSync",
  "/lnrpc.Lightning/SendToRoute",
  "/lnrpc.Lightning/SendToRouteSync",
  "/lnrpc.Lightning/AddInvoice",
  "/lnrpc.Lightning/ListInvoices",
  "/lnrpc.Lightning/LookupInvoice",
  "/lnrpc.Lightning/SubscribeInvoices",
  "/lnrpc.Lightning/DecodePayReq",
  "/lnrpc.Lightning/ListPayments",
  "/lnrpc.Lightning/DeleteAllPayments",
  "/lnrpc.Lightning/DescribeGraph",
  "/lnrpc.Lightning/GetNodeMetrics",
  "/lnrpc.Lightning/GetChanInfo",
  "/lnrpc.Lightning/GetNodeInfo",
  "/lnrpc.Lightning/QueryRoutes",
  "/lnrpc.Lightning/GetNetworkInfo",
  "/lnrpc.Lightning/StopDaemon",
  "/lnrpc.Lightning/SubscribeChannelGraph",
  "/lnrpc.Lightning/DebugLevel",
  "/lnrpc.Lightning/FeeReport",
  "/lnrpc.Lightning/UpdateChannelPolicy",
  "/lnrpc.Lightning/ForwardingHistory",
  "/lnrpc.Lightning/ExportChannelBackup",
  "/lnrpc.Lightning/ExportAllChannelBackups",
  "/lnrpc.Lightning/VerifyChanBackup",
  "/lnrpc.Lightning/RestoreChannelBackups",
  "/lnrpc.Lightning/SubscribeChannelBackups",
  "/lnrpc.Lightning/BakeMacaroon",
  "/lnrpc.Lightning/ListMacaroonIDs",
  "/lnrpc.Lightning/DeleteMacaroonID",
  "/lnrpc.Lightning/ListPermissions",
};

std::unique_ptr< Lightning::Stub> Lightning::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Lightning::Stub> stub(new Lightning::Stub(channel));
  return stub;
}

Lightning::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_WalletBalance_(Lightning_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelBalance_(Lightning_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTransactions_(Lightning_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EstimateFee_(Lightning_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendCoins_(Lightning_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUnspent_(Lightning_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeTransactions_(Lightning_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendMany_(Lightning_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_NewAddress_(Lightning_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SignMessage_(Lightning_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyMessage_(Lightning_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConnectPeer_(Lightning_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DisconnectPeer_(Lightning_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPeers_(Lightning_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribePeerEvents_(Lightning_method_names[14], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetInfo_(Lightning_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecoveryInfo_(Lightning_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PendingChannels_(Lightning_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListChannels_(Lightning_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeChannelEvents_(Lightning_method_names[19], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ClosedChannels_(Lightning_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenChannelSync_(Lightning_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OpenChannel_(Lightning_method_names[22], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_FundingStateStep_(Lightning_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChannelAcceptor_(Lightning_method_names[24], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_CloseChannel_(Lightning_method_names[25], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AbandonChannel_(Lightning_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendPayment_(Lightning_method_names[27], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SendPaymentSync_(Lightning_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendToRoute_(Lightning_method_names[29], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_SendToRouteSync_(Lightning_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AddInvoice_(Lightning_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListInvoices_(Lightning_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LookupInvoice_(Lightning_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeInvoices_(Lightning_method_names[34], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DecodePayReq_(Lightning_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPayments_(Lightning_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteAllPayments_(Lightning_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DescribeGraph_(Lightning_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeMetrics_(Lightning_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChanInfo_(Lightning_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodeInfo_(Lightning_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryRoutes_(Lightning_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNetworkInfo_(Lightning_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopDaemon_(Lightning_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeChannelGraph_(Lightning_method_names[45], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DebugLevel_(Lightning_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FeeReport_(Lightning_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateChannelPolicy_(Lightning_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ForwardingHistory_(Lightning_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportChannelBackup_(Lightning_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ExportAllChannelBackups_(Lightning_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyChanBackup_(Lightning_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RestoreChannelBackups_(Lightning_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeChannelBackups_(Lightning_method_names[54], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_BakeMacaroon_(Lightning_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListMacaroonIDs_(Lightning_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteMacaroonID_(Lightning_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPermissions_(Lightning_method_names[58], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Lightning::Stub::WalletBalance(::grpc::ClientContext* context, const ::lnrpc::WalletBalanceRequest& request, ::lnrpc::WalletBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_WalletBalance_, context, request, response);
}

void Lightning::Stub::experimental_async::WalletBalance(::grpc::ClientContext* context, const ::lnrpc::WalletBalanceRequest* request, ::lnrpc::WalletBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WalletBalance_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::WalletBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::WalletBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_WalletBalance_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::WalletBalance(::grpc::ClientContext* context, const ::lnrpc::WalletBalanceRequest* request, ::lnrpc::WalletBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WalletBalance_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::WalletBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::WalletBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_WalletBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::WalletBalanceResponse>* Lightning::Stub::AsyncWalletBalanceRaw(::grpc::ClientContext* context, const ::lnrpc::WalletBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::WalletBalanceResponse>::Create(channel_.get(), cq, rpcmethod_WalletBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::WalletBalanceResponse>* Lightning::Stub::PrepareAsyncWalletBalanceRaw(::grpc::ClientContext* context, const ::lnrpc::WalletBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::WalletBalanceResponse>::Create(channel_.get(), cq, rpcmethod_WalletBalance_, context, request, false);
}

::grpc::Status Lightning::Stub::ChannelBalance(::grpc::ClientContext* context, const ::lnrpc::ChannelBalanceRequest& request, ::lnrpc::ChannelBalanceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChannelBalance_, context, request, response);
}

void Lightning::Stub::experimental_async::ChannelBalance(::grpc::ClientContext* context, const ::lnrpc::ChannelBalanceRequest* request, ::lnrpc::ChannelBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelBalance_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ChannelBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelBalanceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChannelBalance_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ChannelBalance(::grpc::ClientContext* context, const ::lnrpc::ChannelBalanceRequest* request, ::lnrpc::ChannelBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChannelBalance_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ChannelBalance(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelBalanceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ChannelBalance_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelBalanceResponse>* Lightning::Stub::AsyncChannelBalanceRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelBalanceResponse>::Create(channel_.get(), cq, rpcmethod_ChannelBalance_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelBalanceResponse>* Lightning::Stub::PrepareAsyncChannelBalanceRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelBalanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelBalanceResponse>::Create(channel_.get(), cq, rpcmethod_ChannelBalance_, context, request, false);
}

::grpc::Status Lightning::Stub::GetTransactions(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request, ::lnrpc::TransactionDetails* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetTransactions_, context, request, response);
}

void Lightning::Stub::experimental_async::GetTransactions(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest* request, ::lnrpc::TransactionDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransactions_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetTransactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::TransactionDetails* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetTransactions_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetTransactions(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest* request, ::lnrpc::TransactionDetails* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransactions_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetTransactions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::TransactionDetails* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetTransactions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::TransactionDetails>* Lightning::Stub::AsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::TransactionDetails>::Create(channel_.get(), cq, rpcmethod_GetTransactions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::TransactionDetails>* Lightning::Stub::PrepareAsyncGetTransactionsRaw(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::TransactionDetails>::Create(channel_.get(), cq, rpcmethod_GetTransactions_, context, request, false);
}

::grpc::Status Lightning::Stub::EstimateFee(::grpc::ClientContext* context, const ::lnrpc::EstimateFeeRequest& request, ::lnrpc::EstimateFeeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EstimateFee_, context, request, response);
}

void Lightning::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::lnrpc::EstimateFeeRequest* request, ::lnrpc::EstimateFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::EstimateFeeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::lnrpc::EstimateFeeRequest* request, ::lnrpc::EstimateFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::EstimateFee(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::EstimateFeeResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_EstimateFee_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::EstimateFeeResponse>* Lightning::Stub::AsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::lnrpc::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::EstimateFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateFee_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::EstimateFeeResponse>* Lightning::Stub::PrepareAsyncEstimateFeeRaw(::grpc::ClientContext* context, const ::lnrpc::EstimateFeeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::EstimateFeeResponse>::Create(channel_.get(), cq, rpcmethod_EstimateFee_, context, request, false);
}

::grpc::Status Lightning::Stub::SendCoins(::grpc::ClientContext* context, const ::lnrpc::SendCoinsRequest& request, ::lnrpc::SendCoinsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendCoins_, context, request, response);
}

void Lightning::Stub::experimental_async::SendCoins(::grpc::ClientContext* context, const ::lnrpc::SendCoinsRequest* request, ::lnrpc::SendCoinsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCoins_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendCoins(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendCoinsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendCoins_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendCoins(::grpc::ClientContext* context, const ::lnrpc::SendCoinsRequest* request, ::lnrpc::SendCoinsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCoins_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::SendCoins(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendCoinsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendCoins_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendCoinsResponse>* Lightning::Stub::AsyncSendCoinsRaw(::grpc::ClientContext* context, const ::lnrpc::SendCoinsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendCoinsResponse>::Create(channel_.get(), cq, rpcmethod_SendCoins_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendCoinsResponse>* Lightning::Stub::PrepareAsyncSendCoinsRaw(::grpc::ClientContext* context, const ::lnrpc::SendCoinsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendCoinsResponse>::Create(channel_.get(), cq, rpcmethod_SendCoins_, context, request, false);
}

::grpc::Status Lightning::Stub::ListUnspent(::grpc::ClientContext* context, const ::lnrpc::ListUnspentRequest& request, ::lnrpc::ListUnspentResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListUnspent_, context, request, response);
}

void Lightning::Stub::experimental_async::ListUnspent(::grpc::ClientContext* context, const ::lnrpc::ListUnspentRequest* request, ::lnrpc::ListUnspentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUnspent_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListUnspent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListUnspentResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListUnspent_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListUnspent(::grpc::ClientContext* context, const ::lnrpc::ListUnspentRequest* request, ::lnrpc::ListUnspentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUnspent_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListUnspent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListUnspentResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListUnspent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListUnspentResponse>* Lightning::Stub::AsyncListUnspentRaw(::grpc::ClientContext* context, const ::lnrpc::ListUnspentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListUnspentResponse>::Create(channel_.get(), cq, rpcmethod_ListUnspent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListUnspentResponse>* Lightning::Stub::PrepareAsyncListUnspentRaw(::grpc::ClientContext* context, const ::lnrpc::ListUnspentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListUnspentResponse>::Create(channel_.get(), cq, rpcmethod_ListUnspent_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::Transaction>* Lightning::Stub::SubscribeTransactionsRaw(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::Transaction>::Create(channel_.get(), rpcmethod_SubscribeTransactions_, context, request);
}

void Lightning::Stub::experimental_async::SubscribeTransactions(::grpc::ClientContext* context, ::lnrpc::GetTransactionsRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Transaction>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::Transaction>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeTransactions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::Transaction>* Lightning::Stub::AsyncSubscribeTransactionsRaw(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Transaction>::Create(channel_.get(), cq, rpcmethod_SubscribeTransactions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::Transaction>* Lightning::Stub::PrepareAsyncSubscribeTransactionsRaw(::grpc::ClientContext* context, const ::lnrpc::GetTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Transaction>::Create(channel_.get(), cq, rpcmethod_SubscribeTransactions_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::SendMany(::grpc::ClientContext* context, const ::lnrpc::SendManyRequest& request, ::lnrpc::SendManyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendMany_, context, request, response);
}

void Lightning::Stub::experimental_async::SendMany(::grpc::ClientContext* context, const ::lnrpc::SendManyRequest* request, ::lnrpc::SendManyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendMany_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendMany(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendManyResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendMany_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendMany(::grpc::ClientContext* context, const ::lnrpc::SendManyRequest* request, ::lnrpc::SendManyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendMany_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::SendMany(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendManyResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendMany_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendManyResponse>* Lightning::Stub::AsyncSendManyRaw(::grpc::ClientContext* context, const ::lnrpc::SendManyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendManyResponse>::Create(channel_.get(), cq, rpcmethod_SendMany_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendManyResponse>* Lightning::Stub::PrepareAsyncSendManyRaw(::grpc::ClientContext* context, const ::lnrpc::SendManyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendManyResponse>::Create(channel_.get(), cq, rpcmethod_SendMany_, context, request, false);
}

::grpc::Status Lightning::Stub::NewAddress(::grpc::ClientContext* context, const ::lnrpc::NewAddressRequest& request, ::lnrpc::NewAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_NewAddress_, context, request, response);
}

void Lightning::Stub::experimental_async::NewAddress(::grpc::ClientContext* context, const ::lnrpc::NewAddressRequest* request, ::lnrpc::NewAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::NewAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NewAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::NewAddress(::grpc::ClientContext* context, const ::lnrpc::NewAddressRequest* request, ::lnrpc::NewAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::NewAddress(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NewAddressResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_NewAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NewAddressResponse>* Lightning::Stub::AsyncNewAddressRaw(::grpc::ClientContext* context, const ::lnrpc::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NewAddressResponse>::Create(channel_.get(), cq, rpcmethod_NewAddress_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NewAddressResponse>* Lightning::Stub::PrepareAsyncNewAddressRaw(::grpc::ClientContext* context, const ::lnrpc::NewAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NewAddressResponse>::Create(channel_.get(), cq, rpcmethod_NewAddress_, context, request, false);
}

::grpc::Status Lightning::Stub::SignMessage(::grpc::ClientContext* context, const ::lnrpc::SignMessageRequest& request, ::lnrpc::SignMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SignMessage_, context, request, response);
}

void Lightning::Stub::experimental_async::SignMessage(::grpc::ClientContext* context, const ::lnrpc::SignMessageRequest* request, ::lnrpc::SignMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignMessage_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SignMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SignMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SignMessage_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SignMessage(::grpc::ClientContext* context, const ::lnrpc::SignMessageRequest* request, ::lnrpc::SignMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignMessage_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::SignMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SignMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SignMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SignMessageResponse>* Lightning::Stub::AsyncSignMessageRaw(::grpc::ClientContext* context, const ::lnrpc::SignMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SignMessageResponse>::Create(channel_.get(), cq, rpcmethod_SignMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SignMessageResponse>* Lightning::Stub::PrepareAsyncSignMessageRaw(::grpc::ClientContext* context, const ::lnrpc::SignMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SignMessageResponse>::Create(channel_.get(), cq, rpcmethod_SignMessage_, context, request, false);
}

::grpc::Status Lightning::Stub::VerifyMessage(::grpc::ClientContext* context, const ::lnrpc::VerifyMessageRequest& request, ::lnrpc::VerifyMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyMessage_, context, request, response);
}

void Lightning::Stub::experimental_async::VerifyMessage(::grpc::ClientContext* context, const ::lnrpc::VerifyMessageRequest* request, ::lnrpc::VerifyMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyMessage_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::VerifyMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::VerifyMessageResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyMessage_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::VerifyMessage(::grpc::ClientContext* context, const ::lnrpc::VerifyMessageRequest* request, ::lnrpc::VerifyMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyMessage_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::VerifyMessage(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::VerifyMessageResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyMessage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::VerifyMessageResponse>* Lightning::Stub::AsyncVerifyMessageRaw(::grpc::ClientContext* context, const ::lnrpc::VerifyMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::VerifyMessageResponse>::Create(channel_.get(), cq, rpcmethod_VerifyMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::VerifyMessageResponse>* Lightning::Stub::PrepareAsyncVerifyMessageRaw(::grpc::ClientContext* context, const ::lnrpc::VerifyMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::VerifyMessageResponse>::Create(channel_.get(), cq, rpcmethod_VerifyMessage_, context, request, false);
}

::grpc::Status Lightning::Stub::ConnectPeer(::grpc::ClientContext* context, const ::lnrpc::ConnectPeerRequest& request, ::lnrpc::ConnectPeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ConnectPeer_, context, request, response);
}

void Lightning::Stub::experimental_async::ConnectPeer(::grpc::ClientContext* context, const ::lnrpc::ConnectPeerRequest* request, ::lnrpc::ConnectPeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectPeer_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ConnectPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ConnectPeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ConnectPeer_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ConnectPeer(::grpc::ClientContext* context, const ::lnrpc::ConnectPeerRequest* request, ::lnrpc::ConnectPeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectPeer_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ConnectPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ConnectPeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ConnectPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ConnectPeerResponse>* Lightning::Stub::AsyncConnectPeerRaw(::grpc::ClientContext* context, const ::lnrpc::ConnectPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ConnectPeerResponse>::Create(channel_.get(), cq, rpcmethod_ConnectPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ConnectPeerResponse>* Lightning::Stub::PrepareAsyncConnectPeerRaw(::grpc::ClientContext* context, const ::lnrpc::ConnectPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ConnectPeerResponse>::Create(channel_.get(), cq, rpcmethod_ConnectPeer_, context, request, false);
}

::grpc::Status Lightning::Stub::DisconnectPeer(::grpc::ClientContext* context, const ::lnrpc::DisconnectPeerRequest& request, ::lnrpc::DisconnectPeerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DisconnectPeer_, context, request, response);
}

void Lightning::Stub::experimental_async::DisconnectPeer(::grpc::ClientContext* context, const ::lnrpc::DisconnectPeerRequest* request, ::lnrpc::DisconnectPeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisconnectPeer_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DisconnectPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DisconnectPeerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DisconnectPeer_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DisconnectPeer(::grpc::ClientContext* context, const ::lnrpc::DisconnectPeerRequest* request, ::lnrpc::DisconnectPeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisconnectPeer_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DisconnectPeer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DisconnectPeerResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DisconnectPeer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DisconnectPeerResponse>* Lightning::Stub::AsyncDisconnectPeerRaw(::grpc::ClientContext* context, const ::lnrpc::DisconnectPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DisconnectPeerResponse>::Create(channel_.get(), cq, rpcmethod_DisconnectPeer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DisconnectPeerResponse>* Lightning::Stub::PrepareAsyncDisconnectPeerRaw(::grpc::ClientContext* context, const ::lnrpc::DisconnectPeerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DisconnectPeerResponse>::Create(channel_.get(), cq, rpcmethod_DisconnectPeer_, context, request, false);
}

::grpc::Status Lightning::Stub::ListPeers(::grpc::ClientContext* context, const ::lnrpc::ListPeersRequest& request, ::lnrpc::ListPeersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPeers_, context, request, response);
}

void Lightning::Stub::experimental_async::ListPeers(::grpc::ClientContext* context, const ::lnrpc::ListPeersRequest* request, ::lnrpc::ListPeersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPeers_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPeersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPeers_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPeers(::grpc::ClientContext* context, const ::lnrpc::ListPeersRequest* request, ::lnrpc::ListPeersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPeers_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListPeers(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPeersResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPeers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPeersResponse>* Lightning::Stub::AsyncListPeersRaw(::grpc::ClientContext* context, const ::lnrpc::ListPeersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPeersResponse>::Create(channel_.get(), cq, rpcmethod_ListPeers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPeersResponse>* Lightning::Stub::PrepareAsyncListPeersRaw(::grpc::ClientContext* context, const ::lnrpc::ListPeersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPeersResponse>::Create(channel_.get(), cq, rpcmethod_ListPeers_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::PeerEvent>* Lightning::Stub::SubscribePeerEventsRaw(::grpc::ClientContext* context, const ::lnrpc::PeerEventSubscription& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::PeerEvent>::Create(channel_.get(), rpcmethod_SubscribePeerEvents_, context, request);
}

void Lightning::Stub::experimental_async::SubscribePeerEvents(::grpc::ClientContext* context, ::lnrpc::PeerEventSubscription* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::PeerEvent>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::PeerEvent>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribePeerEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::PeerEvent>* Lightning::Stub::AsyncSubscribePeerEventsRaw(::grpc::ClientContext* context, const ::lnrpc::PeerEventSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::PeerEvent>::Create(channel_.get(), cq, rpcmethod_SubscribePeerEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::PeerEvent>* Lightning::Stub::PrepareAsyncSubscribePeerEventsRaw(::grpc::ClientContext* context, const ::lnrpc::PeerEventSubscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::PeerEvent>::Create(channel_.get(), cq, rpcmethod_SubscribePeerEvents_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::GetInfo(::grpc::ClientContext* context, const ::lnrpc::GetInfoRequest& request, ::lnrpc::GetInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetInfo_, context, request, response);
}

void Lightning::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::lnrpc::GetInfoRequest* request, ::lnrpc::GetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::GetInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::lnrpc::GetInfoRequest* request, ::lnrpc::GetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::GetInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::GetInfoResponse>* Lightning::Stub::AsyncGetInfoRaw(::grpc::ClientContext* context, const ::lnrpc::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::GetInfoResponse>* Lightning::Stub::PrepareAsyncGetInfoRaw(::grpc::ClientContext* context, const ::lnrpc::GetInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::GetInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetInfo_, context, request, false);
}

::grpc::Status Lightning::Stub::GetRecoveryInfo(::grpc::ClientContext* context, const ::lnrpc::GetRecoveryInfoRequest& request, ::lnrpc::GetRecoveryInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRecoveryInfo_, context, request, response);
}

void Lightning::Stub::experimental_async::GetRecoveryInfo(::grpc::ClientContext* context, const ::lnrpc::GetRecoveryInfoRequest* request, ::lnrpc::GetRecoveryInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecoveryInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetRecoveryInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::GetRecoveryInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecoveryInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetRecoveryInfo(::grpc::ClientContext* context, const ::lnrpc::GetRecoveryInfoRequest* request, ::lnrpc::GetRecoveryInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecoveryInfo_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetRecoveryInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::GetRecoveryInfoResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecoveryInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::GetRecoveryInfoResponse>* Lightning::Stub::AsyncGetRecoveryInfoRaw(::grpc::ClientContext* context, const ::lnrpc::GetRecoveryInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::GetRecoveryInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetRecoveryInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::GetRecoveryInfoResponse>* Lightning::Stub::PrepareAsyncGetRecoveryInfoRaw(::grpc::ClientContext* context, const ::lnrpc::GetRecoveryInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::GetRecoveryInfoResponse>::Create(channel_.get(), cq, rpcmethod_GetRecoveryInfo_, context, request, false);
}

::grpc::Status Lightning::Stub::PendingChannels(::grpc::ClientContext* context, const ::lnrpc::PendingChannelsRequest& request, ::lnrpc::PendingChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PendingChannels_, context, request, response);
}

void Lightning::Stub::experimental_async::PendingChannels(::grpc::ClientContext* context, const ::lnrpc::PendingChannelsRequest* request, ::lnrpc::PendingChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PendingChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::PendingChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PendingChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PendingChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::PendingChannels(::grpc::ClientContext* context, const ::lnrpc::PendingChannelsRequest* request, ::lnrpc::PendingChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PendingChannels_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::PendingChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PendingChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PendingChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PendingChannelsResponse>* Lightning::Stub::AsyncPendingChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::PendingChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PendingChannelsResponse>::Create(channel_.get(), cq, rpcmethod_PendingChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PendingChannelsResponse>* Lightning::Stub::PrepareAsyncPendingChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::PendingChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PendingChannelsResponse>::Create(channel_.get(), cq, rpcmethod_PendingChannels_, context, request, false);
}

::grpc::Status Lightning::Stub::ListChannels(::grpc::ClientContext* context, const ::lnrpc::ListChannelsRequest& request, ::lnrpc::ListChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListChannels_, context, request, response);
}

void Lightning::Stub::experimental_async::ListChannels(::grpc::ClientContext* context, const ::lnrpc::ListChannelsRequest* request, ::lnrpc::ListChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListChannels(::grpc::ClientContext* context, const ::lnrpc::ListChannelsRequest* request, ::lnrpc::ListChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListChannelsResponse>* Lightning::Stub::AsyncListChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListChannelsResponse>::Create(channel_.get(), cq, rpcmethod_ListChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListChannelsResponse>* Lightning::Stub::PrepareAsyncListChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListChannelsResponse>::Create(channel_.get(), cq, rpcmethod_ListChannels_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::ChannelEventUpdate>* Lightning::Stub::SubscribeChannelEventsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelEventSubscription& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::ChannelEventUpdate>::Create(channel_.get(), rpcmethod_SubscribeChannelEvents_, context, request);
}

void Lightning::Stub::experimental_async::SubscribeChannelEvents(::grpc::ClientContext* context, ::lnrpc::ChannelEventSubscription* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::ChannelEventUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::ChannelEventUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeChannelEvents_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::ChannelEventUpdate>* Lightning::Stub::AsyncSubscribeChannelEventsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelEventSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::ChannelEventUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelEvents_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::ChannelEventUpdate>* Lightning::Stub::PrepareAsyncSubscribeChannelEventsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelEventSubscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::ChannelEventUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelEvents_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::ClosedChannels(::grpc::ClientContext* context, const ::lnrpc::ClosedChannelsRequest& request, ::lnrpc::ClosedChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClosedChannels_, context, request, response);
}

void Lightning::Stub::experimental_async::ClosedChannels(::grpc::ClientContext* context, const ::lnrpc::ClosedChannelsRequest* request, ::lnrpc::ClosedChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClosedChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ClosedChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ClosedChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ClosedChannels_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ClosedChannels(::grpc::ClientContext* context, const ::lnrpc::ClosedChannelsRequest* request, ::lnrpc::ClosedChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClosedChannels_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ClosedChannels(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ClosedChannelsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ClosedChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ClosedChannelsResponse>* Lightning::Stub::AsyncClosedChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::ClosedChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ClosedChannelsResponse>::Create(channel_.get(), cq, rpcmethod_ClosedChannels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ClosedChannelsResponse>* Lightning::Stub::PrepareAsyncClosedChannelsRaw(::grpc::ClientContext* context, const ::lnrpc::ClosedChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ClosedChannelsResponse>::Create(channel_.get(), cq, rpcmethod_ClosedChannels_, context, request, false);
}

::grpc::Status Lightning::Stub::OpenChannelSync(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request, ::lnrpc::ChannelPoint* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OpenChannelSync_, context, request, response);
}

void Lightning::Stub::experimental_async::OpenChannelSync(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest* request, ::lnrpc::ChannelPoint* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenChannelSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::OpenChannelSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelPoint* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OpenChannelSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::OpenChannelSync(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest* request, ::lnrpc::ChannelPoint* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenChannelSync_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::OpenChannelSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelPoint* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OpenChannelSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelPoint>* Lightning::Stub::AsyncOpenChannelSyncRaw(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelPoint>::Create(channel_.get(), cq, rpcmethod_OpenChannelSync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelPoint>* Lightning::Stub::PrepareAsyncOpenChannelSyncRaw(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelPoint>::Create(channel_.get(), cq, rpcmethod_OpenChannelSync_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::OpenStatusUpdate>* Lightning::Stub::OpenChannelRaw(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::OpenStatusUpdate>::Create(channel_.get(), rpcmethod_OpenChannel_, context, request);
}

void Lightning::Stub::experimental_async::OpenChannel(::grpc::ClientContext* context, ::lnrpc::OpenChannelRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::OpenStatusUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::OpenStatusUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_OpenChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::OpenStatusUpdate>* Lightning::Stub::AsyncOpenChannelRaw(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::OpenStatusUpdate>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::OpenStatusUpdate>* Lightning::Stub::PrepareAsyncOpenChannelRaw(::grpc::ClientContext* context, const ::lnrpc::OpenChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::OpenStatusUpdate>::Create(channel_.get(), cq, rpcmethod_OpenChannel_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::FundingStateStep(::grpc::ClientContext* context, const ::lnrpc::FundingTransitionMsg& request, ::lnrpc::FundingStateStepResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FundingStateStep_, context, request, response);
}

void Lightning::Stub::experimental_async::FundingStateStep(::grpc::ClientContext* context, const ::lnrpc::FundingTransitionMsg* request, ::lnrpc::FundingStateStepResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FundingStateStep_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::FundingStateStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::FundingStateStepResp* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FundingStateStep_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::FundingStateStep(::grpc::ClientContext* context, const ::lnrpc::FundingTransitionMsg* request, ::lnrpc::FundingStateStepResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FundingStateStep_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::FundingStateStep(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::FundingStateStepResp* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FundingStateStep_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::FundingStateStepResp>* Lightning::Stub::AsyncFundingStateStepRaw(::grpc::ClientContext* context, const ::lnrpc::FundingTransitionMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::FundingStateStepResp>::Create(channel_.get(), cq, rpcmethod_FundingStateStep_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::FundingStateStepResp>* Lightning::Stub::PrepareAsyncFundingStateStepRaw(::grpc::ClientContext* context, const ::lnrpc::FundingTransitionMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::FundingStateStepResp>::Create(channel_.get(), cq, rpcmethod_FundingStateStep_, context, request, false);
}

::grpc::ClientReaderWriter< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>* Lightning::Stub::ChannelAcceptorRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>::Create(channel_.get(), rpcmethod_ChannelAcceptor_, context);
}

void Lightning::Stub::experimental_async::ChannelAcceptor(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::lnrpc::ChannelAcceptResponse,::lnrpc::ChannelAcceptRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::lnrpc::ChannelAcceptResponse,::lnrpc::ChannelAcceptRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_ChannelAcceptor_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>* Lightning::Stub::AsyncChannelAcceptorRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>::Create(channel_.get(), cq, rpcmethod_ChannelAcceptor_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>* Lightning::Stub::PrepareAsyncChannelAcceptorRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>::Create(channel_.get(), cq, rpcmethod_ChannelAcceptor_, context, false, nullptr);
}

::grpc::ClientReader< ::lnrpc::CloseStatusUpdate>* Lightning::Stub::CloseChannelRaw(::grpc::ClientContext* context, const ::lnrpc::CloseChannelRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::CloseStatusUpdate>::Create(channel_.get(), rpcmethod_CloseChannel_, context, request);
}

void Lightning::Stub::experimental_async::CloseChannel(::grpc::ClientContext* context, ::lnrpc::CloseChannelRequest* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::CloseStatusUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::CloseStatusUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_CloseChannel_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::CloseStatusUpdate>* Lightning::Stub::AsyncCloseChannelRaw(::grpc::ClientContext* context, const ::lnrpc::CloseChannelRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::CloseStatusUpdate>::Create(channel_.get(), cq, rpcmethod_CloseChannel_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::CloseStatusUpdate>* Lightning::Stub::PrepareAsyncCloseChannelRaw(::grpc::ClientContext* context, const ::lnrpc::CloseChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::CloseStatusUpdate>::Create(channel_.get(), cq, rpcmethod_CloseChannel_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::AbandonChannel(::grpc::ClientContext* context, const ::lnrpc::AbandonChannelRequest& request, ::lnrpc::AbandonChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AbandonChannel_, context, request, response);
}

void Lightning::Stub::experimental_async::AbandonChannel(::grpc::ClientContext* context, const ::lnrpc::AbandonChannelRequest* request, ::lnrpc::AbandonChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbandonChannel_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::AbandonChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::AbandonChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AbandonChannel_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::AbandonChannel(::grpc::ClientContext* context, const ::lnrpc::AbandonChannelRequest* request, ::lnrpc::AbandonChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbandonChannel_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::AbandonChannel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::AbandonChannelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AbandonChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::AbandonChannelResponse>* Lightning::Stub::AsyncAbandonChannelRaw(::grpc::ClientContext* context, const ::lnrpc::AbandonChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::AbandonChannelResponse>::Create(channel_.get(), cq, rpcmethod_AbandonChannel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::AbandonChannelResponse>* Lightning::Stub::PrepareAsyncAbandonChannelRaw(::grpc::ClientContext* context, const ::lnrpc::AbandonChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::AbandonChannelResponse>::Create(channel_.get(), cq, rpcmethod_AbandonChannel_, context, request, false);
}

::grpc::ClientReaderWriter< ::lnrpc::SendRequest, ::lnrpc::SendResponse>* Lightning::Stub::SendPaymentRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::lnrpc::SendRequest, ::lnrpc::SendResponse>::Create(channel_.get(), rpcmethod_SendPayment_, context);
}

void Lightning::Stub::experimental_async::SendPayment(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::lnrpc::SendRequest,::lnrpc::SendResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::lnrpc::SendRequest,::lnrpc::SendResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SendPayment_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::SendRequest, ::lnrpc::SendResponse>* Lightning::Stub::AsyncSendPaymentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::SendRequest, ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendPayment_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::SendRequest, ::lnrpc::SendResponse>* Lightning::Stub::PrepareAsyncSendPaymentRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::SendRequest, ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendPayment_, context, false, nullptr);
}

::grpc::Status Lightning::Stub::SendPaymentSync(::grpc::ClientContext* context, const ::lnrpc::SendRequest& request, ::lnrpc::SendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendPaymentSync_, context, request, response);
}

void Lightning::Stub::experimental_async::SendPaymentSync(::grpc::ClientContext* context, const ::lnrpc::SendRequest* request, ::lnrpc::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendPaymentSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendPaymentSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendPaymentSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendPaymentSync(::grpc::ClientContext* context, const ::lnrpc::SendRequest* request, ::lnrpc::SendResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendPaymentSync_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::SendPaymentSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendPaymentSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendResponse>* Lightning::Stub::AsyncSendPaymentSyncRaw(::grpc::ClientContext* context, const ::lnrpc::SendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendPaymentSync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendResponse>* Lightning::Stub::PrepareAsyncSendPaymentSyncRaw(::grpc::ClientContext* context, const ::lnrpc::SendRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendPaymentSync_, context, request, false);
}

::grpc::ClientReaderWriter< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>* Lightning::Stub::SendToRouteRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>::Create(channel_.get(), rpcmethod_SendToRoute_, context);
}

void Lightning::Stub::experimental_async::SendToRoute(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::lnrpc::SendToRouteRequest,::lnrpc::SendResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::lnrpc::SendToRouteRequest,::lnrpc::SendResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SendToRoute_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>* Lightning::Stub::AsyncSendToRouteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendToRoute_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>* Lightning::Stub::PrepareAsyncSendToRouteRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendToRoute_, context, false, nullptr);
}

::grpc::Status Lightning::Stub::SendToRouteSync(::grpc::ClientContext* context, const ::lnrpc::SendToRouteRequest& request, ::lnrpc::SendResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendToRouteSync_, context, request, response);
}

void Lightning::Stub::experimental_async::SendToRouteSync(::grpc::ClientContext* context, const ::lnrpc::SendToRouteRequest* request, ::lnrpc::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendToRouteSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendToRouteSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendToRouteSync_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::SendToRouteSync(::grpc::ClientContext* context, const ::lnrpc::SendToRouteRequest* request, ::lnrpc::SendResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendToRouteSync_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::SendToRouteSync(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::SendResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendToRouteSync_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendResponse>* Lightning::Stub::AsyncSendToRouteSyncRaw(::grpc::ClientContext* context, const ::lnrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendToRouteSync_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::SendResponse>* Lightning::Stub::PrepareAsyncSendToRouteSyncRaw(::grpc::ClientContext* context, const ::lnrpc::SendToRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::SendResponse>::Create(channel_.get(), cq, rpcmethod_SendToRouteSync_, context, request, false);
}

::grpc::Status Lightning::Stub::AddInvoice(::grpc::ClientContext* context, const ::lnrpc::Invoice& request, ::lnrpc::AddInvoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AddInvoice_, context, request, response);
}

void Lightning::Stub::experimental_async::AddInvoice(::grpc::ClientContext* context, const ::lnrpc::Invoice* request, ::lnrpc::AddInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddInvoice_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::AddInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::AddInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_AddInvoice_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::AddInvoice(::grpc::ClientContext* context, const ::lnrpc::Invoice* request, ::lnrpc::AddInvoiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddInvoice_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::AddInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::AddInvoiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_AddInvoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::AddInvoiceResponse>* Lightning::Stub::AsyncAddInvoiceRaw(::grpc::ClientContext* context, const ::lnrpc::Invoice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::AddInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_AddInvoice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::AddInvoiceResponse>* Lightning::Stub::PrepareAsyncAddInvoiceRaw(::grpc::ClientContext* context, const ::lnrpc::Invoice& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::AddInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_AddInvoice_, context, request, false);
}

::grpc::Status Lightning::Stub::ListInvoices(::grpc::ClientContext* context, const ::lnrpc::ListInvoiceRequest& request, ::lnrpc::ListInvoiceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListInvoices_, context, request, response);
}

void Lightning::Stub::experimental_async::ListInvoices(::grpc::ClientContext* context, const ::lnrpc::ListInvoiceRequest* request, ::lnrpc::ListInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListInvoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListInvoiceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListInvoices(::grpc::ClientContext* context, const ::lnrpc::ListInvoiceRequest* request, ::lnrpc::ListInvoiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListInvoices(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListInvoiceResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListInvoices_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListInvoiceResponse>* Lightning::Stub::AsyncListInvoicesRaw(::grpc::ClientContext* context, const ::lnrpc::ListInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_ListInvoices_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListInvoiceResponse>* Lightning::Stub::PrepareAsyncListInvoicesRaw(::grpc::ClientContext* context, const ::lnrpc::ListInvoiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListInvoiceResponse>::Create(channel_.get(), cq, rpcmethod_ListInvoices_, context, request, false);
}

::grpc::Status Lightning::Stub::LookupInvoice(::grpc::ClientContext* context, const ::lnrpc::PaymentHash& request, ::lnrpc::Invoice* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_LookupInvoice_, context, request, response);
}

void Lightning::Stub::experimental_async::LookupInvoice(::grpc::ClientContext* context, const ::lnrpc::PaymentHash* request, ::lnrpc::Invoice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LookupInvoice_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::LookupInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::Invoice* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_LookupInvoice_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::LookupInvoice(::grpc::ClientContext* context, const ::lnrpc::PaymentHash* request, ::lnrpc::Invoice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LookupInvoice_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::LookupInvoice(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::Invoice* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_LookupInvoice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::Invoice>* Lightning::Stub::AsyncLookupInvoiceRaw(::grpc::ClientContext* context, const ::lnrpc::PaymentHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::Invoice>::Create(channel_.get(), cq, rpcmethod_LookupInvoice_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::Invoice>* Lightning::Stub::PrepareAsyncLookupInvoiceRaw(::grpc::ClientContext* context, const ::lnrpc::PaymentHash& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::Invoice>::Create(channel_.get(), cq, rpcmethod_LookupInvoice_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::Invoice>* Lightning::Stub::SubscribeInvoicesRaw(::grpc::ClientContext* context, const ::lnrpc::InvoiceSubscription& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::Invoice>::Create(channel_.get(), rpcmethod_SubscribeInvoices_, context, request);
}

void Lightning::Stub::experimental_async::SubscribeInvoices(::grpc::ClientContext* context, ::lnrpc::InvoiceSubscription* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::Invoice>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::Invoice>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeInvoices_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::Invoice>* Lightning::Stub::AsyncSubscribeInvoicesRaw(::grpc::ClientContext* context, const ::lnrpc::InvoiceSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Invoice>::Create(channel_.get(), cq, rpcmethod_SubscribeInvoices_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::Invoice>* Lightning::Stub::PrepareAsyncSubscribeInvoicesRaw(::grpc::ClientContext* context, const ::lnrpc::InvoiceSubscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::Invoice>::Create(channel_.get(), cq, rpcmethod_SubscribeInvoices_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::DecodePayReq(::grpc::ClientContext* context, const ::lnrpc::PayReqString& request, ::lnrpc::PayReq* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DecodePayReq_, context, request, response);
}

void Lightning::Stub::experimental_async::DecodePayReq(::grpc::ClientContext* context, const ::lnrpc::PayReqString* request, ::lnrpc::PayReq* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecodePayReq_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DecodePayReq(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PayReq* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DecodePayReq_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DecodePayReq(::grpc::ClientContext* context, const ::lnrpc::PayReqString* request, ::lnrpc::PayReq* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecodePayReq_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DecodePayReq(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PayReq* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DecodePayReq_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PayReq>* Lightning::Stub::AsyncDecodePayReqRaw(::grpc::ClientContext* context, const ::lnrpc::PayReqString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PayReq>::Create(channel_.get(), cq, rpcmethod_DecodePayReq_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PayReq>* Lightning::Stub::PrepareAsyncDecodePayReqRaw(::grpc::ClientContext* context, const ::lnrpc::PayReqString& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PayReq>::Create(channel_.get(), cq, rpcmethod_DecodePayReq_, context, request, false);
}

::grpc::Status Lightning::Stub::ListPayments(::grpc::ClientContext* context, const ::lnrpc::ListPaymentsRequest& request, ::lnrpc::ListPaymentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPayments_, context, request, response);
}

void Lightning::Stub::experimental_async::ListPayments(::grpc::ClientContext* context, const ::lnrpc::ListPaymentsRequest* request, ::lnrpc::ListPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPayments_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPayments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPayments_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPayments(::grpc::ClientContext* context, const ::lnrpc::ListPaymentsRequest* request, ::lnrpc::ListPaymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPayments_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListPayments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPaymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPayments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPaymentsResponse>* Lightning::Stub::AsyncListPaymentsRaw(::grpc::ClientContext* context, const ::lnrpc::ListPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_ListPayments_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPaymentsResponse>* Lightning::Stub::PrepareAsyncListPaymentsRaw(::grpc::ClientContext* context, const ::lnrpc::ListPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_ListPayments_, context, request, false);
}

::grpc::Status Lightning::Stub::DeleteAllPayments(::grpc::ClientContext* context, const ::lnrpc::DeleteAllPaymentsRequest& request, ::lnrpc::DeleteAllPaymentsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteAllPayments_, context, request, response);
}

void Lightning::Stub::experimental_async::DeleteAllPayments(::grpc::ClientContext* context, const ::lnrpc::DeleteAllPaymentsRequest* request, ::lnrpc::DeleteAllPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAllPayments_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DeleteAllPayments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DeleteAllPaymentsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteAllPayments_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DeleteAllPayments(::grpc::ClientContext* context, const ::lnrpc::DeleteAllPaymentsRequest* request, ::lnrpc::DeleteAllPaymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAllPayments_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DeleteAllPayments(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DeleteAllPaymentsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteAllPayments_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DeleteAllPaymentsResponse>* Lightning::Stub::AsyncDeleteAllPaymentsRaw(::grpc::ClientContext* context, const ::lnrpc::DeleteAllPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DeleteAllPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAllPayments_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DeleteAllPaymentsResponse>* Lightning::Stub::PrepareAsyncDeleteAllPaymentsRaw(::grpc::ClientContext* context, const ::lnrpc::DeleteAllPaymentsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DeleteAllPaymentsResponse>::Create(channel_.get(), cq, rpcmethod_DeleteAllPayments_, context, request, false);
}

::grpc::Status Lightning::Stub::DescribeGraph(::grpc::ClientContext* context, const ::lnrpc::ChannelGraphRequest& request, ::lnrpc::ChannelGraph* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DescribeGraph_, context, request, response);
}

void Lightning::Stub::experimental_async::DescribeGraph(::grpc::ClientContext* context, const ::lnrpc::ChannelGraphRequest* request, ::lnrpc::ChannelGraph* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeGraph_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DescribeGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelGraph* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DescribeGraph_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DescribeGraph(::grpc::ClientContext* context, const ::lnrpc::ChannelGraphRequest* request, ::lnrpc::ChannelGraph* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeGraph_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DescribeGraph(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelGraph* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DescribeGraph_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelGraph>* Lightning::Stub::AsyncDescribeGraphRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelGraph>::Create(channel_.get(), cq, rpcmethod_DescribeGraph_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelGraph>* Lightning::Stub::PrepareAsyncDescribeGraphRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelGraphRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelGraph>::Create(channel_.get(), cq, rpcmethod_DescribeGraph_, context, request, false);
}

::grpc::Status Lightning::Stub::GetNodeMetrics(::grpc::ClientContext* context, const ::lnrpc::NodeMetricsRequest& request, ::lnrpc::NodeMetricsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodeMetrics_, context, request, response);
}

void Lightning::Stub::experimental_async::GetNodeMetrics(::grpc::ClientContext* context, const ::lnrpc::NodeMetricsRequest* request, ::lnrpc::NodeMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeMetrics_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNodeMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NodeMetricsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeMetrics_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNodeMetrics(::grpc::ClientContext* context, const ::lnrpc::NodeMetricsRequest* request, ::lnrpc::NodeMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeMetrics_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetNodeMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NodeMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeMetrics_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NodeMetricsResponse>* Lightning::Stub::AsyncGetNodeMetricsRaw(::grpc::ClientContext* context, const ::lnrpc::NodeMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NodeMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetNodeMetrics_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NodeMetricsResponse>* Lightning::Stub::PrepareAsyncGetNodeMetricsRaw(::grpc::ClientContext* context, const ::lnrpc::NodeMetricsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NodeMetricsResponse>::Create(channel_.get(), cq, rpcmethod_GetNodeMetrics_, context, request, false);
}

::grpc::Status Lightning::Stub::GetChanInfo(::grpc::ClientContext* context, const ::lnrpc::ChanInfoRequest& request, ::lnrpc::ChannelEdge* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChanInfo_, context, request, response);
}

void Lightning::Stub::experimental_async::GetChanInfo(::grpc::ClientContext* context, const ::lnrpc::ChanInfoRequest* request, ::lnrpc::ChannelEdge* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChanInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetChanInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelEdge* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChanInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetChanInfo(::grpc::ClientContext* context, const ::lnrpc::ChanInfoRequest* request, ::lnrpc::ChannelEdge* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChanInfo_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetChanInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelEdge* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetChanInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelEdge>* Lightning::Stub::AsyncGetChanInfoRaw(::grpc::ClientContext* context, const ::lnrpc::ChanInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelEdge>::Create(channel_.get(), cq, rpcmethod_GetChanInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelEdge>* Lightning::Stub::PrepareAsyncGetChanInfoRaw(::grpc::ClientContext* context, const ::lnrpc::ChanInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelEdge>::Create(channel_.get(), cq, rpcmethod_GetChanInfo_, context, request, false);
}

::grpc::Status Lightning::Stub::GetNodeInfo(::grpc::ClientContext* context, const ::lnrpc::NodeInfoRequest& request, ::lnrpc::NodeInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodeInfo_, context, request, response);
}

void Lightning::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::lnrpc::NodeInfoRequest* request, ::lnrpc::NodeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NodeInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::lnrpc::NodeInfoRequest* request, ::lnrpc::NodeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetNodeInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NodeInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNodeInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NodeInfo>* Lightning::Stub::AsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::lnrpc::NodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NodeInfo>::Create(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NodeInfo>* Lightning::Stub::PrepareAsyncGetNodeInfoRaw(::grpc::ClientContext* context, const ::lnrpc::NodeInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NodeInfo>::Create(channel_.get(), cq, rpcmethod_GetNodeInfo_, context, request, false);
}

::grpc::Status Lightning::Stub::QueryRoutes(::grpc::ClientContext* context, const ::lnrpc::QueryRoutesRequest& request, ::lnrpc::QueryRoutesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryRoutes_, context, request, response);
}

void Lightning::Stub::experimental_async::QueryRoutes(::grpc::ClientContext* context, const ::lnrpc::QueryRoutesRequest* request, ::lnrpc::QueryRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryRoutes_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::QueryRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::QueryRoutesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryRoutes_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::QueryRoutes(::grpc::ClientContext* context, const ::lnrpc::QueryRoutesRequest* request, ::lnrpc::QueryRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryRoutes_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::QueryRoutes(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::QueryRoutesResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryRoutes_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::QueryRoutesResponse>* Lightning::Stub::AsyncQueryRoutesRaw(::grpc::ClientContext* context, const ::lnrpc::QueryRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::QueryRoutesResponse>::Create(channel_.get(), cq, rpcmethod_QueryRoutes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::QueryRoutesResponse>* Lightning::Stub::PrepareAsyncQueryRoutesRaw(::grpc::ClientContext* context, const ::lnrpc::QueryRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::QueryRoutesResponse>::Create(channel_.get(), cq, rpcmethod_QueryRoutes_, context, request, false);
}

::grpc::Status Lightning::Stub::GetNetworkInfo(::grpc::ClientContext* context, const ::lnrpc::NetworkInfoRequest& request, ::lnrpc::NetworkInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNetworkInfo_, context, request, response);
}

void Lightning::Stub::experimental_async::GetNetworkInfo(::grpc::ClientContext* context, const ::lnrpc::NetworkInfoRequest* request, ::lnrpc::NetworkInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNetworkInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNetworkInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NetworkInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetNetworkInfo_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::GetNetworkInfo(::grpc::ClientContext* context, const ::lnrpc::NetworkInfoRequest* request, ::lnrpc::NetworkInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNetworkInfo_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::GetNetworkInfo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::NetworkInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetNetworkInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NetworkInfo>* Lightning::Stub::AsyncGetNetworkInfoRaw(::grpc::ClientContext* context, const ::lnrpc::NetworkInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NetworkInfo>::Create(channel_.get(), cq, rpcmethod_GetNetworkInfo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::NetworkInfo>* Lightning::Stub::PrepareAsyncGetNetworkInfoRaw(::grpc::ClientContext* context, const ::lnrpc::NetworkInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::NetworkInfo>::Create(channel_.get(), cq, rpcmethod_GetNetworkInfo_, context, request, false);
}

::grpc::Status Lightning::Stub::StopDaemon(::grpc::ClientContext* context, const ::lnrpc::StopRequest& request, ::lnrpc::StopResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopDaemon_, context, request, response);
}

void Lightning::Stub::experimental_async::StopDaemon(::grpc::ClientContext* context, const ::lnrpc::StopRequest* request, ::lnrpc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopDaemon_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::StopDaemon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::StopResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopDaemon_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::StopDaemon(::grpc::ClientContext* context, const ::lnrpc::StopRequest* request, ::lnrpc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopDaemon_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::StopDaemon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::StopResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopDaemon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::StopResponse>* Lightning::Stub::AsyncStopDaemonRaw(::grpc::ClientContext* context, const ::lnrpc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::StopResponse>::Create(channel_.get(), cq, rpcmethod_StopDaemon_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::StopResponse>* Lightning::Stub::PrepareAsyncStopDaemonRaw(::grpc::ClientContext* context, const ::lnrpc::StopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::StopResponse>::Create(channel_.get(), cq, rpcmethod_StopDaemon_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::GraphTopologyUpdate>* Lightning::Stub::SubscribeChannelGraphRaw(::grpc::ClientContext* context, const ::lnrpc::GraphTopologySubscription& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::GraphTopologyUpdate>::Create(channel_.get(), rpcmethod_SubscribeChannelGraph_, context, request);
}

void Lightning::Stub::experimental_async::SubscribeChannelGraph(::grpc::ClientContext* context, ::lnrpc::GraphTopologySubscription* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::GraphTopologyUpdate>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::GraphTopologyUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeChannelGraph_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::GraphTopologyUpdate>* Lightning::Stub::AsyncSubscribeChannelGraphRaw(::grpc::ClientContext* context, const ::lnrpc::GraphTopologySubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::GraphTopologyUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelGraph_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::GraphTopologyUpdate>* Lightning::Stub::PrepareAsyncSubscribeChannelGraphRaw(::grpc::ClientContext* context, const ::lnrpc::GraphTopologySubscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::GraphTopologyUpdate>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelGraph_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::DebugLevel(::grpc::ClientContext* context, const ::lnrpc::DebugLevelRequest& request, ::lnrpc::DebugLevelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DebugLevel_, context, request, response);
}

void Lightning::Stub::experimental_async::DebugLevel(::grpc::ClientContext* context, const ::lnrpc::DebugLevelRequest* request, ::lnrpc::DebugLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DebugLevel_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DebugLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DebugLevelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DebugLevel_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DebugLevel(::grpc::ClientContext* context, const ::lnrpc::DebugLevelRequest* request, ::lnrpc::DebugLevelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DebugLevel_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DebugLevel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DebugLevelResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DebugLevel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DebugLevelResponse>* Lightning::Stub::AsyncDebugLevelRaw(::grpc::ClientContext* context, const ::lnrpc::DebugLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DebugLevelResponse>::Create(channel_.get(), cq, rpcmethod_DebugLevel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DebugLevelResponse>* Lightning::Stub::PrepareAsyncDebugLevelRaw(::grpc::ClientContext* context, const ::lnrpc::DebugLevelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DebugLevelResponse>::Create(channel_.get(), cq, rpcmethod_DebugLevel_, context, request, false);
}

::grpc::Status Lightning::Stub::FeeReport(::grpc::ClientContext* context, const ::lnrpc::FeeReportRequest& request, ::lnrpc::FeeReportResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FeeReport_, context, request, response);
}

void Lightning::Stub::experimental_async::FeeReport(::grpc::ClientContext* context, const ::lnrpc::FeeReportRequest* request, ::lnrpc::FeeReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FeeReport_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::FeeReport(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::FeeReportResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FeeReport_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::FeeReport(::grpc::ClientContext* context, const ::lnrpc::FeeReportRequest* request, ::lnrpc::FeeReportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FeeReport_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::FeeReport(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::FeeReportResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_FeeReport_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::FeeReportResponse>* Lightning::Stub::AsyncFeeReportRaw(::grpc::ClientContext* context, const ::lnrpc::FeeReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::FeeReportResponse>::Create(channel_.get(), cq, rpcmethod_FeeReport_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::FeeReportResponse>* Lightning::Stub::PrepareAsyncFeeReportRaw(::grpc::ClientContext* context, const ::lnrpc::FeeReportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::FeeReportResponse>::Create(channel_.get(), cq, rpcmethod_FeeReport_, context, request, false);
}

::grpc::Status Lightning::Stub::UpdateChannelPolicy(::grpc::ClientContext* context, const ::lnrpc::PolicyUpdateRequest& request, ::lnrpc::PolicyUpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateChannelPolicy_, context, request, response);
}

void Lightning::Stub::experimental_async::UpdateChannelPolicy(::grpc::ClientContext* context, const ::lnrpc::PolicyUpdateRequest* request, ::lnrpc::PolicyUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateChannelPolicy_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::UpdateChannelPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PolicyUpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateChannelPolicy_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::UpdateChannelPolicy(::grpc::ClientContext* context, const ::lnrpc::PolicyUpdateRequest* request, ::lnrpc::PolicyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateChannelPolicy_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::UpdateChannelPolicy(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::PolicyUpdateResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_UpdateChannelPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PolicyUpdateResponse>* Lightning::Stub::AsyncUpdateChannelPolicyRaw(::grpc::ClientContext* context, const ::lnrpc::PolicyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PolicyUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateChannelPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::PolicyUpdateResponse>* Lightning::Stub::PrepareAsyncUpdateChannelPolicyRaw(::grpc::ClientContext* context, const ::lnrpc::PolicyUpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::PolicyUpdateResponse>::Create(channel_.get(), cq, rpcmethod_UpdateChannelPolicy_, context, request, false);
}

::grpc::Status Lightning::Stub::ForwardingHistory(::grpc::ClientContext* context, const ::lnrpc::ForwardingHistoryRequest& request, ::lnrpc::ForwardingHistoryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ForwardingHistory_, context, request, response);
}

void Lightning::Stub::experimental_async::ForwardingHistory(::grpc::ClientContext* context, const ::lnrpc::ForwardingHistoryRequest* request, ::lnrpc::ForwardingHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForwardingHistory_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ForwardingHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ForwardingHistoryResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ForwardingHistory_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ForwardingHistory(::grpc::ClientContext* context, const ::lnrpc::ForwardingHistoryRequest* request, ::lnrpc::ForwardingHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ForwardingHistory_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ForwardingHistory(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ForwardingHistoryResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ForwardingHistory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ForwardingHistoryResponse>* Lightning::Stub::AsyncForwardingHistoryRaw(::grpc::ClientContext* context, const ::lnrpc::ForwardingHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ForwardingHistoryResponse>::Create(channel_.get(), cq, rpcmethod_ForwardingHistory_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ForwardingHistoryResponse>* Lightning::Stub::PrepareAsyncForwardingHistoryRaw(::grpc::ClientContext* context, const ::lnrpc::ForwardingHistoryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ForwardingHistoryResponse>::Create(channel_.get(), cq, rpcmethod_ForwardingHistory_, context, request, false);
}

::grpc::Status Lightning::Stub::ExportChannelBackup(::grpc::ClientContext* context, const ::lnrpc::ExportChannelBackupRequest& request, ::lnrpc::ChannelBackup* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExportChannelBackup_, context, request, response);
}

void Lightning::Stub::experimental_async::ExportChannelBackup(::grpc::ClientContext* context, const ::lnrpc::ExportChannelBackupRequest* request, ::lnrpc::ChannelBackup* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExportChannelBackup_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ExportChannelBackup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelBackup* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExportChannelBackup_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ExportChannelBackup(::grpc::ClientContext* context, const ::lnrpc::ExportChannelBackupRequest* request, ::lnrpc::ChannelBackup* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExportChannelBackup_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ExportChannelBackup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChannelBackup* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExportChannelBackup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelBackup>* Lightning::Stub::AsyncExportChannelBackupRaw(::grpc::ClientContext* context, const ::lnrpc::ExportChannelBackupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelBackup>::Create(channel_.get(), cq, rpcmethod_ExportChannelBackup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChannelBackup>* Lightning::Stub::PrepareAsyncExportChannelBackupRaw(::grpc::ClientContext* context, const ::lnrpc::ExportChannelBackupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChannelBackup>::Create(channel_.get(), cq, rpcmethod_ExportChannelBackup_, context, request, false);
}

::grpc::Status Lightning::Stub::ExportAllChannelBackups(::grpc::ClientContext* context, const ::lnrpc::ChanBackupExportRequest& request, ::lnrpc::ChanBackupSnapshot* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ExportAllChannelBackups_, context, request, response);
}

void Lightning::Stub::experimental_async::ExportAllChannelBackups(::grpc::ClientContext* context, const ::lnrpc::ChanBackupExportRequest* request, ::lnrpc::ChanBackupSnapshot* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExportAllChannelBackups_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ExportAllChannelBackups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChanBackupSnapshot* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ExportAllChannelBackups_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ExportAllChannelBackups(::grpc::ClientContext* context, const ::lnrpc::ChanBackupExportRequest* request, ::lnrpc::ChanBackupSnapshot* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExportAllChannelBackups_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ExportAllChannelBackups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ChanBackupSnapshot* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ExportAllChannelBackups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChanBackupSnapshot>* Lightning::Stub::AsyncExportAllChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::ChanBackupExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(channel_.get(), cq, rpcmethod_ExportAllChannelBackups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ChanBackupSnapshot>* Lightning::Stub::PrepareAsyncExportAllChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::ChanBackupExportRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(channel_.get(), cq, rpcmethod_ExportAllChannelBackups_, context, request, false);
}

::grpc::Status Lightning::Stub::VerifyChanBackup(::grpc::ClientContext* context, const ::lnrpc::ChanBackupSnapshot& request, ::lnrpc::VerifyChanBackupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_VerifyChanBackup_, context, request, response);
}

void Lightning::Stub::experimental_async::VerifyChanBackup(::grpc::ClientContext* context, const ::lnrpc::ChanBackupSnapshot* request, ::lnrpc::VerifyChanBackupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyChanBackup_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::VerifyChanBackup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::VerifyChanBackupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_VerifyChanBackup_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::VerifyChanBackup(::grpc::ClientContext* context, const ::lnrpc::ChanBackupSnapshot* request, ::lnrpc::VerifyChanBackupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyChanBackup_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::VerifyChanBackup(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::VerifyChanBackupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_VerifyChanBackup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::VerifyChanBackupResponse>* Lightning::Stub::AsyncVerifyChanBackupRaw(::grpc::ClientContext* context, const ::lnrpc::ChanBackupSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::VerifyChanBackupResponse>::Create(channel_.get(), cq, rpcmethod_VerifyChanBackup_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::VerifyChanBackupResponse>* Lightning::Stub::PrepareAsyncVerifyChanBackupRaw(::grpc::ClientContext* context, const ::lnrpc::ChanBackupSnapshot& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::VerifyChanBackupResponse>::Create(channel_.get(), cq, rpcmethod_VerifyChanBackup_, context, request, false);
}

::grpc::Status Lightning::Stub::RestoreChannelBackups(::grpc::ClientContext* context, const ::lnrpc::RestoreChanBackupRequest& request, ::lnrpc::RestoreBackupResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RestoreChannelBackups_, context, request, response);
}

void Lightning::Stub::experimental_async::RestoreChannelBackups(::grpc::ClientContext* context, const ::lnrpc::RestoreChanBackupRequest* request, ::lnrpc::RestoreBackupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestoreChannelBackups_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::RestoreChannelBackups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::RestoreBackupResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RestoreChannelBackups_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::RestoreChannelBackups(::grpc::ClientContext* context, const ::lnrpc::RestoreChanBackupRequest* request, ::lnrpc::RestoreBackupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestoreChannelBackups_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::RestoreChannelBackups(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::RestoreBackupResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RestoreChannelBackups_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::RestoreBackupResponse>* Lightning::Stub::AsyncRestoreChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::RestoreChanBackupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::RestoreBackupResponse>::Create(channel_.get(), cq, rpcmethod_RestoreChannelBackups_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::RestoreBackupResponse>* Lightning::Stub::PrepareAsyncRestoreChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::RestoreChanBackupRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::RestoreBackupResponse>::Create(channel_.get(), cq, rpcmethod_RestoreChannelBackups_, context, request, false);
}

::grpc::ClientReader< ::lnrpc::ChanBackupSnapshot>* Lightning::Stub::SubscribeChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelBackupSubscription& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(channel_.get(), rpcmethod_SubscribeChannelBackups_, context, request);
}

void Lightning::Stub::experimental_async::SubscribeChannelBackups(::grpc::ClientContext* context, ::lnrpc::ChannelBackupSubscription* request, ::grpc::experimental::ClientReadReactor< ::lnrpc::ChanBackupSnapshot>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeChannelBackups_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::lnrpc::ChanBackupSnapshot>* Lightning::Stub::AsyncSubscribeChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelBackupSubscription& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelBackups_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::lnrpc::ChanBackupSnapshot>* Lightning::Stub::PrepareAsyncSubscribeChannelBackupsRaw(::grpc::ClientContext* context, const ::lnrpc::ChannelBackupSubscription& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::lnrpc::ChanBackupSnapshot>::Create(channel_.get(), cq, rpcmethod_SubscribeChannelBackups_, context, request, false, nullptr);
}

::grpc::Status Lightning::Stub::BakeMacaroon(::grpc::ClientContext* context, const ::lnrpc::BakeMacaroonRequest& request, ::lnrpc::BakeMacaroonResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_BakeMacaroon_, context, request, response);
}

void Lightning::Stub::experimental_async::BakeMacaroon(::grpc::ClientContext* context, const ::lnrpc::BakeMacaroonRequest* request, ::lnrpc::BakeMacaroonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BakeMacaroon_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::BakeMacaroon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::BakeMacaroonResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_BakeMacaroon_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::BakeMacaroon(::grpc::ClientContext* context, const ::lnrpc::BakeMacaroonRequest* request, ::lnrpc::BakeMacaroonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BakeMacaroon_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::BakeMacaroon(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::BakeMacaroonResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_BakeMacaroon_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::BakeMacaroonResponse>* Lightning::Stub::AsyncBakeMacaroonRaw(::grpc::ClientContext* context, const ::lnrpc::BakeMacaroonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::BakeMacaroonResponse>::Create(channel_.get(), cq, rpcmethod_BakeMacaroon_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::BakeMacaroonResponse>* Lightning::Stub::PrepareAsyncBakeMacaroonRaw(::grpc::ClientContext* context, const ::lnrpc::BakeMacaroonRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::BakeMacaroonResponse>::Create(channel_.get(), cq, rpcmethod_BakeMacaroon_, context, request, false);
}

::grpc::Status Lightning::Stub::ListMacaroonIDs(::grpc::ClientContext* context, const ::lnrpc::ListMacaroonIDsRequest& request, ::lnrpc::ListMacaroonIDsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListMacaroonIDs_, context, request, response);
}

void Lightning::Stub::experimental_async::ListMacaroonIDs(::grpc::ClientContext* context, const ::lnrpc::ListMacaroonIDsRequest* request, ::lnrpc::ListMacaroonIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMacaroonIDs_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListMacaroonIDs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListMacaroonIDsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListMacaroonIDs_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListMacaroonIDs(::grpc::ClientContext* context, const ::lnrpc::ListMacaroonIDsRequest* request, ::lnrpc::ListMacaroonIDsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMacaroonIDs_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListMacaroonIDs(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListMacaroonIDsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListMacaroonIDs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListMacaroonIDsResponse>* Lightning::Stub::AsyncListMacaroonIDsRaw(::grpc::ClientContext* context, const ::lnrpc::ListMacaroonIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListMacaroonIDsResponse>::Create(channel_.get(), cq, rpcmethod_ListMacaroonIDs_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListMacaroonIDsResponse>* Lightning::Stub::PrepareAsyncListMacaroonIDsRaw(::grpc::ClientContext* context, const ::lnrpc::ListMacaroonIDsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListMacaroonIDsResponse>::Create(channel_.get(), cq, rpcmethod_ListMacaroonIDs_, context, request, false);
}

::grpc::Status Lightning::Stub::DeleteMacaroonID(::grpc::ClientContext* context, const ::lnrpc::DeleteMacaroonIDRequest& request, ::lnrpc::DeleteMacaroonIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteMacaroonID_, context, request, response);
}

void Lightning::Stub::experimental_async::DeleteMacaroonID(::grpc::ClientContext* context, const ::lnrpc::DeleteMacaroonIDRequest* request, ::lnrpc::DeleteMacaroonIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteMacaroonID_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DeleteMacaroonID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DeleteMacaroonIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteMacaroonID_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::DeleteMacaroonID(::grpc::ClientContext* context, const ::lnrpc::DeleteMacaroonIDRequest* request, ::lnrpc::DeleteMacaroonIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteMacaroonID_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::DeleteMacaroonID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::DeleteMacaroonIDResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeleteMacaroonID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DeleteMacaroonIDResponse>* Lightning::Stub::AsyncDeleteMacaroonIDRaw(::grpc::ClientContext* context, const ::lnrpc::DeleteMacaroonIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DeleteMacaroonIDResponse>::Create(channel_.get(), cq, rpcmethod_DeleteMacaroonID_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::DeleteMacaroonIDResponse>* Lightning::Stub::PrepareAsyncDeleteMacaroonIDRaw(::grpc::ClientContext* context, const ::lnrpc::DeleteMacaroonIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::DeleteMacaroonIDResponse>::Create(channel_.get(), cq, rpcmethod_DeleteMacaroonID_, context, request, false);
}

::grpc::Status Lightning::Stub::ListPermissions(::grpc::ClientContext* context, const ::lnrpc::ListPermissionsRequest& request, ::lnrpc::ListPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPermissions_, context, request, response);
}

void Lightning::Stub::experimental_async::ListPermissions(::grpc::ClientContext* context, const ::lnrpc::ListPermissionsRequest* request, ::lnrpc::ListPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPermissions_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPermissionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPermissions_, context, request, response, std::move(f));
}

void Lightning::Stub::experimental_async::ListPermissions(::grpc::ClientContext* context, const ::lnrpc::ListPermissionsRequest* request, ::lnrpc::ListPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPermissions_, context, request, response, reactor);
}

void Lightning::Stub::experimental_async::ListPermissions(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::lnrpc::ListPermissionsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ListPermissions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPermissionsResponse>* Lightning::Stub::AsyncListPermissionsRaw(::grpc::ClientContext* context, const ::lnrpc::ListPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_ListPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::lnrpc::ListPermissionsResponse>* Lightning::Stub::PrepareAsyncListPermissionsRaw(::grpc::ClientContext* context, const ::lnrpc::ListPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::lnrpc::ListPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_ListPermissions_, context, request, false);
}

Lightning::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::WalletBalanceRequest, ::lnrpc::WalletBalanceResponse>(
          std::mem_fn(&Lightning::Service::WalletBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ChannelBalanceRequest, ::lnrpc::ChannelBalanceResponse>(
          std::mem_fn(&Lightning::Service::ChannelBalance), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::GetTransactionsRequest, ::lnrpc::TransactionDetails>(
          std::mem_fn(&Lightning::Service::GetTransactions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::EstimateFeeRequest, ::lnrpc::EstimateFeeResponse>(
          std::mem_fn(&Lightning::Service::EstimateFee), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::SendCoinsRequest, ::lnrpc::SendCoinsResponse>(
          std::mem_fn(&Lightning::Service::SendCoins), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListUnspentRequest, ::lnrpc::ListUnspentResponse>(
          std::mem_fn(&Lightning::Service::ListUnspent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::GetTransactionsRequest, ::lnrpc::Transaction>(
          std::mem_fn(&Lightning::Service::SubscribeTransactions), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::SendManyRequest, ::lnrpc::SendManyResponse>(
          std::mem_fn(&Lightning::Service::SendMany), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::NewAddressRequest, ::lnrpc::NewAddressResponse>(
          std::mem_fn(&Lightning::Service::NewAddress), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::SignMessageRequest, ::lnrpc::SignMessageResponse>(
          std::mem_fn(&Lightning::Service::SignMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::VerifyMessageRequest, ::lnrpc::VerifyMessageResponse>(
          std::mem_fn(&Lightning::Service::VerifyMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ConnectPeerRequest, ::lnrpc::ConnectPeerResponse>(
          std::mem_fn(&Lightning::Service::ConnectPeer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::DisconnectPeerRequest, ::lnrpc::DisconnectPeerResponse>(
          std::mem_fn(&Lightning::Service::DisconnectPeer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListPeersRequest, ::lnrpc::ListPeersResponse>(
          std::mem_fn(&Lightning::Service::ListPeers), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::PeerEventSubscription, ::lnrpc::PeerEvent>(
          std::mem_fn(&Lightning::Service::SubscribePeerEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::GetInfoRequest, ::lnrpc::GetInfoResponse>(
          std::mem_fn(&Lightning::Service::GetInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::GetRecoveryInfoRequest, ::lnrpc::GetRecoveryInfoResponse>(
          std::mem_fn(&Lightning::Service::GetRecoveryInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::PendingChannelsRequest, ::lnrpc::PendingChannelsResponse>(
          std::mem_fn(&Lightning::Service::PendingChannels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListChannelsRequest, ::lnrpc::ListChannelsResponse>(
          std::mem_fn(&Lightning::Service::ListChannels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[19],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::ChannelEventSubscription, ::lnrpc::ChannelEventUpdate>(
          std::mem_fn(&Lightning::Service::SubscribeChannelEvents), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ClosedChannelsRequest, ::lnrpc::ClosedChannelsResponse>(
          std::mem_fn(&Lightning::Service::ClosedChannels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::OpenChannelRequest, ::lnrpc::ChannelPoint>(
          std::mem_fn(&Lightning::Service::OpenChannelSync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[22],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::OpenChannelRequest, ::lnrpc::OpenStatusUpdate>(
          std::mem_fn(&Lightning::Service::OpenChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::FundingTransitionMsg, ::lnrpc::FundingStateStepResp>(
          std::mem_fn(&Lightning::Service::FundingStateStep), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[24],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Lightning::Service, ::lnrpc::ChannelAcceptResponse, ::lnrpc::ChannelAcceptRequest>(
          std::mem_fn(&Lightning::Service::ChannelAcceptor), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[25],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::CloseChannelRequest, ::lnrpc::CloseStatusUpdate>(
          std::mem_fn(&Lightning::Service::CloseChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::AbandonChannelRequest, ::lnrpc::AbandonChannelResponse>(
          std::mem_fn(&Lightning::Service::AbandonChannel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[27],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Lightning::Service, ::lnrpc::SendRequest, ::lnrpc::SendResponse>(
          std::mem_fn(&Lightning::Service::SendPayment), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::SendRequest, ::lnrpc::SendResponse>(
          std::mem_fn(&Lightning::Service::SendPaymentSync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[29],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Lightning::Service, ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>(
          std::mem_fn(&Lightning::Service::SendToRoute), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::SendToRouteRequest, ::lnrpc::SendResponse>(
          std::mem_fn(&Lightning::Service::SendToRouteSync), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::Invoice, ::lnrpc::AddInvoiceResponse>(
          std::mem_fn(&Lightning::Service::AddInvoice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListInvoiceRequest, ::lnrpc::ListInvoiceResponse>(
          std::mem_fn(&Lightning::Service::ListInvoices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::PaymentHash, ::lnrpc::Invoice>(
          std::mem_fn(&Lightning::Service::LookupInvoice), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[34],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::InvoiceSubscription, ::lnrpc::Invoice>(
          std::mem_fn(&Lightning::Service::SubscribeInvoices), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::PayReqString, ::lnrpc::PayReq>(
          std::mem_fn(&Lightning::Service::DecodePayReq), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListPaymentsRequest, ::lnrpc::ListPaymentsResponse>(
          std::mem_fn(&Lightning::Service::ListPayments), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::DeleteAllPaymentsRequest, ::lnrpc::DeleteAllPaymentsResponse>(
          std::mem_fn(&Lightning::Service::DeleteAllPayments), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ChannelGraphRequest, ::lnrpc::ChannelGraph>(
          std::mem_fn(&Lightning::Service::DescribeGraph), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::NodeMetricsRequest, ::lnrpc::NodeMetricsResponse>(
          std::mem_fn(&Lightning::Service::GetNodeMetrics), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ChanInfoRequest, ::lnrpc::ChannelEdge>(
          std::mem_fn(&Lightning::Service::GetChanInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::NodeInfoRequest, ::lnrpc::NodeInfo>(
          std::mem_fn(&Lightning::Service::GetNodeInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::QueryRoutesRequest, ::lnrpc::QueryRoutesResponse>(
          std::mem_fn(&Lightning::Service::QueryRoutes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::NetworkInfoRequest, ::lnrpc::NetworkInfo>(
          std::mem_fn(&Lightning::Service::GetNetworkInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::StopRequest, ::lnrpc::StopResponse>(
          std::mem_fn(&Lightning::Service::StopDaemon), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[45],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::GraphTopologySubscription, ::lnrpc::GraphTopologyUpdate>(
          std::mem_fn(&Lightning::Service::SubscribeChannelGraph), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::DebugLevelRequest, ::lnrpc::DebugLevelResponse>(
          std::mem_fn(&Lightning::Service::DebugLevel), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::FeeReportRequest, ::lnrpc::FeeReportResponse>(
          std::mem_fn(&Lightning::Service::FeeReport), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::PolicyUpdateRequest, ::lnrpc::PolicyUpdateResponse>(
          std::mem_fn(&Lightning::Service::UpdateChannelPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ForwardingHistoryRequest, ::lnrpc::ForwardingHistoryResponse>(
          std::mem_fn(&Lightning::Service::ForwardingHistory), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ExportChannelBackupRequest, ::lnrpc::ChannelBackup>(
          std::mem_fn(&Lightning::Service::ExportChannelBackup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ChanBackupExportRequest, ::lnrpc::ChanBackupSnapshot>(
          std::mem_fn(&Lightning::Service::ExportAllChannelBackups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ChanBackupSnapshot, ::lnrpc::VerifyChanBackupResponse>(
          std::mem_fn(&Lightning::Service::VerifyChanBackup), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::RestoreChanBackupRequest, ::lnrpc::RestoreBackupResponse>(
          std::mem_fn(&Lightning::Service::RestoreChannelBackups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[54],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Lightning::Service, ::lnrpc::ChannelBackupSubscription, ::lnrpc::ChanBackupSnapshot>(
          std::mem_fn(&Lightning::Service::SubscribeChannelBackups), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::BakeMacaroonRequest, ::lnrpc::BakeMacaroonResponse>(
          std::mem_fn(&Lightning::Service::BakeMacaroon), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListMacaroonIDsRequest, ::lnrpc::ListMacaroonIDsResponse>(
          std::mem_fn(&Lightning::Service::ListMacaroonIDs), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::DeleteMacaroonIDRequest, ::lnrpc::DeleteMacaroonIDResponse>(
          std::mem_fn(&Lightning::Service::DeleteMacaroonID), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Lightning_method_names[58],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Lightning::Service, ::lnrpc::ListPermissionsRequest, ::lnrpc::ListPermissionsResponse>(
          std::mem_fn(&Lightning::Service::ListPermissions), this)));
}

Lightning::Service::~Service() {
}

::grpc::Status Lightning::Service::WalletBalance(::grpc::ServerContext* context, const ::lnrpc::WalletBalanceRequest* request, ::lnrpc::WalletBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ChannelBalance(::grpc::ServerContext* context, const ::lnrpc::ChannelBalanceRequest* request, ::lnrpc::ChannelBalanceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetTransactions(::grpc::ServerContext* context, const ::lnrpc::GetTransactionsRequest* request, ::lnrpc::TransactionDetails* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::EstimateFee(::grpc::ServerContext* context, const ::lnrpc::EstimateFeeRequest* request, ::lnrpc::EstimateFeeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendCoins(::grpc::ServerContext* context, const ::lnrpc::SendCoinsRequest* request, ::lnrpc::SendCoinsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListUnspent(::grpc::ServerContext* context, const ::lnrpc::ListUnspentRequest* request, ::lnrpc::ListUnspentResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribeTransactions(::grpc::ServerContext* context, const ::lnrpc::GetTransactionsRequest* request, ::grpc::ServerWriter< ::lnrpc::Transaction>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendMany(::grpc::ServerContext* context, const ::lnrpc::SendManyRequest* request, ::lnrpc::SendManyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::NewAddress(::grpc::ServerContext* context, const ::lnrpc::NewAddressRequest* request, ::lnrpc::NewAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SignMessage(::grpc::ServerContext* context, const ::lnrpc::SignMessageRequest* request, ::lnrpc::SignMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::VerifyMessage(::grpc::ServerContext* context, const ::lnrpc::VerifyMessageRequest* request, ::lnrpc::VerifyMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ConnectPeer(::grpc::ServerContext* context, const ::lnrpc::ConnectPeerRequest* request, ::lnrpc::ConnectPeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DisconnectPeer(::grpc::ServerContext* context, const ::lnrpc::DisconnectPeerRequest* request, ::lnrpc::DisconnectPeerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListPeers(::grpc::ServerContext* context, const ::lnrpc::ListPeersRequest* request, ::lnrpc::ListPeersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribePeerEvents(::grpc::ServerContext* context, const ::lnrpc::PeerEventSubscription* request, ::grpc::ServerWriter< ::lnrpc::PeerEvent>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetInfo(::grpc::ServerContext* context, const ::lnrpc::GetInfoRequest* request, ::lnrpc::GetInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetRecoveryInfo(::grpc::ServerContext* context, const ::lnrpc::GetRecoveryInfoRequest* request, ::lnrpc::GetRecoveryInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::PendingChannels(::grpc::ServerContext* context, const ::lnrpc::PendingChannelsRequest* request, ::lnrpc::PendingChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListChannels(::grpc::ServerContext* context, const ::lnrpc::ListChannelsRequest* request, ::lnrpc::ListChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribeChannelEvents(::grpc::ServerContext* context, const ::lnrpc::ChannelEventSubscription* request, ::grpc::ServerWriter< ::lnrpc::ChannelEventUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ClosedChannels(::grpc::ServerContext* context, const ::lnrpc::ClosedChannelsRequest* request, ::lnrpc::ClosedChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::OpenChannelSync(::grpc::ServerContext* context, const ::lnrpc::OpenChannelRequest* request, ::lnrpc::ChannelPoint* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::OpenChannel(::grpc::ServerContext* context, const ::lnrpc::OpenChannelRequest* request, ::grpc::ServerWriter< ::lnrpc::OpenStatusUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::FundingStateStep(::grpc::ServerContext* context, const ::lnrpc::FundingTransitionMsg* request, ::lnrpc::FundingStateStepResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ChannelAcceptor(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::lnrpc::ChannelAcceptRequest, ::lnrpc::ChannelAcceptResponse>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::CloseChannel(::grpc::ServerContext* context, const ::lnrpc::CloseChannelRequest* request, ::grpc::ServerWriter< ::lnrpc::CloseStatusUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::AbandonChannel(::grpc::ServerContext* context, const ::lnrpc::AbandonChannelRequest* request, ::lnrpc::AbandonChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendPayment(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::lnrpc::SendResponse, ::lnrpc::SendRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendPaymentSync(::grpc::ServerContext* context, const ::lnrpc::SendRequest* request, ::lnrpc::SendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendToRoute(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::lnrpc::SendResponse, ::lnrpc::SendToRouteRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SendToRouteSync(::grpc::ServerContext* context, const ::lnrpc::SendToRouteRequest* request, ::lnrpc::SendResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::AddInvoice(::grpc::ServerContext* context, const ::lnrpc::Invoice* request, ::lnrpc::AddInvoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListInvoices(::grpc::ServerContext* context, const ::lnrpc::ListInvoiceRequest* request, ::lnrpc::ListInvoiceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::LookupInvoice(::grpc::ServerContext* context, const ::lnrpc::PaymentHash* request, ::lnrpc::Invoice* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribeInvoices(::grpc::ServerContext* context, const ::lnrpc::InvoiceSubscription* request, ::grpc::ServerWriter< ::lnrpc::Invoice>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DecodePayReq(::grpc::ServerContext* context, const ::lnrpc::PayReqString* request, ::lnrpc::PayReq* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListPayments(::grpc::ServerContext* context, const ::lnrpc::ListPaymentsRequest* request, ::lnrpc::ListPaymentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DeleteAllPayments(::grpc::ServerContext* context, const ::lnrpc::DeleteAllPaymentsRequest* request, ::lnrpc::DeleteAllPaymentsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DescribeGraph(::grpc::ServerContext* context, const ::lnrpc::ChannelGraphRequest* request, ::lnrpc::ChannelGraph* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetNodeMetrics(::grpc::ServerContext* context, const ::lnrpc::NodeMetricsRequest* request, ::lnrpc::NodeMetricsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetChanInfo(::grpc::ServerContext* context, const ::lnrpc::ChanInfoRequest* request, ::lnrpc::ChannelEdge* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetNodeInfo(::grpc::ServerContext* context, const ::lnrpc::NodeInfoRequest* request, ::lnrpc::NodeInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::QueryRoutes(::grpc::ServerContext* context, const ::lnrpc::QueryRoutesRequest* request, ::lnrpc::QueryRoutesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::GetNetworkInfo(::grpc::ServerContext* context, const ::lnrpc::NetworkInfoRequest* request, ::lnrpc::NetworkInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::StopDaemon(::grpc::ServerContext* context, const ::lnrpc::StopRequest* request, ::lnrpc::StopResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribeChannelGraph(::grpc::ServerContext* context, const ::lnrpc::GraphTopologySubscription* request, ::grpc::ServerWriter< ::lnrpc::GraphTopologyUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DebugLevel(::grpc::ServerContext* context, const ::lnrpc::DebugLevelRequest* request, ::lnrpc::DebugLevelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::FeeReport(::grpc::ServerContext* context, const ::lnrpc::FeeReportRequest* request, ::lnrpc::FeeReportResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::UpdateChannelPolicy(::grpc::ServerContext* context, const ::lnrpc::PolicyUpdateRequest* request, ::lnrpc::PolicyUpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ForwardingHistory(::grpc::ServerContext* context, const ::lnrpc::ForwardingHistoryRequest* request, ::lnrpc::ForwardingHistoryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ExportChannelBackup(::grpc::ServerContext* context, const ::lnrpc::ExportChannelBackupRequest* request, ::lnrpc::ChannelBackup* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ExportAllChannelBackups(::grpc::ServerContext* context, const ::lnrpc::ChanBackupExportRequest* request, ::lnrpc::ChanBackupSnapshot* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::VerifyChanBackup(::grpc::ServerContext* context, const ::lnrpc::ChanBackupSnapshot* request, ::lnrpc::VerifyChanBackupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::RestoreChannelBackups(::grpc::ServerContext* context, const ::lnrpc::RestoreChanBackupRequest* request, ::lnrpc::RestoreBackupResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::SubscribeChannelBackups(::grpc::ServerContext* context, const ::lnrpc::ChannelBackupSubscription* request, ::grpc::ServerWriter< ::lnrpc::ChanBackupSnapshot>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::BakeMacaroon(::grpc::ServerContext* context, const ::lnrpc::BakeMacaroonRequest* request, ::lnrpc::BakeMacaroonResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListMacaroonIDs(::grpc::ServerContext* context, const ::lnrpc::ListMacaroonIDsRequest* request, ::lnrpc::ListMacaroonIDsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::DeleteMacaroonID(::grpc::ServerContext* context, const ::lnrpc::DeleteMacaroonIDRequest* request, ::lnrpc::DeleteMacaroonIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Lightning::Service::ListPermissions(::grpc::ServerContext* context, const ::lnrpc::ListPermissionsRequest* request, ::lnrpc::ListPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace lnrpc

