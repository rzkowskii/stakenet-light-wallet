// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: autopilot.proto
#ifndef GRPC_autopilot_2eproto__INCLUDED
#define GRPC_autopilot_2eproto__INCLUDED

#include "autopilot.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace autopilotrpc {

// Autopilot is a service that can be used to get information about the current
// state of the daemon's autopilot agent, and also supply it with information
// that can be used when deciding where to open channels.
class Autopilot final {
 public:
  static constexpr char const* service_full_name() {
    return "autopilotrpc.Autopilot";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Status returns whether the daemon's autopilot agent is active.
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::autopilotrpc::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    // *
    // ModifyStatus is used to modify the status of the autopilot agent, like
    // enabling or disabling it.
    virtual ::grpc::Status ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::autopilotrpc::ModifyStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>> AsyncModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>>(AsyncModifyStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>> PrepareAsyncModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>>(PrepareAsyncModifyStatusRaw(context, request, cq));
    }
    // *
    // QueryScores queries all available autopilot heuristics, in addition to any
    // active combination of these heruristics, for the scores they would give to
    // the given nodes.
    virtual ::grpc::Status QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::autopilotrpc::QueryScoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>> AsyncQueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>>(AsyncQueryScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>> PrepareAsyncQueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>>(PrepareAsyncQueryScoresRaw(context, request, cq));
    }
    // *
    // SetScores attempts to set the scores used by the running autopilot agent,
    // if the external scoring heuristic is enabled.
    virtual ::grpc::Status SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::autopilotrpc::SetScoresResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>> AsyncSetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>>(AsyncSetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>> PrepareAsyncSetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>>(PrepareAsyncSetScoresRaw(context, request, cq));
    }
    // *
    // RestartWNewConstraints is used to restart the autopilot agent
    // with new pilot constraints.
    virtual ::grpc::Status RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::autopilotrpc::RestartConstraintsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>> AsyncRestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>>(AsyncRestartWNewConstraintsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>> PrepareAsyncRestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>>(PrepareAsyncRestartWNewConstraintsRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // *
      // Status returns whether the daemon's autopilot agent is active.
      virtual void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // ModifyStatus is used to modify the status of the autopilot agent, like
      // enabling or disabling it.
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // QueryScores queries all available autopilot heuristics, in addition to any
      // active combination of these heruristics, for the scores they would give to
      // the given nodes.
      virtual void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // SetScores attempts to set the scores used by the running autopilot agent,
      // if the external scoring heuristic is enabled.
      virtual void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // *
      // RestartWNewConstraints is used to restart the autopilot agent
      // with new pilot constraints.
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>* AsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::ModifyStatusResponse>* PrepareAsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>* AsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::QueryScoresResponse>* PrepareAsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>* AsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::SetScoresResponse>* PrepareAsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>* AsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::autopilotrpc::RestartConstraintsResponse>* PrepareAsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::autopilotrpc::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::autopilotrpc::ModifyStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>> AsyncModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>>(AsyncModifyStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>> PrepareAsyncModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>>(PrepareAsyncModifyStatusRaw(context, request, cq));
    }
    ::grpc::Status QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::autopilotrpc::QueryScoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>> AsyncQueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>>(AsyncQueryScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>> PrepareAsyncQueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>>(PrepareAsyncQueryScoresRaw(context, request, cq));
    }
    ::grpc::Status SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::autopilotrpc::SetScoresResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>> AsyncSetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>>(AsyncSetScoresRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>> PrepareAsyncSetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>>(PrepareAsyncSetScoresRaw(context, request, cq));
    }
    ::grpc::Status RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::autopilotrpc::RestartConstraintsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>> AsyncRestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>>(AsyncRestartWNewConstraintsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>> PrepareAsyncRestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>>(PrepareAsyncRestartWNewConstraintsRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Status(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::StatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ModifyStatus(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void ModifyStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::ModifyStatusResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryScores(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void QueryScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::QueryScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetScores(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetScores(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::SetScoresResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)>) override;
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RestartWNewConstraints(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::autopilotrpc::RestartConstraintsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>* AsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::ModifyStatusResponse>* PrepareAsyncModifyStatusRaw(::grpc::ClientContext* context, const ::autopilotrpc::ModifyStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>* AsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::QueryScoresResponse>* PrepareAsyncQueryScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::QueryScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>* AsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::SetScoresResponse>* PrepareAsyncSetScoresRaw(::grpc::ClientContext* context, const ::autopilotrpc::SetScoresRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>* AsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::autopilotrpc::RestartConstraintsResponse>* PrepareAsyncRestartWNewConstraintsRaw(::grpc::ClientContext* context, const ::autopilotrpc::RestartConstraintsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_ModifyStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_QueryScores_;
    const ::grpc::internal::RpcMethod rpcmethod_SetScores_;
    const ::grpc::internal::RpcMethod rpcmethod_RestartWNewConstraints_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Status returns whether the daemon's autopilot agent is active.
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response);
    // *
    // ModifyStatus is used to modify the status of the autopilot agent, like
    // enabling or disabling it.
    virtual ::grpc::Status ModifyStatus(::grpc::ServerContext* context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response);
    // *
    // QueryScores queries all available autopilot heuristics, in addition to any
    // active combination of these heruristics, for the scores they would give to
    // the given nodes.
    virtual ::grpc::Status QueryScores(::grpc::ServerContext* context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response);
    // *
    // SetScores attempts to set the scores used by the running autopilot agent,
    // if the external scoring heuristic is enabled.
    virtual ::grpc::Status SetScores(::grpc::ServerContext* context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response);
    // *
    // RestartWNewConstraints is used to restart the autopilot agent
    // with new pilot constraints.
    virtual ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::autopilotrpc::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::autopilotrpc::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ModifyStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyStatus(::grpc::ServerContext* context, ::autopilotrpc::ModifyStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::autopilotrpc::ModifyStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QueryScores() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryScores(::grpc::ServerContext* context, ::autopilotrpc::QueryScoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::autopilotrpc::QueryScoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetScores() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetScores(::grpc::ServerContext* context, ::autopilotrpc::SetScoresRequest* request, ::grpc::ServerAsyncResponseWriter< ::autopilotrpc::SetScoresResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RestartWNewConstraints() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartWNewConstraints(::grpc::ServerContext* context, ::autopilotrpc::RestartConstraintsRequest* request, ::grpc::ServerAsyncResponseWriter< ::autopilotrpc::RestartConstraintsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Status<WithAsyncMethod_ModifyStatus<WithAsyncMethod_QueryScores<WithAsyncMethod_SetScores<WithAsyncMethod_RestartWNewConstraints<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::StatusRequest, ::autopilotrpc::StatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::autopilotrpc::StatusRequest* request, ::autopilotrpc::StatusResponse* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::experimental::MessageAllocator< ::autopilotrpc::StatusRequest, ::autopilotrpc::StatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::StatusRequest, ::autopilotrpc::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_ModifyStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::ModifyStatusRequest, ::autopilotrpc::ModifyStatusResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::autopilotrpc::ModifyStatusRequest* request, ::autopilotrpc::ModifyStatusResponse* response) { return this->ModifyStatus(context, request, response); }));}
    void SetMessageAllocatorFor_ModifyStatus(
        ::grpc::experimental::MessageAllocator< ::autopilotrpc::ModifyStatusRequest, ::autopilotrpc::ModifyStatusResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::ModifyStatusRequest, ::autopilotrpc::ModifyStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_QueryScores() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::QueryScoresRequest, ::autopilotrpc::QueryScoresResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::autopilotrpc::QueryScoresRequest* request, ::autopilotrpc::QueryScoresResponse* response) { return this->QueryScores(context, request, response); }));}
    void SetMessageAllocatorFor_QueryScores(
        ::grpc::experimental::MessageAllocator< ::autopilotrpc::QueryScoresRequest, ::autopilotrpc::QueryScoresResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::QueryScoresRequest, ::autopilotrpc::QueryScoresResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryScores(
      ::grpc::CallbackServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryScores(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetScores() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::SetScoresRequest, ::autopilotrpc::SetScoresResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::autopilotrpc::SetScoresRequest* request, ::autopilotrpc::SetScoresResponse* response) { return this->SetScores(context, request, response); }));}
    void SetMessageAllocatorFor_SetScores(
        ::grpc::experimental::MessageAllocator< ::autopilotrpc::SetScoresRequest, ::autopilotrpc::SetScoresResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::SetScoresRequest, ::autopilotrpc::SetScoresResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetScores(
      ::grpc::CallbackServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetScores(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RestartWNewConstraints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::RestartConstraintsRequest, ::autopilotrpc::RestartConstraintsResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::autopilotrpc::RestartConstraintsRequest* request, ::autopilotrpc::RestartConstraintsResponse* response) { return this->RestartWNewConstraints(context, request, response); }));}
    void SetMessageAllocatorFor_RestartWNewConstraints(
        ::grpc::experimental::MessageAllocator< ::autopilotrpc::RestartConstraintsRequest, ::autopilotrpc::RestartConstraintsResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::autopilotrpc::RestartConstraintsRequest, ::autopilotrpc::RestartConstraintsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartWNewConstraints(
      ::grpc::CallbackServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartWNewConstraints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_ModifyStatus<ExperimentalWithCallbackMethod_QueryScores<ExperimentalWithCallbackMethod_SetScores<ExperimentalWithCallbackMethod_RestartWNewConstraints<Service > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Status<ExperimentalWithCallbackMethod_ModifyStatus<ExperimentalWithCallbackMethod_QueryScores<ExperimentalWithCallbackMethod_SetScores<ExperimentalWithCallbackMethod_RestartWNewConstraints<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ModifyStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QueryScores() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetScores() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RestartWNewConstraints() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ModifyStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestModifyStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QueryScores() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQueryScores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetScores() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetScores(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RestartWNewConstraints() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRestartWNewConstraints(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Status() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Status(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_ModifyStatus() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ModifyStatus(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* ModifyStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* ModifyStatus(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_QueryScores() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QueryScores(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* QueryScores(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* QueryScores(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetScores() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetScores(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetScores(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetScores(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RestartWNewConstraints() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RestartWNewConstraints(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RestartWNewConstraints(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RestartWNewConstraints(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::autopilotrpc::StatusRequest, ::autopilotrpc::StatusResponse>(std::bind(&WithStreamedUnaryMethod_Status<BaseClass>::StreamedStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::autopilotrpc::StatusRequest* /*request*/, ::autopilotrpc::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::autopilotrpc::StatusRequest,::autopilotrpc::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ModifyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ModifyStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::autopilotrpc::ModifyStatusRequest, ::autopilotrpc::ModifyStatusResponse>(std::bind(&WithStreamedUnaryMethod_ModifyStatus<BaseClass>::StreamedModifyStatus, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ModifyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ModifyStatus(::grpc::ServerContext* /*context*/, const ::autopilotrpc::ModifyStatusRequest* /*request*/, ::autopilotrpc::ModifyStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedModifyStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::autopilotrpc::ModifyStatusRequest,::autopilotrpc::ModifyStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QueryScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QueryScores() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::autopilotrpc::QueryScoresRequest, ::autopilotrpc::QueryScoresResponse>(std::bind(&WithStreamedUnaryMethod_QueryScores<BaseClass>::StreamedQueryScores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_QueryScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QueryScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::QueryScoresRequest* /*request*/, ::autopilotrpc::QueryScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQueryScores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::autopilotrpc::QueryScoresRequest,::autopilotrpc::QueryScoresResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetScores : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetScores() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::autopilotrpc::SetScoresRequest, ::autopilotrpc::SetScoresResponse>(std::bind(&WithStreamedUnaryMethod_SetScores<BaseClass>::StreamedSetScores, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SetScores() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetScores(::grpc::ServerContext* /*context*/, const ::autopilotrpc::SetScoresRequest* /*request*/, ::autopilotrpc::SetScoresResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetScores(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::autopilotrpc::SetScoresRequest,::autopilotrpc::SetScoresResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RestartWNewConstraints : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RestartWNewConstraints() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::autopilotrpc::RestartConstraintsRequest, ::autopilotrpc::RestartConstraintsResponse>(std::bind(&WithStreamedUnaryMethod_RestartWNewConstraints<BaseClass>::StreamedRestartWNewConstraints, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RestartWNewConstraints() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RestartWNewConstraints(::grpc::ServerContext* /*context*/, const ::autopilotrpc::RestartConstraintsRequest* /*request*/, ::autopilotrpc::RestartConstraintsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRestartWNewConstraints(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::autopilotrpc::RestartConstraintsRequest,::autopilotrpc::RestartConstraintsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_ModifyStatus<WithStreamedUnaryMethod_QueryScores<WithStreamedUnaryMethod_SetScores<WithStreamedUnaryMethod_RestartWNewConstraints<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_ModifyStatus<WithStreamedUnaryMethod_QueryScores<WithStreamedUnaryMethod_SetScores<WithStreamedUnaryMethod_RestartWNewConstraints<Service > > > > > StreamedService;
};

}  // namespace autopilotrpc


#endif  // GRPC_autopilot_2eproto__INCLUDED
