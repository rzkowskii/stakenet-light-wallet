// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stakenet/orderbook/api.proto

#include "api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fapi_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto;
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
class CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Command> _instance;
  const ::io::stakenet::orderbook::protos::PingCommand* ping_;
  const ::io::stakenet::orderbook::protos::GetTradingPairsCommand* gettradingpairs_;
  const ::io::stakenet::orderbook::protos::SubscribeCommand* subscribe_;
  const ::io::stakenet::orderbook::protos::UnsubscribeCommand* unsubscribe_;
  const ::io::stakenet::orderbook::protos::GetOpenOrdersCommand* getopenorders_;
  const ::io::stakenet::orderbook::protos::GetHistoricTradesCommand* gethistorictrades_;
  const ::io::stakenet::orderbook::protos::GetBarsPricesCommand* getbarsprices_;
  const ::io::stakenet::orderbook::protos::PlaceOrderCommand* placeorder_;
  const ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand* gettradingorderbyid_;
  const ::io::stakenet::orderbook::protos::CancelOpenOrderCommand* cancelorder_;
  const ::io::stakenet::orderbook::protos::SendOrderMessageCommand* sendordermessage_;
  const ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand* cancelmatchedorder_;
  const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand* cleantradingpairorders_;
  const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand* getlndpaymentinvoicecommand_;
  const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand* generateinvoicetorentchannelcommand_;
  const ::io::stakenet::orderbook::protos::RentChannelCommand* rentchannelcommand_;
  const ::io::stakenet::orderbook::protos::GetChannelStatusCommand* getchannelstatuscommand_;
  const ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand* getfeetorentchannelcommand_;
  const ::io::stakenet::orderbook::protos::RefundFeeCommand* refundfeecommand_;
  const ::io::stakenet::orderbook::protos::GetRefundableAmountCommand* getrefundableamountcommand_;
  const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand* getfeetoextendrentedchannelcommand_;
  const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand* generateinvoicetoextendrentedchannelcommand_;
  const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand* extendrentedchanneltimecommand_;
  const ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand* registerpublickeycommand_;
  const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand* registerpublicidentifiercommand_;
  const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand* getconnextpaymentinformationcommand_;
  const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand* generatepaymenthashtorentchannelcommand_;
  const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand* generatepaymenthashtoextendconnextrentedchannelcommand_;
  const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand* getconnextchannelcontractdeploymentfeecommand_;
  const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand* registerconnextchannelcontractdeploymentfeecommand_;
} _Command_default_instance_;
class Event_CommandResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_CommandResponse> _instance;
  const ::io::stakenet::orderbook::protos::CommandFailed* commandfailed_;
  const ::io::stakenet::orderbook::protos::PingResponse* pingresponse_;
  const ::io::stakenet::orderbook::protos::GetTradingPairsResponse* gettradingpairsresponse_;
  const ::io::stakenet::orderbook::protos::SubscribeResponse* subscriberesponse_;
  const ::io::stakenet::orderbook::protos::UnsubscribeResponse* unsubscriberesponse_;
  const ::io::stakenet::orderbook::protos::GetOpenOrdersResponse* getopenordersresponse_;
  const ::io::stakenet::orderbook::protos::GetHistoricTradesResponse* gethistorictradesresponse_;
  const ::io::stakenet::orderbook::protos::GetBarsPricesResponse* getbarspricesresponse_;
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse* placeorderresponse_;
  const ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse* getopenorderbyidresponse_;
  const ::io::stakenet::orderbook::protos::CancelOpenOrderResponse* cancelorderresponse_;
  const ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse* cancelmatchedorderresponse_;
  const ::io::stakenet::orderbook::protos::SendOrderMessageResponse* sendordermessageresponse_;
  const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse* cleantradingpairordersresponse_;
  const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse* getlndpaymentinvoiceresponse_;
  const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse* generateinvoicetorentchannelresponse_;
  const ::io::stakenet::orderbook::protos::RentChannelResponse* rentchannelresponse_;
  const ::io::stakenet::orderbook::protos::GetChannelStatusResponse* getchannelstatusresponse_;
  const ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse* getfeetorentchannelresponse_;
  const ::io::stakenet::orderbook::protos::RefundFeeResponse* refundfeeresponse_;
  const ::io::stakenet::orderbook::protos::GetRefundableAmountResponse* getrefundableamountresponse_;
  const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse* getfeetoextendrentedchannelresponse_;
  const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse* generateinvoicetoextendrentedchannelresponse_;
  const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse* extendrentedchanneltimeresponse_;
  const ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse* registerpublickeyresponse_;
  const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse* registerpublicidentifierresponse_;
  const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse* getconnextpaymentinformationresponse_;
  const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse* generatepaymenthashtorentchannelresponse_;
  const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse* generatepaymenthashtoextendconnextrentedchannelresponse_;
  const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse* getconnextchannelcontractdeploymentfeeresponse_;
  const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse* registerconnextchannelcontractdeploymentfeeresponse_;
} _Event_CommandResponse_default_instance_;
class Event_ServerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event_ServerEvent> _instance;
  const ::io::stakenet::orderbook::protos::MyOrderMatched* myordermatched_;
  const ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled* mymatchedordercanceled_;
  const ::io::stakenet::orderbook::protos::OrderPlaced* orderplaced_;
  const ::io::stakenet::orderbook::protos::OrderCanceled* ordercanceled_;
  const ::io::stakenet::orderbook::protos::OrdersMatched* ordersmatched_;
  const ::io::stakenet::orderbook::protos::NewOrderMessage* newordermessage_;
  const ::io::stakenet::orderbook::protos::SwapSuccess* swapsuccess_;
  const ::io::stakenet::orderbook::protos::SwapFailure* swapfailure_;
  const ::io::stakenet::orderbook::protos::MaintenanceInProgress* maintenanceinprogress_;
  const ::io::stakenet::orderbook::protos::MaintenanceCompleted* maintenancecompleted_;
} _Event_ServerEvent_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  const ::io::stakenet::orderbook::protos::Event_CommandResponse* response_;
  const ::io::stakenet::orderbook::protos::Event_ServerEvent* event_;
} _Event_default_instance_;
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
static void InitDefaultsscc_info_Command_stakenet_2forderbook_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Command_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<30> scc_info_Command_stakenet_2forderbook_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 30, 0, InitDefaultsscc_info_Command_stakenet_2forderbook_2fapi_2eproto}, {
      &scc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Event_stakenet_2forderbook_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Event_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Event_stakenet_2forderbook_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Event_stakenet_2forderbook_2fapi_2eproto}, {
      &scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto.base,
      &scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto.base,}};

static void InitDefaultsscc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Event_CommandResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Event_CommandResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, 0, InitDefaultsscc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto}, {
      &scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Event_ServerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Event_ServerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<10> scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 10, 0, InitDefaultsscc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto}, {
      &scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stakenet_2forderbook_2fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_stakenet_2forderbook_2fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stakenet_2forderbook_2fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stakenet_2forderbook_2fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Command, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Command, clientmessageid_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, ping_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, gettradingpairs_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, subscribe_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, unsubscribe_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getopenorders_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, gethistorictrades_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getbarsprices_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, placeorder_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, gettradingorderbyid_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, cancelorder_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, sendordermessage_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, cancelmatchedorder_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, cleantradingpairorders_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getlndpaymentinvoicecommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, generateinvoicetorentchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, rentchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getchannelstatuscommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getfeetorentchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, refundfeecommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getrefundableamountcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getfeetoextendrentedchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, generateinvoicetoextendrentedchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, extendrentedchanneltimecommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, registerpublickeycommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, registerpublicidentifiercommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getconnextpaymentinformationcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, generatepaymenthashtorentchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, generatepaymenthashtoextendconnextrentedchannelcommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, getconnextchannelcontractdeploymentfeecommand_),
  offsetof(::io::stakenet::orderbook::protos::CommandDefaultTypeInternal, registerconnextchannelcontractdeploymentfeecommand_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Command, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_CommandResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_CommandResponse, clientmessageid_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, commandfailed_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, pingresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, gettradingpairsresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, subscriberesponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, unsubscriberesponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getopenordersresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, gethistorictradesresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getbarspricesresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, placeorderresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getopenorderbyidresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, cancelorderresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, cancelmatchedorderresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, sendordermessageresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, cleantradingpairordersresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getlndpaymentinvoiceresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, generateinvoicetorentchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, rentchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getchannelstatusresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getfeetorentchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, refundfeeresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getrefundableamountresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getfeetoextendrentedchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, generateinvoicetoextendrentedchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, extendrentedchanneltimeresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, registerpublickeyresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, registerpublicidentifierresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getconnextpaymentinformationresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, generatepaymenthashtorentchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, generatepaymenthashtoextendconnextrentedchannelresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, getconnextchannelcontractdeploymentfeeresponse_),
  offsetof(::io::stakenet::orderbook::protos::Event_CommandResponseDefaultTypeInternal, registerconnextchannelcontractdeploymentfeeresponse_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_CommandResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_ServerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_ServerEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, myordermatched_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, mymatchedordercanceled_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, orderplaced_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, ordercanceled_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, ordersmatched_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, newordermessage_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, swapsuccess_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, swapfailure_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, maintenanceinprogress_),
  offsetof(::io::stakenet::orderbook::protos::Event_ServerEventDefaultTypeInternal, maintenancecompleted_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event_ServerEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event, messagecounter_),
  offsetof(::io::stakenet::orderbook::protos::EventDefaultTypeInternal, response_),
  offsetof(::io::stakenet::orderbook::protos::EventDefaultTypeInternal, event_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Event, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::stakenet::orderbook::protos::Command)},
  { 37, -1, sizeof(::io::stakenet::orderbook::protos::Event_CommandResponse)},
  { 75, -1, sizeof(::io::stakenet::orderbook::protos::Event_ServerEvent)},
  { 91, -1, sizeof(::io::stakenet::orderbook::protos::Event)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Event_default_instance_),
};

const char descriptor_table_protodef_stakenet_2forderbook_2fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034stakenet/orderbook/api.proto\022\034io.stake"
  "net.orderbook.protos\032!stakenet/orderbook"
  "/commands.proto\032\037stakenet/orderbook/even"
  "ts.proto\"\357\026\n\007Command\022\027\n\017clientMessageId\030"
  "\001 \001(\t\0229\n\004ping\030\002 \001(\0132).io.stakenet.orderb"
  "ook.protos.PingCommandH\000\022O\n\017getTradingPa"
  "irs\030\003 \001(\01324.io.stakenet.orderbook.protos"
  ".GetTradingPairsCommandH\000\022C\n\tsubscribe\030\004"
  " \001(\0132..io.stakenet.orderbook.protos.Subs"
  "cribeCommandH\000\022G\n\013unsubscribe\030\005 \001(\01320.io"
  ".stakenet.orderbook.protos.UnsubscribeCo"
  "mmandH\000\022K\n\rgetOpenOrders\030\006 \001(\01322.io.stak"
  "enet.orderbook.protos.GetOpenOrdersComma"
  "ndH\000\022S\n\021getHistoricTrades\030\007 \001(\01326.io.sta"
  "kenet.orderbook.protos.GetHistoricTrades"
  "CommandH\000\022K\n\rgetBarsPrices\030\010 \001(\01322.io.st"
  "akenet.orderbook.protos.GetBarsPricesCom"
  "mandH\000\022E\n\nplaceOrder\030\t \001(\0132/.io.stakenet"
  ".orderbook.protos.PlaceOrderCommandH\000\022T\n"
  "\023getTradingOrderById\030\n \001(\01325.io.stakenet"
  ".orderbook.protos.GetOpenOrderByIdComman"
  "dH\000\022K\n\013cancelOrder\030\013 \001(\01324.io.stakenet.o"
  "rderbook.protos.CancelOpenOrderCommandH\000"
  "\022Q\n\020sendOrderMessage\030\014 \001(\01325.io.stakenet"
  ".orderbook.protos.SendOrderMessageComman"
  "dH\000\022U\n\022cancelMatchedOrder\030\r \001(\01327.io.sta"
  "kenet.orderbook.protos.CancelMatchedOrde"
  "rCommandH\000\022]\n\026cleanTradingPairOrders\030\016 \001"
  "(\0132;.io.stakenet.orderbook.protos.CleanT"
  "radingPairOrdersCommandH\000\022`\n\033getLndPayme"
  "ntInvoiceCommand\030\017 \001(\01329.io.stakenet.ord"
  "erbook.protos.GetLndPaymentInvoiceComman"
  "dH\000\022p\n#generateInvoiceToRentChannelComma"
  "nd\030\020 \001(\0132A.io.stakenet.orderbook.protos."
  "GenerateInvoiceToRentChannelCommandH\000\022N\n"
  "\022rentChannelCommand\030\021 \001(\01320.io.stakenet."
  "orderbook.protos.RentChannelCommandH\000\022X\n"
  "\027getChannelStatusCommand\030\022 \001(\01325.io.stak"
  "enet.orderbook.protos.GetChannelStatusCo"
  "mmandH\000\022^\n\032getFeeToRentChannelCommand\030\023 "
  "\001(\01328.io.stakenet.orderbook.protos.GetFe"
  "eToRentChannelCommandH\000\022J\n\020refundFeeComm"
  "and\030\024 \001(\0132..io.stakenet.orderbook.protos"
  ".RefundFeeCommandH\000\022^\n\032getRefundableAmou"
  "ntCommand\030\025 \001(\01328.io.stakenet.orderbook."
  "protos.GetRefundableAmountCommandH\000\022n\n\"g"
  "etFeeToExtendRentedChannelCommand\030\026 \001(\0132"
  "@.io.stakenet.orderbook.protos.GetFeeToE"
  "xtendRentedChannelCommandH\000\022\200\001\n+generate"
  "InvoiceToExtendRentedChannelCommand\030\027 \001("
  "\0132I.io.stakenet.orderbook.protos.Generat"
  "eInvoiceToExtendRentedChannelCommandH\000\022f"
  "\n\036extendRentedChannelTimeCommand\030\030 \001(\0132<"
  ".io.stakenet.orderbook.protos.ExtendRent"
  "edChannelTimeCommandH\000\022Z\n\030registerPublic"
  "KeyCommand\030\031 \001(\01326.io.stakenet.orderbook"
  ".protos.RegisterPublicKeyCommandH\000\022h\n\037re"
  "gisterPublicIdentifierCommand\030\032 \001(\0132=.io"
  ".stakenet.orderbook.protos.RegisterPubli"
  "cIdentifierCommandH\000\022p\n#getConnextPaymen"
  "tInformationCommand\030\033 \001(\0132A.io.stakenet."
  "orderbook.protos.GetConnextPaymentInform"
  "ationCommandH\000\022x\n\'generatePaymentHashToR"
  "entChannelCommand\030\034 \001(\0132E.io.stakenet.or"
  "derbook.protos.GeneratePaymentHashToRent"
  "ChannelCommandH\000\022\226\001\n6generatePaymentHash"
  "ToExtendConnextRentedChannelCommand\030\035 \001("
  "\0132T.io.stakenet.orderbook.protos.Generat"
  "ePaymentHashToExtendConnextRentedChannel"
  "CommandH\000\022\204\001\n-getConnextChannelContractD"
  "eploymentFeeCommand\030\036 \001(\0132K.io.stakenet."
  "orderbook.protos.GetConnextChannelContra"
  "ctDeploymentFeeCommandH\000\022\216\001\n2registerCon"
  "nextChannelContractDeploymentFeeCommand\030"
  "\037 \001(\0132P.io.stakenet.orderbook.protos.Reg"
  "isterConnextChannelContractDeploymentFee"
  "CommandH\000B\007\n\005value\"\206 \n\005Event\022\026\n\016messageC"
  "ounter\030\001 \001(\003\022G\n\010response\030\002 \001(\01323.io.stak"
  "enet.orderbook.protos.Event.CommandRespo"
  "nseH\000\022@\n\005event\030\003 \001(\0132/.io.stakenet.order"
  "book.protos.Event.ServerEventH\000\032\321\030\n\017Comm"
  "andResponse\022\027\n\017clientMessageId\030\001 \001(\t\022D\n\r"
  "commandFailed\030\002 \001(\0132+.io.stakenet.orderb"
  "ook.protos.CommandFailedH\000\022B\n\014pingRespon"
  "se\030\003 \001(\0132*.io.stakenet.orderbook.protos."
  "PingResponseH\000\022X\n\027getTradingPairsRespons"
  "e\030\004 \001(\01325.io.stakenet.orderbook.protos.G"
  "etTradingPairsResponseH\000\022L\n\021subscribeRes"
  "ponse\030\005 \001(\0132/.io.stakenet.orderbook.prot"
  "os.SubscribeResponseH\000\022P\n\023unsubscribeRes"
  "ponse\030\006 \001(\01321.io.stakenet.orderbook.prot"
  "os.UnsubscribeResponseH\000\022T\n\025getOpenOrder"
  "sResponse\030\007 \001(\01323.io.stakenet.orderbook."
  "protos.GetOpenOrdersResponseH\000\022\\\n\031getHis"
  "toricTradesResponse\030\010 \001(\01327.io.stakenet."
  "orderbook.protos.GetHistoricTradesRespon"
  "seH\000\022T\n\025getBarsPricesResponse\030\t \001(\01323.io"
  ".stakenet.orderbook.protos.GetBarsPrices"
  "ResponseH\000\022N\n\022placeOrderResponse\030\n \001(\01320"
  ".io.stakenet.orderbook.protos.PlaceOrder"
  "ResponseH\000\022Z\n\030getOpenOrderByIdResponse\030\013"
  " \001(\01326.io.stakenet.orderbook.protos.GetO"
  "penOrderByIdResponseH\000\022T\n\023cancelOrderRes"
  "ponse\030\014 \001(\01325.io.stakenet.orderbook.prot"
  "os.CancelOpenOrderResponseH\000\022^\n\032cancelMa"
  "tchedOrderResponse\030\r \001(\01328.io.stakenet.o"
  "rderbook.protos.CancelMatchedOrderRespon"
  "seH\000\022Z\n\030sendOrderMessageResponse\030\016 \001(\01326"
  ".io.stakenet.orderbook.protos.SendOrderM"
  "essageResponseH\000\022f\n\036cleanTradingPairOrde"
  "rsResponse\030\017 \001(\0132<.io.stakenet.orderbook"
  ".protos.CleanTradingPairOrdersResponseH\000"
  "\022b\n\034getLndPaymentInvoiceResponse\030\020 \001(\0132:"
  ".io.stakenet.orderbook.protos.GetLndPaym"
  "entInvoiceResponseH\000\022r\n$generateInvoiceT"
  "oRentChannelResponse\030\021 \001(\0132B.io.stakenet"
  ".orderbook.protos.GenerateInvoiceToRentC"
  "hannelResponseH\000\022P\n\023rentChannelResponse\030"
  "\022 \001(\01321.io.stakenet.orderbook.protos.Ren"
  "tChannelResponseH\000\022Z\n\030getChannelStatusRe"
  "sponse\030\023 \001(\01326.io.stakenet.orderbook.pro"
  "tos.GetChannelStatusResponseH\000\022`\n\033getFee"
  "ToRentChannelResponse\030\024 \001(\01329.io.stakene"
  "t.orderbook.protos.GetFeeToRentChannelRe"
  "sponseH\000\022L\n\021refundFeeResponse\030\025 \001(\0132/.io"
  ".stakenet.orderbook.protos.RefundFeeResp"
  "onseH\000\022`\n\033getRefundableAmountResponse\030\026 "
  "\001(\01329.io.stakenet.orderbook.protos.GetRe"
  "fundableAmountResponseH\000\022p\n#getFeeToExte"
  "ndRentedChannelResponse\030\027 \001(\0132A.io.stake"
  "net.orderbook.protos.GetFeeToExtendRente"
  "dChannelResponseH\000\022\202\001\n,generateInvoiceTo"
  "ExtendRentedChannelResponse\030\030 \001(\0132J.io.s"
  "takenet.orderbook.protos.GenerateInvoice"
  "ToExtendRentedChannelResponseH\000\022h\n\037exten"
  "dRentedChannelTimeResponse\030\031 \001(\0132=.io.st"
  "akenet.orderbook.protos.ExtendRentedChan"
  "nelTimeResponseH\000\022\\\n\031registerPublicKeyRe"
  "sponse\030\032 \001(\01327.io.stakenet.orderbook.pro"
  "tos.RegisterPublicKeyResponseH\000\022j\n regis"
  "terPublicIdentifierResponse\030\033 \001(\0132>.io.s"
  "takenet.orderbook.protos.RegisterPublicI"
  "dentifierResponseH\000\022r\n$getConnextPayment"
  "InformationResponse\030\034 \001(\0132B.io.stakenet."
  "orderbook.protos.GetConnextPaymentInform"
  "ationResponseH\000\022z\n(generatePaymentHashTo"
  "RentChannelResponse\030\035 \001(\0132F.io.stakenet."
  "orderbook.protos.GeneratePaymentHashToRe"
  "ntChannelResponseH\000\022\230\001\n7generatePaymentH"
  "ashToExtendConnextRentedChannelResponse\030"
  "\036 \001(\0132U.io.stakenet.orderbook.protos.Gen"
  "eratePaymentHashToExtendConnextRentedCha"
  "nnelResponseH\000\022\206\001\n.getConnextChannelCont"
  "ractDeploymentFeeResponse\030\037 \001(\0132L.io.sta"
  "kenet.orderbook.protos.GetConnextChannel"
  "ContractDeploymentFeeResponseH\000\022\220\001\n3regi"
  "sterConnextChannelContractDeploymentFeeR"
  "esponse\030  \001(\0132Q.io.stakenet.orderbook.pr"
  "otos.RegisterConnextChannelContractDeplo"
  "ymentFeeResponseH\000B\007\n\005value\032\374\005\n\013ServerEv"
  "ent\022F\n\016myOrderMatched\030\001 \001(\0132,.io.stakene"
  "t.orderbook.protos.MyOrderMatchedH\000\022V\n\026m"
  "yMatchedOrderCanceled\030\002 \001(\01324.io.stakene"
  "t.orderbook.protos.MyMatchedOrderCancele"
  "dH\000\022@\n\013orderPlaced\030\003 \001(\0132).io.stakenet.o"
  "rderbook.protos.OrderPlacedH\000\022D\n\rorderCa"
  "nceled\030\004 \001(\0132+.io.stakenet.orderbook.pro"
  "tos.OrderCanceledH\000\022D\n\rordersMatched\030\005 \001"
  "(\0132+.io.stakenet.orderbook.protos.Orders"
  "MatchedH\000\022H\n\017newOrderMessage\030\006 \001(\0132-.io."
  "stakenet.orderbook.protos.NewOrderMessag"
  "eH\000\022@\n\013swapSuccess\030\007 \001(\0132).io.stakenet.o"
  "rderbook.protos.SwapSuccessH\000\022@\n\013swapFai"
  "lure\030\010 \001(\0132).io.stakenet.orderbook.proto"
  "s.SwapFailureH\000\022T\n\025maintenanceInProgress"
  "\030\t \001(\01323.io.stakenet.orderbook.protos.Ma"
  "intenanceInProgressH\000\022R\n\024maintenanceComp"
  "leted\030\n \001(\01322.io.stakenet.orderbook.prot"
  "os.MaintenanceCompletedH\000B\007\n\005valueB\007\n\005va"
  "lueb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stakenet_2forderbook_2fapi_2eproto_deps[2] = {
  &::descriptor_table_stakenet_2forderbook_2fcommands_2eproto,
  &::descriptor_table_stakenet_2forderbook_2fevents_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stakenet_2forderbook_2fapi_2eproto_sccs[4] = {
  &scc_info_Command_stakenet_2forderbook_2fapi_2eproto.base,
  &scc_info_Event_stakenet_2forderbook_2fapi_2eproto.base,
  &scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto.base,
  &scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stakenet_2forderbook_2fapi_2eproto_once;
static bool descriptor_table_stakenet_2forderbook_2fapi_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stakenet_2forderbook_2fapi_2eproto = {
  &descriptor_table_stakenet_2forderbook_2fapi_2eproto_initialized, descriptor_table_protodef_stakenet_2forderbook_2fapi_2eproto, "stakenet/orderbook/api.proto", 7171,
  &descriptor_table_stakenet_2forderbook_2fapi_2eproto_once, descriptor_table_stakenet_2forderbook_2fapi_2eproto_sccs, descriptor_table_stakenet_2forderbook_2fapi_2eproto_deps, 4, 2,
  schemas, file_default_instances, TableStruct_stakenet_2forderbook_2fapi_2eproto::offsets,
  file_level_metadata_stakenet_2forderbook_2fapi_2eproto, 4, file_level_enum_descriptors_stakenet_2forderbook_2fapi_2eproto, file_level_service_descriptors_stakenet_2forderbook_2fapi_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stakenet_2forderbook_2fapi_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stakenet_2forderbook_2fapi_2eproto), true);
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {

// ===================================================================

void Command::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Command_default_instance_.ping_ = const_cast< ::io::stakenet::orderbook::protos::PingCommand*>(
      ::io::stakenet::orderbook::protos::PingCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.gettradingpairs_ = const_cast< ::io::stakenet::orderbook::protos::GetTradingPairsCommand*>(
      ::io::stakenet::orderbook::protos::GetTradingPairsCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.subscribe_ = const_cast< ::io::stakenet::orderbook::protos::SubscribeCommand*>(
      ::io::stakenet::orderbook::protos::SubscribeCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.unsubscribe_ = const_cast< ::io::stakenet::orderbook::protos::UnsubscribeCommand*>(
      ::io::stakenet::orderbook::protos::UnsubscribeCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getopenorders_ = const_cast< ::io::stakenet::orderbook::protos::GetOpenOrdersCommand*>(
      ::io::stakenet::orderbook::protos::GetOpenOrdersCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.gethistorictrades_ = const_cast< ::io::stakenet::orderbook::protos::GetHistoricTradesCommand*>(
      ::io::stakenet::orderbook::protos::GetHistoricTradesCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getbarsprices_ = const_cast< ::io::stakenet::orderbook::protos::GetBarsPricesCommand*>(
      ::io::stakenet::orderbook::protos::GetBarsPricesCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.placeorder_ = const_cast< ::io::stakenet::orderbook::protos::PlaceOrderCommand*>(
      ::io::stakenet::orderbook::protos::PlaceOrderCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.gettradingorderbyid_ = const_cast< ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand*>(
      ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.cancelorder_ = const_cast< ::io::stakenet::orderbook::protos::CancelOpenOrderCommand*>(
      ::io::stakenet::orderbook::protos::CancelOpenOrderCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.sendordermessage_ = const_cast< ::io::stakenet::orderbook::protos::SendOrderMessageCommand*>(
      ::io::stakenet::orderbook::protos::SendOrderMessageCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.cancelmatchedorder_ = const_cast< ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand*>(
      ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.cleantradingpairorders_ = const_cast< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand*>(
      ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getlndpaymentinvoicecommand_ = const_cast< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand*>(
      ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.generateinvoicetorentchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand*>(
      ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.rentchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::RentChannelCommand*>(
      ::io::stakenet::orderbook::protos::RentChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getchannelstatuscommand_ = const_cast< ::io::stakenet::orderbook::protos::GetChannelStatusCommand*>(
      ::io::stakenet::orderbook::protos::GetChannelStatusCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getfeetorentchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand*>(
      ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.refundfeecommand_ = const_cast< ::io::stakenet::orderbook::protos::RefundFeeCommand*>(
      ::io::stakenet::orderbook::protos::RefundFeeCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getrefundableamountcommand_ = const_cast< ::io::stakenet::orderbook::protos::GetRefundableAmountCommand*>(
      ::io::stakenet::orderbook::protos::GetRefundableAmountCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getfeetoextendrentedchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand*>(
      ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.generateinvoicetoextendrentedchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand*>(
      ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.extendrentedchanneltimecommand_ = const_cast< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand*>(
      ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.registerpublickeycommand_ = const_cast< ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand*>(
      ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.registerpublicidentifiercommand_ = const_cast< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand*>(
      ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getconnextpaymentinformationcommand_ = const_cast< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand*>(
      ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.generatepaymenthashtorentchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand*>(
      ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.generatepaymenthashtoextendconnextrentedchannelcommand_ = const_cast< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand*>(
      ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.getconnextchannelcontractdeploymentfeecommand_ = const_cast< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand*>(
      ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Command_default_instance_.registerconnextchannelcontractdeploymentfeecommand_ = const_cast< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand*>(
      ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand::internal_default_instance());
}
class Command::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::PingCommand& ping(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetTradingPairsCommand& gettradingpairs(const Command* msg);
  static const ::io::stakenet::orderbook::protos::SubscribeCommand& subscribe(const Command* msg);
  static const ::io::stakenet::orderbook::protos::UnsubscribeCommand& unsubscribe(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetOpenOrdersCommand& getopenorders(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetHistoricTradesCommand& gethistorictrades(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetBarsPricesCommand& getbarsprices(const Command* msg);
  static const ::io::stakenet::orderbook::protos::PlaceOrderCommand& placeorder(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand& gettradingorderbyid(const Command* msg);
  static const ::io::stakenet::orderbook::protos::CancelOpenOrderCommand& cancelorder(const Command* msg);
  static const ::io::stakenet::orderbook::protos::SendOrderMessageCommand& sendordermessage(const Command* msg);
  static const ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand& cancelmatchedorder(const Command* msg);
  static const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand& cleantradingpairorders(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand& getlndpaymentinvoicecommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand& generateinvoicetorentchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::RentChannelCommand& rentchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetChannelStatusCommand& getchannelstatuscommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand& getfeetorentchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::RefundFeeCommand& refundfeecommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetRefundableAmountCommand& getrefundableamountcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand& getfeetoextendrentedchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand& generateinvoicetoextendrentedchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand& extendrentedchanneltimecommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand& registerpublickeycommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand& registerpublicidentifiercommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand& getconnextpaymentinformationcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand& generatepaymenthashtorentchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand& generatepaymenthashtoextendconnextrentedchannelcommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand& getconnextchannelcontractdeploymentfeecommand(const Command* msg);
  static const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand& registerconnextchannelcontractdeploymentfeecommand(const Command* msg);
};

const ::io::stakenet::orderbook::protos::PingCommand&
Command::_Internal::ping(const Command* msg) {
  return *msg->value_.ping_;
}
const ::io::stakenet::orderbook::protos::GetTradingPairsCommand&
Command::_Internal::gettradingpairs(const Command* msg) {
  return *msg->value_.gettradingpairs_;
}
const ::io::stakenet::orderbook::protos::SubscribeCommand&
Command::_Internal::subscribe(const Command* msg) {
  return *msg->value_.subscribe_;
}
const ::io::stakenet::orderbook::protos::UnsubscribeCommand&
Command::_Internal::unsubscribe(const Command* msg) {
  return *msg->value_.unsubscribe_;
}
const ::io::stakenet::orderbook::protos::GetOpenOrdersCommand&
Command::_Internal::getopenorders(const Command* msg) {
  return *msg->value_.getopenorders_;
}
const ::io::stakenet::orderbook::protos::GetHistoricTradesCommand&
Command::_Internal::gethistorictrades(const Command* msg) {
  return *msg->value_.gethistorictrades_;
}
const ::io::stakenet::orderbook::protos::GetBarsPricesCommand&
Command::_Internal::getbarsprices(const Command* msg) {
  return *msg->value_.getbarsprices_;
}
const ::io::stakenet::orderbook::protos::PlaceOrderCommand&
Command::_Internal::placeorder(const Command* msg) {
  return *msg->value_.placeorder_;
}
const ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand&
Command::_Internal::gettradingorderbyid(const Command* msg) {
  return *msg->value_.gettradingorderbyid_;
}
const ::io::stakenet::orderbook::protos::CancelOpenOrderCommand&
Command::_Internal::cancelorder(const Command* msg) {
  return *msg->value_.cancelorder_;
}
const ::io::stakenet::orderbook::protos::SendOrderMessageCommand&
Command::_Internal::sendordermessage(const Command* msg) {
  return *msg->value_.sendordermessage_;
}
const ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand&
Command::_Internal::cancelmatchedorder(const Command* msg) {
  return *msg->value_.cancelmatchedorder_;
}
const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand&
Command::_Internal::cleantradingpairorders(const Command* msg) {
  return *msg->value_.cleantradingpairorders_;
}
const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand&
Command::_Internal::getlndpaymentinvoicecommand(const Command* msg) {
  return *msg->value_.getlndpaymentinvoicecommand_;
}
const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand&
Command::_Internal::generateinvoicetorentchannelcommand(const Command* msg) {
  return *msg->value_.generateinvoicetorentchannelcommand_;
}
const ::io::stakenet::orderbook::protos::RentChannelCommand&
Command::_Internal::rentchannelcommand(const Command* msg) {
  return *msg->value_.rentchannelcommand_;
}
const ::io::stakenet::orderbook::protos::GetChannelStatusCommand&
Command::_Internal::getchannelstatuscommand(const Command* msg) {
  return *msg->value_.getchannelstatuscommand_;
}
const ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand&
Command::_Internal::getfeetorentchannelcommand(const Command* msg) {
  return *msg->value_.getfeetorentchannelcommand_;
}
const ::io::stakenet::orderbook::protos::RefundFeeCommand&
Command::_Internal::refundfeecommand(const Command* msg) {
  return *msg->value_.refundfeecommand_;
}
const ::io::stakenet::orderbook::protos::GetRefundableAmountCommand&
Command::_Internal::getrefundableamountcommand(const Command* msg) {
  return *msg->value_.getrefundableamountcommand_;
}
const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand&
Command::_Internal::getfeetoextendrentedchannelcommand(const Command* msg) {
  return *msg->value_.getfeetoextendrentedchannelcommand_;
}
const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand&
Command::_Internal::generateinvoicetoextendrentedchannelcommand(const Command* msg) {
  return *msg->value_.generateinvoicetoextendrentedchannelcommand_;
}
const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand&
Command::_Internal::extendrentedchanneltimecommand(const Command* msg) {
  return *msg->value_.extendrentedchanneltimecommand_;
}
const ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand&
Command::_Internal::registerpublickeycommand(const Command* msg) {
  return *msg->value_.registerpublickeycommand_;
}
const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand&
Command::_Internal::registerpublicidentifiercommand(const Command* msg) {
  return *msg->value_.registerpublicidentifiercommand_;
}
const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand&
Command::_Internal::getconnextpaymentinformationcommand(const Command* msg) {
  return *msg->value_.getconnextpaymentinformationcommand_;
}
const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand&
Command::_Internal::generatepaymenthashtorentchannelcommand(const Command* msg) {
  return *msg->value_.generatepaymenthashtorentchannelcommand_;
}
const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand&
Command::_Internal::generatepaymenthashtoextendconnextrentedchannelcommand(const Command* msg) {
  return *msg->value_.generatepaymenthashtoextendconnextrentedchannelcommand_;
}
const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand&
Command::_Internal::getconnextchannelcontractdeploymentfeecommand(const Command* msg) {
  return *msg->value_.getconnextchannelcontractdeploymentfeecommand_;
}
const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand&
Command::_Internal::registerconnextchannelcontractdeploymentfeecommand(const Command* msg) {
  return *msg->value_.registerconnextchannelcontractdeploymentfeecommand_;
}
void Command::set_allocated_ping(::io::stakenet::orderbook::protos::PingCommand* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    value_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.ping)
}
void Command::clear_ping() {
  if (_internal_has_ping()) {
    delete value_.ping_;
    clear_has_value();
  }
}
void Command::set_allocated_gettradingpairs(::io::stakenet::orderbook::protos::GetTradingPairsCommand* gettradingpairs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gettradingpairs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gettradingpairs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettradingpairs, submessage_arena);
    }
    set_has_gettradingpairs();
    value_.gettradingpairs_ = gettradingpairs;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getTradingPairs)
}
void Command::clear_gettradingpairs() {
  if (_internal_has_gettradingpairs()) {
    delete value_.gettradingpairs_;
    clear_has_value();
  }
}
void Command::set_allocated_subscribe(::io::stakenet::orderbook::protos::SubscribeCommand* subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscribe, submessage_arena);
    }
    set_has_subscribe();
    value_.subscribe_ = subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.subscribe)
}
void Command::clear_subscribe() {
  if (_internal_has_subscribe()) {
    delete value_.subscribe_;
    clear_has_value();
  }
}
void Command::set_allocated_unsubscribe(::io::stakenet::orderbook::protos::UnsubscribeCommand* unsubscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (unsubscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsubscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsubscribe, submessage_arena);
    }
    set_has_unsubscribe();
    value_.unsubscribe_ = unsubscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.unsubscribe)
}
void Command::clear_unsubscribe() {
  if (_internal_has_unsubscribe()) {
    delete value_.unsubscribe_;
    clear_has_value();
  }
}
void Command::set_allocated_getopenorders(::io::stakenet::orderbook::protos::GetOpenOrdersCommand* getopenorders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getopenorders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getopenorders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getopenorders, submessage_arena);
    }
    set_has_getopenorders();
    value_.getopenorders_ = getopenorders;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getOpenOrders)
}
void Command::clear_getopenorders() {
  if (_internal_has_getopenorders()) {
    delete value_.getopenorders_;
    clear_has_value();
  }
}
void Command::set_allocated_gethistorictrades(::io::stakenet::orderbook::protos::GetHistoricTradesCommand* gethistorictrades) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gethistorictrades) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gethistorictrades = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethistorictrades, submessage_arena);
    }
    set_has_gethistorictrades();
    value_.gethistorictrades_ = gethistorictrades;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getHistoricTrades)
}
void Command::clear_gethistorictrades() {
  if (_internal_has_gethistorictrades()) {
    delete value_.gethistorictrades_;
    clear_has_value();
  }
}
void Command::set_allocated_getbarsprices(::io::stakenet::orderbook::protos::GetBarsPricesCommand* getbarsprices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getbarsprices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getbarsprices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbarsprices, submessage_arena);
    }
    set_has_getbarsprices();
    value_.getbarsprices_ = getbarsprices;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getBarsPrices)
}
void Command::clear_getbarsprices() {
  if (_internal_has_getbarsprices()) {
    delete value_.getbarsprices_;
    clear_has_value();
  }
}
void Command::set_allocated_placeorder(::io::stakenet::orderbook::protos::PlaceOrderCommand* placeorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (placeorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      placeorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placeorder, submessage_arena);
    }
    set_has_placeorder();
    value_.placeorder_ = placeorder;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.placeOrder)
}
void Command::clear_placeorder() {
  if (_internal_has_placeorder()) {
    delete value_.placeorder_;
    clear_has_value();
  }
}
void Command::set_allocated_gettradingorderbyid(::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand* gettradingorderbyid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gettradingorderbyid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gettradingorderbyid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettradingorderbyid, submessage_arena);
    }
    set_has_gettradingorderbyid();
    value_.gettradingorderbyid_ = gettradingorderbyid;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getTradingOrderById)
}
void Command::clear_gettradingorderbyid() {
  if (_internal_has_gettradingorderbyid()) {
    delete value_.gettradingorderbyid_;
    clear_has_value();
  }
}
void Command::set_allocated_cancelorder(::io::stakenet::orderbook::protos::CancelOpenOrderCommand* cancelorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cancelorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancelorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelorder, submessage_arena);
    }
    set_has_cancelorder();
    value_.cancelorder_ = cancelorder;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.cancelOrder)
}
void Command::clear_cancelorder() {
  if (_internal_has_cancelorder()) {
    delete value_.cancelorder_;
    clear_has_value();
  }
}
void Command::set_allocated_sendordermessage(::io::stakenet::orderbook::protos::SendOrderMessageCommand* sendordermessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (sendordermessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sendordermessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendordermessage, submessage_arena);
    }
    set_has_sendordermessage();
    value_.sendordermessage_ = sendordermessage;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.sendOrderMessage)
}
void Command::clear_sendordermessage() {
  if (_internal_has_sendordermessage()) {
    delete value_.sendordermessage_;
    clear_has_value();
  }
}
void Command::set_allocated_cancelmatchedorder(::io::stakenet::orderbook::protos::CancelMatchedOrderCommand* cancelmatchedorder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cancelmatchedorder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancelmatchedorder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelmatchedorder, submessage_arena);
    }
    set_has_cancelmatchedorder();
    value_.cancelmatchedorder_ = cancelmatchedorder;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.cancelMatchedOrder)
}
void Command::clear_cancelmatchedorder() {
  if (_internal_has_cancelmatchedorder()) {
    delete value_.cancelmatchedorder_;
    clear_has_value();
  }
}
void Command::set_allocated_cleantradingpairorders(::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand* cleantradingpairorders) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cleantradingpairorders) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleantradingpairorders = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleantradingpairorders, submessage_arena);
    }
    set_has_cleantradingpairorders();
    value_.cleantradingpairorders_ = cleantradingpairorders;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.cleanTradingPairOrders)
}
void Command::clear_cleantradingpairorders() {
  if (_internal_has_cleantradingpairorders()) {
    delete value_.cleantradingpairorders_;
    clear_has_value();
  }
}
void Command::set_allocated_getlndpaymentinvoicecommand(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand* getlndpaymentinvoicecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getlndpaymentinvoicecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getlndpaymentinvoicecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlndpaymentinvoicecommand, submessage_arena);
    }
    set_has_getlndpaymentinvoicecommand();
    value_.getlndpaymentinvoicecommand_ = getlndpaymentinvoicecommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getLndPaymentInvoiceCommand)
}
void Command::clear_getlndpaymentinvoicecommand() {
  if (_internal_has_getlndpaymentinvoicecommand()) {
    delete value_.getlndpaymentinvoicecommand_;
    clear_has_value();
  }
}
void Command::set_allocated_generateinvoicetorentchannelcommand(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand* generateinvoicetorentchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generateinvoicetorentchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generateinvoicetorentchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generateinvoicetorentchannelcommand, submessage_arena);
    }
    set_has_generateinvoicetorentchannelcommand();
    value_.generateinvoicetorentchannelcommand_ = generateinvoicetorentchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.generateInvoiceToRentChannelCommand)
}
void Command::clear_generateinvoicetorentchannelcommand() {
  if (_internal_has_generateinvoicetorentchannelcommand()) {
    delete value_.generateinvoicetorentchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_rentchannelcommand(::io::stakenet::orderbook::protos::RentChannelCommand* rentchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (rentchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rentchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rentchannelcommand, submessage_arena);
    }
    set_has_rentchannelcommand();
    value_.rentchannelcommand_ = rentchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.rentChannelCommand)
}
void Command::clear_rentchannelcommand() {
  if (_internal_has_rentchannelcommand()) {
    delete value_.rentchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getchannelstatuscommand(::io::stakenet::orderbook::protos::GetChannelStatusCommand* getchannelstatuscommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getchannelstatuscommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getchannelstatuscommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getchannelstatuscommand, submessage_arena);
    }
    set_has_getchannelstatuscommand();
    value_.getchannelstatuscommand_ = getchannelstatuscommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getChannelStatusCommand)
}
void Command::clear_getchannelstatuscommand() {
  if (_internal_has_getchannelstatuscommand()) {
    delete value_.getchannelstatuscommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getfeetorentchannelcommand(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand* getfeetorentchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getfeetorentchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getfeetorentchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfeetorentchannelcommand, submessage_arena);
    }
    set_has_getfeetorentchannelcommand();
    value_.getfeetorentchannelcommand_ = getfeetorentchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getFeeToRentChannelCommand)
}
void Command::clear_getfeetorentchannelcommand() {
  if (_internal_has_getfeetorentchannelcommand()) {
    delete value_.getfeetorentchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_refundfeecommand(::io::stakenet::orderbook::protos::RefundFeeCommand* refundfeecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refundfeecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      refundfeecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refundfeecommand, submessage_arena);
    }
    set_has_refundfeecommand();
    value_.refundfeecommand_ = refundfeecommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.refundFeeCommand)
}
void Command::clear_refundfeecommand() {
  if (_internal_has_refundfeecommand()) {
    delete value_.refundfeecommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getrefundableamountcommand(::io::stakenet::orderbook::protos::GetRefundableAmountCommand* getrefundableamountcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getrefundableamountcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getrefundableamountcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrefundableamountcommand, submessage_arena);
    }
    set_has_getrefundableamountcommand();
    value_.getrefundableamountcommand_ = getrefundableamountcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getRefundableAmountCommand)
}
void Command::clear_getrefundableamountcommand() {
  if (_internal_has_getrefundableamountcommand()) {
    delete value_.getrefundableamountcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getfeetoextendrentedchannelcommand(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand* getfeetoextendrentedchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getfeetoextendrentedchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getfeetoextendrentedchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfeetoextendrentedchannelcommand, submessage_arena);
    }
    set_has_getfeetoextendrentedchannelcommand();
    value_.getfeetoextendrentedchannelcommand_ = getfeetoextendrentedchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getFeeToExtendRentedChannelCommand)
}
void Command::clear_getfeetoextendrentedchannelcommand() {
  if (_internal_has_getfeetoextendrentedchannelcommand()) {
    delete value_.getfeetoextendrentedchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_generateinvoicetoextendrentedchannelcommand(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand* generateinvoicetoextendrentedchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generateinvoicetoextendrentedchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generateinvoicetoextendrentedchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generateinvoicetoextendrentedchannelcommand, submessage_arena);
    }
    set_has_generateinvoicetoextendrentedchannelcommand();
    value_.generateinvoicetoextendrentedchannelcommand_ = generateinvoicetoextendrentedchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.generateInvoiceToExtendRentedChannelCommand)
}
void Command::clear_generateinvoicetoextendrentedchannelcommand() {
  if (_internal_has_generateinvoicetoextendrentedchannelcommand()) {
    delete value_.generateinvoicetoextendrentedchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_extendrentedchanneltimecommand(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand* extendrentedchanneltimecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (extendrentedchanneltimecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extendrentedchanneltimecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendrentedchanneltimecommand, submessage_arena);
    }
    set_has_extendrentedchanneltimecommand();
    value_.extendrentedchanneltimecommand_ = extendrentedchanneltimecommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.extendRentedChannelTimeCommand)
}
void Command::clear_extendrentedchanneltimecommand() {
  if (_internal_has_extendrentedchanneltimecommand()) {
    delete value_.extendrentedchanneltimecommand_;
    clear_has_value();
  }
}
void Command::set_allocated_registerpublickeycommand(::io::stakenet::orderbook::protos::RegisterPublicKeyCommand* registerpublickeycommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerpublickeycommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerpublickeycommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerpublickeycommand, submessage_arena);
    }
    set_has_registerpublickeycommand();
    value_.registerpublickeycommand_ = registerpublickeycommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.registerPublicKeyCommand)
}
void Command::clear_registerpublickeycommand() {
  if (_internal_has_registerpublickeycommand()) {
    delete value_.registerpublickeycommand_;
    clear_has_value();
  }
}
void Command::set_allocated_registerpublicidentifiercommand(::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand* registerpublicidentifiercommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerpublicidentifiercommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerpublicidentifiercommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerpublicidentifiercommand, submessage_arena);
    }
    set_has_registerpublicidentifiercommand();
    value_.registerpublicidentifiercommand_ = registerpublicidentifiercommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.registerPublicIdentifierCommand)
}
void Command::clear_registerpublicidentifiercommand() {
  if (_internal_has_registerpublicidentifiercommand()) {
    delete value_.registerpublicidentifiercommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getconnextpaymentinformationcommand(::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand* getconnextpaymentinformationcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getconnextpaymentinformationcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getconnextpaymentinformationcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getconnextpaymentinformationcommand, submessage_arena);
    }
    set_has_getconnextpaymentinformationcommand();
    value_.getconnextpaymentinformationcommand_ = getconnextpaymentinformationcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getConnextPaymentInformationCommand)
}
void Command::clear_getconnextpaymentinformationcommand() {
  if (_internal_has_getconnextpaymentinformationcommand()) {
    delete value_.getconnextpaymentinformationcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_generatepaymenthashtorentchannelcommand(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand* generatepaymenthashtorentchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generatepaymenthashtorentchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generatepaymenthashtorentchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generatepaymenthashtorentchannelcommand, submessage_arena);
    }
    set_has_generatepaymenthashtorentchannelcommand();
    value_.generatepaymenthashtorentchannelcommand_ = generatepaymenthashtorentchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.generatePaymentHashToRentChannelCommand)
}
void Command::clear_generatepaymenthashtorentchannelcommand() {
  if (_internal_has_generatepaymenthashtorentchannelcommand()) {
    delete value_.generatepaymenthashtorentchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_generatepaymenthashtoextendconnextrentedchannelcommand(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand* generatepaymenthashtoextendconnextrentedchannelcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generatepaymenthashtoextendconnextrentedchannelcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generatepaymenthashtoextendconnextrentedchannelcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generatepaymenthashtoextendconnextrentedchannelcommand, submessage_arena);
    }
    set_has_generatepaymenthashtoextendconnextrentedchannelcommand();
    value_.generatepaymenthashtoextendconnextrentedchannelcommand_ = generatepaymenthashtoextendconnextrentedchannelcommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.generatePaymentHashToExtendConnextRentedChannelCommand)
}
void Command::clear_generatepaymenthashtoextendconnextrentedchannelcommand() {
  if (_internal_has_generatepaymenthashtoextendconnextrentedchannelcommand()) {
    delete value_.generatepaymenthashtoextendconnextrentedchannelcommand_;
    clear_has_value();
  }
}
void Command::set_allocated_getconnextchannelcontractdeploymentfeecommand(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand* getconnextchannelcontractdeploymentfeecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getconnextchannelcontractdeploymentfeecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getconnextchannelcontractdeploymentfeecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getconnextchannelcontractdeploymentfeecommand, submessage_arena);
    }
    set_has_getconnextchannelcontractdeploymentfeecommand();
    value_.getconnextchannelcontractdeploymentfeecommand_ = getconnextchannelcontractdeploymentfeecommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.getConnextChannelContractDeploymentFeeCommand)
}
void Command::clear_getconnextchannelcontractdeploymentfeecommand() {
  if (_internal_has_getconnextchannelcontractdeploymentfeecommand()) {
    delete value_.getconnextchannelcontractdeploymentfeecommand_;
    clear_has_value();
  }
}
void Command::set_allocated_registerconnextchannelcontractdeploymentfeecommand(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand* registerconnextchannelcontractdeploymentfeecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerconnextchannelcontractdeploymentfeecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerconnextchannelcontractdeploymentfeecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerconnextchannelcontractdeploymentfeecommand, submessage_arena);
    }
    set_has_registerconnextchannelcontractdeploymentfeecommand();
    value_.registerconnextchannelcontractdeploymentfeecommand_ = registerconnextchannelcontractdeploymentfeecommand;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Command.registerConnextChannelContractDeploymentFeeCommand)
}
void Command::clear_registerconnextchannelcontractdeploymentfeecommand() {
  if (_internal_has_registerconnextchannelcontractdeploymentfeecommand()) {
    delete value_.registerconnextchannelcontractdeploymentfeecommand_;
    clear_has_value();
  }
}
Command::Command()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmessageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientmessageid().empty()) {
    clientmessageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientmessageid_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kPing: {
      _internal_mutable_ping()->::io::stakenet::orderbook::protos::PingCommand::MergeFrom(from._internal_ping());
      break;
    }
    case kGetTradingPairs: {
      _internal_mutable_gettradingpairs()->::io::stakenet::orderbook::protos::GetTradingPairsCommand::MergeFrom(from._internal_gettradingpairs());
      break;
    }
    case kSubscribe: {
      _internal_mutable_subscribe()->::io::stakenet::orderbook::protos::SubscribeCommand::MergeFrom(from._internal_subscribe());
      break;
    }
    case kUnsubscribe: {
      _internal_mutable_unsubscribe()->::io::stakenet::orderbook::protos::UnsubscribeCommand::MergeFrom(from._internal_unsubscribe());
      break;
    }
    case kGetOpenOrders: {
      _internal_mutable_getopenorders()->::io::stakenet::orderbook::protos::GetOpenOrdersCommand::MergeFrom(from._internal_getopenorders());
      break;
    }
    case kGetHistoricTrades: {
      _internal_mutable_gethistorictrades()->::io::stakenet::orderbook::protos::GetHistoricTradesCommand::MergeFrom(from._internal_gethistorictrades());
      break;
    }
    case kGetBarsPrices: {
      _internal_mutable_getbarsprices()->::io::stakenet::orderbook::protos::GetBarsPricesCommand::MergeFrom(from._internal_getbarsprices());
      break;
    }
    case kPlaceOrder: {
      _internal_mutable_placeorder()->::io::stakenet::orderbook::protos::PlaceOrderCommand::MergeFrom(from._internal_placeorder());
      break;
    }
    case kGetTradingOrderById: {
      _internal_mutable_gettradingorderbyid()->::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand::MergeFrom(from._internal_gettradingorderbyid());
      break;
    }
    case kCancelOrder: {
      _internal_mutable_cancelorder()->::io::stakenet::orderbook::protos::CancelOpenOrderCommand::MergeFrom(from._internal_cancelorder());
      break;
    }
    case kSendOrderMessage: {
      _internal_mutable_sendordermessage()->::io::stakenet::orderbook::protos::SendOrderMessageCommand::MergeFrom(from._internal_sendordermessage());
      break;
    }
    case kCancelMatchedOrder: {
      _internal_mutable_cancelmatchedorder()->::io::stakenet::orderbook::protos::CancelMatchedOrderCommand::MergeFrom(from._internal_cancelmatchedorder());
      break;
    }
    case kCleanTradingPairOrders: {
      _internal_mutable_cleantradingpairorders()->::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand::MergeFrom(from._internal_cleantradingpairorders());
      break;
    }
    case kGetLndPaymentInvoiceCommand: {
      _internal_mutable_getlndpaymentinvoicecommand()->::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand::MergeFrom(from._internal_getlndpaymentinvoicecommand());
      break;
    }
    case kGenerateInvoiceToRentChannelCommand: {
      _internal_mutable_generateinvoicetorentchannelcommand()->::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand::MergeFrom(from._internal_generateinvoicetorentchannelcommand());
      break;
    }
    case kRentChannelCommand: {
      _internal_mutable_rentchannelcommand()->::io::stakenet::orderbook::protos::RentChannelCommand::MergeFrom(from._internal_rentchannelcommand());
      break;
    }
    case kGetChannelStatusCommand: {
      _internal_mutable_getchannelstatuscommand()->::io::stakenet::orderbook::protos::GetChannelStatusCommand::MergeFrom(from._internal_getchannelstatuscommand());
      break;
    }
    case kGetFeeToRentChannelCommand: {
      _internal_mutable_getfeetorentchannelcommand()->::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand::MergeFrom(from._internal_getfeetorentchannelcommand());
      break;
    }
    case kRefundFeeCommand: {
      _internal_mutable_refundfeecommand()->::io::stakenet::orderbook::protos::RefundFeeCommand::MergeFrom(from._internal_refundfeecommand());
      break;
    }
    case kGetRefundableAmountCommand: {
      _internal_mutable_getrefundableamountcommand()->::io::stakenet::orderbook::protos::GetRefundableAmountCommand::MergeFrom(from._internal_getrefundableamountcommand());
      break;
    }
    case kGetFeeToExtendRentedChannelCommand: {
      _internal_mutable_getfeetoextendrentedchannelcommand()->::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand::MergeFrom(from._internal_getfeetoextendrentedchannelcommand());
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelCommand: {
      _internal_mutable_generateinvoicetoextendrentedchannelcommand()->::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand::MergeFrom(from._internal_generateinvoicetoextendrentedchannelcommand());
      break;
    }
    case kExtendRentedChannelTimeCommand: {
      _internal_mutable_extendrentedchanneltimecommand()->::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand::MergeFrom(from._internal_extendrentedchanneltimecommand());
      break;
    }
    case kRegisterPublicKeyCommand: {
      _internal_mutable_registerpublickeycommand()->::io::stakenet::orderbook::protos::RegisterPublicKeyCommand::MergeFrom(from._internal_registerpublickeycommand());
      break;
    }
    case kRegisterPublicIdentifierCommand: {
      _internal_mutable_registerpublicidentifiercommand()->::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand::MergeFrom(from._internal_registerpublicidentifiercommand());
      break;
    }
    case kGetConnextPaymentInformationCommand: {
      _internal_mutable_getconnextpaymentinformationcommand()->::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand::MergeFrom(from._internal_getconnextpaymentinformationcommand());
      break;
    }
    case kGeneratePaymentHashToRentChannelCommand: {
      _internal_mutable_generatepaymenthashtorentchannelcommand()->::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand::MergeFrom(from._internal_generatepaymenthashtorentchannelcommand());
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelCommand: {
      _internal_mutable_generatepaymenthashtoextendconnextrentedchannelcommand()->::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand::MergeFrom(from._internal_generatepaymenthashtoextendconnextrentedchannelcommand());
      break;
    }
    case kGetConnextChannelContractDeploymentFeeCommand: {
      _internal_mutable_getconnextchannelcontractdeploymentfeecommand()->::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand::MergeFrom(from._internal_getconnextchannelcontractdeploymentfeecommand());
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeCommand: {
      _internal_mutable_registerconnextchannelcontractdeploymentfeecommand()->::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand::MergeFrom(from._internal_registerconnextchannelcontractdeploymentfeecommand());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Command)
}

void Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Command_stakenet_2forderbook_2fapi_2eproto.base);
  clientmessageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  clientmessageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Command& Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Command_stakenet_2forderbook_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Command::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.Command)
  switch (value_case()) {
    case kPing: {
      delete value_.ping_;
      break;
    }
    case kGetTradingPairs: {
      delete value_.gettradingpairs_;
      break;
    }
    case kSubscribe: {
      delete value_.subscribe_;
      break;
    }
    case kUnsubscribe: {
      delete value_.unsubscribe_;
      break;
    }
    case kGetOpenOrders: {
      delete value_.getopenorders_;
      break;
    }
    case kGetHistoricTrades: {
      delete value_.gethistorictrades_;
      break;
    }
    case kGetBarsPrices: {
      delete value_.getbarsprices_;
      break;
    }
    case kPlaceOrder: {
      delete value_.placeorder_;
      break;
    }
    case kGetTradingOrderById: {
      delete value_.gettradingorderbyid_;
      break;
    }
    case kCancelOrder: {
      delete value_.cancelorder_;
      break;
    }
    case kSendOrderMessage: {
      delete value_.sendordermessage_;
      break;
    }
    case kCancelMatchedOrder: {
      delete value_.cancelmatchedorder_;
      break;
    }
    case kCleanTradingPairOrders: {
      delete value_.cleantradingpairorders_;
      break;
    }
    case kGetLndPaymentInvoiceCommand: {
      delete value_.getlndpaymentinvoicecommand_;
      break;
    }
    case kGenerateInvoiceToRentChannelCommand: {
      delete value_.generateinvoicetorentchannelcommand_;
      break;
    }
    case kRentChannelCommand: {
      delete value_.rentchannelcommand_;
      break;
    }
    case kGetChannelStatusCommand: {
      delete value_.getchannelstatuscommand_;
      break;
    }
    case kGetFeeToRentChannelCommand: {
      delete value_.getfeetorentchannelcommand_;
      break;
    }
    case kRefundFeeCommand: {
      delete value_.refundfeecommand_;
      break;
    }
    case kGetRefundableAmountCommand: {
      delete value_.getrefundableamountcommand_;
      break;
    }
    case kGetFeeToExtendRentedChannelCommand: {
      delete value_.getfeetoextendrentedchannelcommand_;
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelCommand: {
      delete value_.generateinvoicetoextendrentedchannelcommand_;
      break;
    }
    case kExtendRentedChannelTimeCommand: {
      delete value_.extendrentedchanneltimecommand_;
      break;
    }
    case kRegisterPublicKeyCommand: {
      delete value_.registerpublickeycommand_;
      break;
    }
    case kRegisterPublicIdentifierCommand: {
      delete value_.registerpublicidentifiercommand_;
      break;
    }
    case kGetConnextPaymentInformationCommand: {
      delete value_.getconnextpaymentinformationcommand_;
      break;
    }
    case kGeneratePaymentHashToRentChannelCommand: {
      delete value_.generatepaymenthashtorentchannelcommand_;
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelCommand: {
      delete value_.generatepaymenthashtoextendconnextrentedchannelcommand_;
      break;
    }
    case kGetConnextChannelContractDeploymentFeeCommand: {
      delete value_.getconnextchannelcontractdeploymentfeecommand_;
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeCommand: {
      delete value_.registerconnextchannelcontractdeploymentfeecommand_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientmessageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_value();
  _internal_metadata_.Clear();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientMessageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientmessageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Command.clientMessageId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PingCommand ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetTradingPairsCommand getTradingPairs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettradingpairs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SubscribeCommand subscribe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.UnsubscribeCommand unsubscribe = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsubscribe(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetOpenOrdersCommand getOpenOrders = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_getopenorders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetHistoricTradesCommand getHistoricTrades = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_gethistorictrades(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetBarsPricesCommand getBarsPrices = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbarsprices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PlaceOrderCommand placeOrder = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetOpenOrderByIdCommand getTradingOrderById = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettradingorderbyid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CancelOpenOrderCommand cancelOrder = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SendOrderMessageCommand sendOrderMessage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendordermessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CancelMatchedOrderCommand cancelMatchedOrder = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelmatchedorder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand cleanTradingPairOrders = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleantradingpairorders(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand getLndPaymentInvoiceCommand = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlndpaymentinvoicecommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand generateInvoiceToRentChannelCommand = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_generateinvoicetorentchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RentChannelCommand rentChannelCommand = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_rentchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetChannelStatusCommand getChannelStatusCommand = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_getchannelstatuscommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetFeeToRentChannelCommand getFeeToRentChannelCommand = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfeetorentchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RefundFeeCommand refundFeeCommand = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_refundfeecommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetRefundableAmountCommand getRefundableAmountCommand = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrefundableamountcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand getFeeToExtendRentedChannelCommand = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfeetoextendrentedchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand generateInvoiceToExtendRentedChannelCommand = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_generateinvoicetoextendrentedchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand extendRentedChannelTimeCommand = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendrentedchanneltimecommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterPublicKeyCommand registerPublicKeyCommand = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerpublickeycommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand registerPublicIdentifierCommand = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerpublicidentifiercommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand getConnextPaymentInformationCommand = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_getconnextpaymentinformationcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand generatePaymentHashToRentChannelCommand = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_generatepaymenthashtorentchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand generatePaymentHashToExtendConnextRentedChannelCommand = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_generatepaymenthashtoextendconnextrentedchannelcommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand getConnextChannelContractDeploymentFeeCommand = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_getconnextchannelcontractdeploymentfeecommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand registerConnextChannelContractDeploymentFeeCommand = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerconnextchannelcontractdeploymentfeecommand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientMessageId = 1;
  if (this->clientmessageid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientmessageid().data(), static_cast<int>(this->_internal_clientmessageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Command.clientMessageId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientmessageid(), target);
  }

  // .io.stakenet.orderbook.protos.PingCommand ping = 2;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ping(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetTradingPairsCommand getTradingPairs = 3;
  if (_internal_has_gettradingpairs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::gettradingpairs(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SubscribeCommand subscribe = 4;
  if (_internal_has_subscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::subscribe(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.UnsubscribeCommand unsubscribe = 5;
  if (_internal_has_unsubscribe()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::unsubscribe(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetOpenOrdersCommand getOpenOrders = 6;
  if (_internal_has_getopenorders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::getopenorders(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetHistoricTradesCommand getHistoricTrades = 7;
  if (_internal_has_gethistorictrades()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::gethistorictrades(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetBarsPricesCommand getBarsPrices = 8;
  if (_internal_has_getbarsprices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::getbarsprices(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.PlaceOrderCommand placeOrder = 9;
  if (_internal_has_placeorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::placeorder(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetOpenOrderByIdCommand getTradingOrderById = 10;
  if (_internal_has_gettradingorderbyid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::gettradingorderbyid(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CancelOpenOrderCommand cancelOrder = 11;
  if (_internal_has_cancelorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cancelorder(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SendOrderMessageCommand sendOrderMessage = 12;
  if (_internal_has_sendordermessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sendordermessage(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CancelMatchedOrderCommand cancelMatchedOrder = 13;
  if (_internal_has_cancelmatchedorder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cancelmatchedorder(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand cleanTradingPairOrders = 14;
  if (_internal_has_cleantradingpairorders()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::cleantradingpairorders(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand getLndPaymentInvoiceCommand = 15;
  if (_internal_has_getlndpaymentinvoicecommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::getlndpaymentinvoicecommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand generateInvoiceToRentChannelCommand = 16;
  if (_internal_has_generateinvoicetorentchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::generateinvoicetorentchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RentChannelCommand rentChannelCommand = 17;
  if (_internal_has_rentchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::rentchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetChannelStatusCommand getChannelStatusCommand = 18;
  if (_internal_has_getchannelstatuscommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::getchannelstatuscommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetFeeToRentChannelCommand getFeeToRentChannelCommand = 19;
  if (_internal_has_getfeetorentchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::getfeetorentchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RefundFeeCommand refundFeeCommand = 20;
  if (_internal_has_refundfeecommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::refundfeecommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetRefundableAmountCommand getRefundableAmountCommand = 21;
  if (_internal_has_getrefundableamountcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::getrefundableamountcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand getFeeToExtendRentedChannelCommand = 22;
  if (_internal_has_getfeetoextendrentedchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::getfeetoextendrentedchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand generateInvoiceToExtendRentedChannelCommand = 23;
  if (_internal_has_generateinvoicetoextendrentedchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::generateinvoicetoextendrentedchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand extendRentedChannelTimeCommand = 24;
  if (_internal_has_extendrentedchanneltimecommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::extendrentedchanneltimecommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterPublicKeyCommand registerPublicKeyCommand = 25;
  if (_internal_has_registerpublickeycommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::registerpublickeycommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand registerPublicIdentifierCommand = 26;
  if (_internal_has_registerpublicidentifiercommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::registerpublicidentifiercommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand getConnextPaymentInformationCommand = 27;
  if (_internal_has_getconnextpaymentinformationcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::getconnextpaymentinformationcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand generatePaymentHashToRentChannelCommand = 28;
  if (_internal_has_generatepaymenthashtorentchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::generatepaymenthashtorentchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand generatePaymentHashToExtendConnextRentedChannelCommand = 29;
  if (_internal_has_generatepaymenthashtoextendconnextrentedchannelcommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::generatepaymenthashtoextendconnextrentedchannelcommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand getConnextChannelContractDeploymentFeeCommand = 30;
  if (_internal_has_getconnextchannelcontractdeploymentfeecommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::getconnextchannelcontractdeploymentfeecommand(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand registerConnextChannelContractDeploymentFeeCommand = 31;
  if (_internal_has_registerconnextchannelcontractdeploymentfeecommand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::registerconnextchannelcontractdeploymentfeecommand(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientMessageId = 1;
  if (this->clientmessageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientmessageid());
  }

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.PingCommand ping = 2;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ping_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetTradingPairsCommand getTradingPairs = 3;
    case kGetTradingPairs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.gettradingpairs_);
      break;
    }
    // .io.stakenet.orderbook.protos.SubscribeCommand subscribe = 4;
    case kSubscribe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.subscribe_);
      break;
    }
    // .io.stakenet.orderbook.protos.UnsubscribeCommand unsubscribe = 5;
    case kUnsubscribe: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.unsubscribe_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetOpenOrdersCommand getOpenOrders = 6;
    case kGetOpenOrders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getopenorders_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetHistoricTradesCommand getHistoricTrades = 7;
    case kGetHistoricTrades: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.gethistorictrades_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetBarsPricesCommand getBarsPrices = 8;
    case kGetBarsPrices: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getbarsprices_);
      break;
    }
    // .io.stakenet.orderbook.protos.PlaceOrderCommand placeOrder = 9;
    case kPlaceOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.placeorder_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetOpenOrderByIdCommand getTradingOrderById = 10;
    case kGetTradingOrderById: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.gettradingorderbyid_);
      break;
    }
    // .io.stakenet.orderbook.protos.CancelOpenOrderCommand cancelOrder = 11;
    case kCancelOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cancelorder_);
      break;
    }
    // .io.stakenet.orderbook.protos.SendOrderMessageCommand sendOrderMessage = 12;
    case kSendOrderMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.sendordermessage_);
      break;
    }
    // .io.stakenet.orderbook.protos.CancelMatchedOrderCommand cancelMatchedOrder = 13;
    case kCancelMatchedOrder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cancelmatchedorder_);
      break;
    }
    // .io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand cleanTradingPairOrders = 14;
    case kCleanTradingPairOrders: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cleantradingpairorders_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand getLndPaymentInvoiceCommand = 15;
    case kGetLndPaymentInvoiceCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getlndpaymentinvoicecommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand generateInvoiceToRentChannelCommand = 16;
    case kGenerateInvoiceToRentChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generateinvoicetorentchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.RentChannelCommand rentChannelCommand = 17;
    case kRentChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.rentchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetChannelStatusCommand getChannelStatusCommand = 18;
    case kGetChannelStatusCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getchannelstatuscommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetFeeToRentChannelCommand getFeeToRentChannelCommand = 19;
    case kGetFeeToRentChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getfeetorentchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.RefundFeeCommand refundFeeCommand = 20;
    case kRefundFeeCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.refundfeecommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetRefundableAmountCommand getRefundableAmountCommand = 21;
    case kGetRefundableAmountCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getrefundableamountcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand getFeeToExtendRentedChannelCommand = 22;
    case kGetFeeToExtendRentedChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getfeetoextendrentedchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand generateInvoiceToExtendRentedChannelCommand = 23;
    case kGenerateInvoiceToExtendRentedChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generateinvoicetoextendrentedchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand extendRentedChannelTimeCommand = 24;
    case kExtendRentedChannelTimeCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extendrentedchanneltimecommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterPublicKeyCommand registerPublicKeyCommand = 25;
    case kRegisterPublicKeyCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerpublickeycommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand registerPublicIdentifierCommand = 26;
    case kRegisterPublicIdentifierCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerpublicidentifiercommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand getConnextPaymentInformationCommand = 27;
    case kGetConnextPaymentInformationCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getconnextpaymentinformationcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand generatePaymentHashToRentChannelCommand = 28;
    case kGeneratePaymentHashToRentChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generatepaymenthashtorentchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand generatePaymentHashToExtendConnextRentedChannelCommand = 29;
    case kGeneratePaymentHashToExtendConnextRentedChannelCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generatepaymenthashtoextendconnextrentedchannelcommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand getConnextChannelContractDeploymentFeeCommand = 30;
    case kGetConnextChannelContractDeploymentFeeCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getconnextchannelcontractdeploymentfeecommand_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand registerConnextChannelContractDeploymentFeeCommand = 31;
    case kRegisterConnextChannelContractDeploymentFeeCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerconnextchannelcontractdeploymentfeecommand_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Command)
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientmessageid().size() > 0) {

    clientmessageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientmessageid_);
  }
  switch (from.value_case()) {
    case kPing: {
      _internal_mutable_ping()->::io::stakenet::orderbook::protos::PingCommand::MergeFrom(from._internal_ping());
      break;
    }
    case kGetTradingPairs: {
      _internal_mutable_gettradingpairs()->::io::stakenet::orderbook::protos::GetTradingPairsCommand::MergeFrom(from._internal_gettradingpairs());
      break;
    }
    case kSubscribe: {
      _internal_mutable_subscribe()->::io::stakenet::orderbook::protos::SubscribeCommand::MergeFrom(from._internal_subscribe());
      break;
    }
    case kUnsubscribe: {
      _internal_mutable_unsubscribe()->::io::stakenet::orderbook::protos::UnsubscribeCommand::MergeFrom(from._internal_unsubscribe());
      break;
    }
    case kGetOpenOrders: {
      _internal_mutable_getopenorders()->::io::stakenet::orderbook::protos::GetOpenOrdersCommand::MergeFrom(from._internal_getopenorders());
      break;
    }
    case kGetHistoricTrades: {
      _internal_mutable_gethistorictrades()->::io::stakenet::orderbook::protos::GetHistoricTradesCommand::MergeFrom(from._internal_gethistorictrades());
      break;
    }
    case kGetBarsPrices: {
      _internal_mutable_getbarsprices()->::io::stakenet::orderbook::protos::GetBarsPricesCommand::MergeFrom(from._internal_getbarsprices());
      break;
    }
    case kPlaceOrder: {
      _internal_mutable_placeorder()->::io::stakenet::orderbook::protos::PlaceOrderCommand::MergeFrom(from._internal_placeorder());
      break;
    }
    case kGetTradingOrderById: {
      _internal_mutable_gettradingorderbyid()->::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand::MergeFrom(from._internal_gettradingorderbyid());
      break;
    }
    case kCancelOrder: {
      _internal_mutable_cancelorder()->::io::stakenet::orderbook::protos::CancelOpenOrderCommand::MergeFrom(from._internal_cancelorder());
      break;
    }
    case kSendOrderMessage: {
      _internal_mutable_sendordermessage()->::io::stakenet::orderbook::protos::SendOrderMessageCommand::MergeFrom(from._internal_sendordermessage());
      break;
    }
    case kCancelMatchedOrder: {
      _internal_mutable_cancelmatchedorder()->::io::stakenet::orderbook::protos::CancelMatchedOrderCommand::MergeFrom(from._internal_cancelmatchedorder());
      break;
    }
    case kCleanTradingPairOrders: {
      _internal_mutable_cleantradingpairorders()->::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand::MergeFrom(from._internal_cleantradingpairorders());
      break;
    }
    case kGetLndPaymentInvoiceCommand: {
      _internal_mutable_getlndpaymentinvoicecommand()->::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand::MergeFrom(from._internal_getlndpaymentinvoicecommand());
      break;
    }
    case kGenerateInvoiceToRentChannelCommand: {
      _internal_mutable_generateinvoicetorentchannelcommand()->::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand::MergeFrom(from._internal_generateinvoicetorentchannelcommand());
      break;
    }
    case kRentChannelCommand: {
      _internal_mutable_rentchannelcommand()->::io::stakenet::orderbook::protos::RentChannelCommand::MergeFrom(from._internal_rentchannelcommand());
      break;
    }
    case kGetChannelStatusCommand: {
      _internal_mutable_getchannelstatuscommand()->::io::stakenet::orderbook::protos::GetChannelStatusCommand::MergeFrom(from._internal_getchannelstatuscommand());
      break;
    }
    case kGetFeeToRentChannelCommand: {
      _internal_mutable_getfeetorentchannelcommand()->::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand::MergeFrom(from._internal_getfeetorentchannelcommand());
      break;
    }
    case kRefundFeeCommand: {
      _internal_mutable_refundfeecommand()->::io::stakenet::orderbook::protos::RefundFeeCommand::MergeFrom(from._internal_refundfeecommand());
      break;
    }
    case kGetRefundableAmountCommand: {
      _internal_mutable_getrefundableamountcommand()->::io::stakenet::orderbook::protos::GetRefundableAmountCommand::MergeFrom(from._internal_getrefundableamountcommand());
      break;
    }
    case kGetFeeToExtendRentedChannelCommand: {
      _internal_mutable_getfeetoextendrentedchannelcommand()->::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand::MergeFrom(from._internal_getfeetoextendrentedchannelcommand());
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelCommand: {
      _internal_mutable_generateinvoicetoextendrentedchannelcommand()->::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand::MergeFrom(from._internal_generateinvoicetoextendrentedchannelcommand());
      break;
    }
    case kExtendRentedChannelTimeCommand: {
      _internal_mutable_extendrentedchanneltimecommand()->::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand::MergeFrom(from._internal_extendrentedchanneltimecommand());
      break;
    }
    case kRegisterPublicKeyCommand: {
      _internal_mutable_registerpublickeycommand()->::io::stakenet::orderbook::protos::RegisterPublicKeyCommand::MergeFrom(from._internal_registerpublickeycommand());
      break;
    }
    case kRegisterPublicIdentifierCommand: {
      _internal_mutable_registerpublicidentifiercommand()->::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand::MergeFrom(from._internal_registerpublicidentifiercommand());
      break;
    }
    case kGetConnextPaymentInformationCommand: {
      _internal_mutable_getconnextpaymentinformationcommand()->::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand::MergeFrom(from._internal_getconnextpaymentinformationcommand());
      break;
    }
    case kGeneratePaymentHashToRentChannelCommand: {
      _internal_mutable_generatepaymenthashtorentchannelcommand()->::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand::MergeFrom(from._internal_generatepaymenthashtorentchannelcommand());
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelCommand: {
      _internal_mutable_generatepaymenthashtoextendconnextrentedchannelcommand()->::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand::MergeFrom(from._internal_generatepaymenthashtoextendconnextrentedchannelcommand());
      break;
    }
    case kGetConnextChannelContractDeploymentFeeCommand: {
      _internal_mutable_getconnextchannelcontractdeploymentfeecommand()->::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand::MergeFrom(from._internal_getconnextchannelcontractdeploymentfeecommand());
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeCommand: {
      _internal_mutable_registerconnextchannelcontractdeploymentfeecommand()->::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand::MergeFrom(from._internal_registerconnextchannelcontractdeploymentfeecommand());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientmessageid_.Swap(&other->clientmessageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_CommandResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.commandfailed_ = const_cast< ::io::stakenet::orderbook::protos::CommandFailed*>(
      ::io::stakenet::orderbook::protos::CommandFailed::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.pingresponse_ = const_cast< ::io::stakenet::orderbook::protos::PingResponse*>(
      ::io::stakenet::orderbook::protos::PingResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.gettradingpairsresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetTradingPairsResponse*>(
      ::io::stakenet::orderbook::protos::GetTradingPairsResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.subscriberesponse_ = const_cast< ::io::stakenet::orderbook::protos::SubscribeResponse*>(
      ::io::stakenet::orderbook::protos::SubscribeResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.unsubscriberesponse_ = const_cast< ::io::stakenet::orderbook::protos::UnsubscribeResponse*>(
      ::io::stakenet::orderbook::protos::UnsubscribeResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getopenordersresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetOpenOrdersResponse*>(
      ::io::stakenet::orderbook::protos::GetOpenOrdersResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.gethistorictradesresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetHistoricTradesResponse*>(
      ::io::stakenet::orderbook::protos::GetHistoricTradesResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getbarspricesresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetBarsPricesResponse*>(
      ::io::stakenet::orderbook::protos::GetBarsPricesResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.placeorderresponse_ = const_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse*>(
      ::io::stakenet::orderbook::protos::PlaceOrderResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getopenorderbyidresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse*>(
      ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.cancelorderresponse_ = const_cast< ::io::stakenet::orderbook::protos::CancelOpenOrderResponse*>(
      ::io::stakenet::orderbook::protos::CancelOpenOrderResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.cancelmatchedorderresponse_ = const_cast< ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse*>(
      ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.sendordermessageresponse_ = const_cast< ::io::stakenet::orderbook::protos::SendOrderMessageResponse*>(
      ::io::stakenet::orderbook::protos::SendOrderMessageResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.cleantradingpairordersresponse_ = const_cast< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse*>(
      ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getlndpaymentinvoiceresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse*>(
      ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.generateinvoicetorentchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse*>(
      ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.rentchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::RentChannelResponse*>(
      ::io::stakenet::orderbook::protos::RentChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getchannelstatusresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetChannelStatusResponse*>(
      ::io::stakenet::orderbook::protos::GetChannelStatusResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getfeetorentchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse*>(
      ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.refundfeeresponse_ = const_cast< ::io::stakenet::orderbook::protos::RefundFeeResponse*>(
      ::io::stakenet::orderbook::protos::RefundFeeResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getrefundableamountresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetRefundableAmountResponse*>(
      ::io::stakenet::orderbook::protos::GetRefundableAmountResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getfeetoextendrentedchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse*>(
      ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.generateinvoicetoextendrentedchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse*>(
      ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.extendrentedchanneltimeresponse_ = const_cast< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse*>(
      ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.registerpublickeyresponse_ = const_cast< ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse*>(
      ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.registerpublicidentifierresponse_ = const_cast< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse*>(
      ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getconnextpaymentinformationresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse*>(
      ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.generatepaymenthashtorentchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse*>(
      ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.generatepaymenthashtoextendconnextrentedchannelresponse_ = const_cast< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse*>(
      ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.getconnextchannelcontractdeploymentfeeresponse_ = const_cast< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse*>(
      ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_CommandResponse_default_instance_.registerconnextchannelcontractdeploymentfeeresponse_ = const_cast< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse*>(
      ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse::internal_default_instance());
}
class Event_CommandResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::CommandFailed& commandfailed(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::PingResponse& pingresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetTradingPairsResponse& gettradingpairsresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::SubscribeResponse& subscriberesponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::UnsubscribeResponse& unsubscriberesponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetOpenOrdersResponse& getopenordersresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetHistoricTradesResponse& gethistorictradesresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetBarsPricesResponse& getbarspricesresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::PlaceOrderResponse& placeorderresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse& getopenorderbyidresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::CancelOpenOrderResponse& cancelorderresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse& cancelmatchedorderresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::SendOrderMessageResponse& sendordermessageresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse& cleantradingpairordersresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse& getlndpaymentinvoiceresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse& generateinvoicetorentchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::RentChannelResponse& rentchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetChannelStatusResponse& getchannelstatusresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse& getfeetorentchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::RefundFeeResponse& refundfeeresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetRefundableAmountResponse& getrefundableamountresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse& getfeetoextendrentedchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse& generateinvoicetoextendrentedchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse& extendrentedchanneltimeresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse& registerpublickeyresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse& registerpublicidentifierresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse& getconnextpaymentinformationresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse& generatepaymenthashtorentchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse& generatepaymenthashtoextendconnextrentedchannelresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse& getconnextchannelcontractdeploymentfeeresponse(const Event_CommandResponse* msg);
  static const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse& registerconnextchannelcontractdeploymentfeeresponse(const Event_CommandResponse* msg);
};

const ::io::stakenet::orderbook::protos::CommandFailed&
Event_CommandResponse::_Internal::commandfailed(const Event_CommandResponse* msg) {
  return *msg->value_.commandfailed_;
}
const ::io::stakenet::orderbook::protos::PingResponse&
Event_CommandResponse::_Internal::pingresponse(const Event_CommandResponse* msg) {
  return *msg->value_.pingresponse_;
}
const ::io::stakenet::orderbook::protos::GetTradingPairsResponse&
Event_CommandResponse::_Internal::gettradingpairsresponse(const Event_CommandResponse* msg) {
  return *msg->value_.gettradingpairsresponse_;
}
const ::io::stakenet::orderbook::protos::SubscribeResponse&
Event_CommandResponse::_Internal::subscriberesponse(const Event_CommandResponse* msg) {
  return *msg->value_.subscriberesponse_;
}
const ::io::stakenet::orderbook::protos::UnsubscribeResponse&
Event_CommandResponse::_Internal::unsubscriberesponse(const Event_CommandResponse* msg) {
  return *msg->value_.unsubscriberesponse_;
}
const ::io::stakenet::orderbook::protos::GetOpenOrdersResponse&
Event_CommandResponse::_Internal::getopenordersresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getopenordersresponse_;
}
const ::io::stakenet::orderbook::protos::GetHistoricTradesResponse&
Event_CommandResponse::_Internal::gethistorictradesresponse(const Event_CommandResponse* msg) {
  return *msg->value_.gethistorictradesresponse_;
}
const ::io::stakenet::orderbook::protos::GetBarsPricesResponse&
Event_CommandResponse::_Internal::getbarspricesresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getbarspricesresponse_;
}
const ::io::stakenet::orderbook::protos::PlaceOrderResponse&
Event_CommandResponse::_Internal::placeorderresponse(const Event_CommandResponse* msg) {
  return *msg->value_.placeorderresponse_;
}
const ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse&
Event_CommandResponse::_Internal::getopenorderbyidresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getopenorderbyidresponse_;
}
const ::io::stakenet::orderbook::protos::CancelOpenOrderResponse&
Event_CommandResponse::_Internal::cancelorderresponse(const Event_CommandResponse* msg) {
  return *msg->value_.cancelorderresponse_;
}
const ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse&
Event_CommandResponse::_Internal::cancelmatchedorderresponse(const Event_CommandResponse* msg) {
  return *msg->value_.cancelmatchedorderresponse_;
}
const ::io::stakenet::orderbook::protos::SendOrderMessageResponse&
Event_CommandResponse::_Internal::sendordermessageresponse(const Event_CommandResponse* msg) {
  return *msg->value_.sendordermessageresponse_;
}
const ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse&
Event_CommandResponse::_Internal::cleantradingpairordersresponse(const Event_CommandResponse* msg) {
  return *msg->value_.cleantradingpairordersresponse_;
}
const ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse&
Event_CommandResponse::_Internal::getlndpaymentinvoiceresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getlndpaymentinvoiceresponse_;
}
const ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse&
Event_CommandResponse::_Internal::generateinvoicetorentchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.generateinvoicetorentchannelresponse_;
}
const ::io::stakenet::orderbook::protos::RentChannelResponse&
Event_CommandResponse::_Internal::rentchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.rentchannelresponse_;
}
const ::io::stakenet::orderbook::protos::GetChannelStatusResponse&
Event_CommandResponse::_Internal::getchannelstatusresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getchannelstatusresponse_;
}
const ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse&
Event_CommandResponse::_Internal::getfeetorentchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getfeetorentchannelresponse_;
}
const ::io::stakenet::orderbook::protos::RefundFeeResponse&
Event_CommandResponse::_Internal::refundfeeresponse(const Event_CommandResponse* msg) {
  return *msg->value_.refundfeeresponse_;
}
const ::io::stakenet::orderbook::protos::GetRefundableAmountResponse&
Event_CommandResponse::_Internal::getrefundableamountresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getrefundableamountresponse_;
}
const ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse&
Event_CommandResponse::_Internal::getfeetoextendrentedchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getfeetoextendrentedchannelresponse_;
}
const ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse&
Event_CommandResponse::_Internal::generateinvoicetoextendrentedchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.generateinvoicetoextendrentedchannelresponse_;
}
const ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse&
Event_CommandResponse::_Internal::extendrentedchanneltimeresponse(const Event_CommandResponse* msg) {
  return *msg->value_.extendrentedchanneltimeresponse_;
}
const ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse&
Event_CommandResponse::_Internal::registerpublickeyresponse(const Event_CommandResponse* msg) {
  return *msg->value_.registerpublickeyresponse_;
}
const ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse&
Event_CommandResponse::_Internal::registerpublicidentifierresponse(const Event_CommandResponse* msg) {
  return *msg->value_.registerpublicidentifierresponse_;
}
const ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse&
Event_CommandResponse::_Internal::getconnextpaymentinformationresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getconnextpaymentinformationresponse_;
}
const ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse&
Event_CommandResponse::_Internal::generatepaymenthashtorentchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.generatepaymenthashtorentchannelresponse_;
}
const ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse&
Event_CommandResponse::_Internal::generatepaymenthashtoextendconnextrentedchannelresponse(const Event_CommandResponse* msg) {
  return *msg->value_.generatepaymenthashtoextendconnextrentedchannelresponse_;
}
const ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse&
Event_CommandResponse::_Internal::getconnextchannelcontractdeploymentfeeresponse(const Event_CommandResponse* msg) {
  return *msg->value_.getconnextchannelcontractdeploymentfeeresponse_;
}
const ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse&
Event_CommandResponse::_Internal::registerconnextchannelcontractdeploymentfeeresponse(const Event_CommandResponse* msg) {
  return *msg->value_.registerconnextchannelcontractdeploymentfeeresponse_;
}
void Event_CommandResponse::set_allocated_commandfailed(::io::stakenet::orderbook::protos::CommandFailed* commandfailed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (commandfailed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      commandfailed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commandfailed, submessage_arena);
    }
    set_has_commandfailed();
    value_.commandfailed_ = commandfailed;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.commandFailed)
}
void Event_CommandResponse::clear_commandfailed() {
  if (_internal_has_commandfailed()) {
    delete value_.commandfailed_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_pingresponse(::io::stakenet::orderbook::protos::PingResponse* pingresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (pingresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pingresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pingresponse, submessage_arena);
    }
    set_has_pingresponse();
    value_.pingresponse_ = pingresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.pingResponse)
}
void Event_CommandResponse::clear_pingresponse() {
  if (_internal_has_pingresponse()) {
    delete value_.pingresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_gettradingpairsresponse(::io::stakenet::orderbook::protos::GetTradingPairsResponse* gettradingpairsresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gettradingpairsresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gettradingpairsresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gettradingpairsresponse, submessage_arena);
    }
    set_has_gettradingpairsresponse();
    value_.gettradingpairsresponse_ = gettradingpairsresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getTradingPairsResponse)
}
void Event_CommandResponse::clear_gettradingpairsresponse() {
  if (_internal_has_gettradingpairsresponse()) {
    delete value_.gettradingpairsresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_subscriberesponse(::io::stakenet::orderbook::protos::SubscribeResponse* subscriberesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (subscriberesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      subscriberesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, subscriberesponse, submessage_arena);
    }
    set_has_subscriberesponse();
    value_.subscriberesponse_ = subscriberesponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.subscribeResponse)
}
void Event_CommandResponse::clear_subscriberesponse() {
  if (_internal_has_subscriberesponse()) {
    delete value_.subscriberesponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_unsubscriberesponse(::io::stakenet::orderbook::protos::UnsubscribeResponse* unsubscriberesponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (unsubscriberesponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      unsubscriberesponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, unsubscriberesponse, submessage_arena);
    }
    set_has_unsubscriberesponse();
    value_.unsubscriberesponse_ = unsubscriberesponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.unsubscribeResponse)
}
void Event_CommandResponse::clear_unsubscriberesponse() {
  if (_internal_has_unsubscriberesponse()) {
    delete value_.unsubscriberesponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getopenordersresponse(::io::stakenet::orderbook::protos::GetOpenOrdersResponse* getopenordersresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getopenordersresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getopenordersresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getopenordersresponse, submessage_arena);
    }
    set_has_getopenordersresponse();
    value_.getopenordersresponse_ = getopenordersresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getOpenOrdersResponse)
}
void Event_CommandResponse::clear_getopenordersresponse() {
  if (_internal_has_getopenordersresponse()) {
    delete value_.getopenordersresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_gethistorictradesresponse(::io::stakenet::orderbook::protos::GetHistoricTradesResponse* gethistorictradesresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (gethistorictradesresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gethistorictradesresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethistorictradesresponse, submessage_arena);
    }
    set_has_gethistorictradesresponse();
    value_.gethistorictradesresponse_ = gethistorictradesresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getHistoricTradesResponse)
}
void Event_CommandResponse::clear_gethistorictradesresponse() {
  if (_internal_has_gethistorictradesresponse()) {
    delete value_.gethistorictradesresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getbarspricesresponse(::io::stakenet::orderbook::protos::GetBarsPricesResponse* getbarspricesresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getbarspricesresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getbarspricesresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getbarspricesresponse, submessage_arena);
    }
    set_has_getbarspricesresponse();
    value_.getbarspricesresponse_ = getbarspricesresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getBarsPricesResponse)
}
void Event_CommandResponse::clear_getbarspricesresponse() {
  if (_internal_has_getbarspricesresponse()) {
    delete value_.getbarspricesresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_placeorderresponse(::io::stakenet::orderbook::protos::PlaceOrderResponse* placeorderresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (placeorderresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      placeorderresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placeorderresponse, submessage_arena);
    }
    set_has_placeorderresponse();
    value_.placeorderresponse_ = placeorderresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.placeOrderResponse)
}
void Event_CommandResponse::clear_placeorderresponse() {
  if (_internal_has_placeorderresponse()) {
    delete value_.placeorderresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getopenorderbyidresponse(::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse* getopenorderbyidresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getopenorderbyidresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getopenorderbyidresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getopenorderbyidresponse, submessage_arena);
    }
    set_has_getopenorderbyidresponse();
    value_.getopenorderbyidresponse_ = getopenorderbyidresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getOpenOrderByIdResponse)
}
void Event_CommandResponse::clear_getopenorderbyidresponse() {
  if (_internal_has_getopenorderbyidresponse()) {
    delete value_.getopenorderbyidresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_cancelorderresponse(::io::stakenet::orderbook::protos::CancelOpenOrderResponse* cancelorderresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cancelorderresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancelorderresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelorderresponse, submessage_arena);
    }
    set_has_cancelorderresponse();
    value_.cancelorderresponse_ = cancelorderresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.cancelOrderResponse)
}
void Event_CommandResponse::clear_cancelorderresponse() {
  if (_internal_has_cancelorderresponse()) {
    delete value_.cancelorderresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_cancelmatchedorderresponse(::io::stakenet::orderbook::protos::CancelMatchedOrderResponse* cancelmatchedorderresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cancelmatchedorderresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cancelmatchedorderresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancelmatchedorderresponse, submessage_arena);
    }
    set_has_cancelmatchedorderresponse();
    value_.cancelmatchedorderresponse_ = cancelmatchedorderresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.cancelMatchedOrderResponse)
}
void Event_CommandResponse::clear_cancelmatchedorderresponse() {
  if (_internal_has_cancelmatchedorderresponse()) {
    delete value_.cancelmatchedorderresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_sendordermessageresponse(::io::stakenet::orderbook::protos::SendOrderMessageResponse* sendordermessageresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (sendordermessageresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sendordermessageresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sendordermessageresponse, submessage_arena);
    }
    set_has_sendordermessageresponse();
    value_.sendordermessageresponse_ = sendordermessageresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.sendOrderMessageResponse)
}
void Event_CommandResponse::clear_sendordermessageresponse() {
  if (_internal_has_sendordermessageresponse()) {
    delete value_.sendordermessageresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_cleantradingpairordersresponse(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse* cleantradingpairordersresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (cleantradingpairordersresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cleantradingpairordersresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleantradingpairordersresponse, submessage_arena);
    }
    set_has_cleantradingpairordersresponse();
    value_.cleantradingpairordersresponse_ = cleantradingpairordersresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.cleanTradingPairOrdersResponse)
}
void Event_CommandResponse::clear_cleantradingpairordersresponse() {
  if (_internal_has_cleantradingpairordersresponse()) {
    delete value_.cleantradingpairordersresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getlndpaymentinvoiceresponse(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse* getlndpaymentinvoiceresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getlndpaymentinvoiceresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getlndpaymentinvoiceresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getlndpaymentinvoiceresponse, submessage_arena);
    }
    set_has_getlndpaymentinvoiceresponse();
    value_.getlndpaymentinvoiceresponse_ = getlndpaymentinvoiceresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getLndPaymentInvoiceResponse)
}
void Event_CommandResponse::clear_getlndpaymentinvoiceresponse() {
  if (_internal_has_getlndpaymentinvoiceresponse()) {
    delete value_.getlndpaymentinvoiceresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_generateinvoicetorentchannelresponse(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse* generateinvoicetorentchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generateinvoicetorentchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generateinvoicetorentchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generateinvoicetorentchannelresponse, submessage_arena);
    }
    set_has_generateinvoicetorentchannelresponse();
    value_.generateinvoicetorentchannelresponse_ = generateinvoicetorentchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.generateInvoiceToRentChannelResponse)
}
void Event_CommandResponse::clear_generateinvoicetorentchannelresponse() {
  if (_internal_has_generateinvoicetorentchannelresponse()) {
    delete value_.generateinvoicetorentchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_rentchannelresponse(::io::stakenet::orderbook::protos::RentChannelResponse* rentchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (rentchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rentchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rentchannelresponse, submessage_arena);
    }
    set_has_rentchannelresponse();
    value_.rentchannelresponse_ = rentchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.rentChannelResponse)
}
void Event_CommandResponse::clear_rentchannelresponse() {
  if (_internal_has_rentchannelresponse()) {
    delete value_.rentchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getchannelstatusresponse(::io::stakenet::orderbook::protos::GetChannelStatusResponse* getchannelstatusresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getchannelstatusresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getchannelstatusresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getchannelstatusresponse, submessage_arena);
    }
    set_has_getchannelstatusresponse();
    value_.getchannelstatusresponse_ = getchannelstatusresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getChannelStatusResponse)
}
void Event_CommandResponse::clear_getchannelstatusresponse() {
  if (_internal_has_getchannelstatusresponse()) {
    delete value_.getchannelstatusresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getfeetorentchannelresponse(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse* getfeetorentchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getfeetorentchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getfeetorentchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfeetorentchannelresponse, submessage_arena);
    }
    set_has_getfeetorentchannelresponse();
    value_.getfeetorentchannelresponse_ = getfeetorentchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getFeeToRentChannelResponse)
}
void Event_CommandResponse::clear_getfeetorentchannelresponse() {
  if (_internal_has_getfeetorentchannelresponse()) {
    delete value_.getfeetorentchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_refundfeeresponse(::io::stakenet::orderbook::protos::RefundFeeResponse* refundfeeresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (refundfeeresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      refundfeeresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, refundfeeresponse, submessage_arena);
    }
    set_has_refundfeeresponse();
    value_.refundfeeresponse_ = refundfeeresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.refundFeeResponse)
}
void Event_CommandResponse::clear_refundfeeresponse() {
  if (_internal_has_refundfeeresponse()) {
    delete value_.refundfeeresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getrefundableamountresponse(::io::stakenet::orderbook::protos::GetRefundableAmountResponse* getrefundableamountresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getrefundableamountresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getrefundableamountresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getrefundableamountresponse, submessage_arena);
    }
    set_has_getrefundableamountresponse();
    value_.getrefundableamountresponse_ = getrefundableamountresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getRefundableAmountResponse)
}
void Event_CommandResponse::clear_getrefundableamountresponse() {
  if (_internal_has_getrefundableamountresponse()) {
    delete value_.getrefundableamountresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getfeetoextendrentedchannelresponse(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse* getfeetoextendrentedchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getfeetoextendrentedchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getfeetoextendrentedchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getfeetoextendrentedchannelresponse, submessage_arena);
    }
    set_has_getfeetoextendrentedchannelresponse();
    value_.getfeetoextendrentedchannelresponse_ = getfeetoextendrentedchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getFeeToExtendRentedChannelResponse)
}
void Event_CommandResponse::clear_getfeetoextendrentedchannelresponse() {
  if (_internal_has_getfeetoextendrentedchannelresponse()) {
    delete value_.getfeetoextendrentedchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_generateinvoicetoextendrentedchannelresponse(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse* generateinvoicetoextendrentedchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generateinvoicetoextendrentedchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generateinvoicetoextendrentedchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generateinvoicetoextendrentedchannelresponse, submessage_arena);
    }
    set_has_generateinvoicetoextendrentedchannelresponse();
    value_.generateinvoicetoextendrentedchannelresponse_ = generateinvoicetoextendrentedchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.generateInvoiceToExtendRentedChannelResponse)
}
void Event_CommandResponse::clear_generateinvoicetoextendrentedchannelresponse() {
  if (_internal_has_generateinvoicetoextendrentedchannelresponse()) {
    delete value_.generateinvoicetoextendrentedchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_extendrentedchanneltimeresponse(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse* extendrentedchanneltimeresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (extendrentedchanneltimeresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      extendrentedchanneltimeresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extendrentedchanneltimeresponse, submessage_arena);
    }
    set_has_extendrentedchanneltimeresponse();
    value_.extendrentedchanneltimeresponse_ = extendrentedchanneltimeresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.extendRentedChannelTimeResponse)
}
void Event_CommandResponse::clear_extendrentedchanneltimeresponse() {
  if (_internal_has_extendrentedchanneltimeresponse()) {
    delete value_.extendrentedchanneltimeresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_registerpublickeyresponse(::io::stakenet::orderbook::protos::RegisterPublicKeyResponse* registerpublickeyresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerpublickeyresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerpublickeyresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerpublickeyresponse, submessage_arena);
    }
    set_has_registerpublickeyresponse();
    value_.registerpublickeyresponse_ = registerpublickeyresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.registerPublicKeyResponse)
}
void Event_CommandResponse::clear_registerpublickeyresponse() {
  if (_internal_has_registerpublickeyresponse()) {
    delete value_.registerpublickeyresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_registerpublicidentifierresponse(::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse* registerpublicidentifierresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerpublicidentifierresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerpublicidentifierresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerpublicidentifierresponse, submessage_arena);
    }
    set_has_registerpublicidentifierresponse();
    value_.registerpublicidentifierresponse_ = registerpublicidentifierresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.registerPublicIdentifierResponse)
}
void Event_CommandResponse::clear_registerpublicidentifierresponse() {
  if (_internal_has_registerpublicidentifierresponse()) {
    delete value_.registerpublicidentifierresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getconnextpaymentinformationresponse(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse* getconnextpaymentinformationresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getconnextpaymentinformationresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getconnextpaymentinformationresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getconnextpaymentinformationresponse, submessage_arena);
    }
    set_has_getconnextpaymentinformationresponse();
    value_.getconnextpaymentinformationresponse_ = getconnextpaymentinformationresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getConnextPaymentInformationResponse)
}
void Event_CommandResponse::clear_getconnextpaymentinformationresponse() {
  if (_internal_has_getconnextpaymentinformationresponse()) {
    delete value_.getconnextpaymentinformationresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_generatepaymenthashtorentchannelresponse(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse* generatepaymenthashtorentchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generatepaymenthashtorentchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generatepaymenthashtorentchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generatepaymenthashtorentchannelresponse, submessage_arena);
    }
    set_has_generatepaymenthashtorentchannelresponse();
    value_.generatepaymenthashtorentchannelresponse_ = generatepaymenthashtorentchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.generatePaymentHashToRentChannelResponse)
}
void Event_CommandResponse::clear_generatepaymenthashtorentchannelresponse() {
  if (_internal_has_generatepaymenthashtorentchannelresponse()) {
    delete value_.generatepaymenthashtorentchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_generatepaymenthashtoextendconnextrentedchannelresponse(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse* generatepaymenthashtoextendconnextrentedchannelresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (generatepaymenthashtoextendconnextrentedchannelresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generatepaymenthashtoextendconnextrentedchannelresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generatepaymenthashtoextendconnextrentedchannelresponse, submessage_arena);
    }
    set_has_generatepaymenthashtoextendconnextrentedchannelresponse();
    value_.generatepaymenthashtoextendconnextrentedchannelresponse_ = generatepaymenthashtoextendconnextrentedchannelresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.generatePaymentHashToExtendConnextRentedChannelResponse)
}
void Event_CommandResponse::clear_generatepaymenthashtoextendconnextrentedchannelresponse() {
  if (_internal_has_generatepaymenthashtoextendconnextrentedchannelresponse()) {
    delete value_.generatepaymenthashtoextendconnextrentedchannelresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_getconnextchannelcontractdeploymentfeeresponse(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse* getconnextchannelcontractdeploymentfeeresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (getconnextchannelcontractdeploymentfeeresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getconnextchannelcontractdeploymentfeeresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getconnextchannelcontractdeploymentfeeresponse, submessage_arena);
    }
    set_has_getconnextchannelcontractdeploymentfeeresponse();
    value_.getconnextchannelcontractdeploymentfeeresponse_ = getconnextchannelcontractdeploymentfeeresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.getConnextChannelContractDeploymentFeeResponse)
}
void Event_CommandResponse::clear_getconnextchannelcontractdeploymentfeeresponse() {
  if (_internal_has_getconnextchannelcontractdeploymentfeeresponse()) {
    delete value_.getconnextchannelcontractdeploymentfeeresponse_;
    clear_has_value();
  }
}
void Event_CommandResponse::set_allocated_registerconnextchannelcontractdeploymentfeeresponse(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse* registerconnextchannelcontractdeploymentfeeresponse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (registerconnextchannelcontractdeploymentfeeresponse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      registerconnextchannelcontractdeploymentfeeresponse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, registerconnextchannelcontractdeploymentfeeresponse, submessage_arena);
    }
    set_has_registerconnextchannelcontractdeploymentfeeresponse();
    value_.registerconnextchannelcontractdeploymentfeeresponse_ = registerconnextchannelcontractdeploymentfeeresponse;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.CommandResponse.registerConnextChannelContractDeploymentFeeResponse)
}
void Event_CommandResponse::clear_registerconnextchannelcontractdeploymentfeeresponse() {
  if (_internal_has_registerconnextchannelcontractdeploymentfeeresponse()) {
    delete value_.registerconnextchannelcontractdeploymentfeeresponse_;
    clear_has_value();
  }
}
Event_CommandResponse::Event_CommandResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Event.CommandResponse)
}
Event_CommandResponse::Event_CommandResponse(const Event_CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientmessageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clientmessageid().empty()) {
    clientmessageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientmessageid_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kCommandFailed: {
      _internal_mutable_commandfailed()->::io::stakenet::orderbook::protos::CommandFailed::MergeFrom(from._internal_commandfailed());
      break;
    }
    case kPingResponse: {
      _internal_mutable_pingresponse()->::io::stakenet::orderbook::protos::PingResponse::MergeFrom(from._internal_pingresponse());
      break;
    }
    case kGetTradingPairsResponse: {
      _internal_mutable_gettradingpairsresponse()->::io::stakenet::orderbook::protos::GetTradingPairsResponse::MergeFrom(from._internal_gettradingpairsresponse());
      break;
    }
    case kSubscribeResponse: {
      _internal_mutable_subscriberesponse()->::io::stakenet::orderbook::protos::SubscribeResponse::MergeFrom(from._internal_subscriberesponse());
      break;
    }
    case kUnsubscribeResponse: {
      _internal_mutable_unsubscriberesponse()->::io::stakenet::orderbook::protos::UnsubscribeResponse::MergeFrom(from._internal_unsubscriberesponse());
      break;
    }
    case kGetOpenOrdersResponse: {
      _internal_mutable_getopenordersresponse()->::io::stakenet::orderbook::protos::GetOpenOrdersResponse::MergeFrom(from._internal_getopenordersresponse());
      break;
    }
    case kGetHistoricTradesResponse: {
      _internal_mutable_gethistorictradesresponse()->::io::stakenet::orderbook::protos::GetHistoricTradesResponse::MergeFrom(from._internal_gethistorictradesresponse());
      break;
    }
    case kGetBarsPricesResponse: {
      _internal_mutable_getbarspricesresponse()->::io::stakenet::orderbook::protos::GetBarsPricesResponse::MergeFrom(from._internal_getbarspricesresponse());
      break;
    }
    case kPlaceOrderResponse: {
      _internal_mutable_placeorderresponse()->::io::stakenet::orderbook::protos::PlaceOrderResponse::MergeFrom(from._internal_placeorderresponse());
      break;
    }
    case kGetOpenOrderByIdResponse: {
      _internal_mutable_getopenorderbyidresponse()->::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse::MergeFrom(from._internal_getopenorderbyidresponse());
      break;
    }
    case kCancelOrderResponse: {
      _internal_mutable_cancelorderresponse()->::io::stakenet::orderbook::protos::CancelOpenOrderResponse::MergeFrom(from._internal_cancelorderresponse());
      break;
    }
    case kCancelMatchedOrderResponse: {
      _internal_mutable_cancelmatchedorderresponse()->::io::stakenet::orderbook::protos::CancelMatchedOrderResponse::MergeFrom(from._internal_cancelmatchedorderresponse());
      break;
    }
    case kSendOrderMessageResponse: {
      _internal_mutable_sendordermessageresponse()->::io::stakenet::orderbook::protos::SendOrderMessageResponse::MergeFrom(from._internal_sendordermessageresponse());
      break;
    }
    case kCleanTradingPairOrdersResponse: {
      _internal_mutable_cleantradingpairordersresponse()->::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse::MergeFrom(from._internal_cleantradingpairordersresponse());
      break;
    }
    case kGetLndPaymentInvoiceResponse: {
      _internal_mutable_getlndpaymentinvoiceresponse()->::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse::MergeFrom(from._internal_getlndpaymentinvoiceresponse());
      break;
    }
    case kGenerateInvoiceToRentChannelResponse: {
      _internal_mutable_generateinvoicetorentchannelresponse()->::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse::MergeFrom(from._internal_generateinvoicetorentchannelresponse());
      break;
    }
    case kRentChannelResponse: {
      _internal_mutable_rentchannelresponse()->::io::stakenet::orderbook::protos::RentChannelResponse::MergeFrom(from._internal_rentchannelresponse());
      break;
    }
    case kGetChannelStatusResponse: {
      _internal_mutable_getchannelstatusresponse()->::io::stakenet::orderbook::protos::GetChannelStatusResponse::MergeFrom(from._internal_getchannelstatusresponse());
      break;
    }
    case kGetFeeToRentChannelResponse: {
      _internal_mutable_getfeetorentchannelresponse()->::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse::MergeFrom(from._internal_getfeetorentchannelresponse());
      break;
    }
    case kRefundFeeResponse: {
      _internal_mutable_refundfeeresponse()->::io::stakenet::orderbook::protos::RefundFeeResponse::MergeFrom(from._internal_refundfeeresponse());
      break;
    }
    case kGetRefundableAmountResponse: {
      _internal_mutable_getrefundableamountresponse()->::io::stakenet::orderbook::protos::GetRefundableAmountResponse::MergeFrom(from._internal_getrefundableamountresponse());
      break;
    }
    case kGetFeeToExtendRentedChannelResponse: {
      _internal_mutable_getfeetoextendrentedchannelresponse()->::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse::MergeFrom(from._internal_getfeetoextendrentedchannelresponse());
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelResponse: {
      _internal_mutable_generateinvoicetoextendrentedchannelresponse()->::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse::MergeFrom(from._internal_generateinvoicetoextendrentedchannelresponse());
      break;
    }
    case kExtendRentedChannelTimeResponse: {
      _internal_mutable_extendrentedchanneltimeresponse()->::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse::MergeFrom(from._internal_extendrentedchanneltimeresponse());
      break;
    }
    case kRegisterPublicKeyResponse: {
      _internal_mutable_registerpublickeyresponse()->::io::stakenet::orderbook::protos::RegisterPublicKeyResponse::MergeFrom(from._internal_registerpublickeyresponse());
      break;
    }
    case kRegisterPublicIdentifierResponse: {
      _internal_mutable_registerpublicidentifierresponse()->::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse::MergeFrom(from._internal_registerpublicidentifierresponse());
      break;
    }
    case kGetConnextPaymentInformationResponse: {
      _internal_mutable_getconnextpaymentinformationresponse()->::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse::MergeFrom(from._internal_getconnextpaymentinformationresponse());
      break;
    }
    case kGeneratePaymentHashToRentChannelResponse: {
      _internal_mutable_generatepaymenthashtorentchannelresponse()->::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse::MergeFrom(from._internal_generatepaymenthashtorentchannelresponse());
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelResponse: {
      _internal_mutable_generatepaymenthashtoextendconnextrentedchannelresponse()->::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse::MergeFrom(from._internal_generatepaymenthashtoextendconnextrentedchannelresponse());
      break;
    }
    case kGetConnextChannelContractDeploymentFeeResponse: {
      _internal_mutable_getconnextchannelcontractdeploymentfeeresponse()->::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse::MergeFrom(from._internal_getconnextchannelcontractdeploymentfeeresponse());
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeResponse: {
      _internal_mutable_registerconnextchannelcontractdeploymentfeeresponse()->::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse::MergeFrom(from._internal_registerconnextchannelcontractdeploymentfeeresponse());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Event.CommandResponse)
}

void Event_CommandResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto.base);
  clientmessageid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

Event_CommandResponse::~Event_CommandResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Event.CommandResponse)
  SharedDtor();
}

void Event_CommandResponse::SharedDtor() {
  clientmessageid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void Event_CommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_CommandResponse& Event_CommandResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_CommandResponse_stakenet_2forderbook_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Event_CommandResponse::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  switch (value_case()) {
    case kCommandFailed: {
      delete value_.commandfailed_;
      break;
    }
    case kPingResponse: {
      delete value_.pingresponse_;
      break;
    }
    case kGetTradingPairsResponse: {
      delete value_.gettradingpairsresponse_;
      break;
    }
    case kSubscribeResponse: {
      delete value_.subscriberesponse_;
      break;
    }
    case kUnsubscribeResponse: {
      delete value_.unsubscriberesponse_;
      break;
    }
    case kGetOpenOrdersResponse: {
      delete value_.getopenordersresponse_;
      break;
    }
    case kGetHistoricTradesResponse: {
      delete value_.gethistorictradesresponse_;
      break;
    }
    case kGetBarsPricesResponse: {
      delete value_.getbarspricesresponse_;
      break;
    }
    case kPlaceOrderResponse: {
      delete value_.placeorderresponse_;
      break;
    }
    case kGetOpenOrderByIdResponse: {
      delete value_.getopenorderbyidresponse_;
      break;
    }
    case kCancelOrderResponse: {
      delete value_.cancelorderresponse_;
      break;
    }
    case kCancelMatchedOrderResponse: {
      delete value_.cancelmatchedorderresponse_;
      break;
    }
    case kSendOrderMessageResponse: {
      delete value_.sendordermessageresponse_;
      break;
    }
    case kCleanTradingPairOrdersResponse: {
      delete value_.cleantradingpairordersresponse_;
      break;
    }
    case kGetLndPaymentInvoiceResponse: {
      delete value_.getlndpaymentinvoiceresponse_;
      break;
    }
    case kGenerateInvoiceToRentChannelResponse: {
      delete value_.generateinvoicetorentchannelresponse_;
      break;
    }
    case kRentChannelResponse: {
      delete value_.rentchannelresponse_;
      break;
    }
    case kGetChannelStatusResponse: {
      delete value_.getchannelstatusresponse_;
      break;
    }
    case kGetFeeToRentChannelResponse: {
      delete value_.getfeetorentchannelresponse_;
      break;
    }
    case kRefundFeeResponse: {
      delete value_.refundfeeresponse_;
      break;
    }
    case kGetRefundableAmountResponse: {
      delete value_.getrefundableamountresponse_;
      break;
    }
    case kGetFeeToExtendRentedChannelResponse: {
      delete value_.getfeetoextendrentedchannelresponse_;
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelResponse: {
      delete value_.generateinvoicetoextendrentedchannelresponse_;
      break;
    }
    case kExtendRentedChannelTimeResponse: {
      delete value_.extendrentedchanneltimeresponse_;
      break;
    }
    case kRegisterPublicKeyResponse: {
      delete value_.registerpublickeyresponse_;
      break;
    }
    case kRegisterPublicIdentifierResponse: {
      delete value_.registerpublicidentifierresponse_;
      break;
    }
    case kGetConnextPaymentInformationResponse: {
      delete value_.getconnextpaymentinformationresponse_;
      break;
    }
    case kGeneratePaymentHashToRentChannelResponse: {
      delete value_.generatepaymenthashtorentchannelresponse_;
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelResponse: {
      delete value_.generatepaymenthashtoextendconnextrentedchannelresponse_;
      break;
    }
    case kGetConnextChannelContractDeploymentFeeResponse: {
      delete value_.getconnextchannelcontractdeploymentfeeresponse_;
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeResponse: {
      delete value_.registerconnextchannelcontractdeploymentfeeresponse_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Event_CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clientmessageid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_value();
  _internal_metadata_.Clear();
}

const char* Event_CommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string clientMessageId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_clientmessageid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Event.CommandResponse.clientMessageId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CommandFailed commandFailed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commandfailed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PingResponse pingResponse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pingresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetTradingPairsResponse getTradingPairsResponse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_gettradingpairsresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SubscribeResponse subscribeResponse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscriberesponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.UnsubscribeResponse unsubscribeResponse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_unsubscriberesponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetOpenOrdersResponse getOpenOrdersResponse = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_getopenordersresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetHistoricTradesResponse getHistoricTradesResponse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_gethistorictradesresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetBarsPricesResponse getBarsPricesResponse = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_getbarspricesresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PlaceOrderResponse placeOrderResponse = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_placeorderresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetOpenOrderByIdResponse getOpenOrderByIdResponse = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_getopenorderbyidresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CancelOpenOrderResponse cancelOrderResponse = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelorderresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CancelMatchedOrderResponse cancelMatchedOrderResponse = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancelmatchedorderresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SendOrderMessageResponse sendOrderMessageResponse = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_sendordermessageresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse cleanTradingPairOrdersResponse = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleantradingpairordersresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse getLndPaymentInvoiceResponse = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_getlndpaymentinvoiceresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse generateInvoiceToRentChannelResponse = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_generateinvoicetorentchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RentChannelResponse rentChannelResponse = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_rentchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetChannelStatusResponse getChannelStatusResponse = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_getchannelstatusresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetFeeToRentChannelResponse getFeeToRentChannelResponse = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfeetorentchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RefundFeeResponse refundFeeResponse = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_refundfeeresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetRefundableAmountResponse getRefundableAmountResponse = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_getrefundableamountresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse getFeeToExtendRentedChannelResponse = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_getfeetoextendrentedchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse generateInvoiceToExtendRentedChannelResponse = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_generateinvoicetoextendrentedchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse extendRentedChannelTimeResponse = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_extendrentedchanneltimeresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterPublicKeyResponse registerPublicKeyResponse = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerpublickeyresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse registerPublicIdentifierResponse = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerpublicidentifierresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse getConnextPaymentInformationResponse = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_getconnextpaymentinformationresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse generatePaymentHashToRentChannelResponse = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_generatepaymenthashtorentchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse generatePaymentHashToExtendConnextRentedChannelResponse = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_generatepaymenthashtoextendconnextrentedchannelresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse getConnextChannelContractDeploymentFeeResponse = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_getconnextchannelcontractdeploymentfeeresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse registerConnextChannelContractDeploymentFeeResponse = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_registerconnextchannelcontractdeploymentfeeresponse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_CommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientMessageId = 1;
  if (this->clientmessageid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clientmessageid().data(), static_cast<int>(this->_internal_clientmessageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Event.CommandResponse.clientMessageId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_clientmessageid(), target);
  }

  // .io.stakenet.orderbook.protos.CommandFailed commandFailed = 2;
  if (_internal_has_commandfailed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::commandfailed(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.PingResponse pingResponse = 3;
  if (_internal_has_pingresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pingresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetTradingPairsResponse getTradingPairsResponse = 4;
  if (_internal_has_gettradingpairsresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::gettradingpairsresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SubscribeResponse subscribeResponse = 5;
  if (_internal_has_subscriberesponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::subscriberesponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.UnsubscribeResponse unsubscribeResponse = 6;
  if (_internal_has_unsubscriberesponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::unsubscriberesponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetOpenOrdersResponse getOpenOrdersResponse = 7;
  if (_internal_has_getopenordersresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::getopenordersresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetHistoricTradesResponse getHistoricTradesResponse = 8;
  if (_internal_has_gethistorictradesresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::gethistorictradesresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetBarsPricesResponse getBarsPricesResponse = 9;
  if (_internal_has_getbarspricesresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::getbarspricesresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.PlaceOrderResponse placeOrderResponse = 10;
  if (_internal_has_placeorderresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::placeorderresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetOpenOrderByIdResponse getOpenOrderByIdResponse = 11;
  if (_internal_has_getopenorderbyidresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::getopenorderbyidresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CancelOpenOrderResponse cancelOrderResponse = 12;
  if (_internal_has_cancelorderresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::cancelorderresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CancelMatchedOrderResponse cancelMatchedOrderResponse = 13;
  if (_internal_has_cancelmatchedorderresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cancelmatchedorderresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SendOrderMessageResponse sendOrderMessageResponse = 14;
  if (_internal_has_sendordermessageresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::sendordermessageresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse cleanTradingPairOrdersResponse = 15;
  if (_internal_has_cleantradingpairordersresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::cleantradingpairordersresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse getLndPaymentInvoiceResponse = 16;
  if (_internal_has_getlndpaymentinvoiceresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::getlndpaymentinvoiceresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse generateInvoiceToRentChannelResponse = 17;
  if (_internal_has_generateinvoicetorentchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::generateinvoicetorentchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RentChannelResponse rentChannelResponse = 18;
  if (_internal_has_rentchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::rentchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetChannelStatusResponse getChannelStatusResponse = 19;
  if (_internal_has_getchannelstatusresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::getchannelstatusresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetFeeToRentChannelResponse getFeeToRentChannelResponse = 20;
  if (_internal_has_getfeetorentchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::getfeetorentchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RefundFeeResponse refundFeeResponse = 21;
  if (_internal_has_refundfeeresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::refundfeeresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetRefundableAmountResponse getRefundableAmountResponse = 22;
  if (_internal_has_getrefundableamountresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::getrefundableamountresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse getFeeToExtendRentedChannelResponse = 23;
  if (_internal_has_getfeetoextendrentedchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::getfeetoextendrentedchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse generateInvoiceToExtendRentedChannelResponse = 24;
  if (_internal_has_generateinvoicetoextendrentedchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::generateinvoicetoextendrentedchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse extendRentedChannelTimeResponse = 25;
  if (_internal_has_extendrentedchanneltimeresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::extendrentedchanneltimeresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterPublicKeyResponse registerPublicKeyResponse = 26;
  if (_internal_has_registerpublickeyresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::registerpublickeyresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse registerPublicIdentifierResponse = 27;
  if (_internal_has_registerpublicidentifierresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::registerpublicidentifierresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse getConnextPaymentInformationResponse = 28;
  if (_internal_has_getconnextpaymentinformationresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::getconnextpaymentinformationresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse generatePaymentHashToRentChannelResponse = 29;
  if (_internal_has_generatepaymenthashtorentchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::generatepaymenthashtorentchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse generatePaymentHashToExtendConnextRentedChannelResponse = 30;
  if (_internal_has_generatepaymenthashtoextendconnextrentedchannelresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::generatepaymenthashtoextendconnextrentedchannelresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse getConnextChannelContractDeploymentFeeResponse = 31;
  if (_internal_has_getconnextchannelcontractdeploymentfeeresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::getconnextchannelcontractdeploymentfeeresponse(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse registerConnextChannelContractDeploymentFeeResponse = 32;
  if (_internal_has_registerconnextchannelcontractdeploymentfeeresponse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::registerconnextchannelcontractdeploymentfeeresponse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Event.CommandResponse)
  return target;
}

size_t Event_CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string clientMessageId = 1;
  if (this->clientmessageid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientmessageid());
  }

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.CommandFailed commandFailed = 2;
    case kCommandFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.commandfailed_);
      break;
    }
    // .io.stakenet.orderbook.protos.PingResponse pingResponse = 3;
    case kPingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.pingresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetTradingPairsResponse getTradingPairsResponse = 4;
    case kGetTradingPairsResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.gettradingpairsresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.SubscribeResponse subscribeResponse = 5;
    case kSubscribeResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.subscriberesponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.UnsubscribeResponse unsubscribeResponse = 6;
    case kUnsubscribeResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.unsubscriberesponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetOpenOrdersResponse getOpenOrdersResponse = 7;
    case kGetOpenOrdersResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getopenordersresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetHistoricTradesResponse getHistoricTradesResponse = 8;
    case kGetHistoricTradesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.gethistorictradesresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetBarsPricesResponse getBarsPricesResponse = 9;
    case kGetBarsPricesResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getbarspricesresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.PlaceOrderResponse placeOrderResponse = 10;
    case kPlaceOrderResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.placeorderresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetOpenOrderByIdResponse getOpenOrderByIdResponse = 11;
    case kGetOpenOrderByIdResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getopenorderbyidresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.CancelOpenOrderResponse cancelOrderResponse = 12;
    case kCancelOrderResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cancelorderresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.CancelMatchedOrderResponse cancelMatchedOrderResponse = 13;
    case kCancelMatchedOrderResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cancelmatchedorderresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.SendOrderMessageResponse sendOrderMessageResponse = 14;
    case kSendOrderMessageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.sendordermessageresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse cleanTradingPairOrdersResponse = 15;
    case kCleanTradingPairOrdersResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.cleantradingpairordersresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse getLndPaymentInvoiceResponse = 16;
    case kGetLndPaymentInvoiceResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getlndpaymentinvoiceresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse generateInvoiceToRentChannelResponse = 17;
    case kGenerateInvoiceToRentChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generateinvoicetorentchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.RentChannelResponse rentChannelResponse = 18;
    case kRentChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.rentchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetChannelStatusResponse getChannelStatusResponse = 19;
    case kGetChannelStatusResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getchannelstatusresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetFeeToRentChannelResponse getFeeToRentChannelResponse = 20;
    case kGetFeeToRentChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getfeetorentchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.RefundFeeResponse refundFeeResponse = 21;
    case kRefundFeeResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.refundfeeresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetRefundableAmountResponse getRefundableAmountResponse = 22;
    case kGetRefundableAmountResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getrefundableamountresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse getFeeToExtendRentedChannelResponse = 23;
    case kGetFeeToExtendRentedChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getfeetoextendrentedchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse generateInvoiceToExtendRentedChannelResponse = 24;
    case kGenerateInvoiceToExtendRentedChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generateinvoicetoextendrentedchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse extendRentedChannelTimeResponse = 25;
    case kExtendRentedChannelTimeResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.extendrentedchanneltimeresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterPublicKeyResponse registerPublicKeyResponse = 26;
    case kRegisterPublicKeyResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerpublickeyresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse registerPublicIdentifierResponse = 27;
    case kRegisterPublicIdentifierResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerpublicidentifierresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse getConnextPaymentInformationResponse = 28;
    case kGetConnextPaymentInformationResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getconnextpaymentinformationresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse generatePaymentHashToRentChannelResponse = 29;
    case kGeneratePaymentHashToRentChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generatepaymenthashtorentchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse generatePaymentHashToExtendConnextRentedChannelResponse = 30;
    case kGeneratePaymentHashToExtendConnextRentedChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.generatepaymenthashtoextendconnextrentedchannelresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse getConnextChannelContractDeploymentFeeResponse = 31;
    case kGetConnextChannelContractDeploymentFeeResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.getconnextchannelcontractdeploymentfeeresponse_);
      break;
    }
    // .io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse registerConnextChannelContractDeploymentFeeResponse = 32;
    case kRegisterConnextChannelContractDeploymentFeeResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.registerconnextchannelcontractdeploymentfeeresponse_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_CommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_CommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_CommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Event.CommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Event.CommandResponse)
    MergeFrom(*source);
  }
}

void Event_CommandResponse::MergeFrom(const Event_CommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.clientmessageid().size() > 0) {

    clientmessageid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.clientmessageid_);
  }
  switch (from.value_case()) {
    case kCommandFailed: {
      _internal_mutable_commandfailed()->::io::stakenet::orderbook::protos::CommandFailed::MergeFrom(from._internal_commandfailed());
      break;
    }
    case kPingResponse: {
      _internal_mutable_pingresponse()->::io::stakenet::orderbook::protos::PingResponse::MergeFrom(from._internal_pingresponse());
      break;
    }
    case kGetTradingPairsResponse: {
      _internal_mutable_gettradingpairsresponse()->::io::stakenet::orderbook::protos::GetTradingPairsResponse::MergeFrom(from._internal_gettradingpairsresponse());
      break;
    }
    case kSubscribeResponse: {
      _internal_mutable_subscriberesponse()->::io::stakenet::orderbook::protos::SubscribeResponse::MergeFrom(from._internal_subscriberesponse());
      break;
    }
    case kUnsubscribeResponse: {
      _internal_mutable_unsubscriberesponse()->::io::stakenet::orderbook::protos::UnsubscribeResponse::MergeFrom(from._internal_unsubscriberesponse());
      break;
    }
    case kGetOpenOrdersResponse: {
      _internal_mutable_getopenordersresponse()->::io::stakenet::orderbook::protos::GetOpenOrdersResponse::MergeFrom(from._internal_getopenordersresponse());
      break;
    }
    case kGetHistoricTradesResponse: {
      _internal_mutable_gethistorictradesresponse()->::io::stakenet::orderbook::protos::GetHistoricTradesResponse::MergeFrom(from._internal_gethistorictradesresponse());
      break;
    }
    case kGetBarsPricesResponse: {
      _internal_mutable_getbarspricesresponse()->::io::stakenet::orderbook::protos::GetBarsPricesResponse::MergeFrom(from._internal_getbarspricesresponse());
      break;
    }
    case kPlaceOrderResponse: {
      _internal_mutable_placeorderresponse()->::io::stakenet::orderbook::protos::PlaceOrderResponse::MergeFrom(from._internal_placeorderresponse());
      break;
    }
    case kGetOpenOrderByIdResponse: {
      _internal_mutable_getopenorderbyidresponse()->::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse::MergeFrom(from._internal_getopenorderbyidresponse());
      break;
    }
    case kCancelOrderResponse: {
      _internal_mutable_cancelorderresponse()->::io::stakenet::orderbook::protos::CancelOpenOrderResponse::MergeFrom(from._internal_cancelorderresponse());
      break;
    }
    case kCancelMatchedOrderResponse: {
      _internal_mutable_cancelmatchedorderresponse()->::io::stakenet::orderbook::protos::CancelMatchedOrderResponse::MergeFrom(from._internal_cancelmatchedorderresponse());
      break;
    }
    case kSendOrderMessageResponse: {
      _internal_mutable_sendordermessageresponse()->::io::stakenet::orderbook::protos::SendOrderMessageResponse::MergeFrom(from._internal_sendordermessageresponse());
      break;
    }
    case kCleanTradingPairOrdersResponse: {
      _internal_mutable_cleantradingpairordersresponse()->::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse::MergeFrom(from._internal_cleantradingpairordersresponse());
      break;
    }
    case kGetLndPaymentInvoiceResponse: {
      _internal_mutable_getlndpaymentinvoiceresponse()->::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse::MergeFrom(from._internal_getlndpaymentinvoiceresponse());
      break;
    }
    case kGenerateInvoiceToRentChannelResponse: {
      _internal_mutable_generateinvoicetorentchannelresponse()->::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse::MergeFrom(from._internal_generateinvoicetorentchannelresponse());
      break;
    }
    case kRentChannelResponse: {
      _internal_mutable_rentchannelresponse()->::io::stakenet::orderbook::protos::RentChannelResponse::MergeFrom(from._internal_rentchannelresponse());
      break;
    }
    case kGetChannelStatusResponse: {
      _internal_mutable_getchannelstatusresponse()->::io::stakenet::orderbook::protos::GetChannelStatusResponse::MergeFrom(from._internal_getchannelstatusresponse());
      break;
    }
    case kGetFeeToRentChannelResponse: {
      _internal_mutable_getfeetorentchannelresponse()->::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse::MergeFrom(from._internal_getfeetorentchannelresponse());
      break;
    }
    case kRefundFeeResponse: {
      _internal_mutable_refundfeeresponse()->::io::stakenet::orderbook::protos::RefundFeeResponse::MergeFrom(from._internal_refundfeeresponse());
      break;
    }
    case kGetRefundableAmountResponse: {
      _internal_mutable_getrefundableamountresponse()->::io::stakenet::orderbook::protos::GetRefundableAmountResponse::MergeFrom(from._internal_getrefundableamountresponse());
      break;
    }
    case kGetFeeToExtendRentedChannelResponse: {
      _internal_mutable_getfeetoextendrentedchannelresponse()->::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse::MergeFrom(from._internal_getfeetoextendrentedchannelresponse());
      break;
    }
    case kGenerateInvoiceToExtendRentedChannelResponse: {
      _internal_mutable_generateinvoicetoextendrentedchannelresponse()->::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse::MergeFrom(from._internal_generateinvoicetoextendrentedchannelresponse());
      break;
    }
    case kExtendRentedChannelTimeResponse: {
      _internal_mutable_extendrentedchanneltimeresponse()->::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse::MergeFrom(from._internal_extendrentedchanneltimeresponse());
      break;
    }
    case kRegisterPublicKeyResponse: {
      _internal_mutable_registerpublickeyresponse()->::io::stakenet::orderbook::protos::RegisterPublicKeyResponse::MergeFrom(from._internal_registerpublickeyresponse());
      break;
    }
    case kRegisterPublicIdentifierResponse: {
      _internal_mutable_registerpublicidentifierresponse()->::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse::MergeFrom(from._internal_registerpublicidentifierresponse());
      break;
    }
    case kGetConnextPaymentInformationResponse: {
      _internal_mutable_getconnextpaymentinformationresponse()->::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse::MergeFrom(from._internal_getconnextpaymentinformationresponse());
      break;
    }
    case kGeneratePaymentHashToRentChannelResponse: {
      _internal_mutable_generatepaymenthashtorentchannelresponse()->::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse::MergeFrom(from._internal_generatepaymenthashtorentchannelresponse());
      break;
    }
    case kGeneratePaymentHashToExtendConnextRentedChannelResponse: {
      _internal_mutable_generatepaymenthashtoextendconnextrentedchannelresponse()->::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse::MergeFrom(from._internal_generatepaymenthashtoextendconnextrentedchannelresponse());
      break;
    }
    case kGetConnextChannelContractDeploymentFeeResponse: {
      _internal_mutable_getconnextchannelcontractdeploymentfeeresponse()->::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse::MergeFrom(from._internal_getconnextchannelcontractdeploymentfeeresponse());
      break;
    }
    case kRegisterConnextChannelContractDeploymentFeeResponse: {
      _internal_mutable_registerconnextchannelcontractdeploymentfeeresponse()->::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse::MergeFrom(from._internal_registerconnextchannelcontractdeploymentfeeresponse());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Event_CommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_CommandResponse::CopyFrom(const Event_CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Event.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_CommandResponse::IsInitialized() const {
  return true;
}

void Event_CommandResponse::InternalSwap(Event_CommandResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  clientmessageid_.Swap(&other->clientmessageid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_CommandResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event_ServerEvent::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.myordermatched_ = const_cast< ::io::stakenet::orderbook::protos::MyOrderMatched*>(
      ::io::stakenet::orderbook::protos::MyOrderMatched::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.mymatchedordercanceled_ = const_cast< ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled*>(
      ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.orderplaced_ = const_cast< ::io::stakenet::orderbook::protos::OrderPlaced*>(
      ::io::stakenet::orderbook::protos::OrderPlaced::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.ordercanceled_ = const_cast< ::io::stakenet::orderbook::protos::OrderCanceled*>(
      ::io::stakenet::orderbook::protos::OrderCanceled::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.ordersmatched_ = const_cast< ::io::stakenet::orderbook::protos::OrdersMatched*>(
      ::io::stakenet::orderbook::protos::OrdersMatched::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.newordermessage_ = const_cast< ::io::stakenet::orderbook::protos::NewOrderMessage*>(
      ::io::stakenet::orderbook::protos::NewOrderMessage::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.swapsuccess_ = const_cast< ::io::stakenet::orderbook::protos::SwapSuccess*>(
      ::io::stakenet::orderbook::protos::SwapSuccess::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.swapfailure_ = const_cast< ::io::stakenet::orderbook::protos::SwapFailure*>(
      ::io::stakenet::orderbook::protos::SwapFailure::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.maintenanceinprogress_ = const_cast< ::io::stakenet::orderbook::protos::MaintenanceInProgress*>(
      ::io::stakenet::orderbook::protos::MaintenanceInProgress::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_ServerEvent_default_instance_.maintenancecompleted_ = const_cast< ::io::stakenet::orderbook::protos::MaintenanceCompleted*>(
      ::io::stakenet::orderbook::protos::MaintenanceCompleted::internal_default_instance());
}
class Event_ServerEvent::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::MyOrderMatched& myordermatched(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled& mymatchedordercanceled(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::OrderPlaced& orderplaced(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::OrderCanceled& ordercanceled(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::OrdersMatched& ordersmatched(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::NewOrderMessage& newordermessage(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::SwapSuccess& swapsuccess(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::SwapFailure& swapfailure(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::MaintenanceInProgress& maintenanceinprogress(const Event_ServerEvent* msg);
  static const ::io::stakenet::orderbook::protos::MaintenanceCompleted& maintenancecompleted(const Event_ServerEvent* msg);
};

const ::io::stakenet::orderbook::protos::MyOrderMatched&
Event_ServerEvent::_Internal::myordermatched(const Event_ServerEvent* msg) {
  return *msg->value_.myordermatched_;
}
const ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled&
Event_ServerEvent::_Internal::mymatchedordercanceled(const Event_ServerEvent* msg) {
  return *msg->value_.mymatchedordercanceled_;
}
const ::io::stakenet::orderbook::protos::OrderPlaced&
Event_ServerEvent::_Internal::orderplaced(const Event_ServerEvent* msg) {
  return *msg->value_.orderplaced_;
}
const ::io::stakenet::orderbook::protos::OrderCanceled&
Event_ServerEvent::_Internal::ordercanceled(const Event_ServerEvent* msg) {
  return *msg->value_.ordercanceled_;
}
const ::io::stakenet::orderbook::protos::OrdersMatched&
Event_ServerEvent::_Internal::ordersmatched(const Event_ServerEvent* msg) {
  return *msg->value_.ordersmatched_;
}
const ::io::stakenet::orderbook::protos::NewOrderMessage&
Event_ServerEvent::_Internal::newordermessage(const Event_ServerEvent* msg) {
  return *msg->value_.newordermessage_;
}
const ::io::stakenet::orderbook::protos::SwapSuccess&
Event_ServerEvent::_Internal::swapsuccess(const Event_ServerEvent* msg) {
  return *msg->value_.swapsuccess_;
}
const ::io::stakenet::orderbook::protos::SwapFailure&
Event_ServerEvent::_Internal::swapfailure(const Event_ServerEvent* msg) {
  return *msg->value_.swapfailure_;
}
const ::io::stakenet::orderbook::protos::MaintenanceInProgress&
Event_ServerEvent::_Internal::maintenanceinprogress(const Event_ServerEvent* msg) {
  return *msg->value_.maintenanceinprogress_;
}
const ::io::stakenet::orderbook::protos::MaintenanceCompleted&
Event_ServerEvent::_Internal::maintenancecompleted(const Event_ServerEvent* msg) {
  return *msg->value_.maintenancecompleted_;
}
void Event_ServerEvent::set_allocated_myordermatched(::io::stakenet::orderbook::protos::MyOrderMatched* myordermatched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (myordermatched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myordermatched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myordermatched, submessage_arena);
    }
    set_has_myordermatched();
    value_.myordermatched_ = myordermatched;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.myOrderMatched)
}
void Event_ServerEvent::clear_myordermatched() {
  if (_internal_has_myordermatched()) {
    delete value_.myordermatched_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_mymatchedordercanceled(::io::stakenet::orderbook::protos::MyMatchedOrderCanceled* mymatchedordercanceled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (mymatchedordercanceled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mymatchedordercanceled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mymatchedordercanceled, submessage_arena);
    }
    set_has_mymatchedordercanceled();
    value_.mymatchedordercanceled_ = mymatchedordercanceled;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.myMatchedOrderCanceled)
}
void Event_ServerEvent::clear_mymatchedordercanceled() {
  if (_internal_has_mymatchedordercanceled()) {
    delete value_.mymatchedordercanceled_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_orderplaced(::io::stakenet::orderbook::protos::OrderPlaced* orderplaced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (orderplaced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orderplaced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orderplaced, submessage_arena);
    }
    set_has_orderplaced();
    value_.orderplaced_ = orderplaced;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.orderPlaced)
}
void Event_ServerEvent::clear_orderplaced() {
  if (_internal_has_orderplaced()) {
    delete value_.orderplaced_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_ordercanceled(::io::stakenet::orderbook::protos::OrderCanceled* ordercanceled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ordercanceled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordercanceled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ordercanceled, submessage_arena);
    }
    set_has_ordercanceled();
    value_.ordercanceled_ = ordercanceled;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.orderCanceled)
}
void Event_ServerEvent::clear_ordercanceled() {
  if (_internal_has_ordercanceled()) {
    delete value_.ordercanceled_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_ordersmatched(::io::stakenet::orderbook::protos::OrdersMatched* ordersmatched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ordersmatched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordersmatched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ordersmatched, submessage_arena);
    }
    set_has_ordersmatched();
    value_.ordersmatched_ = ordersmatched;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.ordersMatched)
}
void Event_ServerEvent::clear_ordersmatched() {
  if (_internal_has_ordersmatched()) {
    delete value_.ordersmatched_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_newordermessage(::io::stakenet::orderbook::protos::NewOrderMessage* newordermessage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (newordermessage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      newordermessage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newordermessage, submessage_arena);
    }
    set_has_newordermessage();
    value_.newordermessage_ = newordermessage;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.newOrderMessage)
}
void Event_ServerEvent::clear_newordermessage() {
  if (_internal_has_newordermessage()) {
    delete value_.newordermessage_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_swapsuccess(::io::stakenet::orderbook::protos::SwapSuccess* swapsuccess) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (swapsuccess) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swapsuccess = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapsuccess, submessage_arena);
    }
    set_has_swapsuccess();
    value_.swapsuccess_ = swapsuccess;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.swapSuccess)
}
void Event_ServerEvent::clear_swapsuccess() {
  if (_internal_has_swapsuccess()) {
    delete value_.swapsuccess_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_swapfailure(::io::stakenet::orderbook::protos::SwapFailure* swapfailure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (swapfailure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      swapfailure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swapfailure, submessage_arena);
    }
    set_has_swapfailure();
    value_.swapfailure_ = swapfailure;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.swapFailure)
}
void Event_ServerEvent::clear_swapfailure() {
  if (_internal_has_swapfailure()) {
    delete value_.swapfailure_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_maintenanceinprogress(::io::stakenet::orderbook::protos::MaintenanceInProgress* maintenanceinprogress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (maintenanceinprogress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maintenanceinprogress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maintenanceinprogress, submessage_arena);
    }
    set_has_maintenanceinprogress();
    value_.maintenanceinprogress_ = maintenanceinprogress;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.maintenanceInProgress)
}
void Event_ServerEvent::clear_maintenanceinprogress() {
  if (_internal_has_maintenanceinprogress()) {
    delete value_.maintenanceinprogress_;
    clear_has_value();
  }
}
void Event_ServerEvent::set_allocated_maintenancecompleted(::io::stakenet::orderbook::protos::MaintenanceCompleted* maintenancecompleted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (maintenancecompleted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maintenancecompleted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maintenancecompleted, submessage_arena);
    }
    set_has_maintenancecompleted();
    value_.maintenancecompleted_ = maintenancecompleted;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.ServerEvent.maintenanceCompleted)
}
void Event_ServerEvent::clear_maintenancecompleted() {
  if (_internal_has_maintenancecompleted()) {
    delete value_.maintenancecompleted_;
    clear_has_value();
  }
}
Event_ServerEvent::Event_ServerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Event.ServerEvent)
}
Event_ServerEvent::Event_ServerEvent(const Event_ServerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kMyOrderMatched: {
      _internal_mutable_myordermatched()->::io::stakenet::orderbook::protos::MyOrderMatched::MergeFrom(from._internal_myordermatched());
      break;
    }
    case kMyMatchedOrderCanceled: {
      _internal_mutable_mymatchedordercanceled()->::io::stakenet::orderbook::protos::MyMatchedOrderCanceled::MergeFrom(from._internal_mymatchedordercanceled());
      break;
    }
    case kOrderPlaced: {
      _internal_mutable_orderplaced()->::io::stakenet::orderbook::protos::OrderPlaced::MergeFrom(from._internal_orderplaced());
      break;
    }
    case kOrderCanceled: {
      _internal_mutable_ordercanceled()->::io::stakenet::orderbook::protos::OrderCanceled::MergeFrom(from._internal_ordercanceled());
      break;
    }
    case kOrdersMatched: {
      _internal_mutable_ordersmatched()->::io::stakenet::orderbook::protos::OrdersMatched::MergeFrom(from._internal_ordersmatched());
      break;
    }
    case kNewOrderMessage: {
      _internal_mutable_newordermessage()->::io::stakenet::orderbook::protos::NewOrderMessage::MergeFrom(from._internal_newordermessage());
      break;
    }
    case kSwapSuccess: {
      _internal_mutable_swapsuccess()->::io::stakenet::orderbook::protos::SwapSuccess::MergeFrom(from._internal_swapsuccess());
      break;
    }
    case kSwapFailure: {
      _internal_mutable_swapfailure()->::io::stakenet::orderbook::protos::SwapFailure::MergeFrom(from._internal_swapfailure());
      break;
    }
    case kMaintenanceInProgress: {
      _internal_mutable_maintenanceinprogress()->::io::stakenet::orderbook::protos::MaintenanceInProgress::MergeFrom(from._internal_maintenanceinprogress());
      break;
    }
    case kMaintenanceCompleted: {
      _internal_mutable_maintenancecompleted()->::io::stakenet::orderbook::protos::MaintenanceCompleted::MergeFrom(from._internal_maintenancecompleted());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Event.ServerEvent)
}

void Event_ServerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto.base);
  clear_has_value();
}

Event_ServerEvent::~Event_ServerEvent() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Event.ServerEvent)
  SharedDtor();
}

void Event_ServerEvent::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Event_ServerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event_ServerEvent& Event_ServerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_ServerEvent_stakenet_2forderbook_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Event_ServerEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  switch (value_case()) {
    case kMyOrderMatched: {
      delete value_.myordermatched_;
      break;
    }
    case kMyMatchedOrderCanceled: {
      delete value_.mymatchedordercanceled_;
      break;
    }
    case kOrderPlaced: {
      delete value_.orderplaced_;
      break;
    }
    case kOrderCanceled: {
      delete value_.ordercanceled_;
      break;
    }
    case kOrdersMatched: {
      delete value_.ordersmatched_;
      break;
    }
    case kNewOrderMessage: {
      delete value_.newordermessage_;
      break;
    }
    case kSwapSuccess: {
      delete value_.swapsuccess_;
      break;
    }
    case kSwapFailure: {
      delete value_.swapfailure_;
      break;
    }
    case kMaintenanceInProgress: {
      delete value_.maintenanceinprogress_;
      break;
    }
    case kMaintenanceCompleted: {
      delete value_.maintenancecompleted_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Event_ServerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* Event_ServerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.MyOrderMatched myOrderMatched = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_myordermatched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.MyMatchedOrderCanceled myMatchedOrderCanceled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mymatchedordercanceled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.OrderPlaced orderPlaced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orderplaced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.OrderCanceled orderCanceled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordercanceled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.OrdersMatched ordersMatched = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordersmatched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.NewOrderMessage newOrderMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_newordermessage(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SwapSuccess swapSuccess = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapsuccess(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.SwapFailure swapFailure = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_swapfailure(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.MaintenanceInProgress maintenanceInProgress = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_maintenanceinprogress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.MaintenanceCompleted maintenanceCompleted = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_maintenancecompleted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event_ServerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.MyOrderMatched myOrderMatched = 1;
  if (_internal_has_myordermatched()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::myordermatched(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.MyMatchedOrderCanceled myMatchedOrderCanceled = 2;
  if (_internal_has_mymatchedordercanceled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mymatchedordercanceled(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.OrderPlaced orderPlaced = 3;
  if (_internal_has_orderplaced()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orderplaced(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.OrderCanceled orderCanceled = 4;
  if (_internal_has_ordercanceled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ordercanceled(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.OrdersMatched ordersMatched = 5;
  if (_internal_has_ordersmatched()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ordersmatched(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.NewOrderMessage newOrderMessage = 6;
  if (_internal_has_newordermessage()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::newordermessage(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SwapSuccess swapSuccess = 7;
  if (_internal_has_swapsuccess()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::swapsuccess(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.SwapFailure swapFailure = 8;
  if (_internal_has_swapfailure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::swapfailure(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.MaintenanceInProgress maintenanceInProgress = 9;
  if (_internal_has_maintenanceinprogress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::maintenanceinprogress(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.MaintenanceCompleted maintenanceCompleted = 10;
  if (_internal_has_maintenancecompleted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::maintenancecompleted(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Event.ServerEvent)
  return target;
}

size_t Event_ServerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.MyOrderMatched myOrderMatched = 1;
    case kMyOrderMatched: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.myordermatched_);
      break;
    }
    // .io.stakenet.orderbook.protos.MyMatchedOrderCanceled myMatchedOrderCanceled = 2;
    case kMyMatchedOrderCanceled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.mymatchedordercanceled_);
      break;
    }
    // .io.stakenet.orderbook.protos.OrderPlaced orderPlaced = 3;
    case kOrderPlaced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.orderplaced_);
      break;
    }
    // .io.stakenet.orderbook.protos.OrderCanceled orderCanceled = 4;
    case kOrderCanceled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ordercanceled_);
      break;
    }
    // .io.stakenet.orderbook.protos.OrdersMatched ordersMatched = 5;
    case kOrdersMatched: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ordersmatched_);
      break;
    }
    // .io.stakenet.orderbook.protos.NewOrderMessage newOrderMessage = 6;
    case kNewOrderMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.newordermessage_);
      break;
    }
    // .io.stakenet.orderbook.protos.SwapSuccess swapSuccess = 7;
    case kSwapSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.swapsuccess_);
      break;
    }
    // .io.stakenet.orderbook.protos.SwapFailure swapFailure = 8;
    case kSwapFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.swapfailure_);
      break;
    }
    // .io.stakenet.orderbook.protos.MaintenanceInProgress maintenanceInProgress = 9;
    case kMaintenanceInProgress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.maintenanceinprogress_);
      break;
    }
    // .io.stakenet.orderbook.protos.MaintenanceCompleted maintenanceCompleted = 10;
    case kMaintenanceCompleted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.maintenancecompleted_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event_ServerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const Event_ServerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event_ServerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Event.ServerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Event.ServerEvent)
    MergeFrom(*source);
  }
}

void Event_ServerEvent::MergeFrom(const Event_ServerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kMyOrderMatched: {
      _internal_mutable_myordermatched()->::io::stakenet::orderbook::protos::MyOrderMatched::MergeFrom(from._internal_myordermatched());
      break;
    }
    case kMyMatchedOrderCanceled: {
      _internal_mutable_mymatchedordercanceled()->::io::stakenet::orderbook::protos::MyMatchedOrderCanceled::MergeFrom(from._internal_mymatchedordercanceled());
      break;
    }
    case kOrderPlaced: {
      _internal_mutable_orderplaced()->::io::stakenet::orderbook::protos::OrderPlaced::MergeFrom(from._internal_orderplaced());
      break;
    }
    case kOrderCanceled: {
      _internal_mutable_ordercanceled()->::io::stakenet::orderbook::protos::OrderCanceled::MergeFrom(from._internal_ordercanceled());
      break;
    }
    case kOrdersMatched: {
      _internal_mutable_ordersmatched()->::io::stakenet::orderbook::protos::OrdersMatched::MergeFrom(from._internal_ordersmatched());
      break;
    }
    case kNewOrderMessage: {
      _internal_mutable_newordermessage()->::io::stakenet::orderbook::protos::NewOrderMessage::MergeFrom(from._internal_newordermessage());
      break;
    }
    case kSwapSuccess: {
      _internal_mutable_swapsuccess()->::io::stakenet::orderbook::protos::SwapSuccess::MergeFrom(from._internal_swapsuccess());
      break;
    }
    case kSwapFailure: {
      _internal_mutable_swapfailure()->::io::stakenet::orderbook::protos::SwapFailure::MergeFrom(from._internal_swapfailure());
      break;
    }
    case kMaintenanceInProgress: {
      _internal_mutable_maintenanceinprogress()->::io::stakenet::orderbook::protos::MaintenanceInProgress::MergeFrom(from._internal_maintenanceinprogress());
      break;
    }
    case kMaintenanceCompleted: {
      _internal_mutable_maintenancecompleted()->::io::stakenet::orderbook::protos::MaintenanceCompleted::MergeFrom(from._internal_maintenancecompleted());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Event_ServerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event_ServerEvent::CopyFrom(const Event_ServerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Event.ServerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event_ServerEvent::IsInitialized() const {
  return true;
}

void Event_ServerEvent::InternalSwap(Event_ServerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event_ServerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Event_default_instance_.response_ = const_cast< ::io::stakenet::orderbook::protos::Event_CommandResponse*>(
      ::io::stakenet::orderbook::protos::Event_CommandResponse::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Event_default_instance_.event_ = const_cast< ::io::stakenet::orderbook::protos::Event_ServerEvent*>(
      ::io::stakenet::orderbook::protos::Event_ServerEvent::internal_default_instance());
}
class Event::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Event_CommandResponse& response(const Event* msg);
  static const ::io::stakenet::orderbook::protos::Event_ServerEvent& event(const Event* msg);
};

const ::io::stakenet::orderbook::protos::Event_CommandResponse&
Event::_Internal::response(const Event* msg) {
  return *msg->value_.response_;
}
const ::io::stakenet::orderbook::protos::Event_ServerEvent&
Event::_Internal::event(const Event* msg) {
  return *msg->value_.event_;
}
void Event::set_allocated_response(::io::stakenet::orderbook::protos::Event_CommandResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    value_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.response)
}
void Event::set_allocated_event(::io::stakenet::orderbook::protos::Event_ServerEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    value_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.Event.event)
}
Event::Event()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagecounter_ = from.messagecounter_;
  clear_has_value();
  switch (from.value_case()) {
    case kResponse: {
      _internal_mutable_response()->::io::stakenet::orderbook::protos::Event_CommandResponse::MergeFrom(from._internal_response());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::io::stakenet::orderbook::protos::Event_ServerEvent::MergeFrom(from._internal_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_stakenet_2forderbook_2fapi_2eproto.base);
  messagecounter_ = PROTOBUF_LONGLONG(0);
  clear_has_value();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Event)
  SharedDtor();
}

void Event::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_stakenet_2forderbook_2fapi_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.Event)
  switch (value_case()) {
    case kResponse: {
      delete value_.response_;
      break;
    }
    case kEvent: {
      delete value_.event_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messagecounter_ = PROTOBUF_LONGLONG(0);
  clear_value();
  _internal_metadata_.Clear();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 messageCounter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          messagecounter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Event.CommandResponse response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Event.ServerEvent event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 messageCounter = 1;
  if (this->messagecounter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_messagecounter(), target);
  }

  // .io.stakenet.orderbook.protos.Event.CommandResponse response = 2;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.Event.ServerEvent event = 3;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 messageCounter = 1;
  if (this->messagecounter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_messagecounter());
  }

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.Event.CommandResponse response = 2;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.response_);
      break;
    }
    // .io.stakenet.orderbook.protos.Event.ServerEvent event = 3;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.event_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.messagecounter() != 0) {
    _internal_set_messagecounter(from._internal_messagecounter());
  }
  switch (from.value_case()) {
    case kResponse: {
      _internal_mutable_response()->::io::stakenet::orderbook::protos::Event_CommandResponse::MergeFrom(from._internal_response());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::io::stakenet::orderbook::protos::Event_ServerEvent::MergeFrom(from._internal_event());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(messagecounter_, other->messagecounter_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Command* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Command >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Event_CommandResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Event_CommandResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Event_CommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Event_ServerEvent* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Event_ServerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Event_ServerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Event* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Event >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Event >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
