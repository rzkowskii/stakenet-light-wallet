syntax = "proto3";

import "stakenet/orderbook/commands.proto";
import "stakenet/orderbook/events.proto";

package io.stakenet.orderbook.protos;

// A command is used to ask the server to perform some operation, like retrieving data,
// or creating/updating data.
//
// Each command produces a CommandResponse, which can be linked to the command because
// it will include the same requestId generated by the client.
message Command {
    string clientMessageId = 1; // client generated id to identify the the response related to this command

    oneof value {
        PingCommand ping = 2;

        GetTradingPairsCommand getTradingPairs = 3;
        SubscribeCommand subscribe = 4;
        UnsubscribeCommand unsubscribe = 5;

        GetOpenOrdersCommand getOpenOrders = 6;
        GetHistoricTradesCommand getHistoricTrades = 7;
        GetBarsPricesCommand getBarsPrices = 8;

        PlaceOrderCommand placeOrder = 9;
        GetOpenOrderByIdCommand getTradingOrderById = 10;
        CancelOpenOrderCommand cancelOrder = 11;
        SendOrderMessageCommand sendOrderMessage = 12;
        CancelMatchedOrderCommand cancelMatchedOrder = 13;
        CleanTradingPairOrdersCommand cleanTradingPairOrders = 14;

        GetLndPaymentInvoiceCommand getLndPaymentInvoiceCommand = 15;

        GenerateInvoiceToRentChannelCommand generateInvoiceToRentChannelCommand = 16;
        RentChannelCommand rentChannelCommand = 17;
        GetChannelStatusCommand getChannelStatusCommand = 18;
        GetFeeToRentChannelCommand getFeeToRentChannelCommand = 19;
        RefundFeeCommand refundFeeCommand = 20;
        GetRefundableAmountCommand getRefundableAmountCommand = 21;
        GetFeeToExtendRentedChannelCommand getFeeToExtendRentedChannelCommand = 22;
        GenerateInvoiceToExtendRentedChannelCommand generateInvoiceToExtendRentedChannelCommand = 23;
        ExtendRentedChannelTimeCommand extendRentedChannelTimeCommand = 24;
        RegisterPublicKeyCommand registerPublicKeyCommand = 25;
        RegisterPublicIdentifierCommand registerPublicIdentifierCommand = 26;
        GetConnextPaymentInformationCommand getConnextPaymentInformationCommand = 27;
        GeneratePaymentHashToRentChannelCommand generatePaymentHashToRentChannelCommand = 28;
        GeneratePaymentHashToExtendConnextRentedChannelCommand generatePaymentHashToExtendConnextRentedChannelCommand = 29;
        GetConnextChannelContractDeploymentFeeCommand getConnextChannelContractDeploymentFeeCommand = 30;
        RegisterConnextChannelContractDeploymentFeeCommand registerConnextChannelContractDeploymentFeeCommand = 31;
    }
}


// An event represents any message pushed from the server to the client.
//
// There are two kinds of events:
// - The ones related to a command sent from the client (CommandResponse).
// - The ones produced by the server (ServerEvent).
//
message Event {
    // Each message pushed from the server will include a sequential id, starting with 1.
    // If the client receives the message with id = 10 but didn't received the one with id = 9,
    // it means that a message was lost and the client must likely refresh its state.
    int64 messageCounter = 1;
    oneof value {
        CommandResponse response = 2;
        ServerEvent event = 3;
    }

    message CommandResponse {
        // the client generated id attached to the command that produced this response
        string clientMessageId = 1;
        oneof value {
            CommandFailed commandFailed = 2;
            PingResponse pingResponse = 3;

            GetTradingPairsResponse getTradingPairsResponse = 4;
            SubscribeResponse subscribeResponse = 5;
            UnsubscribeResponse unsubscribeResponse = 6;

            GetOpenOrdersResponse getOpenOrdersResponse = 7;
            GetHistoricTradesResponse getHistoricTradesResponse = 8;
            GetBarsPricesResponse getBarsPricesResponse = 9;

            PlaceOrderResponse placeOrderResponse = 10;
            GetOpenOrderByIdResponse getOpenOrderByIdResponse = 11;
            CancelOpenOrderResponse cancelOrderResponse = 12;
            CancelMatchedOrderResponse cancelMatchedOrderResponse = 13;
            SendOrderMessageResponse sendOrderMessageResponse = 14;
            CleanTradingPairOrdersResponse cleanTradingPairOrdersResponse = 15;

            GetLndPaymentInvoiceResponse getLndPaymentInvoiceResponse = 16;

            GenerateInvoiceToRentChannelResponse generateInvoiceToRentChannelResponse = 17;
            RentChannelResponse rentChannelResponse = 18;
            GetChannelStatusResponse getChannelStatusResponse = 19;
            GetFeeToRentChannelResponse getFeeToRentChannelResponse = 20;
            RefundFeeResponse refundFeeResponse = 21;
            GetRefundableAmountResponse getRefundableAmountResponse = 22;
            GetFeeToExtendRentedChannelResponse getFeeToExtendRentedChannelResponse = 23;
            GenerateInvoiceToExtendRentedChannelResponse generateInvoiceToExtendRentedChannelResponse = 24;
            ExtendRentedChannelTimeResponse extendRentedChannelTimeResponse = 25;
            RegisterPublicKeyResponse registerPublicKeyResponse = 26;
            RegisterPublicIdentifierResponse registerPublicIdentifierResponse = 27;
            GetConnextPaymentInformationResponse getConnextPaymentInformationResponse = 28;
            GeneratePaymentHashToRentChannelResponse generatePaymentHashToRentChannelResponse = 29;
            GeneratePaymentHashToExtendConnextRentedChannelResponse generatePaymentHashToExtendConnextRentedChannelResponse = 30;
            GetConnextChannelContractDeploymentFeeResponse getConnextChannelContractDeploymentFeeResponse = 31;
            RegisterConnextChannelContractDeploymentFeeResponse registerConnextChannelContractDeploymentFeeResponse = 32;
        }
    }

    message ServerEvent {
        oneof value {
            // Events generated by another peer affecting my orders
            MyOrderMatched myOrderMatched = 1;
            MyMatchedOrderCanceled myMatchedOrderCanceled = 2;

            // events produced for trading pair subscribers
            OrderPlaced orderPlaced = 3;
            OrderCanceled orderCanceled = 4;
            OrdersMatched ordersMatched = 5;

            // Event produced by one peer to another peer which have a trade in progress
            NewOrderMessage newOrderMessage = 6;

            SwapSuccess swapSuccess = 7;
            SwapFailure swapFailure = 8;

            MaintenanceInProgress maintenanceInProgress = 9;
            MaintenanceCompleted maintenanceCompleted = 10;
        }
    }
}
