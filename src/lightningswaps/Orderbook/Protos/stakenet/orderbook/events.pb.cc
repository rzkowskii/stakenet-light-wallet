// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stakenet/orderbook/events.proto

#include "events.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fevents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto;
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
class MyOrderMatchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyOrderMatched> _instance;
} _MyOrderMatched_default_instance_;
class MyMatchedOrderCanceledDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MyMatchedOrderCanceled> _instance;
} _MyMatchedOrderCanceled_default_instance_;
class OrderPlacedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderPlaced> _instance;
} _OrderPlaced_default_instance_;
class OrderCanceledDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderCanceled> _instance;
} _OrderCanceled_default_instance_;
class OrdersMatchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrdersMatched> _instance;
} _OrdersMatched_default_instance_;
class NewOrderMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NewOrderMessage> _instance;
} _NewOrderMessage_default_instance_;
class SwapSuccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapSuccess> _instance;
} _SwapSuccess_default_instance_;
class SwapFailureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapFailure> _instance;
} _SwapFailure_default_instance_;
class RentedChannelEvent_ChannelOpenedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannelEvent_ChannelOpened> _instance;
} _RentedChannelEvent_ChannelOpened_default_instance_;
class RentedChannelEvent_ChannelExpiringSoonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannelEvent_ChannelExpiringSoon> _instance;
} _RentedChannelEvent_ChannelExpiringSoon_default_instance_;
class RentedChannelEvent_ChannelClosedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannelEvent_ChannelClosed> _instance;
} _RentedChannelEvent_ChannelClosed_default_instance_;
class RentedChannelEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannelEvent> _instance;
  const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened* channelopened_;
  const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon* channelexpiringsoon_;
  const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed* channelclosed_;
} _RentedChannelEvent_default_instance_;
class MaintenanceInProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaintenanceInProgress> _instance;
} _MaintenanceInProgress_default_instance_;
class MaintenanceCompletedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MaintenanceCompleted> _instance;
} _MaintenanceCompleted_default_instance_;
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
static void InitDefaultsscc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_MaintenanceCompleted_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::MaintenanceCompleted();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::MaintenanceCompleted::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_MaintenanceInProgress_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::MaintenanceInProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::MaintenanceInProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_MyMatchedOrderCanceled_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_MyOrderMatched_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::MyOrderMatched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::MyOrderMatched::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_NewOrderMessage_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::NewOrderMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::NewOrderMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_OrderCanceled_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::OrderCanceled();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::OrderCanceled::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_OrderPlaced_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::OrderPlaced();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::OrderPlaced::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_OrdersMatched_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::OrdersMatched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::OrdersMatched::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentedChannelEvent_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentedChannelEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentedChannelEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto.base,
      &scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto.base,}};

static void InitDefaultsscc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelClosed_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelExpiringSoon_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelOpened_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto}, {}};

static void InitDefaultsscc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SwapFailure_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SwapFailure();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SwapFailure::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SwapSuccess_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SwapSuccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SwapSuccess::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stakenet_2forderbook_2fevents_2eproto[14];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_stakenet_2forderbook_2fevents_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stakenet_2forderbook_2fevents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stakenet_2forderbook_2fevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MyOrderMatched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MyOrderMatched, trade_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MyOrderMatched, ordermatchedwith_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MyMatchedOrderCanceled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MyMatchedOrderCanceled, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderPlaced, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderPlaced, order_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderPlaced, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderCanceled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderCanceled, orderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderCanceled, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderCanceled, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrdersMatched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrdersMatched, trade_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrdersMatched, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::NewOrderMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::NewOrderMessage, orderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::NewOrderMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapSuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapSuccess, trade_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapSuccess, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapFailure, trade_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SwapFailure, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened, expireson_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened, openedon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon, expireson_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::RentedChannelEventDefaultTypeInternal, channelopened_),
  offsetof(::io::stakenet::orderbook::protos::RentedChannelEventDefaultTypeInternal, channelexpiringsoon_),
  offsetof(::io::stakenet::orderbook::protos::RentedChannelEventDefaultTypeInternal, channelclosed_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannelEvent, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MaintenanceInProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MaintenanceCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::stakenet::orderbook::protos::MyOrderMatched)},
  { 7, -1, sizeof(::io::stakenet::orderbook::protos::MyMatchedOrderCanceled)},
  { 13, -1, sizeof(::io::stakenet::orderbook::protos::OrderPlaced)},
  { 20, -1, sizeof(::io::stakenet::orderbook::protos::OrderCanceled)},
  { 28, -1, sizeof(::io::stakenet::orderbook::protos::OrdersMatched)},
  { 35, -1, sizeof(::io::stakenet::orderbook::protos::NewOrderMessage)},
  { 42, -1, sizeof(::io::stakenet::orderbook::protos::SwapSuccess)},
  { 49, -1, sizeof(::io::stakenet::orderbook::protos::SwapFailure)},
  { 56, -1, sizeof(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened)},
  { 64, -1, sizeof(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon)},
  { 71, -1, sizeof(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed)},
  { 77, -1, sizeof(::io::stakenet::orderbook::protos::RentedChannelEvent)},
  { 86, -1, sizeof(::io::stakenet::orderbook::protos::MaintenanceInProgress)},
  { 91, -1, sizeof(::io::stakenet::orderbook::protos::MaintenanceCompleted)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_MyOrderMatched_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_MyMatchedOrderCanceled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_OrderPlaced_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_OrderCanceled_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_OrdersMatched_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_NewOrderMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SwapSuccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SwapFailure_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelOpened_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelExpiringSoon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentedChannelEvent_ChannelClosed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentedChannelEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_MaintenanceInProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_MaintenanceCompleted_default_instance_),
};

const char descriptor_table_protodef_stakenet_2forderbook_2fevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037stakenet/orderbook/events.proto\022\034io.st"
  "akenet.orderbook.protos\032\037stakenet/orderb"
  "ook/models.proto\"\203\001\n\016MyOrderMatched\0222\n\005t"
  "rade\030\001 \001(\0132#.io.stakenet.orderbook.proto"
  "s.Trade\022=\n\020orderMatchedWith\030\002 \001(\0132#.io.s"
  "takenet.orderbook.protos.Order\"L\n\026MyMatc"
  "hedOrderCanceled\0222\n\005trade\030\001 \001(\0132#.io.sta"
  "kenet.orderbook.protos.Trade\"V\n\013OrderPla"
  "ced\0222\n\005order\030\001 \001(\0132#.io.stakenet.orderbo"
  "ok.protos.Order\022\023\n\013tradingPair\030\002 \001(\t\"i\n\r"
  "OrderCanceled\022\017\n\007orderId\030\001 \001(\t\022\023\n\013tradin"
  "gPair\030\002 \001(\t\0222\n\005order\030\003 \001(\0132#.io.stakenet"
  ".orderbook.protos.Order\"X\n\rOrdersMatched"
  "\0222\n\005trade\030\001 \001(\0132#.io.stakenet.orderbook."
  "protos.Trade\022\023\n\013tradingPair\030\002 \001(\t\"3\n\017New"
  "OrderMessage\022\017\n\007orderId\030\001 \001(\t\022\017\n\007message"
  "\030\002 \001(\014\"V\n\013SwapSuccess\0222\n\005trade\030\001 \001(\0132#.i"
  "o.stakenet.orderbook.protos.Trade\022\023\n\013tra"
  "dingPair\030\002 \001(\t\"V\n\013SwapFailure\0222\n\005trade\030\001"
  " \001(\0132#.io.stakenet.orderbook.protos.Trad"
  "e\022\023\n\013tradingPair\030\002 \001(\t\"\336\003\n\022RentedChannel"
  "Event\022W\n\rchannelOpened\030\001 \001(\0132>.io.staken"
  "et.orderbook.protos.RentedChannelEvent.C"
  "hannelOpenedH\000\022c\n\023channelExpiringSoon\030\002 "
  "\001(\0132D.io.stakenet.orderbook.protos.Rente"
  "dChannelEvent.ChannelExpiringSoonH\000\022W\n\rc"
  "hannelClosed\030\003 \001(\0132>.io.stakenet.orderbo"
  "ok.protos.RentedChannelEvent.ChannelClos"
  "edH\000\032G\n\rChannelOpened\022\021\n\tchannelId\030\001 \001(\t"
  "\022\021\n\texpiresOn\030\002 \001(\003\022\020\n\010openedOn\030\003 \001(\003\032;\n"
  "\023ChannelExpiringSoon\022\021\n\tchannelId\030\001 \001(\t\022"
  "\021\n\texpiresOn\030\002 \001(\003\032\"\n\rChannelClosed\022\021\n\tc"
  "hannelId\030\001 \001(\tB\007\n\005value\"\027\n\025MaintenanceIn"
  "Progress\"\026\n\024MaintenanceCompletedb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stakenet_2forderbook_2fevents_2eproto_deps[1] = {
  &::descriptor_table_stakenet_2forderbook_2fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stakenet_2forderbook_2fevents_2eproto_sccs[14] = {
  &scc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto.base,
  &scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stakenet_2forderbook_2fevents_2eproto_once;
static bool descriptor_table_stakenet_2forderbook_2fevents_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stakenet_2forderbook_2fevents_2eproto = {
  &descriptor_table_stakenet_2forderbook_2fevents_2eproto_initialized, descriptor_table_protodef_stakenet_2forderbook_2fevents_2eproto, "stakenet/orderbook/events.proto", 1360,
  &descriptor_table_stakenet_2forderbook_2fevents_2eproto_once, descriptor_table_stakenet_2forderbook_2fevents_2eproto_sccs, descriptor_table_stakenet_2forderbook_2fevents_2eproto_deps, 14, 1,
  schemas, file_default_instances, TableStruct_stakenet_2forderbook_2fevents_2eproto::offsets,
  file_level_metadata_stakenet_2forderbook_2fevents_2eproto, 14, file_level_enum_descriptors_stakenet_2forderbook_2fevents_2eproto, file_level_service_descriptors_stakenet_2forderbook_2fevents_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stakenet_2forderbook_2fevents_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stakenet_2forderbook_2fevents_2eproto), true);
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {

// ===================================================================

void MyOrderMatched::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_MyOrderMatched_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
  ::io::stakenet::orderbook::protos::_MyOrderMatched_default_instance_._instance.get_mutable()->ordermatchedwith_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class MyOrderMatched::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const MyOrderMatched* msg);
  static const ::io::stakenet::orderbook::protos::Order& ordermatchedwith(const MyOrderMatched* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
MyOrderMatched::_Internal::trade(const MyOrderMatched* msg) {
  return *msg->trade_;
}
const ::io::stakenet::orderbook::protos::Order&
MyOrderMatched::_Internal::ordermatchedwith(const MyOrderMatched* msg) {
  return *msg->ordermatchedwith_;
}
void MyOrderMatched::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
void MyOrderMatched::clear_ordermatchedwith() {
  if (GetArenaNoVirtual() == nullptr && ordermatchedwith_ != nullptr) {
    delete ordermatchedwith_;
  }
  ordermatchedwith_ = nullptr;
}
MyOrderMatched::MyOrderMatched()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.MyOrderMatched)
}
MyOrderMatched::MyOrderMatched(const MyOrderMatched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  if (from._internal_has_ordermatchedwith()) {
    ordermatchedwith_ = new ::io::stakenet::orderbook::protos::Order(*from.ordermatchedwith_);
  } else {
    ordermatchedwith_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.MyOrderMatched)
}

void MyOrderMatched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto.base);
  ::memset(&trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordermatchedwith_) -
      reinterpret_cast<char*>(&trade_)) + sizeof(ordermatchedwith_));
}

MyOrderMatched::~MyOrderMatched() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.MyOrderMatched)
  SharedDtor();
}

void MyOrderMatched::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
  if (this != internal_default_instance()) delete ordermatchedwith_;
}

void MyOrderMatched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyOrderMatched& MyOrderMatched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyOrderMatched_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MyOrderMatched::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.MyOrderMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ordermatchedwith_ != nullptr) {
    delete ordermatchedwith_;
  }
  ordermatchedwith_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MyOrderMatched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordermatchedwith(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyOrderMatched::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.MyOrderMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
  if (this->has_ordermatchedwith()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ordermatchedwith(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.MyOrderMatched)
  return target;
}

size_t MyOrderMatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.MyOrderMatched)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
  if (this->has_ordermatchedwith()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ordermatchedwith_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyOrderMatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.MyOrderMatched)
  GOOGLE_DCHECK_NE(&from, this);
  const MyOrderMatched* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyOrderMatched>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.MyOrderMatched)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.MyOrderMatched)
    MergeFrom(*source);
  }
}

void MyOrderMatched::MergeFrom(const MyOrderMatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.MyOrderMatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
  if (from.has_ordermatchedwith()) {
    _internal_mutable_ordermatchedwith()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_ordermatchedwith());
  }
}

void MyOrderMatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.MyOrderMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyOrderMatched::CopyFrom(const MyOrderMatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.MyOrderMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyOrderMatched::IsInitialized() const {
  return true;
}

void MyOrderMatched::InternalSwap(MyOrderMatched* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
  swap(ordermatchedwith_, other->ordermatchedwith_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyOrderMatched::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MyMatchedOrderCanceled::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_MyMatchedOrderCanceled_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
}
class MyMatchedOrderCanceled::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const MyMatchedOrderCanceled* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
MyMatchedOrderCanceled::_Internal::trade(const MyMatchedOrderCanceled* msg) {
  return *msg->trade_;
}
void MyMatchedOrderCanceled::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
MyMatchedOrderCanceled::MyMatchedOrderCanceled()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
}
MyMatchedOrderCanceled::MyMatchedOrderCanceled(const MyMatchedOrderCanceled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
}

void MyMatchedOrderCanceled::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto.base);
  trade_ = nullptr;
}

MyMatchedOrderCanceled::~MyMatchedOrderCanceled() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  SharedDtor();
}

void MyMatchedOrderCanceled::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
}

void MyMatchedOrderCanceled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MyMatchedOrderCanceled& MyMatchedOrderCanceled::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MyMatchedOrderCanceled_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MyMatchedOrderCanceled::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

const char* MyMatchedOrderCanceled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MyMatchedOrderCanceled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  return target;
}

size_t MyMatchedOrderCanceled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MyMatchedOrderCanceled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  GOOGLE_DCHECK_NE(&from, this);
  const MyMatchedOrderCanceled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MyMatchedOrderCanceled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
    MergeFrom(*source);
  }
}

void MyMatchedOrderCanceled::MergeFrom(const MyMatchedOrderCanceled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
}

void MyMatchedOrderCanceled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyMatchedOrderCanceled::CopyFrom(const MyMatchedOrderCanceled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.MyMatchedOrderCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyMatchedOrderCanceled::IsInitialized() const {
  return true;
}

void MyMatchedOrderCanceled::InternalSwap(MyMatchedOrderCanceled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MyMatchedOrderCanceled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderPlaced::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_OrderPlaced_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class OrderPlaced::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const OrderPlaced* msg);
};

const ::io::stakenet::orderbook::protos::Order&
OrderPlaced::_Internal::order(const OrderPlaced* msg) {
  return *msg->order_;
}
void OrderPlaced::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderPlaced::OrderPlaced()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.OrderPlaced)
}
OrderPlaced::OrderPlaced(const OrderPlaced& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.OrderPlaced)
}

void OrderPlaced::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = nullptr;
}

OrderPlaced::~OrderPlaced() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.OrderPlaced)
  SharedDtor();
}

void OrderPlaced::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void OrderPlaced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderPlaced& OrderPlaced::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderPlaced_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void OrderPlaced::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.OrderPlaced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderPlaced::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.OrderPlaced.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderPlaced::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.OrderPlaced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.OrderPlaced.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.OrderPlaced)
  return target;
}

size_t OrderPlaced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.OrderPlaced)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderPlaced::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.OrderPlaced)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderPlaced* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderPlaced>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.OrderPlaced)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.OrderPlaced)
    MergeFrom(*source);
  }
}

void OrderPlaced::MergeFrom(const OrderPlaced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.OrderPlaced)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void OrderPlaced::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.OrderPlaced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderPlaced::CopyFrom(const OrderPlaced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.OrderPlaced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPlaced::IsInitialized() const {
  return true;
}

void OrderPlaced::InternalSwap(OrderPlaced* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderPlaced::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderCanceled::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_OrderCanceled_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class OrderCanceled::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const OrderCanceled* msg);
};

const ::io::stakenet::orderbook::protos::Order&
OrderCanceled::_Internal::order(const OrderCanceled* msg) {
  return *msg->order_;
}
void OrderCanceled::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
OrderCanceled::OrderCanceled()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.OrderCanceled)
}
OrderCanceled::OrderCanceled(const OrderCanceled& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.OrderCanceled)
}

void OrderCanceled::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = nullptr;
}

OrderCanceled::~OrderCanceled() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.OrderCanceled)
  SharedDtor();
}

void OrderCanceled::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void OrderCanceled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderCanceled& OrderCanceled::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderCanceled_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void OrderCanceled::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.OrderCanceled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderCanceled::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.OrderCanceled.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.OrderCanceled.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Order order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderCanceled::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.OrderCanceled)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.OrderCanceled.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.OrderCanceled.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  // .io.stakenet.orderbook.protos.Order order = 3;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.OrderCanceled)
  return target;
}

size_t OrderCanceled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.OrderCanceled)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.Order order = 3;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderCanceled::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.OrderCanceled)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderCanceled* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderCanceled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.OrderCanceled)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.OrderCanceled)
    MergeFrom(*source);
  }
}

void OrderCanceled::MergeFrom(const OrderCanceled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.OrderCanceled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void OrderCanceled::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.OrderCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderCanceled::CopyFrom(const OrderCanceled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.OrderCanceled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderCanceled::IsInitialized() const {
  return true;
}

void OrderCanceled::InternalSwap(OrderCanceled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderCanceled::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrdersMatched::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_OrdersMatched_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
}
class OrdersMatched::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const OrdersMatched* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
OrdersMatched::_Internal::trade(const OrdersMatched* msg) {
  return *msg->trade_;
}
void OrdersMatched::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
OrdersMatched::OrdersMatched()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.OrdersMatched)
}
OrdersMatched::OrdersMatched(const OrdersMatched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.OrdersMatched)
}

void OrdersMatched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_ = nullptr;
}

OrdersMatched::~OrdersMatched() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.OrdersMatched)
  SharedDtor();
}

void OrdersMatched::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trade_;
}

void OrdersMatched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrdersMatched& OrdersMatched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrdersMatched_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void OrdersMatched::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.OrdersMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrdersMatched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.OrdersMatched.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrdersMatched::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.OrdersMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.OrdersMatched.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.OrdersMatched)
  return target;
}

size_t OrdersMatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.OrdersMatched)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrdersMatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.OrdersMatched)
  GOOGLE_DCHECK_NE(&from, this);
  const OrdersMatched* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrdersMatched>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.OrdersMatched)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.OrdersMatched)
    MergeFrom(*source);
  }
}

void OrdersMatched::MergeFrom(const OrdersMatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.OrdersMatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
}

void OrdersMatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.OrdersMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrdersMatched::CopyFrom(const OrdersMatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.OrdersMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrdersMatched::IsInitialized() const {
  return true;
}

void OrdersMatched::InternalSwap(OrdersMatched* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrdersMatched::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NewOrderMessage::InitAsDefaultInstance() {
}
class NewOrderMessage::_Internal {
 public:
};

NewOrderMessage::NewOrderMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.NewOrderMessage)
}
NewOrderMessage::NewOrderMessage(const NewOrderMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.NewOrderMessage)
}

void NewOrderMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NewOrderMessage::~NewOrderMessage() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.NewOrderMessage)
  SharedDtor();
}

void NewOrderMessage::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NewOrderMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NewOrderMessage& NewOrderMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NewOrderMessage_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void NewOrderMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.NewOrderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* NewOrderMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.NewOrderMessage.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewOrderMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.NewOrderMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.NewOrderMessage.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.NewOrderMessage)
  return target;
}

size_t NewOrderMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.NewOrderMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewOrderMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.NewOrderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NewOrderMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewOrderMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.NewOrderMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.NewOrderMessage)
    MergeFrom(*source);
  }
}

void NewOrderMessage::MergeFrom(const NewOrderMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.NewOrderMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void NewOrderMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.NewOrderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewOrderMessage::CopyFrom(const NewOrderMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.NewOrderMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewOrderMessage::IsInitialized() const {
  return true;
}

void NewOrderMessage::InternalSwap(NewOrderMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata NewOrderMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapSuccess::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_SwapSuccess_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
}
class SwapSuccess::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const SwapSuccess* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
SwapSuccess::_Internal::trade(const SwapSuccess* msg) {
  return *msg->trade_;
}
void SwapSuccess::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
SwapSuccess::SwapSuccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SwapSuccess)
}
SwapSuccess::SwapSuccess(const SwapSuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SwapSuccess)
}

void SwapSuccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_ = nullptr;
}

SwapSuccess::~SwapSuccess() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SwapSuccess)
  SharedDtor();
}

void SwapSuccess::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trade_;
}

void SwapSuccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapSuccess& SwapSuccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapSuccess_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SwapSuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SwapSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SwapSuccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SwapSuccess.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapSuccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SwapSuccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SwapSuccess.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SwapSuccess)
  return target;
}

size_t SwapSuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SwapSuccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapSuccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SwapSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapSuccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapSuccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SwapSuccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SwapSuccess)
    MergeFrom(*source);
  }
}

void SwapSuccess::MergeFrom(const SwapSuccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SwapSuccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
}

void SwapSuccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SwapSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapSuccess::CopyFrom(const SwapSuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SwapSuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapSuccess::IsInitialized() const {
  return true;
}

void SwapSuccess::InternalSwap(SwapSuccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapSuccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapFailure::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_SwapFailure_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
}
class SwapFailure::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const SwapFailure* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
SwapFailure::_Internal::trade(const SwapFailure* msg) {
  return *msg->trade_;
}
void SwapFailure::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
SwapFailure::SwapFailure()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SwapFailure)
}
SwapFailure::SwapFailure(const SwapFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SwapFailure)
}

void SwapFailure::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trade_ = nullptr;
}

SwapFailure::~SwapFailure() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SwapFailure)
  SharedDtor();
}

void SwapFailure::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete trade_;
}

void SwapFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapFailure& SwapFailure::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapFailure_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void SwapFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SwapFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

const char* SwapFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SwapFailure.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapFailure::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SwapFailure)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SwapFailure.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SwapFailure)
  return target;
}

size_t SwapFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SwapFailure)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapFailure::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SwapFailure)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapFailure* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapFailure>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SwapFailure)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SwapFailure)
    MergeFrom(*source);
  }
}

void SwapFailure::MergeFrom(const SwapFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SwapFailure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
}

void SwapFailure::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SwapFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapFailure::CopyFrom(const SwapFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SwapFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapFailure::IsInitialized() const {
  return true;
}

void SwapFailure::InternalSwap(SwapFailure* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapFailure::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannelEvent_ChannelOpened::InitAsDefaultInstance() {
}
class RentedChannelEvent_ChannelOpened::_Internal {
 public:
};

RentedChannelEvent_ChannelOpened::RentedChannelEvent_ChannelOpened()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
}
RentedChannelEvent_ChannelOpened::RentedChannelEvent_ChannelOpened(const RentedChannelEvent_ChannelOpened& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  ::memcpy(&expireson_, &from.expireson_,
    static_cast<size_t>(reinterpret_cast<char*>(&openedon_) -
    reinterpret_cast<char*>(&expireson_)) + sizeof(openedon_));
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
}

void RentedChannelEvent_ChannelOpened::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expireson_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openedon_) -
      reinterpret_cast<char*>(&expireson_)) + sizeof(openedon_));
}

RentedChannelEvent_ChannelOpened::~RentedChannelEvent_ChannelOpened() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  SharedDtor();
}

void RentedChannelEvent_ChannelOpened::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentedChannelEvent_ChannelOpened::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannelEvent_ChannelOpened& RentedChannelEvent_ChannelOpened::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannelEvent_ChannelOpened_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void RentedChannelEvent_ChannelOpened::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expireson_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&openedon_) -
      reinterpret_cast<char*>(&expireson_)) + sizeof(openedon_));
  _internal_metadata_.Clear();
}

const char* RentedChannelEvent_ChannelOpened::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresOn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expireson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 openedOn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          openedon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannelEvent_ChannelOpened::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // int64 expiresOn = 2;
  if (this->expireson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expireson(), target);
  }

  // int64 openedOn = 3;
  if (this->openedon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_openedon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  return target;
}

size_t RentedChannelEvent_ChannelOpened::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // int64 expiresOn = 2;
  if (this->expireson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expireson());
  }

  // int64 openedOn = 3;
  if (this->openedon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_openedon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannelEvent_ChannelOpened::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannelEvent_ChannelOpened* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannelEvent_ChannelOpened>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
    MergeFrom(*source);
  }
}

void RentedChannelEvent_ChannelOpened::MergeFrom(const RentedChannelEvent_ChannelOpened& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.expireson() != 0) {
    _internal_set_expireson(from._internal_expireson());
  }
  if (from.openedon() != 0) {
    _internal_set_openedon(from._internal_openedon());
  }
}

void RentedChannelEvent_ChannelOpened::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannelEvent_ChannelOpened::CopyFrom(const RentedChannelEvent_ChannelOpened& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannelEvent_ChannelOpened::IsInitialized() const {
  return true;
}

void RentedChannelEvent_ChannelOpened::InternalSwap(RentedChannelEvent_ChannelOpened* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expireson_, other->expireson_);
  swap(openedon_, other->openedon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannelEvent_ChannelOpened::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannelEvent_ChannelExpiringSoon::InitAsDefaultInstance() {
}
class RentedChannelEvent_ChannelExpiringSoon::_Internal {
 public:
};

RentedChannelEvent_ChannelExpiringSoon::RentedChannelEvent_ChannelExpiringSoon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
}
RentedChannelEvent_ChannelExpiringSoon::RentedChannelEvent_ChannelExpiringSoon(const RentedChannelEvent_ChannelExpiringSoon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  expireson_ = from.expireson_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
}

void RentedChannelEvent_ChannelExpiringSoon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expireson_ = PROTOBUF_LONGLONG(0);
}

RentedChannelEvent_ChannelExpiringSoon::~RentedChannelEvent_ChannelExpiringSoon() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  SharedDtor();
}

void RentedChannelEvent_ChannelExpiringSoon::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentedChannelEvent_ChannelExpiringSoon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannelEvent_ChannelExpiringSoon& RentedChannelEvent_ChannelExpiringSoon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannelEvent_ChannelExpiringSoon_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void RentedChannelEvent_ChannelExpiringSoon::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expireson_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RentedChannelEvent_ChannelExpiringSoon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresOn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expireson_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannelEvent_ChannelExpiringSoon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // int64 expiresOn = 2;
  if (this->expireson() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expireson(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  return target;
}

size_t RentedChannelEvent_ChannelExpiringSoon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // int64 expiresOn = 2;
  if (this->expireson() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expireson());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannelEvent_ChannelExpiringSoon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannelEvent_ChannelExpiringSoon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannelEvent_ChannelExpiringSoon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
    MergeFrom(*source);
  }
}

void RentedChannelEvent_ChannelExpiringSoon::MergeFrom(const RentedChannelEvent_ChannelExpiringSoon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.expireson() != 0) {
    _internal_set_expireson(from._internal_expireson());
  }
}

void RentedChannelEvent_ChannelExpiringSoon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannelEvent_ChannelExpiringSoon::CopyFrom(const RentedChannelEvent_ChannelExpiringSoon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannelEvent_ChannelExpiringSoon::IsInitialized() const {
  return true;
}

void RentedChannelEvent_ChannelExpiringSoon::InternalSwap(RentedChannelEvent_ChannelExpiringSoon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expireson_, other->expireson_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannelEvent_ChannelExpiringSoon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannelEvent_ChannelClosed::InitAsDefaultInstance() {
}
class RentedChannelEvent_ChannelClosed::_Internal {
 public:
};

RentedChannelEvent_ChannelClosed::RentedChannelEvent_ChannelClosed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
}
RentedChannelEvent_ChannelClosed::RentedChannelEvent_ChannelClosed(const RentedChannelEvent_ChannelClosed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
}

void RentedChannelEvent_ChannelClosed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RentedChannelEvent_ChannelClosed::~RentedChannelEvent_ChannelClosed() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  SharedDtor();
}

void RentedChannelEvent_ChannelClosed::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentedChannelEvent_ChannelClosed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannelEvent_ChannelClosed& RentedChannelEvent_ChannelClosed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannelEvent_ChannelClosed_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void RentedChannelEvent_ChannelClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RentedChannelEvent_ChannelClosed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannelEvent_ChannelClosed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  return target;
}

size_t RentedChannelEvent_ChannelClosed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannelEvent_ChannelClosed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannelEvent_ChannelClosed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannelEvent_ChannelClosed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
    MergeFrom(*source);
  }
}

void RentedChannelEvent_ChannelClosed::MergeFrom(const RentedChannelEvent_ChannelClosed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
}

void RentedChannelEvent_ChannelClosed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannelEvent_ChannelClosed::CopyFrom(const RentedChannelEvent_ChannelClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannelEvent_ChannelClosed::IsInitialized() const {
  return true;
}

void RentedChannelEvent_ChannelClosed::InternalSwap(RentedChannelEvent_ChannelClosed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannelEvent_ChannelClosed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannelEvent::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_RentedChannelEvent_default_instance_.channelopened_ = const_cast< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened*>(
      ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened::internal_default_instance());
  ::io::stakenet::orderbook::protos::_RentedChannelEvent_default_instance_.channelexpiringsoon_ = const_cast< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon*>(
      ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon::internal_default_instance());
  ::io::stakenet::orderbook::protos::_RentedChannelEvent_default_instance_.channelclosed_ = const_cast< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed*>(
      ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed::internal_default_instance());
}
class RentedChannelEvent::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened& channelopened(const RentedChannelEvent* msg);
  static const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon& channelexpiringsoon(const RentedChannelEvent* msg);
  static const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed& channelclosed(const RentedChannelEvent* msg);
};

const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened&
RentedChannelEvent::_Internal::channelopened(const RentedChannelEvent* msg) {
  return *msg->value_.channelopened_;
}
const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon&
RentedChannelEvent::_Internal::channelexpiringsoon(const RentedChannelEvent* msg) {
  return *msg->value_.channelexpiringsoon_;
}
const ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed&
RentedChannelEvent::_Internal::channelclosed(const RentedChannelEvent* msg) {
  return *msg->value_.channelclosed_;
}
void RentedChannelEvent::set_allocated_channelopened(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened* channelopened) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (channelopened) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channelopened = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelopened, submessage_arena);
    }
    set_has_channelopened();
    value_.channelopened_ = channelopened;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentedChannelEvent.channelOpened)
}
void RentedChannelEvent::set_allocated_channelexpiringsoon(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon* channelexpiringsoon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (channelexpiringsoon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channelexpiringsoon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelexpiringsoon, submessage_arena);
    }
    set_has_channelexpiringsoon();
    value_.channelexpiringsoon_ = channelexpiringsoon;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentedChannelEvent.channelExpiringSoon)
}
void RentedChannelEvent::set_allocated_channelclosed(::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed* channelclosed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (channelclosed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channelclosed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channelclosed, submessage_arena);
    }
    set_has_channelclosed();
    value_.channelclosed_ = channelclosed;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentedChannelEvent.channelClosed)
}
RentedChannelEvent::RentedChannelEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentedChannelEvent)
}
RentedChannelEvent::RentedChannelEvent(const RentedChannelEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kChannelOpened: {
      _internal_mutable_channelopened()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened::MergeFrom(from._internal_channelopened());
      break;
    }
    case kChannelExpiringSoon: {
      _internal_mutable_channelexpiringsoon()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon::MergeFrom(from._internal_channelexpiringsoon());
      break;
    }
    case kChannelClosed: {
      _internal_mutable_channelclosed()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed::MergeFrom(from._internal_channelclosed());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentedChannelEvent)
}

void RentedChannelEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto.base);
  clear_has_value();
}

RentedChannelEvent::~RentedChannelEvent() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentedChannelEvent)
  SharedDtor();
}

void RentedChannelEvent::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void RentedChannelEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannelEvent& RentedChannelEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannelEvent_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void RentedChannelEvent::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  switch (value_case()) {
    case kChannelOpened: {
      delete value_.channelopened_;
      break;
    }
    case kChannelExpiringSoon: {
      delete value_.channelexpiringsoon_;
      break;
    }
    case kChannelClosed: {
      delete value_.channelclosed_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RentedChannelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* RentedChannelEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened channelOpened = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelopened(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon channelExpiringSoon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelexpiringsoon(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed channelClosed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channelclosed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannelEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened channelOpened = 1;
  if (_internal_has_channelopened()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channelopened(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon channelExpiringSoon = 2;
  if (_internal_has_channelexpiringsoon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channelexpiringsoon(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed channelClosed = 3;
  if (_internal_has_channelclosed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channelclosed(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentedChannelEvent)
  return target;
}

size_t RentedChannelEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelOpened channelOpened = 1;
    case kChannelOpened: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.channelopened_);
      break;
    }
    // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelExpiringSoon channelExpiringSoon = 2;
    case kChannelExpiringSoon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.channelexpiringsoon_);
      break;
    }
    // .io.stakenet.orderbook.protos.RentedChannelEvent.ChannelClosed channelClosed = 3;
    case kChannelClosed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.channelclosed_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannelEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannelEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannelEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentedChannelEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentedChannelEvent)
    MergeFrom(*source);
  }
}

void RentedChannelEvent::MergeFrom(const RentedChannelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kChannelOpened: {
      _internal_mutable_channelopened()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened::MergeFrom(from._internal_channelopened());
      break;
    }
    case kChannelExpiringSoon: {
      _internal_mutable_channelexpiringsoon()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon::MergeFrom(from._internal_channelexpiringsoon());
      break;
    }
    case kChannelClosed: {
      _internal_mutable_channelclosed()->::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed::MergeFrom(from._internal_channelclosed());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void RentedChannelEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannelEvent::CopyFrom(const RentedChannelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentedChannelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannelEvent::IsInitialized() const {
  return true;
}

void RentedChannelEvent::InternalSwap(RentedChannelEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannelEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaintenanceInProgress::InitAsDefaultInstance() {
}
class MaintenanceInProgress::_Internal {
 public:
};

MaintenanceInProgress::MaintenanceInProgress()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.MaintenanceInProgress)
}
MaintenanceInProgress::MaintenanceInProgress(const MaintenanceInProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.MaintenanceInProgress)
}

void MaintenanceInProgress::SharedCtor() {
}

MaintenanceInProgress::~MaintenanceInProgress() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.MaintenanceInProgress)
  SharedDtor();
}

void MaintenanceInProgress::SharedDtor() {
}

void MaintenanceInProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaintenanceInProgress& MaintenanceInProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaintenanceInProgress_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MaintenanceInProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MaintenanceInProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaintenanceInProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.MaintenanceInProgress)
  return target;
}

size_t MaintenanceInProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaintenanceInProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const MaintenanceInProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaintenanceInProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.MaintenanceInProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.MaintenanceInProgress)
    MergeFrom(*source);
  }
}

void MaintenanceInProgress::MergeFrom(const MaintenanceInProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MaintenanceInProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintenanceInProgress::CopyFrom(const MaintenanceInProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.MaintenanceInProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintenanceInProgress::IsInitialized() const {
  return true;
}

void MaintenanceInProgress::InternalSwap(MaintenanceInProgress* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaintenanceInProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MaintenanceCompleted::InitAsDefaultInstance() {
}
class MaintenanceCompleted::_Internal {
 public:
};

MaintenanceCompleted::MaintenanceCompleted()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.MaintenanceCompleted)
}
MaintenanceCompleted::MaintenanceCompleted(const MaintenanceCompleted& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.MaintenanceCompleted)
}

void MaintenanceCompleted::SharedCtor() {
}

MaintenanceCompleted::~MaintenanceCompleted() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.MaintenanceCompleted)
  SharedDtor();
}

void MaintenanceCompleted::SharedDtor() {
}

void MaintenanceCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MaintenanceCompleted& MaintenanceCompleted::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MaintenanceCompleted_stakenet_2forderbook_2fevents_2eproto.base);
  return *internal_default_instance();
}


void MaintenanceCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* MaintenanceCompleted::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MaintenanceCompleted::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.MaintenanceCompleted)
  return target;
}

size_t MaintenanceCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MaintenanceCompleted::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const MaintenanceCompleted* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MaintenanceCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.MaintenanceCompleted)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.MaintenanceCompleted)
    MergeFrom(*source);
  }
}

void MaintenanceCompleted::MergeFrom(const MaintenanceCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MaintenanceCompleted::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintenanceCompleted::CopyFrom(const MaintenanceCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.MaintenanceCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintenanceCompleted::IsInitialized() const {
  return true;
}

void MaintenanceCompleted::InternalSwap(MaintenanceCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MaintenanceCompleted::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::MyOrderMatched* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::MyOrderMatched >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::MyOrderMatched >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::MyMatchedOrderCanceled >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::OrderPlaced* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::OrderPlaced >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::OrderPlaced >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::OrderCanceled* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::OrderCanceled >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::OrderCanceled >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::OrdersMatched* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::OrdersMatched >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::OrdersMatched >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::NewOrderMessage* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::NewOrderMessage >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::NewOrderMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SwapSuccess* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SwapSuccess >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SwapSuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SwapFailure* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SwapFailure >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SwapFailure >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelOpened >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelExpiringSoon >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentedChannelEvent_ChannelClosed >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentedChannelEvent* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentedChannelEvent >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentedChannelEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::MaintenanceInProgress* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::MaintenanceInProgress >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::MaintenanceInProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::MaintenanceCompleted* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::MaintenanceCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::MaintenanceCompleted >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
