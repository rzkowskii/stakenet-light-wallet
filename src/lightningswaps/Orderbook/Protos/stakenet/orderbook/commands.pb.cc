// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stakenet/orderbook/commands.proto

#include "commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto;
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
class CommandFailedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandFailed> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  const ::io::stakenet::orderbook::protos::ServerInMaintenance* serverinmaintenance_;
} _CommandFailed_default_instance_;
class PingCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingCommand> _instance;
} _PingCommand_default_instance_;
class PingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingResponse> _instance;
} _PingResponse_default_instance_;
class GetTradingPairsCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTradingPairsCommand> _instance;
} _GetTradingPairsCommand_default_instance_;
class GetTradingPairsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTradingPairsResponse> _instance;
} _GetTradingPairsResponse_default_instance_;
class SubscribeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeCommand> _instance;
} _SubscribeCommand_default_instance_;
class SubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeResponse> _instance;
} _SubscribeResponse_default_instance_;
class UnsubscribeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeCommand> _instance;
} _UnsubscribeCommand_default_instance_;
class UnsubscribeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnsubscribeResponse> _instance;
} _UnsubscribeResponse_default_instance_;
class GetOpenOrdersCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOpenOrdersCommand> _instance;
} _GetOpenOrdersCommand_default_instance_;
class GetOpenOrdersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOpenOrdersResponse> _instance;
} _GetOpenOrdersResponse_default_instance_;
class GetHistoricTradesCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHistoricTradesCommand> _instance;
} _GetHistoricTradesCommand_default_instance_;
class GetHistoricTradesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHistoricTradesResponse> _instance;
} _GetHistoricTradesResponse_default_instance_;
class GetBarsPricesCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBarsPricesCommand> _instance;
} _GetBarsPricesCommand_default_instance_;
class GetBarsPricesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetBarsPricesResponse> _instance;
} _GetBarsPricesResponse_default_instance_;
class PlaceOrderCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderCommand> _instance;
} _PlaceOrderCommand_default_instance_;
class PlaceOrderResponse_MyOrderPlacedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderResponse_MyOrderPlaced> _instance;
} _PlaceOrderResponse_MyOrderPlaced_default_instance_;
class PlaceOrderResponse_MyOrderRejectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderResponse_MyOrderRejected> _instance;
} _PlaceOrderResponse_MyOrderRejected_default_instance_;
class PlaceOrderResponse_MyOrderMatchedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderResponse_MyOrderMatched> _instance;
} _PlaceOrderResponse_MyOrderMatched_default_instance_;
class PlaceOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PlaceOrderResponse> _instance;
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* myorderplaced_;
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* myorderrejected_;
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* myordermatched_;
} _PlaceOrderResponse_default_instance_;
class GetOpenOrderByIdCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOpenOrderByIdCommand> _instance;
} _GetOpenOrderByIdCommand_default_instance_;
class GetOpenOrderByIdResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetOpenOrderByIdResponse> _instance;
} _GetOpenOrderByIdResponse_default_instance_;
class CancelOpenOrderCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOpenOrderCommand> _instance;
} _CancelOpenOrderCommand_default_instance_;
class CancelOpenOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelOpenOrderResponse> _instance;
} _CancelOpenOrderResponse_default_instance_;
class SendOrderMessageCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrderMessageCommand> _instance;
} _SendOrderMessageCommand_default_instance_;
class SendOrderMessageResponse_OrderMessageSentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrderMessageResponse_OrderMessageSent> _instance;
} _SendOrderMessageResponse_OrderMessageSent_default_instance_;
class SendOrderMessageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendOrderMessageResponse> _instance;
  const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* ordermessagesent_;
  const ::io::stakenet::orderbook::protos::MatchedOrderNotFound* matchedordernotfound_;
} _SendOrderMessageResponse_default_instance_;
class CancelMatchedOrderCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelMatchedOrderCommand> _instance;
} _CancelMatchedOrderCommand_default_instance_;
class CancelMatchedOrderResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelMatchedOrderResponse> _instance;
} _CancelMatchedOrderResponse_default_instance_;
class MatchedOrderNotFoundDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MatchedOrderNotFound> _instance;
} _MatchedOrderNotFound_default_instance_;
class CleanTradingPairOrdersCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanTradingPairOrdersCommand> _instance;
} _CleanTradingPairOrdersCommand_default_instance_;
class CleanTradingPairOrdersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CleanTradingPairOrdersResponse> _instance;
} _CleanTradingPairOrdersResponse_default_instance_;
class GetLndPaymentInvoiceCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLndPaymentInvoiceCommand> _instance;
} _GetLndPaymentInvoiceCommand_default_instance_;
class GetLndPaymentInvoiceResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLndPaymentInvoiceResponse> _instance;
} _GetLndPaymentInvoiceResponse_default_instance_;
class GenerateInvoiceToRentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToRentChannelCommand> _instance;
} _GenerateInvoiceToRentChannelCommand_default_instance_;
class GenerateInvoiceToRentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToRentChannelResponse> _instance;
} _GenerateInvoiceToRentChannelResponse_default_instance_;
class GeneratePaymentHashToRentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneratePaymentHashToRentChannelCommand> _instance;
} _GeneratePaymentHashToRentChannelCommand_default_instance_;
class GeneratePaymentHashToRentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneratePaymentHashToRentChannelResponse> _instance;
} _GeneratePaymentHashToRentChannelResponse_default_instance_;
class RentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentChannelCommand> _instance;
} _RentChannelCommand_default_instance_;
class RentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentChannelResponse> _instance;
} _RentChannelResponse_default_instance_;
class GetChannelStatusCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelStatusCommand> _instance;
} _GetChannelStatusCommand_default_instance_;
class GetChannelStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetChannelStatusResponse> _instance;
  const ::io::stakenet::orderbook::protos::LndChannelStatus* lnd_;
  const ::io::stakenet::orderbook::protos::ConnextChannelStatus* connext_;
} _GetChannelStatusResponse_default_instance_;
class LndChannelStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LndChannelStatus> _instance;
} _LndChannelStatus_default_instance_;
class ConnextChannelStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextChannelStatus> _instance;
} _ConnextChannelStatus_default_instance_;
class GetFeeToRentChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToRentChannelCommand> _instance;
} _GetFeeToRentChannelCommand_default_instance_;
class GetFeeToRentChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToRentChannelResponse> _instance;
} _GetFeeToRentChannelResponse_default_instance_;
class RefundFeeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefundFeeCommand> _instance;
} _RefundFeeCommand_default_instance_;
class RefundFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefundFeeResponse> _instance;
} _RefundFeeResponse_default_instance_;
class GetRefundableAmountCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRefundableAmountCommand> _instance;
} _GetRefundableAmountCommand_default_instance_;
class GetRefundableAmountResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetRefundableAmountResponse> _instance;
} _GetRefundableAmountResponse_default_instance_;
class GenerateInvoiceToExtendRentedChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToExtendRentedChannelCommand> _instance;
} _GenerateInvoiceToExtendRentedChannelCommand_default_instance_;
class GenerateInvoiceToExtendRentedChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateInvoiceToExtendRentedChannelResponse> _instance;
} _GenerateInvoiceToExtendRentedChannelResponse_default_instance_;
class GeneratePaymentHashToExtendConnextRentedChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneratePaymentHashToExtendConnextRentedChannelCommand> _instance;
} _GeneratePaymentHashToExtendConnextRentedChannelCommand_default_instance_;
class GeneratePaymentHashToExtendConnextRentedChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeneratePaymentHashToExtendConnextRentedChannelResponse> _instance;
} _GeneratePaymentHashToExtendConnextRentedChannelResponse_default_instance_;
class GetFeeToExtendRentedChannelCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToExtendRentedChannelCommand> _instance;
} _GetFeeToExtendRentedChannelCommand_default_instance_;
class GetFeeToExtendRentedChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetFeeToExtendRentedChannelResponse> _instance;
} _GetFeeToExtendRentedChannelResponse_default_instance_;
class ExtendRentedChannelTimeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtendRentedChannelTimeCommand> _instance;
} _ExtendRentedChannelTimeCommand_default_instance_;
class ExtendRentedChannelTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtendRentedChannelTimeResponse> _instance;
} _ExtendRentedChannelTimeResponse_default_instance_;
class RegisterPublicKeyCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPublicKeyCommand> _instance;
} _RegisterPublicKeyCommand_default_instance_;
class RegisterPublicKeyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPublicKeyResponse> _instance;
} _RegisterPublicKeyResponse_default_instance_;
class RegisterPublicIdentifierCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPublicIdentifierCommand> _instance;
} _RegisterPublicIdentifierCommand_default_instance_;
class RegisterPublicIdentifierResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterPublicIdentifierResponse> _instance;
} _RegisterPublicIdentifierResponse_default_instance_;
class GetConnextPaymentInformationCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnextPaymentInformationCommand> _instance;
} _GetConnextPaymentInformationCommand_default_instance_;
class GetConnextPaymentInformationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnextPaymentInformationResponse> _instance;
} _GetConnextPaymentInformationResponse_default_instance_;
class GetConnextChannelContractDeploymentFeeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnextChannelContractDeploymentFeeCommand> _instance;
} _GetConnextChannelContractDeploymentFeeCommand_default_instance_;
class GetConnextChannelContractDeploymentFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetConnextChannelContractDeploymentFeeResponse> _instance;
} _GetConnextChannelContractDeploymentFeeResponse_default_instance_;
class RegisterConnextChannelContractDeploymentFeeCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterConnextChannelContractDeploymentFeeCommand> _instance;
} _RegisterConnextChannelContractDeploymentFeeCommand_default_instance_;
class RegisterConnextChannelContractDeploymentFeeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterConnextChannelContractDeploymentFeeResponse> _instance;
} _RegisterConnextChannelContractDeploymentFeeResponse_default_instance_;
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
static void InitDefaultsscc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CancelMatchedOrderCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CancelMatchedOrderResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CancelOpenOrderCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CancelOpenOrderCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CancelOpenOrderCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CancelOpenOrderResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CancelOpenOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CancelOpenOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CleanTradingPairOrdersCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CleanTradingPairOrdersResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_CommandFailed_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::CommandFailed();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::CommandFailed::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_ConnextChannelStatus_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::ConnextChannelStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::ConnextChannelStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_ExtendRentedChannelTimeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_ExtendRentedChannelTimeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GenerateInvoiceToExtendRentedChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GenerateInvoiceToExtendRentedChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GeneratePaymentHashToExtendConnextRentedChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GeneratePaymentHashToExtendConnextRentedChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetBarsPricesCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetBarsPricesCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetBarsPricesCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetBarsPricesResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetBarsPricesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetBarsPricesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetChannelStatusCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetChannelStatusCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetChannelStatusCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetChannelStatusResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetChannelStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetChannelStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetConnextChannelContractDeploymentFeeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetConnextChannelContractDeploymentFeeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetConnextPaymentInformationCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetConnextPaymentInformationResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetFeeToExtendRentedChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetFeeToExtendRentedChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetFeeToRentChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetFeeToRentChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetHistoricTradesCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetHistoricTradesCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetHistoricTradesCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetHistoricTradesResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetHistoricTradesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetHistoricTradesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetLndPaymentInvoiceCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetLndPaymentInvoiceResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetOpenOrderByIdCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetOpenOrderByIdResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetOpenOrdersCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetOpenOrdersCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetOpenOrdersCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetOpenOrdersResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetOpenOrdersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetOpenOrdersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetRefundableAmountCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetRefundableAmountCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetRefundableAmountCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetRefundableAmountResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetRefundableAmountResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetRefundableAmountResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetTradingPairsCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetTradingPairsCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetTradingPairsCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_GetTradingPairsResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::GetTradingPairsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::GetTradingPairsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_LndChannelStatus_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::LndChannelStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::LndChannelStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_MatchedOrderNotFound_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::MatchedOrderNotFound();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::MatchedOrderNotFound::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PingCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PingCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PingCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PingResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PlaceOrderCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PlaceOrderCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PlaceOrderCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PlaceOrderResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PlaceOrderResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PlaceOrderResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderMatched_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderPlaced_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderRejected_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RefundFeeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RefundFeeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RefundFeeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RefundFeeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RefundFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RefundFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,
      &scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterConnextChannelContractDeploymentFeeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterConnextChannelContractDeploymentFeeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterPublicIdentifierCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterPublicIdentifierResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterPublicKeyCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RegisterPublicKeyResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentChannelCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentChannelCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentChannelCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentChannelResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SendOrderMessageCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SendOrderMessageCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SendOrderMessageCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SendOrderMessageResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SendOrderMessageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SendOrderMessageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto.base,
      &scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto.base,}};

static void InitDefaultsscc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SendOrderMessageResponse_OrderMessageSent_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SubscribeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SubscribeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SubscribeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_SubscribeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::SubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::SubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto}, {
      &scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_UnsubscribeCommand_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::UnsubscribeCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::UnsubscribeCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto}, {}};

static void InitDefaultsscc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_UnsubscribeResponse_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::UnsubscribeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::UnsubscribeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stakenet_2forderbook_2fcommands_2eproto[68];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_stakenet_2forderbook_2fcommands_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stakenet_2forderbook_2fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stakenet_2forderbook_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CommandFailed, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CommandFailed, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::CommandFailedDefaultTypeInternal, reason_),
  offsetof(::io::stakenet::orderbook::protos::CommandFailedDefaultTypeInternal, serverinmaintenance_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CommandFailed, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PingCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetTradingPairsCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetTradingPairsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetTradingPairsResponse, tradingpairs_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetTradingPairsResponse, paysfees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeCommand, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeCommand, retrieveorderssummary_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeResponse, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeResponse, summarybids_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SubscribeResponse, summaryasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::UnsubscribeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::UnsubscribeCommand, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::UnsubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::UnsubscribeResponse, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersCommand, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersResponse, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersResponse, summarybids_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrdersResponse, summaryasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesCommand, limit_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesCommand, lastseentradeid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesCommand, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetHistoricTradesResponse, trades_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, resolution_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, from_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, to_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesCommand, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetBarsPricesResponse, barprices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderCommand, order_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderCommand, paymenthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched, trade_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched, ordermatchedwith_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::PlaceOrderResponseDefaultTypeInternal, myorderplaced_),
  offsetof(::io::stakenet::orderbook::protos::PlaceOrderResponseDefaultTypeInternal, myorderrejected_),
  offsetof(::io::stakenet::orderbook::protos::PlaceOrderResponseDefaultTypeInternal, myordermatched_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::PlaceOrderResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelOpenOrderCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelOpenOrderCommand, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelOpenOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelOpenOrderResponse, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageCommand, orderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageCommand, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::SendOrderMessageResponseDefaultTypeInternal, ordermessagesent_),
  offsetof(::io::stakenet::orderbook::protos::SendOrderMessageResponseDefaultTypeInternal, matchedordernotfound_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::SendOrderMessageResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelMatchedOrderCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelMatchedOrderCommand, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelMatchedOrderResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CancelMatchedOrderResponse, trade_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MatchedOrderNotFound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::MatchedOrderNotFound, orderid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand, tradingpair_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse, openordersremoved_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse, matchedordersremoved_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse, paymentrequest_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse, nofeerequired_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand, capacity_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, capacity_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, lifetimeseconds_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse, paymentrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand, capacity_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, capacity_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, lifetimeseconds_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse, paymenthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelCommand, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelCommand, payingcurrency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, nodepublickey_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, fundingtransaction_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, outputindex_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, fundingtxidstr_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentChannelResponse, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusCommand, channelid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusResponse, channelid_),
  offsetof(::io::stakenet::orderbook::protos::GetChannelStatusResponseDefaultTypeInternal, lnd_),
  offsetof(::io::stakenet::orderbook::protos::GetChannelStatusResponseDefaultTypeInternal, connext_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetChannelStatusResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, status_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, expiresat_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, closingtype_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, closedby_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannelStatus, closedon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannelStatus, status_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannelStatus, expiresat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand, capacity_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse, fee_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse, rentingfee_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse, onchainfees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeCommand, refundedpaymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeCommand, refundedfees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeResponse, amount_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeResponse, refundedon_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundFeeResponse, refundedfees_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountCommand, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountCommand, refundablepayments_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetRefundableAmountResponse, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse, lifetimeseconds_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse, paymentrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse, lifetimeseconds_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse, paymenthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand, payingcurrency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand, lifetimeseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse, fee_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand, payingcurrency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse, expiresat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyCommand, publickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicKeyResponse, publickey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand, publicidentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse, publicidentifier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand, currency_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse, currency_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse, publicidentifier_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse, nofeerequired_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse, hubaddress_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand, transactionhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse, transactionhash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::stakenet::orderbook::protos::CommandFailed)},
  { 8, -1, sizeof(::io::stakenet::orderbook::protos::PingCommand)},
  { 13, -1, sizeof(::io::stakenet::orderbook::protos::PingResponse)},
  { 18, -1, sizeof(::io::stakenet::orderbook::protos::GetTradingPairsCommand)},
  { 23, -1, sizeof(::io::stakenet::orderbook::protos::GetTradingPairsResponse)},
  { 30, -1, sizeof(::io::stakenet::orderbook::protos::SubscribeCommand)},
  { 37, -1, sizeof(::io::stakenet::orderbook::protos::SubscribeResponse)},
  { 45, -1, sizeof(::io::stakenet::orderbook::protos::UnsubscribeCommand)},
  { 51, -1, sizeof(::io::stakenet::orderbook::protos::UnsubscribeResponse)},
  { 57, -1, sizeof(::io::stakenet::orderbook::protos::GetOpenOrdersCommand)},
  { 63, -1, sizeof(::io::stakenet::orderbook::protos::GetOpenOrdersResponse)},
  { 71, -1, sizeof(::io::stakenet::orderbook::protos::GetHistoricTradesCommand)},
  { 79, -1, sizeof(::io::stakenet::orderbook::protos::GetHistoricTradesResponse)},
  { 85, -1, sizeof(::io::stakenet::orderbook::protos::GetBarsPricesCommand)},
  { 95, -1, sizeof(::io::stakenet::orderbook::protos::GetBarsPricesResponse)},
  { 101, -1, sizeof(::io::stakenet::orderbook::protos::PlaceOrderCommand)},
  { 108, -1, sizeof(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced)},
  { 114, -1, sizeof(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected)},
  { 120, -1, sizeof(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched)},
  { 127, -1, sizeof(::io::stakenet::orderbook::protos::PlaceOrderResponse)},
  { 136, -1, sizeof(::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand)},
  { 142, -1, sizeof(::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse)},
  { 148, -1, sizeof(::io::stakenet::orderbook::protos::CancelOpenOrderCommand)},
  { 154, -1, sizeof(::io::stakenet::orderbook::protos::CancelOpenOrderResponse)},
  { 160, -1, sizeof(::io::stakenet::orderbook::protos::SendOrderMessageCommand)},
  { 167, -1, sizeof(::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent)},
  { 173, -1, sizeof(::io::stakenet::orderbook::protos::SendOrderMessageResponse)},
  { 181, -1, sizeof(::io::stakenet::orderbook::protos::CancelMatchedOrderCommand)},
  { 187, -1, sizeof(::io::stakenet::orderbook::protos::CancelMatchedOrderResponse)},
  { 193, -1, sizeof(::io::stakenet::orderbook::protos::MatchedOrderNotFound)},
  { 199, -1, sizeof(::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand)},
  { 205, -1, sizeof(::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse)},
  { 213, -1, sizeof(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand)},
  { 220, -1, sizeof(::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse)},
  { 228, -1, sizeof(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand)},
  { 237, -1, sizeof(::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse)},
  { 247, -1, sizeof(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand)},
  { 256, -1, sizeof(::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse)},
  { 266, -1, sizeof(::io::stakenet::orderbook::protos::RentChannelCommand)},
  { 273, -1, sizeof(::io::stakenet::orderbook::protos::RentChannelResponse)},
  { 285, -1, sizeof(::io::stakenet::orderbook::protos::GetChannelStatusCommand)},
  { 291, -1, sizeof(::io::stakenet::orderbook::protos::GetChannelStatusResponse)},
  { 300, -1, sizeof(::io::stakenet::orderbook::protos::LndChannelStatus)},
  { 310, -1, sizeof(::io::stakenet::orderbook::protos::ConnextChannelStatus)},
  { 317, -1, sizeof(::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand)},
  { 326, -1, sizeof(::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse)},
  { 334, -1, sizeof(::io::stakenet::orderbook::protos::RefundFeeCommand)},
  { 342, -1, sizeof(::io::stakenet::orderbook::protos::RefundFeeResponse)},
  { 351, -1, sizeof(::io::stakenet::orderbook::protos::GetRefundableAmountCommand)},
  { 359, -1, sizeof(::io::stakenet::orderbook::protos::GetRefundableAmountResponse)},
  { 366, -1, sizeof(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand)},
  { 374, -1, sizeof(::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse)},
  { 383, -1, sizeof(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand)},
  { 391, -1, sizeof(::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse)},
  { 400, -1, sizeof(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand)},
  { 408, -1, sizeof(::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse)},
  { 414, -1, sizeof(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand)},
  { 421, -1, sizeof(::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse)},
  { 429, -1, sizeof(::io::stakenet::orderbook::protos::RegisterPublicKeyCommand)},
  { 436, -1, sizeof(::io::stakenet::orderbook::protos::RegisterPublicKeyResponse)},
  { 443, -1, sizeof(::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand)},
  { 450, -1, sizeof(::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse)},
  { 457, -1, sizeof(::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand)},
  { 463, -1, sizeof(::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse)},
  { 472, -1, sizeof(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand)},
  { 477, -1, sizeof(::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse)},
  { 484, -1, sizeof(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand)},
  { 490, -1, sizeof(::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CommandFailed_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PingCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetTradingPairsCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetTradingPairsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SubscribeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_UnsubscribeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_UnsubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetOpenOrdersCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetOpenOrdersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetHistoricTradesCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetHistoricTradesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetBarsPricesCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetBarsPricesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PlaceOrderCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderPlaced_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderRejected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderMatched_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetOpenOrderByIdCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetOpenOrderByIdResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CancelOpenOrderCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CancelOpenOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SendOrderMessageCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SendOrderMessageResponse_OrderMessageSent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_SendOrderMessageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CancelMatchedOrderCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CancelMatchedOrderResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_MatchedOrderNotFound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CleanTradingPairOrdersCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_CleanTradingPairOrdersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetLndPaymentInvoiceCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetLndPaymentInvoiceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetChannelStatusCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetChannelStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_LndChannelStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_ConnextChannelStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetFeeToRentChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetFeeToRentChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RefundFeeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RefundFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetRefundableAmountCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetRefundableAmountResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GenerateInvoiceToExtendRentedChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GenerateInvoiceToExtendRentedChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GeneratePaymentHashToExtendConnextRentedChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GeneratePaymentHashToExtendConnextRentedChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetFeeToExtendRentedChannelCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetFeeToExtendRentedChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_ExtendRentedChannelTimeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_ExtendRentedChannelTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterPublicKeyCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterPublicKeyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterPublicIdentifierCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterPublicIdentifierResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetConnextPaymentInformationCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetConnextPaymentInformationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetConnextChannelContractDeploymentFeeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_GetConnextChannelContractDeploymentFeeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterConnextChannelContractDeploymentFeeCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RegisterConnextChannelContractDeploymentFeeResponse_default_instance_),
};

const char descriptor_table_protodef_stakenet_2forderbook_2fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!stakenet/orderbook/commands.proto\022\034io."
  "stakenet.orderbook.protos\032\037stakenet/orde"
  "rbook/models.proto\"|\n\rCommandFailed\022\020\n\006r"
  "eason\030\001 \001(\tH\000\022P\n\023serverInMaintenance\030\002 \001"
  "(\01321.io.stakenet.orderbook.protos.Server"
  "InMaintenanceH\000B\007\n\005value\"\r\n\013PingCommand\""
  "\016\n\014PingResponse\"\030\n\026GetTradingPairsComman"
  "d\"l\n\027GetTradingPairsResponse\022\?\n\014tradingP"
  "airs\030\001 \003(\0132).io.stakenet.orderbook.proto"
  "s.TradingPair\022\020\n\010paysFees\030\002 \001(\010\"F\n\020Subsc"
  "ribeCommand\022\023\n\013tradingPair\030\001 \001(\t\022\035\n\025retr"
  "ieveOrdersSummary\030\002 \001(\010\"\252\001\n\021SubscribeRes"
  "ponse\022\023\n\013tradingPair\030\001 \001(\t\022\?\n\013summaryBid"
  "s\030\002 \003(\0132*.io.stakenet.orderbook.protos.O"
  "rderSummary\022\?\n\013summaryAsks\030\003 \003(\0132*.io.st"
  "akenet.orderbook.protos.OrderSummary\")\n\022"
  "UnsubscribeCommand\022\023\n\013tradingPair\030\001 \001(\t\""
  "*\n\023UnsubscribeResponse\022\023\n\013tradingPair\030\001 "
  "\001(\t\"+\n\024GetOpenOrdersCommand\022\023\n\013tradingPa"
  "ir\030\001 \001(\t\"\306\001\n\025GetOpenOrdersResponse\022\023\n\013tr"
  "adingPair\030\001 \001(\t\022\?\n\013summaryBids\030\004 \003(\0132*.i"
  "o.stakenet.orderbook.protos.OrderSummary"
  "\022\?\n\013summaryAsks\030\005 \003(\0132*.io.stakenet.orde"
  "rbook.protos.OrderSummaryJ\004\010\002\020\003J\004\010\003\020\004R\004b"
  "idsR\004asks\"W\n\030GetHistoricTradesCommand\022\r\n"
  "\005limit\030\001 \001(\005\022\027\n\017lastSeenTradeId\030\002 \001(\t\022\023\n"
  "\013tradingPair\030\003 \001(\t\"P\n\031GetHistoricTradesR"
  "esponse\0223\n\006trades\030\001 \003(\0132#.io.stakenet.or"
  "derbook.protos.Trade\"h\n\024GetBarsPricesCom"
  "mand\022\023\n\013tradingPair\030\001 \001(\t\022\022\n\nresolution\030"
  "\002 \001(\t\022\014\n\004from\030\003 \001(\003\022\n\n\002to\030\004 \001(\003\022\r\n\005limit"
  "\030\005 \001(\005\"S\n\025GetBarsPricesResponse\022:\n\tbarPr"
  "ices\030\001 \003(\0132\'.io.stakenet.orderbook.proto"
  "s.BarPrices\"\\\n\021PlaceOrderCommand\0222\n\005orde"
  "r\030\001 \001(\0132#.io.stakenet.orderbook.protos.O"
  "rder\022\023\n\013paymentHash\030\002 \001(\014\"\234\004\n\022PlaceOrder"
  "Response\022W\n\rmyOrderPlaced\030\001 \001(\0132>.io.sta"
  "kenet.orderbook.protos.PlaceOrderRespons"
  "e.MyOrderPlacedH\000\022[\n\017myOrderRejected\030\002 \001"
  "(\0132@.io.stakenet.orderbook.protos.PlaceO"
  "rderResponse.MyOrderRejectedH\000\022Y\n\016myOrde"
  "rMatched\030\003 \001(\0132\?.io.stakenet.orderbook.p"
  "rotos.PlaceOrderResponse.MyOrderMatchedH"
  "\000\032C\n\rMyOrderPlaced\0222\n\005order\030\001 \001(\0132#.io.s"
  "takenet.orderbook.protos.Order\032!\n\017MyOrde"
  "rRejected\022\016\n\006reason\030\001 \001(\t\032\203\001\n\016MyOrderMat"
  "ched\0222\n\005trade\030\001 \001(\0132#.io.stakenet.orderb"
  "ook.protos.Trade\022=\n\020orderMatchedWith\030\002 \001"
  "(\0132#.io.stakenet.orderbook.protos.OrderB"
  "\007\n\005value\"*\n\027GetOpenOrderByIdCommand\022\017\n\007o"
  "rderId\030\001 \001(\t\"N\n\030GetOpenOrderByIdResponse"
  "\0222\n\005order\030\001 \001(\0132#.io.stakenet.orderbook."
  "protos.Order\")\n\026CancelOpenOrderCommand\022\017"
  "\n\007orderId\030\001 \001(\t\"M\n\027CancelOpenOrderRespon"
  "se\0222\n\005order\030\001 \001(\0132#.io.stakenet.orderboo"
  "k.protos.Order\";\n\027SendOrderMessageComman"
  "d\022\017\n\007orderId\030\001 \001(\t\022\017\n\007message\030\002 \001(\014\"\201\002\n\030"
  "SendOrderMessageResponse\022c\n\020orderMessage"
  "Sent\030\001 \001(\0132G.io.stakenet.orderbook.proto"
  "s.SendOrderMessageResponse.OrderMessageS"
  "entH\000\022R\n\024MatchedOrderNotFound\030\002 \001(\01322.io"
  ".stakenet.orderbook.protos.MatchedOrderN"
  "otFoundH\000\032#\n\020OrderMessageSent\022\017\n\007orderId"
  "\030\001 \001(\tB\007\n\005value\",\n\031CancelMatchedOrderCom"
  "mand\022\017\n\007orderId\030\001 \001(\t\"P\n\032CancelMatchedOr"
  "derResponse\0222\n\005trade\030\001 \001(\0132#.io.stakenet"
  ".orderbook.protos.Trade\"\'\n\024MatchedOrderN"
  "otFound\022\017\n\007orderId\030\001 \001(\t\"4\n\035CleanTrading"
  "PairOrdersCommand\022\023\n\013tradingPair\030\001 \001(\t\"n"
  "\n\036CleanTradingPairOrdersResponse\022\023\n\013trad"
  "ingPair\030\001 \001(\t\022\031\n\021openOrdersRemoved\030\002 \003(\t"
  "\022\034\n\024matchedOrdersRemoved\030\003 \003(\t\"i\n\033GetLnd"
  "PaymentInvoiceCommand\022\020\n\010currency\030\001 \001(\t\022"
  "8\n\006amount\030\002 \001(\0132(.io.stakenet.orderbook."
  "protos.BigInteger\"_\n\034GetLndPaymentInvoic"
  "eResponse\022\020\n\010currency\030\001 \001(\t\022\026\n\016paymentRe"
  "quest\030\002 \001(\t\022\025\n\rnoFeeRequired\030\003 \001(\010\"\244\001\n#G"
  "enerateInvoiceToRentChannelCommand\022\020\n\010cu"
  "rrency\030\001 \001(\t\022\026\n\016payingCurrency\030\002 \001(\t\022:\n\010"
  "capacity\030\003 \001(\0132(.io.stakenet.orderbook.p"
  "rotos.BigInteger\022\027\n\017lifetimeSeconds\030\004 \001("
  "\003\"\275\001\n$GenerateInvoiceToRentChannelRespon"
  "se\022\020\n\010currency\030\001 \001(\t\022\026\n\016payingCurrency\030\002"
  " \001(\t\022:\n\010capacity\030\003 \001(\0132(.io.stakenet.ord"
  "erbook.protos.BigInteger\022\027\n\017lifetimeSeco"
  "nds\030\004 \001(\003\022\026\n\016paymentRequest\030\005 \001(\t\"\250\001\n\'Ge"
  "neratePaymentHashToRentChannelCommand\022\020\n"
  "\010currency\030\001 \001(\t\022\026\n\016payingCurrency\030\002 \001(\t\022"
  ":\n\010capacity\030\003 \001(\0132(.io.stakenet.orderboo"
  "k.protos.BigInteger\022\027\n\017lifetimeSeconds\030\004"
  " \001(\003\"\276\001\n(GeneratePaymentHashToRentChanne"
  "lResponse\022\020\n\010currency\030\001 \001(\t\022\026\n\016payingCur"
  "rency\030\002 \001(\t\022:\n\010capacity\030\003 \001(\0132(.io.stake"
  "net.orderbook.protos.BigInteger\022\027\n\017lifet"
  "imeSeconds\030\004 \001(\003\022\023\n\013paymentHash\030\005 \001(\014\"V\n"
  "\022RentChannelCommand\022\023\n\013paymentHash\030\001 \001(\014"
  "\022\026\n\016payingCurrency\030\002 \001(\tJ\004\010\003\020\004R\rnodePubl"
  "icKey\"\333\001\n\023RentChannelResponse\022\023\n\013payment"
  "Hash\030\001 \001(\014\022\025\n\rnodePublicKey\030\002 \001(\014\022\021\n\tcha"
  "nnelId\030\003 \001(\t\022\032\n\022fundingTransaction\030\004 \001(\014"
  "\022\023\n\013outputIndex\030\005 \001(\005\022\026\n\016fundingTxidStr\030"
  "\006 \001(\t\022<\n\007channel\030\007 \001(\0132+.io.stakenet.ord"
  "erbook.protos.RentedChannel\",\n\027GetChanne"
  "lStatusCommand\022\021\n\tchannelId\030\001 \001(\t\"\217\002\n\030Ge"
  "tChannelStatusResponse\022\021\n\tchannelId\030\001 \001("
  "\t\022=\n\003lnd\030\007 \001(\0132..io.stakenet.orderbook.p"
  "rotos.LndChannelStatusH\000\022E\n\007connext\030\010 \001("
  "\01322.io.stakenet.orderbook.protos.Connext"
  "ChannelStatusH\000B\010\n\006statusJ\004\010\002\020\003J\004\010\003\020\004J\004\010"
  "\004\020\005J\004\010\005\020\006J\004\010\006\020\007R\006statusR\texpiresAtR\013clos"
  "ingTypeR\010closedByR\010closedOn\"n\n\020LndChanne"
  "lStatus\022\016\n\006status\030\001 \001(\t\022\021\n\texpiresAt\030\002 \001"
  "(\003\022\023\n\013closingType\030\003 \001(\t\022\020\n\010closedBy\030\004 \001("
  "\t\022\020\n\010closedOn\030\005 \001(\003\"9\n\024ConnextChannelSta"
  "tus\022\016\n\006status\030\001 \001(\t\022\021\n\texpiresAt\030\002 \001(\003\"\233"
  "\001\n\032GetFeeToRentChannelCommand\022\020\n\010currenc"
  "y\030\001 \001(\t\022\026\n\016payingCurrency\030\002 \001(\t\022:\n\010capac"
  "ity\030\003 \001(\0132(.io.stakenet.orderbook.protos"
  ".BigInteger\022\027\n\017lifetimeSeconds\030\004 \001(\003\"\321\001\n"
  "\033GetFeeToRentChannelResponse\0225\n\003fee\030\001 \001("
  "\0132(.io.stakenet.orderbook.protos.BigInte"
  "ger\022<\n\nrentingFee\030\002 \001(\0132(.io.stakenet.or"
  "derbook.protos.BigInteger\022=\n\013onChainFees"
  "\030\003 \001(\0132(.io.stakenet.orderbook.protos.Bi"
  "gInteger\"\254\001\n\020RefundFeeCommand\022\020\n\010currenc"
  "y\030\002 \001(\t\022\033\n\023refundedPaymentHash\030\004 \001(\014\022E\n\014"
  "refundedFees\030\005 \003(\0132/.io.stakenet.orderbo"
  "ok.protos.RefundablePaymentJ\004\010\003\020\004J\004\010\001\020\002R"
  "\006amountR\016paymentRequest\"\353\001\n\021RefundFeeRes"
  "ponse\022\020\n\010currency\030\002 \001(\t\0228\n\006amount\030\003 \001(\0132"
  "(.io.stakenet.orderbook.protos.BigIntege"
  "r\022\022\n\nrefundedOn\030\005 \001(\003\022E\n\014refundedFees\030\006 "
  "\003(\0132/.io.stakenet.orderbook.protos.Refun"
  "dablePaymentJ\004\010\004\020\005J\004\010\001\020\002R\023refundedPaymen"
  "tHashR\016paymentRequest\"\220\001\n\032GetRefundableA"
  "mountCommand\022\020\n\010currency\030\001 \001(\t\022\023\n\013paymen"
  "tHash\030\002 \001(\014\022K\n\022refundablePayments\030\003 \003(\0132"
  "/.io.stakenet.orderbook.protos.Refundabl"
  "ePayment\"|\n\033GetRefundableAmountResponse\022"
  "\020\n\010currency\030\001 \001(\t\0228\n\006amount\030\003 \001(\0132(.io.s"
  "takenet.orderbook.protos.BigIntegerJ\004\010\002\020"
  "\003R\013paymentHash\"q\n+GenerateInvoiceToExten"
  "dRentedChannelCommand\022\021\n\tchannelId\030\001 \001(\t"
  "\022\026\n\016payingCurrency\030\002 \001(\t\022\027\n\017lifetimeSeco"
  "nds\030\003 \001(\003\"\212\001\n,GenerateInvoiceToExtendRen"
  "tedChannelResponse\022\021\n\tchannelId\030\001 \001(\t\022\026\n"
  "\016payingCurrency\030\002 \001(\t\022\027\n\017lifetimeSeconds"
  "\030\003 \001(\003\022\026\n\016paymentRequest\030\004 \001(\t\"|\n6Genera"
  "tePaymentHashToExtendConnextRentedChanne"
  "lCommand\022\021\n\tchannelId\030\001 \001(\t\022\026\n\016payingCur"
  "rency\030\002 \001(\t\022\027\n\017lifetimeSeconds\030\003 \001(\003\"\222\001\n"
  "7GeneratePaymentHashToExtendConnextRente"
  "dChannelResponse\022\021\n\tchannelId\030\001 \001(\t\022\026\n\016p"
  "ayingCurrency\030\002 \001(\t\022\027\n\017lifetimeSeconds\030\003"
  " \001(\003\022\023\n\013paymentHash\030\004 \001(\014\"h\n\"GetFeeToExt"
  "endRentedChannelCommand\022\021\n\tchannelId\030\001 \001"
  "(\t\022\026\n\016payingCurrency\030\002 \001(\t\022\027\n\017lifetimeSe"
  "conds\030\003 \001(\003\"\\\n#GetFeeToExtendRentedChann"
  "elResponse\0225\n\003fee\030\001 \001(\0132(.io.stakenet.or"
  "derbook.protos.BigInteger\"M\n\036ExtendRente"
  "dChannelTimeCommand\022\023\n\013paymentHash\030\001 \001(\014"
  "\022\026\n\016payingCurrency\030\002 \001(\t\"\\\n\037ExtendRented"
  "ChannelTimeResponse\022\023\n\013paymentHash\030\001 \001(\014"
  "\022\021\n\tchannelId\030\002 \001(\t\022\021\n\texpiresAt\030\003 \001(\003\"\?"
  "\n\030RegisterPublicKeyCommand\022\020\n\010currency\030\001"
  " \001(\t\022\021\n\tpublicKey\030\002 \001(\014\"@\n\031RegisterPubli"
  "cKeyResponse\022\020\n\010currency\030\001 \001(\t\022\021\n\tpublic"
  "Key\030\002 \001(\014\"M\n\037RegisterPublicIdentifierCom"
  "mand\022\020\n\010currency\030\001 \001(\t\022\030\n\020publicIdentifi"
  "er\030\002 \001(\t\"N\n RegisterPublicIdentifierResp"
  "onse\022\020\n\010currency\030\001 \001(\t\022\030\n\020publicIdentifi"
  "er\030\002 \001(\t\"7\n#GetConnextPaymentInformation"
  "Command\022\020\n\010currency\030\001 \001(\t\"~\n$GetConnextP"
  "aymentInformationResponse\022\020\n\010currency\030\001 "
  "\001(\t\022\030\n\020publicIdentifier\030\002 \001(\t\022\023\n\013payment"
  "Hash\030\003 \001(\014\022\025\n\rnoFeeRequired\030\004 \001(\010\"/\n-Get"
  "ConnextChannelContractDeploymentFeeComma"
  "nd\"~\n.GetConnextChannelContractDeploymen"
  "tFeeResponse\022\022\n\nhubAddress\030\001 \001(\t\0228\n\006amou"
  "nt\030\002 \001(\0132(.io.stakenet.orderbook.protos."
  "BigInteger\"M\n2RegisterConnextChannelCont"
  "ractDeploymentFeeCommand\022\027\n\017transactionH"
  "ash\030\001 \001(\t\"N\n3RegisterConnextChannelContr"
  "actDeploymentFeeResponse\022\027\n\017transactionH"
  "ash\030\001 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stakenet_2forderbook_2fcommands_2eproto_deps[1] = {
  &::descriptor_table_stakenet_2forderbook_2fmodels_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stakenet_2forderbook_2fcommands_2eproto_sccs[68] = {
  &scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base,
  &scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stakenet_2forderbook_2fcommands_2eproto_once;
static bool descriptor_table_stakenet_2forderbook_2fcommands_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stakenet_2forderbook_2fcommands_2eproto = {
  &descriptor_table_stakenet_2forderbook_2fcommands_2eproto_initialized, descriptor_table_protodef_stakenet_2forderbook_2fcommands_2eproto, "stakenet/orderbook/commands.proto", 7377,
  &descriptor_table_stakenet_2forderbook_2fcommands_2eproto_once, descriptor_table_stakenet_2forderbook_2fcommands_2eproto_sccs, descriptor_table_stakenet_2forderbook_2fcommands_2eproto_deps, 68, 1,
  schemas, file_default_instances, TableStruct_stakenet_2forderbook_2fcommands_2eproto::offsets,
  file_level_metadata_stakenet_2forderbook_2fcommands_2eproto, 68, file_level_enum_descriptors_stakenet_2forderbook_2fcommands_2eproto, file_level_service_descriptors_stakenet_2forderbook_2fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stakenet_2forderbook_2fcommands_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stakenet_2forderbook_2fcommands_2eproto), true);
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {

// ===================================================================

void CommandFailed::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_CommandFailed_default_instance_.reason_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::io::stakenet::orderbook::protos::_CommandFailed_default_instance_.serverinmaintenance_ = const_cast< ::io::stakenet::orderbook::protos::ServerInMaintenance*>(
      ::io::stakenet::orderbook::protos::ServerInMaintenance::internal_default_instance());
}
class CommandFailed::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::ServerInMaintenance& serverinmaintenance(const CommandFailed* msg);
};

const ::io::stakenet::orderbook::protos::ServerInMaintenance&
CommandFailed::_Internal::serverinmaintenance(const CommandFailed* msg) {
  return *msg->value_.serverinmaintenance_;
}
void CommandFailed::set_allocated_serverinmaintenance(::io::stakenet::orderbook::protos::ServerInMaintenance* serverinmaintenance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (serverinmaintenance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      serverinmaintenance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, serverinmaintenance, submessage_arena);
    }
    set_has_serverinmaintenance();
    value_.serverinmaintenance_ = serverinmaintenance;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CommandFailed.serverInMaintenance)
}
void CommandFailed::clear_serverinmaintenance() {
  if (_internal_has_serverinmaintenance()) {
    delete value_.serverinmaintenance_;
    clear_has_value();
  }
}
CommandFailed::CommandFailed()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CommandFailed)
}
CommandFailed::CommandFailed(const CommandFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kReason: {
      _internal_set_reason(from._internal_reason());
      break;
    }
    case kServerInMaintenance: {
      _internal_mutable_serverinmaintenance()->::io::stakenet::orderbook::protos::ServerInMaintenance::MergeFrom(from._internal_serverinmaintenance());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CommandFailed)
}

void CommandFailed::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto.base);
  clear_has_value();
}

CommandFailed::~CommandFailed() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CommandFailed)
  SharedDtor();
}

void CommandFailed::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void CommandFailed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandFailed& CommandFailed::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandFailed_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CommandFailed::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.CommandFailed)
  switch (value_case()) {
    case kReason: {
      value_.reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kServerInMaintenance: {
      delete value_.serverinmaintenance_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void CommandFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CommandFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* CommandFailed::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CommandFailed.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.ServerInMaintenance serverInMaintenance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_serverinmaintenance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandFailed::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CommandFailed)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (_internal_has_reason()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CommandFailed.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  // .io.stakenet.orderbook.protos.ServerInMaintenance serverInMaintenance = 2;
  if (_internal_has_serverinmaintenance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::serverinmaintenance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CommandFailed)
  return target;
}

size_t CommandFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CommandFailed)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // string reason = 1;
    case kReason: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_reason());
      break;
    }
    // .io.stakenet.orderbook.protos.ServerInMaintenance serverInMaintenance = 2;
    case kServerInMaintenance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.serverinmaintenance_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandFailed::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CommandFailed)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandFailed* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandFailed>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CommandFailed)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CommandFailed)
    MergeFrom(*source);
  }
}

void CommandFailed::MergeFrom(const CommandFailed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CommandFailed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kReason: {
      _internal_set_reason(from._internal_reason());
      break;
    }
    case kServerInMaintenance: {
      _internal_mutable_serverinmaintenance()->::io::stakenet::orderbook::protos::ServerInMaintenance::MergeFrom(from._internal_serverinmaintenance());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void CommandFailed::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CommandFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandFailed::CopyFrom(const CommandFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CommandFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandFailed::IsInitialized() const {
  return true;
}

void CommandFailed::InternalSwap(CommandFailed* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandFailed::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingCommand::InitAsDefaultInstance() {
}
class PingCommand::_Internal {
 public:
};

PingCommand::PingCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PingCommand)
}
PingCommand::PingCommand(const PingCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PingCommand)
}

void PingCommand::SharedCtor() {
}

PingCommand::~PingCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PingCommand)
  SharedDtor();
}

void PingCommand::SharedDtor() {
}

void PingCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingCommand& PingCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PingCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PingCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PingCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PingCommand)
  return target;
}

size_t PingCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PingCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PingCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PingCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PingCommand)
    MergeFrom(*source);
  }
}

void PingCommand::MergeFrom(const PingCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PingCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingCommand::CopyFrom(const PingCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PingCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingCommand::IsInitialized() const {
  return true;
}

void PingCommand::InternalSwap(PingCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingResponse::InitAsDefaultInstance() {
}
class PingResponse::_Internal {
 public:
};

PingResponse::PingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PingResponse)
}
PingResponse::PingResponse(const PingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PingResponse)
}

void PingResponse::SharedCtor() {
}

PingResponse::~PingResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PingResponse)
  SharedDtor();
}

void PingResponse::SharedDtor() {
}

void PingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingResponse& PingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* PingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PingResponse)
  return target;
}

size_t PingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PingResponse)
    MergeFrom(*source);
  }
}

void PingResponse::MergeFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResponse::CopyFrom(const PingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResponse::IsInitialized() const {
  return true;
}

void PingResponse::InternalSwap(PingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTradingPairsCommand::InitAsDefaultInstance() {
}
class GetTradingPairsCommand::_Internal {
 public:
};

GetTradingPairsCommand::GetTradingPairsCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetTradingPairsCommand)
}
GetTradingPairsCommand::GetTradingPairsCommand(const GetTradingPairsCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetTradingPairsCommand)
}

void GetTradingPairsCommand::SharedCtor() {
}

GetTradingPairsCommand::~GetTradingPairsCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  SharedDtor();
}

void GetTradingPairsCommand::SharedDtor() {
}

void GetTradingPairsCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTradingPairsCommand& GetTradingPairsCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTradingPairsCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetTradingPairsCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetTradingPairsCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTradingPairsCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  return target;
}

size_t GetTradingPairsCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradingPairsCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradingPairsCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTradingPairsCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetTradingPairsCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetTradingPairsCommand)
    MergeFrom(*source);
  }
}

void GetTradingPairsCommand::MergeFrom(const GetTradingPairsCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTradingPairsCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradingPairsCommand::CopyFrom(const GetTradingPairsCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetTradingPairsCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingPairsCommand::IsInitialized() const {
  return true;
}

void GetTradingPairsCommand::InternalSwap(GetTradingPairsCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingPairsCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTradingPairsResponse::InitAsDefaultInstance() {
}
class GetTradingPairsResponse::_Internal {
 public:
};

void GetTradingPairsResponse::clear_tradingpairs() {
  tradingpairs_.Clear();
}
GetTradingPairsResponse::GetTradingPairsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetTradingPairsResponse)
}
GetTradingPairsResponse::GetTradingPairsResponse(const GetTradingPairsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tradingpairs_(from.tradingpairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paysfees_ = from.paysfees_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetTradingPairsResponse)
}

void GetTradingPairsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  paysfees_ = false;
}

GetTradingPairsResponse::~GetTradingPairsResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  SharedDtor();
}

void GetTradingPairsResponse::SharedDtor() {
}

void GetTradingPairsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTradingPairsResponse& GetTradingPairsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTradingPairsResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetTradingPairsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpairs_.Clear();
  paysfees_ = false;
  _internal_metadata_.Clear();
}

const char* GetTradingPairsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.stakenet.orderbook.protos.TradingPair tradingPairs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tradingpairs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool paysFees = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          paysfees_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTradingPairsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.TradingPair tradingPairs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tradingpairs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tradingpairs(i), target, stream);
  }

  // bool paysFees = 2;
  if (this->paysfees() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_paysfees(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  return target;
}

size_t GetTradingPairsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.TradingPair tradingPairs = 1;
  total_size += 1UL * this->_internal_tradingpairs_size();
  for (const auto& msg : this->tradingpairs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool paysFees = 2;
  if (this->paysfees() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTradingPairsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTradingPairsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTradingPairsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetTradingPairsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetTradingPairsResponse)
    MergeFrom(*source);
  }
}

void GetTradingPairsResponse::MergeFrom(const GetTradingPairsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tradingpairs_.MergeFrom(from.tradingpairs_);
  if (from.paysfees() != 0) {
    _internal_set_paysfees(from._internal_paysfees());
  }
}

void GetTradingPairsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTradingPairsResponse::CopyFrom(const GetTradingPairsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetTradingPairsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTradingPairsResponse::IsInitialized() const {
  return true;
}

void GetTradingPairsResponse::InternalSwap(GetTradingPairsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpairs_.InternalSwap(&other->tradingpairs_);
  swap(paysfees_, other->paysfees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTradingPairsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeCommand::InitAsDefaultInstance() {
}
class SubscribeCommand::_Internal {
 public:
};

SubscribeCommand::SubscribeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SubscribeCommand)
}
SubscribeCommand::SubscribeCommand(const SubscribeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  retrieveorderssummary_ = from.retrieveorderssummary_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SubscribeCommand)
}

void SubscribeCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrieveorderssummary_ = false;
}

SubscribeCommand::~SubscribeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SubscribeCommand)
  SharedDtor();
}

void SubscribeCommand::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeCommand& SubscribeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SubscribeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SubscribeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  retrieveorderssummary_ = false;
  _internal_metadata_.Clear();
}

const char* SubscribeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SubscribeCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retrieveOrdersSummary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          retrieveorderssummary_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SubscribeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SubscribeCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // bool retrieveOrdersSummary = 2;
  if (this->retrieveorderssummary() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_retrieveorderssummary(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SubscribeCommand)
  return target;
}

size_t SubscribeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SubscribeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // bool retrieveOrdersSummary = 2;
  if (this->retrieveorderssummary() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SubscribeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SubscribeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SubscribeCommand)
    MergeFrom(*source);
  }
}

void SubscribeCommand::MergeFrom(const SubscribeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SubscribeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.retrieveorderssummary() != 0) {
    _internal_set_retrieveorderssummary(from._internal_retrieveorderssummary());
  }
}

void SubscribeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SubscribeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeCommand::CopyFrom(const SubscribeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SubscribeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeCommand::IsInitialized() const {
  return true;
}

void SubscribeCommand::InternalSwap(SubscribeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(retrieveorderssummary_, other->retrieveorderssummary_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeResponse::InitAsDefaultInstance() {
}
class SubscribeResponse::_Internal {
 public:
};

void SubscribeResponse::clear_summarybids() {
  summarybids_.Clear();
}
void SubscribeResponse::clear_summaryasks() {
  summaryasks_.Clear();
}
SubscribeResponse::SubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      summarybids_(from.summarybids_),
      summaryasks_(from.summaryasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SubscribeResponse)
}

void SubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SubscribeResponse)
  SharedDtor();
}

void SubscribeResponse::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeResponse& SubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summarybids_.Clear();
  summaryasks_.Clear();
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SubscribeResponse.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summarybids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaryasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SubscribeResponse.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summarybids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_summarybids(i), target, stream);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaryasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_summaryasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 2;
  total_size += 1UL * this->_internal_summarybids_size();
  for (const auto& msg : this->summarybids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 3;
  total_size += 1UL * this->_internal_summaryasks_size();
  for (const auto& msg : this->summaryasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SubscribeResponse)
    MergeFrom(*source);
  }
}

void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summarybids_.MergeFrom(from.summarybids_);
  summaryasks_.MergeFrom(from.summaryasks_);
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void SubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  summarybids_.InternalSwap(&other->summarybids_);
  summaryasks_.InternalSwap(&other->summaryasks_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeCommand::InitAsDefaultInstance() {
}
class UnsubscribeCommand::_Internal {
 public:
};

UnsubscribeCommand::UnsubscribeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.UnsubscribeCommand)
}
UnsubscribeCommand::UnsubscribeCommand(const UnsubscribeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.UnsubscribeCommand)
}

void UnsubscribeCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnsubscribeCommand::~UnsubscribeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.UnsubscribeCommand)
  SharedDtor();
}

void UnsubscribeCommand::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnsubscribeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeCommand& UnsubscribeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UnsubscribeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.UnsubscribeCommand)
  return target;
}

size_t UnsubscribeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.UnsubscribeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.UnsubscribeCommand)
    MergeFrom(*source);
  }
}

void UnsubscribeCommand::MergeFrom(const UnsubscribeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void UnsubscribeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeCommand::CopyFrom(const UnsubscribeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.UnsubscribeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeCommand::IsInitialized() const {
  return true;
}

void UnsubscribeCommand::InternalSwap(UnsubscribeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnsubscribeResponse::InitAsDefaultInstance() {
}
class UnsubscribeResponse::_Internal {
 public:
};

UnsubscribeResponse::UnsubscribeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.UnsubscribeResponse)
}
UnsubscribeResponse::UnsubscribeResponse(const UnsubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.UnsubscribeResponse)
}

void UnsubscribeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnsubscribeResponse::~UnsubscribeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.UnsubscribeResponse)
  SharedDtor();
}

void UnsubscribeResponse::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnsubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnsubscribeResponse& UnsubscribeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnsubscribeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void UnsubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UnsubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnsubscribeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.UnsubscribeResponse)
  return target;
}

size_t UnsubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnsubscribeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnsubscribeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnsubscribeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.UnsubscribeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.UnsubscribeResponse)
    MergeFrom(*source);
  }
}

void UnsubscribeResponse::MergeFrom(const UnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void UnsubscribeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsubscribeResponse::CopyFrom(const UnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.UnsubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeResponse::IsInitialized() const {
  return true;
}

void UnsubscribeResponse::InternalSwap(UnsubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOpenOrdersCommand::InitAsDefaultInstance() {
}
class GetOpenOrdersCommand::_Internal {
 public:
};

GetOpenOrdersCommand::GetOpenOrdersCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
}
GetOpenOrdersCommand::GetOpenOrdersCommand(const GetOpenOrdersCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
}

void GetOpenOrdersCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOpenOrdersCommand::~GetOpenOrdersCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  SharedDtor();
}

void GetOpenOrdersCommand::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOpenOrdersCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOpenOrdersCommand& GetOpenOrdersCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOpenOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOpenOrdersCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetOpenOrdersCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOpenOrdersCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  return target;
}

size_t GetOpenOrdersCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOpenOrdersCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOpenOrdersCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOpenOrdersCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
    MergeFrom(*source);
  }
}

void GetOpenOrdersCommand::MergeFrom(const GetOpenOrdersCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void GetOpenOrdersCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenOrdersCommand::CopyFrom(const GetOpenOrdersCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenOrdersCommand::IsInitialized() const {
  return true;
}

void GetOpenOrdersCommand::InternalSwap(GetOpenOrdersCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenOrdersCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOpenOrdersResponse::InitAsDefaultInstance() {
}
class GetOpenOrdersResponse::_Internal {
 public:
};

void GetOpenOrdersResponse::clear_summarybids() {
  summarybids_.Clear();
}
void GetOpenOrdersResponse::clear_summaryasks() {
  summaryasks_.Clear();
}
GetOpenOrdersResponse::GetOpenOrdersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
}
GetOpenOrdersResponse::GetOpenOrdersResponse(const GetOpenOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      summarybids_(from.summarybids_),
      summaryasks_(from.summaryasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
}

void GetOpenOrdersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOpenOrdersResponse::~GetOpenOrdersResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  SharedDtor();
}

void GetOpenOrdersResponse::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOpenOrdersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOpenOrdersResponse& GetOpenOrdersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOpenOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOpenOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  summarybids_.Clear();
  summaryasks_.Clear();
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetOpenOrdersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summarybids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summaryasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOpenOrdersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summarybids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_summarybids(i), target, stream);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_summaryasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_summaryasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  return target;
}

size_t GetOpenOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 4;
  total_size += 1UL * this->_internal_summarybids_size();
  for (const auto& msg : this->summarybids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 5;
  total_size += 1UL * this->_internal_summaryasks_size();
  for (const auto& msg : this->summaryasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOpenOrdersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOpenOrdersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOpenOrdersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
    MergeFrom(*source);
  }
}

void GetOpenOrdersResponse::MergeFrom(const GetOpenOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  summarybids_.MergeFrom(from.summarybids_);
  summaryasks_.MergeFrom(from.summaryasks_);
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void GetOpenOrdersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenOrdersResponse::CopyFrom(const GetOpenOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenOrdersResponse::IsInitialized() const {
  return true;
}

void GetOpenOrdersResponse::InternalSwap(GetOpenOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  summarybids_.InternalSwap(&other->summarybids_);
  summaryasks_.InternalSwap(&other->summaryasks_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenOrdersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHistoricTradesCommand::InitAsDefaultInstance() {
}
class GetHistoricTradesCommand::_Internal {
 public:
};

GetHistoricTradesCommand::GetHistoricTradesCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
}
GetHistoricTradesCommand::GetHistoricTradesCommand(const GetHistoricTradesCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lastseentradeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_lastseentradeid().empty()) {
    lastseentradeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastseentradeid_);
  }
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
}

void GetHistoricTradesCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  lastseentradeid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
}

GetHistoricTradesCommand::~GetHistoricTradesCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  SharedDtor();
}

void GetHistoricTradesCommand::SharedDtor() {
  lastseentradeid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetHistoricTradesCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHistoricTradesCommand& GetHistoricTradesCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHistoricTradesCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetHistoricTradesCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lastseentradeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  limit_ = 0;
  _internal_metadata_.Clear();
}

const char* GetHistoricTradesCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 limit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string lastSeenTradeId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_lastseentradeid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHistoricTradesCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 limit = 1;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_limit(), target);
  }

  // string lastSeenTradeId = 2;
  if (this->lastseentradeid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lastseentradeid().data(), static_cast<int>(this->_internal_lastseentradeid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lastseentradeid(), target);
  }

  // string tradingPair = 3;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  return target;
}

size_t GetHistoricTradesCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lastSeenTradeId = 2;
  if (this->lastseentradeid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lastseentradeid());
  }

  // string tradingPair = 3;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // int32 limit = 1;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHistoricTradesCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHistoricTradesCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHistoricTradesCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
    MergeFrom(*source);
  }
}

void GetHistoricTradesCommand::MergeFrom(const GetHistoricTradesCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.lastseentradeid().size() > 0) {

    lastseentradeid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.lastseentradeid_);
  }
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetHistoricTradesCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoricTradesCommand::CopyFrom(const GetHistoricTradesCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoricTradesCommand::IsInitialized() const {
  return true;
}

void GetHistoricTradesCommand::InternalSwap(GetHistoricTradesCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  lastseentradeid_.Swap(&other->lastseentradeid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHistoricTradesCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHistoricTradesResponse::InitAsDefaultInstance() {
}
class GetHistoricTradesResponse::_Internal {
 public:
};

void GetHistoricTradesResponse::clear_trades() {
  trades_.Clear();
}
GetHistoricTradesResponse::GetHistoricTradesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
}
GetHistoricTradesResponse::GetHistoricTradesResponse(const GetHistoricTradesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trades_(from.trades_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
}

void GetHistoricTradesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto.base);
}

GetHistoricTradesResponse::~GetHistoricTradesResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  SharedDtor();
}

void GetHistoricTradesResponse::SharedDtor() {
}

void GetHistoricTradesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHistoricTradesResponse& GetHistoricTradesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHistoricTradesResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetHistoricTradesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trades_.Clear();
  _internal_metadata_.Clear();
}

const char* GetHistoricTradesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.stakenet.orderbook.protos.Trade trades = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHistoricTradesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.Trade trades = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trades_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trades(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  return target;
}

size_t GetHistoricTradesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.Trade trades = 1;
  total_size += 1UL * this->_internal_trades_size();
  for (const auto& msg : this->trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHistoricTradesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHistoricTradesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHistoricTradesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
    MergeFrom(*source);
  }
}

void GetHistoricTradesResponse::MergeFrom(const GetHistoricTradesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trades_.MergeFrom(from.trades_);
}

void GetHistoricTradesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoricTradesResponse::CopyFrom(const GetHistoricTradesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoricTradesResponse::IsInitialized() const {
  return true;
}

void GetHistoricTradesResponse::InternalSwap(GetHistoricTradesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trades_.InternalSwap(&other->trades_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHistoricTradesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBarsPricesCommand::InitAsDefaultInstance() {
}
class GetBarsPricesCommand::_Internal {
 public:
};

GetBarsPricesCommand::GetBarsPricesCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetBarsPricesCommand)
}
GetBarsPricesCommand::GetBarsPricesCommand(const GetBarsPricesCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resolution().empty()) {
    resolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resolution_);
  }
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&from_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetBarsPricesCommand)
}

void GetBarsPricesCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolution_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&from_)) + sizeof(limit_));
}

GetBarsPricesCommand::~GetBarsPricesCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  SharedDtor();
}

void GetBarsPricesCommand::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolution_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetBarsPricesCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBarsPricesCommand& GetBarsPricesCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBarsPricesCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBarsPricesCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&from_)) + sizeof(limit_));
  _internal_metadata_.Clear();
}

const char* GetBarsPricesCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resolution();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 from = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 to = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 limit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarsPricesCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // string resolution = 2;
  if (this->resolution().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolution().data(), static_cast<int>(this->_internal_resolution().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resolution(), target);
  }

  // int64 from = 3;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_from(), target);
  }

  // int64 to = 4;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_to(), target);
  }

  // int32 limit = 5;
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  return target;
}

size_t GetBarsPricesCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // string resolution = 2;
  if (this->resolution().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolution());
  }

  // int64 from = 3;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_from());
  }

  // int64 to = 4;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_to());
  }

  // int32 limit = 5;
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBarsPricesCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBarsPricesCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBarsPricesCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetBarsPricesCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetBarsPricesCommand)
    MergeFrom(*source);
  }
}

void GetBarsPricesCommand::MergeFrom(const GetBarsPricesCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.resolution().size() > 0) {

    resolution_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.resolution_);
  }
  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void GetBarsPricesCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBarsPricesCommand::CopyFrom(const GetBarsPricesCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetBarsPricesCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarsPricesCommand::IsInitialized() const {
  return true;
}

void GetBarsPricesCommand::InternalSwap(GetBarsPricesCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  resolution_.Swap(&other->resolution_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(from_, other->from_);
  swap(to_, other->to_);
  swap(limit_, other->limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarsPricesCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetBarsPricesResponse::InitAsDefaultInstance() {
}
class GetBarsPricesResponse::_Internal {
 public:
};

void GetBarsPricesResponse::clear_barprices() {
  barprices_.Clear();
}
GetBarsPricesResponse::GetBarsPricesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetBarsPricesResponse)
}
GetBarsPricesResponse::GetBarsPricesResponse(const GetBarsPricesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      barprices_(from.barprices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetBarsPricesResponse)
}

void GetBarsPricesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto.base);
}

GetBarsPricesResponse::~GetBarsPricesResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  SharedDtor();
}

void GetBarsPricesResponse::SharedDtor() {
}

void GetBarsPricesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetBarsPricesResponse& GetBarsPricesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetBarsPricesResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetBarsPricesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  barprices_.Clear();
  _internal_metadata_.Clear();
}

const char* GetBarsPricesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .io.stakenet.orderbook.protos.BarPrices barPrices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_barprices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetBarsPricesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.BarPrices barPrices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_barprices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_barprices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  return target;
}

size_t GetBarsPricesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.BarPrices barPrices = 1;
  total_size += 1UL * this->_internal_barprices_size();
  for (const auto& msg : this->barprices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetBarsPricesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetBarsPricesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetBarsPricesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetBarsPricesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetBarsPricesResponse)
    MergeFrom(*source);
  }
}

void GetBarsPricesResponse::MergeFrom(const GetBarsPricesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  barprices_.MergeFrom(from.barprices_);
}

void GetBarsPricesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetBarsPricesResponse::CopyFrom(const GetBarsPricesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetBarsPricesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBarsPricesResponse::IsInitialized() const {
  return true;
}

void GetBarsPricesResponse::InternalSwap(GetBarsPricesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  barprices_.InternalSwap(&other->barprices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBarsPricesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderCommand::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_PlaceOrderCommand_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class PlaceOrderCommand::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const PlaceOrderCommand* msg);
};

const ::io::stakenet::orderbook::protos::Order&
PlaceOrderCommand::_Internal::order(const PlaceOrderCommand* msg) {
  return *msg->order_;
}
void PlaceOrderCommand::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
PlaceOrderCommand::PlaceOrderCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PlaceOrderCommand)
}
PlaceOrderCommand::PlaceOrderCommand(const PlaceOrderCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PlaceOrderCommand)
}

void PlaceOrderCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  order_ = nullptr;
}

PlaceOrderCommand::~PlaceOrderCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PlaceOrderCommand)
  SharedDtor();
}

void PlaceOrderCommand::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete order_;
}

void PlaceOrderCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderCommand& PlaceOrderCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PlaceOrderCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_paymenthash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PlaceOrderCommand)
  return target;
}

size_t PlaceOrderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PlaceOrderCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PlaceOrderCommand)
    MergeFrom(*source);
  }
}

void PlaceOrderCommand::MergeFrom(const PlaceOrderCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void PlaceOrderCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderCommand::CopyFrom(const PlaceOrderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderCommand::IsInitialized() const {
  return true;
}

void PlaceOrderCommand::InternalSwap(PlaceOrderCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderResponse_MyOrderPlaced::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderPlaced_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class PlaceOrderResponse_MyOrderPlaced::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const PlaceOrderResponse_MyOrderPlaced* msg);
};

const ::io::stakenet::orderbook::protos::Order&
PlaceOrderResponse_MyOrderPlaced::_Internal::order(const PlaceOrderResponse_MyOrderPlaced* msg) {
  return *msg->order_;
}
void PlaceOrderResponse_MyOrderPlaced::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
PlaceOrderResponse_MyOrderPlaced::PlaceOrderResponse_MyOrderPlaced()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
}
PlaceOrderResponse_MyOrderPlaced::PlaceOrderResponse_MyOrderPlaced(const PlaceOrderResponse_MyOrderPlaced& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
}

void PlaceOrderResponse_MyOrderPlaced::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto.base);
  order_ = nullptr;
}

PlaceOrderResponse_MyOrderPlaced::~PlaceOrderResponse_MyOrderPlaced() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  SharedDtor();
}

void PlaceOrderResponse_MyOrderPlaced::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void PlaceOrderResponse_MyOrderPlaced::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderResponse_MyOrderPlaced& PlaceOrderResponse_MyOrderPlaced::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderResponse_MyOrderPlaced_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderResponse_MyOrderPlaced::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PlaceOrderResponse_MyOrderPlaced::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderResponse_MyOrderPlaced::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  return target;
}

size_t PlaceOrderResponse_MyOrderPlaced::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderResponse_MyOrderPlaced::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderResponse_MyOrderPlaced* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderResponse_MyOrderPlaced>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
    MergeFrom(*source);
  }
}

void PlaceOrderResponse_MyOrderPlaced::MergeFrom(const PlaceOrderResponse_MyOrderPlaced& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void PlaceOrderResponse_MyOrderPlaced::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderResponse_MyOrderPlaced::CopyFrom(const PlaceOrderResponse_MyOrderPlaced& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderResponse_MyOrderPlaced::IsInitialized() const {
  return true;
}

void PlaceOrderResponse_MyOrderPlaced::InternalSwap(PlaceOrderResponse_MyOrderPlaced* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderResponse_MyOrderPlaced::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderResponse_MyOrderRejected::InitAsDefaultInstance() {
}
class PlaceOrderResponse_MyOrderRejected::_Internal {
 public:
};

PlaceOrderResponse_MyOrderRejected::PlaceOrderResponse_MyOrderRejected()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
}
PlaceOrderResponse_MyOrderRejected::PlaceOrderResponse_MyOrderRejected(const PlaceOrderResponse_MyOrderRejected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reason().empty()) {
    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
}

void PlaceOrderResponse_MyOrderRejected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto.base);
  reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PlaceOrderResponse_MyOrderRejected::~PlaceOrderResponse_MyOrderRejected() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  SharedDtor();
}

void PlaceOrderResponse_MyOrderRejected::SharedDtor() {
  reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PlaceOrderResponse_MyOrderRejected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderResponse_MyOrderRejected& PlaceOrderResponse_MyOrderRejected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderResponse_MyOrderRejected_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderResponse_MyOrderRejected::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* PlaceOrderResponse_MyOrderRejected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_reason();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderResponse_MyOrderRejected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  return target;
}

size_t PlaceOrderResponse_MyOrderRejected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 1;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderResponse_MyOrderRejected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderResponse_MyOrderRejected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderResponse_MyOrderRejected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
    MergeFrom(*source);
  }
}

void PlaceOrderResponse_MyOrderRejected::MergeFrom(const PlaceOrderResponse_MyOrderRejected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
}

void PlaceOrderResponse_MyOrderRejected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderResponse_MyOrderRejected::CopyFrom(const PlaceOrderResponse_MyOrderRejected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderResponse_MyOrderRejected::IsInitialized() const {
  return true;
}

void PlaceOrderResponse_MyOrderRejected::InternalSwap(PlaceOrderResponse_MyOrderRejected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reason_.Swap(&other->reason_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderResponse_MyOrderRejected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderResponse_MyOrderMatched::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderMatched_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderMatched_default_instance_._instance.get_mutable()->ordermatchedwith_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class PlaceOrderResponse_MyOrderMatched::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const PlaceOrderResponse_MyOrderMatched* msg);
  static const ::io::stakenet::orderbook::protos::Order& ordermatchedwith(const PlaceOrderResponse_MyOrderMatched* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
PlaceOrderResponse_MyOrderMatched::_Internal::trade(const PlaceOrderResponse_MyOrderMatched* msg) {
  return *msg->trade_;
}
const ::io::stakenet::orderbook::protos::Order&
PlaceOrderResponse_MyOrderMatched::_Internal::ordermatchedwith(const PlaceOrderResponse_MyOrderMatched* msg) {
  return *msg->ordermatchedwith_;
}
void PlaceOrderResponse_MyOrderMatched::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
void PlaceOrderResponse_MyOrderMatched::clear_ordermatchedwith() {
  if (GetArenaNoVirtual() == nullptr && ordermatchedwith_ != nullptr) {
    delete ordermatchedwith_;
  }
  ordermatchedwith_ = nullptr;
}
PlaceOrderResponse_MyOrderMatched::PlaceOrderResponse_MyOrderMatched()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
}
PlaceOrderResponse_MyOrderMatched::PlaceOrderResponse_MyOrderMatched(const PlaceOrderResponse_MyOrderMatched& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  if (from._internal_has_ordermatchedwith()) {
    ordermatchedwith_ = new ::io::stakenet::orderbook::protos::Order(*from.ordermatchedwith_);
  } else {
    ordermatchedwith_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
}

void PlaceOrderResponse_MyOrderMatched::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto.base);
  ::memset(&trade_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordermatchedwith_) -
      reinterpret_cast<char*>(&trade_)) + sizeof(ordermatchedwith_));
}

PlaceOrderResponse_MyOrderMatched::~PlaceOrderResponse_MyOrderMatched() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  SharedDtor();
}

void PlaceOrderResponse_MyOrderMatched::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
  if (this != internal_default_instance()) delete ordermatchedwith_;
}

void PlaceOrderResponse_MyOrderMatched::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderResponse_MyOrderMatched& PlaceOrderResponse_MyOrderMatched::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderResponse_MyOrderMatched_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderResponse_MyOrderMatched::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && ordermatchedwith_ != nullptr) {
    delete ordermatchedwith_;
  }
  ordermatchedwith_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PlaceOrderResponse_MyOrderMatched::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordermatchedwith(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderResponse_MyOrderMatched::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
  if (this->has_ordermatchedwith()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ordermatchedwith(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  return target;
}

size_t PlaceOrderResponse_MyOrderMatched::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
  if (this->has_ordermatchedwith()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ordermatchedwith_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderResponse_MyOrderMatched::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderResponse_MyOrderMatched* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderResponse_MyOrderMatched>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
    MergeFrom(*source);
  }
}

void PlaceOrderResponse_MyOrderMatched::MergeFrom(const PlaceOrderResponse_MyOrderMatched& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
  if (from.has_ordermatchedwith()) {
    _internal_mutable_ordermatchedwith()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_ordermatchedwith());
  }
}

void PlaceOrderResponse_MyOrderMatched::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderResponse_MyOrderMatched::CopyFrom(const PlaceOrderResponse_MyOrderMatched& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderResponse_MyOrderMatched::IsInitialized() const {
  return true;
}

void PlaceOrderResponse_MyOrderMatched::InternalSwap(PlaceOrderResponse_MyOrderMatched* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
  swap(ordermatchedwith_, other->ordermatchedwith_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderResponse_MyOrderMatched::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PlaceOrderResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_default_instance_.myorderplaced_ = const_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced*>(
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced::internal_default_instance());
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_default_instance_.myorderrejected_ = const_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected*>(
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected::internal_default_instance());
  ::io::stakenet::orderbook::protos::_PlaceOrderResponse_default_instance_.myordermatched_ = const_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched*>(
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched::internal_default_instance());
}
class PlaceOrderResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced& myorderplaced(const PlaceOrderResponse* msg);
  static const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected& myorderrejected(const PlaceOrderResponse* msg);
  static const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched& myordermatched(const PlaceOrderResponse* msg);
};

const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced&
PlaceOrderResponse::_Internal::myorderplaced(const PlaceOrderResponse* msg) {
  return *msg->value_.myorderplaced_;
}
const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected&
PlaceOrderResponse::_Internal::myorderrejected(const PlaceOrderResponse* msg) {
  return *msg->value_.myorderrejected_;
}
const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched&
PlaceOrderResponse::_Internal::myordermatched(const PlaceOrderResponse* msg) {
  return *msg->value_.myordermatched_;
}
void PlaceOrderResponse::set_allocated_myorderplaced(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* myorderplaced) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (myorderplaced) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myorderplaced = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myorderplaced, submessage_arena);
    }
    set_has_myorderplaced();
    value_.myorderplaced_ = myorderplaced;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderPlaced)
}
void PlaceOrderResponse::set_allocated_myorderrejected(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* myorderrejected) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (myorderrejected) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myorderrejected = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myorderrejected, submessage_arena);
    }
    set_has_myorderrejected();
    value_.myorderrejected_ = myorderrejected;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderRejected)
}
void PlaceOrderResponse::set_allocated_myordermatched(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* myordermatched) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (myordermatched) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myordermatched = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myordermatched, submessage_arena);
    }
    set_has_myordermatched();
    value_.myordermatched_ = myordermatched;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderMatched)
}
PlaceOrderResponse::PlaceOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.PlaceOrderResponse)
}
PlaceOrderResponse::PlaceOrderResponse(const PlaceOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kMyOrderPlaced: {
      _internal_mutable_myorderplaced()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced::MergeFrom(from._internal_myorderplaced());
      break;
    }
    case kMyOrderRejected: {
      _internal_mutable_myorderrejected()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected::MergeFrom(from._internal_myorderrejected());
      break;
    }
    case kMyOrderMatched: {
      _internal_mutable_myordermatched()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched::MergeFrom(from._internal_myordermatched());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.PlaceOrderResponse)
}

void PlaceOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  clear_has_value();
}

PlaceOrderResponse::~PlaceOrderResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.PlaceOrderResponse)
  SharedDtor();
}

void PlaceOrderResponse::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void PlaceOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PlaceOrderResponse& PlaceOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PlaceOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void PlaceOrderResponse::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  switch (value_case()) {
    case kMyOrderPlaced: {
      delete value_.myorderplaced_;
      break;
    }
    case kMyOrderRejected: {
      delete value_.myorderrejected_;
      break;
    }
    case kMyOrderMatched: {
      delete value_.myordermatched_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void PlaceOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* PlaceOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced myOrderPlaced = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_myorderplaced(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected myOrderRejected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_myorderrejected(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched myOrderMatched = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_myordermatched(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlaceOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced myOrderPlaced = 1;
  if (_internal_has_myorderplaced()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::myorderplaced(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected myOrderRejected = 2;
  if (_internal_has_myorderrejected()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::myorderrejected(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched myOrderMatched = 3;
  if (_internal_has_myordermatched()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::myordermatched(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.PlaceOrderResponse)
  return target;
}

size_t PlaceOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced myOrderPlaced = 1;
    case kMyOrderPlaced: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.myorderplaced_);
      break;
    }
    // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected myOrderRejected = 2;
    case kMyOrderRejected: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.myorderrejected_);
      break;
    }
    // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched myOrderMatched = 3;
    case kMyOrderMatched: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.myordermatched_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlaceOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PlaceOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlaceOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.PlaceOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.PlaceOrderResponse)
    MergeFrom(*source);
  }
}

void PlaceOrderResponse::MergeFrom(const PlaceOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kMyOrderPlaced: {
      _internal_mutable_myorderplaced()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced::MergeFrom(from._internal_myorderplaced());
      break;
    }
    case kMyOrderRejected: {
      _internal_mutable_myorderrejected()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected::MergeFrom(from._internal_myorderrejected());
      break;
    }
    case kMyOrderMatched: {
      _internal_mutable_myordermatched()->::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched::MergeFrom(from._internal_myordermatched());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void PlaceOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlaceOrderResponse::CopyFrom(const PlaceOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.PlaceOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlaceOrderResponse::IsInitialized() const {
  return true;
}

void PlaceOrderResponse::InternalSwap(PlaceOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PlaceOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOpenOrderByIdCommand::InitAsDefaultInstance() {
}
class GetOpenOrderByIdCommand::_Internal {
 public:
};

GetOpenOrderByIdCommand::GetOpenOrderByIdCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
}
GetOpenOrderByIdCommand::GetOpenOrderByIdCommand(const GetOpenOrderByIdCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
}

void GetOpenOrderByIdCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetOpenOrderByIdCommand::~GetOpenOrderByIdCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  SharedDtor();
}

void GetOpenOrderByIdCommand::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetOpenOrderByIdCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOpenOrderByIdCommand& GetOpenOrderByIdCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOpenOrderByIdCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOpenOrderByIdCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetOpenOrderByIdCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOpenOrderByIdCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  return target;
}

size_t GetOpenOrderByIdCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOpenOrderByIdCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOpenOrderByIdCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOpenOrderByIdCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
    MergeFrom(*source);
  }
}

void GetOpenOrderByIdCommand::MergeFrom(const GetOpenOrderByIdCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void GetOpenOrderByIdCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenOrderByIdCommand::CopyFrom(const GetOpenOrderByIdCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenOrderByIdCommand::IsInitialized() const {
  return true;
}

void GetOpenOrderByIdCommand::InternalSwap(GetOpenOrderByIdCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenOrderByIdCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetOpenOrderByIdResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetOpenOrderByIdResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class GetOpenOrderByIdResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const GetOpenOrderByIdResponse* msg);
};

const ::io::stakenet::orderbook::protos::Order&
GetOpenOrderByIdResponse::_Internal::order(const GetOpenOrderByIdResponse* msg) {
  return *msg->order_;
}
void GetOpenOrderByIdResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
GetOpenOrderByIdResponse::GetOpenOrderByIdResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
}
GetOpenOrderByIdResponse::GetOpenOrderByIdResponse(const GetOpenOrderByIdResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
}

void GetOpenOrderByIdResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  order_ = nullptr;
}

GetOpenOrderByIdResponse::~GetOpenOrderByIdResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  SharedDtor();
}

void GetOpenOrderByIdResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void GetOpenOrderByIdResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetOpenOrderByIdResponse& GetOpenOrderByIdResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetOpenOrderByIdResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetOpenOrderByIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetOpenOrderByIdResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetOpenOrderByIdResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  return target;
}

size_t GetOpenOrderByIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetOpenOrderByIdResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetOpenOrderByIdResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetOpenOrderByIdResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
    MergeFrom(*source);
  }
}

void GetOpenOrderByIdResponse::MergeFrom(const GetOpenOrderByIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void GetOpenOrderByIdResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetOpenOrderByIdResponse::CopyFrom(const GetOpenOrderByIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetOpenOrderByIdResponse::IsInitialized() const {
  return true;
}

void GetOpenOrderByIdResponse::InternalSwap(GetOpenOrderByIdResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetOpenOrderByIdResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOpenOrderCommand::InitAsDefaultInstance() {
}
class CancelOpenOrderCommand::_Internal {
 public:
};

CancelOpenOrderCommand::CancelOpenOrderCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
}
CancelOpenOrderCommand::CancelOpenOrderCommand(const CancelOpenOrderCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
}

void CancelOpenOrderCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelOpenOrderCommand::~CancelOpenOrderCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  SharedDtor();
}

void CancelOpenOrderCommand::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelOpenOrderCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOpenOrderCommand& CancelOpenOrderCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOpenOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CancelOpenOrderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CancelOpenOrderCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOpenOrderCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  return target;
}

size_t CancelOpenOrderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOpenOrderCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOpenOrderCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOpenOrderCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
    MergeFrom(*source);
  }
}

void CancelOpenOrderCommand::MergeFrom(const CancelOpenOrderCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void CancelOpenOrderCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOpenOrderCommand::CopyFrom(const CancelOpenOrderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOpenOrderCommand::IsInitialized() const {
  return true;
}

void CancelOpenOrderCommand::InternalSwap(CancelOpenOrderCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOpenOrderCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelOpenOrderResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_CancelOpenOrderResponse_default_instance_._instance.get_mutable()->order_ = const_cast< ::io::stakenet::orderbook::protos::Order*>(
      ::io::stakenet::orderbook::protos::Order::internal_default_instance());
}
class CancelOpenOrderResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Order& order(const CancelOpenOrderResponse* msg);
};

const ::io::stakenet::orderbook::protos::Order&
CancelOpenOrderResponse::_Internal::order(const CancelOpenOrderResponse* msg) {
  return *msg->order_;
}
void CancelOpenOrderResponse::clear_order() {
  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
}
CancelOpenOrderResponse::CancelOpenOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
}
CancelOpenOrderResponse::CancelOpenOrderResponse(const CancelOpenOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_order()) {
    order_ = new ::io::stakenet::orderbook::protos::Order(*from.order_);
  } else {
    order_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
}

void CancelOpenOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  order_ = nullptr;
}

CancelOpenOrderResponse::~CancelOpenOrderResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  SharedDtor();
}

void CancelOpenOrderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete order_;
}

void CancelOpenOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelOpenOrderResponse& CancelOpenOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelOpenOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CancelOpenOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && order_ != nullptr) {
    delete order_;
  }
  order_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CancelOpenOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Order order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_order(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelOpenOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::order(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  return target;
}

size_t CancelOpenOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Order order = 1;
  if (this->has_order()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *order_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelOpenOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelOpenOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelOpenOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
    MergeFrom(*source);
  }
}

void CancelOpenOrderResponse::MergeFrom(const CancelOpenOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order()) {
    _internal_mutable_order()->::io::stakenet::orderbook::protos::Order::MergeFrom(from._internal_order());
  }
}

void CancelOpenOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelOpenOrderResponse::CopyFrom(const CancelOpenOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelOpenOrderResponse::IsInitialized() const {
  return true;
}

void CancelOpenOrderResponse::InternalSwap(CancelOpenOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(order_, other->order_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelOpenOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendOrderMessageCommand::InitAsDefaultInstance() {
}
class SendOrderMessageCommand::_Internal {
 public:
};

SendOrderMessageCommand::SendOrderMessageCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SendOrderMessageCommand)
}
SendOrderMessageCommand::SendOrderMessageCommand(const SendOrderMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SendOrderMessageCommand)
}

void SendOrderMessageCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendOrderMessageCommand::~SendOrderMessageCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  SharedDtor();
}

void SendOrderMessageCommand::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendOrderMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrderMessageCommand& SendOrderMessageCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrderMessageCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SendOrderMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendOrderMessageCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrderMessageCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  return target;
}

size_t SendOrderMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // bytes message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrderMessageCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrderMessageCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrderMessageCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SendOrderMessageCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SendOrderMessageCommand)
    MergeFrom(*source);
  }
}

void SendOrderMessageCommand::MergeFrom(const SendOrderMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void SendOrderMessageCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrderMessageCommand::CopyFrom(const SendOrderMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrderMessageCommand::IsInitialized() const {
  return true;
}

void SendOrderMessageCommand::InternalSwap(SendOrderMessageCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrderMessageCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendOrderMessageResponse_OrderMessageSent::InitAsDefaultInstance() {
}
class SendOrderMessageResponse_OrderMessageSent::_Internal {
 public:
};

SendOrderMessageResponse_OrderMessageSent::SendOrderMessageResponse_OrderMessageSent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
}
SendOrderMessageResponse_OrderMessageSent::SendOrderMessageResponse_OrderMessageSent(const SendOrderMessageResponse_OrderMessageSent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
}

void SendOrderMessageResponse_OrderMessageSent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendOrderMessageResponse_OrderMessageSent::~SendOrderMessageResponse_OrderMessageSent() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  SharedDtor();
}

void SendOrderMessageResponse_OrderMessageSent::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendOrderMessageResponse_OrderMessageSent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrderMessageResponse_OrderMessageSent& SendOrderMessageResponse_OrderMessageSent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrderMessageResponse_OrderMessageSent_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SendOrderMessageResponse_OrderMessageSent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendOrderMessageResponse_OrderMessageSent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrderMessageResponse_OrderMessageSent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  return target;
}

size_t SendOrderMessageResponse_OrderMessageSent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrderMessageResponse_OrderMessageSent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrderMessageResponse_OrderMessageSent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrderMessageResponse_OrderMessageSent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
    MergeFrom(*source);
  }
}

void SendOrderMessageResponse_OrderMessageSent::MergeFrom(const SendOrderMessageResponse_OrderMessageSent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void SendOrderMessageResponse_OrderMessageSent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrderMessageResponse_OrderMessageSent::CopyFrom(const SendOrderMessageResponse_OrderMessageSent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrderMessageResponse_OrderMessageSent::IsInitialized() const {
  return true;
}

void SendOrderMessageResponse_OrderMessageSent::InternalSwap(SendOrderMessageResponse_OrderMessageSent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrderMessageResponse_OrderMessageSent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendOrderMessageResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_SendOrderMessageResponse_default_instance_.ordermessagesent_ = const_cast< ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent*>(
      ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent::internal_default_instance());
  ::io::stakenet::orderbook::protos::_SendOrderMessageResponse_default_instance_.matchedordernotfound_ = const_cast< ::io::stakenet::orderbook::protos::MatchedOrderNotFound*>(
      ::io::stakenet::orderbook::protos::MatchedOrderNotFound::internal_default_instance());
}
class SendOrderMessageResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent& ordermessagesent(const SendOrderMessageResponse* msg);
  static const ::io::stakenet::orderbook::protos::MatchedOrderNotFound& matchedordernotfound(const SendOrderMessageResponse* msg);
};

const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent&
SendOrderMessageResponse::_Internal::ordermessagesent(const SendOrderMessageResponse* msg) {
  return *msg->value_.ordermessagesent_;
}
const ::io::stakenet::orderbook::protos::MatchedOrderNotFound&
SendOrderMessageResponse::_Internal::matchedordernotfound(const SendOrderMessageResponse* msg) {
  return *msg->value_.matchedordernotfound_;
}
void SendOrderMessageResponse::set_allocated_ordermessagesent(::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* ordermessagesent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (ordermessagesent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordermessagesent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ordermessagesent, submessage_arena);
    }
    set_has_ordermessagesent();
    value_.ordermessagesent_ = ordermessagesent;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SendOrderMessageResponse.orderMessageSent)
}
void SendOrderMessageResponse::set_allocated_matchedordernotfound(::io::stakenet::orderbook::protos::MatchedOrderNotFound* matchedordernotfound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (matchedordernotfound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matchedordernotfound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matchedordernotfound, submessage_arena);
    }
    set_has_matchedordernotfound();
    value_.matchedordernotfound_ = matchedordernotfound;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SendOrderMessageResponse.MatchedOrderNotFound)
}
SendOrderMessageResponse::SendOrderMessageResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.SendOrderMessageResponse)
}
SendOrderMessageResponse::SendOrderMessageResponse(const SendOrderMessageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kOrderMessageSent: {
      _internal_mutable_ordermessagesent()->::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent::MergeFrom(from._internal_ordermessagesent());
      break;
    }
    case kMatchedOrderNotFound: {
      _internal_mutable_matchedordernotfound()->::io::stakenet::orderbook::protos::MatchedOrderNotFound::MergeFrom(from._internal_matchedordernotfound());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.SendOrderMessageResponse)
}

void SendOrderMessageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  clear_has_value();
}

SendOrderMessageResponse::~SendOrderMessageResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  SharedDtor();
}

void SendOrderMessageResponse::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void SendOrderMessageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendOrderMessageResponse& SendOrderMessageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendOrderMessageResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void SendOrderMessageResponse::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  switch (value_case()) {
    case kOrderMessageSent: {
      delete value_.ordermessagesent_;
      break;
    }
    case kMatchedOrderNotFound: {
      delete value_.matchedordernotfound_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SendOrderMessageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* SendOrderMessageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent orderMessageSent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ordermessagesent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.MatchedOrderNotFound MatchedOrderNotFound = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_matchedordernotfound(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendOrderMessageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent orderMessageSent = 1;
  if (_internal_has_ordermessagesent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ordermessagesent(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.MatchedOrderNotFound MatchedOrderNotFound = 2;
  if (_internal_has_matchedordernotfound()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::matchedordernotfound(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  return target;
}

size_t SendOrderMessageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent orderMessageSent = 1;
    case kOrderMessageSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.ordermessagesent_);
      break;
    }
    // .io.stakenet.orderbook.protos.MatchedOrderNotFound MatchedOrderNotFound = 2;
    case kMatchedOrderNotFound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.matchedordernotfound_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendOrderMessageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendOrderMessageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendOrderMessageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.SendOrderMessageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.SendOrderMessageResponse)
    MergeFrom(*source);
  }
}

void SendOrderMessageResponse::MergeFrom(const SendOrderMessageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kOrderMessageSent: {
      _internal_mutable_ordermessagesent()->::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent::MergeFrom(from._internal_ordermessagesent());
      break;
    }
    case kMatchedOrderNotFound: {
      _internal_mutable_matchedordernotfound()->::io::stakenet::orderbook::protos::MatchedOrderNotFound::MergeFrom(from._internal_matchedordernotfound());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SendOrderMessageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendOrderMessageResponse::CopyFrom(const SendOrderMessageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.SendOrderMessageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendOrderMessageResponse::IsInitialized() const {
  return true;
}

void SendOrderMessageResponse::InternalSwap(SendOrderMessageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendOrderMessageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelMatchedOrderCommand::InitAsDefaultInstance() {
}
class CancelMatchedOrderCommand::_Internal {
 public:
};

CancelMatchedOrderCommand::CancelMatchedOrderCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
}
CancelMatchedOrderCommand::CancelMatchedOrderCommand(const CancelMatchedOrderCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
}

void CancelMatchedOrderCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelMatchedOrderCommand::~CancelMatchedOrderCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  SharedDtor();
}

void CancelMatchedOrderCommand::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelMatchedOrderCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelMatchedOrderCommand& CancelMatchedOrderCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelMatchedOrderCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CancelMatchedOrderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CancelMatchedOrderCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelMatchedOrderCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  return target;
}

size_t CancelMatchedOrderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelMatchedOrderCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelMatchedOrderCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelMatchedOrderCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
    MergeFrom(*source);
  }
}

void CancelMatchedOrderCommand::MergeFrom(const CancelMatchedOrderCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void CancelMatchedOrderCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelMatchedOrderCommand::CopyFrom(const CancelMatchedOrderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelMatchedOrderCommand::IsInitialized() const {
  return true;
}

void CancelMatchedOrderCommand::InternalSwap(CancelMatchedOrderCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelMatchedOrderCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelMatchedOrderResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_CancelMatchedOrderResponse_default_instance_._instance.get_mutable()->trade_ = const_cast< ::io::stakenet::orderbook::protos::Trade*>(
      ::io::stakenet::orderbook::protos::Trade::internal_default_instance());
}
class CancelMatchedOrderResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::Trade& trade(const CancelMatchedOrderResponse* msg);
};

const ::io::stakenet::orderbook::protos::Trade&
CancelMatchedOrderResponse::_Internal::trade(const CancelMatchedOrderResponse* msg) {
  return *msg->trade_;
}
void CancelMatchedOrderResponse::clear_trade() {
  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
}
CancelMatchedOrderResponse::CancelMatchedOrderResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
}
CancelMatchedOrderResponse::CancelMatchedOrderResponse(const CancelMatchedOrderResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_trade()) {
    trade_ = new ::io::stakenet::orderbook::protos::Trade(*from.trade_);
  } else {
    trade_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
}

void CancelMatchedOrderResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  trade_ = nullptr;
}

CancelMatchedOrderResponse::~CancelMatchedOrderResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  SharedDtor();
}

void CancelMatchedOrderResponse::SharedDtor() {
  if (this != internal_default_instance()) delete trade_;
}

void CancelMatchedOrderResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelMatchedOrderResponse& CancelMatchedOrderResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelMatchedOrderResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CancelMatchedOrderResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trade_ != nullptr) {
    delete trade_;
  }
  trade_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CancelMatchedOrderResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.Trade trade = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelMatchedOrderResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::trade(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  return target;
}

size_t CancelMatchedOrderResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.Trade trade = 1;
  if (this->has_trade()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trade_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelMatchedOrderResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelMatchedOrderResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelMatchedOrderResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
    MergeFrom(*source);
  }
}

void CancelMatchedOrderResponse::MergeFrom(const CancelMatchedOrderResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trade()) {
    _internal_mutable_trade()->::io::stakenet::orderbook::protos::Trade::MergeFrom(from._internal_trade());
  }
}

void CancelMatchedOrderResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelMatchedOrderResponse::CopyFrom(const CancelMatchedOrderResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelMatchedOrderResponse::IsInitialized() const {
  return true;
}

void CancelMatchedOrderResponse::InternalSwap(CancelMatchedOrderResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trade_, other->trade_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelMatchedOrderResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MatchedOrderNotFound::InitAsDefaultInstance() {
}
class MatchedOrderNotFound::_Internal {
 public:
};

MatchedOrderNotFound::MatchedOrderNotFound()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.MatchedOrderNotFound)
}
MatchedOrderNotFound::MatchedOrderNotFound(const MatchedOrderNotFound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.MatchedOrderNotFound)
}

void MatchedOrderNotFound::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MatchedOrderNotFound::~MatchedOrderNotFound() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  SharedDtor();
}

void MatchedOrderNotFound::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MatchedOrderNotFound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MatchedOrderNotFound& MatchedOrderNotFound::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MatchedOrderNotFound_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void MatchedOrderNotFound::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* MatchedOrderNotFound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MatchedOrderNotFound::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  return target;
}

size_t MatchedOrderNotFound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MatchedOrderNotFound::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  const MatchedOrderNotFound* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MatchedOrderNotFound>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.MatchedOrderNotFound)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.MatchedOrderNotFound)
    MergeFrom(*source);
  }
}

void MatchedOrderNotFound::MergeFrom(const MatchedOrderNotFound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
}

void MatchedOrderNotFound::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchedOrderNotFound::CopyFrom(const MatchedOrderNotFound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.MatchedOrderNotFound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchedOrderNotFound::IsInitialized() const {
  return true;
}

void MatchedOrderNotFound::InternalSwap(MatchedOrderNotFound* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchedOrderNotFound::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanTradingPairOrdersCommand::InitAsDefaultInstance() {
}
class CleanTradingPairOrdersCommand::_Internal {
 public:
};

CleanTradingPairOrdersCommand::CleanTradingPairOrdersCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
}
CleanTradingPairOrdersCommand::CleanTradingPairOrdersCommand(const CleanTradingPairOrdersCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
}

void CleanTradingPairOrdersCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CleanTradingPairOrdersCommand::~CleanTradingPairOrdersCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  SharedDtor();
}

void CleanTradingPairOrdersCommand::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanTradingPairOrdersCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanTradingPairOrdersCommand& CleanTradingPairOrdersCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanTradingPairOrdersCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CleanTradingPairOrdersCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CleanTradingPairOrdersCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanTradingPairOrdersCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  return target;
}

size_t CleanTradingPairOrdersCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanTradingPairOrdersCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanTradingPairOrdersCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanTradingPairOrdersCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
    MergeFrom(*source);
  }
}

void CleanTradingPairOrdersCommand::MergeFrom(const CleanTradingPairOrdersCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void CleanTradingPairOrdersCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanTradingPairOrdersCommand::CopyFrom(const CleanTradingPairOrdersCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanTradingPairOrdersCommand::IsInitialized() const {
  return true;
}

void CleanTradingPairOrdersCommand::InternalSwap(CleanTradingPairOrdersCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanTradingPairOrdersCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CleanTradingPairOrdersResponse::InitAsDefaultInstance() {
}
class CleanTradingPairOrdersResponse::_Internal {
 public:
};

CleanTradingPairOrdersResponse::CleanTradingPairOrdersResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
}
CleanTradingPairOrdersResponse::CleanTradingPairOrdersResponse(const CleanTradingPairOrdersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      openordersremoved_(from.openordersremoved_),
      matchedordersremoved_(from.matchedordersremoved_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
}

void CleanTradingPairOrdersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CleanTradingPairOrdersResponse::~CleanTradingPairOrdersResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  SharedDtor();
}

void CleanTradingPairOrdersResponse::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanTradingPairOrdersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CleanTradingPairOrdersResponse& CleanTradingPairOrdersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CleanTradingPairOrdersResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void CleanTradingPairOrdersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  openordersremoved_.Clear();
  matchedordersremoved_.Clear();
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CleanTradingPairOrdersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string openOrdersRemoved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_openordersremoved();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string matchedOrdersRemoved = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_matchedordersremoved();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CleanTradingPairOrdersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // repeated string openOrdersRemoved = 2;
  for (int i = 0, n = this->_internal_openordersremoved_size(); i < n; i++) {
    const auto& s = this->_internal_openordersremoved(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved");
    target = stream->WriteString(2, s, target);
  }

  // repeated string matchedOrdersRemoved = 3;
  for (int i = 0, n = this->_internal_matchedordersremoved_size(); i < n; i++) {
    const auto& s = this->_internal_matchedordersremoved(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  return target;
}

size_t CleanTradingPairOrdersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string openOrdersRemoved = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(openordersremoved_.size());
  for (int i = 0, n = openordersremoved_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      openordersremoved_.Get(i));
  }

  // repeated string matchedOrdersRemoved = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(matchedordersremoved_.size());
  for (int i = 0, n = matchedordersremoved_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      matchedordersremoved_.Get(i));
  }

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanTradingPairOrdersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CleanTradingPairOrdersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CleanTradingPairOrdersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
    MergeFrom(*source);
  }
}

void CleanTradingPairOrdersResponse::MergeFrom(const CleanTradingPairOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  openordersremoved_.MergeFrom(from.openordersremoved_);
  matchedordersremoved_.MergeFrom(from.matchedordersremoved_);
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
}

void CleanTradingPairOrdersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CleanTradingPairOrdersResponse::CopyFrom(const CleanTradingPairOrdersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanTradingPairOrdersResponse::IsInitialized() const {
  return true;
}

void CleanTradingPairOrdersResponse::InternalSwap(CleanTradingPairOrdersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  openordersremoved_.InternalSwap(&other->openordersremoved_);
  matchedordersremoved_.InternalSwap(&other->matchedordersremoved_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanTradingPairOrdersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLndPaymentInvoiceCommand::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetLndPaymentInvoiceCommand_default_instance_._instance.get_mutable()->amount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetLndPaymentInvoiceCommand::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& amount(const GetLndPaymentInvoiceCommand* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetLndPaymentInvoiceCommand::_Internal::amount(const GetLndPaymentInvoiceCommand* msg) {
  return *msg->amount_;
}
void GetLndPaymentInvoiceCommand::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
GetLndPaymentInvoiceCommand::GetLndPaymentInvoiceCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
}
GetLndPaymentInvoiceCommand::GetLndPaymentInvoiceCommand(const GetLndPaymentInvoiceCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
}

void GetLndPaymentInvoiceCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

GetLndPaymentInvoiceCommand::~GetLndPaymentInvoiceCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  SharedDtor();
}

void GetLndPaymentInvoiceCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void GetLndPaymentInvoiceCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLndPaymentInvoiceCommand& GetLndPaymentInvoiceCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLndPaymentInvoiceCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetLndPaymentInvoiceCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetLndPaymentInvoiceCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLndPaymentInvoiceCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  return target;
}

size_t GetLndPaymentInvoiceCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLndPaymentInvoiceCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLndPaymentInvoiceCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLndPaymentInvoiceCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
    MergeFrom(*source);
  }
}

void GetLndPaymentInvoiceCommand::MergeFrom(const GetLndPaymentInvoiceCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_amount());
  }
}

void GetLndPaymentInvoiceCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLndPaymentInvoiceCommand::CopyFrom(const GetLndPaymentInvoiceCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLndPaymentInvoiceCommand::IsInitialized() const {
  return true;
}

void GetLndPaymentInvoiceCommand::InternalSwap(GetLndPaymentInvoiceCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLndPaymentInvoiceCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLndPaymentInvoiceResponse::InitAsDefaultInstance() {
}
class GetLndPaymentInvoiceResponse::_Internal {
 public:
};

GetLndPaymentInvoiceResponse::GetLndPaymentInvoiceResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
}
GetLndPaymentInvoiceResponse::GetLndPaymentInvoiceResponse(const GetLndPaymentInvoiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymentrequest().empty()) {
    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  nofeerequired_ = from.nofeerequired_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
}

void GetLndPaymentInvoiceResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nofeerequired_ = false;
}

GetLndPaymentInvoiceResponse::~GetLndPaymentInvoiceResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  SharedDtor();
}

void GetLndPaymentInvoiceResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLndPaymentInvoiceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLndPaymentInvoiceResponse& GetLndPaymentInvoiceResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLndPaymentInvoiceResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetLndPaymentInvoiceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nofeerequired_ = false;
  _internal_metadata_.Clear();
}

const char* GetLndPaymentInvoiceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string paymentRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_paymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool noFeeRequired = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nofeerequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLndPaymentInvoiceResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string paymentRequest = 2;
  if (this->paymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paymentrequest().data(), static_cast<int>(this->_internal_paymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_paymentrequest(), target);
  }

  // bool noFeeRequired = 3;
  if (this->nofeerequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_nofeerequired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  return target;
}

size_t GetLndPaymentInvoiceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string paymentRequest = 2;
  if (this->paymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paymentrequest());
  }

  // bool noFeeRequired = 3;
  if (this->nofeerequired() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLndPaymentInvoiceResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLndPaymentInvoiceResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLndPaymentInvoiceResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
    MergeFrom(*source);
  }
}

void GetLndPaymentInvoiceResponse::MergeFrom(const GetLndPaymentInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.paymentrequest().size() > 0) {

    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  if (from.nofeerequired() != 0) {
    _internal_set_nofeerequired(from._internal_nofeerequired());
  }
}

void GetLndPaymentInvoiceResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLndPaymentInvoiceResponse::CopyFrom(const GetLndPaymentInvoiceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLndPaymentInvoiceResponse::IsInitialized() const {
  return true;
}

void GetLndPaymentInvoiceResponse::InternalSwap(GetLndPaymentInvoiceResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymentrequest_.Swap(&other->paymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nofeerequired_, other->nofeerequired_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLndPaymentInvoiceResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToRentChannelCommand::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelCommand_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GenerateInvoiceToRentChannelCommand::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& capacity(const GenerateInvoiceToRentChannelCommand* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GenerateInvoiceToRentChannelCommand::_Internal::capacity(const GenerateInvoiceToRentChannelCommand* msg) {
  return *msg->capacity_;
}
void GenerateInvoiceToRentChannelCommand::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
GenerateInvoiceToRentChannelCommand::GenerateInvoiceToRentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
}
GenerateInvoiceToRentChannelCommand::GenerateInvoiceToRentChannelCommand(const GenerateInvoiceToRentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
}

void GenerateInvoiceToRentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GenerateInvoiceToRentChannelCommand::~GenerateInvoiceToRentChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  SharedDtor();
}

void GenerateInvoiceToRentChannelCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GenerateInvoiceToRentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToRentChannelCommand& GenerateInvoiceToRentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToRentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToRentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToRentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  return target;
}

size_t GenerateInvoiceToRentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToRentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToRentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToRentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToRentChannelCommand::MergeFrom(const GenerateInvoiceToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GenerateInvoiceToRentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToRentChannelCommand::CopyFrom(const GenerateInvoiceToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToRentChannelCommand::IsInitialized() const {
  return true;
}

void GenerateInvoiceToRentChannelCommand::InternalSwap(GenerateInvoiceToRentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToRentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToRentChannelResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GenerateInvoiceToRentChannelResponse_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GenerateInvoiceToRentChannelResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& capacity(const GenerateInvoiceToRentChannelResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GenerateInvoiceToRentChannelResponse::_Internal::capacity(const GenerateInvoiceToRentChannelResponse* msg) {
  return *msg->capacity_;
}
void GenerateInvoiceToRentChannelResponse::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
GenerateInvoiceToRentChannelResponse::GenerateInvoiceToRentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
}
GenerateInvoiceToRentChannelResponse::GenerateInvoiceToRentChannelResponse(const GenerateInvoiceToRentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymentrequest().empty()) {
    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
}

void GenerateInvoiceToRentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GenerateInvoiceToRentChannelResponse::~GenerateInvoiceToRentChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  SharedDtor();
}

void GenerateInvoiceToRentChannelResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GenerateInvoiceToRentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToRentChannelResponse& GenerateInvoiceToRentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToRentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToRentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string paymentRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_paymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToRentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  // string paymentRequest = 5;
  if (this->paymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paymentrequest().data(), static_cast<int>(this->_internal_paymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_paymentrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  return target;
}

size_t GenerateInvoiceToRentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // string paymentRequest = 5;
  if (this->paymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paymentrequest());
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToRentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToRentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToRentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToRentChannelResponse::MergeFrom(const GenerateInvoiceToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.paymentrequest().size() > 0) {

    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GenerateInvoiceToRentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToRentChannelResponse::CopyFrom(const GenerateInvoiceToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToRentChannelResponse::IsInitialized() const {
  return true;
}

void GenerateInvoiceToRentChannelResponse::InternalSwap(GenerateInvoiceToRentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymentrequest_.Swap(&other->paymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToRentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneratePaymentHashToRentChannelCommand::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelCommand_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GeneratePaymentHashToRentChannelCommand::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& capacity(const GeneratePaymentHashToRentChannelCommand* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GeneratePaymentHashToRentChannelCommand::_Internal::capacity(const GeneratePaymentHashToRentChannelCommand* msg) {
  return *msg->capacity_;
}
void GeneratePaymentHashToRentChannelCommand::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
GeneratePaymentHashToRentChannelCommand::GeneratePaymentHashToRentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
}
GeneratePaymentHashToRentChannelCommand::GeneratePaymentHashToRentChannelCommand(const GeneratePaymentHashToRentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
}

void GeneratePaymentHashToRentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GeneratePaymentHashToRentChannelCommand::~GeneratePaymentHashToRentChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  SharedDtor();
}

void GeneratePaymentHashToRentChannelCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GeneratePaymentHashToRentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneratePaymentHashToRentChannelCommand& GeneratePaymentHashToRentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneratePaymentHashToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GeneratePaymentHashToRentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GeneratePaymentHashToRentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneratePaymentHashToRentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  return target;
}

size_t GeneratePaymentHashToRentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneratePaymentHashToRentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneratePaymentHashToRentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneratePaymentHashToRentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
    MergeFrom(*source);
  }
}

void GeneratePaymentHashToRentChannelCommand::MergeFrom(const GeneratePaymentHashToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GeneratePaymentHashToRentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneratePaymentHashToRentChannelCommand::CopyFrom(const GeneratePaymentHashToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratePaymentHashToRentChannelCommand::IsInitialized() const {
  return true;
}

void GeneratePaymentHashToRentChannelCommand::InternalSwap(GeneratePaymentHashToRentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratePaymentHashToRentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneratePaymentHashToRentChannelResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GeneratePaymentHashToRentChannelResponse_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GeneratePaymentHashToRentChannelResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& capacity(const GeneratePaymentHashToRentChannelResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GeneratePaymentHashToRentChannelResponse::_Internal::capacity(const GeneratePaymentHashToRentChannelResponse* msg) {
  return *msg->capacity_;
}
void GeneratePaymentHashToRentChannelResponse::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
GeneratePaymentHashToRentChannelResponse::GeneratePaymentHashToRentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
}
GeneratePaymentHashToRentChannelResponse::GeneratePaymentHashToRentChannelResponse(const GeneratePaymentHashToRentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
}

void GeneratePaymentHashToRentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GeneratePaymentHashToRentChannelResponse::~GeneratePaymentHashToRentChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  SharedDtor();
}

void GeneratePaymentHashToRentChannelResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GeneratePaymentHashToRentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneratePaymentHashToRentChannelResponse& GeneratePaymentHashToRentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneratePaymentHashToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GeneratePaymentHashToRentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GeneratePaymentHashToRentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneratePaymentHashToRentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  // bytes paymentHash = 5;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_paymenthash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  return target;
}

size_t GeneratePaymentHashToRentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // bytes paymentHash = 5;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneratePaymentHashToRentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneratePaymentHashToRentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneratePaymentHashToRentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
    MergeFrom(*source);
  }
}

void GeneratePaymentHashToRentChannelResponse::MergeFrom(const GeneratePaymentHashToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GeneratePaymentHashToRentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneratePaymentHashToRentChannelResponse::CopyFrom(const GeneratePaymentHashToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratePaymentHashToRentChannelResponse::IsInitialized() const {
  return true;
}

void GeneratePaymentHashToRentChannelResponse::InternalSwap(GeneratePaymentHashToRentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratePaymentHashToRentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentChannelCommand::InitAsDefaultInstance() {
}
class RentChannelCommand::_Internal {
 public:
};

RentChannelCommand::RentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentChannelCommand)
}
RentChannelCommand::RentChannelCommand(const RentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentChannelCommand)
}

void RentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RentChannelCommand::~RentChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentChannelCommand)
  SharedDtor();
}

void RentChannelCommand::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentChannelCommand& RentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes paymentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_paymenthash(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentChannelCommand)
  return target;
}

size_t RentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentChannelCommand)
    MergeFrom(*source);
  }
}

void RentChannelCommand::MergeFrom(const RentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
}

void RentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentChannelCommand::CopyFrom(const RentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentChannelCommand::IsInitialized() const {
  return true;
}

void RentChannelCommand::InternalSwap(RentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentChannelResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_RentChannelResponse_default_instance_._instance.get_mutable()->channel_ = const_cast< ::io::stakenet::orderbook::protos::RentedChannel*>(
      ::io::stakenet::orderbook::protos::RentedChannel::internal_default_instance());
}
class RentChannelResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::RentedChannel& channel(const RentChannelResponse* msg);
};

const ::io::stakenet::orderbook::protos::RentedChannel&
RentChannelResponse::_Internal::channel(const RentChannelResponse* msg) {
  return *msg->channel_;
}
void RentChannelResponse::clear_channel() {
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
}
RentChannelResponse::RentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentChannelResponse)
}
RentChannelResponse::RentChannelResponse(const RentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodepublickey().empty()) {
    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  fundingtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fundingtransaction().empty()) {
    fundingtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtransaction_);
  }
  fundingtxidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fundingtxidstr().empty()) {
    fundingtxidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtxidstr_);
  }
  if (from._internal_has_channel()) {
    channel_ = new ::io::stakenet::orderbook::protos::RentedChannel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  outputindex_ = from.outputindex_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentChannelResponse)
}

void RentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&outputindex_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(outputindex_));
}

RentChannelResponse::~RentChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentChannelResponse)
  SharedDtor();
}

void RentChannelResponse::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete channel_;
}

void RentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentChannelResponse& RentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nodepublickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  outputindex_ = 0;
  _internal_metadata_.Clear();
}

const char* RentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes paymentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nodePublicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nodepublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentChannelResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fundingTransaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_fundingtransaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outputIndex = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          outputindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundingTxidStr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_fundingtxidstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.RentedChannel channel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_paymenthash(), target);
  }

  // bytes nodePublicKey = 2;
  if (this->nodepublickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nodepublickey(), target);
  }

  // string channelId = 3;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentChannelResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channelid(), target);
  }

  // bytes fundingTransaction = 4;
  if (this->fundingtransaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_fundingtransaction(), target);
  }

  // int32 outputIndex = 5;
  if (this->outputindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_outputindex(), target);
  }

  // string fundingTxidStr = 6;
  if (this->fundingtxidstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundingtxidstr().data(), static_cast<int>(this->_internal_fundingtxidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_fundingtxidstr(), target);
  }

  // .io.stakenet.orderbook.protos.RentedChannel channel = 7;
  if (this->has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentChannelResponse)
  return target;
}

size_t RentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // bytes nodePublicKey = 2;
  if (this->nodepublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nodepublickey());
  }

  // string channelId = 3;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // bytes fundingTransaction = 4;
  if (this->fundingtransaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fundingtransaction());
  }

  // string fundingTxidStr = 6;
  if (this->fundingtxidstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fundingtxidstr());
  }

  // .io.stakenet.orderbook.protos.RentedChannel channel = 7;
  if (this->has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // int32 outputIndex = 5;
  if (this->outputindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outputindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentChannelResponse)
    MergeFrom(*source);
  }
}

void RentChannelResponse::MergeFrom(const RentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.nodepublickey().size() > 0) {

    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.fundingtransaction().size() > 0) {

    fundingtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtransaction_);
  }
  if (from.fundingtxidstr().size() > 0) {

    fundingtxidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtxidstr_);
  }
  if (from.has_channel()) {
    _internal_mutable_channel()->::io::stakenet::orderbook::protos::RentedChannel::MergeFrom(from._internal_channel());
  }
  if (from.outputindex() != 0) {
    _internal_set_outputindex(from._internal_outputindex());
  }
}

void RentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentChannelResponse::CopyFrom(const RentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentChannelResponse::IsInitialized() const {
  return true;
}

void RentChannelResponse::InternalSwap(RentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  nodepublickey_.Swap(&other->nodepublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fundingtransaction_.Swap(&other->fundingtransaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fundingtxidstr_.Swap(&other->fundingtxidstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(outputindex_, other->outputindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChannelStatusCommand::InitAsDefaultInstance() {
}
class GetChannelStatusCommand::_Internal {
 public:
};

GetChannelStatusCommand::GetChannelStatusCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetChannelStatusCommand)
}
GetChannelStatusCommand::GetChannelStatusCommand(const GetChannelStatusCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetChannelStatusCommand)
}

void GetChannelStatusCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetChannelStatusCommand::~GetChannelStatusCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  SharedDtor();
}

void GetChannelStatusCommand::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChannelStatusCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelStatusCommand& GetChannelStatusCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelStatusCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetChannelStatusCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetChannelStatusCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatusCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  return target;
}

size_t GetChannelStatusCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelStatusCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelStatusCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelStatusCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetChannelStatusCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetChannelStatusCommand)
    MergeFrom(*source);
  }
}

void GetChannelStatusCommand::MergeFrom(const GetChannelStatusCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
}

void GetChannelStatusCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelStatusCommand::CopyFrom(const GetChannelStatusCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetChannelStatusCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatusCommand::IsInitialized() const {
  return true;
}

void GetChannelStatusCommand::InternalSwap(GetChannelStatusCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatusCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetChannelStatusResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetChannelStatusResponse_default_instance_.lnd_ = const_cast< ::io::stakenet::orderbook::protos::LndChannelStatus*>(
      ::io::stakenet::orderbook::protos::LndChannelStatus::internal_default_instance());
  ::io::stakenet::orderbook::protos::_GetChannelStatusResponse_default_instance_.connext_ = const_cast< ::io::stakenet::orderbook::protos::ConnextChannelStatus*>(
      ::io::stakenet::orderbook::protos::ConnextChannelStatus::internal_default_instance());
}
class GetChannelStatusResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::LndChannelStatus& lnd(const GetChannelStatusResponse* msg);
  static const ::io::stakenet::orderbook::protos::ConnextChannelStatus& connext(const GetChannelStatusResponse* msg);
};

const ::io::stakenet::orderbook::protos::LndChannelStatus&
GetChannelStatusResponse::_Internal::lnd(const GetChannelStatusResponse* msg) {
  return *msg->status_.lnd_;
}
const ::io::stakenet::orderbook::protos::ConnextChannelStatus&
GetChannelStatusResponse::_Internal::connext(const GetChannelStatusResponse* msg) {
  return *msg->status_.connext_;
}
void GetChannelStatusResponse::set_allocated_lnd(::io::stakenet::orderbook::protos::LndChannelStatus* lnd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_status();
  if (lnd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lnd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lnd, submessage_arena);
    }
    set_has_lnd();
    status_.lnd_ = lnd;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetChannelStatusResponse.lnd)
}
void GetChannelStatusResponse::set_allocated_connext(::io::stakenet::orderbook::protos::ConnextChannelStatus* connext) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_status();
  if (connext) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connext = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connext, submessage_arena);
    }
    set_has_connext();
    status_.connext_ = connext;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetChannelStatusResponse.connext)
}
GetChannelStatusResponse::GetChannelStatusResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetChannelStatusResponse)
}
GetChannelStatusResponse::GetChannelStatusResponse(const GetChannelStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  clear_has_status();
  switch (from.status_case()) {
    case kLnd: {
      _internal_mutable_lnd()->::io::stakenet::orderbook::protos::LndChannelStatus::MergeFrom(from._internal_lnd());
      break;
    }
    case kConnext: {
      _internal_mutable_connext()->::io::stakenet::orderbook::protos::ConnextChannelStatus::MergeFrom(from._internal_connext());
      break;
    }
    case STATUS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetChannelStatusResponse)
}

void GetChannelStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}

GetChannelStatusResponse::~GetChannelStatusResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  SharedDtor();
}

void GetChannelStatusResponse::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_status()) {
    clear_status();
  }
}

void GetChannelStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetChannelStatusResponse& GetChannelStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetChannelStatusResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetChannelStatusResponse::clear_status() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  switch (status_case()) {
    case kLnd: {
      delete status_.lnd_;
      break;
    }
    case kConnext: {
      delete status_.connext_;
      break;
    }
    case STATUS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATUS_NOT_SET;
}


void GetChannelStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_status();
  _internal_metadata_.Clear();
}

const char* GetChannelStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.LndChannelStatus lnd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_lnd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.ConnextChannelStatus connext = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_connext(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetChannelStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // .io.stakenet.orderbook.protos.LndChannelStatus lnd = 7;
  if (_internal_has_lnd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::lnd(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.ConnextChannelStatus connext = 8;
  if (_internal_has_connext()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::connext(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  return target;
}

size_t GetChannelStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  switch (status_case()) {
    // .io.stakenet.orderbook.protos.LndChannelStatus lnd = 7;
    case kLnd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_.lnd_);
      break;
    }
    // .io.stakenet.orderbook.protos.ConnextChannelStatus connext = 8;
    case kConnext: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_.connext_);
      break;
    }
    case STATUS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetChannelStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetChannelStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetChannelStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetChannelStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetChannelStatusResponse)
    MergeFrom(*source);
  }
}

void GetChannelStatusResponse::MergeFrom(const GetChannelStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  switch (from.status_case()) {
    case kLnd: {
      _internal_mutable_lnd()->::io::stakenet::orderbook::protos::LndChannelStatus::MergeFrom(from._internal_lnd());
      break;
    }
    case kConnext: {
      _internal_mutable_connext()->::io::stakenet::orderbook::protos::ConnextChannelStatus::MergeFrom(from._internal_connext());
      break;
    }
    case STATUS_NOT_SET: {
      break;
    }
  }
}

void GetChannelStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetChannelStatusResponse::CopyFrom(const GetChannelStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetChannelStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelStatusResponse::IsInitialized() const {
  return true;
}

void GetChannelStatusResponse::InternalSwap(GetChannelStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LndChannelStatus::InitAsDefaultInstance() {
}
class LndChannelStatus::_Internal {
 public:
};

LndChannelStatus::LndChannelStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.LndChannelStatus)
}
LndChannelStatus::LndChannelStatus(const LndChannelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  closingtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closingtype().empty()) {
    closingtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closingtype_);
  }
  closedby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_closedby().empty()) {
    closedby_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closedby_);
  }
  ::memcpy(&expiresat_, &from.expiresat_,
    static_cast<size_t>(reinterpret_cast<char*>(&closedon_) -
    reinterpret_cast<char*>(&expiresat_)) + sizeof(closedon_));
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.LndChannelStatus)
}

void LndChannelStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closingtype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closedby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiresat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closedon_) -
      reinterpret_cast<char*>(&expiresat_)) + sizeof(closedon_));
}

LndChannelStatus::~LndChannelStatus() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.LndChannelStatus)
  SharedDtor();
}

void LndChannelStatus::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closingtype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closedby_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LndChannelStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LndChannelStatus& LndChannelStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LndChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void LndChannelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.LndChannelStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closingtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closedby_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiresat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&closedon_) -
      reinterpret_cast<char*>(&expiresat_)) + sizeof(closedon_));
  _internal_metadata_.Clear();
}

const char* LndChannelStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.LndChannelStatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string closingType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_closingtype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.LndChannelStatus.closingType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string closedBy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_closedby();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.LndChannelStatus.closedBy"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 closedOn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          closedon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LndChannelStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.LndChannelStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.LndChannelStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiresat(), target);
  }

  // string closingType = 3;
  if (this->closingtype().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closingtype().data(), static_cast<int>(this->_internal_closingtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.LndChannelStatus.closingType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_closingtype(), target);
  }

  // string closedBy = 4;
  if (this->closedby().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_closedby().data(), static_cast<int>(this->_internal_closedby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.LndChannelStatus.closedBy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_closedby(), target);
  }

  // int64 closedOn = 5;
  if (this->closedon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_closedon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.LndChannelStatus)
  return target;
}

size_t LndChannelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.LndChannelStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string closingType = 3;
  if (this->closingtype().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closingtype());
  }

  // string closedBy = 4;
  if (this->closedby().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_closedby());
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  // int64 closedOn = 5;
  if (this->closedon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_closedon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LndChannelStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.LndChannelStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const LndChannelStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LndChannelStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.LndChannelStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.LndChannelStatus)
    MergeFrom(*source);
  }
}

void LndChannelStatus::MergeFrom(const LndChannelStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.LndChannelStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.closingtype().size() > 0) {

    closingtype_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closingtype_);
  }
  if (from.closedby().size() > 0) {

    closedby_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.closedby_);
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
  if (from.closedon() != 0) {
    _internal_set_closedon(from._internal_closedon());
  }
}

void LndChannelStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.LndChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LndChannelStatus::CopyFrom(const LndChannelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.LndChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LndChannelStatus::IsInitialized() const {
  return true;
}

void LndChannelStatus::InternalSwap(LndChannelStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  closingtype_.Swap(&other->closingtype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  closedby_.Swap(&other->closedby_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiresat_, other->expiresat_);
  swap(closedon_, other->closedon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LndChannelStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnextChannelStatus::InitAsDefaultInstance() {
}
class ConnextChannelStatus::_Internal {
 public:
};

ConnextChannelStatus::ConnextChannelStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.ConnextChannelStatus)
}
ConnextChannelStatus::ConnextChannelStatus(const ConnextChannelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  expiresat_ = from.expiresat_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.ConnextChannelStatus)
}

void ConnextChannelStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
}

ConnextChannelStatus::~ConnextChannelStatus() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.ConnextChannelStatus)
  SharedDtor();
}

void ConnextChannelStatus::SharedDtor() {
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnextChannelStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnextChannelStatus& ConnextChannelStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnextChannelStatus_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void ConnextChannelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ConnextChannelStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ConnextChannelStatus.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnextChannelStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ConnextChannelStatus.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_expiresat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.ConnextChannelStatus)
  return target;
}

size_t ConnextChannelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // int64 expiresAt = 2;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnextChannelStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnextChannelStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnextChannelStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.ConnextChannelStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.ConnextChannelStatus)
    MergeFrom(*source);
  }
}

void ConnextChannelStatus::MergeFrom(const ConnextChannelStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {

    status_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.status_);
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
}

void ConnextChannelStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnextChannelStatus::CopyFrom(const ConnextChannelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.ConnextChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnextChannelStatus::IsInitialized() const {
  return true;
}

void ConnextChannelStatus::InternalSwap(ConnextChannelStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiresat_, other->expiresat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnextChannelStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToRentChannelCommand::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetFeeToRentChannelCommand_default_instance_._instance.get_mutable()->capacity_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetFeeToRentChannelCommand::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& capacity(const GetFeeToRentChannelCommand* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetFeeToRentChannelCommand::_Internal::capacity(const GetFeeToRentChannelCommand* msg) {
  return *msg->capacity_;
}
void GetFeeToRentChannelCommand::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
GetFeeToRentChannelCommand::GetFeeToRentChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
}
GetFeeToRentChannelCommand::GetFeeToRentChannelCommand(const GetFeeToRentChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from._internal_has_capacity()) {
    capacity_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.capacity_);
  } else {
    capacity_ = nullptr;
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
}

void GetFeeToRentChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&capacity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lifetimeseconds_) -
      reinterpret_cast<char*>(&capacity_)) + sizeof(lifetimeseconds_));
}

GetFeeToRentChannelCommand::~GetFeeToRentChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  SharedDtor();
}

void GetFeeToRentChannelCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete capacity_;
}

void GetFeeToRentChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToRentChannelCommand& GetFeeToRentChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToRentChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToRentChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetFeeToRentChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_capacity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToRentChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::capacity(this), target, stream);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  return target;
}

size_t GetFeeToRentChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  if (this->has_capacity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capacity_);
  }

  // int64 lifetimeSeconds = 4;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToRentChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToRentChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToRentChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
    MergeFrom(*source);
  }
}

void GetFeeToRentChannelCommand::MergeFrom(const GetFeeToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.has_capacity()) {
    _internal_mutable_capacity()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_capacity());
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GetFeeToRentChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToRentChannelCommand::CopyFrom(const GetFeeToRentChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToRentChannelCommand::IsInitialized() const {
  return true;
}

void GetFeeToRentChannelCommand::InternalSwap(GetFeeToRentChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(capacity_, other->capacity_);
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToRentChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToRentChannelResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->fee_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->rentingfee_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_GetFeeToRentChannelResponse_default_instance_._instance.get_mutable()->onchainfees_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetFeeToRentChannelResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& fee(const GetFeeToRentChannelResponse* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& rentingfee(const GetFeeToRentChannelResponse* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& onchainfees(const GetFeeToRentChannelResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetFeeToRentChannelResponse::_Internal::fee(const GetFeeToRentChannelResponse* msg) {
  return *msg->fee_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
GetFeeToRentChannelResponse::_Internal::rentingfee(const GetFeeToRentChannelResponse* msg) {
  return *msg->rentingfee_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
GetFeeToRentChannelResponse::_Internal::onchainfees(const GetFeeToRentChannelResponse* msg) {
  return *msg->onchainfees_;
}
void GetFeeToRentChannelResponse::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
void GetFeeToRentChannelResponse::clear_rentingfee() {
  if (GetArenaNoVirtual() == nullptr && rentingfee_ != nullptr) {
    delete rentingfee_;
  }
  rentingfee_ = nullptr;
}
void GetFeeToRentChannelResponse::clear_onchainfees() {
  if (GetArenaNoVirtual() == nullptr && onchainfees_ != nullptr) {
    delete onchainfees_;
  }
  onchainfees_ = nullptr;
}
GetFeeToRentChannelResponse::GetFeeToRentChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
}
GetFeeToRentChannelResponse::GetFeeToRentChannelResponse(const GetFeeToRentChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  if (from._internal_has_rentingfee()) {
    rentingfee_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.rentingfee_);
  } else {
    rentingfee_ = nullptr;
  }
  if (from._internal_has_onchainfees()) {
    onchainfees_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.onchainfees_);
  } else {
    onchainfees_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
}

void GetFeeToRentChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  ::memset(&fee_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&onchainfees_) -
      reinterpret_cast<char*>(&fee_)) + sizeof(onchainfees_));
}

GetFeeToRentChannelResponse::~GetFeeToRentChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  SharedDtor();
}

void GetFeeToRentChannelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete fee_;
  if (this != internal_default_instance()) delete rentingfee_;
  if (this != internal_default_instance()) delete onchainfees_;
}

void GetFeeToRentChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToRentChannelResponse& GetFeeToRentChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToRentChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToRentChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rentingfee_ != nullptr) {
    delete rentingfee_;
  }
  rentingfee_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && onchainfees_ != nullptr) {
    delete onchainfees_;
  }
  onchainfees_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetFeeToRentChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.BigInteger fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger rentingFee = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rentingfee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger onChainFees = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onchainfees(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToRentChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fee(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger rentingFee = 2;
  if (this->has_rentingfee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rentingfee(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger onChainFees = 3;
  if (this->has_onchainfees()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::onchainfees(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  return target;
}

size_t GetFeeToRentChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  // .io.stakenet.orderbook.protos.BigInteger rentingFee = 2;
  if (this->has_rentingfee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rentingfee_);
  }

  // .io.stakenet.orderbook.protos.BigInteger onChainFees = 3;
  if (this->has_onchainfees()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *onchainfees_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToRentChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToRentChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToRentChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
    MergeFrom(*source);
  }
}

void GetFeeToRentChannelResponse::MergeFrom(const GetFeeToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    _internal_mutable_fee()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_fee());
  }
  if (from.has_rentingfee()) {
    _internal_mutable_rentingfee()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_rentingfee());
  }
  if (from.has_onchainfees()) {
    _internal_mutable_onchainfees()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_onchainfees());
  }
}

void GetFeeToRentChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToRentChannelResponse::CopyFrom(const GetFeeToRentChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToRentChannelResponse::IsInitialized() const {
  return true;
}

void GetFeeToRentChannelResponse::InternalSwap(GetFeeToRentChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
  swap(rentingfee_, other->rentingfee_);
  swap(onchainfees_, other->onchainfees_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToRentChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefundFeeCommand::InitAsDefaultInstance() {
}
class RefundFeeCommand::_Internal {
 public:
};

void RefundFeeCommand::clear_refundedfees() {
  refundedfees_.Clear();
}
RefundFeeCommand::RefundFeeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RefundFeeCommand)
}
RefundFeeCommand::RefundFeeCommand(const RefundFeeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      refundedfees_(from.refundedfees_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  refundedpaymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_refundedpaymenthash().empty()) {
    refundedpaymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refundedpaymenthash_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RefundFeeCommand)
}

void RefundFeeCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refundedpaymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RefundFeeCommand::~RefundFeeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RefundFeeCommand)
  SharedDtor();
}

void RefundFeeCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refundedpaymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RefundFeeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefundFeeCommand& RefundFeeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefundFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RefundFeeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refundedfees_.Clear();
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  refundedpaymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RefundFeeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RefundFeeCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes refundedPaymentHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_refundedpaymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refundedfees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefundFeeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 2;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RefundFeeCommand.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // bytes refundedPaymentHash = 4;
  if (this->refundedpaymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_refundedpaymenthash(), target);
  }

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refundedfees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_refundedfees(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RefundFeeCommand)
  return target;
}

size_t RefundFeeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 5;
  total_size += 1UL * this->_internal_refundedfees_size();
  for (const auto& msg : this->refundedfees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // bytes refundedPaymentHash = 4;
  if (this->refundedpaymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_refundedpaymenthash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefundFeeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RefundFeeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefundFeeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RefundFeeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RefundFeeCommand)
    MergeFrom(*source);
  }
}

void RefundFeeCommand::MergeFrom(const RefundFeeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refundedfees_.MergeFrom(from.refundedfees_);
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.refundedpaymenthash().size() > 0) {

    refundedpaymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.refundedpaymenthash_);
  }
}

void RefundFeeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefundFeeCommand::CopyFrom(const RefundFeeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RefundFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefundFeeCommand::IsInitialized() const {
  return true;
}

void RefundFeeCommand::InternalSwap(RefundFeeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refundedfees_.InternalSwap(&other->refundedfees_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  refundedpaymenthash_.Swap(&other->refundedpaymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RefundFeeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefundFeeResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_RefundFeeResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class RefundFeeResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& amount(const RefundFeeResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
RefundFeeResponse::_Internal::amount(const RefundFeeResponse* msg) {
  return *msg->amount_;
}
void RefundFeeResponse::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
void RefundFeeResponse::clear_refundedfees() {
  refundedfees_.Clear();
}
RefundFeeResponse::RefundFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RefundFeeResponse)
}
RefundFeeResponse::RefundFeeResponse(const RefundFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      refundedfees_(from.refundedfees_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  refundedon_ = from.refundedon_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RefundFeeResponse)
}

void RefundFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&amount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&refundedon_) -
      reinterpret_cast<char*>(&amount_)) + sizeof(refundedon_));
}

RefundFeeResponse::~RefundFeeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RefundFeeResponse)
  SharedDtor();
}

void RefundFeeResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void RefundFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefundFeeResponse& RefundFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefundFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RefundFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refundedfees_.Clear();
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  refundedon_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* RefundFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RefundFeeResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 refundedOn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          refundedon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refundedfees(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefundFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 2;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RefundFeeResponse.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  // int64 refundedOn = 5;
  if (this->refundedon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_refundedon(), target);
  }

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refundedfees_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_refundedfees(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RefundFeeResponse)
  return target;
}

size_t RefundFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 6;
  total_size += 1UL * this->_internal_refundedfees_size();
  for (const auto& msg : this->refundedfees_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  // int64 refundedOn = 5;
  if (this->refundedon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_refundedon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefundFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RefundFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefundFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RefundFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RefundFeeResponse)
    MergeFrom(*source);
  }
}

void RefundFeeResponse::MergeFrom(const RefundFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refundedfees_.MergeFrom(from.refundedfees_);
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_amount());
  }
  if (from.refundedon() != 0) {
    _internal_set_refundedon(from._internal_refundedon());
  }
}

void RefundFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefundFeeResponse::CopyFrom(const RefundFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RefundFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefundFeeResponse::IsInitialized() const {
  return true;
}

void RefundFeeResponse::InternalSwap(RefundFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refundedfees_.InternalSwap(&other->refundedfees_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
  swap(refundedon_, other->refundedon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefundFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRefundableAmountCommand::InitAsDefaultInstance() {
}
class GetRefundableAmountCommand::_Internal {
 public:
};

void GetRefundableAmountCommand::clear_refundablepayments() {
  refundablepayments_.Clear();
}
GetRefundableAmountCommand::GetRefundableAmountCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
}
GetRefundableAmountCommand::GetRefundableAmountCommand(const GetRefundableAmountCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      refundablepayments_(from.refundablepayments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
}

void GetRefundableAmountCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetRefundableAmountCommand::~GetRefundableAmountCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  SharedDtor();
}

void GetRefundableAmountCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetRefundableAmountCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRefundableAmountCommand& GetRefundableAmountCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRefundableAmountCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetRefundableAmountCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  refundablepayments_.Clear();
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetRefundableAmountCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .io.stakenet.orderbook.protos.RefundablePayment refundablePayments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refundablepayments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRefundableAmountCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_paymenthash(), target);
  }

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundablePayments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_refundablepayments_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_refundablepayments(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  return target;
}

size_t GetRefundableAmountCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundablePayments = 3;
  total_size += 1UL * this->_internal_refundablepayments_size();
  for (const auto& msg : this->refundablepayments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRefundableAmountCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRefundableAmountCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRefundableAmountCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
    MergeFrom(*source);
  }
}

void GetRefundableAmountCommand::MergeFrom(const GetRefundableAmountCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  refundablepayments_.MergeFrom(from.refundablepayments_);
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
}

void GetRefundableAmountCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRefundableAmountCommand::CopyFrom(const GetRefundableAmountCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRefundableAmountCommand::IsInitialized() const {
  return true;
}

void GetRefundableAmountCommand::InternalSwap(GetRefundableAmountCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  refundablepayments_.InternalSwap(&other->refundablepayments_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRefundableAmountCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetRefundableAmountResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetRefundableAmountResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetRefundableAmountResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& amount(const GetRefundableAmountResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetRefundableAmountResponse::_Internal::amount(const GetRefundableAmountResponse* msg) {
  return *msg->amount_;
}
void GetRefundableAmountResponse::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
GetRefundableAmountResponse::GetRefundableAmountResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
}
GetRefundableAmountResponse::GetRefundableAmountResponse(const GetRefundableAmountResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
}

void GetRefundableAmountResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

GetRefundableAmountResponse::~GetRefundableAmountResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  SharedDtor();
}

void GetRefundableAmountResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void GetRefundableAmountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetRefundableAmountResponse& GetRefundableAmountResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetRefundableAmountResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetRefundableAmountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetRefundableAmountResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger amount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetRefundableAmountResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  return target;
}

size_t GetRefundableAmountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRefundableAmountResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRefundableAmountResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetRefundableAmountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
    MergeFrom(*source);
  }
}

void GetRefundableAmountResponse::MergeFrom(const GetRefundableAmountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_amount());
  }
}

void GetRefundableAmountResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRefundableAmountResponse::CopyFrom(const GetRefundableAmountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRefundableAmountResponse::IsInitialized() const {
  return true;
}

void GetRefundableAmountResponse::InternalSwap(GetRefundableAmountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetRefundableAmountResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToExtendRentedChannelCommand::InitAsDefaultInstance() {
}
class GenerateInvoiceToExtendRentedChannelCommand::_Internal {
 public:
};

GenerateInvoiceToExtendRentedChannelCommand::GenerateInvoiceToExtendRentedChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
}
GenerateInvoiceToExtendRentedChannelCommand::GenerateInvoiceToExtendRentedChannelCommand(const GenerateInvoiceToExtendRentedChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
}

void GenerateInvoiceToExtendRentedChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}

GenerateInvoiceToExtendRentedChannelCommand::~GenerateInvoiceToExtendRentedChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  SharedDtor();
}

void GenerateInvoiceToExtendRentedChannelCommand::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateInvoiceToExtendRentedChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToExtendRentedChannelCommand& GenerateInvoiceToExtendRentedChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToExtendRentedChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToExtendRentedChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToExtendRentedChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  return target;
}

size_t GenerateInvoiceToExtendRentedChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToExtendRentedChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToExtendRentedChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToExtendRentedChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToExtendRentedChannelCommand::MergeFrom(const GenerateInvoiceToExtendRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GenerateInvoiceToExtendRentedChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToExtendRentedChannelCommand::CopyFrom(const GenerateInvoiceToExtendRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToExtendRentedChannelCommand::IsInitialized() const {
  return true;
}

void GenerateInvoiceToExtendRentedChannelCommand::InternalSwap(GenerateInvoiceToExtendRentedChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToExtendRentedChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenerateInvoiceToExtendRentedChannelResponse::InitAsDefaultInstance() {
}
class GenerateInvoiceToExtendRentedChannelResponse::_Internal {
 public:
};

GenerateInvoiceToExtendRentedChannelResponse::GenerateInvoiceToExtendRentedChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
}
GenerateInvoiceToExtendRentedChannelResponse::GenerateInvoiceToExtendRentedChannelResponse(const GenerateInvoiceToExtendRentedChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymentrequest().empty()) {
    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
}

void GenerateInvoiceToExtendRentedChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}

GenerateInvoiceToExtendRentedChannelResponse::~GenerateInvoiceToExtendRentedChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  SharedDtor();
}

void GenerateInvoiceToExtendRentedChannelResponse::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenerateInvoiceToExtendRentedChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateInvoiceToExtendRentedChannelResponse& GenerateInvoiceToExtendRentedChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateInvoiceToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GenerateInvoiceToExtendRentedChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GenerateInvoiceToExtendRentedChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string paymentRequest = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_paymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateInvoiceToExtendRentedChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetimeseconds(), target);
  }

  // string paymentRequest = 4;
  if (this->paymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_paymentrequest().data(), static_cast<int>(this->_internal_paymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_paymentrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  return target;
}

size_t GenerateInvoiceToExtendRentedChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // string paymentRequest = 4;
  if (this->paymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_paymentrequest());
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateInvoiceToExtendRentedChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateInvoiceToExtendRentedChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateInvoiceToExtendRentedChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
    MergeFrom(*source);
  }
}

void GenerateInvoiceToExtendRentedChannelResponse::MergeFrom(const GenerateInvoiceToExtendRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.paymentrequest().size() > 0) {

    paymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymentrequest_);
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GenerateInvoiceToExtendRentedChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateInvoiceToExtendRentedChannelResponse::CopyFrom(const GenerateInvoiceToExtendRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateInvoiceToExtendRentedChannelResponse::IsInitialized() const {
  return true;
}

void GenerateInvoiceToExtendRentedChannelResponse::InternalSwap(GenerateInvoiceToExtendRentedChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymentrequest_.Swap(&other->paymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateInvoiceToExtendRentedChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneratePaymentHashToExtendConnextRentedChannelCommand::InitAsDefaultInstance() {
}
class GeneratePaymentHashToExtendConnextRentedChannelCommand::_Internal {
 public:
};

GeneratePaymentHashToExtendConnextRentedChannelCommand::GeneratePaymentHashToExtendConnextRentedChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
}
GeneratePaymentHashToExtendConnextRentedChannelCommand::GeneratePaymentHashToExtendConnextRentedChannelCommand(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}

GeneratePaymentHashToExtendConnextRentedChannelCommand::~GeneratePaymentHashToExtendConnextRentedChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  SharedDtor();
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneratePaymentHashToExtendConnextRentedChannelCommand& GeneratePaymentHashToExtendConnextRentedChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneratePaymentHashToExtendConnextRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GeneratePaymentHashToExtendConnextRentedChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GeneratePaymentHashToExtendConnextRentedChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneratePaymentHashToExtendConnextRentedChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  return target;
}

size_t GeneratePaymentHashToExtendConnextRentedChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneratePaymentHashToExtendConnextRentedChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneratePaymentHashToExtendConnextRentedChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
    MergeFrom(*source);
  }
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::MergeFrom(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::CopyFrom(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratePaymentHashToExtendConnextRentedChannelCommand::IsInitialized() const {
  return true;
}

void GeneratePaymentHashToExtendConnextRentedChannelCommand::InternalSwap(GeneratePaymentHashToExtendConnextRentedChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratePaymentHashToExtendConnextRentedChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeneratePaymentHashToExtendConnextRentedChannelResponse::InitAsDefaultInstance() {
}
class GeneratePaymentHashToExtendConnextRentedChannelResponse::_Internal {
 public:
};

GeneratePaymentHashToExtendConnextRentedChannelResponse::GeneratePaymentHashToExtendConnextRentedChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
}
GeneratePaymentHashToExtendConnextRentedChannelResponse::GeneratePaymentHashToExtendConnextRentedChannelResponse(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}

GeneratePaymentHashToExtendConnextRentedChannelResponse::~GeneratePaymentHashToExtendConnextRentedChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  SharedDtor();
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeneratePaymentHashToExtendConnextRentedChannelResponse& GeneratePaymentHashToExtendConnextRentedChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeneratePaymentHashToExtendConnextRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GeneratePaymentHashToExtendConnextRentedChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GeneratePaymentHashToExtendConnextRentedChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeneratePaymentHashToExtendConnextRentedChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetimeseconds(), target);
  }

  // bytes paymentHash = 4;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_paymenthash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  return target;
}

size_t GeneratePaymentHashToExtendConnextRentedChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // bytes paymentHash = 4;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GeneratePaymentHashToExtendConnextRentedChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeneratePaymentHashToExtendConnextRentedChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
    MergeFrom(*source);
  }
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::MergeFrom(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::CopyFrom(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneratePaymentHashToExtendConnextRentedChannelResponse::IsInitialized() const {
  return true;
}

void GeneratePaymentHashToExtendConnextRentedChannelResponse::InternalSwap(GeneratePaymentHashToExtendConnextRentedChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeneratePaymentHashToExtendConnextRentedChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToExtendRentedChannelCommand::InitAsDefaultInstance() {
}
class GetFeeToExtendRentedChannelCommand::_Internal {
 public:
};

GetFeeToExtendRentedChannelCommand::GetFeeToExtendRentedChannelCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
}
GetFeeToExtendRentedChannelCommand::GetFeeToExtendRentedChannelCommand(const GetFeeToExtendRentedChannelCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  lifetimeseconds_ = from.lifetimeseconds_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
}

void GetFeeToExtendRentedChannelCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}

GetFeeToExtendRentedChannelCommand::~GetFeeToExtendRentedChannelCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  SharedDtor();
}

void GetFeeToExtendRentedChannelCommand::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetFeeToExtendRentedChannelCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToExtendRentedChannelCommand& GetFeeToExtendRentedChannelCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToExtendRentedChannelCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToExtendRentedChannelCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* GetFeeToExtendRentedChannelCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 lifetimeSeconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          lifetimeseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToExtendRentedChannelCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channelid(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_lifetimeseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  return target;
}

size_t GetFeeToExtendRentedChannelCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 1;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  // int64 lifetimeSeconds = 3;
  if (this->lifetimeseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_lifetimeseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToExtendRentedChannelCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToExtendRentedChannelCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToExtendRentedChannelCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
    MergeFrom(*source);
  }
}

void GetFeeToExtendRentedChannelCommand::MergeFrom(const GetFeeToExtendRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  if (from.lifetimeseconds() != 0) {
    _internal_set_lifetimeseconds(from._internal_lifetimeseconds());
  }
}

void GetFeeToExtendRentedChannelCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToExtendRentedChannelCommand::CopyFrom(const GetFeeToExtendRentedChannelCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToExtendRentedChannelCommand::IsInitialized() const {
  return true;
}

void GetFeeToExtendRentedChannelCommand::InternalSwap(GetFeeToExtendRentedChannelCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(lifetimeseconds_, other->lifetimeseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToExtendRentedChannelCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetFeeToExtendRentedChannelResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetFeeToExtendRentedChannelResponse_default_instance_._instance.get_mutable()->fee_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetFeeToExtendRentedChannelResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& fee(const GetFeeToExtendRentedChannelResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetFeeToExtendRentedChannelResponse::_Internal::fee(const GetFeeToExtendRentedChannelResponse* msg) {
  return *msg->fee_;
}
void GetFeeToExtendRentedChannelResponse::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
GetFeeToExtendRentedChannelResponse::GetFeeToExtendRentedChannelResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
}
GetFeeToExtendRentedChannelResponse::GetFeeToExtendRentedChannelResponse(const GetFeeToExtendRentedChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_fee()) {
    fee_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.fee_);
  } else {
    fee_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
}

void GetFeeToExtendRentedChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  fee_ = nullptr;
}

GetFeeToExtendRentedChannelResponse::~GetFeeToExtendRentedChannelResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  SharedDtor();
}

void GetFeeToExtendRentedChannelResponse::SharedDtor() {
  if (this != internal_default_instance()) delete fee_;
}

void GetFeeToExtendRentedChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetFeeToExtendRentedChannelResponse& GetFeeToExtendRentedChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetFeeToExtendRentedChannelResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetFeeToExtendRentedChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetFeeToExtendRentedChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.BigInteger fee = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fee(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetFeeToExtendRentedChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  if (this->has_fee()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fee(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  return target;
}

size_t GetFeeToExtendRentedChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  if (this->has_fee()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *fee_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetFeeToExtendRentedChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetFeeToExtendRentedChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetFeeToExtendRentedChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
    MergeFrom(*source);
  }
}

void GetFeeToExtendRentedChannelResponse::MergeFrom(const GetFeeToExtendRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_fee()) {
    _internal_mutable_fee()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_fee());
  }
}

void GetFeeToExtendRentedChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFeeToExtendRentedChannelResponse::CopyFrom(const GetFeeToExtendRentedChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFeeToExtendRentedChannelResponse::IsInitialized() const {
  return true;
}

void GetFeeToExtendRentedChannelResponse::InternalSwap(GetFeeToExtendRentedChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(fee_, other->fee_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetFeeToExtendRentedChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtendRentedChannelTimeCommand::InitAsDefaultInstance() {
}
class ExtendRentedChannelTimeCommand::_Internal {
 public:
};

ExtendRentedChannelTimeCommand::ExtendRentedChannelTimeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
}
ExtendRentedChannelTimeCommand::ExtendRentedChannelTimeCommand(const ExtendRentedChannelTimeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_payingcurrency().empty()) {
    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
}

void ExtendRentedChannelTimeCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ExtendRentedChannelTimeCommand::~ExtendRentedChannelTimeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  SharedDtor();
}

void ExtendRentedChannelTimeCommand::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtendRentedChannelTimeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtendRentedChannelTimeCommand& ExtendRentedChannelTimeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtendRentedChannelTimeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void ExtendRentedChannelTimeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ExtendRentedChannelTimeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes paymentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string payingCurrency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_payingcurrency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendRentedChannelTimeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_paymenthash(), target);
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_payingcurrency().data(), static_cast<int>(this->_internal_payingcurrency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_payingcurrency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  return target;
}

size_t ExtendRentedChannelTimeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // string payingCurrency = 2;
  if (this->payingcurrency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_payingcurrency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendRentedChannelTimeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendRentedChannelTimeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendRentedChannelTimeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
    MergeFrom(*source);
  }
}

void ExtendRentedChannelTimeCommand::MergeFrom(const ExtendRentedChannelTimeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.payingcurrency().size() > 0) {

    payingcurrency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.payingcurrency_);
  }
}

void ExtendRentedChannelTimeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendRentedChannelTimeCommand::CopyFrom(const ExtendRentedChannelTimeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendRentedChannelTimeCommand::IsInitialized() const {
  return true;
}

void ExtendRentedChannelTimeCommand::InternalSwap(ExtendRentedChannelTimeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payingcurrency_.Swap(&other->payingcurrency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendRentedChannelTimeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtendRentedChannelTimeResponse::InitAsDefaultInstance() {
}
class ExtendRentedChannelTimeResponse::_Internal {
 public:
};

ExtendRentedChannelTimeResponse::ExtendRentedChannelTimeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
}
ExtendRentedChannelTimeResponse::ExtendRentedChannelTimeResponse(const ExtendRentedChannelTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  expiresat_ = from.expiresat_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
}

void ExtendRentedChannelTimeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
}

ExtendRentedChannelTimeResponse::~ExtendRentedChannelTimeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  SharedDtor();
}

void ExtendRentedChannelTimeResponse::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ExtendRentedChannelTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtendRentedChannelTimeResponse& ExtendRentedChannelTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtendRentedChannelTimeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void ExtendRentedChannelTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expiresat_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* ExtendRentedChannelTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes paymentHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtendRentedChannelTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_paymenthash(), target);
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channelid(), target);
  }

  // int64 expiresAt = 3;
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_expiresat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  return target;
}

size_t ExtendRentedChannelTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 1;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // int64 expiresAt = 3;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtendRentedChannelTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtendRentedChannelTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtendRentedChannelTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
    MergeFrom(*source);
  }
}

void ExtendRentedChannelTimeResponse::MergeFrom(const ExtendRentedChannelTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
}

void ExtendRentedChannelTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtendRentedChannelTimeResponse::CopyFrom(const ExtendRentedChannelTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendRentedChannelTimeResponse::IsInitialized() const {
  return true;
}

void ExtendRentedChannelTimeResponse::InternalSwap(ExtendRentedChannelTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiresat_, other->expiresat_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendRentedChannelTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPublicKeyCommand::InitAsDefaultInstance() {
}
class RegisterPublicKeyCommand::_Internal {
 public:
};

RegisterPublicKeyCommand::RegisterPublicKeyCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
}
RegisterPublicKeyCommand::RegisterPublicKeyCommand(const RegisterPublicKeyCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
}

void RegisterPublicKeyCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterPublicKeyCommand::~RegisterPublicKeyCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  SharedDtor();
}

void RegisterPublicKeyCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPublicKeyCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPublicKeyCommand& RegisterPublicKeyCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPublicKeyCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterPublicKeyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterPublicKeyCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPublicKeyCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  return target;
}

size_t RegisterPublicKeyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPublicKeyCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPublicKeyCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPublicKeyCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
    MergeFrom(*source);
  }
}

void RegisterPublicKeyCommand::MergeFrom(const RegisterPublicKeyCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void RegisterPublicKeyCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPublicKeyCommand::CopyFrom(const RegisterPublicKeyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPublicKeyCommand::IsInitialized() const {
  return true;
}

void RegisterPublicKeyCommand::InternalSwap(RegisterPublicKeyCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPublicKeyCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPublicKeyResponse::InitAsDefaultInstance() {
}
class RegisterPublicKeyResponse::_Internal {
 public:
};

RegisterPublicKeyResponse::RegisterPublicKeyResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
}
RegisterPublicKeyResponse::RegisterPublicKeyResponse(const RegisterPublicKeyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publickey().empty()) {
    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
}

void RegisterPublicKeyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterPublicKeyResponse::~RegisterPublicKeyResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  SharedDtor();
}

void RegisterPublicKeyResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPublicKeyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPublicKeyResponse& RegisterPublicKeyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPublicKeyResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterPublicKeyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterPublicKeyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes publicKey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPublicKeyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_publickey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  return target;
}

size_t RegisterPublicKeyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // bytes publicKey = 2;
  if (this->publickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_publickey());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPublicKeyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPublicKeyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPublicKeyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
    MergeFrom(*source);
  }
}

void RegisterPublicKeyResponse::MergeFrom(const RegisterPublicKeyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.publickey().size() > 0) {

    publickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publickey_);
  }
}

void RegisterPublicKeyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPublicKeyResponse::CopyFrom(const RegisterPublicKeyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPublicKeyResponse::IsInitialized() const {
  return true;
}

void RegisterPublicKeyResponse::InternalSwap(RegisterPublicKeyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publickey_.Swap(&other->publickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPublicKeyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPublicIdentifierCommand::InitAsDefaultInstance() {
}
class RegisterPublicIdentifierCommand::_Internal {
 public:
};

RegisterPublicIdentifierCommand::RegisterPublicIdentifierCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
}
RegisterPublicIdentifierCommand::RegisterPublicIdentifierCommand(const RegisterPublicIdentifierCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publicidentifier().empty()) {
    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
}

void RegisterPublicIdentifierCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterPublicIdentifierCommand::~RegisterPublicIdentifierCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  SharedDtor();
}

void RegisterPublicIdentifierCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPublicIdentifierCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPublicIdentifierCommand& RegisterPublicIdentifierCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPublicIdentifierCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterPublicIdentifierCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterPublicIdentifierCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicIdentifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publicidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPublicIdentifierCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicidentifier().data(), static_cast<int>(this->_internal_publicidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publicidentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  return target;
}

size_t RegisterPublicIdentifierCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicidentifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPublicIdentifierCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPublicIdentifierCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPublicIdentifierCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
    MergeFrom(*source);
  }
}

void RegisterPublicIdentifierCommand::MergeFrom(const RegisterPublicIdentifierCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.publicidentifier().size() > 0) {

    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
}

void RegisterPublicIdentifierCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPublicIdentifierCommand::CopyFrom(const RegisterPublicIdentifierCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPublicIdentifierCommand::IsInitialized() const {
  return true;
}

void RegisterPublicIdentifierCommand::InternalSwap(RegisterPublicIdentifierCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publicidentifier_.Swap(&other->publicidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPublicIdentifierCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterPublicIdentifierResponse::InitAsDefaultInstance() {
}
class RegisterPublicIdentifierResponse::_Internal {
 public:
};

RegisterPublicIdentifierResponse::RegisterPublicIdentifierResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
}
RegisterPublicIdentifierResponse::RegisterPublicIdentifierResponse(const RegisterPublicIdentifierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publicidentifier().empty()) {
    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
}

void RegisterPublicIdentifierResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterPublicIdentifierResponse::~RegisterPublicIdentifierResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  SharedDtor();
}

void RegisterPublicIdentifierResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterPublicIdentifierResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterPublicIdentifierResponse& RegisterPublicIdentifierResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterPublicIdentifierResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterPublicIdentifierResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterPublicIdentifierResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicIdentifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publicidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterPublicIdentifierResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicidentifier().data(), static_cast<int>(this->_internal_publicidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publicidentifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  return target;
}

size_t RegisterPublicIdentifierResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicidentifier());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterPublicIdentifierResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterPublicIdentifierResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterPublicIdentifierResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
    MergeFrom(*source);
  }
}

void RegisterPublicIdentifierResponse::MergeFrom(const RegisterPublicIdentifierResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.publicidentifier().size() > 0) {

    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
}

void RegisterPublicIdentifierResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterPublicIdentifierResponse::CopyFrom(const RegisterPublicIdentifierResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterPublicIdentifierResponse::IsInitialized() const {
  return true;
}

void RegisterPublicIdentifierResponse::InternalSwap(RegisterPublicIdentifierResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publicidentifier_.Swap(&other->publicidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterPublicIdentifierResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnextPaymentInformationCommand::InitAsDefaultInstance() {
}
class GetConnextPaymentInformationCommand::_Internal {
 public:
};

GetConnextPaymentInformationCommand::GetConnextPaymentInformationCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
}
GetConnextPaymentInformationCommand::GetConnextPaymentInformationCommand(const GetConnextPaymentInformationCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
}

void GetConnextPaymentInformationCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetConnextPaymentInformationCommand::~GetConnextPaymentInformationCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  SharedDtor();
}

void GetConnextPaymentInformationCommand::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConnextPaymentInformationCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnextPaymentInformationCommand& GetConnextPaymentInformationCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnextPaymentInformationCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetConnextPaymentInformationCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetConnextPaymentInformationCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnextPaymentInformationCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  return target;
}

size_t GetConnextPaymentInformationCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnextPaymentInformationCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnextPaymentInformationCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnextPaymentInformationCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
    MergeFrom(*source);
  }
}

void GetConnextPaymentInformationCommand::MergeFrom(const GetConnextPaymentInformationCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
}

void GetConnextPaymentInformationCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnextPaymentInformationCommand::CopyFrom(const GetConnextPaymentInformationCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnextPaymentInformationCommand::IsInitialized() const {
  return true;
}

void GetConnextPaymentInformationCommand::InternalSwap(GetConnextPaymentInformationCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnextPaymentInformationCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnextPaymentInformationResponse::InitAsDefaultInstance() {
}
class GetConnextPaymentInformationResponse::_Internal {
 public:
};

GetConnextPaymentInformationResponse::GetConnextPaymentInformationResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
}
GetConnextPaymentInformationResponse::GetConnextPaymentInformationResponse(const GetConnextPaymentInformationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_publicidentifier().empty()) {
    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  nofeerequired_ = from.nofeerequired_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
}

void GetConnextPaymentInformationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nofeerequired_ = false;
}

GetConnextPaymentInformationResponse::~GetConnextPaymentInformationResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  SharedDtor();
}

void GetConnextPaymentInformationResponse::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetConnextPaymentInformationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnextPaymentInformationResponse& GetConnextPaymentInformationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnextPaymentInformationResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetConnextPaymentInformationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  nofeerequired_ = false;
  _internal_metadata_.Clear();
}

const char* GetConnextPaymentInformationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string publicIdentifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_publicidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool noFeeRequired = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nofeerequired_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnextPaymentInformationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_publicidentifier().data(), static_cast<int>(this->_internal_publicidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_publicidentifier(), target);
  }

  // bytes paymentHash = 3;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_paymenthash(), target);
  }

  // bool noFeeRequired = 4;
  if (this->nofeerequired() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_nofeerequired(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  return target;
}

size_t GetConnextPaymentInformationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string publicIdentifier = 2;
  if (this->publicidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publicidentifier());
  }

  // bytes paymentHash = 3;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // bool noFeeRequired = 4;
  if (this->nofeerequired() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnextPaymentInformationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnextPaymentInformationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnextPaymentInformationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
    MergeFrom(*source);
  }
}

void GetConnextPaymentInformationResponse::MergeFrom(const GetConnextPaymentInformationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.publicidentifier().size() > 0) {

    publicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.publicidentifier_);
  }
  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.nofeerequired() != 0) {
    _internal_set_nofeerequired(from._internal_nofeerequired());
  }
}

void GetConnextPaymentInformationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnextPaymentInformationResponse::CopyFrom(const GetConnextPaymentInformationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnextPaymentInformationResponse::IsInitialized() const {
  return true;
}

void GetConnextPaymentInformationResponse::InternalSwap(GetConnextPaymentInformationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  publicidentifier_.Swap(&other->publicidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nofeerequired_, other->nofeerequired_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnextPaymentInformationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnextChannelContractDeploymentFeeCommand::InitAsDefaultInstance() {
}
class GetConnextChannelContractDeploymentFeeCommand::_Internal {
 public:
};

GetConnextChannelContractDeploymentFeeCommand::GetConnextChannelContractDeploymentFeeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
}
GetConnextChannelContractDeploymentFeeCommand::GetConnextChannelContractDeploymentFeeCommand(const GetConnextChannelContractDeploymentFeeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
}

void GetConnextChannelContractDeploymentFeeCommand::SharedCtor() {
}

GetConnextChannelContractDeploymentFeeCommand::~GetConnextChannelContractDeploymentFeeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  SharedDtor();
}

void GetConnextChannelContractDeploymentFeeCommand::SharedDtor() {
}

void GetConnextChannelContractDeploymentFeeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnextChannelContractDeploymentFeeCommand& GetConnextChannelContractDeploymentFeeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetConnextChannelContractDeploymentFeeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetConnextChannelContractDeploymentFeeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnextChannelContractDeploymentFeeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  return target;
}

size_t GetConnextChannelContractDeploymentFeeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnextChannelContractDeploymentFeeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnextChannelContractDeploymentFeeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnextChannelContractDeploymentFeeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
    MergeFrom(*source);
  }
}

void GetConnextChannelContractDeploymentFeeCommand::MergeFrom(const GetConnextChannelContractDeploymentFeeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetConnextChannelContractDeploymentFeeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnextChannelContractDeploymentFeeCommand::CopyFrom(const GetConnextChannelContractDeploymentFeeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnextChannelContractDeploymentFeeCommand::IsInitialized() const {
  return true;
}

void GetConnextChannelContractDeploymentFeeCommand::InternalSwap(GetConnextChannelContractDeploymentFeeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnextChannelContractDeploymentFeeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetConnextChannelContractDeploymentFeeResponse::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_GetConnextChannelContractDeploymentFeeResponse_default_instance_._instance.get_mutable()->amount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class GetConnextChannelContractDeploymentFeeResponse::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& amount(const GetConnextChannelContractDeploymentFeeResponse* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
GetConnextChannelContractDeploymentFeeResponse::_Internal::amount(const GetConnextChannelContractDeploymentFeeResponse* msg) {
  return *msg->amount_;
}
void GetConnextChannelContractDeploymentFeeResponse::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
GetConnextChannelContractDeploymentFeeResponse::GetConnextChannelContractDeploymentFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
}
GetConnextChannelContractDeploymentFeeResponse::GetConnextChannelContractDeploymentFeeResponse(const GetConnextChannelContractDeploymentFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hubaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hubaddress().empty()) {
    hubaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hubaddress_);
  }
  if (from._internal_has_amount()) {
    amount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
}

void GetConnextChannelContractDeploymentFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  hubaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  amount_ = nullptr;
}

GetConnextChannelContractDeploymentFeeResponse::~GetConnextChannelContractDeploymentFeeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  SharedDtor();
}

void GetConnextChannelContractDeploymentFeeResponse::SharedDtor() {
  hubaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete amount_;
}

void GetConnextChannelContractDeploymentFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetConnextChannelContractDeploymentFeeResponse& GetConnextChannelContractDeploymentFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void GetConnextChannelContractDeploymentFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hubaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GetConnextChannelContractDeploymentFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hubAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hubaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetConnextChannelContractDeploymentFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hubAddress = 1;
  if (this->hubaddress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hubaddress().data(), static_cast<int>(this->_internal_hubaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hubaddress(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  return target;
}

size_t GetConnextChannelContractDeploymentFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hubAddress = 1;
  if (this->hubaddress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hubaddress());
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetConnextChannelContractDeploymentFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetConnextChannelContractDeploymentFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetConnextChannelContractDeploymentFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
    MergeFrom(*source);
  }
}

void GetConnextChannelContractDeploymentFeeResponse::MergeFrom(const GetConnextChannelContractDeploymentFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hubaddress().size() > 0) {

    hubaddress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hubaddress_);
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_amount());
  }
}

void GetConnextChannelContractDeploymentFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetConnextChannelContractDeploymentFeeResponse::CopyFrom(const GetConnextChannelContractDeploymentFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConnextChannelContractDeploymentFeeResponse::IsInitialized() const {
  return true;
}

void GetConnextChannelContractDeploymentFeeResponse::InternalSwap(GetConnextChannelContractDeploymentFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hubaddress_.Swap(&other->hubaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConnextChannelContractDeploymentFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterConnextChannelContractDeploymentFeeCommand::InitAsDefaultInstance() {
}
class RegisterConnextChannelContractDeploymentFeeCommand::_Internal {
 public:
};

RegisterConnextChannelContractDeploymentFeeCommand::RegisterConnextChannelContractDeploymentFeeCommand()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
}
RegisterConnextChannelContractDeploymentFeeCommand::RegisterConnextChannelContractDeploymentFeeCommand(const RegisterConnextChannelContractDeploymentFeeCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionhash().empty()) {
    transactionhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhash_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
}

void RegisterConnextChannelContractDeploymentFeeCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  transactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterConnextChannelContractDeploymentFeeCommand::~RegisterConnextChannelContractDeploymentFeeCommand() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  SharedDtor();
}

void RegisterConnextChannelContractDeploymentFeeCommand::SharedDtor() {
  transactionhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterConnextChannelContractDeploymentFeeCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterConnextChannelContractDeploymentFeeCommand& RegisterConnextChannelContractDeploymentFeeCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterConnextChannelContractDeploymentFeeCommand_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterConnextChannelContractDeploymentFeeCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterConnextChannelContractDeploymentFeeCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transactionHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterConnextChannelContractDeploymentFeeCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionHash = 1;
  if (this->transactionhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionhash().data(), static_cast<int>(this->_internal_transactionhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  return target;
}

size_t RegisterConnextChannelContractDeploymentFeeCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionHash = 1;
  if (this->transactionhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionhash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterConnextChannelContractDeploymentFeeCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterConnextChannelContractDeploymentFeeCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterConnextChannelContractDeploymentFeeCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
    MergeFrom(*source);
  }
}

void RegisterConnextChannelContractDeploymentFeeCommand::MergeFrom(const RegisterConnextChannelContractDeploymentFeeCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transactionhash().size() > 0) {

    transactionhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhash_);
  }
}

void RegisterConnextChannelContractDeploymentFeeCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterConnextChannelContractDeploymentFeeCommand::CopyFrom(const RegisterConnextChannelContractDeploymentFeeCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterConnextChannelContractDeploymentFeeCommand::IsInitialized() const {
  return true;
}

void RegisterConnextChannelContractDeploymentFeeCommand::InternalSwap(RegisterConnextChannelContractDeploymentFeeCommand* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactionhash_.Swap(&other->transactionhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterConnextChannelContractDeploymentFeeCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterConnextChannelContractDeploymentFeeResponse::InitAsDefaultInstance() {
}
class RegisterConnextChannelContractDeploymentFeeResponse::_Internal {
 public:
};

RegisterConnextChannelContractDeploymentFeeResponse::RegisterConnextChannelContractDeploymentFeeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
}
RegisterConnextChannelContractDeploymentFeeResponse::RegisterConnextChannelContractDeploymentFeeResponse(const RegisterConnextChannelContractDeploymentFeeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  transactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transactionhash().empty()) {
    transactionhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhash_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
}

void RegisterConnextChannelContractDeploymentFeeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  transactionhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterConnextChannelContractDeploymentFeeResponse::~RegisterConnextChannelContractDeploymentFeeResponse() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  SharedDtor();
}

void RegisterConnextChannelContractDeploymentFeeResponse::SharedDtor() {
  transactionhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterConnextChannelContractDeploymentFeeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterConnextChannelContractDeploymentFeeResponse& RegisterConnextChannelContractDeploymentFeeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterConnextChannelContractDeploymentFeeResponse_stakenet_2forderbook_2fcommands_2eproto.base);
  return *internal_default_instance();
}


void RegisterConnextChannelContractDeploymentFeeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactionhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* RegisterConnextChannelContractDeploymentFeeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transactionHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transactionhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterConnextChannelContractDeploymentFeeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transactionHash = 1;
  if (this->transactionhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transactionhash().data(), static_cast<int>(this->_internal_transactionhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transactionhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  return target;
}

size_t RegisterConnextChannelContractDeploymentFeeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transactionHash = 1;
  if (this->transactionhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transactionhash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterConnextChannelContractDeploymentFeeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterConnextChannelContractDeploymentFeeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterConnextChannelContractDeploymentFeeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
    MergeFrom(*source);
  }
}

void RegisterConnextChannelContractDeploymentFeeResponse::MergeFrom(const RegisterConnextChannelContractDeploymentFeeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transactionhash().size() > 0) {

    transactionhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.transactionhash_);
  }
}

void RegisterConnextChannelContractDeploymentFeeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterConnextChannelContractDeploymentFeeResponse::CopyFrom(const RegisterConnextChannelContractDeploymentFeeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterConnextChannelContractDeploymentFeeResponse::IsInitialized() const {
  return true;
}

void RegisterConnextChannelContractDeploymentFeeResponse::InternalSwap(RegisterConnextChannelContractDeploymentFeeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  transactionhash_.Swap(&other->transactionhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterConnextChannelContractDeploymentFeeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CommandFailed* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CommandFailed >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CommandFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PingCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PingCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PingCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PingResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetTradingPairsCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetTradingPairsCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetTradingPairsCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetTradingPairsResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetTradingPairsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetTradingPairsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SubscribeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SubscribeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SubscribeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SubscribeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::UnsubscribeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::UnsubscribeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::UnsubscribeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::UnsubscribeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::UnsubscribeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::UnsubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetOpenOrdersCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetOpenOrdersCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetOpenOrdersCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetOpenOrdersResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetOpenOrdersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetOpenOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetHistoricTradesCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetHistoricTradesCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetHistoricTradesCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetHistoricTradesResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetHistoricTradesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetHistoricTradesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetBarsPricesCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetBarsPricesCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetBarsPricesCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetBarsPricesResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetBarsPricesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetBarsPricesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PlaceOrderCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PlaceOrderCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::PlaceOrderResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::PlaceOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CancelOpenOrderCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CancelOpenOrderCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CancelOpenOrderCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CancelOpenOrderResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CancelOpenOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CancelOpenOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SendOrderMessageCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SendOrderMessageCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SendOrderMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::SendOrderMessageResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::SendOrderMessageResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::SendOrderMessageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::MatchedOrderNotFound* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::MatchedOrderNotFound >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::MatchedOrderNotFound >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetChannelStatusCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetChannelStatusCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetChannelStatusCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetChannelStatusResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetChannelStatusResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetChannelStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::LndChannelStatus* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::LndChannelStatus >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::LndChannelStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::ConnextChannelStatus* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::ConnextChannelStatus >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::ConnextChannelStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RefundFeeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RefundFeeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RefundFeeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RefundFeeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RefundFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RefundFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetRefundableAmountCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetRefundableAmountCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetRefundableAmountCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetRefundableAmountResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetRefundableAmountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetRefundableAmountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
