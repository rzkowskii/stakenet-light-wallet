// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stakenet/orderbook/models.proto

#include "models.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fmodels_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto;
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
class BigIntegerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigInteger> _instance;
} _BigInteger_default_instance_;
class OrderDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderDetails> _instance;
} _OrderDetails_default_instance_;
class OrderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Order> _instance;
} _Order_default_instance_;
class TradeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trade> _instance;
} _Trade_default_instance_;
class BarPricesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BarPrices> _instance;
} _BarPrices_default_instance_;
class BigInclusiveIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigInclusiveInterval> _instance;
} _BigInclusiveInterval_default_instance_;
class TradingPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TradingPair> _instance;
} _TradingPair_default_instance_;
class RefundablePaymentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefundablePayment> _instance;
} _RefundablePayment_default_instance_;
class OrderSummaryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OrderSummary> _instance;
} _OrderSummary_default_instance_;
class ServerInMaintenanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerInMaintenance> _instance;
} _ServerInMaintenance_default_instance_;
class RentedChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannel> _instance;
  const ::io::stakenet::orderbook::protos::LndChannel* lndchannel_;
  const ::io::stakenet::orderbook::protos::ConnextChannel* connextchannel_;
} _RentedChannel_default_instance_;
class LndChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LndChannel> _instance;
} _LndChannel_default_instance_;
class ConnextChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextChannel> _instance;
} _ConnextChannel_default_instance_;
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
static void InitDefaultsscc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_BarPrices_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::BarPrices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::BarPrices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_BigInclusiveInterval_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::BigInclusiveInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::BigInclusiveInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_BigInteger_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::BigInteger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::BigInteger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto}, {}};

static void InitDefaultsscc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_ConnextChannel_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::ConnextChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::ConnextChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto}, {}};

static void InitDefaultsscc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_LndChannel_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::LndChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::LndChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto}, {}};

static void InitDefaultsscc_info_Order_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Order_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Order();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Order::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Order_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Order_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_OrderDetails_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::OrderDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::OrderDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_OrderSummary_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::OrderSummary();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::OrderSummary::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RefundablePayment_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RefundablePayment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RefundablePayment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_RentedChannel_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::RentedChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::RentedChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto.base,
      &scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_ServerInMaintenance_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::ServerInMaintenance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::ServerInMaintenance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto}, {}};

static void InitDefaultsscc_info_Trade_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_Trade_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::Trade();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::Trade::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trade_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,}};

static void InitDefaultsscc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::io::stakenet::orderbook::protos::_TradingPair_default_instance_;
    new (ptr) ::io::stakenet::orderbook::protos::TradingPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::io::stakenet::orderbook::protos::TradingPair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto}, {
      &scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stakenet_2forderbook_2fmodels_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stakenet_2forderbook_2fmodels_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stakenet_2forderbook_2fmodels_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stakenet_2forderbook_2fmodels_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BigInteger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BigInteger, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderDetails, orderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderDetails, funds_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderDetails, price_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Order, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Order, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Order, type_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Order, side_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Order, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, id_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, tradingpair_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, price_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, size_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, existingorderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, executingorderid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, executingorderside_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, executedon_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::Trade, existingorderfunds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, time_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, open_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, high_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, low_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, close_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BarPrices, volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BigInclusiveInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BigInclusiveInterval, from_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::BigInclusiveInterval, to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, principal_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, secondary_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, id_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, buyfundsinterval_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, buypriceinterval_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, sellfundsinterval_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, sellpriceinterval_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, buyfeepercent_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::TradingPair, sellfeepercent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundablePayment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundablePayment, paidamount_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RefundablePayment, paymenthash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderSummary, price_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::OrderSummary, amount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ServerInMaintenance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::io::stakenet::orderbook::protos::RentedChannelDefaultTypeInternal, lndchannel_),
  offsetof(::io::stakenet::orderbook::protos::RentedChannelDefaultTypeInternal, connextchannel_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::RentedChannel, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, nodepublickey_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, fundingtransaction_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, outputindex_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::LndChannel, fundingtxidstr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannel, nodepublicidentifier_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannel, channelid_),
  PROTOBUF_FIELD_OFFSET(::io::stakenet::orderbook::protos::ConnextChannel, channeladdress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::io::stakenet::orderbook::protos::BigInteger)},
  { 6, -1, sizeof(::io::stakenet::orderbook::protos::OrderDetails)},
  { 14, -1, sizeof(::io::stakenet::orderbook::protos::Order)},
  { 23, -1, sizeof(::io::stakenet::orderbook::protos::Trade)},
  { 37, -1, sizeof(::io::stakenet::orderbook::protos::BarPrices)},
  { 48, -1, sizeof(::io::stakenet::orderbook::protos::BigInclusiveInterval)},
  { 55, -1, sizeof(::io::stakenet::orderbook::protos::TradingPair)},
  { 69, -1, sizeof(::io::stakenet::orderbook::protos::RefundablePayment)},
  { 76, -1, sizeof(::io::stakenet::orderbook::protos::OrderSummary)},
  { 83, -1, sizeof(::io::stakenet::orderbook::protos::ServerInMaintenance)},
  { 88, -1, sizeof(::io::stakenet::orderbook::protos::RentedChannel)},
  { 96, -1, sizeof(::io::stakenet::orderbook::protos::LndChannel)},
  { 106, -1, sizeof(::io::stakenet::orderbook::protos::ConnextChannel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_BigInteger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_OrderDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Order_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_Trade_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_BarPrices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_BigInclusiveInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_TradingPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RefundablePayment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_OrderSummary_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_ServerInMaintenance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_RentedChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_LndChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::io::stakenet::orderbook::protos::_ConnextChannel_default_instance_),
};

const char descriptor_table_protodef_stakenet_2forderbook_2fmodels_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037stakenet/orderbook/models.proto\022\034io.st"
  "akenet.orderbook.protos\"\033\n\nBigInteger\022\r\n"
  "\005value\030\001 \001(\t\"\221\001\n\014OrderDetails\022\017\n\007orderId"
  "\030\001 \001(\t\0227\n\005funds\030\002 \001(\0132(.io.stakenet.orde"
  "rbook.protos.BigInteger\0227\n\005price\030\003 \001(\0132("
  ".io.stakenet.orderbook.protos.BigInteger"
  "\"\227\002\n\005Order\022\023\n\013tradingPair\030\001 \001(\t\022;\n\004type\030"
  "\002 \001(\0162-.io.stakenet.orderbook.protos.Ord"
  "er.OrderType\022;\n\004side\030\003 \001(\0162-.io.stakenet"
  ".orderbook.protos.Order.OrderSide\022;\n\007det"
  "ails\030\004 \001(\0132*.io.stakenet.orderbook.proto"
  "s.OrderDetails\"\"\n\tOrderType\022\t\n\005limit\020\000\022\n"
  "\n\006market\020\001\"\036\n\tOrderSide\022\007\n\003buy\020\000\022\010\n\004sell"
  "\020\001\"\302\002\n\005Trade\022\n\n\002id\030\001 \001(\t\022\023\n\013tradingPair\030"
  "\002 \001(\t\0227\n\005price\030\003 \001(\0132(.io.stakenet.order"
  "book.protos.BigInteger\0226\n\004size\030\004 \001(\0132(.i"
  "o.stakenet.orderbook.protos.BigInteger\022\027"
  "\n\017existingOrderId\030\005 \001(\t\022\030\n\020executingOrde"
  "rId\030\006 \001(\t\022\032\n\022executingOrderSide\030\007 \001(\t\022\022\n"
  "\nexecutedOn\030\010 \001(\003\022D\n\022existingOrderFunds\030"
  "\t \001(\0132(.io.stakenet.orderbook.protos.Big"
  "Integer\"\211\002\n\tBarPrices\022\014\n\004time\030\001 \001(\003\0226\n\004o"
  "pen\030\002 \001(\0132(.io.stakenet.orderbook.protos"
  ".BigInteger\0226\n\004high\030\003 \001(\0132(.io.stakenet."
  "orderbook.protos.BigInteger\0225\n\003low\030\004 \001(\013"
  "2(.io.stakenet.orderbook.protos.BigInteg"
  "er\0227\n\005close\030\005 \001(\0132(.io.stakenet.orderboo"
  "k.protos.BigInteger\022\016\n\006volume\030\006 \001(\003\"\204\001\n\024"
  "BigInclusiveInterval\0226\n\004from\030\001 \001(\0132(.io."
  "stakenet.orderbook.protos.BigInteger\0224\n\002"
  "to\030\002 \001(\0132(.io.stakenet.orderbook.protos."
  "BigInteger\"\250\003\n\013TradingPair\022\021\n\tprincipal\030"
  "\002 \001(\t\022\021\n\tsecondary\030\001 \001(\t\022\n\n\002id\030\003 \001(\t\022L\n\020"
  "buyFundsInterval\030\004 \001(\01322.io.stakenet.ord"
  "erbook.protos.BigInclusiveInterval\022L\n\020bu"
  "yPriceInterval\030\005 \001(\01322.io.stakenet.order"
  "book.protos.BigInclusiveInterval\022M\n\021sell"
  "FundsInterval\030\006 \001(\01322.io.stakenet.orderb"
  "ook.protos.BigInclusiveInterval\022M\n\021sellP"
  "riceInterval\030\007 \001(\01322.io.stakenet.orderbo"
  "ok.protos.BigInclusiveInterval\022\025\n\rbuyFee"
  "Percent\030\010 \001(\t\022\026\n\016sellFeePercent\030\t \001(\t\"f\n"
  "\021RefundablePayment\022<\n\npaidAmount\030\001 \001(\0132("
  ".io.stakenet.orderbook.protos.BigInteger"
  "\022\023\n\013paymentHash\030\002 \001(\014\"\201\001\n\014OrderSummary\0227"
  "\n\005price\030\001 \001(\0132(.io.stakenet.orderbook.pr"
  "otos.BigInteger\0228\n\006amount\030\002 \001(\0132(.io.sta"
  "kenet.orderbook.protos.BigInteger\"\025\n\023Ser"
  "verInMaintenance\"\240\001\n\rRentedChannel\022>\n\nln"
  "dChannel\030\001 \001(\0132(.io.stakenet.orderbook.p"
  "rotos.LndChannelH\000\022F\n\016connextChannel\030\002 \001"
  "(\0132,.io.stakenet.orderbook.protos.Connex"
  "tChannelH\000B\007\n\005value\"\177\n\nLndChannel\022\025\n\rnod"
  "ePublicKey\030\001 \001(\014\022\021\n\tchannelId\030\002 \001(\t\022\032\n\022f"
  "undingTransaction\030\003 \001(\014\022\023\n\013outputIndex\030\004"
  " \001(\005\022\026\n\016fundingTxidStr\030\005 \001(\t\"Y\n\016ConnextC"
  "hannel\022\034\n\024nodePublicIdentifier\030\001 \001(\t\022\021\n\t"
  "channelId\030\002 \001(\t\022\026\n\016channelAddress\030\003 \001(\tb"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stakenet_2forderbook_2fmodels_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stakenet_2forderbook_2fmodels_2eproto_sccs[13] = {
  &scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base,
  &scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stakenet_2forderbook_2fmodels_2eproto_once;
static bool descriptor_table_stakenet_2forderbook_2fmodels_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stakenet_2forderbook_2fmodels_2eproto = {
  &descriptor_table_stakenet_2forderbook_2fmodels_2eproto_initialized, descriptor_table_protodef_stakenet_2forderbook_2fmodels_2eproto, "stakenet/orderbook/models.proto", 2327,
  &descriptor_table_stakenet_2forderbook_2fmodels_2eproto_once, descriptor_table_stakenet_2forderbook_2fmodels_2eproto_sccs, descriptor_table_stakenet_2forderbook_2fmodels_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_stakenet_2forderbook_2fmodels_2eproto::offsets,
  file_level_metadata_stakenet_2forderbook_2fmodels_2eproto, 13, file_level_enum_descriptors_stakenet_2forderbook_2fmodels_2eproto, file_level_service_descriptors_stakenet_2forderbook_2fmodels_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stakenet_2forderbook_2fmodels_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stakenet_2forderbook_2fmodels_2eproto), true);
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_OrderType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stakenet_2forderbook_2fmodels_2eproto);
  return file_level_enum_descriptors_stakenet_2forderbook_2fmodels_2eproto[0];
}
bool Order_OrderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_OrderType Order::limit;
constexpr Order_OrderType Order::market;
constexpr Order_OrderType Order::OrderType_MIN;
constexpr Order_OrderType Order::OrderType_MAX;
constexpr int Order::OrderType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Order_OrderSide_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stakenet_2forderbook_2fmodels_2eproto);
  return file_level_enum_descriptors_stakenet_2forderbook_2fmodels_2eproto[1];
}
bool Order_OrderSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Order_OrderSide Order::buy;
constexpr Order_OrderSide Order::sell;
constexpr Order_OrderSide Order::OrderSide_MIN;
constexpr Order_OrderSide Order::OrderSide_MAX;
constexpr int Order::OrderSide_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void BigInteger::InitAsDefaultInstance() {
}
class BigInteger::_Internal {
 public:
};

BigInteger::BigInteger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.BigInteger)
}
BigInteger::BigInteger(const BigInteger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.BigInteger)
}

void BigInteger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BigInteger::~BigInteger() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.BigInteger)
  SharedDtor();
}

void BigInteger::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BigInteger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigInteger& BigInteger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigInteger_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void BigInteger::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.BigInteger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* BigInteger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.BigInteger.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigInteger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.BigInteger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.BigInteger.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.BigInteger)
  return target;
}

size_t BigInteger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.BigInteger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigInteger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.BigInteger)
  GOOGLE_DCHECK_NE(&from, this);
  const BigInteger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigInteger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.BigInteger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.BigInteger)
    MergeFrom(*source);
  }
}

void BigInteger::MergeFrom(const BigInteger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.BigInteger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void BigInteger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.BigInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigInteger::CopyFrom(const BigInteger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.BigInteger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigInteger::IsInitialized() const {
  return true;
}

void BigInteger::InternalSwap(BigInteger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata BigInteger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderDetails::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_OrderDetails_default_instance_._instance.get_mutable()->funds_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_OrderDetails_default_instance_._instance.get_mutable()->price_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class OrderDetails::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& funds(const OrderDetails* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& price(const OrderDetails* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
OrderDetails::_Internal::funds(const OrderDetails* msg) {
  return *msg->funds_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
OrderDetails::_Internal::price(const OrderDetails* msg) {
  return *msg->price_;
}
OrderDetails::OrderDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.OrderDetails)
}
OrderDetails::OrderDetails(const OrderDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from._internal_has_funds()) {
    funds_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.funds_);
  } else {
    funds_ = nullptr;
  }
  if (from._internal_has_price()) {
    price_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.OrderDetails)
}

void OrderDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto.base);
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&funds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_) -
      reinterpret_cast<char*>(&funds_)) + sizeof(price_));
}

OrderDetails::~OrderDetails() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.OrderDetails)
  SharedDtor();
}

void OrderDetails::SharedDtor() {
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete funds_;
  if (this != internal_default_instance()) delete price_;
}

void OrderDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderDetails& OrderDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderDetails_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void OrderDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.OrderDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string orderId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.OrderDetails.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger funds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_funds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.OrderDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.OrderDetails.orderId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_orderid(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger funds = 2;
  if (this->has_funds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::funds(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger price = 3;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.OrderDetails)
  return target;
}

size_t OrderDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.OrderDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string orderId = 1;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // .io.stakenet.orderbook.protos.BigInteger funds = 2;
  if (this->has_funds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *funds_);
  }

  // .io.stakenet.orderbook.protos.BigInteger price = 3;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.OrderDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.OrderDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.OrderDetails)
    MergeFrom(*source);
  }
}

void OrderDetails::MergeFrom(const OrderDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.OrderDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.has_funds()) {
    _internal_mutable_funds()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_funds());
  }
  if (from.has_price()) {
    _internal_mutable_price()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_price());
  }
}

void OrderDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.OrderDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderDetails::CopyFrom(const OrderDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.OrderDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderDetails::IsInitialized() const {
  return true;
}

void OrderDetails::InternalSwap(OrderDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(funds_, other->funds_);
  swap(price_, other->price_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Order::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Order_default_instance_._instance.get_mutable()->details_ = const_cast< ::io::stakenet::orderbook::protos::OrderDetails*>(
      ::io::stakenet::orderbook::protos::OrderDetails::internal_default_instance());
}
class Order::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::OrderDetails& details(const Order* msg);
};

const ::io::stakenet::orderbook::protos::OrderDetails&
Order::_Internal::details(const Order* msg) {
  return *msg->details_;
}
Order::Order()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Order)
}
Order::Order(const Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from._internal_has_details()) {
    details_ = new ::io::stakenet::orderbook::protos::OrderDetails(*from.details_);
  } else {
    details_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&type_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Order)
}

void Order::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base);
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&details_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&details_)) + sizeof(side_));
}

Order::~Order() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Order)
  SharedDtor();
}

void Order::SharedDtor() {
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete details_;
}

void Order::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Order& Order::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Order_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void Order::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && details_ != nullptr) {
    delete details_;
  }
  details_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&type_)) + sizeof(side_));
  _internal_metadata_.Clear();
}

const char* Order::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string tradingPair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Order.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Order.OrderType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::io::stakenet::orderbook::protos::Order_OrderType>(val));
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.Order.OrderSide side = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_side(static_cast<::io::stakenet::orderbook::protos::Order_OrderSide>(val));
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.OrderDetails details = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_details(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Order::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Order)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Order.tradingPair");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tradingpair(), target);
  }

  // .io.stakenet.orderbook.protos.Order.OrderType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .io.stakenet.orderbook.protos.Order.OrderSide side = 3;
  if (this->side() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_side(), target);
  }

  // .io.stakenet.orderbook.protos.OrderDetails details = 4;
  if (this->has_details()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::details(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Order)
  return target;
}

size_t Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Order)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tradingPair = 1;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // .io.stakenet.orderbook.protos.OrderDetails details = 4;
  if (this->has_details()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *details_);
  }

  // .io.stakenet.orderbook.protos.Order.OrderType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .io.stakenet.orderbook.protos.Order.OrderSide side = 3;
  if (this->side() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_side());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Order::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Order)
  GOOGLE_DCHECK_NE(&from, this);
  const Order* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Order>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Order)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Order)
    MergeFrom(*source);
  }
}

void Order::MergeFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Order)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.has_details()) {
    _internal_mutable_details()->::io::stakenet::orderbook::protos::OrderDetails::MergeFrom(from._internal_details());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.side() != 0) {
    _internal_set_side(from._internal_side());
  }
}

void Order::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Order::CopyFrom(const Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Order::IsInitialized() const {
  return true;
}

void Order::InternalSwap(Order* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(details_, other->details_);
  swap(type_, other->type_);
  swap(side_, other->side_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Order::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trade::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_Trade_default_instance_._instance.get_mutable()->price_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Trade_default_instance_._instance.get_mutable()->size_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_Trade_default_instance_._instance.get_mutable()->existingorderfunds_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class Trade::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& price(const Trade* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& size(const Trade* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& existingorderfunds(const Trade* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
Trade::_Internal::price(const Trade* msg) {
  return *msg->price_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
Trade::_Internal::size(const Trade* msg) {
  return *msg->size_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
Trade::_Internal::existingorderfunds(const Trade* msg) {
  return *msg->existingorderfunds_;
}
Trade::Trade()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.Trade)
}
Trade::Trade(const Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tradingpair().empty()) {
    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  existingorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_existingorderid().empty()) {
    existingorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existingorderid_);
  }
  executingorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executingorderid().empty()) {
    executingorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executingorderid_);
  }
  executingorderside_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_executingorderside().empty()) {
    executingorderside_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executingorderside_);
  }
  if (from._internal_has_price()) {
    price_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.size_);
  } else {
    size_ = nullptr;
  }
  if (from._internal_has_existingorderfunds()) {
    existingorderfunds_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.existingorderfunds_);
  } else {
    existingorderfunds_ = nullptr;
  }
  executedon_ = from.executedon_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.Trade)
}

void Trade::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existingorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderside_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&executedon_) -
      reinterpret_cast<char*>(&price_)) + sizeof(executedon_));
}

Trade::~Trade() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.Trade)
  SharedDtor();
}

void Trade::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existingorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderside_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete size_;
  if (this != internal_default_instance()) delete existingorderfunds_;
}

void Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trade& Trade::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trade_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  existingorderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  executingorderside_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && size_ != nullptr) {
    delete size_;
  }
  size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && existingorderfunds_ != nullptr) {
    delete existingorderfunds_;
  }
  existingorderfunds_ = nullptr;
  executedon_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Trade::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Trade.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tradingPair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_tradingpair();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Trade.tradingPair"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string existingOrderId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_existingorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Trade.existingOrderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string executingOrderId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_executingorderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Trade.executingOrderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string executingOrderSide = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_executingorderside();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.Trade.executingOrderSide"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 executedOn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          executedon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger existingOrderFunds = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_existingorderfunds(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trade::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.Trade)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Trade.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tradingpair().data(), static_cast<int>(this->_internal_tradingpair().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Trade.tradingPair");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tradingpair(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger price = 3;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::price(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger size = 4;
  if (this->has_size()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::size(this), target, stream);
  }

  // string existingOrderId = 5;
  if (this->existingorderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_existingorderid().data(), static_cast<int>(this->_internal_existingorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Trade.existingOrderId");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_existingorderid(), target);
  }

  // string executingOrderId = 6;
  if (this->executingorderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executingorderid().data(), static_cast<int>(this->_internal_executingorderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Trade.executingOrderId");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_executingorderid(), target);
  }

  // string executingOrderSide = 7;
  if (this->executingorderside().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_executingorderside().data(), static_cast<int>(this->_internal_executingorderside().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.Trade.executingOrderSide");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_executingorderside(), target);
  }

  // int64 executedOn = 8;
  if (this->executedon() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_executedon(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger existingOrderFunds = 9;
  if (this->has_existingorderfunds()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::existingorderfunds(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.Trade)
  return target;
}

size_t Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.Trade)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string tradingPair = 2;
  if (this->tradingpair().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tradingpair());
  }

  // string existingOrderId = 5;
  if (this->existingorderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_existingorderid());
  }

  // string executingOrderId = 6;
  if (this->executingorderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executingorderid());
  }

  // string executingOrderSide = 7;
  if (this->executingorderside().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_executingorderside());
  }

  // .io.stakenet.orderbook.protos.BigInteger price = 3;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .io.stakenet.orderbook.protos.BigInteger size = 4;
  if (this->has_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *size_);
  }

  // .io.stakenet.orderbook.protos.BigInteger existingOrderFunds = 9;
  if (this->has_existingorderfunds()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *existingorderfunds_);
  }

  // int64 executedOn = 8;
  if (this->executedon() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_executedon());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trade::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const Trade* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.Trade)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.Trade)
    MergeFrom(*source);
  }
}

void Trade::MergeFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.tradingpair().size() > 0) {

    tradingpair_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.tradingpair_);
  }
  if (from.existingorderid().size() > 0) {

    existingorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.existingorderid_);
  }
  if (from.executingorderid().size() > 0) {

    executingorderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executingorderid_);
  }
  if (from.executingorderside().size() > 0) {

    executingorderside_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.executingorderside_);
  }
  if (from.has_price()) {
    _internal_mutable_price()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.has_size()) {
    _internal_mutable_size()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_size());
  }
  if (from.has_existingorderfunds()) {
    _internal_mutable_existingorderfunds()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_existingorderfunds());
  }
  if (from.executedon() != 0) {
    _internal_set_executedon(from._internal_executedon());
  }
}

void Trade::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trade::CopyFrom(const Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trade::IsInitialized() const {
  return true;
}

void Trade::InternalSwap(Trade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tradingpair_.Swap(&other->tradingpair_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  existingorderid_.Swap(&other->existingorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  executingorderid_.Swap(&other->executingorderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  executingorderside_.Swap(&other->executingorderside_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(price_, other->price_);
  swap(size_, other->size_);
  swap(existingorderfunds_, other->existingorderfunds_);
  swap(executedon_, other->executedon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trade::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BarPrices::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_BarPrices_default_instance_._instance.get_mutable()->open_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_BarPrices_default_instance_._instance.get_mutable()->high_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_BarPrices_default_instance_._instance.get_mutable()->low_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_BarPrices_default_instance_._instance.get_mutable()->close_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class BarPrices::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& open(const BarPrices* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& high(const BarPrices* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& low(const BarPrices* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& close(const BarPrices* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
BarPrices::_Internal::open(const BarPrices* msg) {
  return *msg->open_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
BarPrices::_Internal::high(const BarPrices* msg) {
  return *msg->high_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
BarPrices::_Internal::low(const BarPrices* msg) {
  return *msg->low_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
BarPrices::_Internal::close(const BarPrices* msg) {
  return *msg->close_;
}
BarPrices::BarPrices()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.BarPrices)
}
BarPrices::BarPrices(const BarPrices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_open()) {
    open_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.open_);
  } else {
    open_ = nullptr;
  }
  if (from._internal_has_high()) {
    high_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.high_);
  } else {
    high_ = nullptr;
  }
  if (from._internal_has_low()) {
    low_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.low_);
  } else {
    low_ = nullptr;
  }
  if (from._internal_has_close()) {
    close_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.close_);
  } else {
    close_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&volume_) -
    reinterpret_cast<char*>(&time_)) + sizeof(volume_));
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.BarPrices)
}

void BarPrices::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto.base);
  ::memset(&open_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&open_)) + sizeof(volume_));
}

BarPrices::~BarPrices() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.BarPrices)
  SharedDtor();
}

void BarPrices::SharedDtor() {
  if (this != internal_default_instance()) delete open_;
  if (this != internal_default_instance()) delete high_;
  if (this != internal_default_instance()) delete low_;
  if (this != internal_default_instance()) delete close_;
}

void BarPrices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BarPrices& BarPrices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BarPrices_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void BarPrices::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.BarPrices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && open_ != nullptr) {
    delete open_;
  }
  open_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && high_ != nullptr) {
    delete high_;
  }
  high_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && low_ != nullptr) {
    delete low_;
  }
  low_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && close_ != nullptr) {
    delete close_;
  }
  close_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&volume_) -
      reinterpret_cast<char*>(&time_)) + sizeof(volume_));
  _internal_metadata_.Clear();
}

const char* BarPrices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger open = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_open(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger high = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_high(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger low = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_low(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger close = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_close(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BarPrices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.BarPrices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_time(), target);
  }

  // .io.stakenet.orderbook.protos.BigInteger open = 2;
  if (this->has_open()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::open(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger high = 3;
  if (this->has_high()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::high(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger low = 4;
  if (this->has_low()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::low(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger close = 5;
  if (this->has_close()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::close(this), target, stream);
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.BarPrices)
  return target;
}

size_t BarPrices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.BarPrices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger open = 2;
  if (this->has_open()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *open_);
  }

  // .io.stakenet.orderbook.protos.BigInteger high = 3;
  if (this->has_high()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *high_);
  }

  // .io.stakenet.orderbook.protos.BigInteger low = 4;
  if (this->has_low()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *low_);
  }

  // .io.stakenet.orderbook.protos.BigInteger close = 5;
  if (this->has_close()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *close_);
  }

  // int64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  // int64 volume = 6;
  if (this->volume() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_volume());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BarPrices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.BarPrices)
  GOOGLE_DCHECK_NE(&from, this);
  const BarPrices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BarPrices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.BarPrices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.BarPrices)
    MergeFrom(*source);
  }
}

void BarPrices::MergeFrom(const BarPrices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.BarPrices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_open()) {
    _internal_mutable_open()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_open());
  }
  if (from.has_high()) {
    _internal_mutable_high()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_high());
  }
  if (from.has_low()) {
    _internal_mutable_low()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_low());
  }
  if (from.has_close()) {
    _internal_mutable_close()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_close());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.volume() != 0) {
    _internal_set_volume(from._internal_volume());
  }
}

void BarPrices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.BarPrices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BarPrices::CopyFrom(const BarPrices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.BarPrices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarPrices::IsInitialized() const {
  return true;
}

void BarPrices::InternalSwap(BarPrices* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(open_, other->open_);
  swap(high_, other->high_);
  swap(low_, other->low_);
  swap(close_, other->close_);
  swap(time_, other->time_);
  swap(volume_, other->volume_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BarPrices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigInclusiveInterval::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_BigInclusiveInterval_default_instance_._instance.get_mutable()->from_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_BigInclusiveInterval_default_instance_._instance.get_mutable()->to_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class BigInclusiveInterval::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& from(const BigInclusiveInterval* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& to(const BigInclusiveInterval* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
BigInclusiveInterval::_Internal::from(const BigInclusiveInterval* msg) {
  return *msg->from_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
BigInclusiveInterval::_Internal::to(const BigInclusiveInterval* msg) {
  return *msg->to_;
}
BigInclusiveInterval::BigInclusiveInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.BigInclusiveInterval)
}
BigInclusiveInterval::BigInclusiveInterval(const BigInclusiveInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_from()) {
    from_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.from_);
  } else {
    from_ = nullptr;
  }
  if (from._internal_has_to()) {
    to_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.to_);
  } else {
    to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.BigInclusiveInterval)
}

void BigInclusiveInterval::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto.base);
  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&to_) -
      reinterpret_cast<char*>(&from_)) + sizeof(to_));
}

BigInclusiveInterval::~BigInclusiveInterval() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.BigInclusiveInterval)
  SharedDtor();
}

void BigInclusiveInterval::SharedDtor() {
  if (this != internal_default_instance()) delete from_;
  if (this != internal_default_instance()) delete to_;
}

void BigInclusiveInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigInclusiveInterval& BigInclusiveInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigInclusiveInterval_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void BigInclusiveInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && from_ != nullptr) {
    delete from_;
  }
  from_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && to_ != nullptr) {
    delete to_;
  }
  to_ = nullptr;
  _internal_metadata_.Clear();
}

const char* BigInclusiveInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.BigInteger from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigInclusiveInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger from = 1;
  if (this->has_from()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::from(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger to = 2;
  if (this->has_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.BigInclusiveInterval)
  return target;
}

size_t BigInclusiveInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger from = 1;
  if (this->has_from()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *from_);
  }

  // .io.stakenet.orderbook.protos.BigInteger to = 2;
  if (this->has_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigInclusiveInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const BigInclusiveInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigInclusiveInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.BigInclusiveInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.BigInclusiveInterval)
    MergeFrom(*source);
  }
}

void BigInclusiveInterval::MergeFrom(const BigInclusiveInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_from()) {
    _internal_mutable_from()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_from());
  }
  if (from.has_to()) {
    _internal_mutable_to()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_to());
  }
}

void BigInclusiveInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigInclusiveInterval::CopyFrom(const BigInclusiveInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.BigInclusiveInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigInclusiveInterval::IsInitialized() const {
  return true;
}

void BigInclusiveInterval::InternalSwap(BigInclusiveInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(from_, other->from_);
  swap(to_, other->to_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigInclusiveInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TradingPair::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_TradingPair_default_instance_._instance.get_mutable()->buyfundsinterval_ = const_cast< ::io::stakenet::orderbook::protos::BigInclusiveInterval*>(
      ::io::stakenet::orderbook::protos::BigInclusiveInterval::internal_default_instance());
  ::io::stakenet::orderbook::protos::_TradingPair_default_instance_._instance.get_mutable()->buypriceinterval_ = const_cast< ::io::stakenet::orderbook::protos::BigInclusiveInterval*>(
      ::io::stakenet::orderbook::protos::BigInclusiveInterval::internal_default_instance());
  ::io::stakenet::orderbook::protos::_TradingPair_default_instance_._instance.get_mutable()->sellfundsinterval_ = const_cast< ::io::stakenet::orderbook::protos::BigInclusiveInterval*>(
      ::io::stakenet::orderbook::protos::BigInclusiveInterval::internal_default_instance());
  ::io::stakenet::orderbook::protos::_TradingPair_default_instance_._instance.get_mutable()->sellpriceinterval_ = const_cast< ::io::stakenet::orderbook::protos::BigInclusiveInterval*>(
      ::io::stakenet::orderbook::protos::BigInclusiveInterval::internal_default_instance());
}
class TradingPair::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInclusiveInterval& buyfundsinterval(const TradingPair* msg);
  static const ::io::stakenet::orderbook::protos::BigInclusiveInterval& buypriceinterval(const TradingPair* msg);
  static const ::io::stakenet::orderbook::protos::BigInclusiveInterval& sellfundsinterval(const TradingPair* msg);
  static const ::io::stakenet::orderbook::protos::BigInclusiveInterval& sellpriceinterval(const TradingPair* msg);
};

const ::io::stakenet::orderbook::protos::BigInclusiveInterval&
TradingPair::_Internal::buyfundsinterval(const TradingPair* msg) {
  return *msg->buyfundsinterval_;
}
const ::io::stakenet::orderbook::protos::BigInclusiveInterval&
TradingPair::_Internal::buypriceinterval(const TradingPair* msg) {
  return *msg->buypriceinterval_;
}
const ::io::stakenet::orderbook::protos::BigInclusiveInterval&
TradingPair::_Internal::sellfundsinterval(const TradingPair* msg) {
  return *msg->sellfundsinterval_;
}
const ::io::stakenet::orderbook::protos::BigInclusiveInterval&
TradingPair::_Internal::sellpriceinterval(const TradingPair* msg) {
  return *msg->sellpriceinterval_;
}
TradingPair::TradingPair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.TradingPair)
}
TradingPair::TradingPair(const TradingPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secondary().empty()) {
    secondary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_principal().empty()) {
    principal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  buyfeepercent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_buyfeepercent().empty()) {
    buyfeepercent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buyfeepercent_);
  }
  sellfeepercent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sellfeepercent().empty()) {
    sellfeepercent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellfeepercent_);
  }
  if (from._internal_has_buyfundsinterval()) {
    buyfundsinterval_ = new ::io::stakenet::orderbook::protos::BigInclusiveInterval(*from.buyfundsinterval_);
  } else {
    buyfundsinterval_ = nullptr;
  }
  if (from._internal_has_buypriceinterval()) {
    buypriceinterval_ = new ::io::stakenet::orderbook::protos::BigInclusiveInterval(*from.buypriceinterval_);
  } else {
    buypriceinterval_ = nullptr;
  }
  if (from._internal_has_sellfundsinterval()) {
    sellfundsinterval_ = new ::io::stakenet::orderbook::protos::BigInclusiveInterval(*from.sellfundsinterval_);
  } else {
    sellfundsinterval_ = nullptr;
  }
  if (from._internal_has_sellpriceinterval()) {
    sellpriceinterval_ = new ::io::stakenet::orderbook::protos::BigInclusiveInterval(*from.sellpriceinterval_);
  } else {
    sellpriceinterval_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.TradingPair)
}

void TradingPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto.base);
  secondary_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  principal_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyfeepercent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellfeepercent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buyfundsinterval_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sellpriceinterval_) -
      reinterpret_cast<char*>(&buyfundsinterval_)) + sizeof(sellpriceinterval_));
}

TradingPair::~TradingPair() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.TradingPair)
  SharedDtor();
}

void TradingPair::SharedDtor() {
  secondary_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  principal_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyfeepercent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellfeepercent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete buyfundsinterval_;
  if (this != internal_default_instance()) delete buypriceinterval_;
  if (this != internal_default_instance()) delete sellfundsinterval_;
  if (this != internal_default_instance()) delete sellpriceinterval_;
}

void TradingPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TradingPair& TradingPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TradingPair_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void TradingPair::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.TradingPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secondary_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  principal_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  buyfeepercent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sellfeepercent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && buyfundsinterval_ != nullptr) {
    delete buyfundsinterval_;
  }
  buyfundsinterval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && buypriceinterval_ != nullptr) {
    delete buypriceinterval_;
  }
  buypriceinterval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sellfundsinterval_ != nullptr) {
    delete sellfundsinterval_;
  }
  sellfundsinterval_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sellpriceinterval_ != nullptr) {
    delete sellpriceinterval_;
  }
  sellpriceinterval_ = nullptr;
  _internal_metadata_.Clear();
}

const char* TradingPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string secondary = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_secondary();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.TradingPair.secondary"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string principal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_principal();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.TradingPair.principal"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.TradingPair.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInclusiveInterval buyFundsInterval = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_buyfundsinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInclusiveInterval buyPriceInterval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_buypriceinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInclusiveInterval sellFundsInterval = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellfundsinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInclusiveInterval sellPriceInterval = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sellpriceinterval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string buyFeePercent = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_buyfeepercent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.TradingPair.buyFeePercent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sellFeePercent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_sellfeepercent();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.TradingPair.sellFeePercent"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TradingPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.TradingPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string secondary = 1;
  if (this->secondary().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secondary().data(), static_cast<int>(this->_internal_secondary().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.TradingPair.secondary");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_secondary(), target);
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_principal().data(), static_cast<int>(this->_internal_principal().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.TradingPair.principal");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_principal(), target);
  }

  // string id = 3;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.TradingPair.id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_id(), target);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval buyFundsInterval = 4;
  if (this->has_buyfundsinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::buyfundsinterval(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval buyPriceInterval = 5;
  if (this->has_buypriceinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::buypriceinterval(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval sellFundsInterval = 6;
  if (this->has_sellfundsinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sellfundsinterval(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval sellPriceInterval = 7;
  if (this->has_sellpriceinterval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sellpriceinterval(this), target, stream);
  }

  // string buyFeePercent = 8;
  if (this->buyfeepercent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_buyfeepercent().data(), static_cast<int>(this->_internal_buyfeepercent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.TradingPair.buyFeePercent");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_buyfeepercent(), target);
  }

  // string sellFeePercent = 9;
  if (this->sellfeepercent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sellfeepercent().data(), static_cast<int>(this->_internal_sellfeepercent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.TradingPair.sellFeePercent");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_sellfeepercent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.TradingPair)
  return target;
}

size_t TradingPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.TradingPair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string secondary = 1;
  if (this->secondary().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secondary());
  }

  // string principal = 2;
  if (this->principal().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_principal());
  }

  // string id = 3;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string buyFeePercent = 8;
  if (this->buyfeepercent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_buyfeepercent());
  }

  // string sellFeePercent = 9;
  if (this->sellfeepercent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sellfeepercent());
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval buyFundsInterval = 4;
  if (this->has_buyfundsinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buyfundsinterval_);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval buyPriceInterval = 5;
  if (this->has_buypriceinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buypriceinterval_);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval sellFundsInterval = 6;
  if (this->has_sellfundsinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sellfundsinterval_);
  }

  // .io.stakenet.orderbook.protos.BigInclusiveInterval sellPriceInterval = 7;
  if (this->has_sellpriceinterval()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sellpriceinterval_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradingPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.TradingPair)
  GOOGLE_DCHECK_NE(&from, this);
  const TradingPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TradingPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.TradingPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.TradingPair)
    MergeFrom(*source);
  }
}

void TradingPair::MergeFrom(const TradingPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.TradingPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.secondary().size() > 0) {

    secondary_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.secondary_);
  }
  if (from.principal().size() > 0) {

    principal_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.principal_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.buyfeepercent().size() > 0) {

    buyfeepercent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buyfeepercent_);
  }
  if (from.sellfeepercent().size() > 0) {

    sellfeepercent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sellfeepercent_);
  }
  if (from.has_buyfundsinterval()) {
    _internal_mutable_buyfundsinterval()->::io::stakenet::orderbook::protos::BigInclusiveInterval::MergeFrom(from._internal_buyfundsinterval());
  }
  if (from.has_buypriceinterval()) {
    _internal_mutable_buypriceinterval()->::io::stakenet::orderbook::protos::BigInclusiveInterval::MergeFrom(from._internal_buypriceinterval());
  }
  if (from.has_sellfundsinterval()) {
    _internal_mutable_sellfundsinterval()->::io::stakenet::orderbook::protos::BigInclusiveInterval::MergeFrom(from._internal_sellfundsinterval());
  }
  if (from.has_sellpriceinterval()) {
    _internal_mutable_sellpriceinterval()->::io::stakenet::orderbook::protos::BigInclusiveInterval::MergeFrom(from._internal_sellpriceinterval());
  }
}

void TradingPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.TradingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradingPair::CopyFrom(const TradingPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.TradingPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradingPair::IsInitialized() const {
  return true;
}

void TradingPair::InternalSwap(TradingPair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  secondary_.Swap(&other->secondary_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  principal_.Swap(&other->principal_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  buyfeepercent_.Swap(&other->buyfeepercent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sellfeepercent_.Swap(&other->sellfeepercent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buyfundsinterval_, other->buyfundsinterval_);
  swap(buypriceinterval_, other->buypriceinterval_);
  swap(sellfundsinterval_, other->sellfundsinterval_);
  swap(sellpriceinterval_, other->sellpriceinterval_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TradingPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RefundablePayment::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_RefundablePayment_default_instance_._instance.get_mutable()->paidamount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class RefundablePayment::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& paidamount(const RefundablePayment* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
RefundablePayment::_Internal::paidamount(const RefundablePayment* msg) {
  return *msg->paidamount_;
}
RefundablePayment::RefundablePayment()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RefundablePayment)
}
RefundablePayment::RefundablePayment(const RefundablePayment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from._internal_has_paidamount()) {
    paidamount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.paidamount_);
  } else {
    paidamount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RefundablePayment)
}

void RefundablePayment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base);
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paidamount_ = nullptr;
}

RefundablePayment::~RefundablePayment() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RefundablePayment)
  SharedDtor();
}

void RefundablePayment::SharedDtor() {
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete paidamount_;
}

void RefundablePayment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefundablePayment& RefundablePayment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefundablePayment_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void RefundablePayment::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RefundablePayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && paidamount_ != nullptr) {
    delete paidamount_;
  }
  paidamount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* RefundablePayment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.BigInteger paidAmount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_paidamount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefundablePayment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RefundablePayment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger paidAmount = 1;
  if (this->has_paidamount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::paidamount(this), target, stream);
  }

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_paymenthash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RefundablePayment)
  return target;
}

size_t RefundablePayment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RefundablePayment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes paymentHash = 2;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // .io.stakenet.orderbook.protos.BigInteger paidAmount = 1;
  if (this->has_paidamount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *paidamount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefundablePayment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RefundablePayment)
  GOOGLE_DCHECK_NE(&from, this);
  const RefundablePayment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefundablePayment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RefundablePayment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RefundablePayment)
    MergeFrom(*source);
  }
}

void RefundablePayment::MergeFrom(const RefundablePayment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RefundablePayment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.has_paidamount()) {
    _internal_mutable_paidamount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_paidamount());
  }
}

void RefundablePayment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RefundablePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefundablePayment::CopyFrom(const RefundablePayment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RefundablePayment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefundablePayment::IsInitialized() const {
  return true;
}

void RefundablePayment::InternalSwap(RefundablePayment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(paidamount_, other->paidamount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefundablePayment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OrderSummary::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_OrderSummary_default_instance_._instance.get_mutable()->price_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
  ::io::stakenet::orderbook::protos::_OrderSummary_default_instance_._instance.get_mutable()->amount_ = const_cast< ::io::stakenet::orderbook::protos::BigInteger*>(
      ::io::stakenet::orderbook::protos::BigInteger::internal_default_instance());
}
class OrderSummary::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::BigInteger& price(const OrderSummary* msg);
  static const ::io::stakenet::orderbook::protos::BigInteger& amount(const OrderSummary* msg);
};

const ::io::stakenet::orderbook::protos::BigInteger&
OrderSummary::_Internal::price(const OrderSummary* msg) {
  return *msg->price_;
}
const ::io::stakenet::orderbook::protos::BigInteger&
OrderSummary::_Internal::amount(const OrderSummary* msg) {
  return *msg->amount_;
}
OrderSummary::OrderSummary()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.OrderSummary)
}
OrderSummary::OrderSummary(const OrderSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_price()) {
    price_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.price_);
  } else {
    price_ = nullptr;
  }
  if (from._internal_has_amount()) {
    amount_ = new ::io::stakenet::orderbook::protos::BigInteger(*from.amount_);
  } else {
    amount_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.OrderSummary)
}

void OrderSummary::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto.base);
  ::memset(&price_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amount_) -
      reinterpret_cast<char*>(&price_)) + sizeof(amount_));
}

OrderSummary::~OrderSummary() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.OrderSummary)
  SharedDtor();
}

void OrderSummary::SharedDtor() {
  if (this != internal_default_instance()) delete price_;
  if (this != internal_default_instance()) delete amount_;
}

void OrderSummary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OrderSummary& OrderSummary::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OrderSummary_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void OrderSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.OrderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OrderSummary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.BigInteger price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.BigInteger amount = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_amount(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OrderSummary::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.OrderSummary)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger price = 1;
  if (this->has_price()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::price(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::amount(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.OrderSummary)
  return target;
}

size_t OrderSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.OrderSummary)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.BigInteger price = 1;
  if (this->has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *price_);
  }

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  if (this->has_amount()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amount_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OrderSummary::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.OrderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  const OrderSummary* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OrderSummary>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.OrderSummary)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.OrderSummary)
    MergeFrom(*source);
  }
}

void OrderSummary::MergeFrom(const OrderSummary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.OrderSummary)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_price()) {
    _internal_mutable_price()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_price());
  }
  if (from.has_amount()) {
    _internal_mutable_amount()->::io::stakenet::orderbook::protos::BigInteger::MergeFrom(from._internal_amount());
  }
}

void OrderSummary::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.OrderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderSummary::CopyFrom(const OrderSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.OrderSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSummary::IsInitialized() const {
  return true;
}

void OrderSummary::InternalSwap(OrderSummary* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(price_, other->price_);
  swap(amount_, other->amount_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSummary::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ServerInMaintenance::InitAsDefaultInstance() {
}
class ServerInMaintenance::_Internal {
 public:
};

ServerInMaintenance::ServerInMaintenance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.ServerInMaintenance)
}
ServerInMaintenance::ServerInMaintenance(const ServerInMaintenance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.ServerInMaintenance)
}

void ServerInMaintenance::SharedCtor() {
}

ServerInMaintenance::~ServerInMaintenance() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.ServerInMaintenance)
  SharedDtor();
}

void ServerInMaintenance::SharedDtor() {
}

void ServerInMaintenance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerInMaintenance& ServerInMaintenance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerInMaintenance_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void ServerInMaintenance::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* ServerInMaintenance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerInMaintenance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.ServerInMaintenance)
  return target;
}

size_t ServerInMaintenance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerInMaintenance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerInMaintenance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerInMaintenance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.ServerInMaintenance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.ServerInMaintenance)
    MergeFrom(*source);
  }
}

void ServerInMaintenance::MergeFrom(const ServerInMaintenance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ServerInMaintenance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInMaintenance::CopyFrom(const ServerInMaintenance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.ServerInMaintenance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInMaintenance::IsInitialized() const {
  return true;
}

void ServerInMaintenance::InternalSwap(ServerInMaintenance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerInMaintenance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannel::InitAsDefaultInstance() {
  ::io::stakenet::orderbook::protos::_RentedChannel_default_instance_.lndchannel_ = const_cast< ::io::stakenet::orderbook::protos::LndChannel*>(
      ::io::stakenet::orderbook::protos::LndChannel::internal_default_instance());
  ::io::stakenet::orderbook::protos::_RentedChannel_default_instance_.connextchannel_ = const_cast< ::io::stakenet::orderbook::protos::ConnextChannel*>(
      ::io::stakenet::orderbook::protos::ConnextChannel::internal_default_instance());
}
class RentedChannel::_Internal {
 public:
  static const ::io::stakenet::orderbook::protos::LndChannel& lndchannel(const RentedChannel* msg);
  static const ::io::stakenet::orderbook::protos::ConnextChannel& connextchannel(const RentedChannel* msg);
};

const ::io::stakenet::orderbook::protos::LndChannel&
RentedChannel::_Internal::lndchannel(const RentedChannel* msg) {
  return *msg->value_.lndchannel_;
}
const ::io::stakenet::orderbook::protos::ConnextChannel&
RentedChannel::_Internal::connextchannel(const RentedChannel* msg) {
  return *msg->value_.connextchannel_;
}
void RentedChannel::set_allocated_lndchannel(::io::stakenet::orderbook::protos::LndChannel* lndchannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (lndchannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lndchannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lndchannel, submessage_arena);
    }
    set_has_lndchannel();
    value_.lndchannel_ = lndchannel;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentedChannel.lndChannel)
}
void RentedChannel::set_allocated_connextchannel(::io::stakenet::orderbook::protos::ConnextChannel* connextchannel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (connextchannel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connextchannel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connextchannel, submessage_arena);
    }
    set_has_connextchannel();
    value_.connextchannel_ = connextchannel;
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentedChannel.connextChannel)
}
RentedChannel::RentedChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.RentedChannel)
}
RentedChannel::RentedChannel(const RentedChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kLndChannel: {
      _internal_mutable_lndchannel()->::io::stakenet::orderbook::protos::LndChannel::MergeFrom(from._internal_lndchannel());
      break;
    }
    case kConnextChannel: {
      _internal_mutable_connextchannel()->::io::stakenet::orderbook::protos::ConnextChannel::MergeFrom(from._internal_connextchannel());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.RentedChannel)
}

void RentedChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  clear_has_value();
}

RentedChannel::~RentedChannel() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.RentedChannel)
  SharedDtor();
}

void RentedChannel::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void RentedChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannel& RentedChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void RentedChannel::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:io.stakenet.orderbook.protos.RentedChannel)
  switch (value_case()) {
    case kLndChannel: {
      delete value_.lndchannel_;
      break;
    }
    case kConnextChannel: {
      delete value_.connextchannel_;
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void RentedChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.RentedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _internal_metadata_.Clear();
}

const char* RentedChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .io.stakenet.orderbook.protos.LndChannel lndChannel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lndchannel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .io.stakenet.orderbook.protos.ConnextChannel connextChannel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connextchannel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.RentedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .io.stakenet.orderbook.protos.LndChannel lndChannel = 1;
  if (_internal_has_lndchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lndchannel(this), target, stream);
  }

  // .io.stakenet.orderbook.protos.ConnextChannel connextChannel = 2;
  if (_internal_has_connextchannel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connextchannel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.RentedChannel)
  return target;
}

size_t RentedChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.RentedChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // .io.stakenet.orderbook.protos.LndChannel lndChannel = 1;
    case kLndChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.lndchannel_);
      break;
    }
    // .io.stakenet.orderbook.protos.ConnextChannel connextChannel = 2;
    case kConnextChannel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.connextchannel_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.RentedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.RentedChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.RentedChannel)
    MergeFrom(*source);
  }
}

void RentedChannel::MergeFrom(const RentedChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.RentedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kLndChannel: {
      _internal_mutable_lndchannel()->::io::stakenet::orderbook::protos::LndChannel::MergeFrom(from._internal_lndchannel());
      break;
    }
    case kConnextChannel: {
      _internal_mutable_connextchannel()->::io::stakenet::orderbook::protos::ConnextChannel::MergeFrom(from._internal_connextchannel());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void RentedChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.RentedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannel::CopyFrom(const RentedChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.RentedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannel::IsInitialized() const {
  return true;
}

void RentedChannel::InternalSwap(RentedChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LndChannel::InitAsDefaultInstance() {
}
class LndChannel::_Internal {
 public:
};

LndChannel::LndChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.LndChannel)
}
LndChannel::LndChannel(const LndChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodepublickey().empty()) {
    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  fundingtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fundingtransaction().empty()) {
    fundingtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtransaction_);
  }
  fundingtxidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fundingtxidstr().empty()) {
    fundingtxidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtxidstr_);
  }
  outputindex_ = from.outputindex_;
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.LndChannel)
}

void LndChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  nodepublickey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputindex_ = 0;
}

LndChannel::~LndChannel() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.LndChannel)
  SharedDtor();
}

void LndChannel::SharedDtor() {
  nodepublickey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LndChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LndChannel& LndChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LndChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void LndChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.LndChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodepublickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fundingtxidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  outputindex_ = 0;
  _internal_metadata_.Clear();
}

const char* LndChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes nodePublicKey = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodepublickey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.LndChannel.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fundingTransaction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_fundingtransaction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 outputIndex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          outputindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string fundingTxidStr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_fundingtxidstr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.LndChannel.fundingTxidStr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LndChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.LndChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes nodePublicKey = 1;
  if (this->nodepublickey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_nodepublickey(), target);
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.LndChannel.channelId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channelid(), target);
  }

  // bytes fundingTransaction = 3;
  if (this->fundingtransaction().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_fundingtransaction(), target);
  }

  // int32 outputIndex = 4;
  if (this->outputindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_outputindex(), target);
  }

  // string fundingTxidStr = 5;
  if (this->fundingtxidstr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundingtxidstr().data(), static_cast<int>(this->_internal_fundingtxidstr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.LndChannel.fundingTxidStr");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_fundingtxidstr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.LndChannel)
  return target;
}

size_t LndChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.LndChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nodePublicKey = 1;
  if (this->nodepublickey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nodepublickey());
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // bytes fundingTransaction = 3;
  if (this->fundingtransaction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fundingtransaction());
  }

  // string fundingTxidStr = 5;
  if (this->fundingtxidstr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fundingtxidstr());
  }

  // int32 outputIndex = 4;
  if (this->outputindex() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_outputindex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LndChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.LndChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const LndChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LndChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.LndChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.LndChannel)
    MergeFrom(*source);
  }
}

void LndChannel::MergeFrom(const LndChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.LndChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodepublickey().size() > 0) {

    nodepublickey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublickey_);
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.fundingtransaction().size() > 0) {

    fundingtransaction_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtransaction_);
  }
  if (from.fundingtxidstr().size() > 0) {

    fundingtxidstr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingtxidstr_);
  }
  if (from.outputindex() != 0) {
    _internal_set_outputindex(from._internal_outputindex());
  }
}

void LndChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.LndChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LndChannel::CopyFrom(const LndChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.LndChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LndChannel::IsInitialized() const {
  return true;
}

void LndChannel::InternalSwap(LndChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodepublickey_.Swap(&other->nodepublickey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fundingtransaction_.Swap(&other->fundingtransaction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fundingtxidstr_.Swap(&other->fundingtxidstr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(outputindex_, other->outputindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LndChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnextChannel::InitAsDefaultInstance() {
}
class ConnextChannel::_Internal {
 public:
};

ConnextChannel::ConnextChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:io.stakenet.orderbook.protos.ConnextChannel)
}
ConnextChannel::ConnextChannel(const ConnextChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nodepublicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nodepublicidentifier().empty()) {
    nodepublicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublicidentifier_);
  }
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channeladdress().empty()) {
    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
  // @@protoc_insertion_point(copy_constructor:io.stakenet.orderbook.protos.ConnextChannel)
}

void ConnextChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  nodepublicidentifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnextChannel::~ConnextChannel() {
  // @@protoc_insertion_point(destructor:io.stakenet.orderbook.protos.ConnextChannel)
  SharedDtor();
}

void ConnextChannel::SharedDtor() {
  nodepublicidentifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnextChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnextChannel& ConnextChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnextChannel_stakenet_2forderbook_2fmodels_2eproto.base);
  return *internal_default_instance();
}


void ConnextChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:io.stakenet.orderbook.protos.ConnextChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodepublicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channeladdress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConnextChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string nodePublicIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_nodepublicidentifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ConnextChannel.nodePublicIdentifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ConnextChannel.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelAddress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_channeladdress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "io.stakenet.orderbook.protos.ConnextChannel.channelAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnextChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.stakenet.orderbook.protos.ConnextChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string nodePublicIdentifier = 1;
  if (this->nodepublicidentifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nodepublicidentifier().data(), static_cast<int>(this->_internal_nodepublicidentifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ConnextChannel.nodePublicIdentifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_nodepublicidentifier(), target);
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ConnextChannel.channelId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channelid(), target);
  }

  // string channelAddress = 3;
  if (this->channeladdress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channeladdress().data(), static_cast<int>(this->_internal_channeladdress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.stakenet.orderbook.protos.ConnextChannel.channelAddress");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_channeladdress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.stakenet.orderbook.protos.ConnextChannel)
  return target;
}

size_t ConnextChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.stakenet.orderbook.protos.ConnextChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nodePublicIdentifier = 1;
  if (this->nodepublicidentifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nodepublicidentifier());
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string channelAddress = 3;
  if (this->channeladdress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channeladdress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnextChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:io.stakenet.orderbook.protos.ConnextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnextChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnextChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:io.stakenet.orderbook.protos.ConnextChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:io.stakenet.orderbook.protos.ConnextChannel)
    MergeFrom(*source);
  }
}

void ConnextChannel::MergeFrom(const ConnextChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:io.stakenet.orderbook.protos.ConnextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nodepublicidentifier().size() > 0) {

    nodepublicidentifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.nodepublicidentifier_);
  }
  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.channeladdress().size() > 0) {

    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
}

void ConnextChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:io.stakenet.orderbook.protos.ConnextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnextChannel::CopyFrom(const ConnextChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.stakenet.orderbook.protos.ConnextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnextChannel::IsInitialized() const {
  return true;
}

void ConnextChannel::InternalSwap(ConnextChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  nodepublicidentifier_.Swap(&other->nodepublicidentifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channeladdress_.Swap(&other->channeladdress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnextChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::BigInteger* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::BigInteger >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::BigInteger >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::OrderDetails* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::OrderDetails >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::OrderDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Order* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Order >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Order >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::Trade* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::Trade >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::BarPrices* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::BarPrices >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::BarPrices >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::BigInclusiveInterval* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::BigInclusiveInterval >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::BigInclusiveInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::TradingPair* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::TradingPair >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::TradingPair >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RefundablePayment* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RefundablePayment >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RefundablePayment >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::OrderSummary* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::OrderSummary >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::OrderSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::ServerInMaintenance* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::ServerInMaintenance >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::ServerInMaintenance >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::RentedChannel* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::RentedChannel >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::RentedChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::LndChannel* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::LndChannel >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::LndChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::io::stakenet::orderbook::protos::ConnextChannel* Arena::CreateMaybeMessage< ::io::stakenet::orderbook::protos::ConnextChannel >(Arena* arena) {
  return Arena::CreateInternal< ::io::stakenet::orderbook::protos::ConnextChannel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
