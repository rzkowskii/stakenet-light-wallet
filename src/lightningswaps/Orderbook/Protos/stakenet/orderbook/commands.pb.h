// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stakenet/orderbook/commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stakenet_2forderbook_2fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stakenet_2forderbook_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "models.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stakenet_2forderbook_2fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stakenet_2forderbook_2fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[68]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stakenet_2forderbook_2fcommands_2eproto;
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {
class CancelMatchedOrderCommand;
class CancelMatchedOrderCommandDefaultTypeInternal;
extern CancelMatchedOrderCommandDefaultTypeInternal _CancelMatchedOrderCommand_default_instance_;
class CancelMatchedOrderResponse;
class CancelMatchedOrderResponseDefaultTypeInternal;
extern CancelMatchedOrderResponseDefaultTypeInternal _CancelMatchedOrderResponse_default_instance_;
class CancelOpenOrderCommand;
class CancelOpenOrderCommandDefaultTypeInternal;
extern CancelOpenOrderCommandDefaultTypeInternal _CancelOpenOrderCommand_default_instance_;
class CancelOpenOrderResponse;
class CancelOpenOrderResponseDefaultTypeInternal;
extern CancelOpenOrderResponseDefaultTypeInternal _CancelOpenOrderResponse_default_instance_;
class CleanTradingPairOrdersCommand;
class CleanTradingPairOrdersCommandDefaultTypeInternal;
extern CleanTradingPairOrdersCommandDefaultTypeInternal _CleanTradingPairOrdersCommand_default_instance_;
class CleanTradingPairOrdersResponse;
class CleanTradingPairOrdersResponseDefaultTypeInternal;
extern CleanTradingPairOrdersResponseDefaultTypeInternal _CleanTradingPairOrdersResponse_default_instance_;
class CommandFailed;
class CommandFailedDefaultTypeInternal;
extern CommandFailedDefaultTypeInternal _CommandFailed_default_instance_;
class ConnextChannelStatus;
class ConnextChannelStatusDefaultTypeInternal;
extern ConnextChannelStatusDefaultTypeInternal _ConnextChannelStatus_default_instance_;
class ExtendRentedChannelTimeCommand;
class ExtendRentedChannelTimeCommandDefaultTypeInternal;
extern ExtendRentedChannelTimeCommandDefaultTypeInternal _ExtendRentedChannelTimeCommand_default_instance_;
class ExtendRentedChannelTimeResponse;
class ExtendRentedChannelTimeResponseDefaultTypeInternal;
extern ExtendRentedChannelTimeResponseDefaultTypeInternal _ExtendRentedChannelTimeResponse_default_instance_;
class GenerateInvoiceToExtendRentedChannelCommand;
class GenerateInvoiceToExtendRentedChannelCommandDefaultTypeInternal;
extern GenerateInvoiceToExtendRentedChannelCommandDefaultTypeInternal _GenerateInvoiceToExtendRentedChannelCommand_default_instance_;
class GenerateInvoiceToExtendRentedChannelResponse;
class GenerateInvoiceToExtendRentedChannelResponseDefaultTypeInternal;
extern GenerateInvoiceToExtendRentedChannelResponseDefaultTypeInternal _GenerateInvoiceToExtendRentedChannelResponse_default_instance_;
class GenerateInvoiceToRentChannelCommand;
class GenerateInvoiceToRentChannelCommandDefaultTypeInternal;
extern GenerateInvoiceToRentChannelCommandDefaultTypeInternal _GenerateInvoiceToRentChannelCommand_default_instance_;
class GenerateInvoiceToRentChannelResponse;
class GenerateInvoiceToRentChannelResponseDefaultTypeInternal;
extern GenerateInvoiceToRentChannelResponseDefaultTypeInternal _GenerateInvoiceToRentChannelResponse_default_instance_;
class GeneratePaymentHashToExtendConnextRentedChannelCommand;
class GeneratePaymentHashToExtendConnextRentedChannelCommandDefaultTypeInternal;
extern GeneratePaymentHashToExtendConnextRentedChannelCommandDefaultTypeInternal _GeneratePaymentHashToExtendConnextRentedChannelCommand_default_instance_;
class GeneratePaymentHashToExtendConnextRentedChannelResponse;
class GeneratePaymentHashToExtendConnextRentedChannelResponseDefaultTypeInternal;
extern GeneratePaymentHashToExtendConnextRentedChannelResponseDefaultTypeInternal _GeneratePaymentHashToExtendConnextRentedChannelResponse_default_instance_;
class GeneratePaymentHashToRentChannelCommand;
class GeneratePaymentHashToRentChannelCommandDefaultTypeInternal;
extern GeneratePaymentHashToRentChannelCommandDefaultTypeInternal _GeneratePaymentHashToRentChannelCommand_default_instance_;
class GeneratePaymentHashToRentChannelResponse;
class GeneratePaymentHashToRentChannelResponseDefaultTypeInternal;
extern GeneratePaymentHashToRentChannelResponseDefaultTypeInternal _GeneratePaymentHashToRentChannelResponse_default_instance_;
class GetBarsPricesCommand;
class GetBarsPricesCommandDefaultTypeInternal;
extern GetBarsPricesCommandDefaultTypeInternal _GetBarsPricesCommand_default_instance_;
class GetBarsPricesResponse;
class GetBarsPricesResponseDefaultTypeInternal;
extern GetBarsPricesResponseDefaultTypeInternal _GetBarsPricesResponse_default_instance_;
class GetChannelStatusCommand;
class GetChannelStatusCommandDefaultTypeInternal;
extern GetChannelStatusCommandDefaultTypeInternal _GetChannelStatusCommand_default_instance_;
class GetChannelStatusResponse;
class GetChannelStatusResponseDefaultTypeInternal;
extern GetChannelStatusResponseDefaultTypeInternal _GetChannelStatusResponse_default_instance_;
class GetConnextChannelContractDeploymentFeeCommand;
class GetConnextChannelContractDeploymentFeeCommandDefaultTypeInternal;
extern GetConnextChannelContractDeploymentFeeCommandDefaultTypeInternal _GetConnextChannelContractDeploymentFeeCommand_default_instance_;
class GetConnextChannelContractDeploymentFeeResponse;
class GetConnextChannelContractDeploymentFeeResponseDefaultTypeInternal;
extern GetConnextChannelContractDeploymentFeeResponseDefaultTypeInternal _GetConnextChannelContractDeploymentFeeResponse_default_instance_;
class GetConnextPaymentInformationCommand;
class GetConnextPaymentInformationCommandDefaultTypeInternal;
extern GetConnextPaymentInformationCommandDefaultTypeInternal _GetConnextPaymentInformationCommand_default_instance_;
class GetConnextPaymentInformationResponse;
class GetConnextPaymentInformationResponseDefaultTypeInternal;
extern GetConnextPaymentInformationResponseDefaultTypeInternal _GetConnextPaymentInformationResponse_default_instance_;
class GetFeeToExtendRentedChannelCommand;
class GetFeeToExtendRentedChannelCommandDefaultTypeInternal;
extern GetFeeToExtendRentedChannelCommandDefaultTypeInternal _GetFeeToExtendRentedChannelCommand_default_instance_;
class GetFeeToExtendRentedChannelResponse;
class GetFeeToExtendRentedChannelResponseDefaultTypeInternal;
extern GetFeeToExtendRentedChannelResponseDefaultTypeInternal _GetFeeToExtendRentedChannelResponse_default_instance_;
class GetFeeToRentChannelCommand;
class GetFeeToRentChannelCommandDefaultTypeInternal;
extern GetFeeToRentChannelCommandDefaultTypeInternal _GetFeeToRentChannelCommand_default_instance_;
class GetFeeToRentChannelResponse;
class GetFeeToRentChannelResponseDefaultTypeInternal;
extern GetFeeToRentChannelResponseDefaultTypeInternal _GetFeeToRentChannelResponse_default_instance_;
class GetHistoricTradesCommand;
class GetHistoricTradesCommandDefaultTypeInternal;
extern GetHistoricTradesCommandDefaultTypeInternal _GetHistoricTradesCommand_default_instance_;
class GetHistoricTradesResponse;
class GetHistoricTradesResponseDefaultTypeInternal;
extern GetHistoricTradesResponseDefaultTypeInternal _GetHistoricTradesResponse_default_instance_;
class GetLndPaymentInvoiceCommand;
class GetLndPaymentInvoiceCommandDefaultTypeInternal;
extern GetLndPaymentInvoiceCommandDefaultTypeInternal _GetLndPaymentInvoiceCommand_default_instance_;
class GetLndPaymentInvoiceResponse;
class GetLndPaymentInvoiceResponseDefaultTypeInternal;
extern GetLndPaymentInvoiceResponseDefaultTypeInternal _GetLndPaymentInvoiceResponse_default_instance_;
class GetOpenOrderByIdCommand;
class GetOpenOrderByIdCommandDefaultTypeInternal;
extern GetOpenOrderByIdCommandDefaultTypeInternal _GetOpenOrderByIdCommand_default_instance_;
class GetOpenOrderByIdResponse;
class GetOpenOrderByIdResponseDefaultTypeInternal;
extern GetOpenOrderByIdResponseDefaultTypeInternal _GetOpenOrderByIdResponse_default_instance_;
class GetOpenOrdersCommand;
class GetOpenOrdersCommandDefaultTypeInternal;
extern GetOpenOrdersCommandDefaultTypeInternal _GetOpenOrdersCommand_default_instance_;
class GetOpenOrdersResponse;
class GetOpenOrdersResponseDefaultTypeInternal;
extern GetOpenOrdersResponseDefaultTypeInternal _GetOpenOrdersResponse_default_instance_;
class GetRefundableAmountCommand;
class GetRefundableAmountCommandDefaultTypeInternal;
extern GetRefundableAmountCommandDefaultTypeInternal _GetRefundableAmountCommand_default_instance_;
class GetRefundableAmountResponse;
class GetRefundableAmountResponseDefaultTypeInternal;
extern GetRefundableAmountResponseDefaultTypeInternal _GetRefundableAmountResponse_default_instance_;
class GetTradingPairsCommand;
class GetTradingPairsCommandDefaultTypeInternal;
extern GetTradingPairsCommandDefaultTypeInternal _GetTradingPairsCommand_default_instance_;
class GetTradingPairsResponse;
class GetTradingPairsResponseDefaultTypeInternal;
extern GetTradingPairsResponseDefaultTypeInternal _GetTradingPairsResponse_default_instance_;
class LndChannelStatus;
class LndChannelStatusDefaultTypeInternal;
extern LndChannelStatusDefaultTypeInternal _LndChannelStatus_default_instance_;
class MatchedOrderNotFound;
class MatchedOrderNotFoundDefaultTypeInternal;
extern MatchedOrderNotFoundDefaultTypeInternal _MatchedOrderNotFound_default_instance_;
class PingCommand;
class PingCommandDefaultTypeInternal;
extern PingCommandDefaultTypeInternal _PingCommand_default_instance_;
class PingResponse;
class PingResponseDefaultTypeInternal;
extern PingResponseDefaultTypeInternal _PingResponse_default_instance_;
class PlaceOrderCommand;
class PlaceOrderCommandDefaultTypeInternal;
extern PlaceOrderCommandDefaultTypeInternal _PlaceOrderCommand_default_instance_;
class PlaceOrderResponse;
class PlaceOrderResponseDefaultTypeInternal;
extern PlaceOrderResponseDefaultTypeInternal _PlaceOrderResponse_default_instance_;
class PlaceOrderResponse_MyOrderMatched;
class PlaceOrderResponse_MyOrderMatchedDefaultTypeInternal;
extern PlaceOrderResponse_MyOrderMatchedDefaultTypeInternal _PlaceOrderResponse_MyOrderMatched_default_instance_;
class PlaceOrderResponse_MyOrderPlaced;
class PlaceOrderResponse_MyOrderPlacedDefaultTypeInternal;
extern PlaceOrderResponse_MyOrderPlacedDefaultTypeInternal _PlaceOrderResponse_MyOrderPlaced_default_instance_;
class PlaceOrderResponse_MyOrderRejected;
class PlaceOrderResponse_MyOrderRejectedDefaultTypeInternal;
extern PlaceOrderResponse_MyOrderRejectedDefaultTypeInternal _PlaceOrderResponse_MyOrderRejected_default_instance_;
class RefundFeeCommand;
class RefundFeeCommandDefaultTypeInternal;
extern RefundFeeCommandDefaultTypeInternal _RefundFeeCommand_default_instance_;
class RefundFeeResponse;
class RefundFeeResponseDefaultTypeInternal;
extern RefundFeeResponseDefaultTypeInternal _RefundFeeResponse_default_instance_;
class RegisterConnextChannelContractDeploymentFeeCommand;
class RegisterConnextChannelContractDeploymentFeeCommandDefaultTypeInternal;
extern RegisterConnextChannelContractDeploymentFeeCommandDefaultTypeInternal _RegisterConnextChannelContractDeploymentFeeCommand_default_instance_;
class RegisterConnextChannelContractDeploymentFeeResponse;
class RegisterConnextChannelContractDeploymentFeeResponseDefaultTypeInternal;
extern RegisterConnextChannelContractDeploymentFeeResponseDefaultTypeInternal _RegisterConnextChannelContractDeploymentFeeResponse_default_instance_;
class RegisterPublicIdentifierCommand;
class RegisterPublicIdentifierCommandDefaultTypeInternal;
extern RegisterPublicIdentifierCommandDefaultTypeInternal _RegisterPublicIdentifierCommand_default_instance_;
class RegisterPublicIdentifierResponse;
class RegisterPublicIdentifierResponseDefaultTypeInternal;
extern RegisterPublicIdentifierResponseDefaultTypeInternal _RegisterPublicIdentifierResponse_default_instance_;
class RegisterPublicKeyCommand;
class RegisterPublicKeyCommandDefaultTypeInternal;
extern RegisterPublicKeyCommandDefaultTypeInternal _RegisterPublicKeyCommand_default_instance_;
class RegisterPublicKeyResponse;
class RegisterPublicKeyResponseDefaultTypeInternal;
extern RegisterPublicKeyResponseDefaultTypeInternal _RegisterPublicKeyResponse_default_instance_;
class RentChannelCommand;
class RentChannelCommandDefaultTypeInternal;
extern RentChannelCommandDefaultTypeInternal _RentChannelCommand_default_instance_;
class RentChannelResponse;
class RentChannelResponseDefaultTypeInternal;
extern RentChannelResponseDefaultTypeInternal _RentChannelResponse_default_instance_;
class SendOrderMessageCommand;
class SendOrderMessageCommandDefaultTypeInternal;
extern SendOrderMessageCommandDefaultTypeInternal _SendOrderMessageCommand_default_instance_;
class SendOrderMessageResponse;
class SendOrderMessageResponseDefaultTypeInternal;
extern SendOrderMessageResponseDefaultTypeInternal _SendOrderMessageResponse_default_instance_;
class SendOrderMessageResponse_OrderMessageSent;
class SendOrderMessageResponse_OrderMessageSentDefaultTypeInternal;
extern SendOrderMessageResponse_OrderMessageSentDefaultTypeInternal _SendOrderMessageResponse_OrderMessageSent_default_instance_;
class SubscribeCommand;
class SubscribeCommandDefaultTypeInternal;
extern SubscribeCommandDefaultTypeInternal _SubscribeCommand_default_instance_;
class SubscribeResponse;
class SubscribeResponseDefaultTypeInternal;
extern SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
class UnsubscribeCommand;
class UnsubscribeCommandDefaultTypeInternal;
extern UnsubscribeCommandDefaultTypeInternal _UnsubscribeCommand_default_instance_;
class UnsubscribeResponse;
class UnsubscribeResponseDefaultTypeInternal;
extern UnsubscribeResponseDefaultTypeInternal _UnsubscribeResponse_default_instance_;
}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> ::io::stakenet::orderbook::protos::CancelMatchedOrderCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CancelMatchedOrderCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::CancelMatchedOrderResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CancelMatchedOrderResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::CancelOpenOrderCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CancelOpenOrderCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::CancelOpenOrderResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CancelOpenOrderResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CleanTradingPairOrdersCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CleanTradingPairOrdersResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::CommandFailed* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::CommandFailed>(Arena*);
template<> ::io::stakenet::orderbook::protos::ConnextChannelStatus* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::ConnextChannelStatus>(Arena*);
template<> ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::ExtendRentedChannelTimeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::ExtendRentedChannelTimeResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GenerateInvoiceToExtendRentedChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GenerateInvoiceToRentChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GeneratePaymentHashToExtendConnextRentedChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GeneratePaymentHashToRentChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetBarsPricesCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetBarsPricesCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetBarsPricesResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetBarsPricesResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetChannelStatusCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetChannelStatusCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetChannelStatusResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetChannelStatusResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetConnextChannelContractDeploymentFeeResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetConnextPaymentInformationCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetConnextPaymentInformationResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetFeeToExtendRentedChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetFeeToRentChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetFeeToRentChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetHistoricTradesCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetHistoricTradesCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetHistoricTradesResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetHistoricTradesResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetLndPaymentInvoiceCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetLndPaymentInvoiceResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetOpenOrderByIdCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetOpenOrderByIdResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetOpenOrdersCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetOpenOrdersCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetOpenOrdersResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetOpenOrdersResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetRefundableAmountCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetRefundableAmountCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetRefundableAmountResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetRefundableAmountResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetTradingPairsCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetTradingPairsCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::GetTradingPairsResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::GetTradingPairsResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::LndChannelStatus* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::LndChannelStatus>(Arena*);
template<> ::io::stakenet::orderbook::protos::MatchedOrderNotFound* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::MatchedOrderNotFound>(Arena*);
template<> ::io::stakenet::orderbook::protos::PingCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PingCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::PingResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PingResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::PlaceOrderCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PlaceOrderCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::PlaceOrderResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PlaceOrderResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched>(Arena*);
template<> ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced>(Arena*);
template<> ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected>(Arena*);
template<> ::io::stakenet::orderbook::protos::RefundFeeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RefundFeeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::RefundFeeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RefundFeeResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterConnextChannelContractDeploymentFeeResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterPublicIdentifierCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterPublicIdentifierResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterPublicKeyCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterPublicKeyCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::RegisterPublicKeyResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RegisterPublicKeyResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::RentChannelCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RentChannelCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::RentChannelResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::RentChannelResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::SendOrderMessageCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::SendOrderMessageCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::SendOrderMessageResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::SendOrderMessageResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent>(Arena*);
template<> ::io::stakenet::orderbook::protos::SubscribeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::SubscribeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::SubscribeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::SubscribeResponse>(Arena*);
template<> ::io::stakenet::orderbook::protos::UnsubscribeCommand* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::UnsubscribeCommand>(Arena*);
template<> ::io::stakenet::orderbook::protos::UnsubscribeResponse* Arena::CreateMaybeMessage<::io::stakenet::orderbook::protos::UnsubscribeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace io {
namespace stakenet {
namespace orderbook {
namespace protos {

// ===================================================================

class CommandFailed :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CommandFailed) */ {
 public:
  CommandFailed();
  virtual ~CommandFailed();

  CommandFailed(const CommandFailed& from);
  CommandFailed(CommandFailed&& from) noexcept
    : CommandFailed() {
    *this = ::std::move(from);
  }

  inline CommandFailed& operator=(const CommandFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandFailed& operator=(CommandFailed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CommandFailed& default_instance();

  enum ValueCase {
    kReason = 1,
    kServerInMaintenance = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandFailed* internal_default_instance() {
    return reinterpret_cast<const CommandFailed*>(
               &_CommandFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandFailed& a, CommandFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandFailed* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandFailed* New() const final {
    return CreateMaybeMessage<CommandFailed>(nullptr);
  }

  CommandFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandFailed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandFailed& from);
  void MergeFrom(const CommandFailed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandFailed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CommandFailed";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
    kServerInMaintenanceFieldNumber = 2,
  };
  // string reason = 1;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // .io.stakenet.orderbook.protos.ServerInMaintenance serverInMaintenance = 2;
  bool has_serverinmaintenance() const;
  private:
  bool _internal_has_serverinmaintenance() const;
  public:
  void clear_serverinmaintenance();
  const ::io::stakenet::orderbook::protos::ServerInMaintenance& serverinmaintenance() const;
  ::io::stakenet::orderbook::protos::ServerInMaintenance* release_serverinmaintenance();
  ::io::stakenet::orderbook::protos::ServerInMaintenance* mutable_serverinmaintenance();
  void set_allocated_serverinmaintenance(::io::stakenet::orderbook::protos::ServerInMaintenance* serverinmaintenance);
  private:
  const ::io::stakenet::orderbook::protos::ServerInMaintenance& _internal_serverinmaintenance() const;
  ::io::stakenet::orderbook::protos::ServerInMaintenance* _internal_mutable_serverinmaintenance();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CommandFailed)
 private:
  class _Internal;
  void set_has_reason();
  void set_has_serverinmaintenance();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::io::stakenet::orderbook::protos::ServerInMaintenance* serverinmaintenance_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PingCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PingCommand) */ {
 public:
  PingCommand();
  virtual ~PingCommand();

  PingCommand(const PingCommand& from);
  PingCommand(PingCommand&& from) noexcept
    : PingCommand() {
    *this = ::std::move(from);
  }

  inline PingCommand& operator=(const PingCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingCommand& operator=(PingCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingCommand* internal_default_instance() {
    return reinterpret_cast<const PingCommand*>(
               &_PingCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PingCommand& a, PingCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(PingCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingCommand* New() const final {
    return CreateMaybeMessage<PingCommand>(nullptr);
  }

  PingCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingCommand& from);
  void MergeFrom(const PingCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PingCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PingCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PingResponse) */ {
 public:
  PingResponse();
  virtual ~PingResponse();

  PingResponse(const PingResponse& from);
  PingResponse(PingResponse&& from) noexcept
    : PingResponse() {
    *this = ::std::move(from);
  }

  inline PingResponse& operator=(const PingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResponse& operator=(PingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingResponse* internal_default_instance() {
    return reinterpret_cast<const PingResponse*>(
               &_PingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PingResponse& a, PingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingResponse* New() const final {
    return CreateMaybeMessage<PingResponse>(nullptr);
  }

  PingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingResponse& from);
  void MergeFrom(const PingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetTradingPairsCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetTradingPairsCommand) */ {
 public:
  GetTradingPairsCommand();
  virtual ~GetTradingPairsCommand();

  GetTradingPairsCommand(const GetTradingPairsCommand& from);
  GetTradingPairsCommand(GetTradingPairsCommand&& from) noexcept
    : GetTradingPairsCommand() {
    *this = ::std::move(from);
  }

  inline GetTradingPairsCommand& operator=(const GetTradingPairsCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingPairsCommand& operator=(GetTradingPairsCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTradingPairsCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTradingPairsCommand* internal_default_instance() {
    return reinterpret_cast<const GetTradingPairsCommand*>(
               &_GetTradingPairsCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetTradingPairsCommand& a, GetTradingPairsCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTradingPairsCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTradingPairsCommand* New() const final {
    return CreateMaybeMessage<GetTradingPairsCommand>(nullptr);
  }

  GetTradingPairsCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTradingPairsCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTradingPairsCommand& from);
  void MergeFrom(const GetTradingPairsCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTradingPairsCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetTradingPairsCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetTradingPairsCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetTradingPairsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetTradingPairsResponse) */ {
 public:
  GetTradingPairsResponse();
  virtual ~GetTradingPairsResponse();

  GetTradingPairsResponse(const GetTradingPairsResponse& from);
  GetTradingPairsResponse(GetTradingPairsResponse&& from) noexcept
    : GetTradingPairsResponse() {
    *this = ::std::move(from);
  }

  inline GetTradingPairsResponse& operator=(const GetTradingPairsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingPairsResponse& operator=(GetTradingPairsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTradingPairsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTradingPairsResponse* internal_default_instance() {
    return reinterpret_cast<const GetTradingPairsResponse*>(
               &_GetTradingPairsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetTradingPairsResponse& a, GetTradingPairsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTradingPairsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTradingPairsResponse* New() const final {
    return CreateMaybeMessage<GetTradingPairsResponse>(nullptr);
  }

  GetTradingPairsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTradingPairsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTradingPairsResponse& from);
  void MergeFrom(const GetTradingPairsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTradingPairsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetTradingPairsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairsFieldNumber = 1,
    kPaysFeesFieldNumber = 2,
  };
  // repeated .io.stakenet.orderbook.protos.TradingPair tradingPairs = 1;
  int tradingpairs_size() const;
  private:
  int _internal_tradingpairs_size() const;
  public:
  void clear_tradingpairs();
  ::io::stakenet::orderbook::protos::TradingPair* mutable_tradingpairs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::TradingPair >*
      mutable_tradingpairs();
  private:
  const ::io::stakenet::orderbook::protos::TradingPair& _internal_tradingpairs(int index) const;
  ::io::stakenet::orderbook::protos::TradingPair* _internal_add_tradingpairs();
  public:
  const ::io::stakenet::orderbook::protos::TradingPair& tradingpairs(int index) const;
  ::io::stakenet::orderbook::protos::TradingPair* add_tradingpairs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::TradingPair >&
      tradingpairs() const;

  // bool paysFees = 2;
  void clear_paysfees();
  bool paysfees() const;
  void set_paysfees(bool value);
  private:
  bool _internal_paysfees() const;
  void _internal_set_paysfees(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetTradingPairsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::TradingPair > tradingpairs_;
  bool paysfees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.SubscribeCommand) */ {
 public:
  SubscribeCommand();
  virtual ~SubscribeCommand();

  SubscribeCommand(const SubscribeCommand& from);
  SubscribeCommand(SubscribeCommand&& from) noexcept
    : SubscribeCommand() {
    *this = ::std::move(from);
  }

  inline SubscribeCommand& operator=(const SubscribeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCommand& operator=(SubscribeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeCommand* internal_default_instance() {
    return reinterpret_cast<const SubscribeCommand*>(
               &_SubscribeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SubscribeCommand& a, SubscribeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeCommand* New() const final {
    return CreateMaybeMessage<SubscribeCommand>(nullptr);
  }

  SubscribeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeCommand& from);
  void MergeFrom(const SubscribeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.SubscribeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
    kRetrieveOrdersSummaryFieldNumber = 2,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // bool retrieveOrdersSummary = 2;
  void clear_retrieveorderssummary();
  bool retrieveorderssummary() const;
  void set_retrieveorderssummary(bool value);
  private:
  bool _internal_retrieveorderssummary() const;
  void _internal_set_retrieveorderssummary(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.SubscribeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  bool retrieveorderssummary_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class SubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.SubscribeResponse) */ {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);
  SubscribeResponse(SubscribeResponse&& from) noexcept
    : SubscribeResponse() {
    *this = ::std::move(from);
  }

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeResponse& operator=(SubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeResponse*>(
               &_SubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SubscribeResponse& a, SubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeResponse* New() const final {
    return CreateMaybeMessage<SubscribeResponse>(nullptr);
  }

  SubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.SubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryBidsFieldNumber = 2,
    kSummaryAsksFieldNumber = 3,
    kTradingPairFieldNumber = 1,
  };
  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 2;
  int summarybids_size() const;
  private:
  int _internal_summarybids_size() const;
  public:
  void clear_summarybids();
  ::io::stakenet::orderbook::protos::OrderSummary* mutable_summarybids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
      mutable_summarybids();
  private:
  const ::io::stakenet::orderbook::protos::OrderSummary& _internal_summarybids(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* _internal_add_summarybids();
  public:
  const ::io::stakenet::orderbook::protos::OrderSummary& summarybids(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* add_summarybids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
      summarybids() const;

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 3;
  int summaryasks_size() const;
  private:
  int _internal_summaryasks_size() const;
  public:
  void clear_summaryasks();
  ::io::stakenet::orderbook::protos::OrderSummary* mutable_summaryasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
      mutable_summaryasks();
  private:
  const ::io::stakenet::orderbook::protos::OrderSummary& _internal_summaryasks(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* _internal_add_summaryasks();
  public:
  const ::io::stakenet::orderbook::protos::OrderSummary& summaryasks(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* add_summaryasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
      summaryasks() const;

  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.SubscribeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary > summarybids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary > summaryasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.UnsubscribeCommand) */ {
 public:
  UnsubscribeCommand();
  virtual ~UnsubscribeCommand();

  UnsubscribeCommand(const UnsubscribeCommand& from);
  UnsubscribeCommand(UnsubscribeCommand&& from) noexcept
    : UnsubscribeCommand() {
    *this = ::std::move(from);
  }

  inline UnsubscribeCommand& operator=(const UnsubscribeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeCommand& operator=(UnsubscribeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeCommand* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeCommand*>(
               &_UnsubscribeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnsubscribeCommand& a, UnsubscribeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeCommand* New() const final {
    return CreateMaybeMessage<UnsubscribeCommand>(nullptr);
  }

  UnsubscribeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeCommand& from);
  void MergeFrom(const UnsubscribeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.UnsubscribeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.UnsubscribeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class UnsubscribeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.UnsubscribeResponse) */ {
 public:
  UnsubscribeResponse();
  virtual ~UnsubscribeResponse();

  UnsubscribeResponse(const UnsubscribeResponse& from);
  UnsubscribeResponse(UnsubscribeResponse&& from) noexcept
    : UnsubscribeResponse() {
    *this = ::std::move(from);
  }

  inline UnsubscribeResponse& operator=(const UnsubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnsubscribeResponse& operator=(UnsubscribeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnsubscribeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnsubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const UnsubscribeResponse*>(
               &_UnsubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UnsubscribeResponse& a, UnsubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnsubscribeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnsubscribeResponse* New() const final {
    return CreateMaybeMessage<UnsubscribeResponse>(nullptr);
  }

  UnsubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnsubscribeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnsubscribeResponse& from);
  void MergeFrom(const UnsubscribeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnsubscribeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.UnsubscribeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.UnsubscribeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetOpenOrdersCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetOpenOrdersCommand) */ {
 public:
  GetOpenOrdersCommand();
  virtual ~GetOpenOrdersCommand();

  GetOpenOrdersCommand(const GetOpenOrdersCommand& from);
  GetOpenOrdersCommand(GetOpenOrdersCommand&& from) noexcept
    : GetOpenOrdersCommand() {
    *this = ::std::move(from);
  }

  inline GetOpenOrdersCommand& operator=(const GetOpenOrdersCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOpenOrdersCommand& operator=(GetOpenOrdersCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOpenOrdersCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenOrdersCommand* internal_default_instance() {
    return reinterpret_cast<const GetOpenOrdersCommand*>(
               &_GetOpenOrdersCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetOpenOrdersCommand& a, GetOpenOrdersCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOpenOrdersCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOpenOrdersCommand* New() const final {
    return CreateMaybeMessage<GetOpenOrdersCommand>(nullptr);
  }

  GetOpenOrdersCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenOrdersCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOpenOrdersCommand& from);
  void MergeFrom(const GetOpenOrdersCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenOrdersCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetOpenOrdersCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetOpenOrdersCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetOpenOrdersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetOpenOrdersResponse) */ {
 public:
  GetOpenOrdersResponse();
  virtual ~GetOpenOrdersResponse();

  GetOpenOrdersResponse(const GetOpenOrdersResponse& from);
  GetOpenOrdersResponse(GetOpenOrdersResponse&& from) noexcept
    : GetOpenOrdersResponse() {
    *this = ::std::move(from);
  }

  inline GetOpenOrdersResponse& operator=(const GetOpenOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOpenOrdersResponse& operator=(GetOpenOrdersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOpenOrdersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const GetOpenOrdersResponse*>(
               &_GetOpenOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetOpenOrdersResponse& a, GetOpenOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOpenOrdersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOpenOrdersResponse* New() const final {
    return CreateMaybeMessage<GetOpenOrdersResponse>(nullptr);
  }

  GetOpenOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenOrdersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOpenOrdersResponse& from);
  void MergeFrom(const GetOpenOrdersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenOrdersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetOpenOrdersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSummaryBidsFieldNumber = 4,
    kSummaryAsksFieldNumber = 5,
    kTradingPairFieldNumber = 1,
  };
  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 4;
  int summarybids_size() const;
  private:
  int _internal_summarybids_size() const;
  public:
  void clear_summarybids();
  ::io::stakenet::orderbook::protos::OrderSummary* mutable_summarybids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
      mutable_summarybids();
  private:
  const ::io::stakenet::orderbook::protos::OrderSummary& _internal_summarybids(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* _internal_add_summarybids();
  public:
  const ::io::stakenet::orderbook::protos::OrderSummary& summarybids(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* add_summarybids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
      summarybids() const;

  // repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 5;
  int summaryasks_size() const;
  private:
  int _internal_summaryasks_size() const;
  public:
  void clear_summaryasks();
  ::io::stakenet::orderbook::protos::OrderSummary* mutable_summaryasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
      mutable_summaryasks();
  private:
  const ::io::stakenet::orderbook::protos::OrderSummary& _internal_summaryasks(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* _internal_add_summaryasks();
  public:
  const ::io::stakenet::orderbook::protos::OrderSummary& summaryasks(int index) const;
  ::io::stakenet::orderbook::protos::OrderSummary* add_summaryasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
      summaryasks() const;

  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetOpenOrdersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary > summarybids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary > summaryasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetHistoricTradesCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetHistoricTradesCommand) */ {
 public:
  GetHistoricTradesCommand();
  virtual ~GetHistoricTradesCommand();

  GetHistoricTradesCommand(const GetHistoricTradesCommand& from);
  GetHistoricTradesCommand(GetHistoricTradesCommand&& from) noexcept
    : GetHistoricTradesCommand() {
    *this = ::std::move(from);
  }

  inline GetHistoricTradesCommand& operator=(const GetHistoricTradesCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHistoricTradesCommand& operator=(GetHistoricTradesCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHistoricTradesCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHistoricTradesCommand* internal_default_instance() {
    return reinterpret_cast<const GetHistoricTradesCommand*>(
               &_GetHistoricTradesCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetHistoricTradesCommand& a, GetHistoricTradesCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHistoricTradesCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHistoricTradesCommand* New() const final {
    return CreateMaybeMessage<GetHistoricTradesCommand>(nullptr);
  }

  GetHistoricTradesCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHistoricTradesCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHistoricTradesCommand& from);
  void MergeFrom(const GetHistoricTradesCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHistoricTradesCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetHistoricTradesCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastSeenTradeIdFieldNumber = 2,
    kTradingPairFieldNumber = 3,
    kLimitFieldNumber = 1,
  };
  // string lastSeenTradeId = 2;
  void clear_lastseentradeid();
  const std::string& lastseentradeid() const;
  void set_lastseentradeid(const std::string& value);
  void set_lastseentradeid(std::string&& value);
  void set_lastseentradeid(const char* value);
  void set_lastseentradeid(const char* value, size_t size);
  std::string* mutable_lastseentradeid();
  std::string* release_lastseentradeid();
  void set_allocated_lastseentradeid(std::string* lastseentradeid);
  private:
  const std::string& _internal_lastseentradeid() const;
  void _internal_set_lastseentradeid(const std::string& value);
  std::string* _internal_mutable_lastseentradeid();
  public:

  // string tradingPair = 3;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // int32 limit = 1;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetHistoricTradesCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastseentradeid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetHistoricTradesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetHistoricTradesResponse) */ {
 public:
  GetHistoricTradesResponse();
  virtual ~GetHistoricTradesResponse();

  GetHistoricTradesResponse(const GetHistoricTradesResponse& from);
  GetHistoricTradesResponse(GetHistoricTradesResponse&& from) noexcept
    : GetHistoricTradesResponse() {
    *this = ::std::move(from);
  }

  inline GetHistoricTradesResponse& operator=(const GetHistoricTradesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHistoricTradesResponse& operator=(GetHistoricTradesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHistoricTradesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHistoricTradesResponse* internal_default_instance() {
    return reinterpret_cast<const GetHistoricTradesResponse*>(
               &_GetHistoricTradesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetHistoricTradesResponse& a, GetHistoricTradesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHistoricTradesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHistoricTradesResponse* New() const final {
    return CreateMaybeMessage<GetHistoricTradesResponse>(nullptr);
  }

  GetHistoricTradesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHistoricTradesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHistoricTradesResponse& from);
  void MergeFrom(const GetHistoricTradesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHistoricTradesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetHistoricTradesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .io.stakenet.orderbook.protos.Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::io::stakenet::orderbook::protos::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::Trade >*
      mutable_trades();
  private:
  const ::io::stakenet::orderbook::protos::Trade& _internal_trades(int index) const;
  ::io::stakenet::orderbook::protos::Trade* _internal_add_trades();
  public:
  const ::io::stakenet::orderbook::protos::Trade& trades(int index) const;
  ::io::stakenet::orderbook::protos::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetHistoricTradesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetBarsPricesCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetBarsPricesCommand) */ {
 public:
  GetBarsPricesCommand();
  virtual ~GetBarsPricesCommand();

  GetBarsPricesCommand(const GetBarsPricesCommand& from);
  GetBarsPricesCommand(GetBarsPricesCommand&& from) noexcept
    : GetBarsPricesCommand() {
    *this = ::std::move(from);
  }

  inline GetBarsPricesCommand& operator=(const GetBarsPricesCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBarsPricesCommand& operator=(GetBarsPricesCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBarsPricesCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBarsPricesCommand* internal_default_instance() {
    return reinterpret_cast<const GetBarsPricesCommand*>(
               &_GetBarsPricesCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetBarsPricesCommand& a, GetBarsPricesCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBarsPricesCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBarsPricesCommand* New() const final {
    return CreateMaybeMessage<GetBarsPricesCommand>(nullptr);
  }

  GetBarsPricesCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBarsPricesCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBarsPricesCommand& from);
  void MergeFrom(const GetBarsPricesCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBarsPricesCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetBarsPricesCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
    kResolutionFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kLimitFieldNumber = 5,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // string resolution = 2;
  void clear_resolution();
  const std::string& resolution() const;
  void set_resolution(const std::string& value);
  void set_resolution(std::string&& value);
  void set_resolution(const char* value);
  void set_resolution(const char* value, size_t size);
  std::string* mutable_resolution();
  std::string* release_resolution();
  void set_allocated_resolution(std::string* resolution);
  private:
  const std::string& _internal_resolution() const;
  void _internal_set_resolution(const std::string& value);
  std::string* _internal_mutable_resolution();
  public:

  // int64 from = 3;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::int64 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 to = 4;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int64 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 limit = 5;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::int32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetBarsPricesCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolution_;
  ::PROTOBUF_NAMESPACE_ID::int64 from_;
  ::PROTOBUF_NAMESPACE_ID::int64 to_;
  ::PROTOBUF_NAMESPACE_ID::int32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetBarsPricesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetBarsPricesResponse) */ {
 public:
  GetBarsPricesResponse();
  virtual ~GetBarsPricesResponse();

  GetBarsPricesResponse(const GetBarsPricesResponse& from);
  GetBarsPricesResponse(GetBarsPricesResponse&& from) noexcept
    : GetBarsPricesResponse() {
    *this = ::std::move(from);
  }

  inline GetBarsPricesResponse& operator=(const GetBarsPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBarsPricesResponse& operator=(GetBarsPricesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBarsPricesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetBarsPricesResponse* internal_default_instance() {
    return reinterpret_cast<const GetBarsPricesResponse*>(
               &_GetBarsPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetBarsPricesResponse& a, GetBarsPricesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBarsPricesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBarsPricesResponse* New() const final {
    return CreateMaybeMessage<GetBarsPricesResponse>(nullptr);
  }

  GetBarsPricesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBarsPricesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBarsPricesResponse& from);
  void MergeFrom(const GetBarsPricesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBarsPricesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetBarsPricesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBarPricesFieldNumber = 1,
  };
  // repeated .io.stakenet.orderbook.protos.BarPrices barPrices = 1;
  int barprices_size() const;
  private:
  int _internal_barprices_size() const;
  public:
  void clear_barprices();
  ::io::stakenet::orderbook::protos::BarPrices* mutable_barprices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::BarPrices >*
      mutable_barprices();
  private:
  const ::io::stakenet::orderbook::protos::BarPrices& _internal_barprices(int index) const;
  ::io::stakenet::orderbook::protos::BarPrices* _internal_add_barprices();
  public:
  const ::io::stakenet::orderbook::protos::BarPrices& barprices(int index) const;
  ::io::stakenet::orderbook::protos::BarPrices* add_barprices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::BarPrices >&
      barprices() const;

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetBarsPricesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::BarPrices > barprices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PlaceOrderCommand) */ {
 public:
  PlaceOrderCommand();
  virtual ~PlaceOrderCommand();

  PlaceOrderCommand(const PlaceOrderCommand& from);
  PlaceOrderCommand(PlaceOrderCommand&& from) noexcept
    : PlaceOrderCommand() {
    *this = ::std::move(from);
  }

  inline PlaceOrderCommand& operator=(const PlaceOrderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderCommand& operator=(PlaceOrderCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderCommand* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderCommand*>(
               &_PlaceOrderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PlaceOrderCommand& a, PlaceOrderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderCommand* New() const final {
    return CreateMaybeMessage<PlaceOrderCommand>(nullptr);
  }

  PlaceOrderCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderCommand& from);
  void MergeFrom(const PlaceOrderCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PlaceOrderCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 2,
    kOrderFieldNumber = 1,
  };
  // bytes paymentHash = 2;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // .io.stakenet.orderbook.protos.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::io::stakenet::orderbook::protos::Order& order() const;
  ::io::stakenet::orderbook::protos::Order* release_order();
  ::io::stakenet::orderbook::protos::Order* mutable_order();
  void set_allocated_order(::io::stakenet::orderbook::protos::Order* order);
  private:
  const ::io::stakenet::orderbook::protos::Order& _internal_order() const;
  ::io::stakenet::orderbook::protos::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PlaceOrderCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::io::stakenet::orderbook::protos::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse_MyOrderPlaced :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced) */ {
 public:
  PlaceOrderResponse_MyOrderPlaced();
  virtual ~PlaceOrderResponse_MyOrderPlaced();

  PlaceOrderResponse_MyOrderPlaced(const PlaceOrderResponse_MyOrderPlaced& from);
  PlaceOrderResponse_MyOrderPlaced(PlaceOrderResponse_MyOrderPlaced&& from) noexcept
    : PlaceOrderResponse_MyOrderPlaced() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse_MyOrderPlaced& operator=(const PlaceOrderResponse_MyOrderPlaced& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse_MyOrderPlaced& operator=(PlaceOrderResponse_MyOrderPlaced&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse_MyOrderPlaced& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderResponse_MyOrderPlaced* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse_MyOrderPlaced*>(
               &_PlaceOrderResponse_MyOrderPlaced_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PlaceOrderResponse_MyOrderPlaced& a, PlaceOrderResponse_MyOrderPlaced& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse_MyOrderPlaced* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse_MyOrderPlaced* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderPlaced>(nullptr);
  }

  PlaceOrderResponse_MyOrderPlaced* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderPlaced>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse_MyOrderPlaced& from);
  void MergeFrom(const PlaceOrderResponse_MyOrderPlaced& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse_MyOrderPlaced* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .io.stakenet.orderbook.protos.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::io::stakenet::orderbook::protos::Order& order() const;
  ::io::stakenet::orderbook::protos::Order* release_order();
  ::io::stakenet::orderbook::protos::Order* mutable_order();
  void set_allocated_order(::io::stakenet::orderbook::protos::Order* order);
  private:
  const ::io::stakenet::orderbook::protos::Order& _internal_order() const;
  ::io::stakenet::orderbook::protos::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse_MyOrderRejected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected) */ {
 public:
  PlaceOrderResponse_MyOrderRejected();
  virtual ~PlaceOrderResponse_MyOrderRejected();

  PlaceOrderResponse_MyOrderRejected(const PlaceOrderResponse_MyOrderRejected& from);
  PlaceOrderResponse_MyOrderRejected(PlaceOrderResponse_MyOrderRejected&& from) noexcept
    : PlaceOrderResponse_MyOrderRejected() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse_MyOrderRejected& operator=(const PlaceOrderResponse_MyOrderRejected& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse_MyOrderRejected& operator=(PlaceOrderResponse_MyOrderRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse_MyOrderRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderResponse_MyOrderRejected* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse_MyOrderRejected*>(
               &_PlaceOrderResponse_MyOrderRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlaceOrderResponse_MyOrderRejected& a, PlaceOrderResponse_MyOrderRejected& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse_MyOrderRejected* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse_MyOrderRejected* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderRejected>(nullptr);
  }

  PlaceOrderResponse_MyOrderRejected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderRejected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse_MyOrderRejected& from);
  void MergeFrom(const PlaceOrderResponse_MyOrderRejected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse_MyOrderRejected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // string reason = 1;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse_MyOrderMatched :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched) */ {
 public:
  PlaceOrderResponse_MyOrderMatched();
  virtual ~PlaceOrderResponse_MyOrderMatched();

  PlaceOrderResponse_MyOrderMatched(const PlaceOrderResponse_MyOrderMatched& from);
  PlaceOrderResponse_MyOrderMatched(PlaceOrderResponse_MyOrderMatched&& from) noexcept
    : PlaceOrderResponse_MyOrderMatched() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse_MyOrderMatched& operator=(const PlaceOrderResponse_MyOrderMatched& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse_MyOrderMatched& operator=(PlaceOrderResponse_MyOrderMatched&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse_MyOrderMatched& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderResponse_MyOrderMatched* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse_MyOrderMatched*>(
               &_PlaceOrderResponse_MyOrderMatched_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlaceOrderResponse_MyOrderMatched& a, PlaceOrderResponse_MyOrderMatched& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse_MyOrderMatched* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse_MyOrderMatched* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderMatched>(nullptr);
  }

  PlaceOrderResponse_MyOrderMatched* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse_MyOrderMatched>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse_MyOrderMatched& from);
  void MergeFrom(const PlaceOrderResponse_MyOrderMatched& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse_MyOrderMatched* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeFieldNumber = 1,
    kOrderMatchedWithFieldNumber = 2,
  };
  // .io.stakenet.orderbook.protos.Trade trade = 1;
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::io::stakenet::orderbook::protos::Trade& trade() const;
  ::io::stakenet::orderbook::protos::Trade* release_trade();
  ::io::stakenet::orderbook::protos::Trade* mutable_trade();
  void set_allocated_trade(::io::stakenet::orderbook::protos::Trade* trade);
  private:
  const ::io::stakenet::orderbook::protos::Trade& _internal_trade() const;
  ::io::stakenet::orderbook::protos::Trade* _internal_mutable_trade();
  public:

  // .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
  bool has_ordermatchedwith() const;
  private:
  bool _internal_has_ordermatchedwith() const;
  public:
  void clear_ordermatchedwith();
  const ::io::stakenet::orderbook::protos::Order& ordermatchedwith() const;
  ::io::stakenet::orderbook::protos::Order* release_ordermatchedwith();
  ::io::stakenet::orderbook::protos::Order* mutable_ordermatchedwith();
  void set_allocated_ordermatchedwith(::io::stakenet::orderbook::protos::Order* ordermatchedwith);
  private:
  const ::io::stakenet::orderbook::protos::Order& _internal_ordermatchedwith() const;
  ::io::stakenet::orderbook::protos::Order* _internal_mutable_ordermatchedwith();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::Trade* trade_;
  ::io::stakenet::orderbook::protos::Order* ordermatchedwith_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.PlaceOrderResponse) */ {
 public:
  PlaceOrderResponse();
  virtual ~PlaceOrderResponse();

  PlaceOrderResponse(const PlaceOrderResponse& from);
  PlaceOrderResponse(PlaceOrderResponse&& from) noexcept
    : PlaceOrderResponse() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse& operator=(const PlaceOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse& operator=(PlaceOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse& default_instance();

  enum ValueCase {
    kMyOrderPlaced = 1,
    kMyOrderRejected = 2,
    kMyOrderMatched = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse*>(
               &_PlaceOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(PlaceOrderResponse& a, PlaceOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse>(nullptr);
  }

  PlaceOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse& from);
  void MergeFrom(const PlaceOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.PlaceOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PlaceOrderResponse_MyOrderPlaced MyOrderPlaced;
  typedef PlaceOrderResponse_MyOrderRejected MyOrderRejected;
  typedef PlaceOrderResponse_MyOrderMatched MyOrderMatched;

  // accessors -------------------------------------------------------

  enum : int {
    kMyOrderPlacedFieldNumber = 1,
    kMyOrderRejectedFieldNumber = 2,
    kMyOrderMatchedFieldNumber = 3,
  };
  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced myOrderPlaced = 1;
  bool has_myorderplaced() const;
  private:
  bool _internal_has_myorderplaced() const;
  public:
  void clear_myorderplaced();
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced& myorderplaced() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* release_myorderplaced();
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* mutable_myorderplaced();
  void set_allocated_myorderplaced(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* myorderplaced);
  private:
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced& _internal_myorderplaced() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* _internal_mutable_myorderplaced();
  public:

  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected myOrderRejected = 2;
  bool has_myorderrejected() const;
  private:
  bool _internal_has_myorderrejected() const;
  public:
  void clear_myorderrejected();
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected& myorderrejected() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* release_myorderrejected();
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* mutable_myorderrejected();
  void set_allocated_myorderrejected(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* myorderrejected);
  private:
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected& _internal_myorderrejected() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* _internal_mutable_myorderrejected();
  public:

  // .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched myOrderMatched = 3;
  bool has_myordermatched() const;
  private:
  bool _internal_has_myordermatched() const;
  public:
  void clear_myordermatched();
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched& myordermatched() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* release_myordermatched();
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* mutable_myordermatched();
  void set_allocated_myordermatched(::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* myordermatched);
  private:
  const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched& _internal_myordermatched() const;
  ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* _internal_mutable_myordermatched();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.PlaceOrderResponse)
 private:
  class _Internal;
  void set_has_myorderplaced();
  void set_has_myorderrejected();
  void set_has_myordermatched();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* myorderplaced_;
    ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* myorderrejected_;
    ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* myordermatched_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetOpenOrderByIdCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand) */ {
 public:
  GetOpenOrderByIdCommand();
  virtual ~GetOpenOrderByIdCommand();

  GetOpenOrderByIdCommand(const GetOpenOrderByIdCommand& from);
  GetOpenOrderByIdCommand(GetOpenOrderByIdCommand&& from) noexcept
    : GetOpenOrderByIdCommand() {
    *this = ::std::move(from);
  }

  inline GetOpenOrderByIdCommand& operator=(const GetOpenOrderByIdCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOpenOrderByIdCommand& operator=(GetOpenOrderByIdCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOpenOrderByIdCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenOrderByIdCommand* internal_default_instance() {
    return reinterpret_cast<const GetOpenOrderByIdCommand*>(
               &_GetOpenOrderByIdCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetOpenOrderByIdCommand& a, GetOpenOrderByIdCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOpenOrderByIdCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOpenOrderByIdCommand* New() const final {
    return CreateMaybeMessage<GetOpenOrderByIdCommand>(nullptr);
  }

  GetOpenOrderByIdCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenOrderByIdCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOpenOrderByIdCommand& from);
  void MergeFrom(const GetOpenOrderByIdCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenOrderByIdCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetOpenOrderByIdCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetOpenOrderByIdResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse) */ {
 public:
  GetOpenOrderByIdResponse();
  virtual ~GetOpenOrderByIdResponse();

  GetOpenOrderByIdResponse(const GetOpenOrderByIdResponse& from);
  GetOpenOrderByIdResponse(GetOpenOrderByIdResponse&& from) noexcept
    : GetOpenOrderByIdResponse() {
    *this = ::std::move(from);
  }

  inline GetOpenOrderByIdResponse& operator=(const GetOpenOrderByIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOpenOrderByIdResponse& operator=(GetOpenOrderByIdResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetOpenOrderByIdResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenOrderByIdResponse* internal_default_instance() {
    return reinterpret_cast<const GetOpenOrderByIdResponse*>(
               &_GetOpenOrderByIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetOpenOrderByIdResponse& a, GetOpenOrderByIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOpenOrderByIdResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOpenOrderByIdResponse* New() const final {
    return CreateMaybeMessage<GetOpenOrderByIdResponse>(nullptr);
  }

  GetOpenOrderByIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenOrderByIdResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetOpenOrderByIdResponse& from);
  void MergeFrom(const GetOpenOrderByIdResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenOrderByIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetOpenOrderByIdResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .io.stakenet.orderbook.protos.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::io::stakenet::orderbook::protos::Order& order() const;
  ::io::stakenet::orderbook::protos::Order* release_order();
  ::io::stakenet::orderbook::protos::Order* mutable_order();
  void set_allocated_order(::io::stakenet::orderbook::protos::Order* order);
  private:
  const ::io::stakenet::orderbook::protos::Order& _internal_order() const;
  ::io::stakenet::orderbook::protos::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CancelOpenOrderCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CancelOpenOrderCommand) */ {
 public:
  CancelOpenOrderCommand();
  virtual ~CancelOpenOrderCommand();

  CancelOpenOrderCommand(const CancelOpenOrderCommand& from);
  CancelOpenOrderCommand(CancelOpenOrderCommand&& from) noexcept
    : CancelOpenOrderCommand() {
    *this = ::std::move(from);
  }

  inline CancelOpenOrderCommand& operator=(const CancelOpenOrderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOpenOrderCommand& operator=(CancelOpenOrderCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOpenOrderCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOpenOrderCommand* internal_default_instance() {
    return reinterpret_cast<const CancelOpenOrderCommand*>(
               &_CancelOpenOrderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CancelOpenOrderCommand& a, CancelOpenOrderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOpenOrderCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOpenOrderCommand* New() const final {
    return CreateMaybeMessage<CancelOpenOrderCommand>(nullptr);
  }

  CancelOpenOrderCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOpenOrderCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOpenOrderCommand& from);
  void MergeFrom(const CancelOpenOrderCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOpenOrderCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CancelOpenOrderCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CancelOpenOrderCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CancelOpenOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CancelOpenOrderResponse) */ {
 public:
  CancelOpenOrderResponse();
  virtual ~CancelOpenOrderResponse();

  CancelOpenOrderResponse(const CancelOpenOrderResponse& from);
  CancelOpenOrderResponse(CancelOpenOrderResponse&& from) noexcept
    : CancelOpenOrderResponse() {
    *this = ::std::move(from);
  }

  inline CancelOpenOrderResponse& operator=(const CancelOpenOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOpenOrderResponse& operator=(CancelOpenOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOpenOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOpenOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CancelOpenOrderResponse*>(
               &_CancelOpenOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CancelOpenOrderResponse& a, CancelOpenOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOpenOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOpenOrderResponse* New() const final {
    return CreateMaybeMessage<CancelOpenOrderResponse>(nullptr);
  }

  CancelOpenOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOpenOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOpenOrderResponse& from);
  void MergeFrom(const CancelOpenOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOpenOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CancelOpenOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .io.stakenet.orderbook.protos.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::io::stakenet::orderbook::protos::Order& order() const;
  ::io::stakenet::orderbook::protos::Order* release_order();
  ::io::stakenet::orderbook::protos::Order* mutable_order();
  void set_allocated_order(::io::stakenet::orderbook::protos::Order* order);
  private:
  const ::io::stakenet::orderbook::protos::Order& _internal_order() const;
  ::io::stakenet::orderbook::protos::Order* _internal_mutable_order();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CancelOpenOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::Order* order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class SendOrderMessageCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.SendOrderMessageCommand) */ {
 public:
  SendOrderMessageCommand();
  virtual ~SendOrderMessageCommand();

  SendOrderMessageCommand(const SendOrderMessageCommand& from);
  SendOrderMessageCommand(SendOrderMessageCommand&& from) noexcept
    : SendOrderMessageCommand() {
    *this = ::std::move(from);
  }

  inline SendOrderMessageCommand& operator=(const SendOrderMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrderMessageCommand& operator=(SendOrderMessageCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrderMessageCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOrderMessageCommand* internal_default_instance() {
    return reinterpret_cast<const SendOrderMessageCommand*>(
               &_SendOrderMessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SendOrderMessageCommand& a, SendOrderMessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrderMessageCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrderMessageCommand* New() const final {
    return CreateMaybeMessage<SendOrderMessageCommand>(nullptr);
  }

  SendOrderMessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrderMessageCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrderMessageCommand& from);
  void MergeFrom(const SendOrderMessageCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrderMessageCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.SendOrderMessageCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // bytes message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const void* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.SendOrderMessageCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class SendOrderMessageResponse_OrderMessageSent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent) */ {
 public:
  SendOrderMessageResponse_OrderMessageSent();
  virtual ~SendOrderMessageResponse_OrderMessageSent();

  SendOrderMessageResponse_OrderMessageSent(const SendOrderMessageResponse_OrderMessageSent& from);
  SendOrderMessageResponse_OrderMessageSent(SendOrderMessageResponse_OrderMessageSent&& from) noexcept
    : SendOrderMessageResponse_OrderMessageSent() {
    *this = ::std::move(from);
  }

  inline SendOrderMessageResponse_OrderMessageSent& operator=(const SendOrderMessageResponse_OrderMessageSent& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrderMessageResponse_OrderMessageSent& operator=(SendOrderMessageResponse_OrderMessageSent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrderMessageResponse_OrderMessageSent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOrderMessageResponse_OrderMessageSent* internal_default_instance() {
    return reinterpret_cast<const SendOrderMessageResponse_OrderMessageSent*>(
               &_SendOrderMessageResponse_OrderMessageSent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SendOrderMessageResponse_OrderMessageSent& a, SendOrderMessageResponse_OrderMessageSent& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrderMessageResponse_OrderMessageSent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrderMessageResponse_OrderMessageSent* New() const final {
    return CreateMaybeMessage<SendOrderMessageResponse_OrderMessageSent>(nullptr);
  }

  SendOrderMessageResponse_OrderMessageSent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrderMessageResponse_OrderMessageSent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrderMessageResponse_OrderMessageSent& from);
  void MergeFrom(const SendOrderMessageResponse_OrderMessageSent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrderMessageResponse_OrderMessageSent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class SendOrderMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.SendOrderMessageResponse) */ {
 public:
  SendOrderMessageResponse();
  virtual ~SendOrderMessageResponse();

  SendOrderMessageResponse(const SendOrderMessageResponse& from);
  SendOrderMessageResponse(SendOrderMessageResponse&& from) noexcept
    : SendOrderMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendOrderMessageResponse& operator=(const SendOrderMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOrderMessageResponse& operator=(SendOrderMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendOrderMessageResponse& default_instance();

  enum ValueCase {
    kOrderMessageSent = 1,
    kMatchedOrderNotFound = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendOrderMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendOrderMessageResponse*>(
               &_SendOrderMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SendOrderMessageResponse& a, SendOrderMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOrderMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOrderMessageResponse* New() const final {
    return CreateMaybeMessage<SendOrderMessageResponse>(nullptr);
  }

  SendOrderMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOrderMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOrderMessageResponse& from);
  void MergeFrom(const SendOrderMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOrderMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.SendOrderMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SendOrderMessageResponse_OrderMessageSent OrderMessageSent;

  // accessors -------------------------------------------------------

  enum : int {
    kOrderMessageSentFieldNumber = 1,
    kMatchedOrderNotFoundFieldNumber = 2,
  };
  // .io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent orderMessageSent = 1;
  bool has_ordermessagesent() const;
  private:
  bool _internal_has_ordermessagesent() const;
  public:
  void clear_ordermessagesent();
  const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent& ordermessagesent() const;
  ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* release_ordermessagesent();
  ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* mutable_ordermessagesent();
  void set_allocated_ordermessagesent(::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* ordermessagesent);
  private:
  const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent& _internal_ordermessagesent() const;
  ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* _internal_mutable_ordermessagesent();
  public:

  // .io.stakenet.orderbook.protos.MatchedOrderNotFound MatchedOrderNotFound = 2;
  bool has_matchedordernotfound() const;
  private:
  bool _internal_has_matchedordernotfound() const;
  public:
  void clear_matchedordernotfound();
  const ::io::stakenet::orderbook::protos::MatchedOrderNotFound& matchedordernotfound() const;
  ::io::stakenet::orderbook::protos::MatchedOrderNotFound* release_matchedordernotfound();
  ::io::stakenet::orderbook::protos::MatchedOrderNotFound* mutable_matchedordernotfound();
  void set_allocated_matchedordernotfound(::io::stakenet::orderbook::protos::MatchedOrderNotFound* matchedordernotfound);
  private:
  const ::io::stakenet::orderbook::protos::MatchedOrderNotFound& _internal_matchedordernotfound() const;
  ::io::stakenet::orderbook::protos::MatchedOrderNotFound* _internal_mutable_matchedordernotfound();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.SendOrderMessageResponse)
 private:
  class _Internal;
  void set_has_ordermessagesent();
  void set_has_matchedordernotfound();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* ordermessagesent_;
    ::io::stakenet::orderbook::protos::MatchedOrderNotFound* matchedordernotfound_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CancelMatchedOrderCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CancelMatchedOrderCommand) */ {
 public:
  CancelMatchedOrderCommand();
  virtual ~CancelMatchedOrderCommand();

  CancelMatchedOrderCommand(const CancelMatchedOrderCommand& from);
  CancelMatchedOrderCommand(CancelMatchedOrderCommand&& from) noexcept
    : CancelMatchedOrderCommand() {
    *this = ::std::move(from);
  }

  inline CancelMatchedOrderCommand& operator=(const CancelMatchedOrderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMatchedOrderCommand& operator=(CancelMatchedOrderCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMatchedOrderCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMatchedOrderCommand* internal_default_instance() {
    return reinterpret_cast<const CancelMatchedOrderCommand*>(
               &_CancelMatchedOrderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CancelMatchedOrderCommand& a, CancelMatchedOrderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMatchedOrderCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMatchedOrderCommand* New() const final {
    return CreateMaybeMessage<CancelMatchedOrderCommand>(nullptr);
  }

  CancelMatchedOrderCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMatchedOrderCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMatchedOrderCommand& from);
  void MergeFrom(const CancelMatchedOrderCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMatchedOrderCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CancelMatchedOrderCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CancelMatchedOrderCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CancelMatchedOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CancelMatchedOrderResponse) */ {
 public:
  CancelMatchedOrderResponse();
  virtual ~CancelMatchedOrderResponse();

  CancelMatchedOrderResponse(const CancelMatchedOrderResponse& from);
  CancelMatchedOrderResponse(CancelMatchedOrderResponse&& from) noexcept
    : CancelMatchedOrderResponse() {
    *this = ::std::move(from);
  }

  inline CancelMatchedOrderResponse& operator=(const CancelMatchedOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelMatchedOrderResponse& operator=(CancelMatchedOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelMatchedOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelMatchedOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CancelMatchedOrderResponse*>(
               &_CancelMatchedOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CancelMatchedOrderResponse& a, CancelMatchedOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelMatchedOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelMatchedOrderResponse* New() const final {
    return CreateMaybeMessage<CancelMatchedOrderResponse>(nullptr);
  }

  CancelMatchedOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelMatchedOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelMatchedOrderResponse& from);
  void MergeFrom(const CancelMatchedOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelMatchedOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CancelMatchedOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradeFieldNumber = 1,
  };
  // .io.stakenet.orderbook.protos.Trade trade = 1;
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;
  public:
  void clear_trade();
  const ::io::stakenet::orderbook::protos::Trade& trade() const;
  ::io::stakenet::orderbook::protos::Trade* release_trade();
  ::io::stakenet::orderbook::protos::Trade* mutable_trade();
  void set_allocated_trade(::io::stakenet::orderbook::protos::Trade* trade);
  private:
  const ::io::stakenet::orderbook::protos::Trade& _internal_trade() const;
  ::io::stakenet::orderbook::protos::Trade* _internal_mutable_trade();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CancelMatchedOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::Trade* trade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class MatchedOrderNotFound :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.MatchedOrderNotFound) */ {
 public:
  MatchedOrderNotFound();
  virtual ~MatchedOrderNotFound();

  MatchedOrderNotFound(const MatchedOrderNotFound& from);
  MatchedOrderNotFound(MatchedOrderNotFound&& from) noexcept
    : MatchedOrderNotFound() {
    *this = ::std::move(from);
  }

  inline MatchedOrderNotFound& operator=(const MatchedOrderNotFound& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchedOrderNotFound& operator=(MatchedOrderNotFound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MatchedOrderNotFound& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchedOrderNotFound* internal_default_instance() {
    return reinterpret_cast<const MatchedOrderNotFound*>(
               &_MatchedOrderNotFound_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MatchedOrderNotFound& a, MatchedOrderNotFound& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchedOrderNotFound* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchedOrderNotFound* New() const final {
    return CreateMaybeMessage<MatchedOrderNotFound>(nullptr);
  }

  MatchedOrderNotFound* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchedOrderNotFound>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MatchedOrderNotFound& from);
  void MergeFrom(const MatchedOrderNotFound& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchedOrderNotFound* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.MatchedOrderNotFound";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.MatchedOrderNotFound)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CleanTradingPairOrdersCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand) */ {
 public:
  CleanTradingPairOrdersCommand();
  virtual ~CleanTradingPairOrdersCommand();

  CleanTradingPairOrdersCommand(const CleanTradingPairOrdersCommand& from);
  CleanTradingPairOrdersCommand(CleanTradingPairOrdersCommand&& from) noexcept
    : CleanTradingPairOrdersCommand() {
    *this = ::std::move(from);
  }

  inline CleanTradingPairOrdersCommand& operator=(const CleanTradingPairOrdersCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanTradingPairOrdersCommand& operator=(CleanTradingPairOrdersCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CleanTradingPairOrdersCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanTradingPairOrdersCommand* internal_default_instance() {
    return reinterpret_cast<const CleanTradingPairOrdersCommand*>(
               &_CleanTradingPairOrdersCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CleanTradingPairOrdersCommand& a, CleanTradingPairOrdersCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanTradingPairOrdersCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CleanTradingPairOrdersCommand* New() const final {
    return CreateMaybeMessage<CleanTradingPairOrdersCommand>(nullptr);
  }

  CleanTradingPairOrdersCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CleanTradingPairOrdersCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CleanTradingPairOrdersCommand& from);
  void MergeFrom(const CleanTradingPairOrdersCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanTradingPairOrdersCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradingPairFieldNumber = 1,
  };
  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CleanTradingPairOrdersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse) */ {
 public:
  CleanTradingPairOrdersResponse();
  virtual ~CleanTradingPairOrdersResponse();

  CleanTradingPairOrdersResponse(const CleanTradingPairOrdersResponse& from);
  CleanTradingPairOrdersResponse(CleanTradingPairOrdersResponse&& from) noexcept
    : CleanTradingPairOrdersResponse() {
    *this = ::std::move(from);
  }

  inline CleanTradingPairOrdersResponse& operator=(const CleanTradingPairOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CleanTradingPairOrdersResponse& operator=(CleanTradingPairOrdersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CleanTradingPairOrdersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CleanTradingPairOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const CleanTradingPairOrdersResponse*>(
               &_CleanTradingPairOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CleanTradingPairOrdersResponse& a, CleanTradingPairOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CleanTradingPairOrdersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CleanTradingPairOrdersResponse* New() const final {
    return CreateMaybeMessage<CleanTradingPairOrdersResponse>(nullptr);
  }

  CleanTradingPairOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CleanTradingPairOrdersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CleanTradingPairOrdersResponse& from);
  void MergeFrom(const CleanTradingPairOrdersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CleanTradingPairOrdersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenOrdersRemovedFieldNumber = 2,
    kMatchedOrdersRemovedFieldNumber = 3,
    kTradingPairFieldNumber = 1,
  };
  // repeated string openOrdersRemoved = 2;
  int openordersremoved_size() const;
  private:
  int _internal_openordersremoved_size() const;
  public:
  void clear_openordersremoved();
  const std::string& openordersremoved(int index) const;
  std::string* mutable_openordersremoved(int index);
  void set_openordersremoved(int index, const std::string& value);
  void set_openordersremoved(int index, std::string&& value);
  void set_openordersremoved(int index, const char* value);
  void set_openordersremoved(int index, const char* value, size_t size);
  std::string* add_openordersremoved();
  void add_openordersremoved(const std::string& value);
  void add_openordersremoved(std::string&& value);
  void add_openordersremoved(const char* value);
  void add_openordersremoved(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& openordersremoved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_openordersremoved();
  private:
  const std::string& _internal_openordersremoved(int index) const;
  std::string* _internal_add_openordersremoved();
  public:

  // repeated string matchedOrdersRemoved = 3;
  int matchedordersremoved_size() const;
  private:
  int _internal_matchedordersremoved_size() const;
  public:
  void clear_matchedordersremoved();
  const std::string& matchedordersremoved(int index) const;
  std::string* mutable_matchedordersremoved(int index);
  void set_matchedordersremoved(int index, const std::string& value);
  void set_matchedordersremoved(int index, std::string&& value);
  void set_matchedordersremoved(int index, const char* value);
  void set_matchedordersremoved(int index, const char* value, size_t size);
  std::string* add_matchedordersremoved();
  void add_matchedordersremoved(const std::string& value);
  void add_matchedordersremoved(std::string&& value);
  void add_matchedordersremoved(const char* value);
  void add_matchedordersremoved(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& matchedordersremoved() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_matchedordersremoved();
  private:
  const std::string& _internal_matchedordersremoved(int index) const;
  std::string* _internal_add_matchedordersremoved();
  public:

  // string tradingPair = 1;
  void clear_tradingpair();
  const std::string& tradingpair() const;
  void set_tradingpair(const std::string& value);
  void set_tradingpair(std::string&& value);
  void set_tradingpair(const char* value);
  void set_tradingpair(const char* value, size_t size);
  std::string* mutable_tradingpair();
  std::string* release_tradingpair();
  void set_allocated_tradingpair(std::string* tradingpair);
  private:
  const std::string& _internal_tradingpair() const;
  void _internal_set_tradingpair(const std::string& value);
  std::string* _internal_mutable_tradingpair();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> openordersremoved_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> matchedordersremoved_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tradingpair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetLndPaymentInvoiceCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand) */ {
 public:
  GetLndPaymentInvoiceCommand();
  virtual ~GetLndPaymentInvoiceCommand();

  GetLndPaymentInvoiceCommand(const GetLndPaymentInvoiceCommand& from);
  GetLndPaymentInvoiceCommand(GetLndPaymentInvoiceCommand&& from) noexcept
    : GetLndPaymentInvoiceCommand() {
    *this = ::std::move(from);
  }

  inline GetLndPaymentInvoiceCommand& operator=(const GetLndPaymentInvoiceCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLndPaymentInvoiceCommand& operator=(GetLndPaymentInvoiceCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLndPaymentInvoiceCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLndPaymentInvoiceCommand* internal_default_instance() {
    return reinterpret_cast<const GetLndPaymentInvoiceCommand*>(
               &_GetLndPaymentInvoiceCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetLndPaymentInvoiceCommand& a, GetLndPaymentInvoiceCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLndPaymentInvoiceCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLndPaymentInvoiceCommand* New() const final {
    return CreateMaybeMessage<GetLndPaymentInvoiceCommand>(nullptr);
  }

  GetLndPaymentInvoiceCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLndPaymentInvoiceCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLndPaymentInvoiceCommand& from);
  void MergeFrom(const GetLndPaymentInvoiceCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLndPaymentInvoiceCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::io::stakenet::orderbook::protos::BigInteger& amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_amount();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_amount();
  void set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::io::stakenet::orderbook::protos::BigInteger* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetLndPaymentInvoiceResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse) */ {
 public:
  GetLndPaymentInvoiceResponse();
  virtual ~GetLndPaymentInvoiceResponse();

  GetLndPaymentInvoiceResponse(const GetLndPaymentInvoiceResponse& from);
  GetLndPaymentInvoiceResponse(GetLndPaymentInvoiceResponse&& from) noexcept
    : GetLndPaymentInvoiceResponse() {
    *this = ::std::move(from);
  }

  inline GetLndPaymentInvoiceResponse& operator=(const GetLndPaymentInvoiceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLndPaymentInvoiceResponse& operator=(GetLndPaymentInvoiceResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLndPaymentInvoiceResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLndPaymentInvoiceResponse* internal_default_instance() {
    return reinterpret_cast<const GetLndPaymentInvoiceResponse*>(
               &_GetLndPaymentInvoiceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetLndPaymentInvoiceResponse& a, GetLndPaymentInvoiceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLndPaymentInvoiceResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLndPaymentInvoiceResponse* New() const final {
    return CreateMaybeMessage<GetLndPaymentInvoiceResponse>(nullptr);
  }

  GetLndPaymentInvoiceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLndPaymentInvoiceResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLndPaymentInvoiceResponse& from);
  void MergeFrom(const GetLndPaymentInvoiceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLndPaymentInvoiceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPaymentRequestFieldNumber = 2,
    kNoFeeRequiredFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string paymentRequest = 2;
  void clear_paymentrequest();
  const std::string& paymentrequest() const;
  void set_paymentrequest(const std::string& value);
  void set_paymentrequest(std::string&& value);
  void set_paymentrequest(const char* value);
  void set_paymentrequest(const char* value, size_t size);
  std::string* mutable_paymentrequest();
  std::string* release_paymentrequest();
  void set_allocated_paymentrequest(std::string* paymentrequest);
  private:
  const std::string& _internal_paymentrequest() const;
  void _internal_set_paymentrequest(const std::string& value);
  std::string* _internal_mutable_paymentrequest();
  public:

  // bool noFeeRequired = 3;
  void clear_nofeerequired();
  bool nofeerequired() const;
  void set_nofeerequired(bool value);
  private:
  bool _internal_nofeerequired() const;
  void _internal_set_nofeerequired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymentrequest_;
  bool nofeerequired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToRentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand) */ {
 public:
  GenerateInvoiceToRentChannelCommand();
  virtual ~GenerateInvoiceToRentChannelCommand();

  GenerateInvoiceToRentChannelCommand(const GenerateInvoiceToRentChannelCommand& from);
  GenerateInvoiceToRentChannelCommand(GenerateInvoiceToRentChannelCommand&& from) noexcept
    : GenerateInvoiceToRentChannelCommand() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToRentChannelCommand& operator=(const GenerateInvoiceToRentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToRentChannelCommand& operator=(GenerateInvoiceToRentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToRentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToRentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToRentChannelCommand*>(
               &_GenerateInvoiceToRentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GenerateInvoiceToRentChannelCommand& a, GenerateInvoiceToRentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToRentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToRentChannelCommand* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelCommand>(nullptr);
  }

  GenerateInvoiceToRentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToRentChannelCommand& from);
  void MergeFrom(const GenerateInvoiceToRentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToRentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::io::stakenet::orderbook::protos::BigInteger& capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_capacity();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_capacity();
  void set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::io::stakenet::orderbook::protos::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToRentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse) */ {
 public:
  GenerateInvoiceToRentChannelResponse();
  virtual ~GenerateInvoiceToRentChannelResponse();

  GenerateInvoiceToRentChannelResponse(const GenerateInvoiceToRentChannelResponse& from);
  GenerateInvoiceToRentChannelResponse(GenerateInvoiceToRentChannelResponse&& from) noexcept
    : GenerateInvoiceToRentChannelResponse() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToRentChannelResponse& operator=(const GenerateInvoiceToRentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToRentChannelResponse& operator=(GenerateInvoiceToRentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToRentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToRentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToRentChannelResponse*>(
               &_GenerateInvoiceToRentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GenerateInvoiceToRentChannelResponse& a, GenerateInvoiceToRentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToRentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToRentChannelResponse* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelResponse>(nullptr);
  }

  GenerateInvoiceToRentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToRentChannelResponse& from);
  void MergeFrom(const GenerateInvoiceToRentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToRentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kPaymentRequestFieldNumber = 5,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // string paymentRequest = 5;
  void clear_paymentrequest();
  const std::string& paymentrequest() const;
  void set_paymentrequest(const std::string& value);
  void set_paymentrequest(std::string&& value);
  void set_paymentrequest(const char* value);
  void set_paymentrequest(const char* value, size_t size);
  std::string* mutable_paymentrequest();
  std::string* release_paymentrequest();
  void set_allocated_paymentrequest(std::string* paymentrequest);
  private:
  const std::string& _internal_paymentrequest() const;
  void _internal_set_paymentrequest(const std::string& value);
  std::string* _internal_mutable_paymentrequest();
  public:

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::io::stakenet::orderbook::protos::BigInteger& capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_capacity();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_capacity();
  void set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymentrequest_;
  ::io::stakenet::orderbook::protos::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GeneratePaymentHashToRentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand) */ {
 public:
  GeneratePaymentHashToRentChannelCommand();
  virtual ~GeneratePaymentHashToRentChannelCommand();

  GeneratePaymentHashToRentChannelCommand(const GeneratePaymentHashToRentChannelCommand& from);
  GeneratePaymentHashToRentChannelCommand(GeneratePaymentHashToRentChannelCommand&& from) noexcept
    : GeneratePaymentHashToRentChannelCommand() {
    *this = ::std::move(from);
  }

  inline GeneratePaymentHashToRentChannelCommand& operator=(const GeneratePaymentHashToRentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePaymentHashToRentChannelCommand& operator=(GeneratePaymentHashToRentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratePaymentHashToRentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratePaymentHashToRentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GeneratePaymentHashToRentChannelCommand*>(
               &_GeneratePaymentHashToRentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GeneratePaymentHashToRentChannelCommand& a, GeneratePaymentHashToRentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePaymentHashToRentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratePaymentHashToRentChannelCommand* New() const final {
    return CreateMaybeMessage<GeneratePaymentHashToRentChannelCommand>(nullptr);
  }

  GeneratePaymentHashToRentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratePaymentHashToRentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratePaymentHashToRentChannelCommand& from);
  void MergeFrom(const GeneratePaymentHashToRentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePaymentHashToRentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::io::stakenet::orderbook::protos::BigInteger& capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_capacity();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_capacity();
  void set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::io::stakenet::orderbook::protos::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GeneratePaymentHashToRentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse) */ {
 public:
  GeneratePaymentHashToRentChannelResponse();
  virtual ~GeneratePaymentHashToRentChannelResponse();

  GeneratePaymentHashToRentChannelResponse(const GeneratePaymentHashToRentChannelResponse& from);
  GeneratePaymentHashToRentChannelResponse(GeneratePaymentHashToRentChannelResponse&& from) noexcept
    : GeneratePaymentHashToRentChannelResponse() {
    *this = ::std::move(from);
  }

  inline GeneratePaymentHashToRentChannelResponse& operator=(const GeneratePaymentHashToRentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePaymentHashToRentChannelResponse& operator=(GeneratePaymentHashToRentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratePaymentHashToRentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratePaymentHashToRentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GeneratePaymentHashToRentChannelResponse*>(
               &_GeneratePaymentHashToRentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GeneratePaymentHashToRentChannelResponse& a, GeneratePaymentHashToRentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePaymentHashToRentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratePaymentHashToRentChannelResponse* New() const final {
    return CreateMaybeMessage<GeneratePaymentHashToRentChannelResponse>(nullptr);
  }

  GeneratePaymentHashToRentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratePaymentHashToRentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratePaymentHashToRentChannelResponse& from);
  void MergeFrom(const GeneratePaymentHashToRentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePaymentHashToRentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kPaymentHashFieldNumber = 5,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // bytes paymentHash = 5;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::io::stakenet::orderbook::protos::BigInteger& capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_capacity();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_capacity();
  void set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::io::stakenet::orderbook::protos::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RentChannelCommand) */ {
 public:
  RentChannelCommand();
  virtual ~RentChannelCommand();

  RentChannelCommand(const RentChannelCommand& from);
  RentChannelCommand(RentChannelCommand&& from) noexcept
    : RentChannelCommand() {
    *this = ::std::move(from);
  }

  inline RentChannelCommand& operator=(const RentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RentChannelCommand& operator=(RentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const RentChannelCommand*>(
               &_RentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(RentChannelCommand& a, RentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RentChannelCommand* New() const final {
    return CreateMaybeMessage<RentChannelCommand>(nullptr);
  }

  RentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RentChannelCommand& from);
  void MergeFrom(const RentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
  };
  // bytes paymentHash = 1;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RentChannelResponse) */ {
 public:
  RentChannelResponse();
  virtual ~RentChannelResponse();

  RentChannelResponse(const RentChannelResponse& from);
  RentChannelResponse(RentChannelResponse&& from) noexcept
    : RentChannelResponse() {
    *this = ::std::move(from);
  }

  inline RentChannelResponse& operator=(const RentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RentChannelResponse& operator=(RentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const RentChannelResponse*>(
               &_RentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(RentChannelResponse& a, RentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RentChannelResponse* New() const final {
    return CreateMaybeMessage<RentChannelResponse>(nullptr);
  }

  RentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RentChannelResponse& from);
  void MergeFrom(const RentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kNodePublicKeyFieldNumber = 2,
    kChannelIdFieldNumber = 3,
    kFundingTransactionFieldNumber = 4,
    kFundingTxidStrFieldNumber = 6,
    kChannelFieldNumber = 7,
    kOutputIndexFieldNumber = 5,
  };
  // bytes paymentHash = 1;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // bytes nodePublicKey = 2;
  void clear_nodepublickey();
  const std::string& nodepublickey() const;
  void set_nodepublickey(const std::string& value);
  void set_nodepublickey(std::string&& value);
  void set_nodepublickey(const char* value);
  void set_nodepublickey(const void* value, size_t size);
  std::string* mutable_nodepublickey();
  std::string* release_nodepublickey();
  void set_allocated_nodepublickey(std::string* nodepublickey);
  private:
  const std::string& _internal_nodepublickey() const;
  void _internal_set_nodepublickey(const std::string& value);
  std::string* _internal_mutable_nodepublickey();
  public:

  // string channelId = 3;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // bytes fundingTransaction = 4;
  void clear_fundingtransaction();
  const std::string& fundingtransaction() const;
  void set_fundingtransaction(const std::string& value);
  void set_fundingtransaction(std::string&& value);
  void set_fundingtransaction(const char* value);
  void set_fundingtransaction(const void* value, size_t size);
  std::string* mutable_fundingtransaction();
  std::string* release_fundingtransaction();
  void set_allocated_fundingtransaction(std::string* fundingtransaction);
  private:
  const std::string& _internal_fundingtransaction() const;
  void _internal_set_fundingtransaction(const std::string& value);
  std::string* _internal_mutable_fundingtransaction();
  public:

  // string fundingTxidStr = 6;
  void clear_fundingtxidstr();
  const std::string& fundingtxidstr() const;
  void set_fundingtxidstr(const std::string& value);
  void set_fundingtxidstr(std::string&& value);
  void set_fundingtxidstr(const char* value);
  void set_fundingtxidstr(const char* value, size_t size);
  std::string* mutable_fundingtxidstr();
  std::string* release_fundingtxidstr();
  void set_allocated_fundingtxidstr(std::string* fundingtxidstr);
  private:
  const std::string& _internal_fundingtxidstr() const;
  void _internal_set_fundingtxidstr(const std::string& value);
  std::string* _internal_mutable_fundingtxidstr();
  public:

  // .io.stakenet.orderbook.protos.RentedChannel channel = 7;
  bool has_channel() const;
  private:
  bool _internal_has_channel() const;
  public:
  void clear_channel();
  const ::io::stakenet::orderbook::protos::RentedChannel& channel() const;
  ::io::stakenet::orderbook::protos::RentedChannel* release_channel();
  ::io::stakenet::orderbook::protos::RentedChannel* mutable_channel();
  void set_allocated_channel(::io::stakenet::orderbook::protos::RentedChannel* channel);
  private:
  const ::io::stakenet::orderbook::protos::RentedChannel& _internal_channel() const;
  ::io::stakenet::orderbook::protos::RentedChannel* _internal_mutable_channel();
  public:

  // int32 outputIndex = 5;
  void clear_outputindex();
  ::PROTOBUF_NAMESPACE_ID::int32 outputindex() const;
  void set_outputindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_outputindex() const;
  void _internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepublickey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundingtransaction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundingtxidstr_;
  ::io::stakenet::orderbook::protos::RentedChannel* channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 outputindex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatusCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetChannelStatusCommand) */ {
 public:
  GetChannelStatusCommand();
  virtual ~GetChannelStatusCommand();

  GetChannelStatusCommand(const GetChannelStatusCommand& from);
  GetChannelStatusCommand(GetChannelStatusCommand&& from) noexcept
    : GetChannelStatusCommand() {
    *this = ::std::move(from);
  }

  inline GetChannelStatusCommand& operator=(const GetChannelStatusCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatusCommand& operator=(GetChannelStatusCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelStatusCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelStatusCommand* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatusCommand*>(
               &_GetChannelStatusCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetChannelStatusCommand& a, GetChannelStatusCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatusCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatusCommand* New() const final {
    return CreateMaybeMessage<GetChannelStatusCommand>(nullptr);
  }

  GetChannelStatusCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatusCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelStatusCommand& from);
  void MergeFrom(const GetChannelStatusCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatusCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetChannelStatusCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetChannelStatusCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetChannelStatusResponse) */ {
 public:
  GetChannelStatusResponse();
  virtual ~GetChannelStatusResponse();

  GetChannelStatusResponse(const GetChannelStatusResponse& from);
  GetChannelStatusResponse(GetChannelStatusResponse&& from) noexcept
    : GetChannelStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelStatusResponse& operator=(const GetChannelStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatusResponse& operator=(GetChannelStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelStatusResponse& default_instance();

  enum StatusCase {
    kLnd = 7,
    kConnext = 8,
    STATUS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatusResponse*>(
               &_GetChannelStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetChannelStatusResponse& a, GetChannelStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatusResponse* New() const final {
    return CreateMaybeMessage<GetChannelStatusResponse>(nullptr);
  }

  GetChannelStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelStatusResponse& from);
  void MergeFrom(const GetChannelStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetChannelStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kLndFieldNumber = 7,
    kConnextFieldNumber = 8,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // .io.stakenet.orderbook.protos.LndChannelStatus lnd = 7;
  bool has_lnd() const;
  private:
  bool _internal_has_lnd() const;
  public:
  void clear_lnd();
  const ::io::stakenet::orderbook::protos::LndChannelStatus& lnd() const;
  ::io::stakenet::orderbook::protos::LndChannelStatus* release_lnd();
  ::io::stakenet::orderbook::protos::LndChannelStatus* mutable_lnd();
  void set_allocated_lnd(::io::stakenet::orderbook::protos::LndChannelStatus* lnd);
  private:
  const ::io::stakenet::orderbook::protos::LndChannelStatus& _internal_lnd() const;
  ::io::stakenet::orderbook::protos::LndChannelStatus* _internal_mutable_lnd();
  public:

  // .io.stakenet.orderbook.protos.ConnextChannelStatus connext = 8;
  bool has_connext() const;
  private:
  bool _internal_has_connext() const;
  public:
  void clear_connext();
  const ::io::stakenet::orderbook::protos::ConnextChannelStatus& connext() const;
  ::io::stakenet::orderbook::protos::ConnextChannelStatus* release_connext();
  ::io::stakenet::orderbook::protos::ConnextChannelStatus* mutable_connext();
  void set_allocated_connext(::io::stakenet::orderbook::protos::ConnextChannelStatus* connext);
  private:
  const ::io::stakenet::orderbook::protos::ConnextChannelStatus& _internal_connext() const;
  ::io::stakenet::orderbook::protos::ConnextChannelStatus* _internal_mutable_connext();
  public:

  void clear_status();
  StatusCase status_case() const;
  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetChannelStatusResponse)
 private:
  class _Internal;
  void set_has_lnd();
  void set_has_connext();

  inline bool has_status() const;
  inline void clear_has_status();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  union StatusUnion {
    StatusUnion() {}
    ::io::stakenet::orderbook::protos::LndChannelStatus* lnd_;
    ::io::stakenet::orderbook::protos::ConnextChannelStatus* connext_;
  } status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class LndChannelStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.LndChannelStatus) */ {
 public:
  LndChannelStatus();
  virtual ~LndChannelStatus();

  LndChannelStatus(const LndChannelStatus& from);
  LndChannelStatus(LndChannelStatus&& from) noexcept
    : LndChannelStatus() {
    *this = ::std::move(from);
  }

  inline LndChannelStatus& operator=(const LndChannelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline LndChannelStatus& operator=(LndChannelStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LndChannelStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LndChannelStatus* internal_default_instance() {
    return reinterpret_cast<const LndChannelStatus*>(
               &_LndChannelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(LndChannelStatus& a, LndChannelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(LndChannelStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LndChannelStatus* New() const final {
    return CreateMaybeMessage<LndChannelStatus>(nullptr);
  }

  LndChannelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LndChannelStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LndChannelStatus& from);
  void MergeFrom(const LndChannelStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LndChannelStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.LndChannelStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kClosingTypeFieldNumber = 3,
    kClosedByFieldNumber = 4,
    kExpiresAtFieldNumber = 2,
    kClosedOnFieldNumber = 5,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string closingType = 3;
  void clear_closingtype();
  const std::string& closingtype() const;
  void set_closingtype(const std::string& value);
  void set_closingtype(std::string&& value);
  void set_closingtype(const char* value);
  void set_closingtype(const char* value, size_t size);
  std::string* mutable_closingtype();
  std::string* release_closingtype();
  void set_allocated_closingtype(std::string* closingtype);
  private:
  const std::string& _internal_closingtype() const;
  void _internal_set_closingtype(const std::string& value);
  std::string* _internal_mutable_closingtype();
  public:

  // string closedBy = 4;
  void clear_closedby();
  const std::string& closedby() const;
  void set_closedby(const std::string& value);
  void set_closedby(std::string&& value);
  void set_closedby(const char* value);
  void set_closedby(const char* value, size_t size);
  std::string* mutable_closedby();
  std::string* release_closedby();
  void set_allocated_closedby(std::string* closedby);
  private:
  const std::string& _internal_closedby() const;
  void _internal_set_closedby(const std::string& value);
  std::string* _internal_mutable_closedby();
  public:

  // int64 expiresAt = 2;
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 closedOn = 5;
  void clear_closedon();
  ::PROTOBUF_NAMESPACE_ID::int64 closedon() const;
  void set_closedon(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_closedon() const;
  void _internal_set_closedon(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.LndChannelStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closingtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closedby_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  ::PROTOBUF_NAMESPACE_ID::int64 closedon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class ConnextChannelStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.ConnextChannelStatus) */ {
 public:
  ConnextChannelStatus();
  virtual ~ConnextChannelStatus();

  ConnextChannelStatus(const ConnextChannelStatus& from);
  ConnextChannelStatus(ConnextChannelStatus&& from) noexcept
    : ConnextChannelStatus() {
    *this = ::std::move(from);
  }

  inline ConnextChannelStatus& operator=(const ConnextChannelStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnextChannelStatus& operator=(ConnextChannelStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnextChannelStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnextChannelStatus* internal_default_instance() {
    return reinterpret_cast<const ConnextChannelStatus*>(
               &_ConnextChannelStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ConnextChannelStatus& a, ConnextChannelStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnextChannelStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnextChannelStatus* New() const final {
    return CreateMaybeMessage<ConnextChannelStatus>(nullptr);
  }

  ConnextChannelStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnextChannelStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnextChannelStatus& from);
  void MergeFrom(const ConnextChannelStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnextChannelStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.ConnextChannelStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kExpiresAtFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int64 expiresAt = 2;
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.ConnextChannelStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToRentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand) */ {
 public:
  GetFeeToRentChannelCommand();
  virtual ~GetFeeToRentChannelCommand();

  GetFeeToRentChannelCommand(const GetFeeToRentChannelCommand& from);
  GetFeeToRentChannelCommand(GetFeeToRentChannelCommand&& from) noexcept
    : GetFeeToRentChannelCommand() {
    *this = ::std::move(from);
  }

  inline GetFeeToRentChannelCommand& operator=(const GetFeeToRentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToRentChannelCommand& operator=(GetFeeToRentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToRentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToRentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GetFeeToRentChannelCommand*>(
               &_GetFeeToRentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetFeeToRentChannelCommand& a, GetFeeToRentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToRentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToRentChannelCommand* New() const final {
    return CreateMaybeMessage<GetFeeToRentChannelCommand>(nullptr);
  }

  GetFeeToRentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToRentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToRentChannelCommand& from);
  void MergeFrom(const GetFeeToRentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToRentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetFeeToRentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::io::stakenet::orderbook::protos::BigInteger& capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_capacity();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_capacity();
  void set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_capacity() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::io::stakenet::orderbook::protos::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToRentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse) */ {
 public:
  GetFeeToRentChannelResponse();
  virtual ~GetFeeToRentChannelResponse();

  GetFeeToRentChannelResponse(const GetFeeToRentChannelResponse& from);
  GetFeeToRentChannelResponse(GetFeeToRentChannelResponse&& from) noexcept
    : GetFeeToRentChannelResponse() {
    *this = ::std::move(from);
  }

  inline GetFeeToRentChannelResponse& operator=(const GetFeeToRentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToRentChannelResponse& operator=(GetFeeToRentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToRentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToRentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeeToRentChannelResponse*>(
               &_GetFeeToRentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetFeeToRentChannelResponse& a, GetFeeToRentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToRentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToRentChannelResponse* New() const final {
    return CreateMaybeMessage<GetFeeToRentChannelResponse>(nullptr);
  }

  GetFeeToRentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToRentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToRentChannelResponse& from);
  void MergeFrom(const GetFeeToRentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToRentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetFeeToRentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 1,
    kRentingFeeFieldNumber = 2,
    kOnChainFeesFieldNumber = 3,
  };
  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::io::stakenet::orderbook::protos::BigInteger& fee() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_fee();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_fee();
  void set_allocated_fee(::io::stakenet::orderbook::protos::BigInteger* fee);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_fee() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_fee();
  public:

  // .io.stakenet.orderbook.protos.BigInteger rentingFee = 2;
  bool has_rentingfee() const;
  private:
  bool _internal_has_rentingfee() const;
  public:
  void clear_rentingfee();
  const ::io::stakenet::orderbook::protos::BigInteger& rentingfee() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_rentingfee();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_rentingfee();
  void set_allocated_rentingfee(::io::stakenet::orderbook::protos::BigInteger* rentingfee);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_rentingfee() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_rentingfee();
  public:

  // .io.stakenet.orderbook.protos.BigInteger onChainFees = 3;
  bool has_onchainfees() const;
  private:
  bool _internal_has_onchainfees() const;
  public:
  void clear_onchainfees();
  const ::io::stakenet::orderbook::protos::BigInteger& onchainfees() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_onchainfees();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_onchainfees();
  void set_allocated_onchainfees(::io::stakenet::orderbook::protos::BigInteger* onchainfees);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_onchainfees() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_onchainfees();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::BigInteger* fee_;
  ::io::stakenet::orderbook::protos::BigInteger* rentingfee_;
  ::io::stakenet::orderbook::protos::BigInteger* onchainfees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RefundFeeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RefundFeeCommand) */ {
 public:
  RefundFeeCommand();
  virtual ~RefundFeeCommand();

  RefundFeeCommand(const RefundFeeCommand& from);
  RefundFeeCommand(RefundFeeCommand&& from) noexcept
    : RefundFeeCommand() {
    *this = ::std::move(from);
  }

  inline RefundFeeCommand& operator=(const RefundFeeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefundFeeCommand& operator=(RefundFeeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefundFeeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefundFeeCommand* internal_default_instance() {
    return reinterpret_cast<const RefundFeeCommand*>(
               &_RefundFeeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RefundFeeCommand& a, RefundFeeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RefundFeeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefundFeeCommand* New() const final {
    return CreateMaybeMessage<RefundFeeCommand>(nullptr);
  }

  RefundFeeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefundFeeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefundFeeCommand& from);
  void MergeFrom(const RefundFeeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefundFeeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RefundFeeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefundedFeesFieldNumber = 5,
    kCurrencyFieldNumber = 2,
    kRefundedPaymentHashFieldNumber = 4,
  };
  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 5;
  int refundedfees_size() const;
  private:
  int _internal_refundedfees_size() const;
  public:
  void clear_refundedfees();
  ::io::stakenet::orderbook::protos::RefundablePayment* mutable_refundedfees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
      mutable_refundedfees();
  private:
  const ::io::stakenet::orderbook::protos::RefundablePayment& _internal_refundedfees(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* _internal_add_refundedfees();
  public:
  const ::io::stakenet::orderbook::protos::RefundablePayment& refundedfees(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* add_refundedfees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
      refundedfees() const;

  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // bytes refundedPaymentHash = 4;
  void clear_refundedpaymenthash();
  const std::string& refundedpaymenthash() const;
  void set_refundedpaymenthash(const std::string& value);
  void set_refundedpaymenthash(std::string&& value);
  void set_refundedpaymenthash(const char* value);
  void set_refundedpaymenthash(const void* value, size_t size);
  std::string* mutable_refundedpaymenthash();
  std::string* release_refundedpaymenthash();
  void set_allocated_refundedpaymenthash(std::string* refundedpaymenthash);
  private:
  const std::string& _internal_refundedpaymenthash() const;
  void _internal_set_refundedpaymenthash(const std::string& value);
  std::string* _internal_mutable_refundedpaymenthash();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RefundFeeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment > refundedfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refundedpaymenthash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RefundFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RefundFeeResponse) */ {
 public:
  RefundFeeResponse();
  virtual ~RefundFeeResponse();

  RefundFeeResponse(const RefundFeeResponse& from);
  RefundFeeResponse(RefundFeeResponse&& from) noexcept
    : RefundFeeResponse() {
    *this = ::std::move(from);
  }

  inline RefundFeeResponse& operator=(const RefundFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefundFeeResponse& operator=(RefundFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefundFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefundFeeResponse* internal_default_instance() {
    return reinterpret_cast<const RefundFeeResponse*>(
               &_RefundFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RefundFeeResponse& a, RefundFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RefundFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefundFeeResponse* New() const final {
    return CreateMaybeMessage<RefundFeeResponse>(nullptr);
  }

  RefundFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefundFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefundFeeResponse& from);
  void MergeFrom(const RefundFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefundFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RefundFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefundedFeesFieldNumber = 6,
    kCurrencyFieldNumber = 2,
    kAmountFieldNumber = 3,
    kRefundedOnFieldNumber = 5,
  };
  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 6;
  int refundedfees_size() const;
  private:
  int _internal_refundedfees_size() const;
  public:
  void clear_refundedfees();
  ::io::stakenet::orderbook::protos::RefundablePayment* mutable_refundedfees(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
      mutable_refundedfees();
  private:
  const ::io::stakenet::orderbook::protos::RefundablePayment& _internal_refundedfees(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* _internal_add_refundedfees();
  public:
  const ::io::stakenet::orderbook::protos::RefundablePayment& refundedfees(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* add_refundedfees();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
      refundedfees() const;

  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::io::stakenet::orderbook::protos::BigInteger& amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_amount();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_amount();
  void set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_amount();
  public:

  // int64 refundedOn = 5;
  void clear_refundedon();
  ::PROTOBUF_NAMESPACE_ID::int64 refundedon() const;
  void set_refundedon(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_refundedon() const;
  void _internal_set_refundedon(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RefundFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment > refundedfees_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::io::stakenet::orderbook::protos::BigInteger* amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 refundedon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetRefundableAmountCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetRefundableAmountCommand) */ {
 public:
  GetRefundableAmountCommand();
  virtual ~GetRefundableAmountCommand();

  GetRefundableAmountCommand(const GetRefundableAmountCommand& from);
  GetRefundableAmountCommand(GetRefundableAmountCommand&& from) noexcept
    : GetRefundableAmountCommand() {
    *this = ::std::move(from);
  }

  inline GetRefundableAmountCommand& operator=(const GetRefundableAmountCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRefundableAmountCommand& operator=(GetRefundableAmountCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRefundableAmountCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRefundableAmountCommand* internal_default_instance() {
    return reinterpret_cast<const GetRefundableAmountCommand*>(
               &_GetRefundableAmountCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetRefundableAmountCommand& a, GetRefundableAmountCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRefundableAmountCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRefundableAmountCommand* New() const final {
    return CreateMaybeMessage<GetRefundableAmountCommand>(nullptr);
  }

  GetRefundableAmountCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRefundableAmountCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRefundableAmountCommand& from);
  void MergeFrom(const GetRefundableAmountCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRefundableAmountCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetRefundableAmountCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefundablePaymentsFieldNumber = 3,
    kCurrencyFieldNumber = 1,
    kPaymentHashFieldNumber = 2,
  };
  // repeated .io.stakenet.orderbook.protos.RefundablePayment refundablePayments = 3;
  int refundablepayments_size() const;
  private:
  int _internal_refundablepayments_size() const;
  public:
  void clear_refundablepayments();
  ::io::stakenet::orderbook::protos::RefundablePayment* mutable_refundablepayments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
      mutable_refundablepayments();
  private:
  const ::io::stakenet::orderbook::protos::RefundablePayment& _internal_refundablepayments(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* _internal_add_refundablepayments();
  public:
  const ::io::stakenet::orderbook::protos::RefundablePayment& refundablepayments(int index) const;
  ::io::stakenet::orderbook::protos::RefundablePayment* add_refundablepayments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
      refundablepayments() const;

  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // bytes paymentHash = 2;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetRefundableAmountCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment > refundablepayments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetRefundableAmountResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetRefundableAmountResponse) */ {
 public:
  GetRefundableAmountResponse();
  virtual ~GetRefundableAmountResponse();

  GetRefundableAmountResponse(const GetRefundableAmountResponse& from);
  GetRefundableAmountResponse(GetRefundableAmountResponse&& from) noexcept
    : GetRefundableAmountResponse() {
    *this = ::std::move(from);
  }

  inline GetRefundableAmountResponse& operator=(const GetRefundableAmountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRefundableAmountResponse& operator=(GetRefundableAmountResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRefundableAmountResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRefundableAmountResponse* internal_default_instance() {
    return reinterpret_cast<const GetRefundableAmountResponse*>(
               &_GetRefundableAmountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(GetRefundableAmountResponse& a, GetRefundableAmountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRefundableAmountResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRefundableAmountResponse* New() const final {
    return CreateMaybeMessage<GetRefundableAmountResponse>(nullptr);
  }

  GetRefundableAmountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRefundableAmountResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRefundableAmountResponse& from);
  void MergeFrom(const GetRefundableAmountResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRefundableAmountResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetRefundableAmountResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kAmountFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .io.stakenet.orderbook.protos.BigInteger amount = 3;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::io::stakenet::orderbook::protos::BigInteger& amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_amount();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_amount();
  void set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetRefundableAmountResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::io::stakenet::orderbook::protos::BigInteger* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToExtendRentedChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand) */ {
 public:
  GenerateInvoiceToExtendRentedChannelCommand();
  virtual ~GenerateInvoiceToExtendRentedChannelCommand();

  GenerateInvoiceToExtendRentedChannelCommand(const GenerateInvoiceToExtendRentedChannelCommand& from);
  GenerateInvoiceToExtendRentedChannelCommand(GenerateInvoiceToExtendRentedChannelCommand&& from) noexcept
    : GenerateInvoiceToExtendRentedChannelCommand() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToExtendRentedChannelCommand& operator=(const GenerateInvoiceToExtendRentedChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToExtendRentedChannelCommand& operator=(GenerateInvoiceToExtendRentedChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToExtendRentedChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToExtendRentedChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToExtendRentedChannelCommand*>(
               &_GenerateInvoiceToExtendRentedChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(GenerateInvoiceToExtendRentedChannelCommand& a, GenerateInvoiceToExtendRentedChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToExtendRentedChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToExtendRentedChannelCommand* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToExtendRentedChannelCommand>(nullptr);
  }

  GenerateInvoiceToExtendRentedChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToExtendRentedChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToExtendRentedChannelCommand& from);
  void MergeFrom(const GenerateInvoiceToExtendRentedChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToExtendRentedChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kLifetimeSecondsFieldNumber = 3,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // int64 lifetimeSeconds = 3;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToExtendRentedChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse) */ {
 public:
  GenerateInvoiceToExtendRentedChannelResponse();
  virtual ~GenerateInvoiceToExtendRentedChannelResponse();

  GenerateInvoiceToExtendRentedChannelResponse(const GenerateInvoiceToExtendRentedChannelResponse& from);
  GenerateInvoiceToExtendRentedChannelResponse(GenerateInvoiceToExtendRentedChannelResponse&& from) noexcept
    : GenerateInvoiceToExtendRentedChannelResponse() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToExtendRentedChannelResponse& operator=(const GenerateInvoiceToExtendRentedChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToExtendRentedChannelResponse& operator=(GenerateInvoiceToExtendRentedChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToExtendRentedChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToExtendRentedChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToExtendRentedChannelResponse*>(
               &_GenerateInvoiceToExtendRentedChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(GenerateInvoiceToExtendRentedChannelResponse& a, GenerateInvoiceToExtendRentedChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToExtendRentedChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToExtendRentedChannelResponse* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToExtendRentedChannelResponse>(nullptr);
  }

  GenerateInvoiceToExtendRentedChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToExtendRentedChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToExtendRentedChannelResponse& from);
  void MergeFrom(const GenerateInvoiceToExtendRentedChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToExtendRentedChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kPaymentRequestFieldNumber = 4,
    kLifetimeSecondsFieldNumber = 3,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // string paymentRequest = 4;
  void clear_paymentrequest();
  const std::string& paymentrequest() const;
  void set_paymentrequest(const std::string& value);
  void set_paymentrequest(std::string&& value);
  void set_paymentrequest(const char* value);
  void set_paymentrequest(const char* value, size_t size);
  std::string* mutable_paymentrequest();
  std::string* release_paymentrequest();
  void set_allocated_paymentrequest(std::string* paymentrequest);
  private:
  const std::string& _internal_paymentrequest() const;
  void _internal_set_paymentrequest(const std::string& value);
  std::string* _internal_mutable_paymentrequest();
  public:

  // int64 lifetimeSeconds = 3;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymentrequest_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GeneratePaymentHashToExtendConnextRentedChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand) */ {
 public:
  GeneratePaymentHashToExtendConnextRentedChannelCommand();
  virtual ~GeneratePaymentHashToExtendConnextRentedChannelCommand();

  GeneratePaymentHashToExtendConnextRentedChannelCommand(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from);
  GeneratePaymentHashToExtendConnextRentedChannelCommand(GeneratePaymentHashToExtendConnextRentedChannelCommand&& from) noexcept
    : GeneratePaymentHashToExtendConnextRentedChannelCommand() {
    *this = ::std::move(from);
  }

  inline GeneratePaymentHashToExtendConnextRentedChannelCommand& operator=(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePaymentHashToExtendConnextRentedChannelCommand& operator=(GeneratePaymentHashToExtendConnextRentedChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratePaymentHashToExtendConnextRentedChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratePaymentHashToExtendConnextRentedChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GeneratePaymentHashToExtendConnextRentedChannelCommand*>(
               &_GeneratePaymentHashToExtendConnextRentedChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GeneratePaymentHashToExtendConnextRentedChannelCommand& a, GeneratePaymentHashToExtendConnextRentedChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePaymentHashToExtendConnextRentedChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratePaymentHashToExtendConnextRentedChannelCommand* New() const final {
    return CreateMaybeMessage<GeneratePaymentHashToExtendConnextRentedChannelCommand>(nullptr);
  }

  GeneratePaymentHashToExtendConnextRentedChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratePaymentHashToExtendConnextRentedChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from);
  void MergeFrom(const GeneratePaymentHashToExtendConnextRentedChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePaymentHashToExtendConnextRentedChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kLifetimeSecondsFieldNumber = 3,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // int64 lifetimeSeconds = 3;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GeneratePaymentHashToExtendConnextRentedChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse) */ {
 public:
  GeneratePaymentHashToExtendConnextRentedChannelResponse();
  virtual ~GeneratePaymentHashToExtendConnextRentedChannelResponse();

  GeneratePaymentHashToExtendConnextRentedChannelResponse(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from);
  GeneratePaymentHashToExtendConnextRentedChannelResponse(GeneratePaymentHashToExtendConnextRentedChannelResponse&& from) noexcept
    : GeneratePaymentHashToExtendConnextRentedChannelResponse() {
    *this = ::std::move(from);
  }

  inline GeneratePaymentHashToExtendConnextRentedChannelResponse& operator=(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeneratePaymentHashToExtendConnextRentedChannelResponse& operator=(GeneratePaymentHashToExtendConnextRentedChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeneratePaymentHashToExtendConnextRentedChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneratePaymentHashToExtendConnextRentedChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GeneratePaymentHashToExtendConnextRentedChannelResponse*>(
               &_GeneratePaymentHashToExtendConnextRentedChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GeneratePaymentHashToExtendConnextRentedChannelResponse& a, GeneratePaymentHashToExtendConnextRentedChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GeneratePaymentHashToExtendConnextRentedChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeneratePaymentHashToExtendConnextRentedChannelResponse* New() const final {
    return CreateMaybeMessage<GeneratePaymentHashToExtendConnextRentedChannelResponse>(nullptr);
  }

  GeneratePaymentHashToExtendConnextRentedChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeneratePaymentHashToExtendConnextRentedChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from);
  void MergeFrom(const GeneratePaymentHashToExtendConnextRentedChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneratePaymentHashToExtendConnextRentedChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kPaymentHashFieldNumber = 4,
    kLifetimeSecondsFieldNumber = 3,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // bytes paymentHash = 4;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // int64 lifetimeSeconds = 3;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToExtendRentedChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand) */ {
 public:
  GetFeeToExtendRentedChannelCommand();
  virtual ~GetFeeToExtendRentedChannelCommand();

  GetFeeToExtendRentedChannelCommand(const GetFeeToExtendRentedChannelCommand& from);
  GetFeeToExtendRentedChannelCommand(GetFeeToExtendRentedChannelCommand&& from) noexcept
    : GetFeeToExtendRentedChannelCommand() {
    *this = ::std::move(from);
  }

  inline GetFeeToExtendRentedChannelCommand& operator=(const GetFeeToExtendRentedChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToExtendRentedChannelCommand& operator=(GetFeeToExtendRentedChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToExtendRentedChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToExtendRentedChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GetFeeToExtendRentedChannelCommand*>(
               &_GetFeeToExtendRentedChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetFeeToExtendRentedChannelCommand& a, GetFeeToExtendRentedChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToExtendRentedChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToExtendRentedChannelCommand* New() const final {
    return CreateMaybeMessage<GetFeeToExtendRentedChannelCommand>(nullptr);
  }

  GetFeeToExtendRentedChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToExtendRentedChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToExtendRentedChannelCommand& from);
  void MergeFrom(const GetFeeToExtendRentedChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToExtendRentedChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kLifetimeSecondsFieldNumber = 3,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // int64 lifetimeSeconds = 3;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToExtendRentedChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse) */ {
 public:
  GetFeeToExtendRentedChannelResponse();
  virtual ~GetFeeToExtendRentedChannelResponse();

  GetFeeToExtendRentedChannelResponse(const GetFeeToExtendRentedChannelResponse& from);
  GetFeeToExtendRentedChannelResponse(GetFeeToExtendRentedChannelResponse&& from) noexcept
    : GetFeeToExtendRentedChannelResponse() {
    *this = ::std::move(from);
  }

  inline GetFeeToExtendRentedChannelResponse& operator=(const GetFeeToExtendRentedChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToExtendRentedChannelResponse& operator=(GetFeeToExtendRentedChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToExtendRentedChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToExtendRentedChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeeToExtendRentedChannelResponse*>(
               &_GetFeeToExtendRentedChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetFeeToExtendRentedChannelResponse& a, GetFeeToExtendRentedChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToExtendRentedChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToExtendRentedChannelResponse* New() const final {
    return CreateMaybeMessage<GetFeeToExtendRentedChannelResponse>(nullptr);
  }

  GetFeeToExtendRentedChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToExtendRentedChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToExtendRentedChannelResponse& from);
  void MergeFrom(const GetFeeToExtendRentedChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToExtendRentedChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 1,
  };
  // .io.stakenet.orderbook.protos.BigInteger fee = 1;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::io::stakenet::orderbook::protos::BigInteger& fee() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_fee();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_fee();
  void set_allocated_fee(::io::stakenet::orderbook::protos::BigInteger* fee);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_fee() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_fee();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::io::stakenet::orderbook::protos::BigInteger* fee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class ExtendRentedChannelTimeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand) */ {
 public:
  ExtendRentedChannelTimeCommand();
  virtual ~ExtendRentedChannelTimeCommand();

  ExtendRentedChannelTimeCommand(const ExtendRentedChannelTimeCommand& from);
  ExtendRentedChannelTimeCommand(ExtendRentedChannelTimeCommand&& from) noexcept
    : ExtendRentedChannelTimeCommand() {
    *this = ::std::move(from);
  }

  inline ExtendRentedChannelTimeCommand& operator=(const ExtendRentedChannelTimeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendRentedChannelTimeCommand& operator=(ExtendRentedChannelTimeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtendRentedChannelTimeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtendRentedChannelTimeCommand* internal_default_instance() {
    return reinterpret_cast<const ExtendRentedChannelTimeCommand*>(
               &_ExtendRentedChannelTimeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ExtendRentedChannelTimeCommand& a, ExtendRentedChannelTimeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendRentedChannelTimeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtendRentedChannelTimeCommand* New() const final {
    return CreateMaybeMessage<ExtendRentedChannelTimeCommand>(nullptr);
  }

  ExtendRentedChannelTimeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtendRentedChannelTimeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtendRentedChannelTimeCommand& from);
  void MergeFrom(const ExtendRentedChannelTimeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendRentedChannelTimeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
  };
  // bytes paymentHash = 1;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class ExtendRentedChannelTimeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse) */ {
 public:
  ExtendRentedChannelTimeResponse();
  virtual ~ExtendRentedChannelTimeResponse();

  ExtendRentedChannelTimeResponse(const ExtendRentedChannelTimeResponse& from);
  ExtendRentedChannelTimeResponse(ExtendRentedChannelTimeResponse&& from) noexcept
    : ExtendRentedChannelTimeResponse() {
    *this = ::std::move(from);
  }

  inline ExtendRentedChannelTimeResponse& operator=(const ExtendRentedChannelTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendRentedChannelTimeResponse& operator=(ExtendRentedChannelTimeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtendRentedChannelTimeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtendRentedChannelTimeResponse* internal_default_instance() {
    return reinterpret_cast<const ExtendRentedChannelTimeResponse*>(
               &_ExtendRentedChannelTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(ExtendRentedChannelTimeResponse& a, ExtendRentedChannelTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendRentedChannelTimeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtendRentedChannelTimeResponse* New() const final {
    return CreateMaybeMessage<ExtendRentedChannelTimeResponse>(nullptr);
  }

  ExtendRentedChannelTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtendRentedChannelTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtendRentedChannelTimeResponse& from);
  void MergeFrom(const ExtendRentedChannelTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendRentedChannelTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kChannelIdFieldNumber = 2,
    kExpiresAtFieldNumber = 3,
  };
  // bytes paymentHash = 1;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // string channelId = 2;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // int64 expiresAt = 3;
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterPublicKeyCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterPublicKeyCommand) */ {
 public:
  RegisterPublicKeyCommand();
  virtual ~RegisterPublicKeyCommand();

  RegisterPublicKeyCommand(const RegisterPublicKeyCommand& from);
  RegisterPublicKeyCommand(RegisterPublicKeyCommand&& from) noexcept
    : RegisterPublicKeyCommand() {
    *this = ::std::move(from);
  }

  inline RegisterPublicKeyCommand& operator=(const RegisterPublicKeyCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPublicKeyCommand& operator=(RegisterPublicKeyCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPublicKeyCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPublicKeyCommand* internal_default_instance() {
    return reinterpret_cast<const RegisterPublicKeyCommand*>(
               &_RegisterPublicKeyCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(RegisterPublicKeyCommand& a, RegisterPublicKeyCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPublicKeyCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPublicKeyCommand* New() const final {
    return CreateMaybeMessage<RegisterPublicKeyCommand>(nullptr);
  }

  RegisterPublicKeyCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPublicKeyCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPublicKeyCommand& from);
  void MergeFrom(const RegisterPublicKeyCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPublicKeyCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterPublicKeyCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // bytes publicKey = 2;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterPublicKeyCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterPublicKeyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterPublicKeyResponse) */ {
 public:
  RegisterPublicKeyResponse();
  virtual ~RegisterPublicKeyResponse();

  RegisterPublicKeyResponse(const RegisterPublicKeyResponse& from);
  RegisterPublicKeyResponse(RegisterPublicKeyResponse&& from) noexcept
    : RegisterPublicKeyResponse() {
    *this = ::std::move(from);
  }

  inline RegisterPublicKeyResponse& operator=(const RegisterPublicKeyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPublicKeyResponse& operator=(RegisterPublicKeyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPublicKeyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPublicKeyResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterPublicKeyResponse*>(
               &_RegisterPublicKeyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(RegisterPublicKeyResponse& a, RegisterPublicKeyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPublicKeyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPublicKeyResponse* New() const final {
    return CreateMaybeMessage<RegisterPublicKeyResponse>(nullptr);
  }

  RegisterPublicKeyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPublicKeyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPublicKeyResponse& from);
  void MergeFrom(const RegisterPublicKeyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPublicKeyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterPublicKeyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // bytes publicKey = 2;
  void clear_publickey();
  const std::string& publickey() const;
  void set_publickey(const std::string& value);
  void set_publickey(std::string&& value);
  void set_publickey(const char* value);
  void set_publickey(const void* value, size_t size);
  std::string* mutable_publickey();
  std::string* release_publickey();
  void set_allocated_publickey(std::string* publickey);
  private:
  const std::string& _internal_publickey() const;
  void _internal_set_publickey(const std::string& value);
  std::string* _internal_mutable_publickey();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterPublicKeyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publickey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterPublicIdentifierCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand) */ {
 public:
  RegisterPublicIdentifierCommand();
  virtual ~RegisterPublicIdentifierCommand();

  RegisterPublicIdentifierCommand(const RegisterPublicIdentifierCommand& from);
  RegisterPublicIdentifierCommand(RegisterPublicIdentifierCommand&& from) noexcept
    : RegisterPublicIdentifierCommand() {
    *this = ::std::move(from);
  }

  inline RegisterPublicIdentifierCommand& operator=(const RegisterPublicIdentifierCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPublicIdentifierCommand& operator=(RegisterPublicIdentifierCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPublicIdentifierCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPublicIdentifierCommand* internal_default_instance() {
    return reinterpret_cast<const RegisterPublicIdentifierCommand*>(
               &_RegisterPublicIdentifierCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(RegisterPublicIdentifierCommand& a, RegisterPublicIdentifierCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPublicIdentifierCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPublicIdentifierCommand* New() const final {
    return CreateMaybeMessage<RegisterPublicIdentifierCommand>(nullptr);
  }

  RegisterPublicIdentifierCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPublicIdentifierCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPublicIdentifierCommand& from);
  void MergeFrom(const RegisterPublicIdentifierCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPublicIdentifierCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPublicIdentifierFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string publicIdentifier = 2;
  void clear_publicidentifier();
  const std::string& publicidentifier() const;
  void set_publicidentifier(const std::string& value);
  void set_publicidentifier(std::string&& value);
  void set_publicidentifier(const char* value);
  void set_publicidentifier(const char* value, size_t size);
  std::string* mutable_publicidentifier();
  std::string* release_publicidentifier();
  void set_allocated_publicidentifier(std::string* publicidentifier);
  private:
  const std::string& _internal_publicidentifier() const;
  void _internal_set_publicidentifier(const std::string& value);
  std::string* _internal_mutable_publicidentifier();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicidentifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterPublicIdentifierResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse) */ {
 public:
  RegisterPublicIdentifierResponse();
  virtual ~RegisterPublicIdentifierResponse();

  RegisterPublicIdentifierResponse(const RegisterPublicIdentifierResponse& from);
  RegisterPublicIdentifierResponse(RegisterPublicIdentifierResponse&& from) noexcept
    : RegisterPublicIdentifierResponse() {
    *this = ::std::move(from);
  }

  inline RegisterPublicIdentifierResponse& operator=(const RegisterPublicIdentifierResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterPublicIdentifierResponse& operator=(RegisterPublicIdentifierResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterPublicIdentifierResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterPublicIdentifierResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterPublicIdentifierResponse*>(
               &_RegisterPublicIdentifierResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(RegisterPublicIdentifierResponse& a, RegisterPublicIdentifierResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterPublicIdentifierResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterPublicIdentifierResponse* New() const final {
    return CreateMaybeMessage<RegisterPublicIdentifierResponse>(nullptr);
  }

  RegisterPublicIdentifierResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterPublicIdentifierResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterPublicIdentifierResponse& from);
  void MergeFrom(const RegisterPublicIdentifierResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterPublicIdentifierResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPublicIdentifierFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string publicIdentifier = 2;
  void clear_publicidentifier();
  const std::string& publicidentifier() const;
  void set_publicidentifier(const std::string& value);
  void set_publicidentifier(std::string&& value);
  void set_publicidentifier(const char* value);
  void set_publicidentifier(const char* value, size_t size);
  std::string* mutable_publicidentifier();
  std::string* release_publicidentifier();
  void set_allocated_publicidentifier(std::string* publicidentifier);
  private:
  const std::string& _internal_publicidentifier() const;
  void _internal_set_publicidentifier(const std::string& value);
  std::string* _internal_mutable_publicidentifier();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicidentifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetConnextPaymentInformationCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand) */ {
 public:
  GetConnextPaymentInformationCommand();
  virtual ~GetConnextPaymentInformationCommand();

  GetConnextPaymentInformationCommand(const GetConnextPaymentInformationCommand& from);
  GetConnextPaymentInformationCommand(GetConnextPaymentInformationCommand&& from) noexcept
    : GetConnextPaymentInformationCommand() {
    *this = ::std::move(from);
  }

  inline GetConnextPaymentInformationCommand& operator=(const GetConnextPaymentInformationCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnextPaymentInformationCommand& operator=(GetConnextPaymentInformationCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnextPaymentInformationCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnextPaymentInformationCommand* internal_default_instance() {
    return reinterpret_cast<const GetConnextPaymentInformationCommand*>(
               &_GetConnextPaymentInformationCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetConnextPaymentInformationCommand& a, GetConnextPaymentInformationCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnextPaymentInformationCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnextPaymentInformationCommand* New() const final {
    return CreateMaybeMessage<GetConnextPaymentInformationCommand>(nullptr);
  }

  GetConnextPaymentInformationCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnextPaymentInformationCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnextPaymentInformationCommand& from);
  void MergeFrom(const GetConnextPaymentInformationCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnextPaymentInformationCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetConnextPaymentInformationResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse) */ {
 public:
  GetConnextPaymentInformationResponse();
  virtual ~GetConnextPaymentInformationResponse();

  GetConnextPaymentInformationResponse(const GetConnextPaymentInformationResponse& from);
  GetConnextPaymentInformationResponse(GetConnextPaymentInformationResponse&& from) noexcept
    : GetConnextPaymentInformationResponse() {
    *this = ::std::move(from);
  }

  inline GetConnextPaymentInformationResponse& operator=(const GetConnextPaymentInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnextPaymentInformationResponse& operator=(GetConnextPaymentInformationResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnextPaymentInformationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnextPaymentInformationResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnextPaymentInformationResponse*>(
               &_GetConnextPaymentInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(GetConnextPaymentInformationResponse& a, GetConnextPaymentInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnextPaymentInformationResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnextPaymentInformationResponse* New() const final {
    return CreateMaybeMessage<GetConnextPaymentInformationResponse>(nullptr);
  }

  GetConnextPaymentInformationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnextPaymentInformationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnextPaymentInformationResponse& from);
  void MergeFrom(const GetConnextPaymentInformationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnextPaymentInformationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPublicIdentifierFieldNumber = 2,
    kPaymentHashFieldNumber = 3,
    kNoFeeRequiredFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string publicIdentifier = 2;
  void clear_publicidentifier();
  const std::string& publicidentifier() const;
  void set_publicidentifier(const std::string& value);
  void set_publicidentifier(std::string&& value);
  void set_publicidentifier(const char* value);
  void set_publicidentifier(const char* value, size_t size);
  std::string* mutable_publicidentifier();
  std::string* release_publicidentifier();
  void set_allocated_publicidentifier(std::string* publicidentifier);
  private:
  const std::string& _internal_publicidentifier() const;
  void _internal_set_publicidentifier(const std::string& value);
  std::string* _internal_mutable_publicidentifier();
  public:

  // bytes paymentHash = 3;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // bool noFeeRequired = 4;
  void clear_nofeerequired();
  bool nofeerequired() const;
  void set_nofeerequired(bool value);
  private:
  bool _internal_nofeerequired() const;
  void _internal_set_nofeerequired(bool value);
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr publicidentifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  bool nofeerequired_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetConnextChannelContractDeploymentFeeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand) */ {
 public:
  GetConnextChannelContractDeploymentFeeCommand();
  virtual ~GetConnextChannelContractDeploymentFeeCommand();

  GetConnextChannelContractDeploymentFeeCommand(const GetConnextChannelContractDeploymentFeeCommand& from);
  GetConnextChannelContractDeploymentFeeCommand(GetConnextChannelContractDeploymentFeeCommand&& from) noexcept
    : GetConnextChannelContractDeploymentFeeCommand() {
    *this = ::std::move(from);
  }

  inline GetConnextChannelContractDeploymentFeeCommand& operator=(const GetConnextChannelContractDeploymentFeeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnextChannelContractDeploymentFeeCommand& operator=(GetConnextChannelContractDeploymentFeeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnextChannelContractDeploymentFeeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnextChannelContractDeploymentFeeCommand* internal_default_instance() {
    return reinterpret_cast<const GetConnextChannelContractDeploymentFeeCommand*>(
               &_GetConnextChannelContractDeploymentFeeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(GetConnextChannelContractDeploymentFeeCommand& a, GetConnextChannelContractDeploymentFeeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnextChannelContractDeploymentFeeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnextChannelContractDeploymentFeeCommand* New() const final {
    return CreateMaybeMessage<GetConnextChannelContractDeploymentFeeCommand>(nullptr);
  }

  GetConnextChannelContractDeploymentFeeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnextChannelContractDeploymentFeeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnextChannelContractDeploymentFeeCommand& from);
  void MergeFrom(const GetConnextChannelContractDeploymentFeeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnextChannelContractDeploymentFeeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class GetConnextChannelContractDeploymentFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse) */ {
 public:
  GetConnextChannelContractDeploymentFeeResponse();
  virtual ~GetConnextChannelContractDeploymentFeeResponse();

  GetConnextChannelContractDeploymentFeeResponse(const GetConnextChannelContractDeploymentFeeResponse& from);
  GetConnextChannelContractDeploymentFeeResponse(GetConnextChannelContractDeploymentFeeResponse&& from) noexcept
    : GetConnextChannelContractDeploymentFeeResponse() {
    *this = ::std::move(from);
  }

  inline GetConnextChannelContractDeploymentFeeResponse& operator=(const GetConnextChannelContractDeploymentFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConnextChannelContractDeploymentFeeResponse& operator=(GetConnextChannelContractDeploymentFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetConnextChannelContractDeploymentFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetConnextChannelContractDeploymentFeeResponse* internal_default_instance() {
    return reinterpret_cast<const GetConnextChannelContractDeploymentFeeResponse*>(
               &_GetConnextChannelContractDeploymentFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(GetConnextChannelContractDeploymentFeeResponse& a, GetConnextChannelContractDeploymentFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConnextChannelContractDeploymentFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConnextChannelContractDeploymentFeeResponse* New() const final {
    return CreateMaybeMessage<GetConnextChannelContractDeploymentFeeResponse>(nullptr);
  }

  GetConnextChannelContractDeploymentFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConnextChannelContractDeploymentFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConnextChannelContractDeploymentFeeResponse& from);
  void MergeFrom(const GetConnextChannelContractDeploymentFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConnextChannelContractDeploymentFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHubAddressFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string hubAddress = 1;
  void clear_hubaddress();
  const std::string& hubaddress() const;
  void set_hubaddress(const std::string& value);
  void set_hubaddress(std::string&& value);
  void set_hubaddress(const char* value);
  void set_hubaddress(const char* value, size_t size);
  std::string* mutable_hubaddress();
  std::string* release_hubaddress();
  void set_allocated_hubaddress(std::string* hubaddress);
  private:
  const std::string& _internal_hubaddress() const;
  void _internal_set_hubaddress(const std::string& value);
  std::string* _internal_mutable_hubaddress();
  public:

  // .io.stakenet.orderbook.protos.BigInteger amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::io::stakenet::orderbook::protos::BigInteger& amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* release_amount();
  ::io::stakenet::orderbook::protos::BigInteger* mutable_amount();
  void set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount);
  private:
  const ::io::stakenet::orderbook::protos::BigInteger& _internal_amount() const;
  ::io::stakenet::orderbook::protos::BigInteger* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hubaddress_;
  ::io::stakenet::orderbook::protos::BigInteger* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterConnextChannelContractDeploymentFeeCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand) */ {
 public:
  RegisterConnextChannelContractDeploymentFeeCommand();
  virtual ~RegisterConnextChannelContractDeploymentFeeCommand();

  RegisterConnextChannelContractDeploymentFeeCommand(const RegisterConnextChannelContractDeploymentFeeCommand& from);
  RegisterConnextChannelContractDeploymentFeeCommand(RegisterConnextChannelContractDeploymentFeeCommand&& from) noexcept
    : RegisterConnextChannelContractDeploymentFeeCommand() {
    *this = ::std::move(from);
  }

  inline RegisterConnextChannelContractDeploymentFeeCommand& operator=(const RegisterConnextChannelContractDeploymentFeeCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterConnextChannelContractDeploymentFeeCommand& operator=(RegisterConnextChannelContractDeploymentFeeCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterConnextChannelContractDeploymentFeeCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterConnextChannelContractDeploymentFeeCommand* internal_default_instance() {
    return reinterpret_cast<const RegisterConnextChannelContractDeploymentFeeCommand*>(
               &_RegisterConnextChannelContractDeploymentFeeCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RegisterConnextChannelContractDeploymentFeeCommand& a, RegisterConnextChannelContractDeploymentFeeCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterConnextChannelContractDeploymentFeeCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterConnextChannelContractDeploymentFeeCommand* New() const final {
    return CreateMaybeMessage<RegisterConnextChannelContractDeploymentFeeCommand>(nullptr);
  }

  RegisterConnextChannelContractDeploymentFeeCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterConnextChannelContractDeploymentFeeCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterConnextChannelContractDeploymentFeeCommand& from);
  void MergeFrom(const RegisterConnextChannelContractDeploymentFeeCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterConnextChannelContractDeploymentFeeCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashFieldNumber = 1,
  };
  // string transactionHash = 1;
  void clear_transactionhash();
  const std::string& transactionhash() const;
  void set_transactionhash(const std::string& value);
  void set_transactionhash(std::string&& value);
  void set_transactionhash(const char* value);
  void set_transactionhash(const char* value, size_t size);
  std::string* mutable_transactionhash();
  std::string* release_transactionhash();
  void set_allocated_transactionhash(std::string* transactionhash);
  private:
  const std::string& _internal_transactionhash() const;
  void _internal_set_transactionhash(const std::string& value);
  std::string* _internal_mutable_transactionhash();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class RegisterConnextChannelContractDeploymentFeeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse) */ {
 public:
  RegisterConnextChannelContractDeploymentFeeResponse();
  virtual ~RegisterConnextChannelContractDeploymentFeeResponse();

  RegisterConnextChannelContractDeploymentFeeResponse(const RegisterConnextChannelContractDeploymentFeeResponse& from);
  RegisterConnextChannelContractDeploymentFeeResponse(RegisterConnextChannelContractDeploymentFeeResponse&& from) noexcept
    : RegisterConnextChannelContractDeploymentFeeResponse() {
    *this = ::std::move(from);
  }

  inline RegisterConnextChannelContractDeploymentFeeResponse& operator=(const RegisterConnextChannelContractDeploymentFeeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterConnextChannelContractDeploymentFeeResponse& operator=(RegisterConnextChannelContractDeploymentFeeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterConnextChannelContractDeploymentFeeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterConnextChannelContractDeploymentFeeResponse* internal_default_instance() {
    return reinterpret_cast<const RegisterConnextChannelContractDeploymentFeeResponse*>(
               &_RegisterConnextChannelContractDeploymentFeeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(RegisterConnextChannelContractDeploymentFeeResponse& a, RegisterConnextChannelContractDeploymentFeeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterConnextChannelContractDeploymentFeeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterConnextChannelContractDeploymentFeeResponse* New() const final {
    return CreateMaybeMessage<RegisterConnextChannelContractDeploymentFeeResponse>(nullptr);
  }

  RegisterConnextChannelContractDeploymentFeeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterConnextChannelContractDeploymentFeeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterConnextChannelContractDeploymentFeeResponse& from);
  void MergeFrom(const RegisterConnextChannelContractDeploymentFeeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterConnextChannelContractDeploymentFeeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stakenet_2forderbook_2fcommands_2eproto);
    return ::descriptor_table_stakenet_2forderbook_2fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionHashFieldNumber = 1,
  };
  // string transactionHash = 1;
  void clear_transactionhash();
  const std::string& transactionhash() const;
  void set_transactionhash(const std::string& value);
  void set_transactionhash(std::string&& value);
  void set_transactionhash(const char* value);
  void set_transactionhash(const char* value, size_t size);
  std::string* mutable_transactionhash();
  std::string* release_transactionhash();
  void set_allocated_transactionhash(std::string* transactionhash);
  private:
  const std::string& _internal_transactionhash() const;
  void _internal_set_transactionhash(const std::string& value);
  std::string* _internal_mutable_transactionhash();
  public:

  // @@protoc_insertion_point(class_scope:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transactionhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stakenet_2forderbook_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandFailed

// string reason = 1;
inline bool CommandFailed::_internal_has_reason() const {
  return value_case() == kReason;
}
inline void CommandFailed::set_has_reason() {
  _oneof_case_[0] = kReason;
}
inline void CommandFailed::clear_reason() {
  if (_internal_has_reason()) {
    value_.reason_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& CommandFailed::reason() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CommandFailed.reason)
  return _internal_reason();
}
inline void CommandFailed::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CommandFailed.reason)
}
inline std::string* CommandFailed::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CommandFailed.reason)
  return _internal_mutable_reason();
}
inline const std::string& CommandFailed::_internal_reason() const {
  if (_internal_has_reason()) {
    return value_.reason_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CommandFailed::_internal_set_reason(const std::string& value) {
  if (!_internal_has_reason()) {
    clear_value();
    set_has_reason();
    value_.reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CommandFailed::set_reason(std::string&& value) {
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CommandFailed.reason)
  if (!_internal_has_reason()) {
    clear_value();
    set_has_reason();
    value_.reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.CommandFailed.reason)
}
inline void CommandFailed::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_reason()) {
    clear_value();
    set_has_reason();
    value_.reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CommandFailed.reason)
}
inline void CommandFailed::set_reason(const char* value, size_t size) {
  if (!_internal_has_reason()) {
    clear_value();
    set_has_reason();
    value_.reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CommandFailed.reason)
}
inline std::string* CommandFailed::_internal_mutable_reason() {
  if (!_internal_has_reason()) {
    clear_value();
    set_has_reason();
    value_.reason_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CommandFailed::release_reason() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CommandFailed.reason)
  if (_internal_has_reason()) {
    clear_has_value();
    return value_.reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void CommandFailed::set_allocated_reason(std::string* reason) {
  if (has_value()) {
    clear_value();
  }
  if (reason != nullptr) {
    set_has_reason();
    value_.reason_.UnsafeSetDefault(reason);
  }
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CommandFailed.reason)
}

// .io.stakenet.orderbook.protos.ServerInMaintenance serverInMaintenance = 2;
inline bool CommandFailed::_internal_has_serverinmaintenance() const {
  return value_case() == kServerInMaintenance;
}
inline bool CommandFailed::has_serverinmaintenance() const {
  return _internal_has_serverinmaintenance();
}
inline void CommandFailed::set_has_serverinmaintenance() {
  _oneof_case_[0] = kServerInMaintenance;
}
inline ::io::stakenet::orderbook::protos::ServerInMaintenance* CommandFailed::release_serverinmaintenance() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CommandFailed.serverInMaintenance)
  if (_internal_has_serverinmaintenance()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::ServerInMaintenance* temp = value_.serverinmaintenance_;
    value_.serverinmaintenance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::ServerInMaintenance& CommandFailed::_internal_serverinmaintenance() const {
  return _internal_has_serverinmaintenance()
      ? *value_.serverinmaintenance_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::ServerInMaintenance*>(&::io::stakenet::orderbook::protos::_ServerInMaintenance_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::ServerInMaintenance& CommandFailed::serverinmaintenance() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CommandFailed.serverInMaintenance)
  return _internal_serverinmaintenance();
}
inline ::io::stakenet::orderbook::protos::ServerInMaintenance* CommandFailed::_internal_mutable_serverinmaintenance() {
  if (!_internal_has_serverinmaintenance()) {
    clear_value();
    set_has_serverinmaintenance();
    value_.serverinmaintenance_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::ServerInMaintenance >(
        GetArenaNoVirtual());
  }
  return value_.serverinmaintenance_;
}
inline ::io::stakenet::orderbook::protos::ServerInMaintenance* CommandFailed::mutable_serverinmaintenance() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CommandFailed.serverInMaintenance)
  return _internal_mutable_serverinmaintenance();
}

inline bool CommandFailed::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void CommandFailed::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline CommandFailed::ValueCase CommandFailed::value_case() const {
  return CommandFailed::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PingCommand

// -------------------------------------------------------------------

// PingResponse

// -------------------------------------------------------------------

// GetTradingPairsCommand

// -------------------------------------------------------------------

// GetTradingPairsResponse

// repeated .io.stakenet.orderbook.protos.TradingPair tradingPairs = 1;
inline int GetTradingPairsResponse::_internal_tradingpairs_size() const {
  return tradingpairs_.size();
}
inline int GetTradingPairsResponse::tradingpairs_size() const {
  return _internal_tradingpairs_size();
}
inline ::io::stakenet::orderbook::protos::TradingPair* GetTradingPairsResponse::mutable_tradingpairs(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetTradingPairsResponse.tradingPairs)
  return tradingpairs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::TradingPair >*
GetTradingPairsResponse::mutable_tradingpairs() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetTradingPairsResponse.tradingPairs)
  return &tradingpairs_;
}
inline const ::io::stakenet::orderbook::protos::TradingPair& GetTradingPairsResponse::_internal_tradingpairs(int index) const {
  return tradingpairs_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::TradingPair& GetTradingPairsResponse::tradingpairs(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetTradingPairsResponse.tradingPairs)
  return _internal_tradingpairs(index);
}
inline ::io::stakenet::orderbook::protos::TradingPair* GetTradingPairsResponse::_internal_add_tradingpairs() {
  return tradingpairs_.Add();
}
inline ::io::stakenet::orderbook::protos::TradingPair* GetTradingPairsResponse::add_tradingpairs() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetTradingPairsResponse.tradingPairs)
  return _internal_add_tradingpairs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::TradingPair >&
GetTradingPairsResponse::tradingpairs() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetTradingPairsResponse.tradingPairs)
  return tradingpairs_;
}

// bool paysFees = 2;
inline void GetTradingPairsResponse::clear_paysfees() {
  paysfees_ = false;
}
inline bool GetTradingPairsResponse::_internal_paysfees() const {
  return paysfees_;
}
inline bool GetTradingPairsResponse::paysfees() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetTradingPairsResponse.paysFees)
  return _internal_paysfees();
}
inline void GetTradingPairsResponse::_internal_set_paysfees(bool value) {
  
  paysfees_ = value;
}
inline void GetTradingPairsResponse::set_paysfees(bool value) {
  _internal_set_paysfees(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetTradingPairsResponse.paysFees)
}

// -------------------------------------------------------------------

// SubscribeCommand

// string tradingPair = 1;
inline void SubscribeCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscribeCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
  return _internal_tradingpair();
}
inline void SubscribeCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
}
inline std::string* SubscribeCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& SubscribeCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void SubscribeCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubscribeCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
}
inline void SubscribeCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
}
inline void SubscribeCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
}
inline std::string* SubscribeCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscribeCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SubscribeCommand.tradingPair)
}

// bool retrieveOrdersSummary = 2;
inline void SubscribeCommand::clear_retrieveorderssummary() {
  retrieveorderssummary_ = false;
}
inline bool SubscribeCommand::_internal_retrieveorderssummary() const {
  return retrieveorderssummary_;
}
inline bool SubscribeCommand::retrieveorderssummary() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SubscribeCommand.retrieveOrdersSummary)
  return _internal_retrieveorderssummary();
}
inline void SubscribeCommand::_internal_set_retrieveorderssummary(bool value) {
  
  retrieveorderssummary_ = value;
}
inline void SubscribeCommand::set_retrieveorderssummary(bool value) {
  _internal_set_retrieveorderssummary(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SubscribeCommand.retrieveOrdersSummary)
}

// -------------------------------------------------------------------

// SubscribeResponse

// string tradingPair = 1;
inline void SubscribeResponse::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SubscribeResponse::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
  return _internal_tradingpair();
}
inline void SubscribeResponse::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
}
inline std::string* SubscribeResponse::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& SubscribeResponse::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void SubscribeResponse::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SubscribeResponse::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
}
inline void SubscribeResponse::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
}
inline void SubscribeResponse::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
}
inline std::string* SubscribeResponse::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SubscribeResponse::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SubscribeResponse::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SubscribeResponse.tradingPair)
}

// repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 2;
inline int SubscribeResponse::_internal_summarybids_size() const {
  return summarybids_.size();
}
inline int SubscribeResponse::summarybids_size() const {
  return _internal_summarybids_size();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::mutable_summarybids(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SubscribeResponse.summaryBids)
  return summarybids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
SubscribeResponse::mutable_summarybids() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.SubscribeResponse.summaryBids)
  return &summarybids_;
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& SubscribeResponse::_internal_summarybids(int index) const {
  return summarybids_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& SubscribeResponse::summarybids(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SubscribeResponse.summaryBids)
  return _internal_summarybids(index);
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::_internal_add_summarybids() {
  return summarybids_.Add();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::add_summarybids() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.SubscribeResponse.summaryBids)
  return _internal_add_summarybids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
SubscribeResponse::summarybids() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.SubscribeResponse.summaryBids)
  return summarybids_;
}

// repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 3;
inline int SubscribeResponse::_internal_summaryasks_size() const {
  return summaryasks_.size();
}
inline int SubscribeResponse::summaryasks_size() const {
  return _internal_summaryasks_size();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::mutable_summaryasks(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SubscribeResponse.summaryAsks)
  return summaryasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
SubscribeResponse::mutable_summaryasks() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.SubscribeResponse.summaryAsks)
  return &summaryasks_;
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& SubscribeResponse::_internal_summaryasks(int index) const {
  return summaryasks_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& SubscribeResponse::summaryasks(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SubscribeResponse.summaryAsks)
  return _internal_summaryasks(index);
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::_internal_add_summaryasks() {
  return summaryasks_.Add();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* SubscribeResponse::add_summaryasks() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.SubscribeResponse.summaryAsks)
  return _internal_add_summaryasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
SubscribeResponse::summaryasks() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.SubscribeResponse.summaryAsks)
  return summaryasks_;
}

// -------------------------------------------------------------------

// UnsubscribeCommand

// string tradingPair = 1;
inline void UnsubscribeCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnsubscribeCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
  return _internal_tradingpair();
}
inline void UnsubscribeCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
}
inline std::string* UnsubscribeCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& UnsubscribeCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void UnsubscribeCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnsubscribeCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
}
inline void UnsubscribeCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
}
inline void UnsubscribeCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
}
inline std::string* UnsubscribeCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnsubscribeCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnsubscribeCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.UnsubscribeCommand.tradingPair)
}

// -------------------------------------------------------------------

// UnsubscribeResponse

// string tradingPair = 1;
inline void UnsubscribeResponse::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnsubscribeResponse::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
  return _internal_tradingpair();
}
inline void UnsubscribeResponse::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
}
inline std::string* UnsubscribeResponse::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& UnsubscribeResponse::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void UnsubscribeResponse::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnsubscribeResponse::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
}
inline void UnsubscribeResponse::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
}
inline void UnsubscribeResponse::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
}
inline std::string* UnsubscribeResponse::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnsubscribeResponse::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnsubscribeResponse::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.UnsubscribeResponse.tradingPair)
}

// -------------------------------------------------------------------

// GetOpenOrdersCommand

// string tradingPair = 1;
inline void GetOpenOrdersCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOpenOrdersCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
  return _internal_tradingpair();
}
inline void GetOpenOrdersCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
}
inline std::string* GetOpenOrdersCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& GetOpenOrdersCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void GetOpenOrdersCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOpenOrdersCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
}
inline void GetOpenOrdersCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
}
inline void GetOpenOrdersCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
}
inline std::string* GetOpenOrdersCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOpenOrdersCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenOrdersCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetOpenOrdersCommand.tradingPair)
}

// -------------------------------------------------------------------

// GetOpenOrdersResponse

// string tradingPair = 1;
inline void GetOpenOrdersResponse::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOpenOrdersResponse::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
  return _internal_tradingpair();
}
inline void GetOpenOrdersResponse::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
}
inline std::string* GetOpenOrdersResponse::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& GetOpenOrdersResponse::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void GetOpenOrdersResponse::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOpenOrdersResponse::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
}
inline void GetOpenOrdersResponse::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
}
inline void GetOpenOrdersResponse::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
}
inline std::string* GetOpenOrdersResponse::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOpenOrdersResponse::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenOrdersResponse::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetOpenOrdersResponse.tradingPair)
}

// repeated .io.stakenet.orderbook.protos.OrderSummary summaryBids = 4;
inline int GetOpenOrdersResponse::_internal_summarybids_size() const {
  return summarybids_.size();
}
inline int GetOpenOrdersResponse::summarybids_size() const {
  return _internal_summarybids_size();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::mutable_summarybids(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryBids)
  return summarybids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
GetOpenOrdersResponse::mutable_summarybids() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryBids)
  return &summarybids_;
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& GetOpenOrdersResponse::_internal_summarybids(int index) const {
  return summarybids_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& GetOpenOrdersResponse::summarybids(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryBids)
  return _internal_summarybids(index);
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::_internal_add_summarybids() {
  return summarybids_.Add();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::add_summarybids() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryBids)
  return _internal_add_summarybids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
GetOpenOrdersResponse::summarybids() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryBids)
  return summarybids_;
}

// repeated .io.stakenet.orderbook.protos.OrderSummary summaryAsks = 5;
inline int GetOpenOrdersResponse::_internal_summaryasks_size() const {
  return summaryasks_.size();
}
inline int GetOpenOrdersResponse::summaryasks_size() const {
  return _internal_summaryasks_size();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::mutable_summaryasks(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryAsks)
  return summaryasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >*
GetOpenOrdersResponse::mutable_summaryasks() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryAsks)
  return &summaryasks_;
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& GetOpenOrdersResponse::_internal_summaryasks(int index) const {
  return summaryasks_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::OrderSummary& GetOpenOrdersResponse::summaryasks(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryAsks)
  return _internal_summaryasks(index);
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::_internal_add_summaryasks() {
  return summaryasks_.Add();
}
inline ::io::stakenet::orderbook::protos::OrderSummary* GetOpenOrdersResponse::add_summaryasks() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryAsks)
  return _internal_add_summaryasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::OrderSummary >&
GetOpenOrdersResponse::summaryasks() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetOpenOrdersResponse.summaryAsks)
  return summaryasks_;
}

// -------------------------------------------------------------------

// GetHistoricTradesCommand

// int32 limit = 1;
inline void GetHistoricTradesCommand::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHistoricTradesCommand::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHistoricTradesCommand::limit() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetHistoricTradesCommand.limit)
  return _internal_limit();
}
inline void GetHistoricTradesCommand::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void GetHistoricTradesCommand::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetHistoricTradesCommand.limit)
}

// string lastSeenTradeId = 2;
inline void GetHistoricTradesCommand::clear_lastseentradeid() {
  lastseentradeid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHistoricTradesCommand::lastseentradeid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
  return _internal_lastseentradeid();
}
inline void GetHistoricTradesCommand::set_lastseentradeid(const std::string& value) {
  _internal_set_lastseentradeid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
}
inline std::string* GetHistoricTradesCommand::mutable_lastseentradeid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
  return _internal_mutable_lastseentradeid();
}
inline const std::string& GetHistoricTradesCommand::_internal_lastseentradeid() const {
  return lastseentradeid_.GetNoArena();
}
inline void GetHistoricTradesCommand::_internal_set_lastseentradeid(const std::string& value) {
  
  lastseentradeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHistoricTradesCommand::set_lastseentradeid(std::string&& value) {
  
  lastseentradeid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
}
inline void GetHistoricTradesCommand::set_lastseentradeid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lastseentradeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
}
inline void GetHistoricTradesCommand::set_lastseentradeid(const char* value, size_t size) {
  
  lastseentradeid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
}
inline std::string* GetHistoricTradesCommand::_internal_mutable_lastseentradeid() {
  
  return lastseentradeid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHistoricTradesCommand::release_lastseentradeid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
  
  return lastseentradeid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoricTradesCommand::set_allocated_lastseentradeid(std::string* lastseentradeid) {
  if (lastseentradeid != nullptr) {
    
  } else {
    
  }
  lastseentradeid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lastseentradeid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetHistoricTradesCommand.lastSeenTradeId)
}

// string tradingPair = 3;
inline void GetHistoricTradesCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetHistoricTradesCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
  return _internal_tradingpair();
}
inline void GetHistoricTradesCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
}
inline std::string* GetHistoricTradesCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& GetHistoricTradesCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void GetHistoricTradesCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetHistoricTradesCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
}
inline void GetHistoricTradesCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
}
inline void GetHistoricTradesCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
}
inline std::string* GetHistoricTradesCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetHistoricTradesCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetHistoricTradesCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetHistoricTradesCommand.tradingPair)
}

// -------------------------------------------------------------------

// GetHistoricTradesResponse

// repeated .io.stakenet.orderbook.protos.Trade trades = 1;
inline int GetHistoricTradesResponse::_internal_trades_size() const {
  return trades_.size();
}
inline int GetHistoricTradesResponse::trades_size() const {
  return _internal_trades_size();
}
inline ::io::stakenet::orderbook::protos::Trade* GetHistoricTradesResponse::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetHistoricTradesResponse.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::Trade >*
GetHistoricTradesResponse::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetHistoricTradesResponse.trades)
  return &trades_;
}
inline const ::io::stakenet::orderbook::protos::Trade& GetHistoricTradesResponse::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::Trade& GetHistoricTradesResponse::trades(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetHistoricTradesResponse.trades)
  return _internal_trades(index);
}
inline ::io::stakenet::orderbook::protos::Trade* GetHistoricTradesResponse::_internal_add_trades() {
  return trades_.Add();
}
inline ::io::stakenet::orderbook::protos::Trade* GetHistoricTradesResponse::add_trades() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetHistoricTradesResponse.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::Trade >&
GetHistoricTradesResponse::trades() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetHistoricTradesResponse.trades)
  return trades_;
}

// -------------------------------------------------------------------

// GetBarsPricesCommand

// string tradingPair = 1;
inline void GetBarsPricesCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBarsPricesCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
  return _internal_tradingpair();
}
inline void GetBarsPricesCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
}
inline std::string* GetBarsPricesCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& GetBarsPricesCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void GetBarsPricesCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBarsPricesCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
}
inline void GetBarsPricesCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
}
inline void GetBarsPricesCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
}
inline std::string* GetBarsPricesCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBarsPricesCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBarsPricesCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetBarsPricesCommand.tradingPair)
}

// string resolution = 2;
inline void GetBarsPricesCommand::clear_resolution() {
  resolution_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetBarsPricesCommand::resolution() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
  return _internal_resolution();
}
inline void GetBarsPricesCommand::set_resolution(const std::string& value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
}
inline std::string* GetBarsPricesCommand::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
  return _internal_mutable_resolution();
}
inline const std::string& GetBarsPricesCommand::_internal_resolution() const {
  return resolution_.GetNoArena();
}
inline void GetBarsPricesCommand::_internal_set_resolution(const std::string& value) {
  
  resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetBarsPricesCommand::set_resolution(std::string&& value) {
  
  resolution_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
}
inline void GetBarsPricesCommand::set_resolution(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
}
inline void GetBarsPricesCommand::set_resolution(const char* value, size_t size) {
  
  resolution_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
}
inline std::string* GetBarsPricesCommand::_internal_mutable_resolution() {
  
  return resolution_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetBarsPricesCommand::release_resolution() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
  
  return resolution_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetBarsPricesCommand::set_allocated_resolution(std::string* resolution) {
  if (resolution != nullptr) {
    
  } else {
    
  }
  resolution_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolution);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetBarsPricesCommand.resolution)
}

// int64 from = 3;
inline void GetBarsPricesCommand::clear_from() {
  from_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBarsPricesCommand::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBarsPricesCommand::from() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesCommand.from)
  return _internal_from();
}
inline void GetBarsPricesCommand::_internal_set_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  from_ = value;
}
inline void GetBarsPricesCommand::set_from(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetBarsPricesCommand.from)
}

// int64 to = 4;
inline void GetBarsPricesCommand::clear_to() {
  to_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBarsPricesCommand::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetBarsPricesCommand::to() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesCommand.to)
  return _internal_to();
}
inline void GetBarsPricesCommand::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  to_ = value;
}
inline void GetBarsPricesCommand::set_to(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetBarsPricesCommand.to)
}

// int32 limit = 5;
inline void GetBarsPricesCommand::clear_limit() {
  limit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBarsPricesCommand::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetBarsPricesCommand::limit() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesCommand.limit)
  return _internal_limit();
}
inline void GetBarsPricesCommand::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  limit_ = value;
}
inline void GetBarsPricesCommand::set_limit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetBarsPricesCommand.limit)
}

// -------------------------------------------------------------------

// GetBarsPricesResponse

// repeated .io.stakenet.orderbook.protos.BarPrices barPrices = 1;
inline int GetBarsPricesResponse::_internal_barprices_size() const {
  return barprices_.size();
}
inline int GetBarsPricesResponse::barprices_size() const {
  return _internal_barprices_size();
}
inline ::io::stakenet::orderbook::protos::BarPrices* GetBarsPricesResponse::mutable_barprices(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetBarsPricesResponse.barPrices)
  return barprices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::BarPrices >*
GetBarsPricesResponse::mutable_barprices() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetBarsPricesResponse.barPrices)
  return &barprices_;
}
inline const ::io::stakenet::orderbook::protos::BarPrices& GetBarsPricesResponse::_internal_barprices(int index) const {
  return barprices_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::BarPrices& GetBarsPricesResponse::barprices(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetBarsPricesResponse.barPrices)
  return _internal_barprices(index);
}
inline ::io::stakenet::orderbook::protos::BarPrices* GetBarsPricesResponse::_internal_add_barprices() {
  return barprices_.Add();
}
inline ::io::stakenet::orderbook::protos::BarPrices* GetBarsPricesResponse::add_barprices() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetBarsPricesResponse.barPrices)
  return _internal_add_barprices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::BarPrices >&
GetBarsPricesResponse::barprices() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetBarsPricesResponse.barPrices)
  return barprices_;
}

// -------------------------------------------------------------------

// PlaceOrderCommand

// .io.stakenet.orderbook.protos.Order order = 1;
inline bool PlaceOrderCommand::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool PlaceOrderCommand::has_order() const {
  return _internal_has_order();
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderCommand::_internal_order() const {
  const ::io::stakenet::orderbook::protos::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Order*>(
      &::io::stakenet::orderbook::protos::_Order_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderCommand::order() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderCommand.order)
  return _internal_order();
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderCommand::release_order() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderCommand.order)
  
  ::io::stakenet::orderbook::protos::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderCommand::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderCommand::mutable_order() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderCommand.order)
  return _internal_mutable_order();
}
inline void PlaceOrderCommand::set_allocated_order(::io::stakenet::orderbook::protos::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderCommand.order)
}

// bytes paymentHash = 2;
inline void PlaceOrderCommand::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceOrderCommand::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
  return _internal_paymenthash();
}
inline void PlaceOrderCommand::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
}
inline std::string* PlaceOrderCommand::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& PlaceOrderCommand::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void PlaceOrderCommand::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlaceOrderCommand::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
}
inline void PlaceOrderCommand::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
}
inline void PlaceOrderCommand::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
}
inline std::string* PlaceOrderCommand::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceOrderCommand::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrderCommand::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderCommand.paymentHash)
}

// -------------------------------------------------------------------

// PlaceOrderResponse_MyOrderPlaced

// .io.stakenet.orderbook.protos.Order order = 1;
inline bool PlaceOrderResponse_MyOrderPlaced::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool PlaceOrderResponse_MyOrderPlaced::has_order() const {
  return _internal_has_order();
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderResponse_MyOrderPlaced::_internal_order() const {
  const ::io::stakenet::orderbook::protos::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Order*>(
      &::io::stakenet::orderbook::protos::_Order_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderResponse_MyOrderPlaced::order() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced.order)
  return _internal_order();
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderPlaced::release_order() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced.order)
  
  ::io::stakenet::orderbook::protos::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderPlaced::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderPlaced::mutable_order() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced.order)
  return _internal_mutable_order();
}
inline void PlaceOrderResponse_MyOrderPlaced::set_allocated_order(::io::stakenet::orderbook::protos::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced.order)
}

// -------------------------------------------------------------------

// PlaceOrderResponse_MyOrderRejected

// string reason = 1;
inline void PlaceOrderResponse_MyOrderRejected::clear_reason() {
  reason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceOrderResponse_MyOrderRejected::reason() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
  return _internal_reason();
}
inline void PlaceOrderResponse_MyOrderRejected::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
}
inline std::string* PlaceOrderResponse_MyOrderRejected::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
  return _internal_mutable_reason();
}
inline const std::string& PlaceOrderResponse_MyOrderRejected::_internal_reason() const {
  return reason_.GetNoArena();
}
inline void PlaceOrderResponse_MyOrderRejected::_internal_set_reason(const std::string& value) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlaceOrderResponse_MyOrderRejected::set_reason(std::string&& value) {
  
  reason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
}
inline void PlaceOrderResponse_MyOrderRejected::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
}
inline void PlaceOrderResponse_MyOrderRejected::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
}
inline std::string* PlaceOrderResponse_MyOrderRejected::_internal_mutable_reason() {
  
  return reason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceOrderResponse_MyOrderRejected::release_reason() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
  
  return reason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrderResponse_MyOrderRejected::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected.reason)
}

// -------------------------------------------------------------------

// PlaceOrderResponse_MyOrderMatched

// .io.stakenet.orderbook.protos.Trade trade = 1;
inline bool PlaceOrderResponse_MyOrderMatched::_internal_has_trade() const {
  return this != internal_default_instance() && trade_ != nullptr;
}
inline bool PlaceOrderResponse_MyOrderMatched::has_trade() const {
  return _internal_has_trade();
}
inline const ::io::stakenet::orderbook::protos::Trade& PlaceOrderResponse_MyOrderMatched::_internal_trade() const {
  const ::io::stakenet::orderbook::protos::Trade* p = trade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Trade*>(
      &::io::stakenet::orderbook::protos::_Trade_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Trade& PlaceOrderResponse_MyOrderMatched::trade() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.trade)
  return _internal_trade();
}
inline ::io::stakenet::orderbook::protos::Trade* PlaceOrderResponse_MyOrderMatched::release_trade() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.trade)
  
  ::io::stakenet::orderbook::protos::Trade* temp = trade_;
  trade_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Trade* PlaceOrderResponse_MyOrderMatched::_internal_mutable_trade() {
  
  if (trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Trade>(GetArenaNoVirtual());
    trade_ = p;
  }
  return trade_;
}
inline ::io::stakenet::orderbook::protos::Trade* PlaceOrderResponse_MyOrderMatched::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.trade)
  return _internal_mutable_trade();
}
inline void PlaceOrderResponse_MyOrderMatched::set_allocated_trade(::io::stakenet::orderbook::protos::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    
  } else {
    
  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.trade)
}

// .io.stakenet.orderbook.protos.Order orderMatchedWith = 2;
inline bool PlaceOrderResponse_MyOrderMatched::_internal_has_ordermatchedwith() const {
  return this != internal_default_instance() && ordermatchedwith_ != nullptr;
}
inline bool PlaceOrderResponse_MyOrderMatched::has_ordermatchedwith() const {
  return _internal_has_ordermatchedwith();
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderResponse_MyOrderMatched::_internal_ordermatchedwith() const {
  const ::io::stakenet::orderbook::protos::Order* p = ordermatchedwith_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Order*>(
      &::io::stakenet::orderbook::protos::_Order_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Order& PlaceOrderResponse_MyOrderMatched::ordermatchedwith() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.orderMatchedWith)
  return _internal_ordermatchedwith();
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderMatched::release_ordermatchedwith() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.orderMatchedWith)
  
  ::io::stakenet::orderbook::protos::Order* temp = ordermatchedwith_;
  ordermatchedwith_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderMatched::_internal_mutable_ordermatchedwith() {
  
  if (ordermatchedwith_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Order>(GetArenaNoVirtual());
    ordermatchedwith_ = p;
  }
  return ordermatchedwith_;
}
inline ::io::stakenet::orderbook::protos::Order* PlaceOrderResponse_MyOrderMatched::mutable_ordermatchedwith() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.orderMatchedWith)
  return _internal_mutable_ordermatchedwith();
}
inline void PlaceOrderResponse_MyOrderMatched::set_allocated_ordermatchedwith(::io::stakenet::orderbook::protos::Order* ordermatchedwith) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ordermatchedwith_);
  }
  if (ordermatchedwith) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ordermatchedwith = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ordermatchedwith, submessage_arena);
    }
    
  } else {
    
  }
  ordermatchedwith_ = ordermatchedwith;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched.orderMatchedWith)
}

// -------------------------------------------------------------------

// PlaceOrderResponse

// .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderPlaced myOrderPlaced = 1;
inline bool PlaceOrderResponse::_internal_has_myorderplaced() const {
  return value_case() == kMyOrderPlaced;
}
inline bool PlaceOrderResponse::has_myorderplaced() const {
  return _internal_has_myorderplaced();
}
inline void PlaceOrderResponse::set_has_myorderplaced() {
  _oneof_case_[0] = kMyOrderPlaced;
}
inline void PlaceOrderResponse::clear_myorderplaced() {
  if (_internal_has_myorderplaced()) {
    delete value_.myorderplaced_;
    clear_has_value();
  }
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* PlaceOrderResponse::release_myorderplaced() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderPlaced)
  if (_internal_has_myorderplaced()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* temp = value_.myorderplaced_;
    value_.myorderplaced_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced& PlaceOrderResponse::_internal_myorderplaced() const {
  return _internal_has_myorderplaced()
      ? *value_.myorderplaced_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderPlaced_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced& PlaceOrderResponse::myorderplaced() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderPlaced)
  return _internal_myorderplaced();
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* PlaceOrderResponse::_internal_mutable_myorderplaced() {
  if (!_internal_has_myorderplaced()) {
    clear_value();
    set_has_myorderplaced();
    value_.myorderplaced_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced >(
        GetArenaNoVirtual());
  }
  return value_.myorderplaced_;
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderPlaced* PlaceOrderResponse::mutable_myorderplaced() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderPlaced)
  return _internal_mutable_myorderplaced();
}

// .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderRejected myOrderRejected = 2;
inline bool PlaceOrderResponse::_internal_has_myorderrejected() const {
  return value_case() == kMyOrderRejected;
}
inline bool PlaceOrderResponse::has_myorderrejected() const {
  return _internal_has_myorderrejected();
}
inline void PlaceOrderResponse::set_has_myorderrejected() {
  _oneof_case_[0] = kMyOrderRejected;
}
inline void PlaceOrderResponse::clear_myorderrejected() {
  if (_internal_has_myorderrejected()) {
    delete value_.myorderrejected_;
    clear_has_value();
  }
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* PlaceOrderResponse::release_myorderrejected() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderRejected)
  if (_internal_has_myorderrejected()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* temp = value_.myorderrejected_;
    value_.myorderrejected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected& PlaceOrderResponse::_internal_myorderrejected() const {
  return _internal_has_myorderrejected()
      ? *value_.myorderrejected_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderRejected_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected& PlaceOrderResponse::myorderrejected() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderRejected)
  return _internal_myorderrejected();
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* PlaceOrderResponse::_internal_mutable_myorderrejected() {
  if (!_internal_has_myorderrejected()) {
    clear_value();
    set_has_myorderrejected();
    value_.myorderrejected_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected >(
        GetArenaNoVirtual());
  }
  return value_.myorderrejected_;
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderRejected* PlaceOrderResponse::mutable_myorderrejected() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderRejected)
  return _internal_mutable_myorderrejected();
}

// .io.stakenet.orderbook.protos.PlaceOrderResponse.MyOrderMatched myOrderMatched = 3;
inline bool PlaceOrderResponse::_internal_has_myordermatched() const {
  return value_case() == kMyOrderMatched;
}
inline bool PlaceOrderResponse::has_myordermatched() const {
  return _internal_has_myordermatched();
}
inline void PlaceOrderResponse::set_has_myordermatched() {
  _oneof_case_[0] = kMyOrderMatched;
}
inline void PlaceOrderResponse::clear_myordermatched() {
  if (_internal_has_myordermatched()) {
    delete value_.myordermatched_;
    clear_has_value();
  }
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* PlaceOrderResponse::release_myordermatched() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderMatched)
  if (_internal_has_myordermatched()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* temp = value_.myordermatched_;
    value_.myordermatched_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched& PlaceOrderResponse::_internal_myordermatched() const {
  return _internal_has_myordermatched()
      ? *value_.myordermatched_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched*>(&::io::stakenet::orderbook::protos::_PlaceOrderResponse_MyOrderMatched_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched& PlaceOrderResponse::myordermatched() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderMatched)
  return _internal_myordermatched();
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* PlaceOrderResponse::_internal_mutable_myordermatched() {
  if (!_internal_has_myordermatched()) {
    clear_value();
    set_has_myordermatched();
    value_.myordermatched_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched >(
        GetArenaNoVirtual());
  }
  return value_.myordermatched_;
}
inline ::io::stakenet::orderbook::protos::PlaceOrderResponse_MyOrderMatched* PlaceOrderResponse::mutable_myordermatched() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.PlaceOrderResponse.myOrderMatched)
  return _internal_mutable_myordermatched();
}

inline bool PlaceOrderResponse::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PlaceOrderResponse::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline PlaceOrderResponse::ValueCase PlaceOrderResponse::value_case() const {
  return PlaceOrderResponse::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetOpenOrderByIdCommand

// string orderId = 1;
inline void GetOpenOrderByIdCommand::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetOpenOrderByIdCommand::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
  return _internal_orderid();
}
inline void GetOpenOrderByIdCommand::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
}
inline std::string* GetOpenOrderByIdCommand::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& GetOpenOrderByIdCommand::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void GetOpenOrderByIdCommand::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetOpenOrderByIdCommand::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
}
inline void GetOpenOrderByIdCommand::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
}
inline void GetOpenOrderByIdCommand::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
}
inline std::string* GetOpenOrderByIdCommand::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetOpenOrderByIdCommand::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenOrderByIdCommand::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetOpenOrderByIdCommand.orderId)
}

// -------------------------------------------------------------------

// GetOpenOrderByIdResponse

// .io.stakenet.orderbook.protos.Order order = 1;
inline bool GetOpenOrderByIdResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool GetOpenOrderByIdResponse::has_order() const {
  return _internal_has_order();
}
inline const ::io::stakenet::orderbook::protos::Order& GetOpenOrderByIdResponse::_internal_order() const {
  const ::io::stakenet::orderbook::protos::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Order*>(
      &::io::stakenet::orderbook::protos::_Order_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Order& GetOpenOrderByIdResponse::order() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse.order)
  return _internal_order();
}
inline ::io::stakenet::orderbook::protos::Order* GetOpenOrderByIdResponse::release_order() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse.order)
  
  ::io::stakenet::orderbook::protos::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Order* GetOpenOrderByIdResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::io::stakenet::orderbook::protos::Order* GetOpenOrderByIdResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse.order)
  return _internal_mutable_order();
}
inline void GetOpenOrderByIdResponse::set_allocated_order(::io::stakenet::orderbook::protos::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetOpenOrderByIdResponse.order)
}

// -------------------------------------------------------------------

// CancelOpenOrderCommand

// string orderId = 1;
inline void CancelOpenOrderCommand::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CancelOpenOrderCommand::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
  return _internal_orderid();
}
inline void CancelOpenOrderCommand::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
}
inline std::string* CancelOpenOrderCommand::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& CancelOpenOrderCommand::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void CancelOpenOrderCommand::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CancelOpenOrderCommand::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
}
inline void CancelOpenOrderCommand::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
}
inline void CancelOpenOrderCommand::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
}
inline std::string* CancelOpenOrderCommand::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CancelOpenOrderCommand::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOpenOrderCommand::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CancelOpenOrderCommand.orderId)
}

// -------------------------------------------------------------------

// CancelOpenOrderResponse

// .io.stakenet.orderbook.protos.Order order = 1;
inline bool CancelOpenOrderResponse::_internal_has_order() const {
  return this != internal_default_instance() && order_ != nullptr;
}
inline bool CancelOpenOrderResponse::has_order() const {
  return _internal_has_order();
}
inline const ::io::stakenet::orderbook::protos::Order& CancelOpenOrderResponse::_internal_order() const {
  const ::io::stakenet::orderbook::protos::Order* p = order_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Order*>(
      &::io::stakenet::orderbook::protos::_Order_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Order& CancelOpenOrderResponse::order() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CancelOpenOrderResponse.order)
  return _internal_order();
}
inline ::io::stakenet::orderbook::protos::Order* CancelOpenOrderResponse::release_order() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CancelOpenOrderResponse.order)
  
  ::io::stakenet::orderbook::protos::Order* temp = order_;
  order_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Order* CancelOpenOrderResponse::_internal_mutable_order() {
  
  if (order_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Order>(GetArenaNoVirtual());
    order_ = p;
  }
  return order_;
}
inline ::io::stakenet::orderbook::protos::Order* CancelOpenOrderResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CancelOpenOrderResponse.order)
  return _internal_mutable_order();
}
inline void CancelOpenOrderResponse::set_allocated_order(::io::stakenet::orderbook::protos::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_);
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  order_ = order;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CancelOpenOrderResponse.order)
}

// -------------------------------------------------------------------

// SendOrderMessageCommand

// string orderId = 1;
inline void SendOrderMessageCommand::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendOrderMessageCommand::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
  return _internal_orderid();
}
inline void SendOrderMessageCommand::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
}
inline std::string* SendOrderMessageCommand::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& SendOrderMessageCommand::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void SendOrderMessageCommand::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendOrderMessageCommand::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
}
inline void SendOrderMessageCommand::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
}
inline void SendOrderMessageCommand::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
}
inline std::string* SendOrderMessageCommand::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendOrderMessageCommand::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendOrderMessageCommand::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SendOrderMessageCommand.orderId)
}

// bytes message = 2;
inline void SendOrderMessageCommand::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendOrderMessageCommand::message() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
  return _internal_message();
}
inline void SendOrderMessageCommand::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
}
inline std::string* SendOrderMessageCommand::mutable_message() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
  return _internal_mutable_message();
}
inline const std::string& SendOrderMessageCommand::_internal_message() const {
  return message_.GetNoArena();
}
inline void SendOrderMessageCommand::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendOrderMessageCommand::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
}
inline void SendOrderMessageCommand::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
}
inline void SendOrderMessageCommand::set_message(const void* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
}
inline std::string* SendOrderMessageCommand::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendOrderMessageCommand::release_message() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendOrderMessageCommand::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SendOrderMessageCommand.message)
}

// -------------------------------------------------------------------

// SendOrderMessageResponse_OrderMessageSent

// string orderId = 1;
inline void SendOrderMessageResponse_OrderMessageSent::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendOrderMessageResponse_OrderMessageSent::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
  return _internal_orderid();
}
inline void SendOrderMessageResponse_OrderMessageSent::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
}
inline std::string* SendOrderMessageResponse_OrderMessageSent::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& SendOrderMessageResponse_OrderMessageSent::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void SendOrderMessageResponse_OrderMessageSent::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendOrderMessageResponse_OrderMessageSent::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
}
inline void SendOrderMessageResponse_OrderMessageSent::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
}
inline void SendOrderMessageResponse_OrderMessageSent::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
}
inline std::string* SendOrderMessageResponse_OrderMessageSent::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendOrderMessageResponse_OrderMessageSent::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendOrderMessageResponse_OrderMessageSent::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent.orderId)
}

// -------------------------------------------------------------------

// SendOrderMessageResponse

// .io.stakenet.orderbook.protos.SendOrderMessageResponse.OrderMessageSent orderMessageSent = 1;
inline bool SendOrderMessageResponse::_internal_has_ordermessagesent() const {
  return value_case() == kOrderMessageSent;
}
inline bool SendOrderMessageResponse::has_ordermessagesent() const {
  return _internal_has_ordermessagesent();
}
inline void SendOrderMessageResponse::set_has_ordermessagesent() {
  _oneof_case_[0] = kOrderMessageSent;
}
inline void SendOrderMessageResponse::clear_ordermessagesent() {
  if (_internal_has_ordermessagesent()) {
    delete value_.ordermessagesent_;
    clear_has_value();
  }
}
inline ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* SendOrderMessageResponse::release_ordermessagesent() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SendOrderMessageResponse.orderMessageSent)
  if (_internal_has_ordermessagesent()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* temp = value_.ordermessagesent_;
    value_.ordermessagesent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent& SendOrderMessageResponse::_internal_ordermessagesent() const {
  return _internal_has_ordermessagesent()
      ? *value_.ordermessagesent_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent*>(&::io::stakenet::orderbook::protos::_SendOrderMessageResponse_OrderMessageSent_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent& SendOrderMessageResponse::ordermessagesent() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SendOrderMessageResponse.orderMessageSent)
  return _internal_ordermessagesent();
}
inline ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* SendOrderMessageResponse::_internal_mutable_ordermessagesent() {
  if (!_internal_has_ordermessagesent()) {
    clear_value();
    set_has_ordermessagesent();
    value_.ordermessagesent_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent >(
        GetArenaNoVirtual());
  }
  return value_.ordermessagesent_;
}
inline ::io::stakenet::orderbook::protos::SendOrderMessageResponse_OrderMessageSent* SendOrderMessageResponse::mutable_ordermessagesent() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SendOrderMessageResponse.orderMessageSent)
  return _internal_mutable_ordermessagesent();
}

// .io.stakenet.orderbook.protos.MatchedOrderNotFound MatchedOrderNotFound = 2;
inline bool SendOrderMessageResponse::_internal_has_matchedordernotfound() const {
  return value_case() == kMatchedOrderNotFound;
}
inline bool SendOrderMessageResponse::has_matchedordernotfound() const {
  return _internal_has_matchedordernotfound();
}
inline void SendOrderMessageResponse::set_has_matchedordernotfound() {
  _oneof_case_[0] = kMatchedOrderNotFound;
}
inline void SendOrderMessageResponse::clear_matchedordernotfound() {
  if (_internal_has_matchedordernotfound()) {
    delete value_.matchedordernotfound_;
    clear_has_value();
  }
}
inline ::io::stakenet::orderbook::protos::MatchedOrderNotFound* SendOrderMessageResponse::release_matchedordernotfound() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.SendOrderMessageResponse.MatchedOrderNotFound)
  if (_internal_has_matchedordernotfound()) {
    clear_has_value();
      ::io::stakenet::orderbook::protos::MatchedOrderNotFound* temp = value_.matchedordernotfound_;
    value_.matchedordernotfound_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::MatchedOrderNotFound& SendOrderMessageResponse::_internal_matchedordernotfound() const {
  return _internal_has_matchedordernotfound()
      ? *value_.matchedordernotfound_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::MatchedOrderNotFound*>(&::io::stakenet::orderbook::protos::_MatchedOrderNotFound_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::MatchedOrderNotFound& SendOrderMessageResponse::matchedordernotfound() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.SendOrderMessageResponse.MatchedOrderNotFound)
  return _internal_matchedordernotfound();
}
inline ::io::stakenet::orderbook::protos::MatchedOrderNotFound* SendOrderMessageResponse::_internal_mutable_matchedordernotfound() {
  if (!_internal_has_matchedordernotfound()) {
    clear_value();
    set_has_matchedordernotfound();
    value_.matchedordernotfound_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::MatchedOrderNotFound >(
        GetArenaNoVirtual());
  }
  return value_.matchedordernotfound_;
}
inline ::io::stakenet::orderbook::protos::MatchedOrderNotFound* SendOrderMessageResponse::mutable_matchedordernotfound() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.SendOrderMessageResponse.MatchedOrderNotFound)
  return _internal_mutable_matchedordernotfound();
}

inline bool SendOrderMessageResponse::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SendOrderMessageResponse::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SendOrderMessageResponse::ValueCase SendOrderMessageResponse::value_case() const {
  return SendOrderMessageResponse::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CancelMatchedOrderCommand

// string orderId = 1;
inline void CancelMatchedOrderCommand::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CancelMatchedOrderCommand::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
  return _internal_orderid();
}
inline void CancelMatchedOrderCommand::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
}
inline std::string* CancelMatchedOrderCommand::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& CancelMatchedOrderCommand::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void CancelMatchedOrderCommand::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CancelMatchedOrderCommand::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
}
inline void CancelMatchedOrderCommand::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
}
inline void CancelMatchedOrderCommand::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
}
inline std::string* CancelMatchedOrderCommand::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CancelMatchedOrderCommand::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CancelMatchedOrderCommand::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CancelMatchedOrderCommand.orderId)
}

// -------------------------------------------------------------------

// CancelMatchedOrderResponse

// .io.stakenet.orderbook.protos.Trade trade = 1;
inline bool CancelMatchedOrderResponse::_internal_has_trade() const {
  return this != internal_default_instance() && trade_ != nullptr;
}
inline bool CancelMatchedOrderResponse::has_trade() const {
  return _internal_has_trade();
}
inline const ::io::stakenet::orderbook::protos::Trade& CancelMatchedOrderResponse::_internal_trade() const {
  const ::io::stakenet::orderbook::protos::Trade* p = trade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::Trade*>(
      &::io::stakenet::orderbook::protos::_Trade_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::Trade& CancelMatchedOrderResponse::trade() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CancelMatchedOrderResponse.trade)
  return _internal_trade();
}
inline ::io::stakenet::orderbook::protos::Trade* CancelMatchedOrderResponse::release_trade() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CancelMatchedOrderResponse.trade)
  
  ::io::stakenet::orderbook::protos::Trade* temp = trade_;
  trade_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::Trade* CancelMatchedOrderResponse::_internal_mutable_trade() {
  
  if (trade_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::Trade>(GetArenaNoVirtual());
    trade_ = p;
  }
  return trade_;
}
inline ::io::stakenet::orderbook::protos::Trade* CancelMatchedOrderResponse::mutable_trade() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CancelMatchedOrderResponse.trade)
  return _internal_mutable_trade();
}
inline void CancelMatchedOrderResponse::set_allocated_trade(::io::stakenet::orderbook::protos::Trade* trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_);
  }
  if (trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade, submessage_arena);
    }
    
  } else {
    
  }
  trade_ = trade;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CancelMatchedOrderResponse.trade)
}

// -------------------------------------------------------------------

// MatchedOrderNotFound

// string orderId = 1;
inline void MatchedOrderNotFound::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MatchedOrderNotFound::orderid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
  return _internal_orderid();
}
inline void MatchedOrderNotFound::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
}
inline std::string* MatchedOrderNotFound::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& MatchedOrderNotFound::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void MatchedOrderNotFound::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MatchedOrderNotFound::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
}
inline void MatchedOrderNotFound::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
}
inline void MatchedOrderNotFound::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
}
inline std::string* MatchedOrderNotFound::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MatchedOrderNotFound::release_orderid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MatchedOrderNotFound::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.MatchedOrderNotFound.orderId)
}

// -------------------------------------------------------------------

// CleanTradingPairOrdersCommand

// string tradingPair = 1;
inline void CleanTradingPairOrdersCommand::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CleanTradingPairOrdersCommand::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
  return _internal_tradingpair();
}
inline void CleanTradingPairOrdersCommand::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
}
inline std::string* CleanTradingPairOrdersCommand::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& CleanTradingPairOrdersCommand::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void CleanTradingPairOrdersCommand::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CleanTradingPairOrdersCommand::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
}
inline void CleanTradingPairOrdersCommand::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
}
inline void CleanTradingPairOrdersCommand::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
}
inline std::string* CleanTradingPairOrdersCommand::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CleanTradingPairOrdersCommand::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CleanTradingPairOrdersCommand::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CleanTradingPairOrdersCommand.tradingPair)
}

// -------------------------------------------------------------------

// CleanTradingPairOrdersResponse

// string tradingPair = 1;
inline void CleanTradingPairOrdersResponse::clear_tradingpair() {
  tradingpair_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CleanTradingPairOrdersResponse::tradingpair() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
  return _internal_tradingpair();
}
inline void CleanTradingPairOrdersResponse::set_tradingpair(const std::string& value) {
  _internal_set_tradingpair(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
}
inline std::string* CleanTradingPairOrdersResponse::mutable_tradingpair() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
  return _internal_mutable_tradingpair();
}
inline const std::string& CleanTradingPairOrdersResponse::_internal_tradingpair() const {
  return tradingpair_.GetNoArena();
}
inline void CleanTradingPairOrdersResponse::_internal_set_tradingpair(const std::string& value) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CleanTradingPairOrdersResponse::set_tradingpair(std::string&& value) {
  
  tradingpair_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
}
inline void CleanTradingPairOrdersResponse::set_tradingpair(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
}
inline void CleanTradingPairOrdersResponse::set_tradingpair(const char* value, size_t size) {
  
  tradingpair_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
}
inline std::string* CleanTradingPairOrdersResponse::_internal_mutable_tradingpair() {
  
  return tradingpair_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CleanTradingPairOrdersResponse::release_tradingpair() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
  
  return tradingpair_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CleanTradingPairOrdersResponse::set_allocated_tradingpair(std::string* tradingpair) {
  if (tradingpair != nullptr) {
    
  } else {
    
  }
  tradingpair_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tradingpair);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.tradingPair)
}

// repeated string openOrdersRemoved = 2;
inline int CleanTradingPairOrdersResponse::_internal_openordersremoved_size() const {
  return openordersremoved_.size();
}
inline int CleanTradingPairOrdersResponse::openordersremoved_size() const {
  return _internal_openordersremoved_size();
}
inline void CleanTradingPairOrdersResponse::clear_openordersremoved() {
  openordersremoved_.Clear();
}
inline std::string* CleanTradingPairOrdersResponse::add_openordersremoved() {
  // @@protoc_insertion_point(field_add_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  return _internal_add_openordersremoved();
}
inline const std::string& CleanTradingPairOrdersResponse::_internal_openordersremoved(int index) const {
  return openordersremoved_.Get(index);
}
inline const std::string& CleanTradingPairOrdersResponse::openordersremoved(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  return _internal_openordersremoved(index);
}
inline std::string* CleanTradingPairOrdersResponse::mutable_openordersremoved(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  return openordersremoved_.Mutable(index);
}
inline void CleanTradingPairOrdersResponse::set_openordersremoved(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  openordersremoved_.Mutable(index)->assign(value);
}
inline void CleanTradingPairOrdersResponse::set_openordersremoved(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  openordersremoved_.Mutable(index)->assign(std::move(value));
}
inline void CleanTradingPairOrdersResponse::set_openordersremoved(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  openordersremoved_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::set_openordersremoved(int index, const char* value, size_t size) {
  openordersremoved_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline std::string* CleanTradingPairOrdersResponse::_internal_add_openordersremoved() {
  return openordersremoved_.Add();
}
inline void CleanTradingPairOrdersResponse::add_openordersremoved(const std::string& value) {
  openordersremoved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_openordersremoved(std::string&& value) {
  openordersremoved_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_openordersremoved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  openordersremoved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_openordersremoved(const char* value, size_t size) {
  openordersremoved_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CleanTradingPairOrdersResponse::openordersremoved() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  return openordersremoved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CleanTradingPairOrdersResponse::mutable_openordersremoved() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.openOrdersRemoved)
  return &openordersremoved_;
}

// repeated string matchedOrdersRemoved = 3;
inline int CleanTradingPairOrdersResponse::_internal_matchedordersremoved_size() const {
  return matchedordersremoved_.size();
}
inline int CleanTradingPairOrdersResponse::matchedordersremoved_size() const {
  return _internal_matchedordersremoved_size();
}
inline void CleanTradingPairOrdersResponse::clear_matchedordersremoved() {
  matchedordersremoved_.Clear();
}
inline std::string* CleanTradingPairOrdersResponse::add_matchedordersremoved() {
  // @@protoc_insertion_point(field_add_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  return _internal_add_matchedordersremoved();
}
inline const std::string& CleanTradingPairOrdersResponse::_internal_matchedordersremoved(int index) const {
  return matchedordersremoved_.Get(index);
}
inline const std::string& CleanTradingPairOrdersResponse::matchedordersremoved(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  return _internal_matchedordersremoved(index);
}
inline std::string* CleanTradingPairOrdersResponse::mutable_matchedordersremoved(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  return matchedordersremoved_.Mutable(index);
}
inline void CleanTradingPairOrdersResponse::set_matchedordersremoved(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  matchedordersremoved_.Mutable(index)->assign(value);
}
inline void CleanTradingPairOrdersResponse::set_matchedordersremoved(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  matchedordersremoved_.Mutable(index)->assign(std::move(value));
}
inline void CleanTradingPairOrdersResponse::set_matchedordersremoved(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matchedordersremoved_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::set_matchedordersremoved(int index, const char* value, size_t size) {
  matchedordersremoved_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline std::string* CleanTradingPairOrdersResponse::_internal_add_matchedordersremoved() {
  return matchedordersremoved_.Add();
}
inline void CleanTradingPairOrdersResponse::add_matchedordersremoved(const std::string& value) {
  matchedordersremoved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_matchedordersremoved(std::string&& value) {
  matchedordersremoved_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_matchedordersremoved(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  matchedordersremoved_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline void CleanTradingPairOrdersResponse::add_matchedordersremoved(const char* value, size_t size) {
  matchedordersremoved_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CleanTradingPairOrdersResponse::matchedordersremoved() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  return matchedordersremoved_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CleanTradingPairOrdersResponse::mutable_matchedordersremoved() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.CleanTradingPairOrdersResponse.matchedOrdersRemoved)
  return &matchedordersremoved_;
}

// -------------------------------------------------------------------

// GetLndPaymentInvoiceCommand

// string currency = 1;
inline void GetLndPaymentInvoiceCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLndPaymentInvoiceCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
  return _internal_currency();
}
inline void GetLndPaymentInvoiceCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
}
inline std::string* GetLndPaymentInvoiceCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetLndPaymentInvoiceCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetLndPaymentInvoiceCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLndPaymentInvoiceCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
}
inline void GetLndPaymentInvoiceCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
}
inline void GetLndPaymentInvoiceCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
}
inline std::string* GetLndPaymentInvoiceCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLndPaymentInvoiceCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLndPaymentInvoiceCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.currency)
}

// .io.stakenet.orderbook.protos.BigInteger amount = 2;
inline bool GetLndPaymentInvoiceCommand::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool GetLndPaymentInvoiceCommand::has_amount() const {
  return _internal_has_amount();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetLndPaymentInvoiceCommand::_internal_amount() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetLndPaymentInvoiceCommand::amount() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.amount)
  return _internal_amount();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetLndPaymentInvoiceCommand::release_amount() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.amount)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetLndPaymentInvoiceCommand::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetLndPaymentInvoiceCommand::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.amount)
  return _internal_mutable_amount();
}
inline void GetLndPaymentInvoiceCommand::set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetLndPaymentInvoiceCommand.amount)
}

// -------------------------------------------------------------------

// GetLndPaymentInvoiceResponse

// string currency = 1;
inline void GetLndPaymentInvoiceResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLndPaymentInvoiceResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
  return _internal_currency();
}
inline void GetLndPaymentInvoiceResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
}
inline std::string* GetLndPaymentInvoiceResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetLndPaymentInvoiceResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetLndPaymentInvoiceResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLndPaymentInvoiceResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
}
inline void GetLndPaymentInvoiceResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
}
inline void GetLndPaymentInvoiceResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
}
inline std::string* GetLndPaymentInvoiceResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLndPaymentInvoiceResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLndPaymentInvoiceResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.currency)
}

// string paymentRequest = 2;
inline void GetLndPaymentInvoiceResponse::clear_paymentrequest() {
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetLndPaymentInvoiceResponse::paymentrequest() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
  return _internal_paymentrequest();
}
inline void GetLndPaymentInvoiceResponse::set_paymentrequest(const std::string& value) {
  _internal_set_paymentrequest(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
}
inline std::string* GetLndPaymentInvoiceResponse::mutable_paymentrequest() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
  return _internal_mutable_paymentrequest();
}
inline const std::string& GetLndPaymentInvoiceResponse::_internal_paymentrequest() const {
  return paymentrequest_.GetNoArena();
}
inline void GetLndPaymentInvoiceResponse::_internal_set_paymentrequest(const std::string& value) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetLndPaymentInvoiceResponse::set_paymentrequest(std::string&& value) {
  
  paymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
}
inline void GetLndPaymentInvoiceResponse::set_paymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
}
inline void GetLndPaymentInvoiceResponse::set_paymentrequest(const char* value, size_t size) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
}
inline std::string* GetLndPaymentInvoiceResponse::_internal_mutable_paymentrequest() {
  
  return paymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetLndPaymentInvoiceResponse::release_paymentrequest() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
  
  return paymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetLndPaymentInvoiceResponse::set_allocated_paymentrequest(std::string* paymentrequest) {
  if (paymentrequest != nullptr) {
    
  } else {
    
  }
  paymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymentrequest);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.paymentRequest)
}

// bool noFeeRequired = 3;
inline void GetLndPaymentInvoiceResponse::clear_nofeerequired() {
  nofeerequired_ = false;
}
inline bool GetLndPaymentInvoiceResponse::_internal_nofeerequired() const {
  return nofeerequired_;
}
inline bool GetLndPaymentInvoiceResponse::nofeerequired() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.noFeeRequired)
  return _internal_nofeerequired();
}
inline void GetLndPaymentInvoiceResponse::_internal_set_nofeerequired(bool value) {
  
  nofeerequired_ = value;
}
inline void GetLndPaymentInvoiceResponse::set_nofeerequired(bool value) {
  _internal_set_nofeerequired(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetLndPaymentInvoiceResponse.noFeeRequired)
}

// -------------------------------------------------------------------

// GenerateInvoiceToRentChannelCommand

// string currency = 1;
inline void GenerateInvoiceToRentChannelCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
  return _internal_currency();
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GenerateInvoiceToRentChannelCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.currency)
}

// string payingCurrency = 2;
inline void GenerateInvoiceToRentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GenerateInvoiceToRentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.payingCurrency)
}

// .io.stakenet.orderbook.protos.BigInteger capacity = 3;
inline bool GenerateInvoiceToRentChannelCommand::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GenerateInvoiceToRentChannelCommand::has_capacity() const {
  return _internal_has_capacity();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GenerateInvoiceToRentChannelCommand::_internal_capacity() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GenerateInvoiceToRentChannelCommand::capacity() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.capacity)
  return _internal_capacity();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelCommand::release_capacity() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.capacity)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelCommand::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelCommand::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.capacity)
  return _internal_mutable_capacity();
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GenerateInvoiceToRentChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GenerateInvoiceToRentChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GenerateInvoiceToRentChannelResponse

// string currency = 1;
inline void GenerateInvoiceToRentChannelResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
  return _internal_currency();
}
inline void GenerateInvoiceToRentChannelResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
}
inline std::string* GenerateInvoiceToRentChannelResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& GenerateInvoiceToRentChannelResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
}
inline void GenerateInvoiceToRentChannelResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
}
inline void GenerateInvoiceToRentChannelResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
}
inline std::string* GenerateInvoiceToRentChannelResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.currency)
}

// string payingCurrency = 2;
inline void GenerateInvoiceToRentChannelResponse::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelResponse::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
  return _internal_payingcurrency();
}
inline void GenerateInvoiceToRentChannelResponse::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelResponse::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GenerateInvoiceToRentChannelResponse::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelResponse::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelResponse::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
}
inline void GenerateInvoiceToRentChannelResponse::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
}
inline void GenerateInvoiceToRentChannelResponse::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelResponse::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelResponse::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelResponse::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.payingCurrency)
}

// .io.stakenet.orderbook.protos.BigInteger capacity = 3;
inline bool GenerateInvoiceToRentChannelResponse::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GenerateInvoiceToRentChannelResponse::has_capacity() const {
  return _internal_has_capacity();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GenerateInvoiceToRentChannelResponse::_internal_capacity() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GenerateInvoiceToRentChannelResponse::capacity() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.capacity)
  return _internal_capacity();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelResponse::release_capacity() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.capacity)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelResponse::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GenerateInvoiceToRentChannelResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.capacity)
  return _internal_mutable_capacity();
}
inline void GenerateInvoiceToRentChannelResponse::set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GenerateInvoiceToRentChannelResponse::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelResponse::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelResponse::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GenerateInvoiceToRentChannelResponse::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GenerateInvoiceToRentChannelResponse::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.lifetimeSeconds)
}

// string paymentRequest = 5;
inline void GenerateInvoiceToRentChannelResponse::clear_paymentrequest() {
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelResponse::paymentrequest() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
  return _internal_paymentrequest();
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const std::string& value) {
  _internal_set_paymentrequest(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToRentChannelResponse::mutable_paymentrequest() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
  return _internal_mutable_paymentrequest();
}
inline const std::string& GenerateInvoiceToRentChannelResponse::_internal_paymentrequest() const {
  return paymentrequest_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelResponse::_internal_set_paymentrequest(const std::string& value) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(std::string&& value) {
  
  paymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const char* value, size_t size) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToRentChannelResponse::_internal_mutable_paymentrequest() {
  
  return paymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelResponse::release_paymentrequest() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
  
  return paymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelResponse::set_allocated_paymentrequest(std::string* paymentrequest) {
  if (paymentrequest != nullptr) {
    
  } else {
    
  }
  paymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymentrequest);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToRentChannelResponse.paymentRequest)
}

// -------------------------------------------------------------------

// GeneratePaymentHashToRentChannelCommand

// string currency = 1;
inline void GeneratePaymentHashToRentChannelCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToRentChannelCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
  return _internal_currency();
}
inline void GeneratePaymentHashToRentChannelCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
}
inline std::string* GeneratePaymentHashToRentChannelCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GeneratePaymentHashToRentChannelCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GeneratePaymentHashToRentChannelCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToRentChannelCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
}
inline void GeneratePaymentHashToRentChannelCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
}
inline void GeneratePaymentHashToRentChannelCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
}
inline std::string* GeneratePaymentHashToRentChannelCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToRentChannelCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToRentChannelCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.currency)
}

// string payingCurrency = 2;
inline void GeneratePaymentHashToRentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToRentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GeneratePaymentHashToRentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
}
inline std::string* GeneratePaymentHashToRentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GeneratePaymentHashToRentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GeneratePaymentHashToRentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToRentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
}
inline void GeneratePaymentHashToRentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
}
inline void GeneratePaymentHashToRentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
}
inline std::string* GeneratePaymentHashToRentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToRentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToRentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.payingCurrency)
}

// .io.stakenet.orderbook.protos.BigInteger capacity = 3;
inline bool GeneratePaymentHashToRentChannelCommand::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GeneratePaymentHashToRentChannelCommand::has_capacity() const {
  return _internal_has_capacity();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GeneratePaymentHashToRentChannelCommand::_internal_capacity() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GeneratePaymentHashToRentChannelCommand::capacity() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.capacity)
  return _internal_capacity();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelCommand::release_capacity() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.capacity)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelCommand::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelCommand::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.capacity)
  return _internal_mutable_capacity();
}
inline void GeneratePaymentHashToRentChannelCommand::set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GeneratePaymentHashToRentChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToRentChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToRentChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GeneratePaymentHashToRentChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GeneratePaymentHashToRentChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GeneratePaymentHashToRentChannelResponse

// string currency = 1;
inline void GeneratePaymentHashToRentChannelResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
  return _internal_currency();
}
inline void GeneratePaymentHashToRentChannelResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GeneratePaymentHashToRentChannelResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToRentChannelResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
}
inline void GeneratePaymentHashToRentChannelResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
}
inline void GeneratePaymentHashToRentChannelResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToRentChannelResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToRentChannelResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.currency)
}

// string payingCurrency = 2;
inline void GeneratePaymentHashToRentChannelResponse::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
  return _internal_payingcurrency();
}
inline void GeneratePaymentHashToRentChannelResponse::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GeneratePaymentHashToRentChannelResponse::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToRentChannelResponse::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
}
inline void GeneratePaymentHashToRentChannelResponse::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
}
inline void GeneratePaymentHashToRentChannelResponse::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToRentChannelResponse::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToRentChannelResponse::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.payingCurrency)
}

// .io.stakenet.orderbook.protos.BigInteger capacity = 3;
inline bool GeneratePaymentHashToRentChannelResponse::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GeneratePaymentHashToRentChannelResponse::has_capacity() const {
  return _internal_has_capacity();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GeneratePaymentHashToRentChannelResponse::_internal_capacity() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GeneratePaymentHashToRentChannelResponse::capacity() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.capacity)
  return _internal_capacity();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelResponse::release_capacity() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.capacity)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelResponse::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GeneratePaymentHashToRentChannelResponse::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.capacity)
  return _internal_mutable_capacity();
}
inline void GeneratePaymentHashToRentChannelResponse::set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GeneratePaymentHashToRentChannelResponse::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToRentChannelResponse::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToRentChannelResponse::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GeneratePaymentHashToRentChannelResponse::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GeneratePaymentHashToRentChannelResponse::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.lifetimeSeconds)
}

// bytes paymentHash = 5;
inline void GeneratePaymentHashToRentChannelResponse::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
  return _internal_paymenthash();
}
inline void GeneratePaymentHashToRentChannelResponse::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& GeneratePaymentHashToRentChannelResponse::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void GeneratePaymentHashToRentChannelResponse::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToRentChannelResponse::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
}
inline void GeneratePaymentHashToRentChannelResponse::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
}
inline void GeneratePaymentHashToRentChannelResponse::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
}
inline std::string* GeneratePaymentHashToRentChannelResponse::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToRentChannelResponse::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToRentChannelResponse::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToRentChannelResponse.paymentHash)
}

// -------------------------------------------------------------------

// RentChannelCommand

// bytes paymentHash = 1;
inline void RentChannelCommand::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelCommand::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
  return _internal_paymenthash();
}
inline void RentChannelCommand::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
}
inline std::string* RentChannelCommand::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& RentChannelCommand::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void RentChannelCommand::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelCommand::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
}
inline void RentChannelCommand::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
}
inline void RentChannelCommand::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
}
inline std::string* RentChannelCommand::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelCommand::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelCommand::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelCommand.paymentHash)
}

// string payingCurrency = 2;
inline void RentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void RentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
}
inline std::string* RentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& RentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void RentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
}
inline void RentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
}
inline void RentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
}
inline std::string* RentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelCommand.payingCurrency)
}

// -------------------------------------------------------------------

// RentChannelResponse

// bytes paymentHash = 1;
inline void RentChannelResponse::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
  return _internal_paymenthash();
}
inline void RentChannelResponse::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
}
inline std::string* RentChannelResponse::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& RentChannelResponse::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
}
inline void RentChannelResponse::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
}
inline void RentChannelResponse::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
}
inline std::string* RentChannelResponse::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.paymentHash)
}

// bytes nodePublicKey = 2;
inline void RentChannelResponse::clear_nodepublickey() {
  nodepublickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::nodepublickey() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
  return _internal_nodepublickey();
}
inline void RentChannelResponse::set_nodepublickey(const std::string& value) {
  _internal_set_nodepublickey(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
}
inline std::string* RentChannelResponse::mutable_nodepublickey() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
  return _internal_mutable_nodepublickey();
}
inline const std::string& RentChannelResponse::_internal_nodepublickey() const {
  return nodepublickey_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_nodepublickey(const std::string& value) {
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_nodepublickey(std::string&& value) {
  
  nodepublickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
}
inline void RentChannelResponse::set_nodepublickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
}
inline void RentChannelResponse::set_nodepublickey(const void* value, size_t size) {
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
}
inline std::string* RentChannelResponse::_internal_mutable_nodepublickey() {
  
  return nodepublickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_nodepublickey() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
  
  return nodepublickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_nodepublickey(std::string* nodepublickey) {
  if (nodepublickey != nullptr) {
    
  } else {
    
  }
  nodepublickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepublickey);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.nodePublicKey)
}

// string channelId = 3;
inline void RentChannelResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
  return _internal_channelid();
}
inline void RentChannelResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
}
inline std::string* RentChannelResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& RentChannelResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
}
inline void RentChannelResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
}
inline void RentChannelResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
}
inline std::string* RentChannelResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.channelId)
}

// bytes fundingTransaction = 4;
inline void RentChannelResponse::clear_fundingtransaction() {
  fundingtransaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::fundingtransaction() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
  return _internal_fundingtransaction();
}
inline void RentChannelResponse::set_fundingtransaction(const std::string& value) {
  _internal_set_fundingtransaction(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
}
inline std::string* RentChannelResponse::mutable_fundingtransaction() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
  return _internal_mutable_fundingtransaction();
}
inline const std::string& RentChannelResponse::_internal_fundingtransaction() const {
  return fundingtransaction_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_fundingtransaction(const std::string& value) {
  
  fundingtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_fundingtransaction(std::string&& value) {
  
  fundingtransaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
}
inline void RentChannelResponse::set_fundingtransaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fundingtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
}
inline void RentChannelResponse::set_fundingtransaction(const void* value, size_t size) {
  
  fundingtransaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
}
inline std::string* RentChannelResponse::_internal_mutable_fundingtransaction() {
  
  return fundingtransaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_fundingtransaction() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
  
  return fundingtransaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_fundingtransaction(std::string* fundingtransaction) {
  if (fundingtransaction != nullptr) {
    
  } else {
    
  }
  fundingtransaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundingtransaction);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.fundingTransaction)
}

// int32 outputIndex = 5;
inline void RentChannelResponse::clear_outputindex() {
  outputindex_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RentChannelResponse::_internal_outputindex() const {
  return outputindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RentChannelResponse::outputindex() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.outputIndex)
  return _internal_outputindex();
}
inline void RentChannelResponse::_internal_set_outputindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  outputindex_ = value;
}
inline void RentChannelResponse::set_outputindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_outputindex(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.outputIndex)
}

// string fundingTxidStr = 6;
inline void RentChannelResponse::clear_fundingtxidstr() {
  fundingtxidstr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::fundingtxidstr() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
  return _internal_fundingtxidstr();
}
inline void RentChannelResponse::set_fundingtxidstr(const std::string& value) {
  _internal_set_fundingtxidstr(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
}
inline std::string* RentChannelResponse::mutable_fundingtxidstr() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
  return _internal_mutable_fundingtxidstr();
}
inline const std::string& RentChannelResponse::_internal_fundingtxidstr() const {
  return fundingtxidstr_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_fundingtxidstr(const std::string& value) {
  
  fundingtxidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_fundingtxidstr(std::string&& value) {
  
  fundingtxidstr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
}
inline void RentChannelResponse::set_fundingtxidstr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fundingtxidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
}
inline void RentChannelResponse::set_fundingtxidstr(const char* value, size_t size) {
  
  fundingtxidstr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
}
inline std::string* RentChannelResponse::_internal_mutable_fundingtxidstr() {
  
  return fundingtxidstr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_fundingtxidstr() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
  
  return fundingtxidstr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_fundingtxidstr(std::string* fundingtxidstr) {
  if (fundingtxidstr != nullptr) {
    
  } else {
    
  }
  fundingtxidstr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundingtxidstr);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.fundingTxidStr)
}

// .io.stakenet.orderbook.protos.RentedChannel channel = 7;
inline bool RentChannelResponse::_internal_has_channel() const {
  return this != internal_default_instance() && channel_ != nullptr;
}
inline bool RentChannelResponse::has_channel() const {
  return _internal_has_channel();
}
inline const ::io::stakenet::orderbook::protos::RentedChannel& RentChannelResponse::_internal_channel() const {
  const ::io::stakenet::orderbook::protos::RentedChannel* p = channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::RentedChannel*>(
      &::io::stakenet::orderbook::protos::_RentedChannel_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::RentedChannel& RentChannelResponse::channel() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RentChannelResponse.channel)
  return _internal_channel();
}
inline ::io::stakenet::orderbook::protos::RentedChannel* RentChannelResponse::release_channel() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RentChannelResponse.channel)
  
  ::io::stakenet::orderbook::protos::RentedChannel* temp = channel_;
  channel_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::RentedChannel* RentChannelResponse::_internal_mutable_channel() {
  
  if (channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::RentedChannel>(GetArenaNoVirtual());
    channel_ = p;
  }
  return channel_;
}
inline ::io::stakenet::orderbook::protos::RentedChannel* RentChannelResponse::mutable_channel() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RentChannelResponse.channel)
  return _internal_mutable_channel();
}
inline void RentChannelResponse::set_allocated_channel(::io::stakenet::orderbook::protos::RentedChannel* channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_);
  }
  if (channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel, submessage_arena);
    }
    
  } else {
    
  }
  channel_ = channel;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RentChannelResponse.channel)
}

// -------------------------------------------------------------------

// GetChannelStatusCommand

// string channelId = 1;
inline void GetChannelStatusCommand::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetChannelStatusCommand::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
  return _internal_channelid();
}
inline void GetChannelStatusCommand::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
}
inline std::string* GetChannelStatusCommand::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GetChannelStatusCommand::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GetChannelStatusCommand::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetChannelStatusCommand::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
}
inline void GetChannelStatusCommand::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
}
inline void GetChannelStatusCommand::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
}
inline std::string* GetChannelStatusCommand::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetChannelStatusCommand::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetChannelStatusCommand::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetChannelStatusCommand.channelId)
}

// -------------------------------------------------------------------

// GetChannelStatusResponse

// string channelId = 1;
inline void GetChannelStatusResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetChannelStatusResponse::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
  return _internal_channelid();
}
inline void GetChannelStatusResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
}
inline std::string* GetChannelStatusResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GetChannelStatusResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GetChannelStatusResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetChannelStatusResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
}
inline void GetChannelStatusResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
}
inline void GetChannelStatusResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
}
inline std::string* GetChannelStatusResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetChannelStatusResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetChannelStatusResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetChannelStatusResponse.channelId)
}

// .io.stakenet.orderbook.protos.LndChannelStatus lnd = 7;
inline bool GetChannelStatusResponse::_internal_has_lnd() const {
  return status_case() == kLnd;
}
inline bool GetChannelStatusResponse::has_lnd() const {
  return _internal_has_lnd();
}
inline void GetChannelStatusResponse::set_has_lnd() {
  _oneof_case_[0] = kLnd;
}
inline void GetChannelStatusResponse::clear_lnd() {
  if (_internal_has_lnd()) {
    delete status_.lnd_;
    clear_has_status();
  }
}
inline ::io::stakenet::orderbook::protos::LndChannelStatus* GetChannelStatusResponse::release_lnd() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetChannelStatusResponse.lnd)
  if (_internal_has_lnd()) {
    clear_has_status();
      ::io::stakenet::orderbook::protos::LndChannelStatus* temp = status_.lnd_;
    status_.lnd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::LndChannelStatus& GetChannelStatusResponse::_internal_lnd() const {
  return _internal_has_lnd()
      ? *status_.lnd_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::LndChannelStatus*>(&::io::stakenet::orderbook::protos::_LndChannelStatus_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::LndChannelStatus& GetChannelStatusResponse::lnd() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetChannelStatusResponse.lnd)
  return _internal_lnd();
}
inline ::io::stakenet::orderbook::protos::LndChannelStatus* GetChannelStatusResponse::_internal_mutable_lnd() {
  if (!_internal_has_lnd()) {
    clear_status();
    set_has_lnd();
    status_.lnd_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::LndChannelStatus >(
        GetArenaNoVirtual());
  }
  return status_.lnd_;
}
inline ::io::stakenet::orderbook::protos::LndChannelStatus* GetChannelStatusResponse::mutable_lnd() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetChannelStatusResponse.lnd)
  return _internal_mutable_lnd();
}

// .io.stakenet.orderbook.protos.ConnextChannelStatus connext = 8;
inline bool GetChannelStatusResponse::_internal_has_connext() const {
  return status_case() == kConnext;
}
inline bool GetChannelStatusResponse::has_connext() const {
  return _internal_has_connext();
}
inline void GetChannelStatusResponse::set_has_connext() {
  _oneof_case_[0] = kConnext;
}
inline void GetChannelStatusResponse::clear_connext() {
  if (_internal_has_connext()) {
    delete status_.connext_;
    clear_has_status();
  }
}
inline ::io::stakenet::orderbook::protos::ConnextChannelStatus* GetChannelStatusResponse::release_connext() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetChannelStatusResponse.connext)
  if (_internal_has_connext()) {
    clear_has_status();
      ::io::stakenet::orderbook::protos::ConnextChannelStatus* temp = status_.connext_;
    status_.connext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::io::stakenet::orderbook::protos::ConnextChannelStatus& GetChannelStatusResponse::_internal_connext() const {
  return _internal_has_connext()
      ? *status_.connext_
      : *reinterpret_cast< ::io::stakenet::orderbook::protos::ConnextChannelStatus*>(&::io::stakenet::orderbook::protos::_ConnextChannelStatus_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::ConnextChannelStatus& GetChannelStatusResponse::connext() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetChannelStatusResponse.connext)
  return _internal_connext();
}
inline ::io::stakenet::orderbook::protos::ConnextChannelStatus* GetChannelStatusResponse::_internal_mutable_connext() {
  if (!_internal_has_connext()) {
    clear_status();
    set_has_connext();
    status_.connext_ = CreateMaybeMessage< ::io::stakenet::orderbook::protos::ConnextChannelStatus >(
        GetArenaNoVirtual());
  }
  return status_.connext_;
}
inline ::io::stakenet::orderbook::protos::ConnextChannelStatus* GetChannelStatusResponse::mutable_connext() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetChannelStatusResponse.connext)
  return _internal_mutable_connext();
}

inline bool GetChannelStatusResponse::has_status() const {
  return status_case() != STATUS_NOT_SET;
}
inline void GetChannelStatusResponse::clear_has_status() {
  _oneof_case_[0] = STATUS_NOT_SET;
}
inline GetChannelStatusResponse::StatusCase GetChannelStatusResponse::status_case() const {
  return GetChannelStatusResponse::StatusCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LndChannelStatus

// string status = 1;
inline void LndChannelStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LndChannelStatus::status() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.LndChannelStatus.status)
  return _internal_status();
}
inline void LndChannelStatus::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.LndChannelStatus.status)
}
inline std::string* LndChannelStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.LndChannelStatus.status)
  return _internal_mutable_status();
}
inline const std::string& LndChannelStatus::_internal_status() const {
  return status_.GetNoArena();
}
inline void LndChannelStatus::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndChannelStatus::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.LndChannelStatus.status)
}
inline void LndChannelStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.LndChannelStatus.status)
}
inline void LndChannelStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.LndChannelStatus.status)
}
inline std::string* LndChannelStatus::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndChannelStatus::release_status() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.LndChannelStatus.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LndChannelStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.LndChannelStatus.status)
}

// int64 expiresAt = 2;
inline void LndChannelStatus::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LndChannelStatus::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LndChannelStatus::expiresat() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.LndChannelStatus.expiresAt)
  return _internal_expiresat();
}
inline void LndChannelStatus::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresat_ = value;
}
inline void LndChannelStatus::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.LndChannelStatus.expiresAt)
}

// string closingType = 3;
inline void LndChannelStatus::clear_closingtype() {
  closingtype_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LndChannelStatus::closingtype() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
  return _internal_closingtype();
}
inline void LndChannelStatus::set_closingtype(const std::string& value) {
  _internal_set_closingtype(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
}
inline std::string* LndChannelStatus::mutable_closingtype() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
  return _internal_mutable_closingtype();
}
inline const std::string& LndChannelStatus::_internal_closingtype() const {
  return closingtype_.GetNoArena();
}
inline void LndChannelStatus::_internal_set_closingtype(const std::string& value) {
  
  closingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndChannelStatus::set_closingtype(std::string&& value) {
  
  closingtype_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
}
inline void LndChannelStatus::set_closingtype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
}
inline void LndChannelStatus::set_closingtype(const char* value, size_t size) {
  
  closingtype_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
}
inline std::string* LndChannelStatus::_internal_mutable_closingtype() {
  
  return closingtype_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndChannelStatus::release_closingtype() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
  
  return closingtype_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LndChannelStatus::set_allocated_closingtype(std::string* closingtype) {
  if (closingtype != nullptr) {
    
  } else {
    
  }
  closingtype_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closingtype);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.LndChannelStatus.closingType)
}

// string closedBy = 4;
inline void LndChannelStatus::clear_closedby() {
  closedby_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LndChannelStatus::closedby() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
  return _internal_closedby();
}
inline void LndChannelStatus::set_closedby(const std::string& value) {
  _internal_set_closedby(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
}
inline std::string* LndChannelStatus::mutable_closedby() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
  return _internal_mutable_closedby();
}
inline const std::string& LndChannelStatus::_internal_closedby() const {
  return closedby_.GetNoArena();
}
inline void LndChannelStatus::_internal_set_closedby(const std::string& value) {
  
  closedby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndChannelStatus::set_closedby(std::string&& value) {
  
  closedby_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
}
inline void LndChannelStatus::set_closedby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  closedby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
}
inline void LndChannelStatus::set_closedby(const char* value, size_t size) {
  
  closedby_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
}
inline std::string* LndChannelStatus::_internal_mutable_closedby() {
  
  return closedby_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndChannelStatus::release_closedby() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
  
  return closedby_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LndChannelStatus::set_allocated_closedby(std::string* closedby) {
  if (closedby != nullptr) {
    
  } else {
    
  }
  closedby_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closedby);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.LndChannelStatus.closedBy)
}

// int64 closedOn = 5;
inline void LndChannelStatus::clear_closedon() {
  closedon_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LndChannelStatus::_internal_closedon() const {
  return closedon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LndChannelStatus::closedon() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.LndChannelStatus.closedOn)
  return _internal_closedon();
}
inline void LndChannelStatus::_internal_set_closedon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  closedon_ = value;
}
inline void LndChannelStatus::set_closedon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_closedon(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.LndChannelStatus.closedOn)
}

// -------------------------------------------------------------------

// ConnextChannelStatus

// string status = 1;
inline void ConnextChannelStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextChannelStatus::status() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
  return _internal_status();
}
inline void ConnextChannelStatus::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
}
inline std::string* ConnextChannelStatus::mutable_status() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
  return _internal_mutable_status();
}
inline const std::string& ConnextChannelStatus::_internal_status() const {
  return status_.GetNoArena();
}
inline void ConnextChannelStatus::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextChannelStatus::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
}
inline void ConnextChannelStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
}
inline void ConnextChannelStatus::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
}
inline std::string* ConnextChannelStatus::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextChannelStatus::release_status() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextChannelStatus::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.ConnextChannelStatus.status)
}

// int64 expiresAt = 2;
inline void ConnextChannelStatus::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConnextChannelStatus::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ConnextChannelStatus::expiresat() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ConnextChannelStatus.expiresAt)
  return _internal_expiresat();
}
inline void ConnextChannelStatus::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresat_ = value;
}
inline void ConnextChannelStatus::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ConnextChannelStatus.expiresAt)
}

// -------------------------------------------------------------------

// GetFeeToRentChannelCommand

// string currency = 1;
inline void GetFeeToRentChannelCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToRentChannelCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
  return _internal_currency();
}
inline void GetFeeToRentChannelCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
}
inline std::string* GetFeeToRentChannelCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetFeeToRentChannelCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetFeeToRentChannelCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToRentChannelCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
}
inline void GetFeeToRentChannelCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
}
inline void GetFeeToRentChannelCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
}
inline std::string* GetFeeToRentChannelCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToRentChannelCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToRentChannelCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.currency)
}

// string payingCurrency = 2;
inline void GetFeeToRentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToRentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
}
inline std::string* GetFeeToRentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GetFeeToRentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GetFeeToRentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
}
inline std::string* GetFeeToRentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToRentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToRentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.payingCurrency)
}

// .io.stakenet.orderbook.protos.BigInteger capacity = 3;
inline bool GetFeeToRentChannelCommand::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GetFeeToRentChannelCommand::has_capacity() const {
  return _internal_has_capacity();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelCommand::_internal_capacity() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelCommand::capacity() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.capacity)
  return _internal_capacity();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelCommand::release_capacity() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.capacity)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelCommand::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelCommand::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.capacity)
  return _internal_mutable_capacity();
}
inline void GetFeeToRentChannelCommand::set_allocated_capacity(::io::stakenet::orderbook::protos::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capacity_);
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GetFeeToRentChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToRentChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToRentChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GetFeeToRentChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GetFeeToRentChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToRentChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GetFeeToRentChannelResponse

// .io.stakenet.orderbook.protos.BigInteger fee = 1;
inline bool GetFeeToRentChannelResponse::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_fee() const {
  return _internal_has_fee();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::_internal_fee() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = fee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::fee() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.fee)
  return _internal_fee();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::release_fee() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.fee)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    fee_ = p;
  }
  return fee_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.fee)
  return _internal_mutable_fee();
}
inline void GetFeeToRentChannelResponse::set_allocated_fee(::io::stakenet::orderbook::protos::BigInteger* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.fee)
}

// .io.stakenet.orderbook.protos.BigInteger rentingFee = 2;
inline bool GetFeeToRentChannelResponse::_internal_has_rentingfee() const {
  return this != internal_default_instance() && rentingfee_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_rentingfee() const {
  return _internal_has_rentingfee();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::_internal_rentingfee() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = rentingfee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::rentingfee() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.rentingFee)
  return _internal_rentingfee();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::release_rentingfee() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.rentingFee)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = rentingfee_;
  rentingfee_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_rentingfee() {
  
  if (rentingfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    rentingfee_ = p;
  }
  return rentingfee_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::mutable_rentingfee() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.rentingFee)
  return _internal_mutable_rentingfee();
}
inline void GetFeeToRentChannelResponse::set_allocated_rentingfee(::io::stakenet::orderbook::protos::BigInteger* rentingfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rentingfee_);
  }
  if (rentingfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rentingfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rentingfee, submessage_arena);
    }
    
  } else {
    
  }
  rentingfee_ = rentingfee;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.rentingFee)
}

// .io.stakenet.orderbook.protos.BigInteger onChainFees = 3;
inline bool GetFeeToRentChannelResponse::_internal_has_onchainfees() const {
  return this != internal_default_instance() && onchainfees_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_onchainfees() const {
  return _internal_has_onchainfees();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::_internal_onchainfees() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = onchainfees_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToRentChannelResponse::onchainfees() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.onChainFees)
  return _internal_onchainfees();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::release_onchainfees() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.onChainFees)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = onchainfees_;
  onchainfees_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_onchainfees() {
  
  if (onchainfees_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    onchainfees_ = p;
  }
  return onchainfees_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToRentChannelResponse::mutable_onchainfees() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.onChainFees)
  return _internal_mutable_onchainfees();
}
inline void GetFeeToRentChannelResponse::set_allocated_onchainfees(::io::stakenet::orderbook::protos::BigInteger* onchainfees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(onchainfees_);
  }
  if (onchainfees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      onchainfees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onchainfees, submessage_arena);
    }
    
  } else {
    
  }
  onchainfees_ = onchainfees;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToRentChannelResponse.onChainFees)
}

// -------------------------------------------------------------------

// RefundFeeCommand

// string currency = 2;
inline void RefundFeeCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundFeeCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
  return _internal_currency();
}
inline void RefundFeeCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
}
inline std::string* RefundFeeCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& RefundFeeCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RefundFeeCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundFeeCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
}
inline void RefundFeeCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
}
inline void RefundFeeCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
}
inline std::string* RefundFeeCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundFeeCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundFeeCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RefundFeeCommand.currency)
}

// bytes refundedPaymentHash = 4;
inline void RefundFeeCommand::clear_refundedpaymenthash() {
  refundedpaymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundFeeCommand::refundedpaymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
  return _internal_refundedpaymenthash();
}
inline void RefundFeeCommand::set_refundedpaymenthash(const std::string& value) {
  _internal_set_refundedpaymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
}
inline std::string* RefundFeeCommand::mutable_refundedpaymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
  return _internal_mutable_refundedpaymenthash();
}
inline const std::string& RefundFeeCommand::_internal_refundedpaymenthash() const {
  return refundedpaymenthash_.GetNoArena();
}
inline void RefundFeeCommand::_internal_set_refundedpaymenthash(const std::string& value) {
  
  refundedpaymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundFeeCommand::set_refundedpaymenthash(std::string&& value) {
  
  refundedpaymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
}
inline void RefundFeeCommand::set_refundedpaymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  refundedpaymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
}
inline void RefundFeeCommand::set_refundedpaymenthash(const void* value, size_t size) {
  
  refundedpaymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
}
inline std::string* RefundFeeCommand::_internal_mutable_refundedpaymenthash() {
  
  return refundedpaymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundFeeCommand::release_refundedpaymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
  
  return refundedpaymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundFeeCommand::set_allocated_refundedpaymenthash(std::string* refundedpaymenthash) {
  if (refundedpaymenthash != nullptr) {
    
  } else {
    
  }
  refundedpaymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refundedpaymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RefundFeeCommand.refundedPaymentHash)
}

// repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 5;
inline int RefundFeeCommand::_internal_refundedfees_size() const {
  return refundedfees_.size();
}
inline int RefundFeeCommand::refundedfees_size() const {
  return _internal_refundedfees_size();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeCommand::mutable_refundedfees(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeCommand.refundedFees)
  return refundedfees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
RefundFeeCommand::mutable_refundedfees() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.RefundFeeCommand.refundedFees)
  return &refundedfees_;
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& RefundFeeCommand::_internal_refundedfees(int index) const {
  return refundedfees_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& RefundFeeCommand::refundedfees(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeCommand.refundedFees)
  return _internal_refundedfees(index);
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeCommand::_internal_add_refundedfees() {
  return refundedfees_.Add();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeCommand::add_refundedfees() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.RefundFeeCommand.refundedFees)
  return _internal_add_refundedfees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
RefundFeeCommand::refundedfees() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.RefundFeeCommand.refundedFees)
  return refundedfees_;
}

// -------------------------------------------------------------------

// RefundFeeResponse

// string currency = 2;
inline void RefundFeeResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundFeeResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
  return _internal_currency();
}
inline void RefundFeeResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
}
inline std::string* RefundFeeResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& RefundFeeResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RefundFeeResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundFeeResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
}
inline void RefundFeeResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
}
inline void RefundFeeResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
}
inline std::string* RefundFeeResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundFeeResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundFeeResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RefundFeeResponse.currency)
}

// .io.stakenet.orderbook.protos.BigInteger amount = 3;
inline bool RefundFeeResponse::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool RefundFeeResponse::has_amount() const {
  return _internal_has_amount();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& RefundFeeResponse::_internal_amount() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& RefundFeeResponse::amount() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeResponse.amount)
  return _internal_amount();
}
inline ::io::stakenet::orderbook::protos::BigInteger* RefundFeeResponse::release_amount() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RefundFeeResponse.amount)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* RefundFeeResponse::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* RefundFeeResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeResponse.amount)
  return _internal_mutable_amount();
}
inline void RefundFeeResponse::set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RefundFeeResponse.amount)
}

// int64 refundedOn = 5;
inline void RefundFeeResponse::clear_refundedon() {
  refundedon_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundFeeResponse::_internal_refundedon() const {
  return refundedon_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundFeeResponse::refundedon() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeResponse.refundedOn)
  return _internal_refundedon();
}
inline void RefundFeeResponse::_internal_set_refundedon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  refundedon_ = value;
}
inline void RefundFeeResponse::set_refundedon(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_refundedon(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RefundFeeResponse.refundedOn)
}

// repeated .io.stakenet.orderbook.protos.RefundablePayment refundedFees = 6;
inline int RefundFeeResponse::_internal_refundedfees_size() const {
  return refundedfees_.size();
}
inline int RefundFeeResponse::refundedfees_size() const {
  return _internal_refundedfees_size();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeResponse::mutable_refundedfees(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RefundFeeResponse.refundedFees)
  return refundedfees_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
RefundFeeResponse::mutable_refundedfees() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.RefundFeeResponse.refundedFees)
  return &refundedfees_;
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& RefundFeeResponse::_internal_refundedfees(int index) const {
  return refundedfees_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& RefundFeeResponse::refundedfees(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RefundFeeResponse.refundedFees)
  return _internal_refundedfees(index);
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeResponse::_internal_add_refundedfees() {
  return refundedfees_.Add();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* RefundFeeResponse::add_refundedfees() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.RefundFeeResponse.refundedFees)
  return _internal_add_refundedfees();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
RefundFeeResponse::refundedfees() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.RefundFeeResponse.refundedFees)
  return refundedfees_;
}

// -------------------------------------------------------------------

// GetRefundableAmountCommand

// string currency = 1;
inline void GetRefundableAmountCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRefundableAmountCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
  return _internal_currency();
}
inline void GetRefundableAmountCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
}
inline std::string* GetRefundableAmountCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetRefundableAmountCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetRefundableAmountCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRefundableAmountCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
}
inline void GetRefundableAmountCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
}
inline void GetRefundableAmountCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
}
inline std::string* GetRefundableAmountCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRefundableAmountCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRefundableAmountCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetRefundableAmountCommand.currency)
}

// bytes paymentHash = 2;
inline void GetRefundableAmountCommand::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRefundableAmountCommand::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
  return _internal_paymenthash();
}
inline void GetRefundableAmountCommand::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
}
inline std::string* GetRefundableAmountCommand::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& GetRefundableAmountCommand::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void GetRefundableAmountCommand::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRefundableAmountCommand::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
}
inline void GetRefundableAmountCommand::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
}
inline void GetRefundableAmountCommand::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
}
inline std::string* GetRefundableAmountCommand::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRefundableAmountCommand::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRefundableAmountCommand::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetRefundableAmountCommand.paymentHash)
}

// repeated .io.stakenet.orderbook.protos.RefundablePayment refundablePayments = 3;
inline int GetRefundableAmountCommand::_internal_refundablepayments_size() const {
  return refundablepayments_.size();
}
inline int GetRefundableAmountCommand::refundablepayments_size() const {
  return _internal_refundablepayments_size();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* GetRefundableAmountCommand::mutable_refundablepayments(int index) {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetRefundableAmountCommand.refundablePayments)
  return refundablepayments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >*
GetRefundableAmountCommand::mutable_refundablepayments() {
  // @@protoc_insertion_point(field_mutable_list:io.stakenet.orderbook.protos.GetRefundableAmountCommand.refundablePayments)
  return &refundablepayments_;
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& GetRefundableAmountCommand::_internal_refundablepayments(int index) const {
  return refundablepayments_.Get(index);
}
inline const ::io::stakenet::orderbook::protos::RefundablePayment& GetRefundableAmountCommand::refundablepayments(int index) const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetRefundableAmountCommand.refundablePayments)
  return _internal_refundablepayments(index);
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* GetRefundableAmountCommand::_internal_add_refundablepayments() {
  return refundablepayments_.Add();
}
inline ::io::stakenet::orderbook::protos::RefundablePayment* GetRefundableAmountCommand::add_refundablepayments() {
  // @@protoc_insertion_point(field_add:io.stakenet.orderbook.protos.GetRefundableAmountCommand.refundablePayments)
  return _internal_add_refundablepayments();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::io::stakenet::orderbook::protos::RefundablePayment >&
GetRefundableAmountCommand::refundablepayments() const {
  // @@protoc_insertion_point(field_list:io.stakenet.orderbook.protos.GetRefundableAmountCommand.refundablePayments)
  return refundablepayments_;
}

// -------------------------------------------------------------------

// GetRefundableAmountResponse

// string currency = 1;
inline void GetRefundableAmountResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetRefundableAmountResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
  return _internal_currency();
}
inline void GetRefundableAmountResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
}
inline std::string* GetRefundableAmountResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetRefundableAmountResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetRefundableAmountResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetRefundableAmountResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
}
inline void GetRefundableAmountResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
}
inline void GetRefundableAmountResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
}
inline std::string* GetRefundableAmountResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetRefundableAmountResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetRefundableAmountResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetRefundableAmountResponse.currency)
}

// .io.stakenet.orderbook.protos.BigInteger amount = 3;
inline bool GetRefundableAmountResponse::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool GetRefundableAmountResponse::has_amount() const {
  return _internal_has_amount();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetRefundableAmountResponse::_internal_amount() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetRefundableAmountResponse::amount() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetRefundableAmountResponse.amount)
  return _internal_amount();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetRefundableAmountResponse::release_amount() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetRefundableAmountResponse.amount)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetRefundableAmountResponse::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetRefundableAmountResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetRefundableAmountResponse.amount)
  return _internal_mutable_amount();
}
inline void GetRefundableAmountResponse::set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetRefundableAmountResponse.amount)
}

// -------------------------------------------------------------------

// GenerateInvoiceToExtendRentedChannelCommand

// string channelId = 1;
inline void GenerateInvoiceToExtendRentedChannelCommand::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToExtendRentedChannelCommand::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
  return _internal_channelid();
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GenerateInvoiceToExtendRentedChannelCommand::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GenerateInvoiceToExtendRentedChannelCommand::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.channelId)
}

// string payingCurrency = 2;
inline void GenerateInvoiceToExtendRentedChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToExtendRentedChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GenerateInvoiceToExtendRentedChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GenerateInvoiceToExtendRentedChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToExtendRentedChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.payingCurrency)
}

// int64 lifetimeSeconds = 3;
inline void GenerateInvoiceToExtendRentedChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToExtendRentedChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToExtendRentedChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GenerateInvoiceToExtendRentedChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GenerateInvoiceToExtendRentedChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GenerateInvoiceToExtendRentedChannelResponse

// string channelId = 1;
inline void GenerateInvoiceToExtendRentedChannelResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
  return _internal_channelid();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.channelId)
}

// string payingCurrency = 2;
inline void GenerateInvoiceToExtendRentedChannelResponse::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
  return _internal_payingcurrency();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.payingCurrency)
}

// int64 lifetimeSeconds = 3;
inline void GenerateInvoiceToExtendRentedChannelResponse::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToExtendRentedChannelResponse::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToExtendRentedChannelResponse::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.lifetimeSeconds)
}

// string paymentRequest = 4;
inline void GenerateInvoiceToExtendRentedChannelResponse::clear_paymentrequest() {
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::paymentrequest() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
  return _internal_paymentrequest();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_paymentrequest(const std::string& value) {
  _internal_set_paymentrequest(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::mutable_paymentrequest() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
  return _internal_mutable_paymentrequest();
}
inline const std::string& GenerateInvoiceToExtendRentedChannelResponse::_internal_paymentrequest() const {
  return paymentrequest_.GetNoArena();
}
inline void GenerateInvoiceToExtendRentedChannelResponse::_internal_set_paymentrequest(const std::string& value) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_paymentrequest(std::string&& value) {
  
  paymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_paymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_paymentrequest(const char* value, size_t size) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::_internal_mutable_paymentrequest() {
  
  return paymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToExtendRentedChannelResponse::release_paymentrequest() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
  
  return paymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToExtendRentedChannelResponse::set_allocated_paymentrequest(std::string* paymentrequest) {
  if (paymentrequest != nullptr) {
    
  } else {
    
  }
  paymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymentrequest);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GenerateInvoiceToExtendRentedChannelResponse.paymentRequest)
}

// -------------------------------------------------------------------

// GeneratePaymentHashToExtendConnextRentedChannelCommand

// string channelId = 1;
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelCommand::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
  return _internal_channelid();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.channelId)
}

// string payingCurrency = 2;
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.payingCurrency)
}

// int64 lifetimeSeconds = 3;
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToExtendConnextRentedChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GeneratePaymentHashToExtendConnextRentedChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GeneratePaymentHashToExtendConnextRentedChannelResponse

// string channelId = 1;
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
  return _internal_channelid();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.channelId)
}

// string payingCurrency = 2;
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
  return _internal_payingcurrency();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.payingCurrency)
}

// int64 lifetimeSeconds = 3;
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GeneratePaymentHashToExtendConnextRentedChannelResponse::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.lifetimeSeconds)
}

// bytes paymentHash = 4;
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
  return _internal_paymenthash();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeneratePaymentHashToExtendConnextRentedChannelResponse::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeneratePaymentHashToExtendConnextRentedChannelResponse::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GeneratePaymentHashToExtendConnextRentedChannelResponse.paymentHash)
}

// -------------------------------------------------------------------

// GetFeeToExtendRentedChannelCommand

// string channelId = 1;
inline void GetFeeToExtendRentedChannelCommand::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToExtendRentedChannelCommand::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
  return _internal_channelid();
}
inline void GetFeeToExtendRentedChannelCommand::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
}
inline std::string* GetFeeToExtendRentedChannelCommand::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GetFeeToExtendRentedChannelCommand::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GetFeeToExtendRentedChannelCommand::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToExtendRentedChannelCommand::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
}
inline void GetFeeToExtendRentedChannelCommand::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
}
inline void GetFeeToExtendRentedChannelCommand::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
}
inline std::string* GetFeeToExtendRentedChannelCommand::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToExtendRentedChannelCommand::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToExtendRentedChannelCommand::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.channelId)
}

// string payingCurrency = 2;
inline void GetFeeToExtendRentedChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToExtendRentedChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GetFeeToExtendRentedChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
}
inline std::string* GetFeeToExtendRentedChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GetFeeToExtendRentedChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GetFeeToExtendRentedChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToExtendRentedChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
}
inline void GetFeeToExtendRentedChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
}
inline void GetFeeToExtendRentedChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
}
inline std::string* GetFeeToExtendRentedChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToExtendRentedChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToExtendRentedChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.payingCurrency)
}

// int64 lifetimeSeconds = 3;
inline void GetFeeToExtendRentedChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToExtendRentedChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToExtendRentedChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GetFeeToExtendRentedChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GetFeeToExtendRentedChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GetFeeToExtendRentedChannelResponse

// .io.stakenet.orderbook.protos.BigInteger fee = 1;
inline bool GetFeeToExtendRentedChannelResponse::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool GetFeeToExtendRentedChannelResponse::has_fee() const {
  return _internal_has_fee();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToExtendRentedChannelResponse::_internal_fee() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = fee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetFeeToExtendRentedChannelResponse::fee() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse.fee)
  return _internal_fee();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToExtendRentedChannelResponse::release_fee() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse.fee)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToExtendRentedChannelResponse::_internal_mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    fee_ = p;
  }
  return fee_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetFeeToExtendRentedChannelResponse::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse.fee)
  return _internal_mutable_fee();
}
inline void GetFeeToExtendRentedChannelResponse::set_allocated_fee(::io::stakenet::orderbook::protos::BigInteger* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(fee_);
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetFeeToExtendRentedChannelResponse.fee)
}

// -------------------------------------------------------------------

// ExtendRentedChannelTimeCommand

// bytes paymentHash = 1;
inline void ExtendRentedChannelTimeCommand::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtendRentedChannelTimeCommand::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
  return _internal_paymenthash();
}
inline void ExtendRentedChannelTimeCommand::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
}
inline std::string* ExtendRentedChannelTimeCommand::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& ExtendRentedChannelTimeCommand::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void ExtendRentedChannelTimeCommand::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtendRentedChannelTimeCommand::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
}
inline void ExtendRentedChannelTimeCommand::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
}
inline void ExtendRentedChannelTimeCommand::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
}
inline std::string* ExtendRentedChannelTimeCommand::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtendRentedChannelTimeCommand::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtendRentedChannelTimeCommand::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.paymentHash)
}

// string payingCurrency = 2;
inline void ExtendRentedChannelTimeCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtendRentedChannelTimeCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void ExtendRentedChannelTimeCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
}
inline std::string* ExtendRentedChannelTimeCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& ExtendRentedChannelTimeCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void ExtendRentedChannelTimeCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtendRentedChannelTimeCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
}
inline void ExtendRentedChannelTimeCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
}
inline void ExtendRentedChannelTimeCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
}
inline std::string* ExtendRentedChannelTimeCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtendRentedChannelTimeCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtendRentedChannelTimeCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.ExtendRentedChannelTimeCommand.payingCurrency)
}

// -------------------------------------------------------------------

// ExtendRentedChannelTimeResponse

// bytes paymentHash = 1;
inline void ExtendRentedChannelTimeResponse::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtendRentedChannelTimeResponse::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
  return _internal_paymenthash();
}
inline void ExtendRentedChannelTimeResponse::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
}
inline std::string* ExtendRentedChannelTimeResponse::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& ExtendRentedChannelTimeResponse::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void ExtendRentedChannelTimeResponse::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtendRentedChannelTimeResponse::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
}
inline void ExtendRentedChannelTimeResponse::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
}
inline void ExtendRentedChannelTimeResponse::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
}
inline std::string* ExtendRentedChannelTimeResponse::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtendRentedChannelTimeResponse::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtendRentedChannelTimeResponse::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.paymentHash)
}

// string channelId = 2;
inline void ExtendRentedChannelTimeResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExtendRentedChannelTimeResponse::channelid() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
  return _internal_channelid();
}
inline void ExtendRentedChannelTimeResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
}
inline std::string* ExtendRentedChannelTimeResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& ExtendRentedChannelTimeResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void ExtendRentedChannelTimeResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExtendRentedChannelTimeResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
}
inline void ExtendRentedChannelTimeResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
}
inline void ExtendRentedChannelTimeResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
}
inline std::string* ExtendRentedChannelTimeResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExtendRentedChannelTimeResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExtendRentedChannelTimeResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.channelId)
}

// int64 expiresAt = 3;
inline void ExtendRentedChannelTimeResponse::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExtendRentedChannelTimeResponse::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ExtendRentedChannelTimeResponse::expiresat() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.expiresAt)
  return _internal_expiresat();
}
inline void ExtendRentedChannelTimeResponse::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresat_ = value;
}
inline void ExtendRentedChannelTimeResponse::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.ExtendRentedChannelTimeResponse.expiresAt)
}

// -------------------------------------------------------------------

// RegisterPublicKeyCommand

// string currency = 1;
inline void RegisterPublicKeyCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicKeyCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
  return _internal_currency();
}
inline void RegisterPublicKeyCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
}
inline std::string* RegisterPublicKeyCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& RegisterPublicKeyCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RegisterPublicKeyCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicKeyCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
}
inline void RegisterPublicKeyCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
}
inline void RegisterPublicKeyCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
}
inline std::string* RegisterPublicKeyCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicKeyCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicKeyCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.currency)
}

// bytes publicKey = 2;
inline void RegisterPublicKeyCommand::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicKeyCommand::publickey() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
  return _internal_publickey();
}
inline void RegisterPublicKeyCommand::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
}
inline std::string* RegisterPublicKeyCommand::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& RegisterPublicKeyCommand::_internal_publickey() const {
  return publickey_.GetNoArena();
}
inline void RegisterPublicKeyCommand::_internal_set_publickey(const std::string& value) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicKeyCommand::set_publickey(std::string&& value) {
  
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
}
inline void RegisterPublicKeyCommand::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
}
inline void RegisterPublicKeyCommand::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
}
inline std::string* RegisterPublicKeyCommand::_internal_mutable_publickey() {
  
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicKeyCommand::release_publickey() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
  
  return publickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicKeyCommand::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicKeyCommand.publicKey)
}

// -------------------------------------------------------------------

// RegisterPublicKeyResponse

// string currency = 1;
inline void RegisterPublicKeyResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicKeyResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
  return _internal_currency();
}
inline void RegisterPublicKeyResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
}
inline std::string* RegisterPublicKeyResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& RegisterPublicKeyResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RegisterPublicKeyResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicKeyResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
}
inline void RegisterPublicKeyResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
}
inline void RegisterPublicKeyResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
}
inline std::string* RegisterPublicKeyResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicKeyResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicKeyResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.currency)
}

// bytes publicKey = 2;
inline void RegisterPublicKeyResponse::clear_publickey() {
  publickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicKeyResponse::publickey() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
  return _internal_publickey();
}
inline void RegisterPublicKeyResponse::set_publickey(const std::string& value) {
  _internal_set_publickey(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
}
inline std::string* RegisterPublicKeyResponse::mutable_publickey() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
  return _internal_mutable_publickey();
}
inline const std::string& RegisterPublicKeyResponse::_internal_publickey() const {
  return publickey_.GetNoArena();
}
inline void RegisterPublicKeyResponse::_internal_set_publickey(const std::string& value) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicKeyResponse::set_publickey(std::string&& value) {
  
  publickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
}
inline void RegisterPublicKeyResponse::set_publickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
}
inline void RegisterPublicKeyResponse::set_publickey(const void* value, size_t size) {
  
  publickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
}
inline std::string* RegisterPublicKeyResponse::_internal_mutable_publickey() {
  
  return publickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicKeyResponse::release_publickey() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
  
  return publickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicKeyResponse::set_allocated_publickey(std::string* publickey) {
  if (publickey != nullptr) {
    
  } else {
    
  }
  publickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publickey);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicKeyResponse.publicKey)
}

// -------------------------------------------------------------------

// RegisterPublicIdentifierCommand

// string currency = 1;
inline void RegisterPublicIdentifierCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicIdentifierCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
  return _internal_currency();
}
inline void RegisterPublicIdentifierCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
}
inline std::string* RegisterPublicIdentifierCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& RegisterPublicIdentifierCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RegisterPublicIdentifierCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicIdentifierCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
}
inline void RegisterPublicIdentifierCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
}
inline void RegisterPublicIdentifierCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
}
inline std::string* RegisterPublicIdentifierCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicIdentifierCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicIdentifierCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.currency)
}

// string publicIdentifier = 2;
inline void RegisterPublicIdentifierCommand::clear_publicidentifier() {
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicIdentifierCommand::publicidentifier() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
  return _internal_publicidentifier();
}
inline void RegisterPublicIdentifierCommand::set_publicidentifier(const std::string& value) {
  _internal_set_publicidentifier(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
}
inline std::string* RegisterPublicIdentifierCommand::mutable_publicidentifier() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
  return _internal_mutable_publicidentifier();
}
inline const std::string& RegisterPublicIdentifierCommand::_internal_publicidentifier() const {
  return publicidentifier_.GetNoArena();
}
inline void RegisterPublicIdentifierCommand::_internal_set_publicidentifier(const std::string& value) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicIdentifierCommand::set_publicidentifier(std::string&& value) {
  
  publicidentifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
}
inline void RegisterPublicIdentifierCommand::set_publicidentifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
}
inline void RegisterPublicIdentifierCommand::set_publicidentifier(const char* value, size_t size) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
}
inline std::string* RegisterPublicIdentifierCommand::_internal_mutable_publicidentifier() {
  
  return publicidentifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicIdentifierCommand::release_publicidentifier() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
  
  return publicidentifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicIdentifierCommand::set_allocated_publicidentifier(std::string* publicidentifier) {
  if (publicidentifier != nullptr) {
    
  } else {
    
  }
  publicidentifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicidentifier);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicIdentifierCommand.publicIdentifier)
}

// -------------------------------------------------------------------

// RegisterPublicIdentifierResponse

// string currency = 1;
inline void RegisterPublicIdentifierResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicIdentifierResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
  return _internal_currency();
}
inline void RegisterPublicIdentifierResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
}
inline std::string* RegisterPublicIdentifierResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& RegisterPublicIdentifierResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RegisterPublicIdentifierResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicIdentifierResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
}
inline void RegisterPublicIdentifierResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
}
inline void RegisterPublicIdentifierResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
}
inline std::string* RegisterPublicIdentifierResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicIdentifierResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicIdentifierResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.currency)
}

// string publicIdentifier = 2;
inline void RegisterPublicIdentifierResponse::clear_publicidentifier() {
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterPublicIdentifierResponse::publicidentifier() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
  return _internal_publicidentifier();
}
inline void RegisterPublicIdentifierResponse::set_publicidentifier(const std::string& value) {
  _internal_set_publicidentifier(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
}
inline std::string* RegisterPublicIdentifierResponse::mutable_publicidentifier() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
  return _internal_mutable_publicidentifier();
}
inline const std::string& RegisterPublicIdentifierResponse::_internal_publicidentifier() const {
  return publicidentifier_.GetNoArena();
}
inline void RegisterPublicIdentifierResponse::_internal_set_publicidentifier(const std::string& value) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterPublicIdentifierResponse::set_publicidentifier(std::string&& value) {
  
  publicidentifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
}
inline void RegisterPublicIdentifierResponse::set_publicidentifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
}
inline void RegisterPublicIdentifierResponse::set_publicidentifier(const char* value, size_t size) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
}
inline std::string* RegisterPublicIdentifierResponse::_internal_mutable_publicidentifier() {
  
  return publicidentifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterPublicIdentifierResponse::release_publicidentifier() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
  
  return publicidentifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterPublicIdentifierResponse::set_allocated_publicidentifier(std::string* publicidentifier) {
  if (publicidentifier != nullptr) {
    
  } else {
    
  }
  publicidentifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicidentifier);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterPublicIdentifierResponse.publicIdentifier)
}

// -------------------------------------------------------------------

// GetConnextPaymentInformationCommand

// string currency = 1;
inline void GetConnextPaymentInformationCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnextPaymentInformationCommand::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
  return _internal_currency();
}
inline void GetConnextPaymentInformationCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
}
inline std::string* GetConnextPaymentInformationCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetConnextPaymentInformationCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetConnextPaymentInformationCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnextPaymentInformationCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
}
inline void GetConnextPaymentInformationCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
}
inline void GetConnextPaymentInformationCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
}
inline std::string* GetConnextPaymentInformationCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnextPaymentInformationCommand::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnextPaymentInformationCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextPaymentInformationCommand.currency)
}

// -------------------------------------------------------------------

// GetConnextPaymentInformationResponse

// string currency = 1;
inline void GetConnextPaymentInformationResponse::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnextPaymentInformationResponse::currency() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
  return _internal_currency();
}
inline void GetConnextPaymentInformationResponse::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
}
inline std::string* GetConnextPaymentInformationResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetConnextPaymentInformationResponse::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetConnextPaymentInformationResponse::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnextPaymentInformationResponse::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
}
inline void GetConnextPaymentInformationResponse::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
}
inline void GetConnextPaymentInformationResponse::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
}
inline std::string* GetConnextPaymentInformationResponse::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnextPaymentInformationResponse::release_currency() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnextPaymentInformationResponse::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.currency)
}

// string publicIdentifier = 2;
inline void GetConnextPaymentInformationResponse::clear_publicidentifier() {
  publicidentifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnextPaymentInformationResponse::publicidentifier() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
  return _internal_publicidentifier();
}
inline void GetConnextPaymentInformationResponse::set_publicidentifier(const std::string& value) {
  _internal_set_publicidentifier(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
}
inline std::string* GetConnextPaymentInformationResponse::mutable_publicidentifier() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
  return _internal_mutable_publicidentifier();
}
inline const std::string& GetConnextPaymentInformationResponse::_internal_publicidentifier() const {
  return publicidentifier_.GetNoArena();
}
inline void GetConnextPaymentInformationResponse::_internal_set_publicidentifier(const std::string& value) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnextPaymentInformationResponse::set_publicidentifier(std::string&& value) {
  
  publicidentifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
}
inline void GetConnextPaymentInformationResponse::set_publicidentifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
}
inline void GetConnextPaymentInformationResponse::set_publicidentifier(const char* value, size_t size) {
  
  publicidentifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
}
inline std::string* GetConnextPaymentInformationResponse::_internal_mutable_publicidentifier() {
  
  return publicidentifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnextPaymentInformationResponse::release_publicidentifier() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
  
  return publicidentifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnextPaymentInformationResponse::set_allocated_publicidentifier(std::string* publicidentifier) {
  if (publicidentifier != nullptr) {
    
  } else {
    
  }
  publicidentifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), publicidentifier);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.publicIdentifier)
}

// bytes paymentHash = 3;
inline void GetConnextPaymentInformationResponse::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnextPaymentInformationResponse::paymenthash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
  return _internal_paymenthash();
}
inline void GetConnextPaymentInformationResponse::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
}
inline std::string* GetConnextPaymentInformationResponse::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& GetConnextPaymentInformationResponse::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void GetConnextPaymentInformationResponse::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnextPaymentInformationResponse::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
}
inline void GetConnextPaymentInformationResponse::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
}
inline void GetConnextPaymentInformationResponse::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
}
inline std::string* GetConnextPaymentInformationResponse::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnextPaymentInformationResponse::release_paymenthash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnextPaymentInformationResponse::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.paymentHash)
}

// bool noFeeRequired = 4;
inline void GetConnextPaymentInformationResponse::clear_nofeerequired() {
  nofeerequired_ = false;
}
inline bool GetConnextPaymentInformationResponse::_internal_nofeerequired() const {
  return nofeerequired_;
}
inline bool GetConnextPaymentInformationResponse::nofeerequired() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.noFeeRequired)
  return _internal_nofeerequired();
}
inline void GetConnextPaymentInformationResponse::_internal_set_nofeerequired(bool value) {
  
  nofeerequired_ = value;
}
inline void GetConnextPaymentInformationResponse::set_nofeerequired(bool value) {
  _internal_set_nofeerequired(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextPaymentInformationResponse.noFeeRequired)
}

// -------------------------------------------------------------------

// GetConnextChannelContractDeploymentFeeCommand

// -------------------------------------------------------------------

// GetConnextChannelContractDeploymentFeeResponse

// string hubAddress = 1;
inline void GetConnextChannelContractDeploymentFeeResponse::clear_hubaddress() {
  hubaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetConnextChannelContractDeploymentFeeResponse::hubaddress() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
  return _internal_hubaddress();
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_hubaddress(const std::string& value) {
  _internal_set_hubaddress(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
}
inline std::string* GetConnextChannelContractDeploymentFeeResponse::mutable_hubaddress() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
  return _internal_mutable_hubaddress();
}
inline const std::string& GetConnextChannelContractDeploymentFeeResponse::_internal_hubaddress() const {
  return hubaddress_.GetNoArena();
}
inline void GetConnextChannelContractDeploymentFeeResponse::_internal_set_hubaddress(const std::string& value) {
  
  hubaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_hubaddress(std::string&& value) {
  
  hubaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_hubaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hubaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_hubaddress(const char* value, size_t size) {
  
  hubaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
}
inline std::string* GetConnextChannelContractDeploymentFeeResponse::_internal_mutable_hubaddress() {
  
  return hubaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetConnextChannelContractDeploymentFeeResponse::release_hubaddress() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
  
  return hubaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_allocated_hubaddress(std::string* hubaddress) {
  if (hubaddress != nullptr) {
    
  } else {
    
  }
  hubaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hubaddress);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.hubAddress)
}

// .io.stakenet.orderbook.protos.BigInteger amount = 2;
inline bool GetConnextChannelContractDeploymentFeeResponse::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool GetConnextChannelContractDeploymentFeeResponse::has_amount() const {
  return _internal_has_amount();
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetConnextChannelContractDeploymentFeeResponse::_internal_amount() const {
  const ::io::stakenet::orderbook::protos::BigInteger* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::io::stakenet::orderbook::protos::BigInteger*>(
      &::io::stakenet::orderbook::protos::_BigInteger_default_instance_);
}
inline const ::io::stakenet::orderbook::protos::BigInteger& GetConnextChannelContractDeploymentFeeResponse::amount() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.amount)
  return _internal_amount();
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetConnextChannelContractDeploymentFeeResponse::release_amount() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.amount)
  
  ::io::stakenet::orderbook::protos::BigInteger* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetConnextChannelContractDeploymentFeeResponse::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::io::stakenet::orderbook::protos::BigInteger>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::io::stakenet::orderbook::protos::BigInteger* GetConnextChannelContractDeploymentFeeResponse::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.amount)
  return _internal_mutable_amount();
}
inline void GetConnextChannelContractDeploymentFeeResponse::set_allocated_amount(::io::stakenet::orderbook::protos::BigInteger* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(amount_);
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.GetConnextChannelContractDeploymentFeeResponse.amount)
}

// -------------------------------------------------------------------

// RegisterConnextChannelContractDeploymentFeeCommand

// string transactionHash = 1;
inline void RegisterConnextChannelContractDeploymentFeeCommand::clear_transactionhash() {
  transactionhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterConnextChannelContractDeploymentFeeCommand::transactionhash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
  return _internal_transactionhash();
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::set_transactionhash(const std::string& value) {
  _internal_set_transactionhash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
}
inline std::string* RegisterConnextChannelContractDeploymentFeeCommand::mutable_transactionhash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
  return _internal_mutable_transactionhash();
}
inline const std::string& RegisterConnextChannelContractDeploymentFeeCommand::_internal_transactionhash() const {
  return transactionhash_.GetNoArena();
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::_internal_set_transactionhash(const std::string& value) {
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::set_transactionhash(std::string&& value) {
  
  transactionhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::set_transactionhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::set_transactionhash(const char* value, size_t size) {
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
}
inline std::string* RegisterConnextChannelContractDeploymentFeeCommand::_internal_mutable_transactionhash() {
  
  return transactionhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterConnextChannelContractDeploymentFeeCommand::release_transactionhash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
  
  return transactionhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterConnextChannelContractDeploymentFeeCommand::set_allocated_transactionhash(std::string* transactionhash) {
  if (transactionhash != nullptr) {
    
  } else {
    
  }
  transactionhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionhash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeCommand.transactionHash)
}

// -------------------------------------------------------------------

// RegisterConnextChannelContractDeploymentFeeResponse

// string transactionHash = 1;
inline void RegisterConnextChannelContractDeploymentFeeResponse::clear_transactionhash() {
  transactionhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RegisterConnextChannelContractDeploymentFeeResponse::transactionhash() const {
  // @@protoc_insertion_point(field_get:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
  return _internal_transactionhash();
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::set_transactionhash(const std::string& value) {
  _internal_set_transactionhash(value);
  // @@protoc_insertion_point(field_set:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
}
inline std::string* RegisterConnextChannelContractDeploymentFeeResponse::mutable_transactionhash() {
  // @@protoc_insertion_point(field_mutable:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
  return _internal_mutable_transactionhash();
}
inline const std::string& RegisterConnextChannelContractDeploymentFeeResponse::_internal_transactionhash() const {
  return transactionhash_.GetNoArena();
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::_internal_set_transactionhash(const std::string& value) {
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::set_transactionhash(std::string&& value) {
  
  transactionhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::set_transactionhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::set_transactionhash(const char* value, size_t size) {
  
  transactionhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
}
inline std::string* RegisterConnextChannelContractDeploymentFeeResponse::_internal_mutable_transactionhash() {
  
  return transactionhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterConnextChannelContractDeploymentFeeResponse::release_transactionhash() {
  // @@protoc_insertion_point(field_release:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
  
  return transactionhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterConnextChannelContractDeploymentFeeResponse::set_allocated_transactionhash(std::string* transactionhash) {
  if (transactionhash != nullptr) {
    
  } else {
    
  }
  transactionhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transactionhash);
  // @@protoc_insertion_point(field_set_allocated:io.stakenet.orderbook.protos.RegisterConnextChannelContractDeploymentFeeResponse.transactionHash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos
}  // namespace orderbook
}  // namespace stakenet
}  // namespace io

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stakenet_2forderbook_2fcommands_2eproto
