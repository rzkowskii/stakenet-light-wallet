// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Storage.proto

#include "Storage.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Storage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannelDetails_Storage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Storage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannelDetails_Storage_2eproto;
namespace storage {
class RefundableFeeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RefundableFee> _instance;
} _RefundableFee_default_instance_;
class RentedChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RentedChannel> _instance;
  const ::storage::LndChannelDetails* lnddetails_;
  const ::storage::ConnextChannelDetails* connextdetails_;
} _RentedChannel_default_instance_;
class LndChannelDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LndChannelDetails> _instance;
} _LndChannelDetails_default_instance_;
class ConnextChannelDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnextChannelDetails> _instance;
} _ConnextChannelDetails_default_instance_;
}  // namespace storage
static void InitDefaultsscc_info_ConnextChannelDetails_Storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage::_ConnextChannelDetails_default_instance_;
    new (ptr) ::storage::ConnextChannelDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage::ConnextChannelDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnextChannelDetails_Storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnextChannelDetails_Storage_2eproto}, {}};

static void InitDefaultsscc_info_LndChannelDetails_Storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage::_LndChannelDetails_default_instance_;
    new (ptr) ::storage::LndChannelDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage::LndChannelDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LndChannelDetails_Storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LndChannelDetails_Storage_2eproto}, {}};

static void InitDefaultsscc_info_RefundableFee_Storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage::_RefundableFee_default_instance_;
    new (ptr) ::storage::RefundableFee();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage::RefundableFee::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RefundableFee_Storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RefundableFee_Storage_2eproto}, {}};

static void InitDefaultsscc_info_RentedChannel_Storage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage::_RentedChannel_default_instance_;
    new (ptr) ::storage::RentedChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage::RentedChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_RentedChannel_Storage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_RentedChannel_Storage_2eproto}, {
      &scc_info_LndChannelDetails_Storage_2eproto.base,
      &scc_info_ConnextChannelDetails_Storage_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Storage_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Storage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Storage_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Storage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, id_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, currency_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, initialamount_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, paymenthash_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, state_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, timestamp_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, pairid_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, is_buy_),
  PROTOBUF_FIELD_OFFSET(::storage::RefundableFee, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, id_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, channelid_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, currency_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, capacity_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, rentingdate_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, channelstatus_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, expiresat_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, type_),
  offsetof(::storage::RentedChannelDefaultTypeInternal, lnddetails_),
  offsetof(::storage::RentedChannelDefaultTypeInternal, connextdetails_),
  PROTOBUF_FIELD_OFFSET(::storage::RentedChannel, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage::LndChannelDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage::LndChannelDetails, fundingoutpoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage::ConnextChannelDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage::ConnextChannelDetails, channeladdress_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::storage::RefundableFee)},
  { 14, -1, sizeof(::storage::RentedChannel)},
  { 30, -1, sizeof(::storage::LndChannelDetails)},
  { 36, -1, sizeof(::storage::ConnextChannelDetails)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage::_RefundableFee_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage::_RentedChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage::_LndChannelDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage::_ConnextChannelDetails_default_instance_),
};

const char descriptor_table_protodef_Storage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rStorage.proto\022\007storage\"\314\002\n\rRefundableF"
  "ee\022\n\n\002id\030\001 \001(\004\022\020\n\010currency\030\002 \001(\t\022\025\n\rinit"
  "ialAmount\030\003 \001(\003\022\023\n\013paymentHash\030\004 \001(\014\022+\n\005"
  "state\030\005 \001(\0162\034.storage.RefundableFee.Stat"
  "e\022\021\n\ttimestamp\030\006 \001(\003\022\016\n\006pairId\030\007 \001(\t\022\016\n\006"
  "is_buy\030\010 \001(\010\022)\n\004type\030\t \001(\0162\033.storage.Ref"
  "undableFee.Type\"\037\n\005State\022\010\n\004PAID\020\000\022\014\n\010RE"
  "FUNDED\020\001\"E\n\004Type\022\r\n\tORDER_FEE\020\000\022\026\n\022CHANN"
  "EL_RENTAL_FEE\020\001\022\026\n\022CHANNEL_EXTEND_FEE\020\002\""
  "\254\002\n\rRentedChannel\022\n\n\002id\030\001 \001(\004\022\021\n\tchannel"
  "Id\030\002 \001(\t\022\020\n\010currency\030\003 \001(\t\022\020\n\010capacity\030\004"
  " \001(\003\022\023\n\013rentingDate\030\005 \001(\003\022\025\n\rchannelStat"
  "us\030\006 \001(\t\022\021\n\texpiresAt\030\007 \001(\003\022\"\n\004type\030\010 \001("
  "\0162\024.storage.ChannelType\0220\n\nlndDetails\030\t "
  "\001(\0132\032.storage.LndChannelDetailsH\000\0228\n\016con"
  "nextDetails\030\n \001(\0132\036.storage.ConnextChann"
  "elDetailsH\000B\t\n\007details\",\n\021LndChannelDeta"
  "ils\022\027\n\017fundingOutpoint\030\001 \001(\t\"/\n\025ConnextC"
  "hannelDetails\022\026\n\016channelAddress\030\001 \001(\t*#\n"
  "\013ChannelType\022\007\n\003LND\020\000\022\013\n\007CONNEXT\020\001b\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Storage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Storage_2eproto_sccs[4] = {
  &scc_info_ConnextChannelDetails_Storage_2eproto.base,
  &scc_info_LndChannelDetails_Storage_2eproto.base,
  &scc_info_RefundableFee_Storage_2eproto.base,
  &scc_info_RentedChannel_Storage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Storage_2eproto_once;
static bool descriptor_table_Storage_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Storage_2eproto = {
  &descriptor_table_Storage_2eproto_initialized, descriptor_table_protodef_Storage_2eproto, "Storage.proto", 802,
  &descriptor_table_Storage_2eproto_once, descriptor_table_Storage_2eproto_sccs, descriptor_table_Storage_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_Storage_2eproto::offsets,
  file_level_metadata_Storage_2eproto, 4, file_level_enum_descriptors_Storage_2eproto, file_level_service_descriptors_Storage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Storage_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Storage_2eproto), true);
namespace storage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefundableFee_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Storage_2eproto);
  return file_level_enum_descriptors_Storage_2eproto[0];
}
bool RefundableFee_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RefundableFee_State RefundableFee::PAID;
constexpr RefundableFee_State RefundableFee::REFUNDED;
constexpr RefundableFee_State RefundableFee::State_MIN;
constexpr RefundableFee_State RefundableFee::State_MAX;
constexpr int RefundableFee::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefundableFee_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Storage_2eproto);
  return file_level_enum_descriptors_Storage_2eproto[1];
}
bool RefundableFee_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RefundableFee_Type RefundableFee::ORDER_FEE;
constexpr RefundableFee_Type RefundableFee::CHANNEL_RENTAL_FEE;
constexpr RefundableFee_Type RefundableFee::CHANNEL_EXTEND_FEE;
constexpr RefundableFee_Type RefundableFee::Type_MIN;
constexpr RefundableFee_Type RefundableFee::Type_MAX;
constexpr int RefundableFee::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Storage_2eproto);
  return file_level_enum_descriptors_Storage_2eproto[2];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RefundableFee::InitAsDefaultInstance() {
}
class RefundableFee::_Internal {
 public:
};

RefundableFee::RefundableFee()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storage.RefundableFee)
}
RefundableFee::RefundableFee(const RefundableFee& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_paymenthash().empty()) {
    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:storage.RefundableFee)
}

void RefundableFee::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RefundableFee_Storage_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
}

RefundableFee::~RefundableFee() {
  // @@protoc_insertion_point(destructor:storage.RefundableFee)
  SharedDtor();
}

void RefundableFee::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RefundableFee::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RefundableFee& RefundableFee::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RefundableFee_Storage_2eproto.base);
  return *internal_default_instance();
}


void RefundableFee::Clear() {
// @@protoc_insertion_point(message_clear_start:storage.RefundableFee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

const char* RefundableFee::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.RefundableFee.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 initialAmount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          initialamount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes paymentHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_paymenthash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .storage.RefundableFee.State state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::storage::RefundableFee_State>(val));
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pairId = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.RefundableFee.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_buy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_buy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .storage.RefundableFee.Type type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::storage::RefundableFee_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RefundableFee::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage.RefundableFee)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string currency = 2;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.RefundableFee.currency");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency(), target);
  }

  // int64 initialAmount = 3;
  if (this->initialamount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_initialamount(), target);
  }

  // bytes paymentHash = 4;
  if (this->paymenthash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_paymenthash(), target);
  }

  // .storage.RefundableFee.State state = 5;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(6, this->_internal_timestamp(), target);
  }

  // string pairId = 7;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.RefundableFee.pairId");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pairid(), target);
  }

  // bool is_buy = 8;
  if (this->is_buy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_buy(), target);
  }

  // .storage.RefundableFee.Type type = 9;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage.RefundableFee)
  return target;
}

size_t RefundableFee::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage.RefundableFee)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 2;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // bytes paymentHash = 4;
  if (this->paymenthash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_paymenthash());
  }

  // string pairId = 7;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int64 initialAmount = 3;
  if (this->initialamount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_initialamount());
  }

  // int64 timestamp = 6;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  // .storage.RefundableFee.State state = 5;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // bool is_buy = 8;
  if (this->is_buy() != 0) {
    total_size += 1 + 1;
  }

  // .storage.RefundableFee.Type type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RefundableFee::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage.RefundableFee)
  GOOGLE_DCHECK_NE(&from, this);
  const RefundableFee* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RefundableFee>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage.RefundableFee)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage.RefundableFee)
    MergeFrom(*source);
  }
}

void RefundableFee::MergeFrom(const RefundableFee& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage.RefundableFee)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.paymenthash().size() > 0) {

    paymenthash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.paymenthash_);
  }
  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.initialamount() != 0) {
    _internal_set_initialamount(from._internal_initialamount());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.is_buy() != 0) {
    _internal_set_is_buy(from._internal_is_buy());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void RefundableFee::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage.RefundableFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefundableFee::CopyFrom(const RefundableFee& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage.RefundableFee)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefundableFee::IsInitialized() const {
  return true;
}

void RefundableFee::InternalSwap(RefundableFee* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  paymenthash_.Swap(&other->paymenthash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(initialamount_, other->initialamount_);
  swap(timestamp_, other->timestamp_);
  swap(state_, other->state_);
  swap(is_buy_, other->is_buy_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RefundableFee::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RentedChannel::InitAsDefaultInstance() {
  ::storage::_RentedChannel_default_instance_.lnddetails_ = const_cast< ::storage::LndChannelDetails*>(
      ::storage::LndChannelDetails::internal_default_instance());
  ::storage::_RentedChannel_default_instance_.connextdetails_ = const_cast< ::storage::ConnextChannelDetails*>(
      ::storage::ConnextChannelDetails::internal_default_instance());
}
class RentedChannel::_Internal {
 public:
  static const ::storage::LndChannelDetails& lnddetails(const RentedChannel* msg);
  static const ::storage::ConnextChannelDetails& connextdetails(const RentedChannel* msg);
};

const ::storage::LndChannelDetails&
RentedChannel::_Internal::lnddetails(const RentedChannel* msg) {
  return *msg->details_.lnddetails_;
}
const ::storage::ConnextChannelDetails&
RentedChannel::_Internal::connextdetails(const RentedChannel* msg) {
  return *msg->details_.connextdetails_;
}
void RentedChannel::set_allocated_lnddetails(::storage::LndChannelDetails* lnddetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_details();
  if (lnddetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lnddetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lnddetails, submessage_arena);
    }
    set_has_lnddetails();
    details_.lnddetails_ = lnddetails;
  }
  // @@protoc_insertion_point(field_set_allocated:storage.RentedChannel.lndDetails)
}
void RentedChannel::set_allocated_connextdetails(::storage::ConnextChannelDetails* connextdetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_details();
  if (connextdetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connextdetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connextdetails, submessage_arena);
    }
    set_has_connextdetails();
    details_.connextdetails_ = connextdetails;
  }
  // @@protoc_insertion_point(field_set_allocated:storage.RentedChannel.connextDetails)
}
RentedChannel::RentedChannel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storage.RentedChannel)
}
RentedChannel::RentedChannel(const RentedChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelid().empty()) {
    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  channelstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channelstatus().empty()) {
    channelstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelstatus_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_details();
  switch (from.details_case()) {
    case kLndDetails: {
      _internal_mutable_lnddetails()->::storage::LndChannelDetails::MergeFrom(from._internal_lnddetails());
      break;
    }
    case kConnextDetails: {
      _internal_mutable_connextdetails()->::storage::ConnextChannelDetails::MergeFrom(from._internal_connextdetails());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:storage.RentedChannel)
}

void RentedChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RentedChannel_Storage_2eproto.base);
  channelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_has_details();
}

RentedChannel::~RentedChannel() {
  // @@protoc_insertion_point(destructor:storage.RentedChannel)
  SharedDtor();
}

void RentedChannel::SharedDtor() {
  channelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_details()) {
    clear_details();
  }
}

void RentedChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RentedChannel& RentedChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RentedChannel_Storage_2eproto.base);
  return *internal_default_instance();
}


void RentedChannel::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:storage.RentedChannel)
  switch (details_case()) {
    case kLndDetails: {
      delete details_.lnddetails_;
      break;
    }
    case kConnextDetails: {
      delete details_.connextdetails_;
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAILS_NOT_SET;
}


void RentedChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:storage.RentedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  channelstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  clear_details();
  _internal_metadata_.Clear();
}

const char* RentedChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_channelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.RentedChannel.channelId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string currency = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.RentedChannel.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 capacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 rentingDate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rentingdate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string channelStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_channelstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.RentedChannel.channelStatus"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 expiresAt = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          expiresat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .storage.ChannelType type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::storage::ChannelType>(val));
        } else goto handle_unusual;
        continue;
      // .storage.LndChannelDetails lndDetails = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_lnddetails(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .storage.ConnextChannelDetails connextDetails = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_connextdetails(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RentedChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage.RentedChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelid().data(), static_cast<int>(this->_internal_channelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.RentedChannel.channelId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_channelid(), target);
  }

  // string currency = 3;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.RentedChannel.currency");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency(), target);
  }

  // int64 capacity = 4;
  if (this->capacity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_capacity(), target);
  }

  // int64 rentingDate = 5;
  if (this->rentingdate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_rentingdate(), target);
  }

  // string channelStatus = 6;
  if (this->channelstatus().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channelstatus().data(), static_cast<int>(this->_internal_channelstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.RentedChannel.channelStatus");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_channelstatus(), target);
  }

  // int64 expiresAt = 7;
  if (this->expiresat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_expiresat(), target);
  }

  // .storage.ChannelType type = 8;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_type(), target);
  }

  // .storage.LndChannelDetails lndDetails = 9;
  if (_internal_has_lnddetails()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::lnddetails(this), target, stream);
  }

  // .storage.ConnextChannelDetails connextDetails = 10;
  if (_internal_has_connextdetails()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::connextdetails(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage.RentedChannel)
  return target;
}

size_t RentedChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage.RentedChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelId = 2;
  if (this->channelid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelid());
  }

  // string currency = 3;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string channelStatus = 6;
  if (this->channelstatus().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channelstatus());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int64 capacity = 4;
  if (this->capacity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_capacity());
  }

  // int64 rentingDate = 5;
  if (this->rentingdate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_rentingdate());
  }

  // int64 expiresAt = 7;
  if (this->expiresat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_expiresat());
  }

  // .storage.ChannelType type = 8;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (details_case()) {
    // .storage.LndChannelDetails lndDetails = 9;
    case kLndDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.lnddetails_);
      break;
    }
    // .storage.ConnextChannelDetails connextDetails = 10;
    case kConnextDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.connextdetails_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RentedChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage.RentedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const RentedChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RentedChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage.RentedChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage.RentedChannel)
    MergeFrom(*source);
  }
}

void RentedChannel::MergeFrom(const RentedChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage.RentedChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channelid().size() > 0) {

    channelid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelid_);
  }
  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.channelstatus().size() > 0) {

    channelstatus_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channelstatus_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.capacity() != 0) {
    _internal_set_capacity(from._internal_capacity());
  }
  if (from.rentingdate() != 0) {
    _internal_set_rentingdate(from._internal_rentingdate());
  }
  if (from.expiresat() != 0) {
    _internal_set_expiresat(from._internal_expiresat());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.details_case()) {
    case kLndDetails: {
      _internal_mutable_lnddetails()->::storage::LndChannelDetails::MergeFrom(from._internal_lnddetails());
      break;
    }
    case kConnextDetails: {
      _internal_mutable_connextdetails()->::storage::ConnextChannelDetails::MergeFrom(from._internal_connextdetails());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
}

void RentedChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage.RentedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RentedChannel::CopyFrom(const RentedChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage.RentedChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RentedChannel::IsInitialized() const {
  return true;
}

void RentedChannel::InternalSwap(RentedChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channelid_.Swap(&other->channelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  channelstatus_.Swap(&other->channelstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(capacity_, other->capacity_);
  swap(rentingdate_, other->rentingdate_);
  swap(expiresat_, other->expiresat_);
  swap(type_, other->type_);
  swap(details_, other->details_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata RentedChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LndChannelDetails::InitAsDefaultInstance() {
}
class LndChannelDetails::_Internal {
 public:
};

LndChannelDetails::LndChannelDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storage.LndChannelDetails)
}
LndChannelDetails::LndChannelDetails(const LndChannelDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fundingoutpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fundingoutpoint().empty()) {
    fundingoutpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingoutpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:storage.LndChannelDetails)
}

void LndChannelDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LndChannelDetails_Storage_2eproto.base);
  fundingoutpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LndChannelDetails::~LndChannelDetails() {
  // @@protoc_insertion_point(destructor:storage.LndChannelDetails)
  SharedDtor();
}

void LndChannelDetails::SharedDtor() {
  fundingoutpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LndChannelDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LndChannelDetails& LndChannelDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LndChannelDetails_Storage_2eproto.base);
  return *internal_default_instance();
}


void LndChannelDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:storage.LndChannelDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fundingoutpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LndChannelDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string fundingOutpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_fundingoutpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.LndChannelDetails.fundingOutpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LndChannelDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage.LndChannelDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fundingOutpoint = 1;
  if (this->fundingoutpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fundingoutpoint().data(), static_cast<int>(this->_internal_fundingoutpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.LndChannelDetails.fundingOutpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fundingoutpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage.LndChannelDetails)
  return target;
}

size_t LndChannelDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage.LndChannelDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fundingOutpoint = 1;
  if (this->fundingoutpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fundingoutpoint());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LndChannelDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage.LndChannelDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const LndChannelDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LndChannelDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage.LndChannelDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage.LndChannelDetails)
    MergeFrom(*source);
  }
}

void LndChannelDetails::MergeFrom(const LndChannelDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage.LndChannelDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fundingoutpoint().size() > 0) {

    fundingoutpoint_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fundingoutpoint_);
  }
}

void LndChannelDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage.LndChannelDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LndChannelDetails::CopyFrom(const LndChannelDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage.LndChannelDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LndChannelDetails::IsInitialized() const {
  return true;
}

void LndChannelDetails::InternalSwap(LndChannelDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  fundingoutpoint_.Swap(&other->fundingoutpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LndChannelDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnextChannelDetails::InitAsDefaultInstance() {
}
class ConnextChannelDetails::_Internal {
 public:
};

ConnextChannelDetails::ConnextChannelDetails()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storage.ConnextChannelDetails)
}
ConnextChannelDetails::ConnextChannelDetails(const ConnextChannelDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_channeladdress().empty()) {
    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
  // @@protoc_insertion_point(copy_constructor:storage.ConnextChannelDetails)
}

void ConnextChannelDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConnextChannelDetails_Storage_2eproto.base);
  channeladdress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConnextChannelDetails::~ConnextChannelDetails() {
  // @@protoc_insertion_point(destructor:storage.ConnextChannelDetails)
  SharedDtor();
}

void ConnextChannelDetails::SharedDtor() {
  channeladdress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnextChannelDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnextChannelDetails& ConnextChannelDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnextChannelDetails_Storage_2eproto.base);
  return *internal_default_instance();
}


void ConnextChannelDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:storage.ConnextChannelDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channeladdress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ConnextChannelDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string channelAddress = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_channeladdress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "storage.ConnextChannelDetails.channelAddress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnextChannelDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage.ConnextChannelDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string channelAddress = 1;
  if (this->channeladdress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channeladdress().data(), static_cast<int>(this->_internal_channeladdress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "storage.ConnextChannelDetails.channelAddress");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channeladdress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage.ConnextChannelDetails)
  return target;
}

size_t ConnextChannelDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage.ConnextChannelDetails)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channelAddress = 1;
  if (this->channeladdress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channeladdress());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnextChannelDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage.ConnextChannelDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnextChannelDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnextChannelDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage.ConnextChannelDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage.ConnextChannelDetails)
    MergeFrom(*source);
  }
}

void ConnextChannelDetails::MergeFrom(const ConnextChannelDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage.ConnextChannelDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channeladdress().size() > 0) {

    channeladdress_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.channeladdress_);
  }
}

void ConnextChannelDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage.ConnextChannelDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnextChannelDetails::CopyFrom(const ConnextChannelDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage.ConnextChannelDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnextChannelDetails::IsInitialized() const {
  return true;
}

void ConnextChannelDetails::InternalSwap(ConnextChannelDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  channeladdress_.Swap(&other->channeladdress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnextChannelDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace storage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::storage::RefundableFee* Arena::CreateMaybeMessage< ::storage::RefundableFee >(Arena* arena) {
  return Arena::CreateInternal< ::storage::RefundableFee >(arena);
}
template<> PROTOBUF_NOINLINE ::storage::RentedChannel* Arena::CreateMaybeMessage< ::storage::RentedChannel >(Arena* arena) {
  return Arena::CreateInternal< ::storage::RentedChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::storage::LndChannelDetails* Arena::CreateMaybeMessage< ::storage::LndChannelDetails >(Arena* arena) {
  return Arena::CreateInternal< ::storage::LndChannelDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::storage::ConnextChannelDetails* Arena::CreateMaybeMessage< ::storage::ConnextChannelDetails >(Arena* arena) {
  return Arena::CreateInternal< ::storage::ConnextChannelDetails >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
