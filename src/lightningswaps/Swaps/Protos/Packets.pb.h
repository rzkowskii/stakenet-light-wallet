// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Packets_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Packets_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Packets_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Packets_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packets_2eproto;
namespace packets {
class InvoiceExchangeAckPacketBody;
class InvoiceExchangeAckPacketBodyDefaultTypeInternal;
extern InvoiceExchangeAckPacketBodyDefaultTypeInternal _InvoiceExchangeAckPacketBody_default_instance_;
class InvoiceExchangePacketBody;
class InvoiceExchangePacketBodyDefaultTypeInternal;
extern InvoiceExchangePacketBodyDefaultTypeInternal _InvoiceExchangePacketBody_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class SanitySwapAckPacketBody;
class SanitySwapAckPacketBodyDefaultTypeInternal;
extern SanitySwapAckPacketBodyDefaultTypeInternal _SanitySwapAckPacketBody_default_instance_;
class SanitySwapInitPacketBody;
class SanitySwapInitPacketBodyDefaultTypeInternal;
extern SanitySwapInitPacketBodyDefaultTypeInternal _SanitySwapInitPacketBody_default_instance_;
class SwapAcceptedPacketBody;
class SwapAcceptedPacketBodyDefaultTypeInternal;
extern SwapAcceptedPacketBodyDefaultTypeInternal _SwapAcceptedPacketBody_default_instance_;
class SwapCompletePacketBody;
class SwapCompletePacketBodyDefaultTypeInternal;
extern SwapCompletePacketBodyDefaultTypeInternal _SwapCompletePacketBody_default_instance_;
class SwapFailedPacketBody;
class SwapFailedPacketBodyDefaultTypeInternal;
extern SwapFailedPacketBodyDefaultTypeInternal _SwapFailedPacketBody_default_instance_;
class SwapRequestPacketBody;
class SwapRequestPacketBodyDefaultTypeInternal;
extern SwapRequestPacketBodyDefaultTypeInternal _SwapRequestPacketBody_default_instance_;
}  // namespace packets
PROTOBUF_NAMESPACE_OPEN
template<> ::packets::InvoiceExchangeAckPacketBody* Arena::CreateMaybeMessage<::packets::InvoiceExchangeAckPacketBody>(Arena*);
template<> ::packets::InvoiceExchangePacketBody* Arena::CreateMaybeMessage<::packets::InvoiceExchangePacketBody>(Arena*);
template<> ::packets::Packet* Arena::CreateMaybeMessage<::packets::Packet>(Arena*);
template<> ::packets::SanitySwapAckPacketBody* Arena::CreateMaybeMessage<::packets::SanitySwapAckPacketBody>(Arena*);
template<> ::packets::SanitySwapInitPacketBody* Arena::CreateMaybeMessage<::packets::SanitySwapInitPacketBody>(Arena*);
template<> ::packets::SwapAcceptedPacketBody* Arena::CreateMaybeMessage<::packets::SwapAcceptedPacketBody>(Arena*);
template<> ::packets::SwapCompletePacketBody* Arena::CreateMaybeMessage<::packets::SwapCompletePacketBody>(Arena*);
template<> ::packets::SwapFailedPacketBody* Arena::CreateMaybeMessage<::packets::SwapFailedPacketBody>(Arena*);
template<> ::packets::SwapRequestPacketBody* Arena::CreateMaybeMessage<::packets::SwapRequestPacketBody>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace packets {

// ===================================================================

class SwapRequestPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SwapRequestPacketBody) */ {
 public:
  SwapRequestPacketBody();
  virtual ~SwapRequestPacketBody();

  SwapRequestPacketBody(const SwapRequestPacketBody& from);
  SwapRequestPacketBody(SwapRequestPacketBody&& from) noexcept
    : SwapRequestPacketBody() {
    *this = ::std::move(from);
  }

  inline SwapRequestPacketBody& operator=(const SwapRequestPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapRequestPacketBody& operator=(SwapRequestPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapRequestPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapRequestPacketBody* internal_default_instance() {
    return reinterpret_cast<const SwapRequestPacketBody*>(
               &_SwapRequestPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SwapRequestPacketBody& a, SwapRequestPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapRequestPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapRequestPacketBody* New() const final {
    return CreateMaybeMessage<SwapRequestPacketBody>(nullptr);
  }

  SwapRequestPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapRequestPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapRequestPacketBody& from);
  void MergeFrom(const SwapRequestPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapRequestPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SwapRequestPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 2,
    kOrderIdFieldNumber = 3,
    kRHashFieldNumber = 4,
    kTakerDestinationFieldNumber = 6,
    kProposedQuantityFieldNumber = 1,
    kTakerCltvDeltaFieldNumber = 5,
  };
  // string pairId = 2;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string orderId = 3;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string rHash = 4;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // string takerDestination = 6;
  void clear_takerdestination();
  const std::string& takerdestination() const;
  void set_takerdestination(const std::string& value);
  void set_takerdestination(std::string&& value);
  void set_takerdestination(const char* value);
  void set_takerdestination(const char* value, size_t size);
  std::string* mutable_takerdestination();
  std::string* release_takerdestination();
  void set_allocated_takerdestination(std::string* takerdestination);
  private:
  const std::string& _internal_takerdestination() const;
  void _internal_set_takerdestination(const std::string& value);
  std::string* _internal_mutable_takerdestination();
  public:

  // int64 proposedQuantity = 1;
  void clear_proposedquantity();
  ::PROTOBUF_NAMESPACE_ID::int64 proposedquantity() const;
  void set_proposedquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_proposedquantity() const;
  void _internal_set_proposedquantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 takerCltvDelta = 5;
  void clear_takercltvdelta();
  ::PROTOBUF_NAMESPACE_ID::uint32 takercltvdelta() const;
  void set_takercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_takercltvdelta() const;
  void _internal_set_takercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:packets.SwapRequestPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takerdestination_;
  ::PROTOBUF_NAMESPACE_ID::int64 proposedquantity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 takercltvdelta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class SwapFailedPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SwapFailedPacketBody) */ {
 public:
  SwapFailedPacketBody();
  virtual ~SwapFailedPacketBody();

  SwapFailedPacketBody(const SwapFailedPacketBody& from);
  SwapFailedPacketBody(SwapFailedPacketBody&& from) noexcept
    : SwapFailedPacketBody() {
    *this = ::std::move(from);
  }

  inline SwapFailedPacketBody& operator=(const SwapFailedPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapFailedPacketBody& operator=(SwapFailedPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapFailedPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapFailedPacketBody* internal_default_instance() {
    return reinterpret_cast<const SwapFailedPacketBody*>(
               &_SwapFailedPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SwapFailedPacketBody& a, SwapFailedPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapFailedPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapFailedPacketBody* New() const final {
    return CreateMaybeMessage<SwapFailedPacketBody>(nullptr);
  }

  SwapFailedPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapFailedPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapFailedPacketBody& from);
  void MergeFrom(const SwapFailedPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapFailedPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SwapFailedPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
    kErrorMessageFieldNumber = 3,
    kFailureReasonFieldNumber = 2,
  };
  // string rHash = 1;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // string errorMessage = 3;
  void clear_errormessage();
  const std::string& errormessage() const;
  void set_errormessage(const std::string& value);
  void set_errormessage(std::string&& value);
  void set_errormessage(const char* value);
  void set_errormessage(const char* value, size_t size);
  std::string* mutable_errormessage();
  std::string* release_errormessage();
  void set_allocated_errormessage(std::string* errormessage);
  private:
  const std::string& _internal_errormessage() const;
  void _internal_set_errormessage(const std::string& value);
  std::string* _internal_mutable_errormessage();
  public:

  // uint32 failureReason = 2;
  void clear_failurereason();
  ::PROTOBUF_NAMESPACE_ID::uint32 failurereason() const;
  void set_failurereason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_failurereason() const;
  void _internal_set_failurereason(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:packets.SwapFailedPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errormessage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 failurereason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class SwapCompletePacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SwapCompletePacketBody) */ {
 public:
  SwapCompletePacketBody();
  virtual ~SwapCompletePacketBody();

  SwapCompletePacketBody(const SwapCompletePacketBody& from);
  SwapCompletePacketBody(SwapCompletePacketBody&& from) noexcept
    : SwapCompletePacketBody() {
    *this = ::std::move(from);
  }

  inline SwapCompletePacketBody& operator=(const SwapCompletePacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapCompletePacketBody& operator=(SwapCompletePacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapCompletePacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapCompletePacketBody* internal_default_instance() {
    return reinterpret_cast<const SwapCompletePacketBody*>(
               &_SwapCompletePacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SwapCompletePacketBody& a, SwapCompletePacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapCompletePacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapCompletePacketBody* New() const final {
    return CreateMaybeMessage<SwapCompletePacketBody>(nullptr);
  }

  SwapCompletePacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapCompletePacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapCompletePacketBody& from);
  void MergeFrom(const SwapCompletePacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapCompletePacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SwapCompletePacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
  };
  // string rHash = 1;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // @@protoc_insertion_point(class_scope:packets.SwapCompletePacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class SwapAcceptedPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SwapAcceptedPacketBody) */ {
 public:
  SwapAcceptedPacketBody();
  virtual ~SwapAcceptedPacketBody();

  SwapAcceptedPacketBody(const SwapAcceptedPacketBody& from);
  SwapAcceptedPacketBody(SwapAcceptedPacketBody&& from) noexcept
    : SwapAcceptedPacketBody() {
    *this = ::std::move(from);
  }

  inline SwapAcceptedPacketBody& operator=(const SwapAcceptedPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapAcceptedPacketBody& operator=(SwapAcceptedPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapAcceptedPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapAcceptedPacketBody* internal_default_instance() {
    return reinterpret_cast<const SwapAcceptedPacketBody*>(
               &_SwapAcceptedPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SwapAcceptedPacketBody& a, SwapAcceptedPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapAcceptedPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapAcceptedPacketBody* New() const final {
    return CreateMaybeMessage<SwapAcceptedPacketBody>(nullptr);
  }

  SwapAcceptedPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapAcceptedPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapAcceptedPacketBody& from);
  void MergeFrom(const SwapAcceptedPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapAcceptedPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SwapAcceptedPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
    kMakerDestinationFieldNumber = 4,
    kMakerPaymentRequestFieldNumber = 5,
    kQuantityFieldNumber = 2,
    kMakerCltvDeltaFieldNumber = 3,
  };
  // string rHash = 1;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // string makerDestination = 4;
  void clear_makerdestination();
  const std::string& makerdestination() const;
  void set_makerdestination(const std::string& value);
  void set_makerdestination(std::string&& value);
  void set_makerdestination(const char* value);
  void set_makerdestination(const char* value, size_t size);
  std::string* mutable_makerdestination();
  std::string* release_makerdestination();
  void set_allocated_makerdestination(std::string* makerdestination);
  private:
  const std::string& _internal_makerdestination() const;
  void _internal_set_makerdestination(const std::string& value);
  std::string* _internal_mutable_makerdestination();
  public:

  // string makerPaymentRequest = 5;
  void clear_makerpaymentrequest();
  const std::string& makerpaymentrequest() const;
  void set_makerpaymentrequest(const std::string& value);
  void set_makerpaymentrequest(std::string&& value);
  void set_makerpaymentrequest(const char* value);
  void set_makerpaymentrequest(const char* value, size_t size);
  std::string* mutable_makerpaymentrequest();
  std::string* release_makerpaymentrequest();
  void set_allocated_makerpaymentrequest(std::string* makerpaymentrequest);
  private:
  const std::string& _internal_makerpaymentrequest() const;
  void _internal_set_makerpaymentrequest(const std::string& value);
  std::string* _internal_mutable_makerpaymentrequest();
  public:

  // int64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::int64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 makerCltvDelta = 3;
  void clear_makercltvdelta();
  ::PROTOBUF_NAMESPACE_ID::uint32 makercltvdelta() const;
  void set_makercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_makercltvdelta() const;
  void _internal_set_makercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:packets.SwapAcceptedPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr makerdestination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr makerpaymentrequest_;
  ::PROTOBUF_NAMESPACE_ID::int64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 makercltvdelta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class InvoiceExchangePacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.InvoiceExchangePacketBody) */ {
 public:
  InvoiceExchangePacketBody();
  virtual ~InvoiceExchangePacketBody();

  InvoiceExchangePacketBody(const InvoiceExchangePacketBody& from);
  InvoiceExchangePacketBody(InvoiceExchangePacketBody&& from) noexcept
    : InvoiceExchangePacketBody() {
    *this = ::std::move(from);
  }

  inline InvoiceExchangePacketBody& operator=(const InvoiceExchangePacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceExchangePacketBody& operator=(InvoiceExchangePacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvoiceExchangePacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvoiceExchangePacketBody* internal_default_instance() {
    return reinterpret_cast<const InvoiceExchangePacketBody*>(
               &_InvoiceExchangePacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InvoiceExchangePacketBody& a, InvoiceExchangePacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceExchangePacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvoiceExchangePacketBody* New() const final {
    return CreateMaybeMessage<InvoiceExchangePacketBody>(nullptr);
  }

  InvoiceExchangePacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvoiceExchangePacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvoiceExchangePacketBody& from);
  void MergeFrom(const InvoiceExchangePacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceExchangePacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.InvoiceExchangePacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
    kTakerPaymentRequestFieldNumber = 2,
  };
  // string rHash = 1;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // string takerPaymentRequest = 2;
  void clear_takerpaymentrequest();
  const std::string& takerpaymentrequest() const;
  void set_takerpaymentrequest(const std::string& value);
  void set_takerpaymentrequest(std::string&& value);
  void set_takerpaymentrequest(const char* value);
  void set_takerpaymentrequest(const char* value, size_t size);
  std::string* mutable_takerpaymentrequest();
  std::string* release_takerpaymentrequest();
  void set_allocated_takerpaymentrequest(std::string* takerpaymentrequest);
  private:
  const std::string& _internal_takerpaymentrequest() const;
  void _internal_set_takerpaymentrequest(const std::string& value);
  std::string* _internal_mutable_takerpaymentrequest();
  public:

  // @@protoc_insertion_point(class_scope:packets.InvoiceExchangePacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr takerpaymentrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class InvoiceExchangeAckPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.InvoiceExchangeAckPacketBody) */ {
 public:
  InvoiceExchangeAckPacketBody();
  virtual ~InvoiceExchangeAckPacketBody();

  InvoiceExchangeAckPacketBody(const InvoiceExchangeAckPacketBody& from);
  InvoiceExchangeAckPacketBody(InvoiceExchangeAckPacketBody&& from) noexcept
    : InvoiceExchangeAckPacketBody() {
    *this = ::std::move(from);
  }

  inline InvoiceExchangeAckPacketBody& operator=(const InvoiceExchangeAckPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvoiceExchangeAckPacketBody& operator=(InvoiceExchangeAckPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InvoiceExchangeAckPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InvoiceExchangeAckPacketBody* internal_default_instance() {
    return reinterpret_cast<const InvoiceExchangeAckPacketBody*>(
               &_InvoiceExchangeAckPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InvoiceExchangeAckPacketBody& a, InvoiceExchangeAckPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(InvoiceExchangeAckPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InvoiceExchangeAckPacketBody* New() const final {
    return CreateMaybeMessage<InvoiceExchangeAckPacketBody>(nullptr);
  }

  InvoiceExchangeAckPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InvoiceExchangeAckPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InvoiceExchangeAckPacketBody& from);
  void MergeFrom(const InvoiceExchangeAckPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InvoiceExchangeAckPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.InvoiceExchangeAckPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRHashFieldNumber = 1,
  };
  // string rHash = 1;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // @@protoc_insertion_point(class_scope:packets.InvoiceExchangeAckPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class SanitySwapInitPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SanitySwapInitPacketBody) */ {
 public:
  SanitySwapInitPacketBody();
  virtual ~SanitySwapInitPacketBody();

  SanitySwapInitPacketBody(const SanitySwapInitPacketBody& from);
  SanitySwapInitPacketBody(SanitySwapInitPacketBody&& from) noexcept
    : SanitySwapInitPacketBody() {
    *this = ::std::move(from);
  }

  inline SanitySwapInitPacketBody& operator=(const SanitySwapInitPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SanitySwapInitPacketBody& operator=(SanitySwapInitPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SanitySwapInitPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SanitySwapInitPacketBody* internal_default_instance() {
    return reinterpret_cast<const SanitySwapInitPacketBody*>(
               &_SanitySwapInitPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SanitySwapInitPacketBody& a, SanitySwapInitPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SanitySwapInitPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SanitySwapInitPacketBody* New() const final {
    return CreateMaybeMessage<SanitySwapInitPacketBody>(nullptr);
  }

  SanitySwapInitPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SanitySwapInitPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SanitySwapInitPacketBody& from);
  void MergeFrom(const SanitySwapInitPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SanitySwapInitPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SanitySwapInitPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kRHashFieldNumber = 2,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string rHash = 2;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // @@protoc_insertion_point(class_scope:packets.SanitySwapInitPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class SanitySwapAckPacketBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.SanitySwapAckPacketBody) */ {
 public:
  SanitySwapAckPacketBody();
  virtual ~SanitySwapAckPacketBody();

  SanitySwapAckPacketBody(const SanitySwapAckPacketBody& from);
  SanitySwapAckPacketBody(SanitySwapAckPacketBody&& from) noexcept
    : SanitySwapAckPacketBody() {
    *this = ::std::move(from);
  }

  inline SanitySwapAckPacketBody& operator=(const SanitySwapAckPacketBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline SanitySwapAckPacketBody& operator=(SanitySwapAckPacketBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SanitySwapAckPacketBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SanitySwapAckPacketBody* internal_default_instance() {
    return reinterpret_cast<const SanitySwapAckPacketBody*>(
               &_SanitySwapAckPacketBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SanitySwapAckPacketBody& a, SanitySwapAckPacketBody& b) {
    a.Swap(&b);
  }
  inline void Swap(SanitySwapAckPacketBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SanitySwapAckPacketBody* New() const final {
    return CreateMaybeMessage<SanitySwapAckPacketBody>(nullptr);
  }

  SanitySwapAckPacketBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SanitySwapAckPacketBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SanitySwapAckPacketBody& from);
  void MergeFrom(const SanitySwapAckPacketBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SanitySwapAckPacketBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.SanitySwapAckPacketBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:packets.SanitySwapAckPacketBody)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Packets_2eproto;
};
// -------------------------------------------------------------------

class Packet :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:packets.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Packet& default_instance();

  enum SwapCase {
    kReq = 1,
    kFail = 2,
    kComplete = 3,
    kAccepted = 4,
    kInvoiceExchange = 5,
    kExchangeAck = 6,
    SWAP_NOT_SET = 0,
  };

  enum SanityCase {
    kInit = 7,
    kAck = 8,
    SANITY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "packets.Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Packets_2eproto);
    return ::descriptor_table_Packets_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReqFieldNumber = 1,
    kFailFieldNumber = 2,
    kCompleteFieldNumber = 3,
    kAcceptedFieldNumber = 4,
    kInvoiceExchangeFieldNumber = 5,
    kExchangeAckFieldNumber = 6,
    kInitFieldNumber = 7,
    kAckFieldNumber = 8,
  };
  // .packets.SwapRequestPacketBody req = 1;
  bool has_req() const;
  private:
  bool _internal_has_req() const;
  public:
  void clear_req();
  const ::packets::SwapRequestPacketBody& req() const;
  ::packets::SwapRequestPacketBody* release_req();
  ::packets::SwapRequestPacketBody* mutable_req();
  void set_allocated_req(::packets::SwapRequestPacketBody* req);
  private:
  const ::packets::SwapRequestPacketBody& _internal_req() const;
  ::packets::SwapRequestPacketBody* _internal_mutable_req();
  public:

  // .packets.SwapFailedPacketBody fail = 2;
  bool has_fail() const;
  private:
  bool _internal_has_fail() const;
  public:
  void clear_fail();
  const ::packets::SwapFailedPacketBody& fail() const;
  ::packets::SwapFailedPacketBody* release_fail();
  ::packets::SwapFailedPacketBody* mutable_fail();
  void set_allocated_fail(::packets::SwapFailedPacketBody* fail);
  private:
  const ::packets::SwapFailedPacketBody& _internal_fail() const;
  ::packets::SwapFailedPacketBody* _internal_mutable_fail();
  public:

  // .packets.SwapCompletePacketBody complete = 3;
  bool has_complete() const;
  private:
  bool _internal_has_complete() const;
  public:
  void clear_complete();
  const ::packets::SwapCompletePacketBody& complete() const;
  ::packets::SwapCompletePacketBody* release_complete();
  ::packets::SwapCompletePacketBody* mutable_complete();
  void set_allocated_complete(::packets::SwapCompletePacketBody* complete);
  private:
  const ::packets::SwapCompletePacketBody& _internal_complete() const;
  ::packets::SwapCompletePacketBody* _internal_mutable_complete();
  public:

  // .packets.SwapAcceptedPacketBody accepted = 4;
  bool has_accepted() const;
  private:
  bool _internal_has_accepted() const;
  public:
  void clear_accepted();
  const ::packets::SwapAcceptedPacketBody& accepted() const;
  ::packets::SwapAcceptedPacketBody* release_accepted();
  ::packets::SwapAcceptedPacketBody* mutable_accepted();
  void set_allocated_accepted(::packets::SwapAcceptedPacketBody* accepted);
  private:
  const ::packets::SwapAcceptedPacketBody& _internal_accepted() const;
  ::packets::SwapAcceptedPacketBody* _internal_mutable_accepted();
  public:

  // .packets.InvoiceExchangePacketBody invoice_exchange = 5;
  bool has_invoice_exchange() const;
  private:
  bool _internal_has_invoice_exchange() const;
  public:
  void clear_invoice_exchange();
  const ::packets::InvoiceExchangePacketBody& invoice_exchange() const;
  ::packets::InvoiceExchangePacketBody* release_invoice_exchange();
  ::packets::InvoiceExchangePacketBody* mutable_invoice_exchange();
  void set_allocated_invoice_exchange(::packets::InvoiceExchangePacketBody* invoice_exchange);
  private:
  const ::packets::InvoiceExchangePacketBody& _internal_invoice_exchange() const;
  ::packets::InvoiceExchangePacketBody* _internal_mutable_invoice_exchange();
  public:

  // .packets.InvoiceExchangeAckPacketBody exchange_ack = 6;
  bool has_exchange_ack() const;
  private:
  bool _internal_has_exchange_ack() const;
  public:
  void clear_exchange_ack();
  const ::packets::InvoiceExchangeAckPacketBody& exchange_ack() const;
  ::packets::InvoiceExchangeAckPacketBody* release_exchange_ack();
  ::packets::InvoiceExchangeAckPacketBody* mutable_exchange_ack();
  void set_allocated_exchange_ack(::packets::InvoiceExchangeAckPacketBody* exchange_ack);
  private:
  const ::packets::InvoiceExchangeAckPacketBody& _internal_exchange_ack() const;
  ::packets::InvoiceExchangeAckPacketBody* _internal_mutable_exchange_ack();
  public:

  // .packets.SanitySwapInitPacketBody init = 7;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::packets::SanitySwapInitPacketBody& init() const;
  ::packets::SanitySwapInitPacketBody* release_init();
  ::packets::SanitySwapInitPacketBody* mutable_init();
  void set_allocated_init(::packets::SanitySwapInitPacketBody* init);
  private:
  const ::packets::SanitySwapInitPacketBody& _internal_init() const;
  ::packets::SanitySwapInitPacketBody* _internal_mutable_init();
  public:

  // .packets.SanitySwapAckPacketBody ack = 8;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  const ::packets::SanitySwapAckPacketBody& ack() const;
  ::packets::SanitySwapAckPacketBody* release_ack();
  ::packets::SanitySwapAckPacketBody* mutable_ack();
  void set_allocated_ack(::packets::SanitySwapAckPacketBody* ack);
  private:
  const ::packets::SanitySwapAckPacketBody& _internal_ack() const;
  ::packets::SanitySwapAckPacketBody* _internal_mutable_ack();
  public:

  void clear_swap();
  SwapCase swap_case() const;
  void clear_sanity();
  SanityCase sanity_case() const;
  // @@protoc_insertion_point(class_scope:packets.Packet)
 private:
  class _Internal;
  void set_has_req();
  void set_has_fail();
  void set_has_complete();
  void set_has_accepted();
  void set_has_invoice_exchange();
  void set_has_exchange_ack();
  void set_has_init();
  void set_has_ack();

  inline bool has_swap() const;
  inline void clear_has_swap();

  inline bool has_sanity() const;
  inline void clear_has_sanity();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union SwapUnion {
    SwapUnion() {}
    ::packets::SwapRequestPacketBody* req_;
    ::packets::SwapFailedPacketBody* fail_;
    ::packets::SwapCompletePacketBody* complete_;
    ::packets::SwapAcceptedPacketBody* accepted_;
    ::packets::InvoiceExchangePacketBody* invoice_exchange_;
    ::packets::InvoiceExchangeAckPacketBody* exchange_ack_;
  } swap_;
  union SanityUnion {
    SanityUnion() {}
    ::packets::SanitySwapInitPacketBody* init_;
    ::packets::SanitySwapAckPacketBody* ack_;
  } sanity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_Packets_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SwapRequestPacketBody

// int64 proposedQuantity = 1;
inline void SwapRequestPacketBody::clear_proposedquantity() {
  proposedquantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapRequestPacketBody::_internal_proposedquantity() const {
  return proposedquantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapRequestPacketBody::proposedquantity() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.proposedQuantity)
  return _internal_proposedquantity();
}
inline void SwapRequestPacketBody::_internal_set_proposedquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  proposedquantity_ = value;
}
inline void SwapRequestPacketBody::set_proposedquantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_proposedquantity(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.proposedQuantity)
}

// string pairId = 2;
inline void SwapRequestPacketBody::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapRequestPacketBody::pairid() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.pairId)
  return _internal_pairid();
}
inline void SwapRequestPacketBody::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.pairId)
}
inline std::string* SwapRequestPacketBody::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:packets.SwapRequestPacketBody.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& SwapRequestPacketBody::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void SwapRequestPacketBody::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapRequestPacketBody::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapRequestPacketBody.pairId)
}
inline void SwapRequestPacketBody::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapRequestPacketBody.pairId)
}
inline void SwapRequestPacketBody::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapRequestPacketBody.pairId)
}
inline std::string* SwapRequestPacketBody::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapRequestPacketBody::release_pairid() {
  // @@protoc_insertion_point(field_release:packets.SwapRequestPacketBody.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapRequestPacketBody::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapRequestPacketBody.pairId)
}

// string orderId = 3;
inline void SwapRequestPacketBody::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapRequestPacketBody::orderid() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.orderId)
  return _internal_orderid();
}
inline void SwapRequestPacketBody::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.orderId)
}
inline std::string* SwapRequestPacketBody::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:packets.SwapRequestPacketBody.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& SwapRequestPacketBody::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void SwapRequestPacketBody::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapRequestPacketBody::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapRequestPacketBody.orderId)
}
inline void SwapRequestPacketBody::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapRequestPacketBody.orderId)
}
inline void SwapRequestPacketBody::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapRequestPacketBody.orderId)
}
inline std::string* SwapRequestPacketBody::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapRequestPacketBody::release_orderid() {
  // @@protoc_insertion_point(field_release:packets.SwapRequestPacketBody.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapRequestPacketBody::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapRequestPacketBody.orderId)
}

// string rHash = 4;
inline void SwapRequestPacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapRequestPacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.rHash)
  return _internal_rhash();
}
inline void SwapRequestPacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.rHash)
}
inline std::string* SwapRequestPacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.SwapRequestPacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SwapRequestPacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SwapRequestPacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapRequestPacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapRequestPacketBody.rHash)
}
inline void SwapRequestPacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapRequestPacketBody.rHash)
}
inline void SwapRequestPacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapRequestPacketBody.rHash)
}
inline std::string* SwapRequestPacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapRequestPacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.SwapRequestPacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapRequestPacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapRequestPacketBody.rHash)
}

// uint32 takerCltvDelta = 5;
inline void SwapRequestPacketBody::clear_takercltvdelta() {
  takercltvdelta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapRequestPacketBody::_internal_takercltvdelta() const {
  return takercltvdelta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapRequestPacketBody::takercltvdelta() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.takerCltvDelta)
  return _internal_takercltvdelta();
}
inline void SwapRequestPacketBody::_internal_set_takercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  takercltvdelta_ = value;
}
inline void SwapRequestPacketBody::set_takercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_takercltvdelta(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.takerCltvDelta)
}

// string takerDestination = 6;
inline void SwapRequestPacketBody::clear_takerdestination() {
  takerdestination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapRequestPacketBody::takerdestination() const {
  // @@protoc_insertion_point(field_get:packets.SwapRequestPacketBody.takerDestination)
  return _internal_takerdestination();
}
inline void SwapRequestPacketBody::set_takerdestination(const std::string& value) {
  _internal_set_takerdestination(value);
  // @@protoc_insertion_point(field_set:packets.SwapRequestPacketBody.takerDestination)
}
inline std::string* SwapRequestPacketBody::mutable_takerdestination() {
  // @@protoc_insertion_point(field_mutable:packets.SwapRequestPacketBody.takerDestination)
  return _internal_mutable_takerdestination();
}
inline const std::string& SwapRequestPacketBody::_internal_takerdestination() const {
  return takerdestination_.GetNoArena();
}
inline void SwapRequestPacketBody::_internal_set_takerdestination(const std::string& value) {
  
  takerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapRequestPacketBody::set_takerdestination(std::string&& value) {
  
  takerdestination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapRequestPacketBody.takerDestination)
}
inline void SwapRequestPacketBody::set_takerdestination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  takerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapRequestPacketBody.takerDestination)
}
inline void SwapRequestPacketBody::set_takerdestination(const char* value, size_t size) {
  
  takerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapRequestPacketBody.takerDestination)
}
inline std::string* SwapRequestPacketBody::_internal_mutable_takerdestination() {
  
  return takerdestination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapRequestPacketBody::release_takerdestination() {
  // @@protoc_insertion_point(field_release:packets.SwapRequestPacketBody.takerDestination)
  
  return takerdestination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapRequestPacketBody::set_allocated_takerdestination(std::string* takerdestination) {
  if (takerdestination != nullptr) {
    
  } else {
    
  }
  takerdestination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), takerdestination);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapRequestPacketBody.takerDestination)
}

// -------------------------------------------------------------------

// SwapFailedPacketBody

// string rHash = 1;
inline void SwapFailedPacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapFailedPacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.SwapFailedPacketBody.rHash)
  return _internal_rhash();
}
inline void SwapFailedPacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.SwapFailedPacketBody.rHash)
}
inline std::string* SwapFailedPacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.SwapFailedPacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SwapFailedPacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SwapFailedPacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapFailedPacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapFailedPacketBody.rHash)
}
inline void SwapFailedPacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapFailedPacketBody.rHash)
}
inline void SwapFailedPacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapFailedPacketBody.rHash)
}
inline std::string* SwapFailedPacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapFailedPacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.SwapFailedPacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapFailedPacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapFailedPacketBody.rHash)
}

// uint32 failureReason = 2;
inline void SwapFailedPacketBody::clear_failurereason() {
  failurereason_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapFailedPacketBody::_internal_failurereason() const {
  return failurereason_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapFailedPacketBody::failurereason() const {
  // @@protoc_insertion_point(field_get:packets.SwapFailedPacketBody.failureReason)
  return _internal_failurereason();
}
inline void SwapFailedPacketBody::_internal_set_failurereason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  failurereason_ = value;
}
inline void SwapFailedPacketBody::set_failurereason(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_failurereason(value);
  // @@protoc_insertion_point(field_set:packets.SwapFailedPacketBody.failureReason)
}

// string errorMessage = 3;
inline void SwapFailedPacketBody::clear_errormessage() {
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapFailedPacketBody::errormessage() const {
  // @@protoc_insertion_point(field_get:packets.SwapFailedPacketBody.errorMessage)
  return _internal_errormessage();
}
inline void SwapFailedPacketBody::set_errormessage(const std::string& value) {
  _internal_set_errormessage(value);
  // @@protoc_insertion_point(field_set:packets.SwapFailedPacketBody.errorMessage)
}
inline std::string* SwapFailedPacketBody::mutable_errormessage() {
  // @@protoc_insertion_point(field_mutable:packets.SwapFailedPacketBody.errorMessage)
  return _internal_mutable_errormessage();
}
inline const std::string& SwapFailedPacketBody::_internal_errormessage() const {
  return errormessage_.GetNoArena();
}
inline void SwapFailedPacketBody::_internal_set_errormessage(const std::string& value) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapFailedPacketBody::set_errormessage(std::string&& value) {
  
  errormessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapFailedPacketBody.errorMessage)
}
inline void SwapFailedPacketBody::set_errormessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapFailedPacketBody.errorMessage)
}
inline void SwapFailedPacketBody::set_errormessage(const char* value, size_t size) {
  
  errormessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapFailedPacketBody.errorMessage)
}
inline std::string* SwapFailedPacketBody::_internal_mutable_errormessage() {
  
  return errormessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapFailedPacketBody::release_errormessage() {
  // @@protoc_insertion_point(field_release:packets.SwapFailedPacketBody.errorMessage)
  
  return errormessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapFailedPacketBody::set_allocated_errormessage(std::string* errormessage) {
  if (errormessage != nullptr) {
    
  } else {
    
  }
  errormessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errormessage);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapFailedPacketBody.errorMessage)
}

// -------------------------------------------------------------------

// SwapCompletePacketBody

// string rHash = 1;
inline void SwapCompletePacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapCompletePacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.SwapCompletePacketBody.rHash)
  return _internal_rhash();
}
inline void SwapCompletePacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.SwapCompletePacketBody.rHash)
}
inline std::string* SwapCompletePacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.SwapCompletePacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SwapCompletePacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SwapCompletePacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapCompletePacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapCompletePacketBody.rHash)
}
inline void SwapCompletePacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapCompletePacketBody.rHash)
}
inline void SwapCompletePacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapCompletePacketBody.rHash)
}
inline std::string* SwapCompletePacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapCompletePacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.SwapCompletePacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapCompletePacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapCompletePacketBody.rHash)
}

// -------------------------------------------------------------------

// SwapAcceptedPacketBody

// string rHash = 1;
inline void SwapAcceptedPacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapAcceptedPacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.SwapAcceptedPacketBody.rHash)
  return _internal_rhash();
}
inline void SwapAcceptedPacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.SwapAcceptedPacketBody.rHash)
}
inline std::string* SwapAcceptedPacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.SwapAcceptedPacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SwapAcceptedPacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SwapAcceptedPacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapAcceptedPacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapAcceptedPacketBody.rHash)
}
inline void SwapAcceptedPacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapAcceptedPacketBody.rHash)
}
inline void SwapAcceptedPacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapAcceptedPacketBody.rHash)
}
inline std::string* SwapAcceptedPacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapAcceptedPacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.SwapAcceptedPacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapAcceptedPacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapAcceptedPacketBody.rHash)
}

// int64 quantity = 2;
inline void SwapAcceptedPacketBody::clear_quantity() {
  quantity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapAcceptedPacketBody::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SwapAcceptedPacketBody::quantity() const {
  // @@protoc_insertion_point(field_get:packets.SwapAcceptedPacketBody.quantity)
  return _internal_quantity();
}
inline void SwapAcceptedPacketBody::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quantity_ = value;
}
inline void SwapAcceptedPacketBody::set_quantity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:packets.SwapAcceptedPacketBody.quantity)
}

// uint32 makerCltvDelta = 3;
inline void SwapAcceptedPacketBody::clear_makercltvdelta() {
  makercltvdelta_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapAcceptedPacketBody::_internal_makercltvdelta() const {
  return makercltvdelta_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SwapAcceptedPacketBody::makercltvdelta() const {
  // @@protoc_insertion_point(field_get:packets.SwapAcceptedPacketBody.makerCltvDelta)
  return _internal_makercltvdelta();
}
inline void SwapAcceptedPacketBody::_internal_set_makercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  makercltvdelta_ = value;
}
inline void SwapAcceptedPacketBody::set_makercltvdelta(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_makercltvdelta(value);
  // @@protoc_insertion_point(field_set:packets.SwapAcceptedPacketBody.makerCltvDelta)
}

// string makerDestination = 4;
inline void SwapAcceptedPacketBody::clear_makerdestination() {
  makerdestination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapAcceptedPacketBody::makerdestination() const {
  // @@protoc_insertion_point(field_get:packets.SwapAcceptedPacketBody.makerDestination)
  return _internal_makerdestination();
}
inline void SwapAcceptedPacketBody::set_makerdestination(const std::string& value) {
  _internal_set_makerdestination(value);
  // @@protoc_insertion_point(field_set:packets.SwapAcceptedPacketBody.makerDestination)
}
inline std::string* SwapAcceptedPacketBody::mutable_makerdestination() {
  // @@protoc_insertion_point(field_mutable:packets.SwapAcceptedPacketBody.makerDestination)
  return _internal_mutable_makerdestination();
}
inline const std::string& SwapAcceptedPacketBody::_internal_makerdestination() const {
  return makerdestination_.GetNoArena();
}
inline void SwapAcceptedPacketBody::_internal_set_makerdestination(const std::string& value) {
  
  makerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapAcceptedPacketBody::set_makerdestination(std::string&& value) {
  
  makerdestination_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapAcceptedPacketBody.makerDestination)
}
inline void SwapAcceptedPacketBody::set_makerdestination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  makerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapAcceptedPacketBody.makerDestination)
}
inline void SwapAcceptedPacketBody::set_makerdestination(const char* value, size_t size) {
  
  makerdestination_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapAcceptedPacketBody.makerDestination)
}
inline std::string* SwapAcceptedPacketBody::_internal_mutable_makerdestination() {
  
  return makerdestination_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapAcceptedPacketBody::release_makerdestination() {
  // @@protoc_insertion_point(field_release:packets.SwapAcceptedPacketBody.makerDestination)
  
  return makerdestination_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapAcceptedPacketBody::set_allocated_makerdestination(std::string* makerdestination) {
  if (makerdestination != nullptr) {
    
  } else {
    
  }
  makerdestination_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), makerdestination);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapAcceptedPacketBody.makerDestination)
}

// string makerPaymentRequest = 5;
inline void SwapAcceptedPacketBody::clear_makerpaymentrequest() {
  makerpaymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapAcceptedPacketBody::makerpaymentrequest() const {
  // @@protoc_insertion_point(field_get:packets.SwapAcceptedPacketBody.makerPaymentRequest)
  return _internal_makerpaymentrequest();
}
inline void SwapAcceptedPacketBody::set_makerpaymentrequest(const std::string& value) {
  _internal_set_makerpaymentrequest(value);
  // @@protoc_insertion_point(field_set:packets.SwapAcceptedPacketBody.makerPaymentRequest)
}
inline std::string* SwapAcceptedPacketBody::mutable_makerpaymentrequest() {
  // @@protoc_insertion_point(field_mutable:packets.SwapAcceptedPacketBody.makerPaymentRequest)
  return _internal_mutable_makerpaymentrequest();
}
inline const std::string& SwapAcceptedPacketBody::_internal_makerpaymentrequest() const {
  return makerpaymentrequest_.GetNoArena();
}
inline void SwapAcceptedPacketBody::_internal_set_makerpaymentrequest(const std::string& value) {
  
  makerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapAcceptedPacketBody::set_makerpaymentrequest(std::string&& value) {
  
  makerpaymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SwapAcceptedPacketBody.makerPaymentRequest)
}
inline void SwapAcceptedPacketBody::set_makerpaymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  makerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SwapAcceptedPacketBody.makerPaymentRequest)
}
inline void SwapAcceptedPacketBody::set_makerpaymentrequest(const char* value, size_t size) {
  
  makerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SwapAcceptedPacketBody.makerPaymentRequest)
}
inline std::string* SwapAcceptedPacketBody::_internal_mutable_makerpaymentrequest() {
  
  return makerpaymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapAcceptedPacketBody::release_makerpaymentrequest() {
  // @@protoc_insertion_point(field_release:packets.SwapAcceptedPacketBody.makerPaymentRequest)
  
  return makerpaymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapAcceptedPacketBody::set_allocated_makerpaymentrequest(std::string* makerpaymentrequest) {
  if (makerpaymentrequest != nullptr) {
    
  } else {
    
  }
  makerpaymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), makerpaymentrequest);
  // @@protoc_insertion_point(field_set_allocated:packets.SwapAcceptedPacketBody.makerPaymentRequest)
}

// -------------------------------------------------------------------

// InvoiceExchangePacketBody

// string rHash = 1;
inline void InvoiceExchangePacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvoiceExchangePacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.InvoiceExchangePacketBody.rHash)
  return _internal_rhash();
}
inline void InvoiceExchangePacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.InvoiceExchangePacketBody.rHash)
}
inline std::string* InvoiceExchangePacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.InvoiceExchangePacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& InvoiceExchangePacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void InvoiceExchangePacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvoiceExchangePacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.InvoiceExchangePacketBody.rHash)
}
inline void InvoiceExchangePacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.InvoiceExchangePacketBody.rHash)
}
inline void InvoiceExchangePacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.InvoiceExchangePacketBody.rHash)
}
inline std::string* InvoiceExchangePacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvoiceExchangePacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.InvoiceExchangePacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvoiceExchangePacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.InvoiceExchangePacketBody.rHash)
}

// string takerPaymentRequest = 2;
inline void InvoiceExchangePacketBody::clear_takerpaymentrequest() {
  takerpaymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvoiceExchangePacketBody::takerpaymentrequest() const {
  // @@protoc_insertion_point(field_get:packets.InvoiceExchangePacketBody.takerPaymentRequest)
  return _internal_takerpaymentrequest();
}
inline void InvoiceExchangePacketBody::set_takerpaymentrequest(const std::string& value) {
  _internal_set_takerpaymentrequest(value);
  // @@protoc_insertion_point(field_set:packets.InvoiceExchangePacketBody.takerPaymentRequest)
}
inline std::string* InvoiceExchangePacketBody::mutable_takerpaymentrequest() {
  // @@protoc_insertion_point(field_mutable:packets.InvoiceExchangePacketBody.takerPaymentRequest)
  return _internal_mutable_takerpaymentrequest();
}
inline const std::string& InvoiceExchangePacketBody::_internal_takerpaymentrequest() const {
  return takerpaymentrequest_.GetNoArena();
}
inline void InvoiceExchangePacketBody::_internal_set_takerpaymentrequest(const std::string& value) {
  
  takerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvoiceExchangePacketBody::set_takerpaymentrequest(std::string&& value) {
  
  takerpaymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.InvoiceExchangePacketBody.takerPaymentRequest)
}
inline void InvoiceExchangePacketBody::set_takerpaymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  takerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.InvoiceExchangePacketBody.takerPaymentRequest)
}
inline void InvoiceExchangePacketBody::set_takerpaymentrequest(const char* value, size_t size) {
  
  takerpaymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.InvoiceExchangePacketBody.takerPaymentRequest)
}
inline std::string* InvoiceExchangePacketBody::_internal_mutable_takerpaymentrequest() {
  
  return takerpaymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvoiceExchangePacketBody::release_takerpaymentrequest() {
  // @@protoc_insertion_point(field_release:packets.InvoiceExchangePacketBody.takerPaymentRequest)
  
  return takerpaymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvoiceExchangePacketBody::set_allocated_takerpaymentrequest(std::string* takerpaymentrequest) {
  if (takerpaymentrequest != nullptr) {
    
  } else {
    
  }
  takerpaymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), takerpaymentrequest);
  // @@protoc_insertion_point(field_set_allocated:packets.InvoiceExchangePacketBody.takerPaymentRequest)
}

// -------------------------------------------------------------------

// InvoiceExchangeAckPacketBody

// string rHash = 1;
inline void InvoiceExchangeAckPacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InvoiceExchangeAckPacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.InvoiceExchangeAckPacketBody.rHash)
  return _internal_rhash();
}
inline void InvoiceExchangeAckPacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.InvoiceExchangeAckPacketBody.rHash)
}
inline std::string* InvoiceExchangeAckPacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.InvoiceExchangeAckPacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& InvoiceExchangeAckPacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void InvoiceExchangeAckPacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InvoiceExchangeAckPacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.InvoiceExchangeAckPacketBody.rHash)
}
inline void InvoiceExchangeAckPacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.InvoiceExchangeAckPacketBody.rHash)
}
inline void InvoiceExchangeAckPacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.InvoiceExchangeAckPacketBody.rHash)
}
inline std::string* InvoiceExchangeAckPacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InvoiceExchangeAckPacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.InvoiceExchangeAckPacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InvoiceExchangeAckPacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.InvoiceExchangeAckPacketBody.rHash)
}

// -------------------------------------------------------------------

// SanitySwapInitPacketBody

// string currency = 1;
inline void SanitySwapInitPacketBody::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SanitySwapInitPacketBody::currency() const {
  // @@protoc_insertion_point(field_get:packets.SanitySwapInitPacketBody.currency)
  return _internal_currency();
}
inline void SanitySwapInitPacketBody::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:packets.SanitySwapInitPacketBody.currency)
}
inline std::string* SanitySwapInitPacketBody::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:packets.SanitySwapInitPacketBody.currency)
  return _internal_mutable_currency();
}
inline const std::string& SanitySwapInitPacketBody::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void SanitySwapInitPacketBody::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SanitySwapInitPacketBody::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SanitySwapInitPacketBody.currency)
}
inline void SanitySwapInitPacketBody::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SanitySwapInitPacketBody.currency)
}
inline void SanitySwapInitPacketBody::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SanitySwapInitPacketBody.currency)
}
inline std::string* SanitySwapInitPacketBody::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SanitySwapInitPacketBody::release_currency() {
  // @@protoc_insertion_point(field_release:packets.SanitySwapInitPacketBody.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SanitySwapInitPacketBody::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:packets.SanitySwapInitPacketBody.currency)
}

// string rHash = 2;
inline void SanitySwapInitPacketBody::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SanitySwapInitPacketBody::rhash() const {
  // @@protoc_insertion_point(field_get:packets.SanitySwapInitPacketBody.rHash)
  return _internal_rhash();
}
inline void SanitySwapInitPacketBody::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:packets.SanitySwapInitPacketBody.rHash)
}
inline std::string* SanitySwapInitPacketBody::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:packets.SanitySwapInitPacketBody.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SanitySwapInitPacketBody::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SanitySwapInitPacketBody::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SanitySwapInitPacketBody::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:packets.SanitySwapInitPacketBody.rHash)
}
inline void SanitySwapInitPacketBody::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:packets.SanitySwapInitPacketBody.rHash)
}
inline void SanitySwapInitPacketBody::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:packets.SanitySwapInitPacketBody.rHash)
}
inline std::string* SanitySwapInitPacketBody::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SanitySwapInitPacketBody::release_rhash() {
  // @@protoc_insertion_point(field_release:packets.SanitySwapInitPacketBody.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SanitySwapInitPacketBody::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:packets.SanitySwapInitPacketBody.rHash)
}

// -------------------------------------------------------------------

// SanitySwapAckPacketBody

// -------------------------------------------------------------------

// Packet

// .packets.SwapRequestPacketBody req = 1;
inline bool Packet::_internal_has_req() const {
  return swap_case() == kReq;
}
inline bool Packet::has_req() const {
  return _internal_has_req();
}
inline void Packet::set_has_req() {
  _oneof_case_[0] = kReq;
}
inline void Packet::clear_req() {
  if (_internal_has_req()) {
    delete swap_.req_;
    clear_has_swap();
  }
}
inline ::packets::SwapRequestPacketBody* Packet::release_req() {
  // @@protoc_insertion_point(field_release:packets.Packet.req)
  if (_internal_has_req()) {
    clear_has_swap();
      ::packets::SwapRequestPacketBody* temp = swap_.req_;
    swap_.req_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SwapRequestPacketBody& Packet::_internal_req() const {
  return _internal_has_req()
      ? *swap_.req_
      : *reinterpret_cast< ::packets::SwapRequestPacketBody*>(&::packets::_SwapRequestPacketBody_default_instance_);
}
inline const ::packets::SwapRequestPacketBody& Packet::req() const {
  // @@protoc_insertion_point(field_get:packets.Packet.req)
  return _internal_req();
}
inline ::packets::SwapRequestPacketBody* Packet::_internal_mutable_req() {
  if (!_internal_has_req()) {
    clear_swap();
    set_has_req();
    swap_.req_ = CreateMaybeMessage< ::packets::SwapRequestPacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.req_;
}
inline ::packets::SwapRequestPacketBody* Packet::mutable_req() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.req)
  return _internal_mutable_req();
}

// .packets.SwapFailedPacketBody fail = 2;
inline bool Packet::_internal_has_fail() const {
  return swap_case() == kFail;
}
inline bool Packet::has_fail() const {
  return _internal_has_fail();
}
inline void Packet::set_has_fail() {
  _oneof_case_[0] = kFail;
}
inline void Packet::clear_fail() {
  if (_internal_has_fail()) {
    delete swap_.fail_;
    clear_has_swap();
  }
}
inline ::packets::SwapFailedPacketBody* Packet::release_fail() {
  // @@protoc_insertion_point(field_release:packets.Packet.fail)
  if (_internal_has_fail()) {
    clear_has_swap();
      ::packets::SwapFailedPacketBody* temp = swap_.fail_;
    swap_.fail_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SwapFailedPacketBody& Packet::_internal_fail() const {
  return _internal_has_fail()
      ? *swap_.fail_
      : *reinterpret_cast< ::packets::SwapFailedPacketBody*>(&::packets::_SwapFailedPacketBody_default_instance_);
}
inline const ::packets::SwapFailedPacketBody& Packet::fail() const {
  // @@protoc_insertion_point(field_get:packets.Packet.fail)
  return _internal_fail();
}
inline ::packets::SwapFailedPacketBody* Packet::_internal_mutable_fail() {
  if (!_internal_has_fail()) {
    clear_swap();
    set_has_fail();
    swap_.fail_ = CreateMaybeMessage< ::packets::SwapFailedPacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.fail_;
}
inline ::packets::SwapFailedPacketBody* Packet::mutable_fail() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.fail)
  return _internal_mutable_fail();
}

// .packets.SwapCompletePacketBody complete = 3;
inline bool Packet::_internal_has_complete() const {
  return swap_case() == kComplete;
}
inline bool Packet::has_complete() const {
  return _internal_has_complete();
}
inline void Packet::set_has_complete() {
  _oneof_case_[0] = kComplete;
}
inline void Packet::clear_complete() {
  if (_internal_has_complete()) {
    delete swap_.complete_;
    clear_has_swap();
  }
}
inline ::packets::SwapCompletePacketBody* Packet::release_complete() {
  // @@protoc_insertion_point(field_release:packets.Packet.complete)
  if (_internal_has_complete()) {
    clear_has_swap();
      ::packets::SwapCompletePacketBody* temp = swap_.complete_;
    swap_.complete_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SwapCompletePacketBody& Packet::_internal_complete() const {
  return _internal_has_complete()
      ? *swap_.complete_
      : *reinterpret_cast< ::packets::SwapCompletePacketBody*>(&::packets::_SwapCompletePacketBody_default_instance_);
}
inline const ::packets::SwapCompletePacketBody& Packet::complete() const {
  // @@protoc_insertion_point(field_get:packets.Packet.complete)
  return _internal_complete();
}
inline ::packets::SwapCompletePacketBody* Packet::_internal_mutable_complete() {
  if (!_internal_has_complete()) {
    clear_swap();
    set_has_complete();
    swap_.complete_ = CreateMaybeMessage< ::packets::SwapCompletePacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.complete_;
}
inline ::packets::SwapCompletePacketBody* Packet::mutable_complete() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.complete)
  return _internal_mutable_complete();
}

// .packets.SwapAcceptedPacketBody accepted = 4;
inline bool Packet::_internal_has_accepted() const {
  return swap_case() == kAccepted;
}
inline bool Packet::has_accepted() const {
  return _internal_has_accepted();
}
inline void Packet::set_has_accepted() {
  _oneof_case_[0] = kAccepted;
}
inline void Packet::clear_accepted() {
  if (_internal_has_accepted()) {
    delete swap_.accepted_;
    clear_has_swap();
  }
}
inline ::packets::SwapAcceptedPacketBody* Packet::release_accepted() {
  // @@protoc_insertion_point(field_release:packets.Packet.accepted)
  if (_internal_has_accepted()) {
    clear_has_swap();
      ::packets::SwapAcceptedPacketBody* temp = swap_.accepted_;
    swap_.accepted_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SwapAcceptedPacketBody& Packet::_internal_accepted() const {
  return _internal_has_accepted()
      ? *swap_.accepted_
      : *reinterpret_cast< ::packets::SwapAcceptedPacketBody*>(&::packets::_SwapAcceptedPacketBody_default_instance_);
}
inline const ::packets::SwapAcceptedPacketBody& Packet::accepted() const {
  // @@protoc_insertion_point(field_get:packets.Packet.accepted)
  return _internal_accepted();
}
inline ::packets::SwapAcceptedPacketBody* Packet::_internal_mutable_accepted() {
  if (!_internal_has_accepted()) {
    clear_swap();
    set_has_accepted();
    swap_.accepted_ = CreateMaybeMessage< ::packets::SwapAcceptedPacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.accepted_;
}
inline ::packets::SwapAcceptedPacketBody* Packet::mutable_accepted() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.accepted)
  return _internal_mutable_accepted();
}

// .packets.InvoiceExchangePacketBody invoice_exchange = 5;
inline bool Packet::_internal_has_invoice_exchange() const {
  return swap_case() == kInvoiceExchange;
}
inline bool Packet::has_invoice_exchange() const {
  return _internal_has_invoice_exchange();
}
inline void Packet::set_has_invoice_exchange() {
  _oneof_case_[0] = kInvoiceExchange;
}
inline void Packet::clear_invoice_exchange() {
  if (_internal_has_invoice_exchange()) {
    delete swap_.invoice_exchange_;
    clear_has_swap();
  }
}
inline ::packets::InvoiceExchangePacketBody* Packet::release_invoice_exchange() {
  // @@protoc_insertion_point(field_release:packets.Packet.invoice_exchange)
  if (_internal_has_invoice_exchange()) {
    clear_has_swap();
      ::packets::InvoiceExchangePacketBody* temp = swap_.invoice_exchange_;
    swap_.invoice_exchange_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::InvoiceExchangePacketBody& Packet::_internal_invoice_exchange() const {
  return _internal_has_invoice_exchange()
      ? *swap_.invoice_exchange_
      : *reinterpret_cast< ::packets::InvoiceExchangePacketBody*>(&::packets::_InvoiceExchangePacketBody_default_instance_);
}
inline const ::packets::InvoiceExchangePacketBody& Packet::invoice_exchange() const {
  // @@protoc_insertion_point(field_get:packets.Packet.invoice_exchange)
  return _internal_invoice_exchange();
}
inline ::packets::InvoiceExchangePacketBody* Packet::_internal_mutable_invoice_exchange() {
  if (!_internal_has_invoice_exchange()) {
    clear_swap();
    set_has_invoice_exchange();
    swap_.invoice_exchange_ = CreateMaybeMessage< ::packets::InvoiceExchangePacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.invoice_exchange_;
}
inline ::packets::InvoiceExchangePacketBody* Packet::mutable_invoice_exchange() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.invoice_exchange)
  return _internal_mutable_invoice_exchange();
}

// .packets.InvoiceExchangeAckPacketBody exchange_ack = 6;
inline bool Packet::_internal_has_exchange_ack() const {
  return swap_case() == kExchangeAck;
}
inline bool Packet::has_exchange_ack() const {
  return _internal_has_exchange_ack();
}
inline void Packet::set_has_exchange_ack() {
  _oneof_case_[0] = kExchangeAck;
}
inline void Packet::clear_exchange_ack() {
  if (_internal_has_exchange_ack()) {
    delete swap_.exchange_ack_;
    clear_has_swap();
  }
}
inline ::packets::InvoiceExchangeAckPacketBody* Packet::release_exchange_ack() {
  // @@protoc_insertion_point(field_release:packets.Packet.exchange_ack)
  if (_internal_has_exchange_ack()) {
    clear_has_swap();
      ::packets::InvoiceExchangeAckPacketBody* temp = swap_.exchange_ack_;
    swap_.exchange_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::InvoiceExchangeAckPacketBody& Packet::_internal_exchange_ack() const {
  return _internal_has_exchange_ack()
      ? *swap_.exchange_ack_
      : *reinterpret_cast< ::packets::InvoiceExchangeAckPacketBody*>(&::packets::_InvoiceExchangeAckPacketBody_default_instance_);
}
inline const ::packets::InvoiceExchangeAckPacketBody& Packet::exchange_ack() const {
  // @@protoc_insertion_point(field_get:packets.Packet.exchange_ack)
  return _internal_exchange_ack();
}
inline ::packets::InvoiceExchangeAckPacketBody* Packet::_internal_mutable_exchange_ack() {
  if (!_internal_has_exchange_ack()) {
    clear_swap();
    set_has_exchange_ack();
    swap_.exchange_ack_ = CreateMaybeMessage< ::packets::InvoiceExchangeAckPacketBody >(
        GetArenaNoVirtual());
  }
  return swap_.exchange_ack_;
}
inline ::packets::InvoiceExchangeAckPacketBody* Packet::mutable_exchange_ack() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.exchange_ack)
  return _internal_mutable_exchange_ack();
}

// .packets.SanitySwapInitPacketBody init = 7;
inline bool Packet::_internal_has_init() const {
  return sanity_case() == kInit;
}
inline bool Packet::has_init() const {
  return _internal_has_init();
}
inline void Packet::set_has_init() {
  _oneof_case_[1] = kInit;
}
inline void Packet::clear_init() {
  if (_internal_has_init()) {
    delete sanity_.init_;
    clear_has_sanity();
  }
}
inline ::packets::SanitySwapInitPacketBody* Packet::release_init() {
  // @@protoc_insertion_point(field_release:packets.Packet.init)
  if (_internal_has_init()) {
    clear_has_sanity();
      ::packets::SanitySwapInitPacketBody* temp = sanity_.init_;
    sanity_.init_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SanitySwapInitPacketBody& Packet::_internal_init() const {
  return _internal_has_init()
      ? *sanity_.init_
      : *reinterpret_cast< ::packets::SanitySwapInitPacketBody*>(&::packets::_SanitySwapInitPacketBody_default_instance_);
}
inline const ::packets::SanitySwapInitPacketBody& Packet::init() const {
  // @@protoc_insertion_point(field_get:packets.Packet.init)
  return _internal_init();
}
inline ::packets::SanitySwapInitPacketBody* Packet::_internal_mutable_init() {
  if (!_internal_has_init()) {
    clear_sanity();
    set_has_init();
    sanity_.init_ = CreateMaybeMessage< ::packets::SanitySwapInitPacketBody >(
        GetArenaNoVirtual());
  }
  return sanity_.init_;
}
inline ::packets::SanitySwapInitPacketBody* Packet::mutable_init() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.init)
  return _internal_mutable_init();
}

// .packets.SanitySwapAckPacketBody ack = 8;
inline bool Packet::_internal_has_ack() const {
  return sanity_case() == kAck;
}
inline bool Packet::has_ack() const {
  return _internal_has_ack();
}
inline void Packet::set_has_ack() {
  _oneof_case_[1] = kAck;
}
inline void Packet::clear_ack() {
  if (_internal_has_ack()) {
    delete sanity_.ack_;
    clear_has_sanity();
  }
}
inline ::packets::SanitySwapAckPacketBody* Packet::release_ack() {
  // @@protoc_insertion_point(field_release:packets.Packet.ack)
  if (_internal_has_ack()) {
    clear_has_sanity();
      ::packets::SanitySwapAckPacketBody* temp = sanity_.ack_;
    sanity_.ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::packets::SanitySwapAckPacketBody& Packet::_internal_ack() const {
  return _internal_has_ack()
      ? *sanity_.ack_
      : *reinterpret_cast< ::packets::SanitySwapAckPacketBody*>(&::packets::_SanitySwapAckPacketBody_default_instance_);
}
inline const ::packets::SanitySwapAckPacketBody& Packet::ack() const {
  // @@protoc_insertion_point(field_get:packets.Packet.ack)
  return _internal_ack();
}
inline ::packets::SanitySwapAckPacketBody* Packet::_internal_mutable_ack() {
  if (!_internal_has_ack()) {
    clear_sanity();
    set_has_ack();
    sanity_.ack_ = CreateMaybeMessage< ::packets::SanitySwapAckPacketBody >(
        GetArenaNoVirtual());
  }
  return sanity_.ack_;
}
inline ::packets::SanitySwapAckPacketBody* Packet::mutable_ack() {
  // @@protoc_insertion_point(field_mutable:packets.Packet.ack)
  return _internal_mutable_ack();
}

inline bool Packet::has_swap() const {
  return swap_case() != SWAP_NOT_SET;
}
inline void Packet::clear_has_swap() {
  _oneof_case_[0] = SWAP_NOT_SET;
}
inline bool Packet::has_sanity() const {
  return sanity_case() != SANITY_NOT_SET;
}
inline void Packet::clear_has_sanity() {
  _oneof_case_[1] = SANITY_NOT_SET;
}
inline Packet::SwapCase Packet::swap_case() const {
  return Packet::SwapCase(_oneof_case_[0]);
}
inline Packet::SanityCase Packet::sanity_case() const {
  return Packet::SanityCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace packets

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Packets_2eproto
