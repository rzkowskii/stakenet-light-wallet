// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets.proto

#include "Packets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceExchangePacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SanitySwapAckPacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SanitySwapInitPacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapAcceptedPacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapCompletePacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapFailedPacketBody_Packets_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Packets_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapRequestPacketBody_Packets_2eproto;
namespace packets {
class SwapRequestPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapRequestPacketBody> _instance;
} _SwapRequestPacketBody_default_instance_;
class SwapFailedPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapFailedPacketBody> _instance;
} _SwapFailedPacketBody_default_instance_;
class SwapCompletePacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapCompletePacketBody> _instance;
} _SwapCompletePacketBody_default_instance_;
class SwapAcceptedPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SwapAcceptedPacketBody> _instance;
} _SwapAcceptedPacketBody_default_instance_;
class InvoiceExchangePacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvoiceExchangePacketBody> _instance;
} _InvoiceExchangePacketBody_default_instance_;
class InvoiceExchangeAckPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InvoiceExchangeAckPacketBody> _instance;
} _InvoiceExchangeAckPacketBody_default_instance_;
class SanitySwapInitPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SanitySwapInitPacketBody> _instance;
} _SanitySwapInitPacketBody_default_instance_;
class SanitySwapAckPacketBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SanitySwapAckPacketBody> _instance;
} _SanitySwapAckPacketBody_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Packet> _instance;
  const ::packets::SwapRequestPacketBody* req_;
  const ::packets::SwapFailedPacketBody* fail_;
  const ::packets::SwapCompletePacketBody* complete_;
  const ::packets::SwapAcceptedPacketBody* accepted_;
  const ::packets::InvoiceExchangePacketBody* invoice_exchange_;
  const ::packets::InvoiceExchangeAckPacketBody* exchange_ack_;
  const ::packets::SanitySwapInitPacketBody* init_;
  const ::packets::SanitySwapAckPacketBody* ack_;
} _Packet_default_instance_;
}  // namespace packets
static void InitDefaultsscc_info_InvoiceExchangeAckPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_InvoiceExchangeAckPacketBody_default_instance_;
    new (ptr) ::packets::InvoiceExchangeAckPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::InvoiceExchangeAckPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvoiceExchangeAckPacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_InvoiceExchangePacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_InvoiceExchangePacketBody_default_instance_;
    new (ptr) ::packets::InvoiceExchangePacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::InvoiceExchangePacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InvoiceExchangePacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InvoiceExchangePacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_Packet_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_Packet_default_instance_;
    new (ptr) ::packets::Packet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::Packet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Packet_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Packet_Packets_2eproto}, {
      &scc_info_SwapRequestPacketBody_Packets_2eproto.base,
      &scc_info_SwapFailedPacketBody_Packets_2eproto.base,
      &scc_info_SwapCompletePacketBody_Packets_2eproto.base,
      &scc_info_SwapAcceptedPacketBody_Packets_2eproto.base,
      &scc_info_InvoiceExchangePacketBody_Packets_2eproto.base,
      &scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto.base,
      &scc_info_SanitySwapInitPacketBody_Packets_2eproto.base,
      &scc_info_SanitySwapAckPacketBody_Packets_2eproto.base,}};

static void InitDefaultsscc_info_SanitySwapAckPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SanitySwapAckPacketBody_default_instance_;
    new (ptr) ::packets::SanitySwapAckPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SanitySwapAckPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SanitySwapAckPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SanitySwapAckPacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_SanitySwapInitPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SanitySwapInitPacketBody_default_instance_;
    new (ptr) ::packets::SanitySwapInitPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SanitySwapInitPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SanitySwapInitPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SanitySwapInitPacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_SwapAcceptedPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SwapAcceptedPacketBody_default_instance_;
    new (ptr) ::packets::SwapAcceptedPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SwapAcceptedPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapAcceptedPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapAcceptedPacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_SwapCompletePacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SwapCompletePacketBody_default_instance_;
    new (ptr) ::packets::SwapCompletePacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SwapCompletePacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapCompletePacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapCompletePacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_SwapFailedPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SwapFailedPacketBody_default_instance_;
    new (ptr) ::packets::SwapFailedPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SwapFailedPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapFailedPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapFailedPacketBody_Packets_2eproto}, {}};

static void InitDefaultsscc_info_SwapRequestPacketBody_Packets_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::packets::_SwapRequestPacketBody_default_instance_;
    new (ptr) ::packets::SwapRequestPacketBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::packets::SwapRequestPacketBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SwapRequestPacketBody_Packets_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SwapRequestPacketBody_Packets_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Packets_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Packets_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Packets_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Packets_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, proposedquantity_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, pairid_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, orderid_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, rhash_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, takercltvdelta_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapRequestPacketBody, takerdestination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SwapFailedPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::SwapFailedPacketBody, rhash_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapFailedPacketBody, failurereason_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapFailedPacketBody, errormessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SwapCompletePacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::SwapCompletePacketBody, rhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, rhash_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, quantity_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, makercltvdelta_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, makerdestination_),
  PROTOBUF_FIELD_OFFSET(::packets::SwapAcceptedPacketBody, makerpaymentrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::InvoiceExchangePacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::InvoiceExchangePacketBody, rhash_),
  PROTOBUF_FIELD_OFFSET(::packets::InvoiceExchangePacketBody, takerpaymentrequest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::InvoiceExchangeAckPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::InvoiceExchangeAckPacketBody, rhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SanitySwapInitPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::packets::SanitySwapInitPacketBody, currency_),
  PROTOBUF_FIELD_OFFSET(::packets::SanitySwapInitPacketBody, rhash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::SanitySwapAckPacketBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::packets::Packet, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::packets::Packet, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::packets::PacketDefaultTypeInternal, req_),
  offsetof(::packets::PacketDefaultTypeInternal, fail_),
  offsetof(::packets::PacketDefaultTypeInternal, complete_),
  offsetof(::packets::PacketDefaultTypeInternal, accepted_),
  offsetof(::packets::PacketDefaultTypeInternal, invoice_exchange_),
  offsetof(::packets::PacketDefaultTypeInternal, exchange_ack_),
  offsetof(::packets::PacketDefaultTypeInternal, init_),
  offsetof(::packets::PacketDefaultTypeInternal, ack_),
  PROTOBUF_FIELD_OFFSET(::packets::Packet, swap_),
  PROTOBUF_FIELD_OFFSET(::packets::Packet, sanity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::packets::SwapRequestPacketBody)},
  { 11, -1, sizeof(::packets::SwapFailedPacketBody)},
  { 19, -1, sizeof(::packets::SwapCompletePacketBody)},
  { 25, -1, sizeof(::packets::SwapAcceptedPacketBody)},
  { 35, -1, sizeof(::packets::InvoiceExchangePacketBody)},
  { 42, -1, sizeof(::packets::InvoiceExchangeAckPacketBody)},
  { 48, -1, sizeof(::packets::SanitySwapInitPacketBody)},
  { 55, -1, sizeof(::packets::SanitySwapAckPacketBody)},
  { 60, -1, sizeof(::packets::Packet)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SwapRequestPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SwapFailedPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SwapCompletePacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SwapAcceptedPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_InvoiceExchangePacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_InvoiceExchangeAckPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SanitySwapInitPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_SanitySwapAckPacketBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::packets::_Packet_default_instance_),
};

const char descriptor_table_protodef_Packets_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rPackets.proto\022\007packets\"\223\001\n\025SwapRequest"
  "PacketBody\022\030\n\020proposedQuantity\030\001 \001(\003\022\016\n\006"
  "pairId\030\002 \001(\t\022\017\n\007orderId\030\003 \001(\t\022\r\n\005rHash\030\004"
  " \001(\t\022\026\n\016takerCltvDelta\030\005 \001(\r\022\030\n\020takerDes"
  "tination\030\006 \001(\t\"R\n\024SwapFailedPacketBody\022\r"
  "\n\005rHash\030\001 \001(\t\022\025\n\rfailureReason\030\002 \001(\r\022\024\n\014"
  "errorMessage\030\003 \001(\t\"\'\n\026SwapCompletePacket"
  "Body\022\r\n\005rHash\030\001 \001(\t\"\210\001\n\026SwapAcceptedPack"
  "etBody\022\r\n\005rHash\030\001 \001(\t\022\020\n\010quantity\030\002 \001(\003\022"
  "\026\n\016makerCltvDelta\030\003 \001(\r\022\030\n\020makerDestinat"
  "ion\030\004 \001(\t\022\033\n\023makerPaymentRequest\030\005 \001(\t\"G"
  "\n\031InvoiceExchangePacketBody\022\r\n\005rHash\030\001 \001"
  "(\t\022\033\n\023takerPaymentRequest\030\002 \001(\t\"-\n\034Invoi"
  "ceExchangeAckPacketBody\022\r\n\005rHash\030\001 \001(\t\";"
  "\n\030SanitySwapInitPacketBody\022\020\n\010currency\030\001"
  " \001(\t\022\r\n\005rHash\030\002 \001(\t\"\031\n\027SanitySwapAckPack"
  "etBody\"\305\003\n\006Packet\022-\n\003req\030\001 \001(\0132\036.packets"
  ".SwapRequestPacketBodyH\000\022-\n\004fail\030\002 \001(\0132\035"
  ".packets.SwapFailedPacketBodyH\000\0223\n\010compl"
  "ete\030\003 \001(\0132\037.packets.SwapCompletePacketBo"
  "dyH\000\0223\n\010accepted\030\004 \001(\0132\037.packets.SwapAcc"
  "eptedPacketBodyH\000\022>\n\020invoice_exchange\030\005 "
  "\001(\0132\".packets.InvoiceExchangePacketBodyH"
  "\000\022=\n\014exchange_ack\030\006 \001(\0132%.packets.Invoic"
  "eExchangeAckPacketBodyH\000\0221\n\004init\030\007 \001(\0132!"
  ".packets.SanitySwapInitPacketBodyH\001\022/\n\003a"
  "ck\030\010 \001(\0132 .packets.SanitySwapAckPacketBo"
  "dyH\001B\006\n\004swapB\010\n\006sanityb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Packets_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Packets_2eproto_sccs[9] = {
  &scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto.base,
  &scc_info_InvoiceExchangePacketBody_Packets_2eproto.base,
  &scc_info_Packet_Packets_2eproto.base,
  &scc_info_SanitySwapAckPacketBody_Packets_2eproto.base,
  &scc_info_SanitySwapInitPacketBody_Packets_2eproto.base,
  &scc_info_SwapAcceptedPacketBody_Packets_2eproto.base,
  &scc_info_SwapCompletePacketBody_Packets_2eproto.base,
  &scc_info_SwapFailedPacketBody_Packets_2eproto.base,
  &scc_info_SwapRequestPacketBody_Packets_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Packets_2eproto_once;
static bool descriptor_table_Packets_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Packets_2eproto = {
  &descriptor_table_Packets_2eproto_initialized, descriptor_table_protodef_Packets_2eproto, "Packets.proto", 1110,
  &descriptor_table_Packets_2eproto_once, descriptor_table_Packets_2eproto_sccs, descriptor_table_Packets_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_Packets_2eproto::offsets,
  file_level_metadata_Packets_2eproto, 9, file_level_enum_descriptors_Packets_2eproto, file_level_service_descriptors_Packets_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Packets_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Packets_2eproto), true);
namespace packets {

// ===================================================================

void SwapRequestPacketBody::InitAsDefaultInstance() {
}
class SwapRequestPacketBody::_Internal {
 public:
};

SwapRequestPacketBody::SwapRequestPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SwapRequestPacketBody)
}
SwapRequestPacketBody::SwapRequestPacketBody(const SwapRequestPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairid().empty()) {
    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_orderid().empty()) {
    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  takerdestination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_takerdestination().empty()) {
    takerdestination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.takerdestination_);
  }
  ::memcpy(&proposedquantity_, &from.proposedquantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&takercltvdelta_) -
    reinterpret_cast<char*>(&proposedquantity_)) + sizeof(takercltvdelta_));
  // @@protoc_insertion_point(copy_constructor:packets.SwapRequestPacketBody)
}

void SwapRequestPacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapRequestPacketBody_Packets_2eproto.base);
  pairid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerdestination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proposedquantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takercltvdelta_) -
      reinterpret_cast<char*>(&proposedquantity_)) + sizeof(takercltvdelta_));
}

SwapRequestPacketBody::~SwapRequestPacketBody() {
  // @@protoc_insertion_point(destructor:packets.SwapRequestPacketBody)
  SharedDtor();
}

void SwapRequestPacketBody::SharedDtor() {
  pairid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerdestination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapRequestPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapRequestPacketBody& SwapRequestPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapRequestPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SwapRequestPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SwapRequestPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerdestination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&proposedquantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&takercltvdelta_) -
      reinterpret_cast<char*>(&proposedquantity_)) + sizeof(takercltvdelta_));
  _internal_metadata_.Clear();
}

const char* SwapRequestPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 proposedQuantity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          proposedquantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pairId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pairid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapRequestPacketBody.pairId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string orderId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_orderid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapRequestPacketBody.orderId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rHash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapRequestPacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 takerCltvDelta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          takercltvdelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string takerDestination = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_takerdestination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapRequestPacketBody.takerDestination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapRequestPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SwapRequestPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 proposedQuantity = 1;
  if (this->proposedquantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_proposedquantity(), target);
  }

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairid().data(), static_cast<int>(this->_internal_pairid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapRequestPacketBody.pairId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pairid(), target);
  }

  // string orderId = 3;
  if (this->orderid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_orderid().data(), static_cast<int>(this->_internal_orderid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapRequestPacketBody.orderId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_orderid(), target);
  }

  // string rHash = 4;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapRequestPacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_rhash(), target);
  }

  // uint32 takerCltvDelta = 5;
  if (this->takercltvdelta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_takercltvdelta(), target);
  }

  // string takerDestination = 6;
  if (this->takerdestination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takerdestination().data(), static_cast<int>(this->_internal_takerdestination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapRequestPacketBody.takerDestination");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_takerdestination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SwapRequestPacketBody)
  return target;
}

size_t SwapRequestPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SwapRequestPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pairId = 2;
  if (this->pairid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairid());
  }

  // string orderId = 3;
  if (this->orderid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_orderid());
  }

  // string rHash = 4;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  // string takerDestination = 6;
  if (this->takerdestination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takerdestination());
  }

  // int64 proposedQuantity = 1;
  if (this->proposedquantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_proposedquantity());
  }

  // uint32 takerCltvDelta = 5;
  if (this->takercltvdelta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_takercltvdelta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapRequestPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SwapRequestPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapRequestPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapRequestPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SwapRequestPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SwapRequestPacketBody)
    MergeFrom(*source);
  }
}

void SwapRequestPacketBody::MergeFrom(const SwapRequestPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SwapRequestPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pairid().size() > 0) {

    pairid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pairid_);
  }
  if (from.orderid().size() > 0) {

    orderid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.orderid_);
  }
  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  if (from.takerdestination().size() > 0) {

    takerdestination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.takerdestination_);
  }
  if (from.proposedquantity() != 0) {
    _internal_set_proposedquantity(from._internal_proposedquantity());
  }
  if (from.takercltvdelta() != 0) {
    _internal_set_takercltvdelta(from._internal_takercltvdelta());
  }
}

void SwapRequestPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SwapRequestPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapRequestPacketBody::CopyFrom(const SwapRequestPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SwapRequestPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapRequestPacketBody::IsInitialized() const {
  return true;
}

void SwapRequestPacketBody::InternalSwap(SwapRequestPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  pairid_.Swap(&other->pairid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  orderid_.Swap(&other->orderid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  takerdestination_.Swap(&other->takerdestination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(proposedquantity_, other->proposedquantity_);
  swap(takercltvdelta_, other->takercltvdelta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapRequestPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapFailedPacketBody::InitAsDefaultInstance() {
}
class SwapFailedPacketBody::_Internal {
 public:
};

SwapFailedPacketBody::SwapFailedPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SwapFailedPacketBody)
}
SwapFailedPacketBody::SwapFailedPacketBody(const SwapFailedPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errormessage().empty()) {
    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  failurereason_ = from.failurereason_;
  // @@protoc_insertion_point(copy_constructor:packets.SwapFailedPacketBody)
}

void SwapFailedPacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapFailedPacketBody_Packets_2eproto.base);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_ = 0u;
}

SwapFailedPacketBody::~SwapFailedPacketBody() {
  // @@protoc_insertion_point(destructor:packets.SwapFailedPacketBody)
  SharedDtor();
}

void SwapFailedPacketBody::SharedDtor() {
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapFailedPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapFailedPacketBody& SwapFailedPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapFailedPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SwapFailedPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SwapFailedPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  errormessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  failurereason_ = 0u;
  _internal_metadata_.Clear();
}

const char* SwapFailedPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapFailedPacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 failureReason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          failurereason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errorMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errormessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapFailedPacketBody.errorMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapFailedPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SwapFailedPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapFailedPacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rhash(), target);
  }

  // uint32 failureReason = 2;
  if (this->failurereason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_failurereason(), target);
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errormessage().data(), static_cast<int>(this->_internal_errormessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapFailedPacketBody.errorMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errormessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SwapFailedPacketBody)
  return target;
}

size_t SwapFailedPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SwapFailedPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  // string errorMessage = 3;
  if (this->errormessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errormessage());
  }

  // uint32 failureReason = 2;
  if (this->failurereason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_failurereason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapFailedPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SwapFailedPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapFailedPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapFailedPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SwapFailedPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SwapFailedPacketBody)
    MergeFrom(*source);
  }
}

void SwapFailedPacketBody::MergeFrom(const SwapFailedPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SwapFailedPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  if (from.errormessage().size() > 0) {

    errormessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errormessage_);
  }
  if (from.failurereason() != 0) {
    _internal_set_failurereason(from._internal_failurereason());
  }
}

void SwapFailedPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SwapFailedPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapFailedPacketBody::CopyFrom(const SwapFailedPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SwapFailedPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapFailedPacketBody::IsInitialized() const {
  return true;
}

void SwapFailedPacketBody::InternalSwap(SwapFailedPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  errormessage_.Swap(&other->errormessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(failurereason_, other->failurereason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapFailedPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapCompletePacketBody::InitAsDefaultInstance() {
}
class SwapCompletePacketBody::_Internal {
 public:
};

SwapCompletePacketBody::SwapCompletePacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SwapCompletePacketBody)
}
SwapCompletePacketBody::SwapCompletePacketBody(const SwapCompletePacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  // @@protoc_insertion_point(copy_constructor:packets.SwapCompletePacketBody)
}

void SwapCompletePacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapCompletePacketBody_Packets_2eproto.base);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SwapCompletePacketBody::~SwapCompletePacketBody() {
  // @@protoc_insertion_point(destructor:packets.SwapCompletePacketBody)
  SharedDtor();
}

void SwapCompletePacketBody::SharedDtor() {
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapCompletePacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapCompletePacketBody& SwapCompletePacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapCompletePacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SwapCompletePacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SwapCompletePacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SwapCompletePacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapCompletePacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapCompletePacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SwapCompletePacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapCompletePacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SwapCompletePacketBody)
  return target;
}

size_t SwapCompletePacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SwapCompletePacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapCompletePacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SwapCompletePacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapCompletePacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapCompletePacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SwapCompletePacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SwapCompletePacketBody)
    MergeFrom(*source);
  }
}

void SwapCompletePacketBody::MergeFrom(const SwapCompletePacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SwapCompletePacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
}

void SwapCompletePacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SwapCompletePacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapCompletePacketBody::CopyFrom(const SwapCompletePacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SwapCompletePacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapCompletePacketBody::IsInitialized() const {
  return true;
}

void SwapCompletePacketBody::InternalSwap(SwapCompletePacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapCompletePacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SwapAcceptedPacketBody::InitAsDefaultInstance() {
}
class SwapAcceptedPacketBody::_Internal {
 public:
};

SwapAcceptedPacketBody::SwapAcceptedPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SwapAcceptedPacketBody)
}
SwapAcceptedPacketBody::SwapAcceptedPacketBody(const SwapAcceptedPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  makerdestination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_makerdestination().empty()) {
    makerdestination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.makerdestination_);
  }
  makerpaymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_makerpaymentrequest().empty()) {
    makerpaymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.makerpaymentrequest_);
  }
  ::memcpy(&quantity_, &from.quantity_,
    static_cast<size_t>(reinterpret_cast<char*>(&makercltvdelta_) -
    reinterpret_cast<char*>(&quantity_)) + sizeof(makercltvdelta_));
  // @@protoc_insertion_point(copy_constructor:packets.SwapAcceptedPacketBody)
}

void SwapAcceptedPacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SwapAcceptedPacketBody_Packets_2eproto.base);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerdestination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerpaymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&makercltvdelta_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(makercltvdelta_));
}

SwapAcceptedPacketBody::~SwapAcceptedPacketBody() {
  // @@protoc_insertion_point(destructor:packets.SwapAcceptedPacketBody)
  SharedDtor();
}

void SwapAcceptedPacketBody::SharedDtor() {
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerdestination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerpaymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SwapAcceptedPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SwapAcceptedPacketBody& SwapAcceptedPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SwapAcceptedPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SwapAcceptedPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SwapAcceptedPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerdestination_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  makerpaymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&quantity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&makercltvdelta_) -
      reinterpret_cast<char*>(&quantity_)) + sizeof(makercltvdelta_));
  _internal_metadata_.Clear();
}

const char* SwapAcceptedPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapAcceptedPacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 quantity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          quantity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 makerCltvDelta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          makercltvdelta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string makerDestination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_makerdestination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapAcceptedPacketBody.makerDestination"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string makerPaymentRequest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_makerpaymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SwapAcceptedPacketBody.makerPaymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SwapAcceptedPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SwapAcceptedPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapAcceptedPacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rhash(), target);
  }

  // int64 quantity = 2;
  if (this->quantity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_quantity(), target);
  }

  // uint32 makerCltvDelta = 3;
  if (this->makercltvdelta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_makercltvdelta(), target);
  }

  // string makerDestination = 4;
  if (this->makerdestination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_makerdestination().data(), static_cast<int>(this->_internal_makerdestination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapAcceptedPacketBody.makerDestination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_makerdestination(), target);
  }

  // string makerPaymentRequest = 5;
  if (this->makerpaymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_makerpaymentrequest().data(), static_cast<int>(this->_internal_makerpaymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SwapAcceptedPacketBody.makerPaymentRequest");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_makerpaymentrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SwapAcceptedPacketBody)
  return target;
}

size_t SwapAcceptedPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SwapAcceptedPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  // string makerDestination = 4;
  if (this->makerdestination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_makerdestination());
  }

  // string makerPaymentRequest = 5;
  if (this->makerpaymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_makerpaymentrequest());
  }

  // int64 quantity = 2;
  if (this->quantity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_quantity());
  }

  // uint32 makerCltvDelta = 3;
  if (this->makercltvdelta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_makercltvdelta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SwapAcceptedPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SwapAcceptedPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SwapAcceptedPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SwapAcceptedPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SwapAcceptedPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SwapAcceptedPacketBody)
    MergeFrom(*source);
  }
}

void SwapAcceptedPacketBody::MergeFrom(const SwapAcceptedPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SwapAcceptedPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  if (from.makerdestination().size() > 0) {

    makerdestination_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.makerdestination_);
  }
  if (from.makerpaymentrequest().size() > 0) {

    makerpaymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.makerpaymentrequest_);
  }
  if (from.quantity() != 0) {
    _internal_set_quantity(from._internal_quantity());
  }
  if (from.makercltvdelta() != 0) {
    _internal_set_makercltvdelta(from._internal_makercltvdelta());
  }
}

void SwapAcceptedPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SwapAcceptedPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapAcceptedPacketBody::CopyFrom(const SwapAcceptedPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SwapAcceptedPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapAcceptedPacketBody::IsInitialized() const {
  return true;
}

void SwapAcceptedPacketBody::InternalSwap(SwapAcceptedPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  makerdestination_.Swap(&other->makerdestination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  makerpaymentrequest_.Swap(&other->makerpaymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quantity_, other->quantity_);
  swap(makercltvdelta_, other->makercltvdelta_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SwapAcceptedPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvoiceExchangePacketBody::InitAsDefaultInstance() {
}
class InvoiceExchangePacketBody::_Internal {
 public:
};

InvoiceExchangePacketBody::InvoiceExchangePacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.InvoiceExchangePacketBody)
}
InvoiceExchangePacketBody::InvoiceExchangePacketBody(const InvoiceExchangePacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  takerpaymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_takerpaymentrequest().empty()) {
    takerpaymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.takerpaymentrequest_);
  }
  // @@protoc_insertion_point(copy_constructor:packets.InvoiceExchangePacketBody)
}

void InvoiceExchangePacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvoiceExchangePacketBody_Packets_2eproto.base);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerpaymentrequest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvoiceExchangePacketBody::~InvoiceExchangePacketBody() {
  // @@protoc_insertion_point(destructor:packets.InvoiceExchangePacketBody)
  SharedDtor();
}

void InvoiceExchangePacketBody::SharedDtor() {
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerpaymentrequest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvoiceExchangePacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvoiceExchangePacketBody& InvoiceExchangePacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvoiceExchangePacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void InvoiceExchangePacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.InvoiceExchangePacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  takerpaymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InvoiceExchangePacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.InvoiceExchangePacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string takerPaymentRequest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_takerpaymentrequest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.InvoiceExchangePacketBody.takerPaymentRequest"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvoiceExchangePacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.InvoiceExchangePacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.InvoiceExchangePacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rhash(), target);
  }

  // string takerPaymentRequest = 2;
  if (this->takerpaymentrequest().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_takerpaymentrequest().data(), static_cast<int>(this->_internal_takerpaymentrequest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.InvoiceExchangePacketBody.takerPaymentRequest");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_takerpaymentrequest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.InvoiceExchangePacketBody)
  return target;
}

size_t InvoiceExchangePacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.InvoiceExchangePacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  // string takerPaymentRequest = 2;
  if (this->takerpaymentrequest().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_takerpaymentrequest());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvoiceExchangePacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.InvoiceExchangePacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const InvoiceExchangePacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvoiceExchangePacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.InvoiceExchangePacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.InvoiceExchangePacketBody)
    MergeFrom(*source);
  }
}

void InvoiceExchangePacketBody::MergeFrom(const InvoiceExchangePacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.InvoiceExchangePacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  if (from.takerpaymentrequest().size() > 0) {

    takerpaymentrequest_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.takerpaymentrequest_);
  }
}

void InvoiceExchangePacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.InvoiceExchangePacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceExchangePacketBody::CopyFrom(const InvoiceExchangePacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.InvoiceExchangePacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceExchangePacketBody::IsInitialized() const {
  return true;
}

void InvoiceExchangePacketBody::InternalSwap(InvoiceExchangePacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  takerpaymentrequest_.Swap(&other->takerpaymentrequest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceExchangePacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InvoiceExchangeAckPacketBody::InitAsDefaultInstance() {
}
class InvoiceExchangeAckPacketBody::_Internal {
 public:
};

InvoiceExchangeAckPacketBody::InvoiceExchangeAckPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.InvoiceExchangeAckPacketBody)
}
InvoiceExchangeAckPacketBody::InvoiceExchangeAckPacketBody(const InvoiceExchangeAckPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  // @@protoc_insertion_point(copy_constructor:packets.InvoiceExchangeAckPacketBody)
}

void InvoiceExchangeAckPacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto.base);
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InvoiceExchangeAckPacketBody::~InvoiceExchangeAckPacketBody() {
  // @@protoc_insertion_point(destructor:packets.InvoiceExchangeAckPacketBody)
  SharedDtor();
}

void InvoiceExchangeAckPacketBody::SharedDtor() {
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InvoiceExchangeAckPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InvoiceExchangeAckPacketBody& InvoiceExchangeAckPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InvoiceExchangeAckPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void InvoiceExchangeAckPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.InvoiceExchangeAckPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InvoiceExchangeAckPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string rHash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.InvoiceExchangeAckPacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InvoiceExchangeAckPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.InvoiceExchangeAckPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.InvoiceExchangeAckPacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_rhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.InvoiceExchangeAckPacketBody)
  return target;
}

size_t InvoiceExchangeAckPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.InvoiceExchangeAckPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rHash = 1;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvoiceExchangeAckPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.InvoiceExchangeAckPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const InvoiceExchangeAckPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InvoiceExchangeAckPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.InvoiceExchangeAckPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.InvoiceExchangeAckPacketBody)
    MergeFrom(*source);
  }
}

void InvoiceExchangeAckPacketBody::MergeFrom(const InvoiceExchangeAckPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.InvoiceExchangeAckPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
}

void InvoiceExchangeAckPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.InvoiceExchangeAckPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvoiceExchangeAckPacketBody::CopyFrom(const InvoiceExchangeAckPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.InvoiceExchangeAckPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvoiceExchangeAckPacketBody::IsInitialized() const {
  return true;
}

void InvoiceExchangeAckPacketBody::InternalSwap(InvoiceExchangeAckPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InvoiceExchangeAckPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SanitySwapInitPacketBody::InitAsDefaultInstance() {
}
class SanitySwapInitPacketBody::_Internal {
 public:
};

SanitySwapInitPacketBody::SanitySwapInitPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SanitySwapInitPacketBody)
}
SanitySwapInitPacketBody::SanitySwapInitPacketBody(const SanitySwapInitPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_currency().empty()) {
    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rhash().empty()) {
    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
  // @@protoc_insertion_point(copy_constructor:packets.SanitySwapInitPacketBody)
}

void SanitySwapInitPacketBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SanitySwapInitPacketBody_Packets_2eproto.base);
  currency_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SanitySwapInitPacketBody::~SanitySwapInitPacketBody() {
  // @@protoc_insertion_point(destructor:packets.SanitySwapInitPacketBody)
  SharedDtor();
}

void SanitySwapInitPacketBody::SharedDtor() {
  currency_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SanitySwapInitPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SanitySwapInitPacketBody& SanitySwapInitPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SanitySwapInitPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SanitySwapInitPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SanitySwapInitPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SanitySwapInitPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string currency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_currency();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SanitySwapInitPacketBody.currency"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rHash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rhash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "packets.SanitySwapInitPacketBody.rHash"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SanitySwapInitPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SanitySwapInitPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_currency().data(), static_cast<int>(this->_internal_currency().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SanitySwapInitPacketBody.currency");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_currency(), target);
  }

  // string rHash = 2;
  if (this->rhash().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rhash().data(), static_cast<int>(this->_internal_rhash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "packets.SanitySwapInitPacketBody.rHash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rhash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SanitySwapInitPacketBody)
  return target;
}

size_t SanitySwapInitPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SanitySwapInitPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string currency = 1;
  if (this->currency().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency());
  }

  // string rHash = 2;
  if (this->rhash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rhash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SanitySwapInitPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SanitySwapInitPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SanitySwapInitPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SanitySwapInitPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SanitySwapInitPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SanitySwapInitPacketBody)
    MergeFrom(*source);
  }
}

void SanitySwapInitPacketBody::MergeFrom(const SanitySwapInitPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SanitySwapInitPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.currency().size() > 0) {

    currency_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.currency_);
  }
  if (from.rhash().size() > 0) {

    rhash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rhash_);
  }
}

void SanitySwapInitPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SanitySwapInitPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SanitySwapInitPacketBody::CopyFrom(const SanitySwapInitPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SanitySwapInitPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SanitySwapInitPacketBody::IsInitialized() const {
  return true;
}

void SanitySwapInitPacketBody::InternalSwap(SanitySwapInitPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  currency_.Swap(&other->currency_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rhash_.Swap(&other->rhash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SanitySwapInitPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SanitySwapAckPacketBody::InitAsDefaultInstance() {
}
class SanitySwapAckPacketBody::_Internal {
 public:
};

SanitySwapAckPacketBody::SanitySwapAckPacketBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.SanitySwapAckPacketBody)
}
SanitySwapAckPacketBody::SanitySwapAckPacketBody(const SanitySwapAckPacketBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:packets.SanitySwapAckPacketBody)
}

void SanitySwapAckPacketBody::SharedCtor() {
}

SanitySwapAckPacketBody::~SanitySwapAckPacketBody() {
  // @@protoc_insertion_point(destructor:packets.SanitySwapAckPacketBody)
  SharedDtor();
}

void SanitySwapAckPacketBody::SharedDtor() {
}

void SanitySwapAckPacketBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SanitySwapAckPacketBody& SanitySwapAckPacketBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SanitySwapAckPacketBody_Packets_2eproto.base);
  return *internal_default_instance();
}


void SanitySwapAckPacketBody::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.SanitySwapAckPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SanitySwapAckPacketBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SanitySwapAckPacketBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.SanitySwapAckPacketBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.SanitySwapAckPacketBody)
  return target;
}

size_t SanitySwapAckPacketBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.SanitySwapAckPacketBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SanitySwapAckPacketBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.SanitySwapAckPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  const SanitySwapAckPacketBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SanitySwapAckPacketBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.SanitySwapAckPacketBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.SanitySwapAckPacketBody)
    MergeFrom(*source);
  }
}

void SanitySwapAckPacketBody::MergeFrom(const SanitySwapAckPacketBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.SanitySwapAckPacketBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SanitySwapAckPacketBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.SanitySwapAckPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SanitySwapAckPacketBody::CopyFrom(const SanitySwapAckPacketBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.SanitySwapAckPacketBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SanitySwapAckPacketBody::IsInitialized() const {
  return true;
}

void SanitySwapAckPacketBody::InternalSwap(SanitySwapAckPacketBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SanitySwapAckPacketBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::packets::_Packet_default_instance_.req_ = const_cast< ::packets::SwapRequestPacketBody*>(
      ::packets::SwapRequestPacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.fail_ = const_cast< ::packets::SwapFailedPacketBody*>(
      ::packets::SwapFailedPacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.complete_ = const_cast< ::packets::SwapCompletePacketBody*>(
      ::packets::SwapCompletePacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.accepted_ = const_cast< ::packets::SwapAcceptedPacketBody*>(
      ::packets::SwapAcceptedPacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.invoice_exchange_ = const_cast< ::packets::InvoiceExchangePacketBody*>(
      ::packets::InvoiceExchangePacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.exchange_ack_ = const_cast< ::packets::InvoiceExchangeAckPacketBody*>(
      ::packets::InvoiceExchangeAckPacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.init_ = const_cast< ::packets::SanitySwapInitPacketBody*>(
      ::packets::SanitySwapInitPacketBody::internal_default_instance());
  ::packets::_Packet_default_instance_.ack_ = const_cast< ::packets::SanitySwapAckPacketBody*>(
      ::packets::SanitySwapAckPacketBody::internal_default_instance());
}
class Packet::_Internal {
 public:
  static const ::packets::SwapRequestPacketBody& req(const Packet* msg);
  static const ::packets::SwapFailedPacketBody& fail(const Packet* msg);
  static const ::packets::SwapCompletePacketBody& complete(const Packet* msg);
  static const ::packets::SwapAcceptedPacketBody& accepted(const Packet* msg);
  static const ::packets::InvoiceExchangePacketBody& invoice_exchange(const Packet* msg);
  static const ::packets::InvoiceExchangeAckPacketBody& exchange_ack(const Packet* msg);
  static const ::packets::SanitySwapInitPacketBody& init(const Packet* msg);
  static const ::packets::SanitySwapAckPacketBody& ack(const Packet* msg);
};

const ::packets::SwapRequestPacketBody&
Packet::_Internal::req(const Packet* msg) {
  return *msg->swap_.req_;
}
const ::packets::SwapFailedPacketBody&
Packet::_Internal::fail(const Packet* msg) {
  return *msg->swap_.fail_;
}
const ::packets::SwapCompletePacketBody&
Packet::_Internal::complete(const Packet* msg) {
  return *msg->swap_.complete_;
}
const ::packets::SwapAcceptedPacketBody&
Packet::_Internal::accepted(const Packet* msg) {
  return *msg->swap_.accepted_;
}
const ::packets::InvoiceExchangePacketBody&
Packet::_Internal::invoice_exchange(const Packet* msg) {
  return *msg->swap_.invoice_exchange_;
}
const ::packets::InvoiceExchangeAckPacketBody&
Packet::_Internal::exchange_ack(const Packet* msg) {
  return *msg->swap_.exchange_ack_;
}
const ::packets::SanitySwapInitPacketBody&
Packet::_Internal::init(const Packet* msg) {
  return *msg->sanity_.init_;
}
const ::packets::SanitySwapAckPacketBody&
Packet::_Internal::ack(const Packet* msg) {
  return *msg->sanity_.ack_;
}
void Packet::set_allocated_req(::packets::SwapRequestPacketBody* req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, req, submessage_arena);
    }
    set_has_req();
    swap_.req_ = req;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.req)
}
void Packet::set_allocated_fail(::packets::SwapFailedPacketBody* fail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (fail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fail, submessage_arena);
    }
    set_has_fail();
    swap_.fail_ = fail;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.fail)
}
void Packet::set_allocated_complete(::packets::SwapCompletePacketBody* complete) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (complete) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      complete = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complete, submessage_arena);
    }
    set_has_complete();
    swap_.complete_ = complete;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.complete)
}
void Packet::set_allocated_accepted(::packets::SwapAcceptedPacketBody* accepted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (accepted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accepted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepted, submessage_arena);
    }
    set_has_accepted();
    swap_.accepted_ = accepted;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.accepted)
}
void Packet::set_allocated_invoice_exchange(::packets::InvoiceExchangePacketBody* invoice_exchange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (invoice_exchange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      invoice_exchange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, invoice_exchange, submessage_arena);
    }
    set_has_invoice_exchange();
    swap_.invoice_exchange_ = invoice_exchange;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.invoice_exchange)
}
void Packet::set_allocated_exchange_ack(::packets::InvoiceExchangeAckPacketBody* exchange_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_swap();
  if (exchange_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exchange_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_ack, submessage_arena);
    }
    set_has_exchange_ack();
    swap_.exchange_ack_ = exchange_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.exchange_ack)
}
void Packet::set_allocated_init(::packets::SanitySwapInitPacketBody* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sanity();
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    set_has_init();
    sanity_.init_ = init;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.init)
}
void Packet::set_allocated_ack(::packets::SanitySwapAckPacketBody* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_sanity();
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    set_has_ack();
    sanity_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:packets.Packet.ack)
}
Packet::Packet()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:packets.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_swap();
  switch (from.swap_case()) {
    case kReq: {
      _internal_mutable_req()->::packets::SwapRequestPacketBody::MergeFrom(from._internal_req());
      break;
    }
    case kFail: {
      _internal_mutable_fail()->::packets::SwapFailedPacketBody::MergeFrom(from._internal_fail());
      break;
    }
    case kComplete: {
      _internal_mutable_complete()->::packets::SwapCompletePacketBody::MergeFrom(from._internal_complete());
      break;
    }
    case kAccepted: {
      _internal_mutable_accepted()->::packets::SwapAcceptedPacketBody::MergeFrom(from._internal_accepted());
      break;
    }
    case kInvoiceExchange: {
      _internal_mutable_invoice_exchange()->::packets::InvoiceExchangePacketBody::MergeFrom(from._internal_invoice_exchange());
      break;
    }
    case kExchangeAck: {
      _internal_mutable_exchange_ack()->::packets::InvoiceExchangeAckPacketBody::MergeFrom(from._internal_exchange_ack());
      break;
    }
    case SWAP_NOT_SET: {
      break;
    }
  }
  clear_has_sanity();
  switch (from.sanity_case()) {
    case kInit: {
      _internal_mutable_init()->::packets::SanitySwapInitPacketBody::MergeFrom(from._internal_init());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::packets::SanitySwapAckPacketBody::MergeFrom(from._internal_ack());
      break;
    }
    case SANITY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:packets.Packet)
}

void Packet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Packet_Packets_2eproto.base);
  clear_has_swap();
  clear_has_sanity();
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:packets.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (has_swap()) {
    clear_swap();
  }
  if (has_sanity()) {
    clear_sanity();
  }
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Packet_Packets_2eproto.base);
  return *internal_default_instance();
}


void Packet::clear_swap() {
// @@protoc_insertion_point(one_of_clear_start:packets.Packet)
  switch (swap_case()) {
    case kReq: {
      delete swap_.req_;
      break;
    }
    case kFail: {
      delete swap_.fail_;
      break;
    }
    case kComplete: {
      delete swap_.complete_;
      break;
    }
    case kAccepted: {
      delete swap_.accepted_;
      break;
    }
    case kInvoiceExchange: {
      delete swap_.invoice_exchange_;
      break;
    }
    case kExchangeAck: {
      delete swap_.exchange_ack_;
      break;
    }
    case SWAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SWAP_NOT_SET;
}

void Packet::clear_sanity() {
// @@protoc_insertion_point(one_of_clear_start:packets.Packet)
  switch (sanity_case()) {
    case kInit: {
      delete sanity_.init_;
      break;
    }
    case kAck: {
      delete sanity_.ack_;
      break;
    }
    case SANITY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = SANITY_NOT_SET;
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:packets.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_swap();
  clear_sanity();
  _internal_metadata_.Clear();
}

const char* Packet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .packets.SwapRequestPacketBody req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.SwapFailedPacketBody fail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.SwapCompletePacketBody complete = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_complete(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.SwapAcceptedPacketBody accepted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepted(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.InvoiceExchangePacketBody invoice_exchange = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_invoice_exchange(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.InvoiceExchangeAckPacketBody exchange_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.SanitySwapInitPacketBody init = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .packets.SanitySwapAckPacketBody ack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Packet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:packets.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .packets.SwapRequestPacketBody req = 1;
  if (_internal_has_req()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::req(this), target, stream);
  }

  // .packets.SwapFailedPacketBody fail = 2;
  if (_internal_has_fail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::fail(this), target, stream);
  }

  // .packets.SwapCompletePacketBody complete = 3;
  if (_internal_has_complete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::complete(this), target, stream);
  }

  // .packets.SwapAcceptedPacketBody accepted = 4;
  if (_internal_has_accepted()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::accepted(this), target, stream);
  }

  // .packets.InvoiceExchangePacketBody invoice_exchange = 5;
  if (_internal_has_invoice_exchange()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::invoice_exchange(this), target, stream);
  }

  // .packets.InvoiceExchangeAckPacketBody exchange_ack = 6;
  if (_internal_has_exchange_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::exchange_ack(this), target, stream);
  }

  // .packets.SanitySwapInitPacketBody init = 7;
  if (_internal_has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::init(this), target, stream);
  }

  // .packets.SanitySwapAckPacketBody ack = 8;
  if (_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:packets.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:packets.Packet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (swap_case()) {
    // .packets.SwapRequestPacketBody req = 1;
    case kReq: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.req_);
      break;
    }
    // .packets.SwapFailedPacketBody fail = 2;
    case kFail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.fail_);
      break;
    }
    // .packets.SwapCompletePacketBody complete = 3;
    case kComplete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.complete_);
      break;
    }
    // .packets.SwapAcceptedPacketBody accepted = 4;
    case kAccepted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.accepted_);
      break;
    }
    // .packets.InvoiceExchangePacketBody invoice_exchange = 5;
    case kInvoiceExchange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.invoice_exchange_);
      break;
    }
    // .packets.InvoiceExchangeAckPacketBody exchange_ack = 6;
    case kExchangeAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *swap_.exchange_ack_);
      break;
    }
    case SWAP_NOT_SET: {
      break;
    }
  }
  switch (sanity_case()) {
    // .packets.SanitySwapInitPacketBody init = 7;
    case kInit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sanity_.init_);
      break;
    }
    // .packets.SanitySwapAckPacketBody ack = 8;
    case kAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sanity_.ack_);
      break;
    }
    case SANITY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:packets.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  const Packet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Packet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:packets.Packet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:packets.Packet)
    MergeFrom(*source);
  }
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:packets.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.swap_case()) {
    case kReq: {
      _internal_mutable_req()->::packets::SwapRequestPacketBody::MergeFrom(from._internal_req());
      break;
    }
    case kFail: {
      _internal_mutable_fail()->::packets::SwapFailedPacketBody::MergeFrom(from._internal_fail());
      break;
    }
    case kComplete: {
      _internal_mutable_complete()->::packets::SwapCompletePacketBody::MergeFrom(from._internal_complete());
      break;
    }
    case kAccepted: {
      _internal_mutable_accepted()->::packets::SwapAcceptedPacketBody::MergeFrom(from._internal_accepted());
      break;
    }
    case kInvoiceExchange: {
      _internal_mutable_invoice_exchange()->::packets::InvoiceExchangePacketBody::MergeFrom(from._internal_invoice_exchange());
      break;
    }
    case kExchangeAck: {
      _internal_mutable_exchange_ack()->::packets::InvoiceExchangeAckPacketBody::MergeFrom(from._internal_exchange_ack());
      break;
    }
    case SWAP_NOT_SET: {
      break;
    }
  }
  switch (from.sanity_case()) {
    case kInit: {
      _internal_mutable_init()->::packets::SanitySwapInitPacketBody::MergeFrom(from._internal_init());
      break;
    }
    case kAck: {
      _internal_mutable_ack()->::packets::SanitySwapAckPacketBody::MergeFrom(from._internal_ack());
      break;
    }
    case SANITY_NOT_SET: {
      break;
    }
  }
}

void Packet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:packets.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:packets.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(swap_, other->swap_);
  swap(sanity_, other->sanity_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Packet::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace packets
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::packets::SwapRequestPacketBody* Arena::CreateMaybeMessage< ::packets::SwapRequestPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SwapRequestPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::SwapFailedPacketBody* Arena::CreateMaybeMessage< ::packets::SwapFailedPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SwapFailedPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::SwapCompletePacketBody* Arena::CreateMaybeMessage< ::packets::SwapCompletePacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SwapCompletePacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::SwapAcceptedPacketBody* Arena::CreateMaybeMessage< ::packets::SwapAcceptedPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SwapAcceptedPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::InvoiceExchangePacketBody* Arena::CreateMaybeMessage< ::packets::InvoiceExchangePacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::InvoiceExchangePacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::InvoiceExchangeAckPacketBody* Arena::CreateMaybeMessage< ::packets::InvoiceExchangeAckPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::InvoiceExchangeAckPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::SanitySwapInitPacketBody* Arena::CreateMaybeMessage< ::packets::SanitySwapInitPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SanitySwapInitPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::SanitySwapAckPacketBody* Arena::CreateMaybeMessage< ::packets::SanitySwapAckPacketBody >(Arena* arena) {
  return Arena::CreateInternal< ::packets::SanitySwapAckPacketBody >(arena);
}
template<> PROTOBUF_NOINLINE ::packets::Packet* Arena::CreateMaybeMessage< ::packets::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::packets::Packet >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
