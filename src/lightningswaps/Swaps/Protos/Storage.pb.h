// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Storage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Storage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Storage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Storage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Storage_2eproto;
namespace storage {
class ConnextChannelDetails;
class ConnextChannelDetailsDefaultTypeInternal;
extern ConnextChannelDetailsDefaultTypeInternal _ConnextChannelDetails_default_instance_;
class LndChannelDetails;
class LndChannelDetailsDefaultTypeInternal;
extern LndChannelDetailsDefaultTypeInternal _LndChannelDetails_default_instance_;
class RefundableFee;
class RefundableFeeDefaultTypeInternal;
extern RefundableFeeDefaultTypeInternal _RefundableFee_default_instance_;
class RentedChannel;
class RentedChannelDefaultTypeInternal;
extern RentedChannelDefaultTypeInternal _RentedChannel_default_instance_;
}  // namespace storage
PROTOBUF_NAMESPACE_OPEN
template<> ::storage::ConnextChannelDetails* Arena::CreateMaybeMessage<::storage::ConnextChannelDetails>(Arena*);
template<> ::storage::LndChannelDetails* Arena::CreateMaybeMessage<::storage::LndChannelDetails>(Arena*);
template<> ::storage::RefundableFee* Arena::CreateMaybeMessage<::storage::RefundableFee>(Arena*);
template<> ::storage::RentedChannel* Arena::CreateMaybeMessage<::storage::RentedChannel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storage {

enum RefundableFee_State : int {
  RefundableFee_State_PAID = 0,
  RefundableFee_State_REFUNDED = 1,
  RefundableFee_State_RefundableFee_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RefundableFee_State_RefundableFee_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RefundableFee_State_IsValid(int value);
constexpr RefundableFee_State RefundableFee_State_State_MIN = RefundableFee_State_PAID;
constexpr RefundableFee_State RefundableFee_State_State_MAX = RefundableFee_State_REFUNDED;
constexpr int RefundableFee_State_State_ARRAYSIZE = RefundableFee_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefundableFee_State_descriptor();
template<typename T>
inline const std::string& RefundableFee_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RefundableFee_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RefundableFee_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RefundableFee_State_descriptor(), enum_t_value);
}
inline bool RefundableFee_State_Parse(
    const std::string& name, RefundableFee_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RefundableFee_State>(
    RefundableFee_State_descriptor(), name, value);
}
enum RefundableFee_Type : int {
  RefundableFee_Type_ORDER_FEE = 0,
  RefundableFee_Type_CHANNEL_RENTAL_FEE = 1,
  RefundableFee_Type_CHANNEL_EXTEND_FEE = 2,
  RefundableFee_Type_RefundableFee_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RefundableFee_Type_RefundableFee_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RefundableFee_Type_IsValid(int value);
constexpr RefundableFee_Type RefundableFee_Type_Type_MIN = RefundableFee_Type_ORDER_FEE;
constexpr RefundableFee_Type RefundableFee_Type_Type_MAX = RefundableFee_Type_CHANNEL_EXTEND_FEE;
constexpr int RefundableFee_Type_Type_ARRAYSIZE = RefundableFee_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RefundableFee_Type_descriptor();
template<typename T>
inline const std::string& RefundableFee_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RefundableFee_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RefundableFee_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RefundableFee_Type_descriptor(), enum_t_value);
}
inline bool RefundableFee_Type_Parse(
    const std::string& name, RefundableFee_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RefundableFee_Type>(
    RefundableFee_Type_descriptor(), name, value);
}
enum ChannelType : int {
  LND = 0,
  CONNEXT = 1,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelType_IsValid(int value);
constexpr ChannelType ChannelType_MIN = LND;
constexpr ChannelType ChannelType_MAX = CONNEXT;
constexpr int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor();
template<typename T>
inline const std::string& ChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelType_descriptor(), enum_t_value);
}
inline bool ChannelType_Parse(
    const std::string& name, ChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class RefundableFee :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage.RefundableFee) */ {
 public:
  RefundableFee();
  virtual ~RefundableFee();

  RefundableFee(const RefundableFee& from);
  RefundableFee(RefundableFee&& from) noexcept
    : RefundableFee() {
    *this = ::std::move(from);
  }

  inline RefundableFee& operator=(const RefundableFee& from) {
    CopyFrom(from);
    return *this;
  }
  inline RefundableFee& operator=(RefundableFee&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RefundableFee& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RefundableFee* internal_default_instance() {
    return reinterpret_cast<const RefundableFee*>(
               &_RefundableFee_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RefundableFee& a, RefundableFee& b) {
    a.Swap(&b);
  }
  inline void Swap(RefundableFee* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RefundableFee* New() const final {
    return CreateMaybeMessage<RefundableFee>(nullptr);
  }

  RefundableFee* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RefundableFee>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RefundableFee& from);
  void MergeFrom(const RefundableFee& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RefundableFee* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.RefundableFee";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Storage_2eproto);
    return ::descriptor_table_Storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RefundableFee_State State;
  static constexpr State PAID =
    RefundableFee_State_PAID;
  static constexpr State REFUNDED =
    RefundableFee_State_REFUNDED;
  static inline bool State_IsValid(int value) {
    return RefundableFee_State_IsValid(value);
  }
  static constexpr State State_MIN =
    RefundableFee_State_State_MIN;
  static constexpr State State_MAX =
    RefundableFee_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    RefundableFee_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return RefundableFee_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return RefundableFee_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return RefundableFee_State_Parse(name, value);
  }

  typedef RefundableFee_Type Type;
  static constexpr Type ORDER_FEE =
    RefundableFee_Type_ORDER_FEE;
  static constexpr Type CHANNEL_RENTAL_FEE =
    RefundableFee_Type_CHANNEL_RENTAL_FEE;
  static constexpr Type CHANNEL_EXTEND_FEE =
    RefundableFee_Type_CHANNEL_EXTEND_FEE;
  static inline bool Type_IsValid(int value) {
    return RefundableFee_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    RefundableFee_Type_Type_MIN;
  static constexpr Type Type_MAX =
    RefundableFee_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    RefundableFee_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return RefundableFee_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return RefundableFee_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return RefundableFee_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 2,
    kPaymentHashFieldNumber = 4,
    kPairIdFieldNumber = 7,
    kIdFieldNumber = 1,
    kInitialAmountFieldNumber = 3,
    kTimestampFieldNumber = 6,
    kStateFieldNumber = 5,
    kIsBuyFieldNumber = 8,
    kTypeFieldNumber = 9,
  };
  // string currency = 2;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // bytes paymentHash = 4;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // string pairId = 7;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 initialAmount = 3;
  void clear_initialamount();
  ::PROTOBUF_NAMESPACE_ID::int64 initialamount() const;
  void set_initialamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_initialamount() const;
  void _internal_set_initialamount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 timestamp = 6;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .storage.RefundableFee.State state = 5;
  void clear_state();
  ::storage::RefundableFee_State state() const;
  void set_state(::storage::RefundableFee_State value);
  private:
  ::storage::RefundableFee_State _internal_state() const;
  void _internal_set_state(::storage::RefundableFee_State value);
  public:

  // bool is_buy = 8;
  void clear_is_buy();
  bool is_buy() const;
  void set_is_buy(bool value);
  private:
  bool _internal_is_buy() const;
  void _internal_set_is_buy(bool value);
  public:

  // .storage.RefundableFee.Type type = 9;
  void clear_type();
  ::storage::RefundableFee_Type type() const;
  void set_type(::storage::RefundableFee_Type value);
  private:
  ::storage::RefundableFee_Type _internal_type() const;
  void _internal_set_type(::storage::RefundableFee_Type value);
  public:

  // @@protoc_insertion_point(class_scope:storage.RefundableFee)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 initialamount_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  int state_;
  bool is_buy_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Storage_2eproto;
};
// -------------------------------------------------------------------

class RentedChannel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage.RentedChannel) */ {
 public:
  RentedChannel();
  virtual ~RentedChannel();

  RentedChannel(const RentedChannel& from);
  RentedChannel(RentedChannel&& from) noexcept
    : RentedChannel() {
    *this = ::std::move(from);
  }

  inline RentedChannel& operator=(const RentedChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RentedChannel& operator=(RentedChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RentedChannel& default_instance();

  enum DetailsCase {
    kLndDetails = 9,
    kConnextDetails = 10,
    DETAILS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RentedChannel* internal_default_instance() {
    return reinterpret_cast<const RentedChannel*>(
               &_RentedChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RentedChannel& a, RentedChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(RentedChannel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RentedChannel* New() const final {
    return CreateMaybeMessage<RentedChannel>(nullptr);
  }

  RentedChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RentedChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RentedChannel& from);
  void MergeFrom(const RentedChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RentedChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.RentedChannel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Storage_2eproto);
    return ::descriptor_table_Storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 2,
    kCurrencyFieldNumber = 3,
    kChannelStatusFieldNumber = 6,
    kIdFieldNumber = 1,
    kCapacityFieldNumber = 4,
    kRentingDateFieldNumber = 5,
    kExpiresAtFieldNumber = 7,
    kTypeFieldNumber = 8,
    kLndDetailsFieldNumber = 9,
    kConnextDetailsFieldNumber = 10,
  };
  // string channelId = 2;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // string currency = 3;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string channelStatus = 6;
  void clear_channelstatus();
  const std::string& channelstatus() const;
  void set_channelstatus(const std::string& value);
  void set_channelstatus(std::string&& value);
  void set_channelstatus(const char* value);
  void set_channelstatus(const char* value, size_t size);
  std::string* mutable_channelstatus();
  std::string* release_channelstatus();
  void set_allocated_channelstatus(std::string* channelstatus);
  private:
  const std::string& _internal_channelstatus() const;
  void _internal_set_channelstatus(const std::string& value);
  std::string* _internal_mutable_channelstatus();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 capacity = 4;
  void clear_capacity();
  ::PROTOBUF_NAMESPACE_ID::int64 capacity() const;
  void set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_capacity() const;
  void _internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 rentingDate = 5;
  void clear_rentingdate();
  ::PROTOBUF_NAMESPACE_ID::int64 rentingdate() const;
  void set_rentingdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_rentingdate() const;
  void _internal_set_rentingdate(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 expiresAt = 7;
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .storage.ChannelType type = 8;
  void clear_type();
  ::storage::ChannelType type() const;
  void set_type(::storage::ChannelType value);
  private:
  ::storage::ChannelType _internal_type() const;
  void _internal_set_type(::storage::ChannelType value);
  public:

  // .storage.LndChannelDetails lndDetails = 9;
  bool has_lnddetails() const;
  private:
  bool _internal_has_lnddetails() const;
  public:
  void clear_lnddetails();
  const ::storage::LndChannelDetails& lnddetails() const;
  ::storage::LndChannelDetails* release_lnddetails();
  ::storage::LndChannelDetails* mutable_lnddetails();
  void set_allocated_lnddetails(::storage::LndChannelDetails* lnddetails);
  private:
  const ::storage::LndChannelDetails& _internal_lnddetails() const;
  ::storage::LndChannelDetails* _internal_mutable_lnddetails();
  public:

  // .storage.ConnextChannelDetails connextDetails = 10;
  bool has_connextdetails() const;
  private:
  bool _internal_has_connextdetails() const;
  public:
  void clear_connextdetails();
  const ::storage::ConnextChannelDetails& connextdetails() const;
  ::storage::ConnextChannelDetails* release_connextdetails();
  ::storage::ConnextChannelDetails* mutable_connextdetails();
  void set_allocated_connextdetails(::storage::ConnextChannelDetails* connextdetails);
  private:
  const ::storage::ConnextChannelDetails& _internal_connextdetails() const;
  ::storage::ConnextChannelDetails* _internal_mutable_connextdetails();
  public:

  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:storage.RentedChannel)
 private:
  class _Internal;
  void set_has_lnddetails();
  void set_has_connextdetails();

  inline bool has_details() const;
  inline void clear_has_details();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 rentingdate_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  int type_;
  union DetailsUnion {
    DetailsUnion() {}
    ::storage::LndChannelDetails* lnddetails_;
    ::storage::ConnextChannelDetails* connextdetails_;
  } details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_Storage_2eproto;
};
// -------------------------------------------------------------------

class LndChannelDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage.LndChannelDetails) */ {
 public:
  LndChannelDetails();
  virtual ~LndChannelDetails();

  LndChannelDetails(const LndChannelDetails& from);
  LndChannelDetails(LndChannelDetails&& from) noexcept
    : LndChannelDetails() {
    *this = ::std::move(from);
  }

  inline LndChannelDetails& operator=(const LndChannelDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline LndChannelDetails& operator=(LndChannelDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LndChannelDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LndChannelDetails* internal_default_instance() {
    return reinterpret_cast<const LndChannelDetails*>(
               &_LndChannelDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LndChannelDetails& a, LndChannelDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(LndChannelDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LndChannelDetails* New() const final {
    return CreateMaybeMessage<LndChannelDetails>(nullptr);
  }

  LndChannelDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LndChannelDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LndChannelDetails& from);
  void MergeFrom(const LndChannelDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LndChannelDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.LndChannelDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Storage_2eproto);
    return ::descriptor_table_Storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFundingOutpointFieldNumber = 1,
  };
  // string fundingOutpoint = 1;
  void clear_fundingoutpoint();
  const std::string& fundingoutpoint() const;
  void set_fundingoutpoint(const std::string& value);
  void set_fundingoutpoint(std::string&& value);
  void set_fundingoutpoint(const char* value);
  void set_fundingoutpoint(const char* value, size_t size);
  std::string* mutable_fundingoutpoint();
  std::string* release_fundingoutpoint();
  void set_allocated_fundingoutpoint(std::string* fundingoutpoint);
  private:
  const std::string& _internal_fundingoutpoint() const;
  void _internal_set_fundingoutpoint(const std::string& value);
  std::string* _internal_mutable_fundingoutpoint();
  public:

  // @@protoc_insertion_point(class_scope:storage.LndChannelDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fundingoutpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Storage_2eproto;
};
// -------------------------------------------------------------------

class ConnextChannelDetails :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage.ConnextChannelDetails) */ {
 public:
  ConnextChannelDetails();
  virtual ~ConnextChannelDetails();

  ConnextChannelDetails(const ConnextChannelDetails& from);
  ConnextChannelDetails(ConnextChannelDetails&& from) noexcept
    : ConnextChannelDetails() {
    *this = ::std::move(from);
  }

  inline ConnextChannelDetails& operator=(const ConnextChannelDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnextChannelDetails& operator=(ConnextChannelDetails&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnextChannelDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnextChannelDetails* internal_default_instance() {
    return reinterpret_cast<const ConnextChannelDetails*>(
               &_ConnextChannelDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ConnextChannelDetails& a, ConnextChannelDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnextChannelDetails* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnextChannelDetails* New() const final {
    return CreateMaybeMessage<ConnextChannelDetails>(nullptr);
  }

  ConnextChannelDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnextChannelDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnextChannelDetails& from);
  void MergeFrom(const ConnextChannelDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnextChannelDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage.ConnextChannelDetails";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Storage_2eproto);
    return ::descriptor_table_Storage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelAddressFieldNumber = 1,
  };
  // string channelAddress = 1;
  void clear_channeladdress();
  const std::string& channeladdress() const;
  void set_channeladdress(const std::string& value);
  void set_channeladdress(std::string&& value);
  void set_channeladdress(const char* value);
  void set_channeladdress(const char* value, size_t size);
  std::string* mutable_channeladdress();
  std::string* release_channeladdress();
  void set_allocated_channeladdress(std::string* channeladdress);
  private:
  const std::string& _internal_channeladdress() const;
  void _internal_set_channeladdress(const std::string& value);
  std::string* _internal_mutable_channeladdress();
  public:

  // @@protoc_insertion_point(class_scope:storage.ConnextChannelDetails)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channeladdress_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Storage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RefundableFee

// uint64 id = 1;
inline void RefundableFee::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RefundableFee::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RefundableFee::id() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.id)
  return _internal_id();
}
inline void RefundableFee::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void RefundableFee::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.id)
}

// string currency = 2;
inline void RefundableFee::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundableFee::currency() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.currency)
  return _internal_currency();
}
inline void RefundableFee::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.currency)
}
inline std::string* RefundableFee::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:storage.RefundableFee.currency)
  return _internal_mutable_currency();
}
inline const std::string& RefundableFee::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RefundableFee::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundableFee::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RefundableFee.currency)
}
inline void RefundableFee::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RefundableFee.currency)
}
inline void RefundableFee::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RefundableFee.currency)
}
inline std::string* RefundableFee::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundableFee::release_currency() {
  // @@protoc_insertion_point(field_release:storage.RefundableFee.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundableFee::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:storage.RefundableFee.currency)
}

// int64 initialAmount = 3;
inline void RefundableFee::clear_initialamount() {
  initialamount_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundableFee::_internal_initialamount() const {
  return initialamount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundableFee::initialamount() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.initialAmount)
  return _internal_initialamount();
}
inline void RefundableFee::_internal_set_initialamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  initialamount_ = value;
}
inline void RefundableFee::set_initialamount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_initialamount(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.initialAmount)
}

// bytes paymentHash = 4;
inline void RefundableFee::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundableFee::paymenthash() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.paymentHash)
  return _internal_paymenthash();
}
inline void RefundableFee::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.paymentHash)
}
inline std::string* RefundableFee::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:storage.RefundableFee.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& RefundableFee::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void RefundableFee::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundableFee::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RefundableFee.paymentHash)
}
inline void RefundableFee::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RefundableFee.paymentHash)
}
inline void RefundableFee::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RefundableFee.paymentHash)
}
inline std::string* RefundableFee::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundableFee::release_paymenthash() {
  // @@protoc_insertion_point(field_release:storage.RefundableFee.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundableFee::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:storage.RefundableFee.paymentHash)
}

// .storage.RefundableFee.State state = 5;
inline void RefundableFee::clear_state() {
  state_ = 0;
}
inline ::storage::RefundableFee_State RefundableFee::_internal_state() const {
  return static_cast< ::storage::RefundableFee_State >(state_);
}
inline ::storage::RefundableFee_State RefundableFee::state() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.state)
  return _internal_state();
}
inline void RefundableFee::_internal_set_state(::storage::RefundableFee_State value) {
  
  state_ = value;
}
inline void RefundableFee::set_state(::storage::RefundableFee_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.state)
}

// int64 timestamp = 6;
inline void RefundableFee::clear_timestamp() {
  timestamp_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundableFee::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RefundableFee::timestamp() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.timestamp)
  return _internal_timestamp();
}
inline void RefundableFee::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void RefundableFee::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.timestamp)
}

// string pairId = 7;
inline void RefundableFee::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RefundableFee::pairid() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.pairId)
  return _internal_pairid();
}
inline void RefundableFee::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.pairId)
}
inline std::string* RefundableFee::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:storage.RefundableFee.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& RefundableFee::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void RefundableFee::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RefundableFee::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RefundableFee.pairId)
}
inline void RefundableFee::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RefundableFee.pairId)
}
inline void RefundableFee::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RefundableFee.pairId)
}
inline std::string* RefundableFee::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RefundableFee::release_pairid() {
  // @@protoc_insertion_point(field_release:storage.RefundableFee.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RefundableFee::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:storage.RefundableFee.pairId)
}

// bool is_buy = 8;
inline void RefundableFee::clear_is_buy() {
  is_buy_ = false;
}
inline bool RefundableFee::_internal_is_buy() const {
  return is_buy_;
}
inline bool RefundableFee::is_buy() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.is_buy)
  return _internal_is_buy();
}
inline void RefundableFee::_internal_set_is_buy(bool value) {
  
  is_buy_ = value;
}
inline void RefundableFee::set_is_buy(bool value) {
  _internal_set_is_buy(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.is_buy)
}

// .storage.RefundableFee.Type type = 9;
inline void RefundableFee::clear_type() {
  type_ = 0;
}
inline ::storage::RefundableFee_Type RefundableFee::_internal_type() const {
  return static_cast< ::storage::RefundableFee_Type >(type_);
}
inline ::storage::RefundableFee_Type RefundableFee::type() const {
  // @@protoc_insertion_point(field_get:storage.RefundableFee.type)
  return _internal_type();
}
inline void RefundableFee::_internal_set_type(::storage::RefundableFee_Type value) {
  
  type_ = value;
}
inline void RefundableFee::set_type(::storage::RefundableFee_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:storage.RefundableFee.type)
}

// -------------------------------------------------------------------

// RentedChannel

// uint64 id = 1;
inline void RentedChannel::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RentedChannel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RentedChannel::id() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.id)
  return _internal_id();
}
inline void RentedChannel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void RentedChannel::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.id)
}

// string channelId = 2;
inline void RentedChannel::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentedChannel::channelid() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.channelId)
  return _internal_channelid();
}
inline void RentedChannel::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.channelId)
}
inline std::string* RentedChannel::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:storage.RentedChannel.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& RentedChannel::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void RentedChannel::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentedChannel::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RentedChannel.channelId)
}
inline void RentedChannel::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RentedChannel.channelId)
}
inline void RentedChannel::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RentedChannel.channelId)
}
inline std::string* RentedChannel::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentedChannel::release_channelid() {
  // @@protoc_insertion_point(field_release:storage.RentedChannel.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentedChannel::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:storage.RentedChannel.channelId)
}

// string currency = 3;
inline void RentedChannel::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentedChannel::currency() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.currency)
  return _internal_currency();
}
inline void RentedChannel::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.currency)
}
inline std::string* RentedChannel::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:storage.RentedChannel.currency)
  return _internal_mutable_currency();
}
inline const std::string& RentedChannel::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void RentedChannel::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentedChannel::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RentedChannel.currency)
}
inline void RentedChannel::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RentedChannel.currency)
}
inline void RentedChannel::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RentedChannel.currency)
}
inline std::string* RentedChannel::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentedChannel::release_currency() {
  // @@protoc_insertion_point(field_release:storage.RentedChannel.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentedChannel::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:storage.RentedChannel.currency)
}

// int64 capacity = 4;
inline void RentedChannel::clear_capacity() {
  capacity_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::_internal_capacity() const {
  return capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::capacity() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.capacity)
  return _internal_capacity();
}
inline void RentedChannel::_internal_set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  capacity_ = value;
}
inline void RentedChannel::set_capacity(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.capacity)
}

// int64 rentingDate = 5;
inline void RentedChannel::clear_rentingdate() {
  rentingdate_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::_internal_rentingdate() const {
  return rentingdate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::rentingdate() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.rentingDate)
  return _internal_rentingdate();
}
inline void RentedChannel::_internal_set_rentingdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  rentingdate_ = value;
}
inline void RentedChannel::set_rentingdate(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_rentingdate(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.rentingDate)
}

// string channelStatus = 6;
inline void RentedChannel::clear_channelstatus() {
  channelstatus_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentedChannel::channelstatus() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.channelStatus)
  return _internal_channelstatus();
}
inline void RentedChannel::set_channelstatus(const std::string& value) {
  _internal_set_channelstatus(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.channelStatus)
}
inline std::string* RentedChannel::mutable_channelstatus() {
  // @@protoc_insertion_point(field_mutable:storage.RentedChannel.channelStatus)
  return _internal_mutable_channelstatus();
}
inline const std::string& RentedChannel::_internal_channelstatus() const {
  return channelstatus_.GetNoArena();
}
inline void RentedChannel::_internal_set_channelstatus(const std::string& value) {
  
  channelstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentedChannel::set_channelstatus(std::string&& value) {
  
  channelstatus_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.RentedChannel.channelStatus)
}
inline void RentedChannel::set_channelstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.RentedChannel.channelStatus)
}
inline void RentedChannel::set_channelstatus(const char* value, size_t size) {
  
  channelstatus_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.RentedChannel.channelStatus)
}
inline std::string* RentedChannel::_internal_mutable_channelstatus() {
  
  return channelstatus_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentedChannel::release_channelstatus() {
  // @@protoc_insertion_point(field_release:storage.RentedChannel.channelStatus)
  
  return channelstatus_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentedChannel::set_allocated_channelstatus(std::string* channelstatus) {
  if (channelstatus != nullptr) {
    
  } else {
    
  }
  channelstatus_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelstatus);
  // @@protoc_insertion_point(field_set_allocated:storage.RentedChannel.channelStatus)
}

// int64 expiresAt = 7;
inline void RentedChannel::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RentedChannel::expiresat() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.expiresAt)
  return _internal_expiresat();
}
inline void RentedChannel::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresat_ = value;
}
inline void RentedChannel::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.expiresAt)
}

// .storage.ChannelType type = 8;
inline void RentedChannel::clear_type() {
  type_ = 0;
}
inline ::storage::ChannelType RentedChannel::_internal_type() const {
  return static_cast< ::storage::ChannelType >(type_);
}
inline ::storage::ChannelType RentedChannel::type() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.type)
  return _internal_type();
}
inline void RentedChannel::_internal_set_type(::storage::ChannelType value) {
  
  type_ = value;
}
inline void RentedChannel::set_type(::storage::ChannelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:storage.RentedChannel.type)
}

// .storage.LndChannelDetails lndDetails = 9;
inline bool RentedChannel::_internal_has_lnddetails() const {
  return details_case() == kLndDetails;
}
inline bool RentedChannel::has_lnddetails() const {
  return _internal_has_lnddetails();
}
inline void RentedChannel::set_has_lnddetails() {
  _oneof_case_[0] = kLndDetails;
}
inline void RentedChannel::clear_lnddetails() {
  if (_internal_has_lnddetails()) {
    delete details_.lnddetails_;
    clear_has_details();
  }
}
inline ::storage::LndChannelDetails* RentedChannel::release_lnddetails() {
  // @@protoc_insertion_point(field_release:storage.RentedChannel.lndDetails)
  if (_internal_has_lnddetails()) {
    clear_has_details();
      ::storage::LndChannelDetails* temp = details_.lnddetails_;
    details_.lnddetails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::storage::LndChannelDetails& RentedChannel::_internal_lnddetails() const {
  return _internal_has_lnddetails()
      ? *details_.lnddetails_
      : *reinterpret_cast< ::storage::LndChannelDetails*>(&::storage::_LndChannelDetails_default_instance_);
}
inline const ::storage::LndChannelDetails& RentedChannel::lnddetails() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.lndDetails)
  return _internal_lnddetails();
}
inline ::storage::LndChannelDetails* RentedChannel::_internal_mutable_lnddetails() {
  if (!_internal_has_lnddetails()) {
    clear_details();
    set_has_lnddetails();
    details_.lnddetails_ = CreateMaybeMessage< ::storage::LndChannelDetails >(
        GetArenaNoVirtual());
  }
  return details_.lnddetails_;
}
inline ::storage::LndChannelDetails* RentedChannel::mutable_lnddetails() {
  // @@protoc_insertion_point(field_mutable:storage.RentedChannel.lndDetails)
  return _internal_mutable_lnddetails();
}

// .storage.ConnextChannelDetails connextDetails = 10;
inline bool RentedChannel::_internal_has_connextdetails() const {
  return details_case() == kConnextDetails;
}
inline bool RentedChannel::has_connextdetails() const {
  return _internal_has_connextdetails();
}
inline void RentedChannel::set_has_connextdetails() {
  _oneof_case_[0] = kConnextDetails;
}
inline void RentedChannel::clear_connextdetails() {
  if (_internal_has_connextdetails()) {
    delete details_.connextdetails_;
    clear_has_details();
  }
}
inline ::storage::ConnextChannelDetails* RentedChannel::release_connextdetails() {
  // @@protoc_insertion_point(field_release:storage.RentedChannel.connextDetails)
  if (_internal_has_connextdetails()) {
    clear_has_details();
      ::storage::ConnextChannelDetails* temp = details_.connextdetails_;
    details_.connextdetails_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::storage::ConnextChannelDetails& RentedChannel::_internal_connextdetails() const {
  return _internal_has_connextdetails()
      ? *details_.connextdetails_
      : *reinterpret_cast< ::storage::ConnextChannelDetails*>(&::storage::_ConnextChannelDetails_default_instance_);
}
inline const ::storage::ConnextChannelDetails& RentedChannel::connextdetails() const {
  // @@protoc_insertion_point(field_get:storage.RentedChannel.connextDetails)
  return _internal_connextdetails();
}
inline ::storage::ConnextChannelDetails* RentedChannel::_internal_mutable_connextdetails() {
  if (!_internal_has_connextdetails()) {
    clear_details();
    set_has_connextdetails();
    details_.connextdetails_ = CreateMaybeMessage< ::storage::ConnextChannelDetails >(
        GetArenaNoVirtual());
  }
  return details_.connextdetails_;
}
inline ::storage::ConnextChannelDetails* RentedChannel::mutable_connextdetails() {
  // @@protoc_insertion_point(field_mutable:storage.RentedChannel.connextDetails)
  return _internal_mutable_connextdetails();
}

inline bool RentedChannel::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void RentedChannel::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
inline RentedChannel::DetailsCase RentedChannel::details_case() const {
  return RentedChannel::DetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LndChannelDetails

// string fundingOutpoint = 1;
inline void LndChannelDetails::clear_fundingoutpoint() {
  fundingoutpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LndChannelDetails::fundingoutpoint() const {
  // @@protoc_insertion_point(field_get:storage.LndChannelDetails.fundingOutpoint)
  return _internal_fundingoutpoint();
}
inline void LndChannelDetails::set_fundingoutpoint(const std::string& value) {
  _internal_set_fundingoutpoint(value);
  // @@protoc_insertion_point(field_set:storage.LndChannelDetails.fundingOutpoint)
}
inline std::string* LndChannelDetails::mutable_fundingoutpoint() {
  // @@protoc_insertion_point(field_mutable:storage.LndChannelDetails.fundingOutpoint)
  return _internal_mutable_fundingoutpoint();
}
inline const std::string& LndChannelDetails::_internal_fundingoutpoint() const {
  return fundingoutpoint_.GetNoArena();
}
inline void LndChannelDetails::_internal_set_fundingoutpoint(const std::string& value) {
  
  fundingoutpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndChannelDetails::set_fundingoutpoint(std::string&& value) {
  
  fundingoutpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.LndChannelDetails.fundingOutpoint)
}
inline void LndChannelDetails::set_fundingoutpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fundingoutpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.LndChannelDetails.fundingOutpoint)
}
inline void LndChannelDetails::set_fundingoutpoint(const char* value, size_t size) {
  
  fundingoutpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.LndChannelDetails.fundingOutpoint)
}
inline std::string* LndChannelDetails::_internal_mutable_fundingoutpoint() {
  
  return fundingoutpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndChannelDetails::release_fundingoutpoint() {
  // @@protoc_insertion_point(field_release:storage.LndChannelDetails.fundingOutpoint)
  
  return fundingoutpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LndChannelDetails::set_allocated_fundingoutpoint(std::string* fundingoutpoint) {
  if (fundingoutpoint != nullptr) {
    
  } else {
    
  }
  fundingoutpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fundingoutpoint);
  // @@protoc_insertion_point(field_set_allocated:storage.LndChannelDetails.fundingOutpoint)
}

// -------------------------------------------------------------------

// ConnextChannelDetails

// string channelAddress = 1;
inline void ConnextChannelDetails::clear_channeladdress() {
  channeladdress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextChannelDetails::channeladdress() const {
  // @@protoc_insertion_point(field_get:storage.ConnextChannelDetails.channelAddress)
  return _internal_channeladdress();
}
inline void ConnextChannelDetails::set_channeladdress(const std::string& value) {
  _internal_set_channeladdress(value);
  // @@protoc_insertion_point(field_set:storage.ConnextChannelDetails.channelAddress)
}
inline std::string* ConnextChannelDetails::mutable_channeladdress() {
  // @@protoc_insertion_point(field_mutable:storage.ConnextChannelDetails.channelAddress)
  return _internal_mutable_channeladdress();
}
inline const std::string& ConnextChannelDetails::_internal_channeladdress() const {
  return channeladdress_.GetNoArena();
}
inline void ConnextChannelDetails::_internal_set_channeladdress(const std::string& value) {
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextChannelDetails::set_channeladdress(std::string&& value) {
  
  channeladdress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:storage.ConnextChannelDetails.channelAddress)
}
inline void ConnextChannelDetails::set_channeladdress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storage.ConnextChannelDetails.channelAddress)
}
inline void ConnextChannelDetails::set_channeladdress(const char* value, size_t size) {
  
  channeladdress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storage.ConnextChannelDetails.channelAddress)
}
inline std::string* ConnextChannelDetails::_internal_mutable_channeladdress() {
  
  return channeladdress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextChannelDetails::release_channeladdress() {
  // @@protoc_insertion_point(field_release:storage.ConnextChannelDetails.channelAddress)
  
  return channeladdress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextChannelDetails::set_allocated_channeladdress(std::string* channeladdress) {
  if (channeladdress != nullptr) {
    
  } else {
    
  }
  channeladdress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channeladdress);
  // @@protoc_insertion_point(field_set_allocated:storage.ConnextChannelDetails.channelAddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::storage::RefundableFee_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::storage::RefundableFee_State>() {
  return ::storage::RefundableFee_State_descriptor();
}
template <> struct is_proto_enum< ::storage::RefundableFee_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::storage::RefundableFee_Type>() {
  return ::storage::RefundableFee_Type_descriptor();
}
template <> struct is_proto_enum< ::storage::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::storage::ChannelType>() {
  return ::storage::ChannelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Storage_2eproto
