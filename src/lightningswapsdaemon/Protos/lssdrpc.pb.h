// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lssdrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_lssdrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_lssdrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_lssdrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_lssdrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[41]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_lssdrpc_2eproto;
namespace lssdrpc {
class AddCurrencyRequest;
class AddCurrencyRequestDefaultTypeInternal;
extern AddCurrencyRequestDefaultTypeInternal _AddCurrencyRequest_default_instance_;
class AddCurrencyResponse;
class AddCurrencyResponseDefaultTypeInternal;
extern AddCurrencyResponseDefaultTypeInternal _AddCurrencyResponse_default_instance_;
class BigInteger;
class BigIntegerDefaultTypeInternal;
extern BigIntegerDefaultTypeInternal _BigInteger_default_instance_;
class CancelOrderRequest;
class CancelOrderRequestDefaultTypeInternal;
extern CancelOrderRequestDefaultTypeInternal _CancelOrderRequest_default_instance_;
class CancelOrderResponse;
class CancelOrderResponseDefaultTypeInternal;
extern CancelOrderResponseDefaultTypeInternal _CancelOrderResponse_default_instance_;
class ConnextConfiguration;
class ConnextConfigurationDefaultTypeInternal;
extern ConnextConfigurationDefaultTypeInternal _ConnextConfiguration_default_instance_;
class EnableTradingPairRequest;
class EnableTradingPairRequestDefaultTypeInternal;
extern EnableTradingPairRequestDefaultTypeInternal _EnableTradingPairRequest_default_instance_;
class EnableTradingPairResponse;
class EnableTradingPairResponseDefaultTypeInternal;
extern EnableTradingPairResponseDefaultTypeInternal _EnableTradingPairResponse_default_instance_;
class GenerateInvoiceToRentChannelCommand;
class GenerateInvoiceToRentChannelCommandDefaultTypeInternal;
extern GenerateInvoiceToRentChannelCommandDefaultTypeInternal _GenerateInvoiceToRentChannelCommand_default_instance_;
class GenerateInvoiceToRentChannelResponse;
class GenerateInvoiceToRentChannelResponseDefaultTypeInternal;
extern GenerateInvoiceToRentChannelResponseDefaultTypeInternal _GenerateInvoiceToRentChannelResponse_default_instance_;
class GetActiveTradingPairRequest;
class GetActiveTradingPairRequestDefaultTypeInternal;
extern GetActiveTradingPairRequestDefaultTypeInternal _GetActiveTradingPairRequest_default_instance_;
class GetActiveTradingPairResponse;
class GetActiveTradingPairResponseDefaultTypeInternal;
extern GetActiveTradingPairResponseDefaultTypeInternal _GetActiveTradingPairResponse_default_instance_;
class GetAddedCurrenciesRequest;
class GetAddedCurrenciesRequestDefaultTypeInternal;
extern GetAddedCurrenciesRequestDefaultTypeInternal _GetAddedCurrenciesRequest_default_instance_;
class GetAddedCurrenciesResponse;
class GetAddedCurrenciesResponseDefaultTypeInternal;
extern GetAddedCurrenciesResponseDefaultTypeInternal _GetAddedCurrenciesResponse_default_instance_;
class GetChannelStatusCommand;
class GetChannelStatusCommandDefaultTypeInternal;
extern GetChannelStatusCommandDefaultTypeInternal _GetChannelStatusCommand_default_instance_;
class GetChannelStatusResponse;
class GetChannelStatusResponseDefaultTypeInternal;
extern GetChannelStatusResponseDefaultTypeInternal _GetChannelStatusResponse_default_instance_;
class GetFeeToRentChannelCommand;
class GetFeeToRentChannelCommandDefaultTypeInternal;
extern GetFeeToRentChannelCommandDefaultTypeInternal _GetFeeToRentChannelCommand_default_instance_;
class GetFeeToRentChannelResponse;
class GetFeeToRentChannelResponseDefaultTypeInternal;
extern GetFeeToRentChannelResponseDefaultTypeInternal _GetFeeToRentChannelResponse_default_instance_;
class ListOrdersRequest;
class ListOrdersRequestDefaultTypeInternal;
extern ListOrdersRequestDefaultTypeInternal _ListOrdersRequest_default_instance_;
class ListOrdersResponse;
class ListOrdersResponseDefaultTypeInternal;
extern ListOrdersResponseDefaultTypeInternal _ListOrdersResponse_default_instance_;
class ListOwnOrdersRequest;
class ListOwnOrdersRequestDefaultTypeInternal;
extern ListOwnOrdersRequestDefaultTypeInternal _ListOwnOrdersRequest_default_instance_;
class ListOwnOrdersResponse;
class ListOwnOrdersResponseDefaultTypeInternal;
extern ListOwnOrdersResponseDefaultTypeInternal _ListOwnOrdersResponse_default_instance_;
class LndConfiguration;
class LndConfigurationDefaultTypeInternal;
extern LndConfigurationDefaultTypeInternal _LndConfiguration_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderPortion;
class OrderPortionDefaultTypeInternal;
extern OrderPortionDefaultTypeInternal _OrderPortion_default_instance_;
class OrderSummary;
class OrderSummaryDefaultTypeInternal;
extern OrderSummaryDefaultTypeInternal _OrderSummary_default_instance_;
class OrderUpdate;
class OrderUpdateDefaultTypeInternal;
extern OrderUpdateDefaultTypeInternal _OrderUpdate_default_instance_;
class OrderbookFailure;
class OrderbookFailureDefaultTypeInternal;
extern OrderbookFailureDefaultTypeInternal _OrderbookFailure_default_instance_;
class OrderbookState;
class OrderbookStateDefaultTypeInternal;
extern OrderbookStateDefaultTypeInternal _OrderbookState_default_instance_;
class OwnOrderUpdate;
class OwnOrderUpdateDefaultTypeInternal;
extern OwnOrderUpdateDefaultTypeInternal _OwnOrderUpdate_default_instance_;
class PlaceOrderFailure;
class PlaceOrderFailureDefaultTypeInternal;
extern PlaceOrderFailureDefaultTypeInternal _PlaceOrderFailure_default_instance_;
class PlaceOrderRequest;
class PlaceOrderRequestDefaultTypeInternal;
extern PlaceOrderRequestDefaultTypeInternal _PlaceOrderRequest_default_instance_;
class PlaceOrderResponse;
class PlaceOrderResponseDefaultTypeInternal;
extern PlaceOrderResponseDefaultTypeInternal _PlaceOrderResponse_default_instance_;
class RentChannelCommand;
class RentChannelCommandDefaultTypeInternal;
extern RentChannelCommandDefaultTypeInternal _RentChannelCommand_default_instance_;
class RentChannelResponse;
class RentChannelResponseDefaultTypeInternal;
extern RentChannelResponseDefaultTypeInternal _RentChannelResponse_default_instance_;
class SubscribeOrderbookStateRequest;
class SubscribeOrderbookStateRequestDefaultTypeInternal;
extern SubscribeOrderbookStateRequestDefaultTypeInternal _SubscribeOrderbookStateRequest_default_instance_;
class SubscribeOrdersRequest;
class SubscribeOrdersRequestDefaultTypeInternal;
extern SubscribeOrdersRequestDefaultTypeInternal _SubscribeOrdersRequest_default_instance_;
class SubscribeSwapsRequest;
class SubscribeSwapsRequestDefaultTypeInternal;
extern SubscribeSwapsRequestDefaultTypeInternal _SubscribeSwapsRequest_default_instance_;
class SwapFailure;
class SwapFailureDefaultTypeInternal;
extern SwapFailureDefaultTypeInternal _SwapFailure_default_instance_;
class SwapResult;
class SwapResultDefaultTypeInternal;
extern SwapResultDefaultTypeInternal _SwapResult_default_instance_;
class SwapSuccess;
class SwapSuccessDefaultTypeInternal;
extern SwapSuccessDefaultTypeInternal _SwapSuccess_default_instance_;
}  // namespace lssdrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::lssdrpc::AddCurrencyRequest* Arena::CreateMaybeMessage<::lssdrpc::AddCurrencyRequest>(Arena*);
template<> ::lssdrpc::AddCurrencyResponse* Arena::CreateMaybeMessage<::lssdrpc::AddCurrencyResponse>(Arena*);
template<> ::lssdrpc::BigInteger* Arena::CreateMaybeMessage<::lssdrpc::BigInteger>(Arena*);
template<> ::lssdrpc::CancelOrderRequest* Arena::CreateMaybeMessage<::lssdrpc::CancelOrderRequest>(Arena*);
template<> ::lssdrpc::CancelOrderResponse* Arena::CreateMaybeMessage<::lssdrpc::CancelOrderResponse>(Arena*);
template<> ::lssdrpc::ConnextConfiguration* Arena::CreateMaybeMessage<::lssdrpc::ConnextConfiguration>(Arena*);
template<> ::lssdrpc::EnableTradingPairRequest* Arena::CreateMaybeMessage<::lssdrpc::EnableTradingPairRequest>(Arena*);
template<> ::lssdrpc::EnableTradingPairResponse* Arena::CreateMaybeMessage<::lssdrpc::EnableTradingPairResponse>(Arena*);
template<> ::lssdrpc::GenerateInvoiceToRentChannelCommand* Arena::CreateMaybeMessage<::lssdrpc::GenerateInvoiceToRentChannelCommand>(Arena*);
template<> ::lssdrpc::GenerateInvoiceToRentChannelResponse* Arena::CreateMaybeMessage<::lssdrpc::GenerateInvoiceToRentChannelResponse>(Arena*);
template<> ::lssdrpc::GetActiveTradingPairRequest* Arena::CreateMaybeMessage<::lssdrpc::GetActiveTradingPairRequest>(Arena*);
template<> ::lssdrpc::GetActiveTradingPairResponse* Arena::CreateMaybeMessage<::lssdrpc::GetActiveTradingPairResponse>(Arena*);
template<> ::lssdrpc::GetAddedCurrenciesRequest* Arena::CreateMaybeMessage<::lssdrpc::GetAddedCurrenciesRequest>(Arena*);
template<> ::lssdrpc::GetAddedCurrenciesResponse* Arena::CreateMaybeMessage<::lssdrpc::GetAddedCurrenciesResponse>(Arena*);
template<> ::lssdrpc::GetChannelStatusCommand* Arena::CreateMaybeMessage<::lssdrpc::GetChannelStatusCommand>(Arena*);
template<> ::lssdrpc::GetChannelStatusResponse* Arena::CreateMaybeMessage<::lssdrpc::GetChannelStatusResponse>(Arena*);
template<> ::lssdrpc::GetFeeToRentChannelCommand* Arena::CreateMaybeMessage<::lssdrpc::GetFeeToRentChannelCommand>(Arena*);
template<> ::lssdrpc::GetFeeToRentChannelResponse* Arena::CreateMaybeMessage<::lssdrpc::GetFeeToRentChannelResponse>(Arena*);
template<> ::lssdrpc::ListOrdersRequest* Arena::CreateMaybeMessage<::lssdrpc::ListOrdersRequest>(Arena*);
template<> ::lssdrpc::ListOrdersResponse* Arena::CreateMaybeMessage<::lssdrpc::ListOrdersResponse>(Arena*);
template<> ::lssdrpc::ListOwnOrdersRequest* Arena::CreateMaybeMessage<::lssdrpc::ListOwnOrdersRequest>(Arena*);
template<> ::lssdrpc::ListOwnOrdersResponse* Arena::CreateMaybeMessage<::lssdrpc::ListOwnOrdersResponse>(Arena*);
template<> ::lssdrpc::LndConfiguration* Arena::CreateMaybeMessage<::lssdrpc::LndConfiguration>(Arena*);
template<> ::lssdrpc::Order* Arena::CreateMaybeMessage<::lssdrpc::Order>(Arena*);
template<> ::lssdrpc::OrderPortion* Arena::CreateMaybeMessage<::lssdrpc::OrderPortion>(Arena*);
template<> ::lssdrpc::OrderSummary* Arena::CreateMaybeMessage<::lssdrpc::OrderSummary>(Arena*);
template<> ::lssdrpc::OrderUpdate* Arena::CreateMaybeMessage<::lssdrpc::OrderUpdate>(Arena*);
template<> ::lssdrpc::OrderbookFailure* Arena::CreateMaybeMessage<::lssdrpc::OrderbookFailure>(Arena*);
template<> ::lssdrpc::OrderbookState* Arena::CreateMaybeMessage<::lssdrpc::OrderbookState>(Arena*);
template<> ::lssdrpc::OwnOrderUpdate* Arena::CreateMaybeMessage<::lssdrpc::OwnOrderUpdate>(Arena*);
template<> ::lssdrpc::PlaceOrderFailure* Arena::CreateMaybeMessage<::lssdrpc::PlaceOrderFailure>(Arena*);
template<> ::lssdrpc::PlaceOrderRequest* Arena::CreateMaybeMessage<::lssdrpc::PlaceOrderRequest>(Arena*);
template<> ::lssdrpc::PlaceOrderResponse* Arena::CreateMaybeMessage<::lssdrpc::PlaceOrderResponse>(Arena*);
template<> ::lssdrpc::RentChannelCommand* Arena::CreateMaybeMessage<::lssdrpc::RentChannelCommand>(Arena*);
template<> ::lssdrpc::RentChannelResponse* Arena::CreateMaybeMessage<::lssdrpc::RentChannelResponse>(Arena*);
template<> ::lssdrpc::SubscribeOrderbookStateRequest* Arena::CreateMaybeMessage<::lssdrpc::SubscribeOrderbookStateRequest>(Arena*);
template<> ::lssdrpc::SubscribeOrdersRequest* Arena::CreateMaybeMessage<::lssdrpc::SubscribeOrdersRequest>(Arena*);
template<> ::lssdrpc::SubscribeSwapsRequest* Arena::CreateMaybeMessage<::lssdrpc::SubscribeSwapsRequest>(Arena*);
template<> ::lssdrpc::SwapFailure* Arena::CreateMaybeMessage<::lssdrpc::SwapFailure>(Arena*);
template<> ::lssdrpc::SwapResult* Arena::CreateMaybeMessage<::lssdrpc::SwapResult>(Arena*);
template<> ::lssdrpc::SwapSuccess* Arena::CreateMaybeMessage<::lssdrpc::SwapSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace lssdrpc {

enum OrderbookState_State : int {
  OrderbookState_State_UNKNOWN = 0,
  OrderbookState_State_CONNECTED = 1,
  OrderbookState_State_DISCONNECTED = 2,
  OrderbookState_State_OrderbookState_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderbookState_State_OrderbookState_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderbookState_State_IsValid(int value);
constexpr OrderbookState_State OrderbookState_State_State_MIN = OrderbookState_State_UNKNOWN;
constexpr OrderbookState_State OrderbookState_State_State_MAX = OrderbookState_State_DISCONNECTED;
constexpr int OrderbookState_State_State_ARRAYSIZE = OrderbookState_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderbookState_State_descriptor();
template<typename T>
inline const std::string& OrderbookState_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderbookState_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderbookState_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderbookState_State_descriptor(), enum_t_value);
}
inline bool OrderbookState_State_Parse(
    const std::string& name, OrderbookState_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderbookState_State>(
    OrderbookState_State_descriptor(), name, value);
}
enum SwapSuccess_Role : int {
  SwapSuccess_Role_TAKER = 0,
  SwapSuccess_Role_MAKER = 1,
  SwapSuccess_Role_SwapSuccess_Role_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwapSuccess_Role_SwapSuccess_Role_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwapSuccess_Role_IsValid(int value);
constexpr SwapSuccess_Role SwapSuccess_Role_Role_MIN = SwapSuccess_Role_TAKER;
constexpr SwapSuccess_Role SwapSuccess_Role_Role_MAX = SwapSuccess_Role_MAKER;
constexpr int SwapSuccess_Role_Role_ARRAYSIZE = SwapSuccess_Role_Role_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwapSuccess_Role_descriptor();
template<typename T>
inline const std::string& SwapSuccess_Role_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwapSuccess_Role>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwapSuccess_Role_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwapSuccess_Role_descriptor(), enum_t_value);
}
inline bool SwapSuccess_Role_Parse(
    const std::string& name, SwapSuccess_Role* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwapSuccess_Role>(
    SwapSuccess_Role_descriptor(), name, value);
}
enum OrderSide : int {
  buy = 0,
  sell = 1,
  OrderSide_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OrderSide_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OrderSide_IsValid(int value);
constexpr OrderSide OrderSide_MIN = buy;
constexpr OrderSide OrderSide_MAX = sell;
constexpr int OrderSide_ARRAYSIZE = OrderSide_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrderSide_descriptor();
template<typename T>
inline const std::string& OrderSide_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrderSide>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrderSide_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrderSide_descriptor(), enum_t_value);
}
inline bool OrderSide_Parse(
    const std::string& name, OrderSide* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrderSide>(
    OrderSide_descriptor(), name, value);
}
// ===================================================================

class BigInteger :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.BigInteger) */ {
 public:
  BigInteger();
  virtual ~BigInteger();

  BigInteger(const BigInteger& from);
  BigInteger(BigInteger&& from) noexcept
    : BigInteger() {
    *this = ::std::move(from);
  }

  inline BigInteger& operator=(const BigInteger& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigInteger& operator=(BigInteger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BigInteger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigInteger* internal_default_instance() {
    return reinterpret_cast<const BigInteger*>(
               &_BigInteger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BigInteger& a, BigInteger& b) {
    a.Swap(&b);
  }
  inline void Swap(BigInteger* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BigInteger* New() const final {
    return CreateMaybeMessage<BigInteger>(nullptr);
  }

  BigInteger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BigInteger>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BigInteger& from);
  void MergeFrom(const BigInteger& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigInteger* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.BigInteger";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.BigInteger)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class AddCurrencyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.AddCurrencyRequest) */ {
 public:
  AddCurrencyRequest();
  virtual ~AddCurrencyRequest();

  AddCurrencyRequest(const AddCurrencyRequest& from);
  AddCurrencyRequest(AddCurrencyRequest&& from) noexcept
    : AddCurrencyRequest() {
    *this = ::std::move(from);
  }

  inline AddCurrencyRequest& operator=(const AddCurrencyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCurrencyRequest& operator=(AddCurrencyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCurrencyRequest& default_instance();

  enum ConfCase {
    kLnd = 3,
    kConnext = 4,
    CONF_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCurrencyRequest* internal_default_instance() {
    return reinterpret_cast<const AddCurrencyRequest*>(
               &_AddCurrencyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AddCurrencyRequest& a, AddCurrencyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCurrencyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCurrencyRequest* New() const final {
    return CreateMaybeMessage<AddCurrencyRequest>(nullptr);
  }

  AddCurrencyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCurrencyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCurrencyRequest& from);
  void MergeFrom(const AddCurrencyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCurrencyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.AddCurrencyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kLndFieldNumber = 3,
    kConnextFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // .lssdrpc.LndConfiguration lnd = 3;
  bool has_lnd() const;
  private:
  bool _internal_has_lnd() const;
  public:
  void clear_lnd();
  const ::lssdrpc::LndConfiguration& lnd() const;
  ::lssdrpc::LndConfiguration* release_lnd();
  ::lssdrpc::LndConfiguration* mutable_lnd();
  void set_allocated_lnd(::lssdrpc::LndConfiguration* lnd);
  private:
  const ::lssdrpc::LndConfiguration& _internal_lnd() const;
  ::lssdrpc::LndConfiguration* _internal_mutable_lnd();
  public:

  // .lssdrpc.ConnextConfiguration connext = 4;
  bool has_connext() const;
  private:
  bool _internal_has_connext() const;
  public:
  void clear_connext();
  const ::lssdrpc::ConnextConfiguration& connext() const;
  ::lssdrpc::ConnextConfiguration* release_connext();
  ::lssdrpc::ConnextConfiguration* mutable_connext();
  void set_allocated_connext(::lssdrpc::ConnextConfiguration* connext);
  private:
  const ::lssdrpc::ConnextConfiguration& _internal_connext() const;
  ::lssdrpc::ConnextConfiguration* _internal_mutable_connext();
  public:

  void clear_conf();
  ConfCase conf_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.AddCurrencyRequest)
 private:
  class _Internal;
  void set_has_lnd();
  void set_has_connext();

  inline bool has_conf() const;
  inline void clear_has_conf();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  union ConfUnion {
    ConfUnion() {}
    ::lssdrpc::LndConfiguration* lnd_;
    ::lssdrpc::ConnextConfiguration* connext_;
  } conf_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class ConnextConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.ConnextConfiguration) */ {
 public:
  ConnextConfiguration();
  virtual ~ConnextConfiguration();

  ConnextConfiguration(const ConnextConfiguration& from);
  ConnextConfiguration(ConnextConfiguration&& from) noexcept
    : ConnextConfiguration() {
    *this = ::std::move(from);
  }

  inline ConnextConfiguration& operator=(const ConnextConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnextConfiguration& operator=(ConnextConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnextConfiguration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnextConfiguration* internal_default_instance() {
    return reinterpret_cast<const ConnextConfiguration*>(
               &_ConnextConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnextConfiguration& a, ConnextConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnextConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnextConfiguration* New() const final {
    return CreateMaybeMessage<ConnextConfiguration>(nullptr);
  }

  ConnextConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnextConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnextConfiguration& from);
  void MergeFrom(const ConnextConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnextConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.ConnextConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnextChannelFieldNumber = 1,
    kTokenAddressFieldNumber = 2,
    kEventResolverFieldNumber = 3,
  };
  // string connextChannel = 1;
  void clear_connextchannel();
  const std::string& connextchannel() const;
  void set_connextchannel(const std::string& value);
  void set_connextchannel(std::string&& value);
  void set_connextchannel(const char* value);
  void set_connextchannel(const char* value, size_t size);
  std::string* mutable_connextchannel();
  std::string* release_connextchannel();
  void set_allocated_connextchannel(std::string* connextchannel);
  private:
  const std::string& _internal_connextchannel() const;
  void _internal_set_connextchannel(const std::string& value);
  std::string* _internal_mutable_connextchannel();
  public:

  // string tokenAddress = 2;
  void clear_tokenaddress();
  const std::string& tokenaddress() const;
  void set_tokenaddress(const std::string& value);
  void set_tokenaddress(std::string&& value);
  void set_tokenaddress(const char* value);
  void set_tokenaddress(const char* value, size_t size);
  std::string* mutable_tokenaddress();
  std::string* release_tokenaddress();
  void set_allocated_tokenaddress(std::string* tokenaddress);
  private:
  const std::string& _internal_tokenaddress() const;
  void _internal_set_tokenaddress(const std::string& value);
  std::string* _internal_mutable_tokenaddress();
  public:

  // string eventResolver = 3;
  void clear_eventresolver();
  const std::string& eventresolver() const;
  void set_eventresolver(const std::string& value);
  void set_eventresolver(std::string&& value);
  void set_eventresolver(const char* value);
  void set_eventresolver(const char* value, size_t size);
  std::string* mutable_eventresolver();
  std::string* release_eventresolver();
  void set_allocated_eventresolver(std::string* eventresolver);
  private:
  const std::string& _internal_eventresolver() const;
  void _internal_set_eventresolver(const std::string& value);
  std::string* _internal_mutable_eventresolver();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.ConnextConfiguration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connextchannel_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tokenaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eventresolver_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class LndConfiguration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.LndConfiguration) */ {
 public:
  LndConfiguration();
  virtual ~LndConfiguration();

  LndConfiguration(const LndConfiguration& from);
  LndConfiguration(LndConfiguration&& from) noexcept
    : LndConfiguration() {
    *this = ::std::move(from);
  }

  inline LndConfiguration& operator=(const LndConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline LndConfiguration& operator=(LndConfiguration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LndConfiguration& default_instance();

  enum TlsCertCase {
    kCertPath = 2,
    kRawCert = 3,
    TLSCERT_NOT_SET = 0,
  };

  enum MacaroonCase {
    kMacaroonPath = 4,
    kRawMacaroon = 5,
    MACAROON_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LndConfiguration* internal_default_instance() {
    return reinterpret_cast<const LndConfiguration*>(
               &_LndConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LndConfiguration& a, LndConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(LndConfiguration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LndConfiguration* New() const final {
    return CreateMaybeMessage<LndConfiguration>(nullptr);
  }

  LndConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LndConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LndConfiguration& from);
  void MergeFrom(const LndConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LndConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.LndConfiguration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLndChannelFieldNumber = 1,
    kCertPathFieldNumber = 2,
    kRawCertFieldNumber = 3,
    kMacaroonPathFieldNumber = 4,
    kRawMacaroonFieldNumber = 5,
  };
  // string lndChannel = 1;
  void clear_lndchannel();
  const std::string& lndchannel() const;
  void set_lndchannel(const std::string& value);
  void set_lndchannel(std::string&& value);
  void set_lndchannel(const char* value);
  void set_lndchannel(const char* value, size_t size);
  std::string* mutable_lndchannel();
  std::string* release_lndchannel();
  void set_allocated_lndchannel(std::string* lndchannel);
  private:
  const std::string& _internal_lndchannel() const;
  void _internal_set_lndchannel(const std::string& value);
  std::string* _internal_mutable_lndchannel();
  public:

  // string certPath = 2;
  private:
  bool _internal_has_certpath() const;
  public:
  void clear_certpath();
  const std::string& certpath() const;
  void set_certpath(const std::string& value);
  void set_certpath(std::string&& value);
  void set_certpath(const char* value);
  void set_certpath(const char* value, size_t size);
  std::string* mutable_certpath();
  std::string* release_certpath();
  void set_allocated_certpath(std::string* certpath);
  private:
  const std::string& _internal_certpath() const;
  void _internal_set_certpath(const std::string& value);
  std::string* _internal_mutable_certpath();
  public:

  // string rawCert = 3;
  private:
  bool _internal_has_rawcert() const;
  public:
  void clear_rawcert();
  const std::string& rawcert() const;
  void set_rawcert(const std::string& value);
  void set_rawcert(std::string&& value);
  void set_rawcert(const char* value);
  void set_rawcert(const char* value, size_t size);
  std::string* mutable_rawcert();
  std::string* release_rawcert();
  void set_allocated_rawcert(std::string* rawcert);
  private:
  const std::string& _internal_rawcert() const;
  void _internal_set_rawcert(const std::string& value);
  std::string* _internal_mutable_rawcert();
  public:

  // string macaroon_path = 4;
  private:
  bool _internal_has_macaroon_path() const;
  public:
  void clear_macaroon_path();
  const std::string& macaroon_path() const;
  void set_macaroon_path(const std::string& value);
  void set_macaroon_path(std::string&& value);
  void set_macaroon_path(const char* value);
  void set_macaroon_path(const char* value, size_t size);
  std::string* mutable_macaroon_path();
  std::string* release_macaroon_path();
  void set_allocated_macaroon_path(std::string* macaroon_path);
  private:
  const std::string& _internal_macaroon_path() const;
  void _internal_set_macaroon_path(const std::string& value);
  std::string* _internal_mutable_macaroon_path();
  public:

  // string raw_macaroon = 5;
  private:
  bool _internal_has_raw_macaroon() const;
  public:
  void clear_raw_macaroon();
  const std::string& raw_macaroon() const;
  void set_raw_macaroon(const std::string& value);
  void set_raw_macaroon(std::string&& value);
  void set_raw_macaroon(const char* value);
  void set_raw_macaroon(const char* value, size_t size);
  std::string* mutable_raw_macaroon();
  std::string* release_raw_macaroon();
  void set_allocated_raw_macaroon(std::string* raw_macaroon);
  private:
  const std::string& _internal_raw_macaroon() const;
  void _internal_set_raw_macaroon(const std::string& value);
  std::string* _internal_mutable_raw_macaroon();
  public:

  void clear_tlsCert();
  TlsCertCase tlsCert_case() const;
  void clear_macaroon();
  MacaroonCase macaroon_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.LndConfiguration)
 private:
  class _Internal;
  void set_has_certpath();
  void set_has_rawcert();
  void set_has_macaroon_path();
  void set_has_raw_macaroon();

  inline bool has_tlsCert() const;
  inline void clear_has_tlsCert();

  inline bool has_macaroon() const;
  inline void clear_has_macaroon();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lndchannel_;
  union TlsCertUnion {
    TlsCertUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr certpath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rawcert_;
  } tlsCert_;
  union MacaroonUnion {
    MacaroonUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaroon_path_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_macaroon_;
  } macaroon_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class AddCurrencyResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.AddCurrencyResponse) */ {
 public:
  AddCurrencyResponse();
  virtual ~AddCurrencyResponse();

  AddCurrencyResponse(const AddCurrencyResponse& from);
  AddCurrencyResponse(AddCurrencyResponse&& from) noexcept
    : AddCurrencyResponse() {
    *this = ::std::move(from);
  }

  inline AddCurrencyResponse& operator=(const AddCurrencyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCurrencyResponse& operator=(AddCurrencyResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCurrencyResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddCurrencyResponse* internal_default_instance() {
    return reinterpret_cast<const AddCurrencyResponse*>(
               &_AddCurrencyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AddCurrencyResponse& a, AddCurrencyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCurrencyResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCurrencyResponse* New() const final {
    return CreateMaybeMessage<AddCurrencyResponse>(nullptr);
  }

  AddCurrencyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCurrencyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCurrencyResponse& from);
  void MergeFrom(const AddCurrencyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCurrencyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.AddCurrencyResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.AddCurrencyResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddedCurrenciesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetAddedCurrenciesRequest) */ {
 public:
  GetAddedCurrenciesRequest();
  virtual ~GetAddedCurrenciesRequest();

  GetAddedCurrenciesRequest(const GetAddedCurrenciesRequest& from);
  GetAddedCurrenciesRequest(GetAddedCurrenciesRequest&& from) noexcept
    : GetAddedCurrenciesRequest() {
    *this = ::std::move(from);
  }

  inline GetAddedCurrenciesRequest& operator=(const GetAddedCurrenciesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddedCurrenciesRequest& operator=(GetAddedCurrenciesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddedCurrenciesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddedCurrenciesRequest* internal_default_instance() {
    return reinterpret_cast<const GetAddedCurrenciesRequest*>(
               &_GetAddedCurrenciesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetAddedCurrenciesRequest& a, GetAddedCurrenciesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddedCurrenciesRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddedCurrenciesRequest* New() const final {
    return CreateMaybeMessage<GetAddedCurrenciesRequest>(nullptr);
  }

  GetAddedCurrenciesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddedCurrenciesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddedCurrenciesRequest& from);
  void MergeFrom(const GetAddedCurrenciesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddedCurrenciesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetAddedCurrenciesRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.GetAddedCurrenciesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetAddedCurrenciesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetAddedCurrenciesResponse) */ {
 public:
  GetAddedCurrenciesResponse();
  virtual ~GetAddedCurrenciesResponse();

  GetAddedCurrenciesResponse(const GetAddedCurrenciesResponse& from);
  GetAddedCurrenciesResponse(GetAddedCurrenciesResponse&& from) noexcept
    : GetAddedCurrenciesResponse() {
    *this = ::std::move(from);
  }

  inline GetAddedCurrenciesResponse& operator=(const GetAddedCurrenciesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAddedCurrenciesResponse& operator=(GetAddedCurrenciesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAddedCurrenciesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAddedCurrenciesResponse* internal_default_instance() {
    return reinterpret_cast<const GetAddedCurrenciesResponse*>(
               &_GetAddedCurrenciesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetAddedCurrenciesResponse& a, GetAddedCurrenciesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAddedCurrenciesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAddedCurrenciesResponse* New() const final {
    return CreateMaybeMessage<GetAddedCurrenciesResponse>(nullptr);
  }

  GetAddedCurrenciesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAddedCurrenciesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAddedCurrenciesResponse& from);
  void MergeFrom(const GetAddedCurrenciesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAddedCurrenciesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetAddedCurrenciesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
  };
  // repeated string currency = 1;
  int currency_size() const;
  private:
  int _internal_currency_size() const;
  public:
  void clear_currency();
  const std::string& currency(int index) const;
  std::string* mutable_currency(int index);
  void set_currency(int index, const std::string& value);
  void set_currency(int index, std::string&& value);
  void set_currency(int index, const char* value);
  void set_currency(int index, const char* value, size_t size);
  std::string* add_currency();
  void add_currency(const std::string& value);
  void add_currency(std::string&& value);
  void add_currency(const char* value);
  void add_currency(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& currency() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_currency();
  private:
  const std::string& _internal_currency(int index) const;
  std::string* _internal_add_currency();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetAddedCurrenciesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> currency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class EnableTradingPairRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.EnableTradingPairRequest) */ {
 public:
  EnableTradingPairRequest();
  virtual ~EnableTradingPairRequest();

  EnableTradingPairRequest(const EnableTradingPairRequest& from);
  EnableTradingPairRequest(EnableTradingPairRequest&& from) noexcept
    : EnableTradingPairRequest() {
    *this = ::std::move(from);
  }

  inline EnableTradingPairRequest& operator=(const EnableTradingPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableTradingPairRequest& operator=(EnableTradingPairRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableTradingPairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableTradingPairRequest* internal_default_instance() {
    return reinterpret_cast<const EnableTradingPairRequest*>(
               &_EnableTradingPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(EnableTradingPairRequest& a, EnableTradingPairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableTradingPairRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableTradingPairRequest* New() const final {
    return CreateMaybeMessage<EnableTradingPairRequest>(nullptr);
  }

  EnableTradingPairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableTradingPairRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableTradingPairRequest& from);
  void MergeFrom(const EnableTradingPairRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableTradingPairRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.EnableTradingPairRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.EnableTradingPairRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class EnableTradingPairResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.EnableTradingPairResponse) */ {
 public:
  EnableTradingPairResponse();
  virtual ~EnableTradingPairResponse();

  EnableTradingPairResponse(const EnableTradingPairResponse& from);
  EnableTradingPairResponse(EnableTradingPairResponse&& from) noexcept
    : EnableTradingPairResponse() {
    *this = ::std::move(from);
  }

  inline EnableTradingPairResponse& operator=(const EnableTradingPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableTradingPairResponse& operator=(EnableTradingPairResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnableTradingPairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnableTradingPairResponse* internal_default_instance() {
    return reinterpret_cast<const EnableTradingPairResponse*>(
               &_EnableTradingPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EnableTradingPairResponse& a, EnableTradingPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableTradingPairResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnableTradingPairResponse* New() const final {
    return CreateMaybeMessage<EnableTradingPairResponse>(nullptr);
  }

  EnableTradingPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnableTradingPairResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnableTradingPairResponse& from);
  void MergeFrom(const EnableTradingPairResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnableTradingPairResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.EnableTradingPairResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.EnableTradingPairResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetActiveTradingPairRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetActiveTradingPairRequest) */ {
 public:
  GetActiveTradingPairRequest();
  virtual ~GetActiveTradingPairRequest();

  GetActiveTradingPairRequest(const GetActiveTradingPairRequest& from);
  GetActiveTradingPairRequest(GetActiveTradingPairRequest&& from) noexcept
    : GetActiveTradingPairRequest() {
    *this = ::std::move(from);
  }

  inline GetActiveTradingPairRequest& operator=(const GetActiveTradingPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveTradingPairRequest& operator=(GetActiveTradingPairRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActiveTradingPairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActiveTradingPairRequest* internal_default_instance() {
    return reinterpret_cast<const GetActiveTradingPairRequest*>(
               &_GetActiveTradingPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetActiveTradingPairRequest& a, GetActiveTradingPairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveTradingPairRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActiveTradingPairRequest* New() const final {
    return CreateMaybeMessage<GetActiveTradingPairRequest>(nullptr);
  }

  GetActiveTradingPairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActiveTradingPairRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActiveTradingPairRequest& from);
  void MergeFrom(const GetActiveTradingPairRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveTradingPairRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetActiveTradingPairRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.GetActiveTradingPairRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetActiveTradingPairResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetActiveTradingPairResponse) */ {
 public:
  GetActiveTradingPairResponse();
  virtual ~GetActiveTradingPairResponse();

  GetActiveTradingPairResponse(const GetActiveTradingPairResponse& from);
  GetActiveTradingPairResponse(GetActiveTradingPairResponse&& from) noexcept
    : GetActiveTradingPairResponse() {
    *this = ::std::move(from);
  }

  inline GetActiveTradingPairResponse& operator=(const GetActiveTradingPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetActiveTradingPairResponse& operator=(GetActiveTradingPairResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetActiveTradingPairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetActiveTradingPairResponse* internal_default_instance() {
    return reinterpret_cast<const GetActiveTradingPairResponse*>(
               &_GetActiveTradingPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetActiveTradingPairResponse& a, GetActiveTradingPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetActiveTradingPairResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetActiveTradingPairResponse* New() const final {
    return CreateMaybeMessage<GetActiveTradingPairResponse>(nullptr);
  }

  GetActiveTradingPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetActiveTradingPairResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetActiveTradingPairResponse& from);
  void MergeFrom(const GetActiveTradingPairResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetActiveTradingPairResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetActiveTradingPairResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
  };
  // repeated string pairId = 1;
  int pairid_size() const;
  private:
  int _internal_pairid_size() const;
  public:
  void clear_pairid();
  const std::string& pairid(int index) const;
  std::string* mutable_pairid(int index);
  void set_pairid(int index, const std::string& value);
  void set_pairid(int index, std::string&& value);
  void set_pairid(int index, const char* value);
  void set_pairid(int index, const char* value, size_t size);
  std::string* add_pairid();
  void add_pairid(const std::string& value);
  void add_pairid(std::string&& value);
  void add_pairid(const char* value);
  void add_pairid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pairid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pairid();
  private:
  const std::string& _internal_pairid(int index) const;
  std::string* _internal_add_pairid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetActiveTradingPairResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOrderbookStateRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SubscribeOrderbookStateRequest) */ {
 public:
  SubscribeOrderbookStateRequest();
  virtual ~SubscribeOrderbookStateRequest();

  SubscribeOrderbookStateRequest(const SubscribeOrderbookStateRequest& from);
  SubscribeOrderbookStateRequest(SubscribeOrderbookStateRequest&& from) noexcept
    : SubscribeOrderbookStateRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeOrderbookStateRequest& operator=(const SubscribeOrderbookStateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOrderbookStateRequest& operator=(SubscribeOrderbookStateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeOrderbookStateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeOrderbookStateRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeOrderbookStateRequest*>(
               &_SubscribeOrderbookStateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SubscribeOrderbookStateRequest& a, SubscribeOrderbookStateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeOrderbookStateRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeOrderbookStateRequest* New() const final {
    return CreateMaybeMessage<SubscribeOrderbookStateRequest>(nullptr);
  }

  SubscribeOrderbookStateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeOrderbookStateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeOrderbookStateRequest& from);
  void MergeFrom(const SubscribeOrderbookStateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeOrderbookStateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SubscribeOrderbookStateRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.SubscribeOrderbookStateRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OrderbookState :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OrderbookState) */ {
 public:
  OrderbookState();
  virtual ~OrderbookState();

  OrderbookState(const OrderbookState& from);
  OrderbookState(OrderbookState&& from) noexcept
    : OrderbookState() {
    *this = ::std::move(from);
  }

  inline OrderbookState& operator=(const OrderbookState& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderbookState& operator=(OrderbookState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderbookState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderbookState* internal_default_instance() {
    return reinterpret_cast<const OrderbookState*>(
               &_OrderbookState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OrderbookState& a, OrderbookState& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderbookState* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderbookState* New() const final {
    return CreateMaybeMessage<OrderbookState>(nullptr);
  }

  OrderbookState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderbookState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderbookState& from);
  void MergeFrom(const OrderbookState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderbookState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OrderbookState";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OrderbookState_State State;
  static constexpr State UNKNOWN =
    OrderbookState_State_UNKNOWN;
  static constexpr State CONNECTED =
    OrderbookState_State_CONNECTED;
  static constexpr State DISCONNECTED =
    OrderbookState_State_DISCONNECTED;
  static inline bool State_IsValid(int value) {
    return OrderbookState_State_IsValid(value);
  }
  static constexpr State State_MIN =
    OrderbookState_State_State_MIN;
  static constexpr State State_MAX =
    OrderbookState_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    OrderbookState_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return OrderbookState_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return OrderbookState_State_Name(enum_t_value);
  }
  static inline bool State_Parse(const std::string& name,
      State* value) {
    return OrderbookState_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // .lssdrpc.OrderbookState.State state = 1;
  void clear_state();
  ::lssdrpc::OrderbookState_State state() const;
  void set_state(::lssdrpc::OrderbookState_State value);
  private:
  ::lssdrpc::OrderbookState_State _internal_state() const;
  void _internal_set_state(::lssdrpc::OrderbookState_State value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.OrderbookState)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.ListOrdersRequest) */ {
 public:
  ListOrdersRequest();
  virtual ~ListOrdersRequest();

  ListOrdersRequest(const ListOrdersRequest& from);
  ListOrdersRequest(ListOrdersRequest&& from) noexcept
    : ListOrdersRequest() {
    *this = ::std::move(from);
  }

  inline ListOrdersRequest& operator=(const ListOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersRequest& operator=(ListOrdersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrdersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const ListOrdersRequest*>(
               &_ListOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ListOrdersRequest& a, ListOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrdersRequest* New() const final {
    return CreateMaybeMessage<ListOrdersRequest>(nullptr);
  }

  ListOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrdersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrdersRequest& from);
  void MergeFrom(const ListOrdersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.ListOrdersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
    kLastKnownPriceFieldNumber = 2,
    kLimitFieldNumber = 3,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // int64 lastKnownPrice = 2;
  void clear_lastknownprice();
  ::PROTOBUF_NAMESPACE_ID::int64 lastknownprice() const;
  void set_lastknownprice(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lastknownprice() const;
  void _internal_set_lastknownprice(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 limit = 3;
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.ListOrdersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::int64 lastknownprice_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class ListOrdersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.ListOrdersResponse) */ {
 public:
  ListOrdersResponse();
  virtual ~ListOrdersResponse();

  ListOrdersResponse(const ListOrdersResponse& from);
  ListOrdersResponse(ListOrdersResponse&& from) noexcept
    : ListOrdersResponse() {
    *this = ::std::move(from);
  }

  inline ListOrdersResponse& operator=(const ListOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOrdersResponse& operator=(ListOrdersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOrdersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const ListOrdersResponse*>(
               &_ListOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListOrdersResponse& a, ListOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOrdersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOrdersResponse* New() const final {
    return CreateMaybeMessage<ListOrdersResponse>(nullptr);
  }

  ListOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOrdersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOrdersResponse& from);
  void MergeFrom(const ListOrdersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOrdersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.ListOrdersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .lssdrpc.OrderSummary orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::lssdrpc::OrderSummary* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderSummary >*
      mutable_orders();
  private:
  const ::lssdrpc::OrderSummary& _internal_orders(int index) const;
  ::lssdrpc::OrderSummary* _internal_add_orders();
  public:
  const ::lssdrpc::OrderSummary& orders(int index) const;
  ::lssdrpc::OrderSummary* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderSummary >&
      orders() const;

  // @@protoc_insertion_point(class_scope:lssdrpc.ListOrdersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderSummary > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class ListOwnOrdersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.ListOwnOrdersRequest) */ {
 public:
  ListOwnOrdersRequest();
  virtual ~ListOwnOrdersRequest();

  ListOwnOrdersRequest(const ListOwnOrdersRequest& from);
  ListOwnOrdersRequest(ListOwnOrdersRequest&& from) noexcept
    : ListOwnOrdersRequest() {
    *this = ::std::move(from);
  }

  inline ListOwnOrdersRequest& operator=(const ListOwnOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOwnOrdersRequest& operator=(ListOwnOrdersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOwnOrdersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOwnOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const ListOwnOrdersRequest*>(
               &_ListOwnOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListOwnOrdersRequest& a, ListOwnOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOwnOrdersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOwnOrdersRequest* New() const final {
    return CreateMaybeMessage<ListOwnOrdersRequest>(nullptr);
  }

  ListOwnOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOwnOrdersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOwnOrdersRequest& from);
  void MergeFrom(const ListOwnOrdersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOwnOrdersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.ListOwnOrdersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.ListOwnOrdersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class ListOwnOrdersResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.ListOwnOrdersResponse) */ {
 public:
  ListOwnOrdersResponse();
  virtual ~ListOwnOrdersResponse();

  ListOwnOrdersResponse(const ListOwnOrdersResponse& from);
  ListOwnOrdersResponse(ListOwnOrdersResponse&& from) noexcept
    : ListOwnOrdersResponse() {
    *this = ::std::move(from);
  }

  inline ListOwnOrdersResponse& operator=(const ListOwnOrdersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOwnOrdersResponse& operator=(ListOwnOrdersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListOwnOrdersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOwnOrdersResponse* internal_default_instance() {
    return reinterpret_cast<const ListOwnOrdersResponse*>(
               &_ListOwnOrdersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListOwnOrdersResponse& a, ListOwnOrdersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOwnOrdersResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListOwnOrdersResponse* New() const final {
    return CreateMaybeMessage<ListOwnOrdersResponse>(nullptr);
  }

  ListOwnOrdersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListOwnOrdersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListOwnOrdersResponse& from);
  void MergeFrom(const ListOwnOrdersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOwnOrdersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.ListOwnOrdersResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
  };
  // repeated .lssdrpc.Order orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::lssdrpc::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::Order >*
      mutable_orders();
  private:
  const ::lssdrpc::Order& _internal_orders(int index) const;
  ::lssdrpc::Order* _internal_add_orders();
  public:
  const ::lssdrpc::Order& orders(int index) const;
  ::lssdrpc::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::Order >&
      orders() const;

  // @@protoc_insertion_point(class_scope:lssdrpc.ListOwnOrdersResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::Order > orders_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.PlaceOrderRequest) */ {
 public:
  PlaceOrderRequest();
  virtual ~PlaceOrderRequest();

  PlaceOrderRequest(const PlaceOrderRequest& from);
  PlaceOrderRequest(PlaceOrderRequest&& from) noexcept
    : PlaceOrderRequest() {
    *this = ::std::move(from);
  }

  inline PlaceOrderRequest& operator=(const PlaceOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderRequest& operator=(PlaceOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderRequest* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderRequest*>(
               &_PlaceOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PlaceOrderRequest& a, PlaceOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderRequest* New() const final {
    return CreateMaybeMessage<PlaceOrderRequest>(nullptr);
  }

  PlaceOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderRequest& from);
  void MergeFrom(const PlaceOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.PlaceOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
    kFundsFieldNumber = 3,
    kPriceFieldNumber = 4,
    kSideFieldNumber = 2,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // .lssdrpc.BigInteger funds = 3;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // .lssdrpc.BigInteger price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::lssdrpc::BigInteger& price() const;
  ::lssdrpc::BigInteger* release_price();
  ::lssdrpc::BigInteger* mutable_price();
  void set_allocated_price(::lssdrpc::BigInteger* price);
  private:
  const ::lssdrpc::BigInteger& _internal_price() const;
  ::lssdrpc::BigInteger* _internal_mutable_price();
  public:

  // .lssdrpc.OrderSide side = 2;
  void clear_side();
  ::lssdrpc::OrderSide side() const;
  void set_side(::lssdrpc::OrderSide value);
  private:
  ::lssdrpc::OrderSide _internal_side() const;
  void _internal_set_side(::lssdrpc::OrderSide value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.PlaceOrderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::lssdrpc::BigInteger* funds_;
  ::lssdrpc::BigInteger* price_;
  int side_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.PlaceOrderResponse) */ {
 public:
  PlaceOrderResponse();
  virtual ~PlaceOrderResponse();

  PlaceOrderResponse(const PlaceOrderResponse& from);
  PlaceOrderResponse(PlaceOrderResponse&& from) noexcept
    : PlaceOrderResponse() {
    *this = ::std::move(from);
  }

  inline PlaceOrderResponse& operator=(const PlaceOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderResponse& operator=(PlaceOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderResponse& default_instance();

  enum OutcomeCase {
    kSwapSuccess = 1,
    kOrder = 2,
    kFailure = 3,
    OUTCOME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderResponse* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderResponse*>(
               &_PlaceOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlaceOrderResponse& a, PlaceOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderResponse* New() const final {
    return CreateMaybeMessage<PlaceOrderResponse>(nullptr);
  }

  PlaceOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderResponse& from);
  void MergeFrom(const PlaceOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.PlaceOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwapSuccessFieldNumber = 1,
    kOrderFieldNumber = 2,
    kFailureFieldNumber = 3,
  };
  // .lssdrpc.SwapSuccess swapSuccess = 1;
  bool has_swapsuccess() const;
  private:
  bool _internal_has_swapsuccess() const;
  public:
  void clear_swapsuccess();
  const ::lssdrpc::SwapSuccess& swapsuccess() const;
  ::lssdrpc::SwapSuccess* release_swapsuccess();
  ::lssdrpc::SwapSuccess* mutable_swapsuccess();
  void set_allocated_swapsuccess(::lssdrpc::SwapSuccess* swapsuccess);
  private:
  const ::lssdrpc::SwapSuccess& _internal_swapsuccess() const;
  ::lssdrpc::SwapSuccess* _internal_mutable_swapsuccess();
  public:

  // .lssdrpc.Order order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::lssdrpc::Order& order() const;
  ::lssdrpc::Order* release_order();
  ::lssdrpc::Order* mutable_order();
  void set_allocated_order(::lssdrpc::Order* order);
  private:
  const ::lssdrpc::Order& _internal_order() const;
  ::lssdrpc::Order* _internal_mutable_order();
  public:

  // .lssdrpc.PlaceOrderFailure failure = 3;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::lssdrpc::PlaceOrderFailure& failure() const;
  ::lssdrpc::PlaceOrderFailure* release_failure();
  ::lssdrpc::PlaceOrderFailure* mutable_failure();
  void set_allocated_failure(::lssdrpc::PlaceOrderFailure* failure);
  private:
  const ::lssdrpc::PlaceOrderFailure& _internal_failure() const;
  ::lssdrpc::PlaceOrderFailure* _internal_mutable_failure();
  public:

  void clear_outcome();
  OutcomeCase outcome_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.PlaceOrderResponse)
 private:
  class _Internal;
  void set_has_swapsuccess();
  void set_has_order();
  void set_has_failure();

  inline bool has_outcome() const;
  inline void clear_has_outcome();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union OutcomeUnion {
    OutcomeUnion() {}
    ::lssdrpc::SwapSuccess* swapsuccess_;
    ::lssdrpc::Order* order_;
    ::lssdrpc::PlaceOrderFailure* failure_;
  } outcome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OrderbookFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OrderbookFailure) */ {
 public:
  OrderbookFailure();
  virtual ~OrderbookFailure();

  OrderbookFailure(const OrderbookFailure& from);
  OrderbookFailure(OrderbookFailure&& from) noexcept
    : OrderbookFailure() {
    *this = ::std::move(from);
  }

  inline OrderbookFailure& operator=(const OrderbookFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderbookFailure& operator=(OrderbookFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderbookFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderbookFailure* internal_default_instance() {
    return reinterpret_cast<const OrderbookFailure*>(
               &_OrderbookFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(OrderbookFailure& a, OrderbookFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderbookFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderbookFailure* New() const final {
    return CreateMaybeMessage<OrderbookFailure>(nullptr);
  }

  OrderbookFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderbookFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderbookFailure& from);
  void MergeFrom(const OrderbookFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderbookFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OrderbookFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
    kFailureReasonFieldNumber = 3,
    kFundsFieldNumber = 2,
    kRequiredFeeFieldNumber = 4,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string failureReason = 3;
  void clear_failurereason();
  const std::string& failurereason() const;
  void set_failurereason(const std::string& value);
  void set_failurereason(std::string&& value);
  void set_failurereason(const char* value);
  void set_failurereason(const char* value, size_t size);
  std::string* mutable_failurereason();
  std::string* release_failurereason();
  void set_allocated_failurereason(std::string* failurereason);
  private:
  const std::string& _internal_failurereason() const;
  void _internal_set_failurereason(const std::string& value);
  std::string* _internal_mutable_failurereason();
  public:

  // .lssdrpc.BigInteger funds = 2;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // .lssdrpc.BigInteger requiredFee = 4;
  bool has_requiredfee() const;
  private:
  bool _internal_has_requiredfee() const;
  public:
  void clear_requiredfee();
  const ::lssdrpc::BigInteger& requiredfee() const;
  ::lssdrpc::BigInteger* release_requiredfee();
  ::lssdrpc::BigInteger* mutable_requiredfee();
  void set_allocated_requiredfee(::lssdrpc::BigInteger* requiredfee);
  private:
  const ::lssdrpc::BigInteger& _internal_requiredfee() const;
  ::lssdrpc::BigInteger* _internal_mutable_requiredfee();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.OrderbookFailure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failurereason_;
  ::lssdrpc::BigInteger* funds_;
  ::lssdrpc::BigInteger* requiredfee_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class PlaceOrderFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.PlaceOrderFailure) */ {
 public:
  PlaceOrderFailure();
  virtual ~PlaceOrderFailure();

  PlaceOrderFailure(const PlaceOrderFailure& from);
  PlaceOrderFailure(PlaceOrderFailure&& from) noexcept
    : PlaceOrderFailure() {
    *this = ::std::move(from);
  }

  inline PlaceOrderFailure& operator=(const PlaceOrderFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceOrderFailure& operator=(PlaceOrderFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceOrderFailure& default_instance();

  enum FailureCase {
    kSwapFailure = 1,
    kOrderbookFailure = 2,
    FAILURE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceOrderFailure* internal_default_instance() {
    return reinterpret_cast<const PlaceOrderFailure*>(
               &_PlaceOrderFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PlaceOrderFailure& a, PlaceOrderFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceOrderFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceOrderFailure* New() const final {
    return CreateMaybeMessage<PlaceOrderFailure>(nullptr);
  }

  PlaceOrderFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceOrderFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceOrderFailure& from);
  void MergeFrom(const PlaceOrderFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceOrderFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.PlaceOrderFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwapFailureFieldNumber = 1,
    kOrderbookFailureFieldNumber = 2,
  };
  // .lssdrpc.SwapFailure swapFailure = 1;
  bool has_swapfailure() const;
  private:
  bool _internal_has_swapfailure() const;
  public:
  void clear_swapfailure();
  const ::lssdrpc::SwapFailure& swapfailure() const;
  ::lssdrpc::SwapFailure* release_swapfailure();
  ::lssdrpc::SwapFailure* mutable_swapfailure();
  void set_allocated_swapfailure(::lssdrpc::SwapFailure* swapfailure);
  private:
  const ::lssdrpc::SwapFailure& _internal_swapfailure() const;
  ::lssdrpc::SwapFailure* _internal_mutable_swapfailure();
  public:

  // .lssdrpc.OrderbookFailure orderbookFailure = 2;
  bool has_orderbookfailure() const;
  private:
  bool _internal_has_orderbookfailure() const;
  public:
  void clear_orderbookfailure();
  const ::lssdrpc::OrderbookFailure& orderbookfailure() const;
  ::lssdrpc::OrderbookFailure* release_orderbookfailure();
  ::lssdrpc::OrderbookFailure* mutable_orderbookfailure();
  void set_allocated_orderbookfailure(::lssdrpc::OrderbookFailure* orderbookfailure);
  private:
  const ::lssdrpc::OrderbookFailure& _internal_orderbookfailure() const;
  ::lssdrpc::OrderbookFailure* _internal_mutable_orderbookfailure();
  public:

  void clear_failure();
  FailureCase failure_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.PlaceOrderFailure)
 private:
  class _Internal;
  void set_has_swapfailure();
  void set_has_orderbookfailure();

  inline bool has_failure() const;
  inline void clear_has_failure();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union FailureUnion {
    FailureUnion() {}
    ::lssdrpc::SwapFailure* swapfailure_;
    ::lssdrpc::OrderbookFailure* orderbookfailure_;
  } failure_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.CancelOrderRequest) */ {
 public:
  CancelOrderRequest();
  virtual ~CancelOrderRequest();

  CancelOrderRequest(const CancelOrderRequest& from);
  CancelOrderRequest(CancelOrderRequest&& from) noexcept
    : CancelOrderRequest() {
    *this = ::std::move(from);
  }

  inline CancelOrderRequest& operator=(const CancelOrderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderRequest& operator=(CancelOrderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrderRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOrderRequest*>(
               &_CancelOrderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CancelOrderRequest& a, CancelOrderRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderRequest* New() const final {
    return CreateMaybeMessage<CancelOrderRequest>(nullptr);
  }

  CancelOrderRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrderRequest& from);
  void MergeFrom(const CancelOrderRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.CancelOrderRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.CancelOrderRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class CancelOrderResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.CancelOrderResponse) */ {
 public:
  CancelOrderResponse();
  virtual ~CancelOrderResponse();

  CancelOrderResponse(const CancelOrderResponse& from);
  CancelOrderResponse(CancelOrderResponse&& from) noexcept
    : CancelOrderResponse() {
    *this = ::std::move(from);
  }

  inline CancelOrderResponse& operator=(const CancelOrderResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelOrderResponse& operator=(CancelOrderResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelOrderResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrderResponse* internal_default_instance() {
    return reinterpret_cast<const CancelOrderResponse*>(
               &_CancelOrderResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CancelOrderResponse& a, CancelOrderResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelOrderResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelOrderResponse* New() const final {
    return CreateMaybeMessage<CancelOrderResponse>(nullptr);
  }

  CancelOrderResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrderResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelOrderResponse& from);
  void MergeFrom(const CancelOrderResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrderResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.CancelOrderResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.CancelOrderResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOrdersRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SubscribeOrdersRequest) */ {
 public:
  SubscribeOrdersRequest();
  virtual ~SubscribeOrdersRequest();

  SubscribeOrdersRequest(const SubscribeOrdersRequest& from);
  SubscribeOrdersRequest(SubscribeOrdersRequest&& from) noexcept
    : SubscribeOrdersRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeOrdersRequest& operator=(const SubscribeOrdersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOrdersRequest& operator=(SubscribeOrdersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeOrdersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeOrdersRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeOrdersRequest*>(
               &_SubscribeOrdersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(SubscribeOrdersRequest& a, SubscribeOrdersRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeOrdersRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeOrdersRequest* New() const final {
    return CreateMaybeMessage<SubscribeOrdersRequest>(nullptr);
  }

  SubscribeOrdersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeOrdersRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeOrdersRequest& from);
  void MergeFrom(const SubscribeOrdersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeOrdersRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SubscribeOrdersRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.SubscribeOrdersRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OrderUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OrderUpdate) */ {
 public:
  OrderUpdate();
  virtual ~OrderUpdate();

  OrderUpdate(const OrderUpdate& from);
  OrderUpdate(OrderUpdate&& from) noexcept
    : OrderUpdate() {
    *this = ::std::move(from);
  }

  inline OrderUpdate& operator=(const OrderUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdate& operator=(OrderUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderUpdate& default_instance();

  enum UpdateCase {
    kOrderAdded = 1,
    kOrderRemoval = 2,
    UPDATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderUpdate* internal_default_instance() {
    return reinterpret_cast<const OrderUpdate*>(
               &_OrderUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(OrderUpdate& a, OrderUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderUpdate* New() const final {
    return CreateMaybeMessage<OrderUpdate>(nullptr);
  }

  OrderUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderUpdate& from);
  void MergeFrom(const OrderUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OrderUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderAddedFieldNumber = 1,
    kOrderRemovalFieldNumber = 2,
  };
  // .lssdrpc.OrderSummary orderAdded = 1;
  bool has_orderadded() const;
  private:
  bool _internal_has_orderadded() const;
  public:
  void clear_orderadded();
  const ::lssdrpc::OrderSummary& orderadded() const;
  ::lssdrpc::OrderSummary* release_orderadded();
  ::lssdrpc::OrderSummary* mutable_orderadded();
  void set_allocated_orderadded(::lssdrpc::OrderSummary* orderadded);
  private:
  const ::lssdrpc::OrderSummary& _internal_orderadded() const;
  ::lssdrpc::OrderSummary* _internal_mutable_orderadded();
  public:

  // .lssdrpc.OrderSummary orderRemoval = 2;
  bool has_orderremoval() const;
  private:
  bool _internal_has_orderremoval() const;
  public:
  void clear_orderremoval();
  const ::lssdrpc::OrderSummary& orderremoval() const;
  ::lssdrpc::OrderSummary* release_orderremoval();
  ::lssdrpc::OrderSummary* mutable_orderremoval();
  void set_allocated_orderremoval(::lssdrpc::OrderSummary* orderremoval);
  private:
  const ::lssdrpc::OrderSummary& _internal_orderremoval() const;
  ::lssdrpc::OrderSummary* _internal_mutable_orderremoval();
  public:

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.OrderUpdate)
 private:
  class _Internal;
  void set_has_orderadded();
  void set_has_orderremoval();

  inline bool has_update() const;
  inline void clear_has_update();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union UpdateUnion {
    UpdateUnion() {}
    ::lssdrpc::OrderSummary* orderadded_;
    ::lssdrpc::OrderSummary* orderremoval_;
  } update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OwnOrderUpdate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OwnOrderUpdate) */ {
 public:
  OwnOrderUpdate();
  virtual ~OwnOrderUpdate();

  OwnOrderUpdate(const OwnOrderUpdate& from);
  OwnOrderUpdate(OwnOrderUpdate&& from) noexcept
    : OwnOrderUpdate() {
    *this = ::std::move(from);
  }

  inline OwnOrderUpdate& operator=(const OwnOrderUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OwnOrderUpdate& operator=(OwnOrderUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OwnOrderUpdate& default_instance();

  enum UpdateCase {
    kOrderAdded = 1,
    kOrderChanged = 2,
    kOrderCompleted = 3,
    UPDATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OwnOrderUpdate* internal_default_instance() {
    return reinterpret_cast<const OwnOrderUpdate*>(
               &_OwnOrderUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(OwnOrderUpdate& a, OwnOrderUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(OwnOrderUpdate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OwnOrderUpdate* New() const final {
    return CreateMaybeMessage<OwnOrderUpdate>(nullptr);
  }

  OwnOrderUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OwnOrderUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OwnOrderUpdate& from);
  void MergeFrom(const OwnOrderUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OwnOrderUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OwnOrderUpdate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderAddedFieldNumber = 1,
    kOrderChangedFieldNumber = 2,
    kOrderCompletedFieldNumber = 3,
  };
  // .lssdrpc.Order orderAdded = 1;
  bool has_orderadded() const;
  private:
  bool _internal_has_orderadded() const;
  public:
  void clear_orderadded();
  const ::lssdrpc::Order& orderadded() const;
  ::lssdrpc::Order* release_orderadded();
  ::lssdrpc::Order* mutable_orderadded();
  void set_allocated_orderadded(::lssdrpc::Order* orderadded);
  private:
  const ::lssdrpc::Order& _internal_orderadded() const;
  ::lssdrpc::Order* _internal_mutable_orderadded();
  public:

  // .lssdrpc.Order orderChanged = 2;
  bool has_orderchanged() const;
  private:
  bool _internal_has_orderchanged() const;
  public:
  void clear_orderchanged();
  const ::lssdrpc::Order& orderchanged() const;
  ::lssdrpc::Order* release_orderchanged();
  ::lssdrpc::Order* mutable_orderchanged();
  void set_allocated_orderchanged(::lssdrpc::Order* orderchanged);
  private:
  const ::lssdrpc::Order& _internal_orderchanged() const;
  ::lssdrpc::Order* _internal_mutable_orderchanged();
  public:

  // string orderCompleted = 3;
  private:
  bool _internal_has_ordercompleted() const;
  public:
  void clear_ordercompleted();
  const std::string& ordercompleted() const;
  void set_ordercompleted(const std::string& value);
  void set_ordercompleted(std::string&& value);
  void set_ordercompleted(const char* value);
  void set_ordercompleted(const char* value, size_t size);
  std::string* mutable_ordercompleted();
  std::string* release_ordercompleted();
  void set_allocated_ordercompleted(std::string* ordercompleted);
  private:
  const std::string& _internal_ordercompleted() const;
  void _internal_set_ordercompleted(const std::string& value);
  std::string* _internal_mutable_ordercompleted();
  public:

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.OwnOrderUpdate)
 private:
  class _Internal;
  void set_has_orderadded();
  void set_has_orderchanged();
  void set_has_ordercompleted();

  inline bool has_update() const;
  inline void clear_has_update();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union UpdateUnion {
    UpdateUnion() {}
    ::lssdrpc::Order* orderadded_;
    ::lssdrpc::Order* orderchanged_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ordercompleted_;
  } update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OrderSummary :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OrderSummary) */ {
 public:
  OrderSummary();
  virtual ~OrderSummary();

  OrderSummary(const OrderSummary& from);
  OrderSummary(OrderSummary&& from) noexcept
    : OrderSummary() {
    *this = ::std::move(from);
  }

  inline OrderSummary& operator=(const OrderSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderSummary& operator=(OrderSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderSummary& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderSummary* internal_default_instance() {
    return reinterpret_cast<const OrderSummary*>(
               &_OrderSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(OrderSummary& a, OrderSummary& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderSummary* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderSummary* New() const final {
    return CreateMaybeMessage<OrderSummary>(nullptr);
  }

  OrderSummary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderSummary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderSummary& from);
  void MergeFrom(const OrderSummary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSummary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OrderSummary";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPairIdFieldNumber = 1,
    kPriceFieldNumber = 2,
    kFundsFieldNumber = 3,
  };
  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // .lssdrpc.BigInteger price = 2;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::lssdrpc::BigInteger& price() const;
  ::lssdrpc::BigInteger* release_price();
  ::lssdrpc::BigInteger* mutable_price();
  void set_allocated_price(::lssdrpc::BigInteger* price);
  private:
  const ::lssdrpc::BigInteger& _internal_price() const;
  ::lssdrpc::BigInteger* _internal_mutable_price();
  public:

  // .lssdrpc.BigInteger funds = 3;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.OrderSummary)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::lssdrpc::BigInteger* price_;
  ::lssdrpc::BigInteger* funds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class Order :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(nullptr);
  }

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.Order";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenFieldNumber = 8,
    kClosedFieldNumber = 9,
    kPairIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
    kPriceFieldNumber = 3,
    kFundsFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kSideFieldNumber = 6,
    kIsOwnOrderFieldNumber = 7,
  };
  // repeated .lssdrpc.OrderPortion open = 8;
  int open_size() const;
  private:
  int _internal_open_size() const;
  public:
  void clear_open();
  ::lssdrpc::OrderPortion* mutable_open(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >*
      mutable_open();
  private:
  const ::lssdrpc::OrderPortion& _internal_open(int index) const;
  ::lssdrpc::OrderPortion* _internal_add_open();
  public:
  const ::lssdrpc::OrderPortion& open(int index) const;
  ::lssdrpc::OrderPortion* add_open();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >&
      open() const;

  // repeated .lssdrpc.OrderPortion closed = 9;
  int closed_size() const;
  private:
  int _internal_closed_size() const;
  public:
  void clear_closed();
  ::lssdrpc::OrderPortion* mutable_closed(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >*
      mutable_closed();
  private:
  const ::lssdrpc::OrderPortion& _internal_closed(int index) const;
  ::lssdrpc::OrderPortion* _internal_add_closed();
  public:
  const ::lssdrpc::OrderPortion& closed(int index) const;
  ::lssdrpc::OrderPortion* add_closed();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >&
      closed() const;

  // string pairId = 1;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string orderId = 2;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // .lssdrpc.BigInteger price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::lssdrpc::BigInteger& price() const;
  ::lssdrpc::BigInteger* release_price();
  ::lssdrpc::BigInteger* mutable_price();
  void set_allocated_price(::lssdrpc::BigInteger* price);
  private:
  const ::lssdrpc::BigInteger& _internal_price() const;
  ::lssdrpc::BigInteger* _internal_mutable_price();
  public:

  // .lssdrpc.BigInteger funds = 4;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // uint64 createdAt = 5;
  void clear_createdat();
  ::PROTOBUF_NAMESPACE_ID::uint64 createdat() const;
  void set_createdat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_createdat() const;
  void _internal_set_createdat(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .lssdrpc.OrderSide side = 6;
  void clear_side();
  ::lssdrpc::OrderSide side() const;
  void set_side(::lssdrpc::OrderSide value);
  private:
  ::lssdrpc::OrderSide _internal_side() const;
  void _internal_set_side(::lssdrpc::OrderSide value);
  public:

  // bool isOwnOrder = 7;
  void clear_isownorder();
  bool isownorder() const;
  void set_isownorder(bool value);
  private:
  bool _internal_isownorder() const;
  void _internal_set_isownorder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.Order)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion > open_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion > closed_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::lssdrpc::BigInteger* price_;
  ::lssdrpc::BigInteger* funds_;
  ::PROTOBUF_NAMESPACE_ID::uint64 createdat_;
  int side_;
  bool isownorder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class OrderPortion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.OrderPortion) */ {
 public:
  OrderPortion();
  virtual ~OrderPortion();

  OrderPortion(const OrderPortion& from);
  OrderPortion(OrderPortion&& from) noexcept
    : OrderPortion() {
    *this = ::std::move(from);
  }

  inline OrderPortion& operator=(const OrderPortion& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderPortion& operator=(OrderPortion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OrderPortion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OrderPortion* internal_default_instance() {
    return reinterpret_cast<const OrderPortion*>(
               &_OrderPortion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(OrderPortion& a, OrderPortion& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderPortion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OrderPortion* New() const final {
    return CreateMaybeMessage<OrderPortion>(nullptr);
  }

  OrderPortion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OrderPortion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OrderPortion& from);
  void MergeFrom(const OrderPortion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderPortion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.OrderPortion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kAmountFieldNumber = 2,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // .lssdrpc.BigInteger amount = 2;
  bool has_amount() const;
  private:
  bool _internal_has_amount() const;
  public:
  void clear_amount();
  const ::lssdrpc::BigInteger& amount() const;
  ::lssdrpc::BigInteger* release_amount();
  ::lssdrpc::BigInteger* mutable_amount();
  void set_allocated_amount(::lssdrpc::BigInteger* amount);
  private:
  const ::lssdrpc::BigInteger& _internal_amount() const;
  ::lssdrpc::BigInteger* _internal_mutable_amount();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.OrderPortion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::lssdrpc::BigInteger* amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SubscribeSwapsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SubscribeSwapsRequest) */ {
 public:
  SubscribeSwapsRequest();
  virtual ~SubscribeSwapsRequest();

  SubscribeSwapsRequest(const SubscribeSwapsRequest& from);
  SubscribeSwapsRequest(SubscribeSwapsRequest&& from) noexcept
    : SubscribeSwapsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeSwapsRequest& operator=(const SubscribeSwapsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeSwapsRequest& operator=(SubscribeSwapsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeSwapsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeSwapsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeSwapsRequest*>(
               &_SubscribeSwapsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SubscribeSwapsRequest& a, SubscribeSwapsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeSwapsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeSwapsRequest* New() const final {
    return CreateMaybeMessage<SubscribeSwapsRequest>(nullptr);
  }

  SubscribeSwapsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeSwapsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeSwapsRequest& from);
  void MergeFrom(const SubscribeSwapsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeSwapsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SubscribeSwapsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:lssdrpc.SubscribeSwapsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SwapResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SwapResult) */ {
 public:
  SwapResult();
  virtual ~SwapResult();

  SwapResult(const SwapResult& from);
  SwapResult(SwapResult&& from) noexcept
    : SwapResult() {
    *this = ::std::move(from);
  }

  inline SwapResult& operator=(const SwapResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapResult& operator=(SwapResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapResult& default_instance();

  enum ValueCase {
    kSuccess = 1,
    kFailure = 2,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapResult* internal_default_instance() {
    return reinterpret_cast<const SwapResult*>(
               &_SwapResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SwapResult& a, SwapResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapResult* New() const final {
    return CreateMaybeMessage<SwapResult>(nullptr);
  }

  SwapResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapResult& from);
  void MergeFrom(const SwapResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SwapResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kFailureFieldNumber = 2,
  };
  // .lssdrpc.SwapSuccess success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::lssdrpc::SwapSuccess& success() const;
  ::lssdrpc::SwapSuccess* release_success();
  ::lssdrpc::SwapSuccess* mutable_success();
  void set_allocated_success(::lssdrpc::SwapSuccess* success);
  private:
  const ::lssdrpc::SwapSuccess& _internal_success() const;
  ::lssdrpc::SwapSuccess* _internal_mutable_success();
  public:

  // .lssdrpc.SwapFailure failure = 2;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::lssdrpc::SwapFailure& failure() const;
  ::lssdrpc::SwapFailure* release_failure();
  ::lssdrpc::SwapFailure* mutable_failure();
  void set_allocated_failure(::lssdrpc::SwapFailure* failure);
  private:
  const ::lssdrpc::SwapFailure& _internal_failure() const;
  ::lssdrpc::SwapFailure* _internal_mutable_failure();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:lssdrpc.SwapResult)
 private:
  class _Internal;
  void set_has_success();
  void set_has_failure();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::lssdrpc::SwapSuccess* success_;
    ::lssdrpc::SwapFailure* failure_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SwapSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SwapSuccess) */ {
 public:
  SwapSuccess();
  virtual ~SwapSuccess();

  SwapSuccess(const SwapSuccess& from);
  SwapSuccess(SwapSuccess&& from) noexcept
    : SwapSuccess() {
    *this = ::std::move(from);
  }

  inline SwapSuccess& operator=(const SwapSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapSuccess& operator=(SwapSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapSuccess* internal_default_instance() {
    return reinterpret_cast<const SwapSuccess*>(
               &_SwapSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SwapSuccess& a, SwapSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapSuccess* New() const final {
    return CreateMaybeMessage<SwapSuccess>(nullptr);
  }

  SwapSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapSuccess& from);
  void MergeFrom(const SwapSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SwapSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SwapSuccess_Role Role;
  static constexpr Role TAKER =
    SwapSuccess_Role_TAKER;
  static constexpr Role MAKER =
    SwapSuccess_Role_MAKER;
  static inline bool Role_IsValid(int value) {
    return SwapSuccess_Role_IsValid(value);
  }
  static constexpr Role Role_MIN =
    SwapSuccess_Role_Role_MIN;
  static constexpr Role Role_MAX =
    SwapSuccess_Role_Role_MAX;
  static constexpr int Role_ARRAYSIZE =
    SwapSuccess_Role_Role_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Role_descriptor() {
    return SwapSuccess_Role_descriptor();
  }
  template<typename T>
  static inline const std::string& Role_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Role>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Role_Name.");
    return SwapSuccess_Role_Name(enum_t_value);
  }
  static inline bool Role_Parse(const std::string& name,
      Role* value) {
    return SwapSuccess_Role_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kPairIdFieldNumber = 2,
    kRHashFieldNumber = 4,
    kCurrencyReceivedFieldNumber = 8,
    kCurrencySentFieldNumber = 9,
    kRPreimageFieldNumber = 10,
    kFundsFieldNumber = 3,
    kAmountReceivedFieldNumber = 5,
    kAmountSentFieldNumber = 6,
    kPriceFieldNumber = 11,
    kRoleFieldNumber = 7,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string pairId = 2;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string rHash = 4;
  void clear_rhash();
  const std::string& rhash() const;
  void set_rhash(const std::string& value);
  void set_rhash(std::string&& value);
  void set_rhash(const char* value);
  void set_rhash(const char* value, size_t size);
  std::string* mutable_rhash();
  std::string* release_rhash();
  void set_allocated_rhash(std::string* rhash);
  private:
  const std::string& _internal_rhash() const;
  void _internal_set_rhash(const std::string& value);
  std::string* _internal_mutable_rhash();
  public:

  // string currencyReceived = 8;
  void clear_currencyreceived();
  const std::string& currencyreceived() const;
  void set_currencyreceived(const std::string& value);
  void set_currencyreceived(std::string&& value);
  void set_currencyreceived(const char* value);
  void set_currencyreceived(const char* value, size_t size);
  std::string* mutable_currencyreceived();
  std::string* release_currencyreceived();
  void set_allocated_currencyreceived(std::string* currencyreceived);
  private:
  const std::string& _internal_currencyreceived() const;
  void _internal_set_currencyreceived(const std::string& value);
  std::string* _internal_mutable_currencyreceived();
  public:

  // string currencySent = 9;
  void clear_currencysent();
  const std::string& currencysent() const;
  void set_currencysent(const std::string& value);
  void set_currencysent(std::string&& value);
  void set_currencysent(const char* value);
  void set_currencysent(const char* value, size_t size);
  std::string* mutable_currencysent();
  std::string* release_currencysent();
  void set_allocated_currencysent(std::string* currencysent);
  private:
  const std::string& _internal_currencysent() const;
  void _internal_set_currencysent(const std::string& value);
  std::string* _internal_mutable_currencysent();
  public:

  // string rPreimage = 10;
  void clear_rpreimage();
  const std::string& rpreimage() const;
  void set_rpreimage(const std::string& value);
  void set_rpreimage(std::string&& value);
  void set_rpreimage(const char* value);
  void set_rpreimage(const char* value, size_t size);
  std::string* mutable_rpreimage();
  std::string* release_rpreimage();
  void set_allocated_rpreimage(std::string* rpreimage);
  private:
  const std::string& _internal_rpreimage() const;
  void _internal_set_rpreimage(const std::string& value);
  std::string* _internal_mutable_rpreimage();
  public:

  // .lssdrpc.BigInteger funds = 3;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // .lssdrpc.BigInteger amountReceived = 5;
  bool has_amountreceived() const;
  private:
  bool _internal_has_amountreceived() const;
  public:
  void clear_amountreceived();
  const ::lssdrpc::BigInteger& amountreceived() const;
  ::lssdrpc::BigInteger* release_amountreceived();
  ::lssdrpc::BigInteger* mutable_amountreceived();
  void set_allocated_amountreceived(::lssdrpc::BigInteger* amountreceived);
  private:
  const ::lssdrpc::BigInteger& _internal_amountreceived() const;
  ::lssdrpc::BigInteger* _internal_mutable_amountreceived();
  public:

  // .lssdrpc.BigInteger amountSent = 6;
  bool has_amountsent() const;
  private:
  bool _internal_has_amountsent() const;
  public:
  void clear_amountsent();
  const ::lssdrpc::BigInteger& amountsent() const;
  ::lssdrpc::BigInteger* release_amountsent();
  ::lssdrpc::BigInteger* mutable_amountsent();
  void set_allocated_amountsent(::lssdrpc::BigInteger* amountsent);
  private:
  const ::lssdrpc::BigInteger& _internal_amountsent() const;
  ::lssdrpc::BigInteger* _internal_mutable_amountsent();
  public:

  // .lssdrpc.BigInteger price = 11;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::lssdrpc::BigInteger& price() const;
  ::lssdrpc::BigInteger* release_price();
  ::lssdrpc::BigInteger* mutable_price();
  void set_allocated_price(::lssdrpc::BigInteger* price);
  private:
  const ::lssdrpc::BigInteger& _internal_price() const;
  ::lssdrpc::BigInteger* _internal_mutable_price();
  public:

  // .lssdrpc.SwapSuccess.Role role = 7;
  void clear_role();
  ::lssdrpc::SwapSuccess_Role role() const;
  void set_role(::lssdrpc::SwapSuccess_Role value);
  private:
  ::lssdrpc::SwapSuccess_Role _internal_role() const;
  void _internal_set_role(::lssdrpc::SwapSuccess_Role value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.SwapSuccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencyreceived_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currencysent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rpreimage_;
  ::lssdrpc::BigInteger* funds_;
  ::lssdrpc::BigInteger* amountreceived_;
  ::lssdrpc::BigInteger* amountsent_;
  ::lssdrpc::BigInteger* price_;
  int role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class SwapFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.SwapFailure) */ {
 public:
  SwapFailure();
  virtual ~SwapFailure();

  SwapFailure(const SwapFailure& from);
  SwapFailure(SwapFailure&& from) noexcept
    : SwapFailure() {
    *this = ::std::move(from);
  }

  inline SwapFailure& operator=(const SwapFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwapFailure& operator=(SwapFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwapFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwapFailure* internal_default_instance() {
    return reinterpret_cast<const SwapFailure*>(
               &_SwapFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SwapFailure& a, SwapFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(SwapFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwapFailure* New() const final {
    return CreateMaybeMessage<SwapFailure>(nullptr);
  }

  SwapFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwapFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwapFailure& from);
  void MergeFrom(const SwapFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwapFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.SwapFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kPairIdFieldNumber = 2,
    kFailureReasonFieldNumber = 4,
    kFundsFieldNumber = 3,
  };
  // string orderId = 1;
  void clear_orderid();
  const std::string& orderid() const;
  void set_orderid(const std::string& value);
  void set_orderid(std::string&& value);
  void set_orderid(const char* value);
  void set_orderid(const char* value, size_t size);
  std::string* mutable_orderid();
  std::string* release_orderid();
  void set_allocated_orderid(std::string* orderid);
  private:
  const std::string& _internal_orderid() const;
  void _internal_set_orderid(const std::string& value);
  std::string* _internal_mutable_orderid();
  public:

  // string pairId = 2;
  void clear_pairid();
  const std::string& pairid() const;
  void set_pairid(const std::string& value);
  void set_pairid(std::string&& value);
  void set_pairid(const char* value);
  void set_pairid(const char* value, size_t size);
  std::string* mutable_pairid();
  std::string* release_pairid();
  void set_allocated_pairid(std::string* pairid);
  private:
  const std::string& _internal_pairid() const;
  void _internal_set_pairid(const std::string& value);
  std::string* _internal_mutable_pairid();
  public:

  // string failureReason = 4;
  void clear_failurereason();
  const std::string& failurereason() const;
  void set_failurereason(const std::string& value);
  void set_failurereason(std::string&& value);
  void set_failurereason(const char* value);
  void set_failurereason(const char* value, size_t size);
  std::string* mutable_failurereason();
  std::string* release_failurereason();
  void set_allocated_failurereason(std::string* failurereason);
  private:
  const std::string& _internal_failurereason() const;
  void _internal_set_failurereason(const std::string& value);
  std::string* _internal_mutable_failurereason();
  public:

  // .lssdrpc.BigInteger funds = 3;
  bool has_funds() const;
  private:
  bool _internal_has_funds() const;
  public:
  void clear_funds();
  const ::lssdrpc::BigInteger& funds() const;
  ::lssdrpc::BigInteger* release_funds();
  ::lssdrpc::BigInteger* mutable_funds();
  void set_allocated_funds(::lssdrpc::BigInteger* funds);
  private:
  const ::lssdrpc::BigInteger& _internal_funds() const;
  ::lssdrpc::BigInteger* _internal_mutable_funds();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.SwapFailure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orderid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pairid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr failurereason_;
  ::lssdrpc::BigInteger* funds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToRentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GenerateInvoiceToRentChannelCommand) */ {
 public:
  GenerateInvoiceToRentChannelCommand();
  virtual ~GenerateInvoiceToRentChannelCommand();

  GenerateInvoiceToRentChannelCommand(const GenerateInvoiceToRentChannelCommand& from);
  GenerateInvoiceToRentChannelCommand(GenerateInvoiceToRentChannelCommand&& from) noexcept
    : GenerateInvoiceToRentChannelCommand() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToRentChannelCommand& operator=(const GenerateInvoiceToRentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToRentChannelCommand& operator=(GenerateInvoiceToRentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToRentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToRentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToRentChannelCommand*>(
               &_GenerateInvoiceToRentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GenerateInvoiceToRentChannelCommand& a, GenerateInvoiceToRentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToRentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToRentChannelCommand* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelCommand>(nullptr);
  }

  GenerateInvoiceToRentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToRentChannelCommand& from);
  void MergeFrom(const GenerateInvoiceToRentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToRentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GenerateInvoiceToRentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // .lssdrpc.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::lssdrpc::BigInteger& capacity() const;
  ::lssdrpc::BigInteger* release_capacity();
  ::lssdrpc::BigInteger* mutable_capacity();
  void set_allocated_capacity(::lssdrpc::BigInteger* capacity);
  private:
  const ::lssdrpc::BigInteger& _internal_capacity() const;
  ::lssdrpc::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GenerateInvoiceToRentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::lssdrpc::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GenerateInvoiceToRentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GenerateInvoiceToRentChannelResponse) */ {
 public:
  GenerateInvoiceToRentChannelResponse();
  virtual ~GenerateInvoiceToRentChannelResponse();

  GenerateInvoiceToRentChannelResponse(const GenerateInvoiceToRentChannelResponse& from);
  GenerateInvoiceToRentChannelResponse(GenerateInvoiceToRentChannelResponse&& from) noexcept
    : GenerateInvoiceToRentChannelResponse() {
    *this = ::std::move(from);
  }

  inline GenerateInvoiceToRentChannelResponse& operator=(const GenerateInvoiceToRentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateInvoiceToRentChannelResponse& operator=(GenerateInvoiceToRentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateInvoiceToRentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenerateInvoiceToRentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GenerateInvoiceToRentChannelResponse*>(
               &_GenerateInvoiceToRentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GenerateInvoiceToRentChannelResponse& a, GenerateInvoiceToRentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateInvoiceToRentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateInvoiceToRentChannelResponse* New() const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelResponse>(nullptr);
  }

  GenerateInvoiceToRentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateInvoiceToRentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateInvoiceToRentChannelResponse& from);
  void MergeFrom(const GenerateInvoiceToRentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateInvoiceToRentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GenerateInvoiceToRentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentRequestFieldNumber = 1,
  };
  // string paymentRequest = 1;
  void clear_paymentrequest();
  const std::string& paymentrequest() const;
  void set_paymentrequest(const std::string& value);
  void set_paymentrequest(std::string&& value);
  void set_paymentrequest(const char* value);
  void set_paymentrequest(const char* value, size_t size);
  std::string* mutable_paymentrequest();
  std::string* release_paymentrequest();
  void set_allocated_paymentrequest(std::string* paymentrequest);
  private:
  const std::string& _internal_paymentrequest() const;
  void _internal_set_paymentrequest(const std::string& value);
  std::string* _internal_mutable_paymentrequest();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GenerateInvoiceToRentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymentrequest_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class RentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.RentChannelCommand) */ {
 public:
  RentChannelCommand();
  virtual ~RentChannelCommand();

  RentChannelCommand(const RentChannelCommand& from);
  RentChannelCommand(RentChannelCommand&& from) noexcept
    : RentChannelCommand() {
    *this = ::std::move(from);
  }

  inline RentChannelCommand& operator=(const RentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RentChannelCommand& operator=(RentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const RentChannelCommand*>(
               &_RentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(RentChannelCommand& a, RentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RentChannelCommand* New() const final {
    return CreateMaybeMessage<RentChannelCommand>(nullptr);
  }

  RentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RentChannelCommand& from);
  void MergeFrom(const RentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.RentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPaymentHashFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kNodePublicKeyFieldNumber = 3,
  };
  // bytes paymentHash = 1;
  void clear_paymenthash();
  const std::string& paymenthash() const;
  void set_paymenthash(const std::string& value);
  void set_paymenthash(std::string&& value);
  void set_paymenthash(const char* value);
  void set_paymenthash(const void* value, size_t size);
  std::string* mutable_paymenthash();
  std::string* release_paymenthash();
  void set_allocated_paymenthash(std::string* paymenthash);
  private:
  const std::string& _internal_paymenthash() const;
  void _internal_set_paymenthash(const std::string& value);
  std::string* _internal_mutable_paymenthash();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // bytes nodePublicKey = 3;
  void clear_nodepublickey();
  const std::string& nodepublickey() const;
  void set_nodepublickey(const std::string& value);
  void set_nodepublickey(std::string&& value);
  void set_nodepublickey(const char* value);
  void set_nodepublickey(const void* value, size_t size);
  std::string* mutable_nodepublickey();
  std::string* release_nodepublickey();
  void set_allocated_nodepublickey(std::string* nodepublickey);
  private:
  const std::string& _internal_nodepublickey() const;
  void _internal_set_nodepublickey(const std::string& value);
  std::string* _internal_mutable_nodepublickey();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.RentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paymenthash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nodepublickey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class RentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.RentChannelResponse) */ {
 public:
  RentChannelResponse();
  virtual ~RentChannelResponse();

  RentChannelResponse(const RentChannelResponse& from);
  RentChannelResponse(RentChannelResponse&& from) noexcept
    : RentChannelResponse() {
    *this = ::std::move(from);
  }

  inline RentChannelResponse& operator=(const RentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RentChannelResponse& operator=(RentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const RentChannelResponse*>(
               &_RentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RentChannelResponse& a, RentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RentChannelResponse* New() const final {
    return CreateMaybeMessage<RentChannelResponse>(nullptr);
  }

  RentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RentChannelResponse& from);
  void MergeFrom(const RentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.RentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.RentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatusCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetChannelStatusCommand) */ {
 public:
  GetChannelStatusCommand();
  virtual ~GetChannelStatusCommand();

  GetChannelStatusCommand(const GetChannelStatusCommand& from);
  GetChannelStatusCommand(GetChannelStatusCommand&& from) noexcept
    : GetChannelStatusCommand() {
    *this = ::std::move(from);
  }

  inline GetChannelStatusCommand& operator=(const GetChannelStatusCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatusCommand& operator=(GetChannelStatusCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelStatusCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelStatusCommand* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatusCommand*>(
               &_GetChannelStatusCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetChannelStatusCommand& a, GetChannelStatusCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatusCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatusCommand* New() const final {
    return CreateMaybeMessage<GetChannelStatusCommand>(nullptr);
  }

  GetChannelStatusCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatusCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelStatusCommand& from);
  void MergeFrom(const GetChannelStatusCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatusCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetChannelStatusCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channelId = 1;
  void clear_channelid();
  const std::string& channelid() const;
  void set_channelid(const std::string& value);
  void set_channelid(std::string&& value);
  void set_channelid(const char* value);
  void set_channelid(const char* value, size_t size);
  std::string* mutable_channelid();
  std::string* release_channelid();
  void set_allocated_channelid(std::string* channelid);
  private:
  const std::string& _internal_channelid() const;
  void _internal_set_channelid(const std::string& value);
  std::string* _internal_mutable_channelid();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetChannelStatusCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channelid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetChannelStatusResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetChannelStatusResponse) */ {
 public:
  GetChannelStatusResponse();
  virtual ~GetChannelStatusResponse();

  GetChannelStatusResponse(const GetChannelStatusResponse& from);
  GetChannelStatusResponse(GetChannelStatusResponse&& from) noexcept
    : GetChannelStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetChannelStatusResponse& operator=(const GetChannelStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetChannelStatusResponse& operator=(GetChannelStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetChannelStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChannelStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetChannelStatusResponse*>(
               &_GetChannelStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetChannelStatusResponse& a, GetChannelStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetChannelStatusResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetChannelStatusResponse* New() const final {
    return CreateMaybeMessage<GetChannelStatusResponse>(nullptr);
  }

  GetChannelStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetChannelStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetChannelStatusResponse& from);
  void MergeFrom(const GetChannelStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChannelStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetChannelStatusResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kExpiresAtFieldNumber = 2,
  };
  // string status = 1;
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // int64 expiresAt = 2;
  void clear_expiresat();
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat() const;
  void set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_expiresat() const;
  void _internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetChannelStatusResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::int64 expiresat_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToRentChannelCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetFeeToRentChannelCommand) */ {
 public:
  GetFeeToRentChannelCommand();
  virtual ~GetFeeToRentChannelCommand();

  GetFeeToRentChannelCommand(const GetFeeToRentChannelCommand& from);
  GetFeeToRentChannelCommand(GetFeeToRentChannelCommand&& from) noexcept
    : GetFeeToRentChannelCommand() {
    *this = ::std::move(from);
  }

  inline GetFeeToRentChannelCommand& operator=(const GetFeeToRentChannelCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToRentChannelCommand& operator=(GetFeeToRentChannelCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToRentChannelCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToRentChannelCommand* internal_default_instance() {
    return reinterpret_cast<const GetFeeToRentChannelCommand*>(
               &_GetFeeToRentChannelCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(GetFeeToRentChannelCommand& a, GetFeeToRentChannelCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToRentChannelCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToRentChannelCommand* New() const final {
    return CreateMaybeMessage<GetFeeToRentChannelCommand>(nullptr);
  }

  GetFeeToRentChannelCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToRentChannelCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToRentChannelCommand& from);
  void MergeFrom(const GetFeeToRentChannelCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToRentChannelCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetFeeToRentChannelCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kPayingCurrencyFieldNumber = 2,
    kCapacityFieldNumber = 3,
    kLifetimeSecondsFieldNumber = 4,
  };
  // string currency = 1;
  void clear_currency();
  const std::string& currency() const;
  void set_currency(const std::string& value);
  void set_currency(std::string&& value);
  void set_currency(const char* value);
  void set_currency(const char* value, size_t size);
  std::string* mutable_currency();
  std::string* release_currency();
  void set_allocated_currency(std::string* currency);
  private:
  const std::string& _internal_currency() const;
  void _internal_set_currency(const std::string& value);
  std::string* _internal_mutable_currency();
  public:

  // string payingCurrency = 2;
  void clear_payingcurrency();
  const std::string& payingcurrency() const;
  void set_payingcurrency(const std::string& value);
  void set_payingcurrency(std::string&& value);
  void set_payingcurrency(const char* value);
  void set_payingcurrency(const char* value, size_t size);
  std::string* mutable_payingcurrency();
  std::string* release_payingcurrency();
  void set_allocated_payingcurrency(std::string* payingcurrency);
  private:
  const std::string& _internal_payingcurrency() const;
  void _internal_set_payingcurrency(const std::string& value);
  std::string* _internal_mutable_payingcurrency();
  public:

  // .lssdrpc.BigInteger capacity = 3;
  bool has_capacity() const;
  private:
  bool _internal_has_capacity() const;
  public:
  void clear_capacity();
  const ::lssdrpc::BigInteger& capacity() const;
  ::lssdrpc::BigInteger* release_capacity();
  ::lssdrpc::BigInteger* mutable_capacity();
  void set_allocated_capacity(::lssdrpc::BigInteger* capacity);
  private:
  const ::lssdrpc::BigInteger& _internal_capacity() const;
  ::lssdrpc::BigInteger* _internal_mutable_capacity();
  public:

  // int64 lifetimeSeconds = 4;
  void clear_lifetimeseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds() const;
  void set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_lifetimeseconds() const;
  void _internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetFeeToRentChannelCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payingcurrency_;
  ::lssdrpc::BigInteger* capacity_;
  ::PROTOBUF_NAMESPACE_ID::int64 lifetimeseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// -------------------------------------------------------------------

class GetFeeToRentChannelResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lssdrpc.GetFeeToRentChannelResponse) */ {
 public:
  GetFeeToRentChannelResponse();
  virtual ~GetFeeToRentChannelResponse();

  GetFeeToRentChannelResponse(const GetFeeToRentChannelResponse& from);
  GetFeeToRentChannelResponse(GetFeeToRentChannelResponse&& from) noexcept
    : GetFeeToRentChannelResponse() {
    *this = ::std::move(from);
  }

  inline GetFeeToRentChannelResponse& operator=(const GetFeeToRentChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFeeToRentChannelResponse& operator=(GetFeeToRentChannelResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetFeeToRentChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetFeeToRentChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetFeeToRentChannelResponse*>(
               &_GetFeeToRentChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetFeeToRentChannelResponse& a, GetFeeToRentChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetFeeToRentChannelResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetFeeToRentChannelResponse* New() const final {
    return CreateMaybeMessage<GetFeeToRentChannelResponse>(nullptr);
  }

  GetFeeToRentChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetFeeToRentChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetFeeToRentChannelResponse& from);
  void MergeFrom(const GetFeeToRentChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetFeeToRentChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lssdrpc.GetFeeToRentChannelResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_lssdrpc_2eproto);
    return ::descriptor_table_lssdrpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeeFieldNumber = 1,
    kRentingFeeFieldNumber = 2,
    kOnChainFeesFieldNumber = 3,
  };
  // .lssdrpc.BigInteger fee = 1;
  bool has_fee() const;
  private:
  bool _internal_has_fee() const;
  public:
  void clear_fee();
  const ::lssdrpc::BigInteger& fee() const;
  ::lssdrpc::BigInteger* release_fee();
  ::lssdrpc::BigInteger* mutable_fee();
  void set_allocated_fee(::lssdrpc::BigInteger* fee);
  private:
  const ::lssdrpc::BigInteger& _internal_fee() const;
  ::lssdrpc::BigInteger* _internal_mutable_fee();
  public:

  // .lssdrpc.BigInteger rentingFee = 2;
  bool has_rentingfee() const;
  private:
  bool _internal_has_rentingfee() const;
  public:
  void clear_rentingfee();
  const ::lssdrpc::BigInteger& rentingfee() const;
  ::lssdrpc::BigInteger* release_rentingfee();
  ::lssdrpc::BigInteger* mutable_rentingfee();
  void set_allocated_rentingfee(::lssdrpc::BigInteger* rentingfee);
  private:
  const ::lssdrpc::BigInteger& _internal_rentingfee() const;
  ::lssdrpc::BigInteger* _internal_mutable_rentingfee();
  public:

  // .lssdrpc.BigInteger onChainFees = 3;
  bool has_onchainfees() const;
  private:
  bool _internal_has_onchainfees() const;
  public:
  void clear_onchainfees();
  const ::lssdrpc::BigInteger& onchainfees() const;
  ::lssdrpc::BigInteger* release_onchainfees();
  ::lssdrpc::BigInteger* mutable_onchainfees();
  void set_allocated_onchainfees(::lssdrpc::BigInteger* onchainfees);
  private:
  const ::lssdrpc::BigInteger& _internal_onchainfees() const;
  ::lssdrpc::BigInteger* _internal_mutable_onchainfees();
  public:

  // @@protoc_insertion_point(class_scope:lssdrpc.GetFeeToRentChannelResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::lssdrpc::BigInteger* fee_;
  ::lssdrpc::BigInteger* rentingfee_;
  ::lssdrpc::BigInteger* onchainfees_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_lssdrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BigInteger

// string value = 1;
inline void BigInteger::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& BigInteger::value() const {
  // @@protoc_insertion_point(field_get:lssdrpc.BigInteger.value)
  return _internal_value();
}
inline void BigInteger::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:lssdrpc.BigInteger.value)
}
inline std::string* BigInteger::mutable_value() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.BigInteger.value)
  return _internal_mutable_value();
}
inline const std::string& BigInteger::_internal_value() const {
  return value_.GetNoArena();
}
inline void BigInteger::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BigInteger::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.BigInteger.value)
}
inline void BigInteger::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.BigInteger.value)
}
inline void BigInteger::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.BigInteger.value)
}
inline std::string* BigInteger::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BigInteger::release_value() {
  // @@protoc_insertion_point(field_release:lssdrpc.BigInteger.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BigInteger::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.BigInteger.value)
}

// -------------------------------------------------------------------

// AddCurrencyRequest

// string currency = 1;
inline void AddCurrencyRequest::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AddCurrencyRequest::currency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.AddCurrencyRequest.currency)
  return _internal_currency();
}
inline void AddCurrencyRequest::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.AddCurrencyRequest.currency)
}
inline std::string* AddCurrencyRequest::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.AddCurrencyRequest.currency)
  return _internal_mutable_currency();
}
inline const std::string& AddCurrencyRequest::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void AddCurrencyRequest::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AddCurrencyRequest::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.AddCurrencyRequest.currency)
}
inline void AddCurrencyRequest::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.AddCurrencyRequest.currency)
}
inline void AddCurrencyRequest::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.AddCurrencyRequest.currency)
}
inline std::string* AddCurrencyRequest::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AddCurrencyRequest::release_currency() {
  // @@protoc_insertion_point(field_release:lssdrpc.AddCurrencyRequest.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AddCurrencyRequest::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.AddCurrencyRequest.currency)
}

// .lssdrpc.LndConfiguration lnd = 3;
inline bool AddCurrencyRequest::_internal_has_lnd() const {
  return conf_case() == kLnd;
}
inline bool AddCurrencyRequest::has_lnd() const {
  return _internal_has_lnd();
}
inline void AddCurrencyRequest::set_has_lnd() {
  _oneof_case_[0] = kLnd;
}
inline void AddCurrencyRequest::clear_lnd() {
  if (_internal_has_lnd()) {
    delete conf_.lnd_;
    clear_has_conf();
  }
}
inline ::lssdrpc::LndConfiguration* AddCurrencyRequest::release_lnd() {
  // @@protoc_insertion_point(field_release:lssdrpc.AddCurrencyRequest.lnd)
  if (_internal_has_lnd()) {
    clear_has_conf();
      ::lssdrpc::LndConfiguration* temp = conf_.lnd_;
    conf_.lnd_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::LndConfiguration& AddCurrencyRequest::_internal_lnd() const {
  return _internal_has_lnd()
      ? *conf_.lnd_
      : *reinterpret_cast< ::lssdrpc::LndConfiguration*>(&::lssdrpc::_LndConfiguration_default_instance_);
}
inline const ::lssdrpc::LndConfiguration& AddCurrencyRequest::lnd() const {
  // @@protoc_insertion_point(field_get:lssdrpc.AddCurrencyRequest.lnd)
  return _internal_lnd();
}
inline ::lssdrpc::LndConfiguration* AddCurrencyRequest::_internal_mutable_lnd() {
  if (!_internal_has_lnd()) {
    clear_conf();
    set_has_lnd();
    conf_.lnd_ = CreateMaybeMessage< ::lssdrpc::LndConfiguration >(
        GetArenaNoVirtual());
  }
  return conf_.lnd_;
}
inline ::lssdrpc::LndConfiguration* AddCurrencyRequest::mutable_lnd() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.AddCurrencyRequest.lnd)
  return _internal_mutable_lnd();
}

// .lssdrpc.ConnextConfiguration connext = 4;
inline bool AddCurrencyRequest::_internal_has_connext() const {
  return conf_case() == kConnext;
}
inline bool AddCurrencyRequest::has_connext() const {
  return _internal_has_connext();
}
inline void AddCurrencyRequest::set_has_connext() {
  _oneof_case_[0] = kConnext;
}
inline void AddCurrencyRequest::clear_connext() {
  if (_internal_has_connext()) {
    delete conf_.connext_;
    clear_has_conf();
  }
}
inline ::lssdrpc::ConnextConfiguration* AddCurrencyRequest::release_connext() {
  // @@protoc_insertion_point(field_release:lssdrpc.AddCurrencyRequest.connext)
  if (_internal_has_connext()) {
    clear_has_conf();
      ::lssdrpc::ConnextConfiguration* temp = conf_.connext_;
    conf_.connext_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::ConnextConfiguration& AddCurrencyRequest::_internal_connext() const {
  return _internal_has_connext()
      ? *conf_.connext_
      : *reinterpret_cast< ::lssdrpc::ConnextConfiguration*>(&::lssdrpc::_ConnextConfiguration_default_instance_);
}
inline const ::lssdrpc::ConnextConfiguration& AddCurrencyRequest::connext() const {
  // @@protoc_insertion_point(field_get:lssdrpc.AddCurrencyRequest.connext)
  return _internal_connext();
}
inline ::lssdrpc::ConnextConfiguration* AddCurrencyRequest::_internal_mutable_connext() {
  if (!_internal_has_connext()) {
    clear_conf();
    set_has_connext();
    conf_.connext_ = CreateMaybeMessage< ::lssdrpc::ConnextConfiguration >(
        GetArenaNoVirtual());
  }
  return conf_.connext_;
}
inline ::lssdrpc::ConnextConfiguration* AddCurrencyRequest::mutable_connext() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.AddCurrencyRequest.connext)
  return _internal_mutable_connext();
}

inline bool AddCurrencyRequest::has_conf() const {
  return conf_case() != CONF_NOT_SET;
}
inline void AddCurrencyRequest::clear_has_conf() {
  _oneof_case_[0] = CONF_NOT_SET;
}
inline AddCurrencyRequest::ConfCase AddCurrencyRequest::conf_case() const {
  return AddCurrencyRequest::ConfCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ConnextConfiguration

// string connextChannel = 1;
inline void ConnextConfiguration::clear_connextchannel() {
  connextchannel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextConfiguration::connextchannel() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ConnextConfiguration.connextChannel)
  return _internal_connextchannel();
}
inline void ConnextConfiguration::set_connextchannel(const std::string& value) {
  _internal_set_connextchannel(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ConnextConfiguration.connextChannel)
}
inline std::string* ConnextConfiguration::mutable_connextchannel() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ConnextConfiguration.connextChannel)
  return _internal_mutable_connextchannel();
}
inline const std::string& ConnextConfiguration::_internal_connextchannel() const {
  return connextchannel_.GetNoArena();
}
inline void ConnextConfiguration::_internal_set_connextchannel(const std::string& value) {
  
  connextchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextConfiguration::set_connextchannel(std::string&& value) {
  
  connextchannel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.ConnextConfiguration.connextChannel)
}
inline void ConnextConfiguration::set_connextchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connextchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.ConnextConfiguration.connextChannel)
}
inline void ConnextConfiguration::set_connextchannel(const char* value, size_t size) {
  
  connextchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.ConnextConfiguration.connextChannel)
}
inline std::string* ConnextConfiguration::_internal_mutable_connextchannel() {
  
  return connextchannel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextConfiguration::release_connextchannel() {
  // @@protoc_insertion_point(field_release:lssdrpc.ConnextConfiguration.connextChannel)
  
  return connextchannel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextConfiguration::set_allocated_connextchannel(std::string* connextchannel) {
  if (connextchannel != nullptr) {
    
  } else {
    
  }
  connextchannel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connextchannel);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.ConnextConfiguration.connextChannel)
}

// string tokenAddress = 2;
inline void ConnextConfiguration::clear_tokenaddress() {
  tokenaddress_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextConfiguration::tokenaddress() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ConnextConfiguration.tokenAddress)
  return _internal_tokenaddress();
}
inline void ConnextConfiguration::set_tokenaddress(const std::string& value) {
  _internal_set_tokenaddress(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ConnextConfiguration.tokenAddress)
}
inline std::string* ConnextConfiguration::mutable_tokenaddress() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ConnextConfiguration.tokenAddress)
  return _internal_mutable_tokenaddress();
}
inline const std::string& ConnextConfiguration::_internal_tokenaddress() const {
  return tokenaddress_.GetNoArena();
}
inline void ConnextConfiguration::_internal_set_tokenaddress(const std::string& value) {
  
  tokenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextConfiguration::set_tokenaddress(std::string&& value) {
  
  tokenaddress_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.ConnextConfiguration.tokenAddress)
}
inline void ConnextConfiguration::set_tokenaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tokenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.ConnextConfiguration.tokenAddress)
}
inline void ConnextConfiguration::set_tokenaddress(const char* value, size_t size) {
  
  tokenaddress_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.ConnextConfiguration.tokenAddress)
}
inline std::string* ConnextConfiguration::_internal_mutable_tokenaddress() {
  
  return tokenaddress_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextConfiguration::release_tokenaddress() {
  // @@protoc_insertion_point(field_release:lssdrpc.ConnextConfiguration.tokenAddress)
  
  return tokenaddress_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextConfiguration::set_allocated_tokenaddress(std::string* tokenaddress) {
  if (tokenaddress != nullptr) {
    
  } else {
    
  }
  tokenaddress_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tokenaddress);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.ConnextConfiguration.tokenAddress)
}

// string eventResolver = 3;
inline void ConnextConfiguration::clear_eventresolver() {
  eventresolver_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ConnextConfiguration::eventresolver() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ConnextConfiguration.eventResolver)
  return _internal_eventresolver();
}
inline void ConnextConfiguration::set_eventresolver(const std::string& value) {
  _internal_set_eventresolver(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ConnextConfiguration.eventResolver)
}
inline std::string* ConnextConfiguration::mutable_eventresolver() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ConnextConfiguration.eventResolver)
  return _internal_mutable_eventresolver();
}
inline const std::string& ConnextConfiguration::_internal_eventresolver() const {
  return eventresolver_.GetNoArena();
}
inline void ConnextConfiguration::_internal_set_eventresolver(const std::string& value) {
  
  eventresolver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ConnextConfiguration::set_eventresolver(std::string&& value) {
  
  eventresolver_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.ConnextConfiguration.eventResolver)
}
inline void ConnextConfiguration::set_eventresolver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  eventresolver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.ConnextConfiguration.eventResolver)
}
inline void ConnextConfiguration::set_eventresolver(const char* value, size_t size) {
  
  eventresolver_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.ConnextConfiguration.eventResolver)
}
inline std::string* ConnextConfiguration::_internal_mutable_eventresolver() {
  
  return eventresolver_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ConnextConfiguration::release_eventresolver() {
  // @@protoc_insertion_point(field_release:lssdrpc.ConnextConfiguration.eventResolver)
  
  return eventresolver_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ConnextConfiguration::set_allocated_eventresolver(std::string* eventresolver) {
  if (eventresolver != nullptr) {
    
  } else {
    
  }
  eventresolver_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eventresolver);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.ConnextConfiguration.eventResolver)
}

// -------------------------------------------------------------------

// LndConfiguration

// string lndChannel = 1;
inline void LndConfiguration::clear_lndchannel() {
  lndchannel_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LndConfiguration::lndchannel() const {
  // @@protoc_insertion_point(field_get:lssdrpc.LndConfiguration.lndChannel)
  return _internal_lndchannel();
}
inline void LndConfiguration::set_lndchannel(const std::string& value) {
  _internal_set_lndchannel(value);
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.lndChannel)
}
inline std::string* LndConfiguration::mutable_lndchannel() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.LndConfiguration.lndChannel)
  return _internal_mutable_lndchannel();
}
inline const std::string& LndConfiguration::_internal_lndchannel() const {
  return lndchannel_.GetNoArena();
}
inline void LndConfiguration::_internal_set_lndchannel(const std::string& value) {
  
  lndchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndConfiguration::set_lndchannel(std::string&& value) {
  
  lndchannel_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.LndConfiguration.lndChannel)
}
inline void LndConfiguration::set_lndchannel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  lndchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.LndConfiguration.lndChannel)
}
inline void LndConfiguration::set_lndchannel(const char* value, size_t size) {
  
  lndchannel_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.LndConfiguration.lndChannel)
}
inline std::string* LndConfiguration::_internal_mutable_lndchannel() {
  
  return lndchannel_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndConfiguration::release_lndchannel() {
  // @@protoc_insertion_point(field_release:lssdrpc.LndConfiguration.lndChannel)
  
  return lndchannel_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LndConfiguration::set_allocated_lndchannel(std::string* lndchannel) {
  if (lndchannel != nullptr) {
    
  } else {
    
  }
  lndchannel_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lndchannel);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.LndConfiguration.lndChannel)
}

// string certPath = 2;
inline bool LndConfiguration::_internal_has_certpath() const {
  return tlsCert_case() == kCertPath;
}
inline void LndConfiguration::set_has_certpath() {
  _oneof_case_[0] = kCertPath;
}
inline void LndConfiguration::clear_certpath() {
  if (_internal_has_certpath()) {
    tlsCert_.certpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_tlsCert();
  }
}
inline const std::string& LndConfiguration::certpath() const {
  // @@protoc_insertion_point(field_get:lssdrpc.LndConfiguration.certPath)
  return _internal_certpath();
}
inline void LndConfiguration::set_certpath(const std::string& value) {
  _internal_set_certpath(value);
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.certPath)
}
inline std::string* LndConfiguration::mutable_certpath() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.LndConfiguration.certPath)
  return _internal_mutable_certpath();
}
inline const std::string& LndConfiguration::_internal_certpath() const {
  if (_internal_has_certpath()) {
    return tlsCert_.certpath_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LndConfiguration::_internal_set_certpath(const std::string& value) {
  if (!_internal_has_certpath()) {
    clear_tlsCert();
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.certpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndConfiguration::set_certpath(std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.certPath)
  if (!_internal_has_certpath()) {
    clear_tlsCert();
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.certpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.LndConfiguration.certPath)
}
inline void LndConfiguration::set_certpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_certpath()) {
    clear_tlsCert();
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.certpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.LndConfiguration.certPath)
}
inline void LndConfiguration::set_certpath(const char* value, size_t size) {
  if (!_internal_has_certpath()) {
    clear_tlsCert();
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.certpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.LndConfiguration.certPath)
}
inline std::string* LndConfiguration::_internal_mutable_certpath() {
  if (!_internal_has_certpath()) {
    clear_tlsCert();
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return tlsCert_.certpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndConfiguration::release_certpath() {
  // @@protoc_insertion_point(field_release:lssdrpc.LndConfiguration.certPath)
  if (_internal_has_certpath()) {
    clear_has_tlsCert();
    return tlsCert_.certpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LndConfiguration::set_allocated_certpath(std::string* certpath) {
  if (has_tlsCert()) {
    clear_tlsCert();
  }
  if (certpath != nullptr) {
    set_has_certpath();
    tlsCert_.certpath_.UnsafeSetDefault(certpath);
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.LndConfiguration.certPath)
}

// string rawCert = 3;
inline bool LndConfiguration::_internal_has_rawcert() const {
  return tlsCert_case() == kRawCert;
}
inline void LndConfiguration::set_has_rawcert() {
  _oneof_case_[0] = kRawCert;
}
inline void LndConfiguration::clear_rawcert() {
  if (_internal_has_rawcert()) {
    tlsCert_.rawcert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_tlsCert();
  }
}
inline const std::string& LndConfiguration::rawcert() const {
  // @@protoc_insertion_point(field_get:lssdrpc.LndConfiguration.rawCert)
  return _internal_rawcert();
}
inline void LndConfiguration::set_rawcert(const std::string& value) {
  _internal_set_rawcert(value);
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.rawCert)
}
inline std::string* LndConfiguration::mutable_rawcert() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.LndConfiguration.rawCert)
  return _internal_mutable_rawcert();
}
inline const std::string& LndConfiguration::_internal_rawcert() const {
  if (_internal_has_rawcert()) {
    return tlsCert_.rawcert_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LndConfiguration::_internal_set_rawcert(const std::string& value) {
  if (!_internal_has_rawcert()) {
    clear_tlsCert();
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.rawcert_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndConfiguration::set_rawcert(std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.rawCert)
  if (!_internal_has_rawcert()) {
    clear_tlsCert();
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.rawcert_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.LndConfiguration.rawCert)
}
inline void LndConfiguration::set_rawcert(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_rawcert()) {
    clear_tlsCert();
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.rawcert_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.LndConfiguration.rawCert)
}
inline void LndConfiguration::set_rawcert(const char* value, size_t size) {
  if (!_internal_has_rawcert()) {
    clear_tlsCert();
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  tlsCert_.rawcert_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.LndConfiguration.rawCert)
}
inline std::string* LndConfiguration::_internal_mutable_rawcert() {
  if (!_internal_has_rawcert()) {
    clear_tlsCert();
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return tlsCert_.rawcert_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndConfiguration::release_rawcert() {
  // @@protoc_insertion_point(field_release:lssdrpc.LndConfiguration.rawCert)
  if (_internal_has_rawcert()) {
    clear_has_tlsCert();
    return tlsCert_.rawcert_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LndConfiguration::set_allocated_rawcert(std::string* rawcert) {
  if (has_tlsCert()) {
    clear_tlsCert();
  }
  if (rawcert != nullptr) {
    set_has_rawcert();
    tlsCert_.rawcert_.UnsafeSetDefault(rawcert);
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.LndConfiguration.rawCert)
}

// string macaroon_path = 4;
inline bool LndConfiguration::_internal_has_macaroon_path() const {
  return macaroon_case() == kMacaroonPath;
}
inline void LndConfiguration::set_has_macaroon_path() {
  _oneof_case_[1] = kMacaroonPath;
}
inline void LndConfiguration::clear_macaroon_path() {
  if (_internal_has_macaroon_path()) {
    macaroon_.macaroon_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_macaroon();
  }
}
inline const std::string& LndConfiguration::macaroon_path() const {
  // @@protoc_insertion_point(field_get:lssdrpc.LndConfiguration.macaroon_path)
  return _internal_macaroon_path();
}
inline void LndConfiguration::set_macaroon_path(const std::string& value) {
  _internal_set_macaroon_path(value);
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.macaroon_path)
}
inline std::string* LndConfiguration::mutable_macaroon_path() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.LndConfiguration.macaroon_path)
  return _internal_mutable_macaroon_path();
}
inline const std::string& LndConfiguration::_internal_macaroon_path() const {
  if (_internal_has_macaroon_path()) {
    return macaroon_.macaroon_path_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LndConfiguration::_internal_set_macaroon_path(const std::string& value) {
  if (!_internal_has_macaroon_path()) {
    clear_macaroon();
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.macaroon_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndConfiguration::set_macaroon_path(std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.macaroon_path)
  if (!_internal_has_macaroon_path()) {
    clear_macaroon();
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.macaroon_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.LndConfiguration.macaroon_path)
}
inline void LndConfiguration::set_macaroon_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_macaroon_path()) {
    clear_macaroon();
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.macaroon_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.LndConfiguration.macaroon_path)
}
inline void LndConfiguration::set_macaroon_path(const char* value, size_t size) {
  if (!_internal_has_macaroon_path()) {
    clear_macaroon();
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.macaroon_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.LndConfiguration.macaroon_path)
}
inline std::string* LndConfiguration::_internal_mutable_macaroon_path() {
  if (!_internal_has_macaroon_path()) {
    clear_macaroon();
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return macaroon_.macaroon_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndConfiguration::release_macaroon_path() {
  // @@protoc_insertion_point(field_release:lssdrpc.LndConfiguration.macaroon_path)
  if (_internal_has_macaroon_path()) {
    clear_has_macaroon();
    return macaroon_.macaroon_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LndConfiguration::set_allocated_macaroon_path(std::string* macaroon_path) {
  if (has_macaroon()) {
    clear_macaroon();
  }
  if (macaroon_path != nullptr) {
    set_has_macaroon_path();
    macaroon_.macaroon_path_.UnsafeSetDefault(macaroon_path);
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.LndConfiguration.macaroon_path)
}

// string raw_macaroon = 5;
inline bool LndConfiguration::_internal_has_raw_macaroon() const {
  return macaroon_case() == kRawMacaroon;
}
inline void LndConfiguration::set_has_raw_macaroon() {
  _oneof_case_[1] = kRawMacaroon;
}
inline void LndConfiguration::clear_raw_macaroon() {
  if (_internal_has_raw_macaroon()) {
    macaroon_.raw_macaroon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_macaroon();
  }
}
inline const std::string& LndConfiguration::raw_macaroon() const {
  // @@protoc_insertion_point(field_get:lssdrpc.LndConfiguration.raw_macaroon)
  return _internal_raw_macaroon();
}
inline void LndConfiguration::set_raw_macaroon(const std::string& value) {
  _internal_set_raw_macaroon(value);
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.raw_macaroon)
}
inline std::string* LndConfiguration::mutable_raw_macaroon() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.LndConfiguration.raw_macaroon)
  return _internal_mutable_raw_macaroon();
}
inline const std::string& LndConfiguration::_internal_raw_macaroon() const {
  if (_internal_has_raw_macaroon()) {
    return macaroon_.raw_macaroon_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LndConfiguration::_internal_set_raw_macaroon(const std::string& value) {
  if (!_internal_has_raw_macaroon()) {
    clear_macaroon();
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.raw_macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LndConfiguration::set_raw_macaroon(std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.LndConfiguration.raw_macaroon)
  if (!_internal_has_raw_macaroon()) {
    clear_macaroon();
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.raw_macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.LndConfiguration.raw_macaroon)
}
inline void LndConfiguration::set_raw_macaroon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw_macaroon()) {
    clear_macaroon();
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.raw_macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.LndConfiguration.raw_macaroon)
}
inline void LndConfiguration::set_raw_macaroon(const char* value, size_t size) {
  if (!_internal_has_raw_macaroon()) {
    clear_macaroon();
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  macaroon_.raw_macaroon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.LndConfiguration.raw_macaroon)
}
inline std::string* LndConfiguration::_internal_mutable_raw_macaroon() {
  if (!_internal_has_raw_macaroon()) {
    clear_macaroon();
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return macaroon_.raw_macaroon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LndConfiguration::release_raw_macaroon() {
  // @@protoc_insertion_point(field_release:lssdrpc.LndConfiguration.raw_macaroon)
  if (_internal_has_raw_macaroon()) {
    clear_has_macaroon();
    return macaroon_.raw_macaroon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LndConfiguration::set_allocated_raw_macaroon(std::string* raw_macaroon) {
  if (has_macaroon()) {
    clear_macaroon();
  }
  if (raw_macaroon != nullptr) {
    set_has_raw_macaroon();
    macaroon_.raw_macaroon_.UnsafeSetDefault(raw_macaroon);
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.LndConfiguration.raw_macaroon)
}

inline bool LndConfiguration::has_tlsCert() const {
  return tlsCert_case() != TLSCERT_NOT_SET;
}
inline void LndConfiguration::clear_has_tlsCert() {
  _oneof_case_[0] = TLSCERT_NOT_SET;
}
inline bool LndConfiguration::has_macaroon() const {
  return macaroon_case() != MACAROON_NOT_SET;
}
inline void LndConfiguration::clear_has_macaroon() {
  _oneof_case_[1] = MACAROON_NOT_SET;
}
inline LndConfiguration::TlsCertCase LndConfiguration::tlsCert_case() const {
  return LndConfiguration::TlsCertCase(_oneof_case_[0]);
}
inline LndConfiguration::MacaroonCase LndConfiguration::macaroon_case() const {
  return LndConfiguration::MacaroonCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// AddCurrencyResponse

// -------------------------------------------------------------------

// GetAddedCurrenciesRequest

// -------------------------------------------------------------------

// GetAddedCurrenciesResponse

// repeated string currency = 1;
inline int GetAddedCurrenciesResponse::_internal_currency_size() const {
  return currency_.size();
}
inline int GetAddedCurrenciesResponse::currency_size() const {
  return _internal_currency_size();
}
inline void GetAddedCurrenciesResponse::clear_currency() {
  currency_.Clear();
}
inline std::string* GetAddedCurrenciesResponse::add_currency() {
  // @@protoc_insertion_point(field_add_mutable:lssdrpc.GetAddedCurrenciesResponse.currency)
  return _internal_add_currency();
}
inline const std::string& GetAddedCurrenciesResponse::_internal_currency(int index) const {
  return currency_.Get(index);
}
inline const std::string& GetAddedCurrenciesResponse::currency(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetAddedCurrenciesResponse.currency)
  return _internal_currency(index);
}
inline std::string* GetAddedCurrenciesResponse::mutable_currency(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetAddedCurrenciesResponse.currency)
  return currency_.Mutable(index);
}
inline void GetAddedCurrenciesResponse::set_currency(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.GetAddedCurrenciesResponse.currency)
  currency_.Mutable(index)->assign(value);
}
inline void GetAddedCurrenciesResponse::set_currency(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.GetAddedCurrenciesResponse.currency)
  currency_.Mutable(index)->assign(std::move(value));
}
inline void GetAddedCurrenciesResponse::set_currency(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  currency_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline void GetAddedCurrenciesResponse::set_currency(int index, const char* value, size_t size) {
  currency_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline std::string* GetAddedCurrenciesResponse::_internal_add_currency() {
  return currency_.Add();
}
inline void GetAddedCurrenciesResponse::add_currency(const std::string& value) {
  currency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline void GetAddedCurrenciesResponse::add_currency(std::string&& value) {
  currency_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline void GetAddedCurrenciesResponse::add_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  currency_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline void GetAddedCurrenciesResponse::add_currency(const char* value, size_t size) {
  currency_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lssdrpc.GetAddedCurrenciesResponse.currency)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetAddedCurrenciesResponse::currency() const {
  // @@protoc_insertion_point(field_list:lssdrpc.GetAddedCurrenciesResponse.currency)
  return currency_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetAddedCurrenciesResponse::mutable_currency() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.GetAddedCurrenciesResponse.currency)
  return &currency_;
}

// -------------------------------------------------------------------

// EnableTradingPairRequest

// string pairId = 1;
inline void EnableTradingPairRequest::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EnableTradingPairRequest::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.EnableTradingPairRequest.pairId)
  return _internal_pairid();
}
inline void EnableTradingPairRequest::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.EnableTradingPairRequest.pairId)
}
inline std::string* EnableTradingPairRequest::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.EnableTradingPairRequest.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& EnableTradingPairRequest::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void EnableTradingPairRequest::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EnableTradingPairRequest::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.EnableTradingPairRequest.pairId)
}
inline void EnableTradingPairRequest::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.EnableTradingPairRequest.pairId)
}
inline void EnableTradingPairRequest::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.EnableTradingPairRequest.pairId)
}
inline std::string* EnableTradingPairRequest::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EnableTradingPairRequest::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.EnableTradingPairRequest.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EnableTradingPairRequest::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.EnableTradingPairRequest.pairId)
}

// -------------------------------------------------------------------

// EnableTradingPairResponse

// -------------------------------------------------------------------

// GetActiveTradingPairRequest

// -------------------------------------------------------------------

// GetActiveTradingPairResponse

// repeated string pairId = 1;
inline int GetActiveTradingPairResponse::_internal_pairid_size() const {
  return pairid_.size();
}
inline int GetActiveTradingPairResponse::pairid_size() const {
  return _internal_pairid_size();
}
inline void GetActiveTradingPairResponse::clear_pairid() {
  pairid_.Clear();
}
inline std::string* GetActiveTradingPairResponse::add_pairid() {
  // @@protoc_insertion_point(field_add_mutable:lssdrpc.GetActiveTradingPairResponse.pairId)
  return _internal_add_pairid();
}
inline const std::string& GetActiveTradingPairResponse::_internal_pairid(int index) const {
  return pairid_.Get(index);
}
inline const std::string& GetActiveTradingPairResponse::pairid(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetActiveTradingPairResponse.pairId)
  return _internal_pairid(index);
}
inline std::string* GetActiveTradingPairResponse::mutable_pairid(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetActiveTradingPairResponse.pairId)
  return pairid_.Mutable(index);
}
inline void GetActiveTradingPairResponse::set_pairid(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.GetActiveTradingPairResponse.pairId)
  pairid_.Mutable(index)->assign(value);
}
inline void GetActiveTradingPairResponse::set_pairid(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.GetActiveTradingPairResponse.pairId)
  pairid_.Mutable(index)->assign(std::move(value));
}
inline void GetActiveTradingPairResponse::set_pairid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pairid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline void GetActiveTradingPairResponse::set_pairid(int index, const char* value, size_t size) {
  pairid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline std::string* GetActiveTradingPairResponse::_internal_add_pairid() {
  return pairid_.Add();
}
inline void GetActiveTradingPairResponse::add_pairid(const std::string& value) {
  pairid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline void GetActiveTradingPairResponse::add_pairid(std::string&& value) {
  pairid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline void GetActiveTradingPairResponse::add_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pairid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline void GetActiveTradingPairResponse::add_pairid(const char* value, size_t size) {
  pairid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:lssdrpc.GetActiveTradingPairResponse.pairId)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetActiveTradingPairResponse::pairid() const {
  // @@protoc_insertion_point(field_list:lssdrpc.GetActiveTradingPairResponse.pairId)
  return pairid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetActiveTradingPairResponse::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.GetActiveTradingPairResponse.pairId)
  return &pairid_;
}

// -------------------------------------------------------------------

// SubscribeOrderbookStateRequest

// -------------------------------------------------------------------

// OrderbookState

// .lssdrpc.OrderbookState.State state = 1;
inline void OrderbookState::clear_state() {
  state_ = 0;
}
inline ::lssdrpc::OrderbookState_State OrderbookState::_internal_state() const {
  return static_cast< ::lssdrpc::OrderbookState_State >(state_);
}
inline ::lssdrpc::OrderbookState_State OrderbookState::state() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderbookState.state)
  return _internal_state();
}
inline void OrderbookState::_internal_set_state(::lssdrpc::OrderbookState_State value) {
  
  state_ = value;
}
inline void OrderbookState::set_state(::lssdrpc::OrderbookState_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OrderbookState.state)
}

// -------------------------------------------------------------------

// ListOrdersRequest

// string pairId = 1;
inline void ListOrdersRequest::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListOrdersRequest::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOrdersRequest.pairId)
  return _internal_pairid();
}
inline void ListOrdersRequest::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ListOrdersRequest.pairId)
}
inline std::string* ListOrdersRequest::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ListOrdersRequest.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& ListOrdersRequest::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void ListOrdersRequest::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListOrdersRequest::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.ListOrdersRequest.pairId)
}
inline void ListOrdersRequest::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.ListOrdersRequest.pairId)
}
inline void ListOrdersRequest::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.ListOrdersRequest.pairId)
}
inline std::string* ListOrdersRequest::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListOrdersRequest::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.ListOrdersRequest.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListOrdersRequest::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.ListOrdersRequest.pairId)
}

// int64 lastKnownPrice = 2;
inline void ListOrdersRequest::clear_lastknownprice() {
  lastknownprice_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListOrdersRequest::_internal_lastknownprice() const {
  return lastknownprice_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ListOrdersRequest::lastknownprice() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOrdersRequest.lastKnownPrice)
  return _internal_lastknownprice();
}
inline void ListOrdersRequest::_internal_set_lastknownprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lastknownprice_ = value;
}
inline void ListOrdersRequest::set_lastknownprice(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lastknownprice(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ListOrdersRequest.lastKnownPrice)
}

// uint32 limit = 3;
inline void ListOrdersRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListOrdersRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListOrdersRequest::limit() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOrdersRequest.limit)
  return _internal_limit();
}
inline void ListOrdersRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void ListOrdersRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ListOrdersRequest.limit)
}

// -------------------------------------------------------------------

// ListOrdersResponse

// repeated .lssdrpc.OrderSummary orders = 1;
inline int ListOrdersResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int ListOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void ListOrdersResponse::clear_orders() {
  orders_.Clear();
}
inline ::lssdrpc::OrderSummary* ListOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ListOrdersResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderSummary >*
ListOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.ListOrdersResponse.orders)
  return &orders_;
}
inline const ::lssdrpc::OrderSummary& ListOrdersResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::lssdrpc::OrderSummary& ListOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::lssdrpc::OrderSummary* ListOrdersResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::lssdrpc::OrderSummary* ListOrdersResponse::add_orders() {
  // @@protoc_insertion_point(field_add:lssdrpc.ListOrdersResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderSummary >&
ListOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:lssdrpc.ListOrdersResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// ListOwnOrdersRequest

// string pairId = 1;
inline void ListOwnOrdersRequest::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ListOwnOrdersRequest::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOwnOrdersRequest.pairId)
  return _internal_pairid();
}
inline void ListOwnOrdersRequest::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.ListOwnOrdersRequest.pairId)
}
inline std::string* ListOwnOrdersRequest::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ListOwnOrdersRequest.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& ListOwnOrdersRequest::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void ListOwnOrdersRequest::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ListOwnOrdersRequest::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.ListOwnOrdersRequest.pairId)
}
inline void ListOwnOrdersRequest::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.ListOwnOrdersRequest.pairId)
}
inline void ListOwnOrdersRequest::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.ListOwnOrdersRequest.pairId)
}
inline std::string* ListOwnOrdersRequest::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ListOwnOrdersRequest::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.ListOwnOrdersRequest.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ListOwnOrdersRequest::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.ListOwnOrdersRequest.pairId)
}

// -------------------------------------------------------------------

// ListOwnOrdersResponse

// repeated .lssdrpc.Order orders = 1;
inline int ListOwnOrdersResponse::_internal_orders_size() const {
  return orders_.size();
}
inline int ListOwnOrdersResponse::orders_size() const {
  return _internal_orders_size();
}
inline void ListOwnOrdersResponse::clear_orders() {
  orders_.Clear();
}
inline ::lssdrpc::Order* ListOwnOrdersResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.ListOwnOrdersResponse.orders)
  return orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::Order >*
ListOwnOrdersResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.ListOwnOrdersResponse.orders)
  return &orders_;
}
inline const ::lssdrpc::Order& ListOwnOrdersResponse::_internal_orders(int index) const {
  return orders_.Get(index);
}
inline const ::lssdrpc::Order& ListOwnOrdersResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.ListOwnOrdersResponse.orders)
  return _internal_orders(index);
}
inline ::lssdrpc::Order* ListOwnOrdersResponse::_internal_add_orders() {
  return orders_.Add();
}
inline ::lssdrpc::Order* ListOwnOrdersResponse::add_orders() {
  // @@protoc_insertion_point(field_add:lssdrpc.ListOwnOrdersResponse.orders)
  return _internal_add_orders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::Order >&
ListOwnOrdersResponse::orders() const {
  // @@protoc_insertion_point(field_list:lssdrpc.ListOwnOrdersResponse.orders)
  return orders_;
}

// -------------------------------------------------------------------

// PlaceOrderRequest

// string pairId = 1;
inline void PlaceOrderRequest::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& PlaceOrderRequest::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderRequest.pairId)
  return _internal_pairid();
}
inline void PlaceOrderRequest::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.PlaceOrderRequest.pairId)
}
inline std::string* PlaceOrderRequest::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderRequest.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& PlaceOrderRequest::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void PlaceOrderRequest::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PlaceOrderRequest::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.PlaceOrderRequest.pairId)
}
inline void PlaceOrderRequest::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.PlaceOrderRequest.pairId)
}
inline void PlaceOrderRequest::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.PlaceOrderRequest.pairId)
}
inline std::string* PlaceOrderRequest::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PlaceOrderRequest::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderRequest.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PlaceOrderRequest::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderRequest.pairId)
}

// .lssdrpc.OrderSide side = 2;
inline void PlaceOrderRequest::clear_side() {
  side_ = 0;
}
inline ::lssdrpc::OrderSide PlaceOrderRequest::_internal_side() const {
  return static_cast< ::lssdrpc::OrderSide >(side_);
}
inline ::lssdrpc::OrderSide PlaceOrderRequest::side() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderRequest.side)
  return _internal_side();
}
inline void PlaceOrderRequest::_internal_set_side(::lssdrpc::OrderSide value) {
  
  side_ = value;
}
inline void PlaceOrderRequest::set_side(::lssdrpc::OrderSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:lssdrpc.PlaceOrderRequest.side)
}

// .lssdrpc.BigInteger funds = 3;
inline bool PlaceOrderRequest::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool PlaceOrderRequest::has_funds() const {
  return _internal_has_funds();
}
inline void PlaceOrderRequest::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& PlaceOrderRequest::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& PlaceOrderRequest::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderRequest.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderRequest.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderRequest.funds)
  return _internal_mutable_funds();
}
inline void PlaceOrderRequest::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderRequest.funds)
}

// .lssdrpc.BigInteger price = 4;
inline bool PlaceOrderRequest::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool PlaceOrderRequest::has_price() const {
  return _internal_has_price();
}
inline void PlaceOrderRequest::clear_price() {
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::lssdrpc::BigInteger& PlaceOrderRequest::_internal_price() const {
  const ::lssdrpc::BigInteger* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& PlaceOrderRequest::price() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderRequest.price)
  return _internal_price();
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::release_price() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderRequest.price)
  
  ::lssdrpc::BigInteger* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    price_ = p;
  }
  return price_;
}
inline ::lssdrpc::BigInteger* PlaceOrderRequest::mutable_price() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderRequest.price)
  return _internal_mutable_price();
}
inline void PlaceOrderRequest::set_allocated_price(::lssdrpc::BigInteger* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.PlaceOrderRequest.price)
}

// -------------------------------------------------------------------

// PlaceOrderResponse

// .lssdrpc.SwapSuccess swapSuccess = 1;
inline bool PlaceOrderResponse::_internal_has_swapsuccess() const {
  return outcome_case() == kSwapSuccess;
}
inline bool PlaceOrderResponse::has_swapsuccess() const {
  return _internal_has_swapsuccess();
}
inline void PlaceOrderResponse::set_has_swapsuccess() {
  _oneof_case_[0] = kSwapSuccess;
}
inline void PlaceOrderResponse::clear_swapsuccess() {
  if (_internal_has_swapsuccess()) {
    delete outcome_.swapsuccess_;
    clear_has_outcome();
  }
}
inline ::lssdrpc::SwapSuccess* PlaceOrderResponse::release_swapsuccess() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderResponse.swapSuccess)
  if (_internal_has_swapsuccess()) {
    clear_has_outcome();
      ::lssdrpc::SwapSuccess* temp = outcome_.swapsuccess_;
    outcome_.swapsuccess_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::SwapSuccess& PlaceOrderResponse::_internal_swapsuccess() const {
  return _internal_has_swapsuccess()
      ? *outcome_.swapsuccess_
      : *reinterpret_cast< ::lssdrpc::SwapSuccess*>(&::lssdrpc::_SwapSuccess_default_instance_);
}
inline const ::lssdrpc::SwapSuccess& PlaceOrderResponse::swapsuccess() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderResponse.swapSuccess)
  return _internal_swapsuccess();
}
inline ::lssdrpc::SwapSuccess* PlaceOrderResponse::_internal_mutable_swapsuccess() {
  if (!_internal_has_swapsuccess()) {
    clear_outcome();
    set_has_swapsuccess();
    outcome_.swapsuccess_ = CreateMaybeMessage< ::lssdrpc::SwapSuccess >(
        GetArenaNoVirtual());
  }
  return outcome_.swapsuccess_;
}
inline ::lssdrpc::SwapSuccess* PlaceOrderResponse::mutable_swapsuccess() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderResponse.swapSuccess)
  return _internal_mutable_swapsuccess();
}

// .lssdrpc.Order order = 2;
inline bool PlaceOrderResponse::_internal_has_order() const {
  return outcome_case() == kOrder;
}
inline bool PlaceOrderResponse::has_order() const {
  return _internal_has_order();
}
inline void PlaceOrderResponse::set_has_order() {
  _oneof_case_[0] = kOrder;
}
inline void PlaceOrderResponse::clear_order() {
  if (_internal_has_order()) {
    delete outcome_.order_;
    clear_has_outcome();
  }
}
inline ::lssdrpc::Order* PlaceOrderResponse::release_order() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderResponse.order)
  if (_internal_has_order()) {
    clear_has_outcome();
      ::lssdrpc::Order* temp = outcome_.order_;
    outcome_.order_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::Order& PlaceOrderResponse::_internal_order() const {
  return _internal_has_order()
      ? *outcome_.order_
      : *reinterpret_cast< ::lssdrpc::Order*>(&::lssdrpc::_Order_default_instance_);
}
inline const ::lssdrpc::Order& PlaceOrderResponse::order() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderResponse.order)
  return _internal_order();
}
inline ::lssdrpc::Order* PlaceOrderResponse::_internal_mutable_order() {
  if (!_internal_has_order()) {
    clear_outcome();
    set_has_order();
    outcome_.order_ = CreateMaybeMessage< ::lssdrpc::Order >(
        GetArenaNoVirtual());
  }
  return outcome_.order_;
}
inline ::lssdrpc::Order* PlaceOrderResponse::mutable_order() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderResponse.order)
  return _internal_mutable_order();
}

// .lssdrpc.PlaceOrderFailure failure = 3;
inline bool PlaceOrderResponse::_internal_has_failure() const {
  return outcome_case() == kFailure;
}
inline bool PlaceOrderResponse::has_failure() const {
  return _internal_has_failure();
}
inline void PlaceOrderResponse::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline void PlaceOrderResponse::clear_failure() {
  if (_internal_has_failure()) {
    delete outcome_.failure_;
    clear_has_outcome();
  }
}
inline ::lssdrpc::PlaceOrderFailure* PlaceOrderResponse::release_failure() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderResponse.failure)
  if (_internal_has_failure()) {
    clear_has_outcome();
      ::lssdrpc::PlaceOrderFailure* temp = outcome_.failure_;
    outcome_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::PlaceOrderFailure& PlaceOrderResponse::_internal_failure() const {
  return _internal_has_failure()
      ? *outcome_.failure_
      : *reinterpret_cast< ::lssdrpc::PlaceOrderFailure*>(&::lssdrpc::_PlaceOrderFailure_default_instance_);
}
inline const ::lssdrpc::PlaceOrderFailure& PlaceOrderResponse::failure() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderResponse.failure)
  return _internal_failure();
}
inline ::lssdrpc::PlaceOrderFailure* PlaceOrderResponse::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_outcome();
    set_has_failure();
    outcome_.failure_ = CreateMaybeMessage< ::lssdrpc::PlaceOrderFailure >(
        GetArenaNoVirtual());
  }
  return outcome_.failure_;
}
inline ::lssdrpc::PlaceOrderFailure* PlaceOrderResponse::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderResponse.failure)
  return _internal_mutable_failure();
}

inline bool PlaceOrderResponse::has_outcome() const {
  return outcome_case() != OUTCOME_NOT_SET;
}
inline void PlaceOrderResponse::clear_has_outcome() {
  _oneof_case_[0] = OUTCOME_NOT_SET;
}
inline PlaceOrderResponse::OutcomeCase PlaceOrderResponse::outcome_case() const {
  return PlaceOrderResponse::OutcomeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderbookFailure

// string pairId = 1;
inline void OrderbookFailure::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrderbookFailure::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderbookFailure.pairId)
  return _internal_pairid();
}
inline void OrderbookFailure::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OrderbookFailure.pairId)
}
inline std::string* OrderbookFailure::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderbookFailure.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& OrderbookFailure::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void OrderbookFailure::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrderbookFailure::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.OrderbookFailure.pairId)
}
inline void OrderbookFailure::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.OrderbookFailure.pairId)
}
inline void OrderbookFailure::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.OrderbookFailure.pairId)
}
inline std::string* OrderbookFailure::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrderbookFailure::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderbookFailure.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrderbookFailure::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderbookFailure.pairId)
}

// .lssdrpc.BigInteger funds = 2;
inline bool OrderbookFailure::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool OrderbookFailure::has_funds() const {
  return _internal_has_funds();
}
inline void OrderbookFailure::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& OrderbookFailure::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& OrderbookFailure::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderbookFailure.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* OrderbookFailure::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderbookFailure.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* OrderbookFailure::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* OrderbookFailure::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderbookFailure.funds)
  return _internal_mutable_funds();
}
inline void OrderbookFailure::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderbookFailure.funds)
}

// string failureReason = 3;
inline void OrderbookFailure::clear_failurereason() {
  failurereason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrderbookFailure::failurereason() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderbookFailure.failureReason)
  return _internal_failurereason();
}
inline void OrderbookFailure::set_failurereason(const std::string& value) {
  _internal_set_failurereason(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OrderbookFailure.failureReason)
}
inline std::string* OrderbookFailure::mutable_failurereason() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderbookFailure.failureReason)
  return _internal_mutable_failurereason();
}
inline const std::string& OrderbookFailure::_internal_failurereason() const {
  return failurereason_.GetNoArena();
}
inline void OrderbookFailure::_internal_set_failurereason(const std::string& value) {
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrderbookFailure::set_failurereason(std::string&& value) {
  
  failurereason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.OrderbookFailure.failureReason)
}
inline void OrderbookFailure::set_failurereason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.OrderbookFailure.failureReason)
}
inline void OrderbookFailure::set_failurereason(const char* value, size_t size) {
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.OrderbookFailure.failureReason)
}
inline std::string* OrderbookFailure::_internal_mutable_failurereason() {
  
  return failurereason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrderbookFailure::release_failurereason() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderbookFailure.failureReason)
  
  return failurereason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrderbookFailure::set_allocated_failurereason(std::string* failurereason) {
  if (failurereason != nullptr) {
    
  } else {
    
  }
  failurereason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failurereason);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderbookFailure.failureReason)
}

// .lssdrpc.BigInteger requiredFee = 4;
inline bool OrderbookFailure::_internal_has_requiredfee() const {
  return this != internal_default_instance() && requiredfee_ != nullptr;
}
inline bool OrderbookFailure::has_requiredfee() const {
  return _internal_has_requiredfee();
}
inline void OrderbookFailure::clear_requiredfee() {
  if (GetArenaNoVirtual() == nullptr && requiredfee_ != nullptr) {
    delete requiredfee_;
  }
  requiredfee_ = nullptr;
}
inline const ::lssdrpc::BigInteger& OrderbookFailure::_internal_requiredfee() const {
  const ::lssdrpc::BigInteger* p = requiredfee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& OrderbookFailure::requiredfee() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderbookFailure.requiredFee)
  return _internal_requiredfee();
}
inline ::lssdrpc::BigInteger* OrderbookFailure::release_requiredfee() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderbookFailure.requiredFee)
  
  ::lssdrpc::BigInteger* temp = requiredfee_;
  requiredfee_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* OrderbookFailure::_internal_mutable_requiredfee() {
  
  if (requiredfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    requiredfee_ = p;
  }
  return requiredfee_;
}
inline ::lssdrpc::BigInteger* OrderbookFailure::mutable_requiredfee() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderbookFailure.requiredFee)
  return _internal_mutable_requiredfee();
}
inline void OrderbookFailure::set_allocated_requiredfee(::lssdrpc::BigInteger* requiredfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete requiredfee_;
  }
  if (requiredfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      requiredfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requiredfee, submessage_arena);
    }
    
  } else {
    
  }
  requiredfee_ = requiredfee;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderbookFailure.requiredFee)
}

// -------------------------------------------------------------------

// PlaceOrderFailure

// .lssdrpc.SwapFailure swapFailure = 1;
inline bool PlaceOrderFailure::_internal_has_swapfailure() const {
  return failure_case() == kSwapFailure;
}
inline bool PlaceOrderFailure::has_swapfailure() const {
  return _internal_has_swapfailure();
}
inline void PlaceOrderFailure::set_has_swapfailure() {
  _oneof_case_[0] = kSwapFailure;
}
inline void PlaceOrderFailure::clear_swapfailure() {
  if (_internal_has_swapfailure()) {
    delete failure_.swapfailure_;
    clear_has_failure();
  }
}
inline ::lssdrpc::SwapFailure* PlaceOrderFailure::release_swapfailure() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderFailure.swapFailure)
  if (_internal_has_swapfailure()) {
    clear_has_failure();
      ::lssdrpc::SwapFailure* temp = failure_.swapfailure_;
    failure_.swapfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::SwapFailure& PlaceOrderFailure::_internal_swapfailure() const {
  return _internal_has_swapfailure()
      ? *failure_.swapfailure_
      : *reinterpret_cast< ::lssdrpc::SwapFailure*>(&::lssdrpc::_SwapFailure_default_instance_);
}
inline const ::lssdrpc::SwapFailure& PlaceOrderFailure::swapfailure() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderFailure.swapFailure)
  return _internal_swapfailure();
}
inline ::lssdrpc::SwapFailure* PlaceOrderFailure::_internal_mutable_swapfailure() {
  if (!_internal_has_swapfailure()) {
    clear_failure();
    set_has_swapfailure();
    failure_.swapfailure_ = CreateMaybeMessage< ::lssdrpc::SwapFailure >(
        GetArenaNoVirtual());
  }
  return failure_.swapfailure_;
}
inline ::lssdrpc::SwapFailure* PlaceOrderFailure::mutable_swapfailure() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderFailure.swapFailure)
  return _internal_mutable_swapfailure();
}

// .lssdrpc.OrderbookFailure orderbookFailure = 2;
inline bool PlaceOrderFailure::_internal_has_orderbookfailure() const {
  return failure_case() == kOrderbookFailure;
}
inline bool PlaceOrderFailure::has_orderbookfailure() const {
  return _internal_has_orderbookfailure();
}
inline void PlaceOrderFailure::set_has_orderbookfailure() {
  _oneof_case_[0] = kOrderbookFailure;
}
inline void PlaceOrderFailure::clear_orderbookfailure() {
  if (_internal_has_orderbookfailure()) {
    delete failure_.orderbookfailure_;
    clear_has_failure();
  }
}
inline ::lssdrpc::OrderbookFailure* PlaceOrderFailure::release_orderbookfailure() {
  // @@protoc_insertion_point(field_release:lssdrpc.PlaceOrderFailure.orderbookFailure)
  if (_internal_has_orderbookfailure()) {
    clear_has_failure();
      ::lssdrpc::OrderbookFailure* temp = failure_.orderbookfailure_;
    failure_.orderbookfailure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::OrderbookFailure& PlaceOrderFailure::_internal_orderbookfailure() const {
  return _internal_has_orderbookfailure()
      ? *failure_.orderbookfailure_
      : *reinterpret_cast< ::lssdrpc::OrderbookFailure*>(&::lssdrpc::_OrderbookFailure_default_instance_);
}
inline const ::lssdrpc::OrderbookFailure& PlaceOrderFailure::orderbookfailure() const {
  // @@protoc_insertion_point(field_get:lssdrpc.PlaceOrderFailure.orderbookFailure)
  return _internal_orderbookfailure();
}
inline ::lssdrpc::OrderbookFailure* PlaceOrderFailure::_internal_mutable_orderbookfailure() {
  if (!_internal_has_orderbookfailure()) {
    clear_failure();
    set_has_orderbookfailure();
    failure_.orderbookfailure_ = CreateMaybeMessage< ::lssdrpc::OrderbookFailure >(
        GetArenaNoVirtual());
  }
  return failure_.orderbookfailure_;
}
inline ::lssdrpc::OrderbookFailure* PlaceOrderFailure::mutable_orderbookfailure() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.PlaceOrderFailure.orderbookFailure)
  return _internal_mutable_orderbookfailure();
}

inline bool PlaceOrderFailure::has_failure() const {
  return failure_case() != FAILURE_NOT_SET;
}
inline void PlaceOrderFailure::clear_has_failure() {
  _oneof_case_[0] = FAILURE_NOT_SET;
}
inline PlaceOrderFailure::FailureCase PlaceOrderFailure::failure_case() const {
  return PlaceOrderFailure::FailureCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CancelOrderRequest

// string pairId = 1;
inline void CancelOrderRequest::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CancelOrderRequest::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.CancelOrderRequest.pairId)
  return _internal_pairid();
}
inline void CancelOrderRequest::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.CancelOrderRequest.pairId)
}
inline std::string* CancelOrderRequest::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.CancelOrderRequest.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& CancelOrderRequest::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void CancelOrderRequest::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CancelOrderRequest::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.CancelOrderRequest.pairId)
}
inline void CancelOrderRequest::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.CancelOrderRequest.pairId)
}
inline void CancelOrderRequest::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.CancelOrderRequest.pairId)
}
inline std::string* CancelOrderRequest::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CancelOrderRequest::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.CancelOrderRequest.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.CancelOrderRequest.pairId)
}

// string orderId = 2;
inline void CancelOrderRequest::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CancelOrderRequest::orderid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.CancelOrderRequest.orderId)
  return _internal_orderid();
}
inline void CancelOrderRequest::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.CancelOrderRequest.orderId)
}
inline std::string* CancelOrderRequest::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.CancelOrderRequest.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& CancelOrderRequest::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void CancelOrderRequest::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CancelOrderRequest::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.CancelOrderRequest.orderId)
}
inline void CancelOrderRequest::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.CancelOrderRequest.orderId)
}
inline void CancelOrderRequest::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.CancelOrderRequest.orderId)
}
inline std::string* CancelOrderRequest::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CancelOrderRequest::release_orderid() {
  // @@protoc_insertion_point(field_release:lssdrpc.CancelOrderRequest.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrderRequest::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.CancelOrderRequest.orderId)
}

// -------------------------------------------------------------------

// CancelOrderResponse

// -------------------------------------------------------------------

// SubscribeOrdersRequest

// -------------------------------------------------------------------

// OrderUpdate

// .lssdrpc.OrderSummary orderAdded = 1;
inline bool OrderUpdate::_internal_has_orderadded() const {
  return update_case() == kOrderAdded;
}
inline bool OrderUpdate::has_orderadded() const {
  return _internal_has_orderadded();
}
inline void OrderUpdate::set_has_orderadded() {
  _oneof_case_[0] = kOrderAdded;
}
inline void OrderUpdate::clear_orderadded() {
  if (_internal_has_orderadded()) {
    delete update_.orderadded_;
    clear_has_update();
  }
}
inline ::lssdrpc::OrderSummary* OrderUpdate::release_orderadded() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderUpdate.orderAdded)
  if (_internal_has_orderadded()) {
    clear_has_update();
      ::lssdrpc::OrderSummary* temp = update_.orderadded_;
    update_.orderadded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::OrderSummary& OrderUpdate::_internal_orderadded() const {
  return _internal_has_orderadded()
      ? *update_.orderadded_
      : *reinterpret_cast< ::lssdrpc::OrderSummary*>(&::lssdrpc::_OrderSummary_default_instance_);
}
inline const ::lssdrpc::OrderSummary& OrderUpdate::orderadded() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderUpdate.orderAdded)
  return _internal_orderadded();
}
inline ::lssdrpc::OrderSummary* OrderUpdate::_internal_mutable_orderadded() {
  if (!_internal_has_orderadded()) {
    clear_update();
    set_has_orderadded();
    update_.orderadded_ = CreateMaybeMessage< ::lssdrpc::OrderSummary >(
        GetArenaNoVirtual());
  }
  return update_.orderadded_;
}
inline ::lssdrpc::OrderSummary* OrderUpdate::mutable_orderadded() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderUpdate.orderAdded)
  return _internal_mutable_orderadded();
}

// .lssdrpc.OrderSummary orderRemoval = 2;
inline bool OrderUpdate::_internal_has_orderremoval() const {
  return update_case() == kOrderRemoval;
}
inline bool OrderUpdate::has_orderremoval() const {
  return _internal_has_orderremoval();
}
inline void OrderUpdate::set_has_orderremoval() {
  _oneof_case_[0] = kOrderRemoval;
}
inline void OrderUpdate::clear_orderremoval() {
  if (_internal_has_orderremoval()) {
    delete update_.orderremoval_;
    clear_has_update();
  }
}
inline ::lssdrpc::OrderSummary* OrderUpdate::release_orderremoval() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderUpdate.orderRemoval)
  if (_internal_has_orderremoval()) {
    clear_has_update();
      ::lssdrpc::OrderSummary* temp = update_.orderremoval_;
    update_.orderremoval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::OrderSummary& OrderUpdate::_internal_orderremoval() const {
  return _internal_has_orderremoval()
      ? *update_.orderremoval_
      : *reinterpret_cast< ::lssdrpc::OrderSummary*>(&::lssdrpc::_OrderSummary_default_instance_);
}
inline const ::lssdrpc::OrderSummary& OrderUpdate::orderremoval() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderUpdate.orderRemoval)
  return _internal_orderremoval();
}
inline ::lssdrpc::OrderSummary* OrderUpdate::_internal_mutable_orderremoval() {
  if (!_internal_has_orderremoval()) {
    clear_update();
    set_has_orderremoval();
    update_.orderremoval_ = CreateMaybeMessage< ::lssdrpc::OrderSummary >(
        GetArenaNoVirtual());
  }
  return update_.orderremoval_;
}
inline ::lssdrpc::OrderSummary* OrderUpdate::mutable_orderremoval() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderUpdate.orderRemoval)
  return _internal_mutable_orderremoval();
}

inline bool OrderUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void OrderUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline OrderUpdate::UpdateCase OrderUpdate::update_case() const {
  return OrderUpdate::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OwnOrderUpdate

// .lssdrpc.Order orderAdded = 1;
inline bool OwnOrderUpdate::_internal_has_orderadded() const {
  return update_case() == kOrderAdded;
}
inline bool OwnOrderUpdate::has_orderadded() const {
  return _internal_has_orderadded();
}
inline void OwnOrderUpdate::set_has_orderadded() {
  _oneof_case_[0] = kOrderAdded;
}
inline void OwnOrderUpdate::clear_orderadded() {
  if (_internal_has_orderadded()) {
    delete update_.orderadded_;
    clear_has_update();
  }
}
inline ::lssdrpc::Order* OwnOrderUpdate::release_orderadded() {
  // @@protoc_insertion_point(field_release:lssdrpc.OwnOrderUpdate.orderAdded)
  if (_internal_has_orderadded()) {
    clear_has_update();
      ::lssdrpc::Order* temp = update_.orderadded_;
    update_.orderadded_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::Order& OwnOrderUpdate::_internal_orderadded() const {
  return _internal_has_orderadded()
      ? *update_.orderadded_
      : *reinterpret_cast< ::lssdrpc::Order*>(&::lssdrpc::_Order_default_instance_);
}
inline const ::lssdrpc::Order& OwnOrderUpdate::orderadded() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OwnOrderUpdate.orderAdded)
  return _internal_orderadded();
}
inline ::lssdrpc::Order* OwnOrderUpdate::_internal_mutable_orderadded() {
  if (!_internal_has_orderadded()) {
    clear_update();
    set_has_orderadded();
    update_.orderadded_ = CreateMaybeMessage< ::lssdrpc::Order >(
        GetArenaNoVirtual());
  }
  return update_.orderadded_;
}
inline ::lssdrpc::Order* OwnOrderUpdate::mutable_orderadded() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OwnOrderUpdate.orderAdded)
  return _internal_mutable_orderadded();
}

// .lssdrpc.Order orderChanged = 2;
inline bool OwnOrderUpdate::_internal_has_orderchanged() const {
  return update_case() == kOrderChanged;
}
inline bool OwnOrderUpdate::has_orderchanged() const {
  return _internal_has_orderchanged();
}
inline void OwnOrderUpdate::set_has_orderchanged() {
  _oneof_case_[0] = kOrderChanged;
}
inline void OwnOrderUpdate::clear_orderchanged() {
  if (_internal_has_orderchanged()) {
    delete update_.orderchanged_;
    clear_has_update();
  }
}
inline ::lssdrpc::Order* OwnOrderUpdate::release_orderchanged() {
  // @@protoc_insertion_point(field_release:lssdrpc.OwnOrderUpdate.orderChanged)
  if (_internal_has_orderchanged()) {
    clear_has_update();
      ::lssdrpc::Order* temp = update_.orderchanged_;
    update_.orderchanged_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::Order& OwnOrderUpdate::_internal_orderchanged() const {
  return _internal_has_orderchanged()
      ? *update_.orderchanged_
      : *reinterpret_cast< ::lssdrpc::Order*>(&::lssdrpc::_Order_default_instance_);
}
inline const ::lssdrpc::Order& OwnOrderUpdate::orderchanged() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OwnOrderUpdate.orderChanged)
  return _internal_orderchanged();
}
inline ::lssdrpc::Order* OwnOrderUpdate::_internal_mutable_orderchanged() {
  if (!_internal_has_orderchanged()) {
    clear_update();
    set_has_orderchanged();
    update_.orderchanged_ = CreateMaybeMessage< ::lssdrpc::Order >(
        GetArenaNoVirtual());
  }
  return update_.orderchanged_;
}
inline ::lssdrpc::Order* OwnOrderUpdate::mutable_orderchanged() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OwnOrderUpdate.orderChanged)
  return _internal_mutable_orderchanged();
}

// string orderCompleted = 3;
inline bool OwnOrderUpdate::_internal_has_ordercompleted() const {
  return update_case() == kOrderCompleted;
}
inline void OwnOrderUpdate::set_has_ordercompleted() {
  _oneof_case_[0] = kOrderCompleted;
}
inline void OwnOrderUpdate::clear_ordercompleted() {
  if (_internal_has_ordercompleted()) {
    update_.ordercompleted_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_update();
  }
}
inline const std::string& OwnOrderUpdate::ordercompleted() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OwnOrderUpdate.orderCompleted)
  return _internal_ordercompleted();
}
inline void OwnOrderUpdate::set_ordercompleted(const std::string& value) {
  _internal_set_ordercompleted(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OwnOrderUpdate.orderCompleted)
}
inline std::string* OwnOrderUpdate::mutable_ordercompleted() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OwnOrderUpdate.orderCompleted)
  return _internal_mutable_ordercompleted();
}
inline const std::string& OwnOrderUpdate::_internal_ordercompleted() const {
  if (_internal_has_ordercompleted()) {
    return update_.ordercompleted_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void OwnOrderUpdate::_internal_set_ordercompleted(const std::string& value) {
  if (!_internal_has_ordercompleted()) {
    clear_update();
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  update_.ordercompleted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OwnOrderUpdate::set_ordercompleted(std::string&& value) {
  // @@protoc_insertion_point(field_set:lssdrpc.OwnOrderUpdate.orderCompleted)
  if (!_internal_has_ordercompleted()) {
    clear_update();
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  update_.ordercompleted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.OwnOrderUpdate.orderCompleted)
}
inline void OwnOrderUpdate::set_ordercompleted(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_ordercompleted()) {
    clear_update();
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  update_.ordercompleted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.OwnOrderUpdate.orderCompleted)
}
inline void OwnOrderUpdate::set_ordercompleted(const char* value, size_t size) {
  if (!_internal_has_ordercompleted()) {
    clear_update();
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  update_.ordercompleted_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.OwnOrderUpdate.orderCompleted)
}
inline std::string* OwnOrderUpdate::_internal_mutable_ordercompleted() {
  if (!_internal_has_ordercompleted()) {
    clear_update();
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return update_.ordercompleted_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OwnOrderUpdate::release_ordercompleted() {
  // @@protoc_insertion_point(field_release:lssdrpc.OwnOrderUpdate.orderCompleted)
  if (_internal_has_ordercompleted()) {
    clear_has_update();
    return update_.ordercompleted_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void OwnOrderUpdate::set_allocated_ordercompleted(std::string* ordercompleted) {
  if (has_update()) {
    clear_update();
  }
  if (ordercompleted != nullptr) {
    set_has_ordercompleted();
    update_.ordercompleted_.UnsafeSetDefault(ordercompleted);
  }
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OwnOrderUpdate.orderCompleted)
}

inline bool OwnOrderUpdate::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void OwnOrderUpdate::clear_has_update() {
  _oneof_case_[0] = UPDATE_NOT_SET;
}
inline OwnOrderUpdate::UpdateCase OwnOrderUpdate::update_case() const {
  return OwnOrderUpdate::UpdateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderSummary

// string pairId = 1;
inline void OrderSummary::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrderSummary::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderSummary.pairId)
  return _internal_pairid();
}
inline void OrderSummary::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OrderSummary.pairId)
}
inline std::string* OrderSummary::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderSummary.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& OrderSummary::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void OrderSummary::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrderSummary::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.OrderSummary.pairId)
}
inline void OrderSummary::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.OrderSummary.pairId)
}
inline void OrderSummary::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.OrderSummary.pairId)
}
inline std::string* OrderSummary::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrderSummary::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderSummary.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrderSummary::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderSummary.pairId)
}

// .lssdrpc.BigInteger price = 2;
inline bool OrderSummary::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool OrderSummary::has_price() const {
  return _internal_has_price();
}
inline void OrderSummary::clear_price() {
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::lssdrpc::BigInteger& OrderSummary::_internal_price() const {
  const ::lssdrpc::BigInteger* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& OrderSummary::price() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderSummary.price)
  return _internal_price();
}
inline ::lssdrpc::BigInteger* OrderSummary::release_price() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderSummary.price)
  
  ::lssdrpc::BigInteger* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* OrderSummary::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    price_ = p;
  }
  return price_;
}
inline ::lssdrpc::BigInteger* OrderSummary::mutable_price() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderSummary.price)
  return _internal_mutable_price();
}
inline void OrderSummary::set_allocated_price(::lssdrpc::BigInteger* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderSummary.price)
}

// .lssdrpc.BigInteger funds = 3;
inline bool OrderSummary::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool OrderSummary::has_funds() const {
  return _internal_has_funds();
}
inline void OrderSummary::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& OrderSummary::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& OrderSummary::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderSummary.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* OrderSummary::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderSummary.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* OrderSummary::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* OrderSummary::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderSummary.funds)
  return _internal_mutable_funds();
}
inline void OrderSummary::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderSummary.funds)
}

// -------------------------------------------------------------------

// Order

// string pairId = 1;
inline void Order::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.pairId)
  return _internal_pairid();
}
inline void Order::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.Order.pairId)
}
inline std::string* Order::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& Order::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void Order::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.Order.pairId)
}
inline void Order::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.Order.pairId)
}
inline void Order::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.Order.pairId)
}
inline std::string* Order::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.Order.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.Order.pairId)
}

// string orderId = 2;
inline void Order::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Order::orderid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.orderId)
  return _internal_orderid();
}
inline void Order::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.Order.orderId)
}
inline std::string* Order::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& Order::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void Order::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Order::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.Order.orderId)
}
inline void Order::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.Order.orderId)
}
inline void Order::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.Order.orderId)
}
inline std::string* Order::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Order::release_orderid() {
  // @@protoc_insertion_point(field_release:lssdrpc.Order.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.Order.orderId)
}

// .lssdrpc.BigInteger price = 3;
inline bool Order::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool Order::has_price() const {
  return _internal_has_price();
}
inline void Order::clear_price() {
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::lssdrpc::BigInteger& Order::_internal_price() const {
  const ::lssdrpc::BigInteger* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& Order::price() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.price)
  return _internal_price();
}
inline ::lssdrpc::BigInteger* Order::release_price() {
  // @@protoc_insertion_point(field_release:lssdrpc.Order.price)
  
  ::lssdrpc::BigInteger* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* Order::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    price_ = p;
  }
  return price_;
}
inline ::lssdrpc::BigInteger* Order::mutable_price() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.price)
  return _internal_mutable_price();
}
inline void Order::set_allocated_price(::lssdrpc::BigInteger* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.Order.price)
}

// .lssdrpc.BigInteger funds = 4;
inline bool Order::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool Order::has_funds() const {
  return _internal_has_funds();
}
inline void Order::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& Order::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& Order::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* Order::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.Order.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* Order::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* Order::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.funds)
  return _internal_mutable_funds();
}
inline void Order::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.Order.funds)
}

// uint64 createdAt = 5;
inline void Order::clear_createdat() {
  createdat_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::_internal_createdat() const {
  return createdat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Order::createdat() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.createdAt)
  return _internal_createdat();
}
inline void Order::_internal_set_createdat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  createdat_ = value;
}
inline void Order::set_createdat(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_createdat(value);
  // @@protoc_insertion_point(field_set:lssdrpc.Order.createdAt)
}

// .lssdrpc.OrderSide side = 6;
inline void Order::clear_side() {
  side_ = 0;
}
inline ::lssdrpc::OrderSide Order::_internal_side() const {
  return static_cast< ::lssdrpc::OrderSide >(side_);
}
inline ::lssdrpc::OrderSide Order::side() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.side)
  return _internal_side();
}
inline void Order::_internal_set_side(::lssdrpc::OrderSide value) {
  
  side_ = value;
}
inline void Order::set_side(::lssdrpc::OrderSide value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:lssdrpc.Order.side)
}

// bool isOwnOrder = 7;
inline void Order::clear_isownorder() {
  isownorder_ = false;
}
inline bool Order::_internal_isownorder() const {
  return isownorder_;
}
inline bool Order::isownorder() const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.isOwnOrder)
  return _internal_isownorder();
}
inline void Order::_internal_set_isownorder(bool value) {
  
  isownorder_ = value;
}
inline void Order::set_isownorder(bool value) {
  _internal_set_isownorder(value);
  // @@protoc_insertion_point(field_set:lssdrpc.Order.isOwnOrder)
}

// repeated .lssdrpc.OrderPortion open = 8;
inline int Order::_internal_open_size() const {
  return open_.size();
}
inline int Order::open_size() const {
  return _internal_open_size();
}
inline void Order::clear_open() {
  open_.Clear();
}
inline ::lssdrpc::OrderPortion* Order::mutable_open(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.open)
  return open_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >*
Order::mutable_open() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.Order.open)
  return &open_;
}
inline const ::lssdrpc::OrderPortion& Order::_internal_open(int index) const {
  return open_.Get(index);
}
inline const ::lssdrpc::OrderPortion& Order::open(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.open)
  return _internal_open(index);
}
inline ::lssdrpc::OrderPortion* Order::_internal_add_open() {
  return open_.Add();
}
inline ::lssdrpc::OrderPortion* Order::add_open() {
  // @@protoc_insertion_point(field_add:lssdrpc.Order.open)
  return _internal_add_open();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >&
Order::open() const {
  // @@protoc_insertion_point(field_list:lssdrpc.Order.open)
  return open_;
}

// repeated .lssdrpc.OrderPortion closed = 9;
inline int Order::_internal_closed_size() const {
  return closed_.size();
}
inline int Order::closed_size() const {
  return _internal_closed_size();
}
inline void Order::clear_closed() {
  closed_.Clear();
}
inline ::lssdrpc::OrderPortion* Order::mutable_closed(int index) {
  // @@protoc_insertion_point(field_mutable:lssdrpc.Order.closed)
  return closed_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >*
Order::mutable_closed() {
  // @@protoc_insertion_point(field_mutable_list:lssdrpc.Order.closed)
  return &closed_;
}
inline const ::lssdrpc::OrderPortion& Order::_internal_closed(int index) const {
  return closed_.Get(index);
}
inline const ::lssdrpc::OrderPortion& Order::closed(int index) const {
  // @@protoc_insertion_point(field_get:lssdrpc.Order.closed)
  return _internal_closed(index);
}
inline ::lssdrpc::OrderPortion* Order::_internal_add_closed() {
  return closed_.Add();
}
inline ::lssdrpc::OrderPortion* Order::add_closed() {
  // @@protoc_insertion_point(field_add:lssdrpc.Order.closed)
  return _internal_add_closed();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::lssdrpc::OrderPortion >&
Order::closed() const {
  // @@protoc_insertion_point(field_list:lssdrpc.Order.closed)
  return closed_;
}

// -------------------------------------------------------------------

// OrderPortion

// string orderId = 1;
inline void OrderPortion::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& OrderPortion::orderid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderPortion.orderId)
  return _internal_orderid();
}
inline void OrderPortion::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.OrderPortion.orderId)
}
inline std::string* OrderPortion::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderPortion.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& OrderPortion::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void OrderPortion::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void OrderPortion::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.OrderPortion.orderId)
}
inline void OrderPortion::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.OrderPortion.orderId)
}
inline void OrderPortion::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.OrderPortion.orderId)
}
inline std::string* OrderPortion::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* OrderPortion::release_orderid() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderPortion.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void OrderPortion::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderPortion.orderId)
}

// .lssdrpc.BigInteger amount = 2;
inline bool OrderPortion::_internal_has_amount() const {
  return this != internal_default_instance() && amount_ != nullptr;
}
inline bool OrderPortion::has_amount() const {
  return _internal_has_amount();
}
inline void OrderPortion::clear_amount() {
  if (GetArenaNoVirtual() == nullptr && amount_ != nullptr) {
    delete amount_;
  }
  amount_ = nullptr;
}
inline const ::lssdrpc::BigInteger& OrderPortion::_internal_amount() const {
  const ::lssdrpc::BigInteger* p = amount_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& OrderPortion::amount() const {
  // @@protoc_insertion_point(field_get:lssdrpc.OrderPortion.amount)
  return _internal_amount();
}
inline ::lssdrpc::BigInteger* OrderPortion::release_amount() {
  // @@protoc_insertion_point(field_release:lssdrpc.OrderPortion.amount)
  
  ::lssdrpc::BigInteger* temp = amount_;
  amount_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* OrderPortion::_internal_mutable_amount() {
  
  if (amount_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    amount_ = p;
  }
  return amount_;
}
inline ::lssdrpc::BigInteger* OrderPortion::mutable_amount() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.OrderPortion.amount)
  return _internal_mutable_amount();
}
inline void OrderPortion::set_allocated_amount(::lssdrpc::BigInteger* amount) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amount_;
  }
  if (amount) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amount = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amount, submessage_arena);
    }
    
  } else {
    
  }
  amount_ = amount;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.OrderPortion.amount)
}

// -------------------------------------------------------------------

// SubscribeSwapsRequest

// -------------------------------------------------------------------

// SwapResult

// .lssdrpc.SwapSuccess success = 1;
inline bool SwapResult::_internal_has_success() const {
  return value_case() == kSuccess;
}
inline bool SwapResult::has_success() const {
  return _internal_has_success();
}
inline void SwapResult::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline void SwapResult::clear_success() {
  if (_internal_has_success()) {
    delete value_.success_;
    clear_has_value();
  }
}
inline ::lssdrpc::SwapSuccess* SwapResult::release_success() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapResult.success)
  if (_internal_has_success()) {
    clear_has_value();
      ::lssdrpc::SwapSuccess* temp = value_.success_;
    value_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::SwapSuccess& SwapResult::_internal_success() const {
  return _internal_has_success()
      ? *value_.success_
      : *reinterpret_cast< ::lssdrpc::SwapSuccess*>(&::lssdrpc::_SwapSuccess_default_instance_);
}
inline const ::lssdrpc::SwapSuccess& SwapResult::success() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapResult.success)
  return _internal_success();
}
inline ::lssdrpc::SwapSuccess* SwapResult::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_value();
    set_has_success();
    value_.success_ = CreateMaybeMessage< ::lssdrpc::SwapSuccess >(
        GetArenaNoVirtual());
  }
  return value_.success_;
}
inline ::lssdrpc::SwapSuccess* SwapResult::mutable_success() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapResult.success)
  return _internal_mutable_success();
}

// .lssdrpc.SwapFailure failure = 2;
inline bool SwapResult::_internal_has_failure() const {
  return value_case() == kFailure;
}
inline bool SwapResult::has_failure() const {
  return _internal_has_failure();
}
inline void SwapResult::set_has_failure() {
  _oneof_case_[0] = kFailure;
}
inline void SwapResult::clear_failure() {
  if (_internal_has_failure()) {
    delete value_.failure_;
    clear_has_value();
  }
}
inline ::lssdrpc::SwapFailure* SwapResult::release_failure() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapResult.failure)
  if (_internal_has_failure()) {
    clear_has_value();
      ::lssdrpc::SwapFailure* temp = value_.failure_;
    value_.failure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::lssdrpc::SwapFailure& SwapResult::_internal_failure() const {
  return _internal_has_failure()
      ? *value_.failure_
      : *reinterpret_cast< ::lssdrpc::SwapFailure*>(&::lssdrpc::_SwapFailure_default_instance_);
}
inline const ::lssdrpc::SwapFailure& SwapResult::failure() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapResult.failure)
  return _internal_failure();
}
inline ::lssdrpc::SwapFailure* SwapResult::_internal_mutable_failure() {
  if (!_internal_has_failure()) {
    clear_value();
    set_has_failure();
    value_.failure_ = CreateMaybeMessage< ::lssdrpc::SwapFailure >(
        GetArenaNoVirtual());
  }
  return value_.failure_;
}
inline ::lssdrpc::SwapFailure* SwapResult::mutable_failure() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapResult.failure)
  return _internal_mutable_failure();
}

inline bool SwapResult::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SwapResult::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SwapResult::ValueCase SwapResult::value_case() const {
  return SwapResult::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SwapSuccess

// string orderId = 1;
inline void SwapSuccess::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::orderid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.orderId)
  return _internal_orderid();
}
inline void SwapSuccess::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.orderId)
}
inline std::string* SwapSuccess::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& SwapSuccess::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void SwapSuccess::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.orderId)
}
inline void SwapSuccess::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.orderId)
}
inline void SwapSuccess::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.orderId)
}
inline std::string* SwapSuccess::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_orderid() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.orderId)
}

// string pairId = 2;
inline void SwapSuccess::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.pairId)
  return _internal_pairid();
}
inline void SwapSuccess::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.pairId)
}
inline std::string* SwapSuccess::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& SwapSuccess::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void SwapSuccess::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.pairId)
}
inline void SwapSuccess::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.pairId)
}
inline void SwapSuccess::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.pairId)
}
inline std::string* SwapSuccess::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.pairId)
}

// .lssdrpc.BigInteger funds = 3;
inline bool SwapSuccess::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool SwapSuccess::has_funds() const {
  return _internal_has_funds();
}
inline void SwapSuccess::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& SwapSuccess::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& SwapSuccess::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* SwapSuccess::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* SwapSuccess::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* SwapSuccess::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.funds)
  return _internal_mutable_funds();
}
inline void SwapSuccess::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.funds)
}

// string rHash = 4;
inline void SwapSuccess::clear_rhash() {
  rhash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::rhash() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.rHash)
  return _internal_rhash();
}
inline void SwapSuccess::set_rhash(const std::string& value) {
  _internal_set_rhash(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.rHash)
}
inline std::string* SwapSuccess::mutable_rhash() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.rHash)
  return _internal_mutable_rhash();
}
inline const std::string& SwapSuccess::_internal_rhash() const {
  return rhash_.GetNoArena();
}
inline void SwapSuccess::_internal_set_rhash(const std::string& value) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_rhash(std::string&& value) {
  
  rhash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.rHash)
}
inline void SwapSuccess::set_rhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.rHash)
}
inline void SwapSuccess::set_rhash(const char* value, size_t size) {
  
  rhash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.rHash)
}
inline std::string* SwapSuccess::_internal_mutable_rhash() {
  
  return rhash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_rhash() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.rHash)
  
  return rhash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_rhash(std::string* rhash) {
  if (rhash != nullptr) {
    
  } else {
    
  }
  rhash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rhash);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.rHash)
}

// .lssdrpc.BigInteger amountReceived = 5;
inline bool SwapSuccess::_internal_has_amountreceived() const {
  return this != internal_default_instance() && amountreceived_ != nullptr;
}
inline bool SwapSuccess::has_amountreceived() const {
  return _internal_has_amountreceived();
}
inline void SwapSuccess::clear_amountreceived() {
  if (GetArenaNoVirtual() == nullptr && amountreceived_ != nullptr) {
    delete amountreceived_;
  }
  amountreceived_ = nullptr;
}
inline const ::lssdrpc::BigInteger& SwapSuccess::_internal_amountreceived() const {
  const ::lssdrpc::BigInteger* p = amountreceived_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& SwapSuccess::amountreceived() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.amountReceived)
  return _internal_amountreceived();
}
inline ::lssdrpc::BigInteger* SwapSuccess::release_amountreceived() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.amountReceived)
  
  ::lssdrpc::BigInteger* temp = amountreceived_;
  amountreceived_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* SwapSuccess::_internal_mutable_amountreceived() {
  
  if (amountreceived_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    amountreceived_ = p;
  }
  return amountreceived_;
}
inline ::lssdrpc::BigInteger* SwapSuccess::mutable_amountreceived() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.amountReceived)
  return _internal_mutable_amountreceived();
}
inline void SwapSuccess::set_allocated_amountreceived(::lssdrpc::BigInteger* amountreceived) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amountreceived_;
  }
  if (amountreceived) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amountreceived = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amountreceived, submessage_arena);
    }
    
  } else {
    
  }
  amountreceived_ = amountreceived;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.amountReceived)
}

// .lssdrpc.BigInteger amountSent = 6;
inline bool SwapSuccess::_internal_has_amountsent() const {
  return this != internal_default_instance() && amountsent_ != nullptr;
}
inline bool SwapSuccess::has_amountsent() const {
  return _internal_has_amountsent();
}
inline void SwapSuccess::clear_amountsent() {
  if (GetArenaNoVirtual() == nullptr && amountsent_ != nullptr) {
    delete amountsent_;
  }
  amountsent_ = nullptr;
}
inline const ::lssdrpc::BigInteger& SwapSuccess::_internal_amountsent() const {
  const ::lssdrpc::BigInteger* p = amountsent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& SwapSuccess::amountsent() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.amountSent)
  return _internal_amountsent();
}
inline ::lssdrpc::BigInteger* SwapSuccess::release_amountsent() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.amountSent)
  
  ::lssdrpc::BigInteger* temp = amountsent_;
  amountsent_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* SwapSuccess::_internal_mutable_amountsent() {
  
  if (amountsent_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    amountsent_ = p;
  }
  return amountsent_;
}
inline ::lssdrpc::BigInteger* SwapSuccess::mutable_amountsent() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.amountSent)
  return _internal_mutable_amountsent();
}
inline void SwapSuccess::set_allocated_amountsent(::lssdrpc::BigInteger* amountsent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete amountsent_;
  }
  if (amountsent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      amountsent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amountsent, submessage_arena);
    }
    
  } else {
    
  }
  amountsent_ = amountsent;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.amountSent)
}

// .lssdrpc.SwapSuccess.Role role = 7;
inline void SwapSuccess::clear_role() {
  role_ = 0;
}
inline ::lssdrpc::SwapSuccess_Role SwapSuccess::_internal_role() const {
  return static_cast< ::lssdrpc::SwapSuccess_Role >(role_);
}
inline ::lssdrpc::SwapSuccess_Role SwapSuccess::role() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.role)
  return _internal_role();
}
inline void SwapSuccess::_internal_set_role(::lssdrpc::SwapSuccess_Role value) {
  
  role_ = value;
}
inline void SwapSuccess::set_role(::lssdrpc::SwapSuccess_Role value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.role)
}

// string currencyReceived = 8;
inline void SwapSuccess::clear_currencyreceived() {
  currencyreceived_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::currencyreceived() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.currencyReceived)
  return _internal_currencyreceived();
}
inline void SwapSuccess::set_currencyreceived(const std::string& value) {
  _internal_set_currencyreceived(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.currencyReceived)
}
inline std::string* SwapSuccess::mutable_currencyreceived() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.currencyReceived)
  return _internal_mutable_currencyreceived();
}
inline const std::string& SwapSuccess::_internal_currencyreceived() const {
  return currencyreceived_.GetNoArena();
}
inline void SwapSuccess::_internal_set_currencyreceived(const std::string& value) {
  
  currencyreceived_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_currencyreceived(std::string&& value) {
  
  currencyreceived_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.currencyReceived)
}
inline void SwapSuccess::set_currencyreceived(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencyreceived_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.currencyReceived)
}
inline void SwapSuccess::set_currencyreceived(const char* value, size_t size) {
  
  currencyreceived_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.currencyReceived)
}
inline std::string* SwapSuccess::_internal_mutable_currencyreceived() {
  
  return currencyreceived_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_currencyreceived() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.currencyReceived)
  
  return currencyreceived_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_currencyreceived(std::string* currencyreceived) {
  if (currencyreceived != nullptr) {
    
  } else {
    
  }
  currencyreceived_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencyreceived);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.currencyReceived)
}

// string currencySent = 9;
inline void SwapSuccess::clear_currencysent() {
  currencysent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::currencysent() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.currencySent)
  return _internal_currencysent();
}
inline void SwapSuccess::set_currencysent(const std::string& value) {
  _internal_set_currencysent(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.currencySent)
}
inline std::string* SwapSuccess::mutable_currencysent() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.currencySent)
  return _internal_mutable_currencysent();
}
inline const std::string& SwapSuccess::_internal_currencysent() const {
  return currencysent_.GetNoArena();
}
inline void SwapSuccess::_internal_set_currencysent(const std::string& value) {
  
  currencysent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_currencysent(std::string&& value) {
  
  currencysent_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.currencySent)
}
inline void SwapSuccess::set_currencysent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currencysent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.currencySent)
}
inline void SwapSuccess::set_currencysent(const char* value, size_t size) {
  
  currencysent_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.currencySent)
}
inline std::string* SwapSuccess::_internal_mutable_currencysent() {
  
  return currencysent_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_currencysent() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.currencySent)
  
  return currencysent_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_currencysent(std::string* currencysent) {
  if (currencysent != nullptr) {
    
  } else {
    
  }
  currencysent_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currencysent);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.currencySent)
}

// string rPreimage = 10;
inline void SwapSuccess::clear_rpreimage() {
  rpreimage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapSuccess::rpreimage() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.rPreimage)
  return _internal_rpreimage();
}
inline void SwapSuccess::set_rpreimage(const std::string& value) {
  _internal_set_rpreimage(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapSuccess.rPreimage)
}
inline std::string* SwapSuccess::mutable_rpreimage() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.rPreimage)
  return _internal_mutable_rpreimage();
}
inline const std::string& SwapSuccess::_internal_rpreimage() const {
  return rpreimage_.GetNoArena();
}
inline void SwapSuccess::_internal_set_rpreimage(const std::string& value) {
  
  rpreimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapSuccess::set_rpreimage(std::string&& value) {
  
  rpreimage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapSuccess.rPreimage)
}
inline void SwapSuccess::set_rpreimage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rpreimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapSuccess.rPreimage)
}
inline void SwapSuccess::set_rpreimage(const char* value, size_t size) {
  
  rpreimage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapSuccess.rPreimage)
}
inline std::string* SwapSuccess::_internal_mutable_rpreimage() {
  
  return rpreimage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapSuccess::release_rpreimage() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.rPreimage)
  
  return rpreimage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapSuccess::set_allocated_rpreimage(std::string* rpreimage) {
  if (rpreimage != nullptr) {
    
  } else {
    
  }
  rpreimage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rpreimage);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.rPreimage)
}

// .lssdrpc.BigInteger price = 11;
inline bool SwapSuccess::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool SwapSuccess::has_price() const {
  return _internal_has_price();
}
inline void SwapSuccess::clear_price() {
  if (GetArenaNoVirtual() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::lssdrpc::BigInteger& SwapSuccess::_internal_price() const {
  const ::lssdrpc::BigInteger* p = price_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& SwapSuccess::price() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapSuccess.price)
  return _internal_price();
}
inline ::lssdrpc::BigInteger* SwapSuccess::release_price() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapSuccess.price)
  
  ::lssdrpc::BigInteger* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* SwapSuccess::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    price_ = p;
  }
  return price_;
}
inline ::lssdrpc::BigInteger* SwapSuccess::mutable_price() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapSuccess.price)
  return _internal_mutable_price();
}
inline void SwapSuccess::set_allocated_price(::lssdrpc::BigInteger* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapSuccess.price)
}

// -------------------------------------------------------------------

// SwapFailure

// string orderId = 1;
inline void SwapFailure::clear_orderid() {
  orderid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapFailure::orderid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapFailure.orderId)
  return _internal_orderid();
}
inline void SwapFailure::set_orderid(const std::string& value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapFailure.orderId)
}
inline std::string* SwapFailure::mutable_orderid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapFailure.orderId)
  return _internal_mutable_orderid();
}
inline const std::string& SwapFailure::_internal_orderid() const {
  return orderid_.GetNoArena();
}
inline void SwapFailure::_internal_set_orderid(const std::string& value) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapFailure::set_orderid(std::string&& value) {
  
  orderid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapFailure.orderId)
}
inline void SwapFailure::set_orderid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapFailure.orderId)
}
inline void SwapFailure::set_orderid(const char* value, size_t size) {
  
  orderid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapFailure.orderId)
}
inline std::string* SwapFailure::_internal_mutable_orderid() {
  
  return orderid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapFailure::release_orderid() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapFailure.orderId)
  
  return orderid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapFailure::set_allocated_orderid(std::string* orderid) {
  if (orderid != nullptr) {
    
  } else {
    
  }
  orderid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), orderid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapFailure.orderId)
}

// string pairId = 2;
inline void SwapFailure::clear_pairid() {
  pairid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapFailure::pairid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapFailure.pairId)
  return _internal_pairid();
}
inline void SwapFailure::set_pairid(const std::string& value) {
  _internal_set_pairid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapFailure.pairId)
}
inline std::string* SwapFailure::mutable_pairid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapFailure.pairId)
  return _internal_mutable_pairid();
}
inline const std::string& SwapFailure::_internal_pairid() const {
  return pairid_.GetNoArena();
}
inline void SwapFailure::_internal_set_pairid(const std::string& value) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapFailure::set_pairid(std::string&& value) {
  
  pairid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapFailure.pairId)
}
inline void SwapFailure::set_pairid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapFailure.pairId)
}
inline void SwapFailure::set_pairid(const char* value, size_t size) {
  
  pairid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapFailure.pairId)
}
inline std::string* SwapFailure::_internal_mutable_pairid() {
  
  return pairid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapFailure::release_pairid() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapFailure.pairId)
  
  return pairid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapFailure::set_allocated_pairid(std::string* pairid) {
  if (pairid != nullptr) {
    
  } else {
    
  }
  pairid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pairid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapFailure.pairId)
}

// .lssdrpc.BigInteger funds = 3;
inline bool SwapFailure::_internal_has_funds() const {
  return this != internal_default_instance() && funds_ != nullptr;
}
inline bool SwapFailure::has_funds() const {
  return _internal_has_funds();
}
inline void SwapFailure::clear_funds() {
  if (GetArenaNoVirtual() == nullptr && funds_ != nullptr) {
    delete funds_;
  }
  funds_ = nullptr;
}
inline const ::lssdrpc::BigInteger& SwapFailure::_internal_funds() const {
  const ::lssdrpc::BigInteger* p = funds_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& SwapFailure::funds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapFailure.funds)
  return _internal_funds();
}
inline ::lssdrpc::BigInteger* SwapFailure::release_funds() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapFailure.funds)
  
  ::lssdrpc::BigInteger* temp = funds_;
  funds_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* SwapFailure::_internal_mutable_funds() {
  
  if (funds_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    funds_ = p;
  }
  return funds_;
}
inline ::lssdrpc::BigInteger* SwapFailure::mutable_funds() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapFailure.funds)
  return _internal_mutable_funds();
}
inline void SwapFailure::set_allocated_funds(::lssdrpc::BigInteger* funds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete funds_;
  }
  if (funds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      funds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, funds, submessage_arena);
    }
    
  } else {
    
  }
  funds_ = funds;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapFailure.funds)
}

// string failureReason = 4;
inline void SwapFailure::clear_failurereason() {
  failurereason_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SwapFailure::failurereason() const {
  // @@protoc_insertion_point(field_get:lssdrpc.SwapFailure.failureReason)
  return _internal_failurereason();
}
inline void SwapFailure::set_failurereason(const std::string& value) {
  _internal_set_failurereason(value);
  // @@protoc_insertion_point(field_set:lssdrpc.SwapFailure.failureReason)
}
inline std::string* SwapFailure::mutable_failurereason() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.SwapFailure.failureReason)
  return _internal_mutable_failurereason();
}
inline const std::string& SwapFailure::_internal_failurereason() const {
  return failurereason_.GetNoArena();
}
inline void SwapFailure::_internal_set_failurereason(const std::string& value) {
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SwapFailure::set_failurereason(std::string&& value) {
  
  failurereason_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.SwapFailure.failureReason)
}
inline void SwapFailure::set_failurereason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.SwapFailure.failureReason)
}
inline void SwapFailure::set_failurereason(const char* value, size_t size) {
  
  failurereason_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.SwapFailure.failureReason)
}
inline std::string* SwapFailure::_internal_mutable_failurereason() {
  
  return failurereason_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SwapFailure::release_failurereason() {
  // @@protoc_insertion_point(field_release:lssdrpc.SwapFailure.failureReason)
  
  return failurereason_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SwapFailure::set_allocated_failurereason(std::string* failurereason) {
  if (failurereason != nullptr) {
    
  } else {
    
  }
  failurereason_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), failurereason);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.SwapFailure.failureReason)
}

// -------------------------------------------------------------------

// GenerateInvoiceToRentChannelCommand

// string currency = 1;
inline void GenerateInvoiceToRentChannelCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelCommand::currency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
  return _internal_currency();
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GenerateInvoiceToRentChannelCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
}
inline void GenerateInvoiceToRentChannelCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelCommand::release_currency() {
  // @@protoc_insertion_point(field_release:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GenerateInvoiceToRentChannelCommand.currency)
}

// string payingCurrency = 2;
inline void GenerateInvoiceToRentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GenerateInvoiceToRentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline void GenerateInvoiceToRentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
}
inline std::string* GenerateInvoiceToRentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GenerateInvoiceToRentChannelCommand.payingCurrency)
}

// .lssdrpc.BigInteger capacity = 3;
inline bool GenerateInvoiceToRentChannelCommand::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GenerateInvoiceToRentChannelCommand::has_capacity() const {
  return _internal_has_capacity();
}
inline void GenerateInvoiceToRentChannelCommand::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
inline const ::lssdrpc::BigInteger& GenerateInvoiceToRentChannelCommand::_internal_capacity() const {
  const ::lssdrpc::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& GenerateInvoiceToRentChannelCommand::capacity() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GenerateInvoiceToRentChannelCommand.capacity)
  return _internal_capacity();
}
inline ::lssdrpc::BigInteger* GenerateInvoiceToRentChannelCommand::release_capacity() {
  // @@protoc_insertion_point(field_release:lssdrpc.GenerateInvoiceToRentChannelCommand.capacity)
  
  ::lssdrpc::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* GenerateInvoiceToRentChannelCommand::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::lssdrpc::BigInteger* GenerateInvoiceToRentChannelCommand::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GenerateInvoiceToRentChannelCommand.capacity)
  return _internal_mutable_capacity();
}
inline void GenerateInvoiceToRentChannelCommand::set_allocated_capacity(::lssdrpc::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capacity_;
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GenerateInvoiceToRentChannelCommand.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GenerateInvoiceToRentChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GenerateInvoiceToRentChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GenerateInvoiceToRentChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GenerateInvoiceToRentChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GenerateInvoiceToRentChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GenerateInvoiceToRentChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GenerateInvoiceToRentChannelResponse

// string paymentRequest = 1;
inline void GenerateInvoiceToRentChannelResponse::clear_paymentrequest() {
  paymentrequest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GenerateInvoiceToRentChannelResponse::paymentrequest() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
  return _internal_paymentrequest();
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const std::string& value) {
  _internal_set_paymentrequest(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToRentChannelResponse::mutable_paymentrequest() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
  return _internal_mutable_paymentrequest();
}
inline const std::string& GenerateInvoiceToRentChannelResponse::_internal_paymentrequest() const {
  return paymentrequest_.GetNoArena();
}
inline void GenerateInvoiceToRentChannelResponse::_internal_set_paymentrequest(const std::string& value) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(std::string&& value) {
  
  paymentrequest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline void GenerateInvoiceToRentChannelResponse::set_paymentrequest(const char* value, size_t size) {
  
  paymentrequest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
}
inline std::string* GenerateInvoiceToRentChannelResponse::_internal_mutable_paymentrequest() {
  
  return paymentrequest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GenerateInvoiceToRentChannelResponse::release_paymentrequest() {
  // @@protoc_insertion_point(field_release:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
  
  return paymentrequest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GenerateInvoiceToRentChannelResponse::set_allocated_paymentrequest(std::string* paymentrequest) {
  if (paymentrequest != nullptr) {
    
  } else {
    
  }
  paymentrequest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymentrequest);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GenerateInvoiceToRentChannelResponse.paymentRequest)
}

// -------------------------------------------------------------------

// RentChannelCommand

// bytes paymentHash = 1;
inline void RentChannelCommand::clear_paymenthash() {
  paymenthash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelCommand::paymenthash() const {
  // @@protoc_insertion_point(field_get:lssdrpc.RentChannelCommand.paymentHash)
  return _internal_paymenthash();
}
inline void RentChannelCommand::set_paymenthash(const std::string& value) {
  _internal_set_paymenthash(value);
  // @@protoc_insertion_point(field_set:lssdrpc.RentChannelCommand.paymentHash)
}
inline std::string* RentChannelCommand::mutable_paymenthash() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.RentChannelCommand.paymentHash)
  return _internal_mutable_paymenthash();
}
inline const std::string& RentChannelCommand::_internal_paymenthash() const {
  return paymenthash_.GetNoArena();
}
inline void RentChannelCommand::_internal_set_paymenthash(const std::string& value) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelCommand::set_paymenthash(std::string&& value) {
  
  paymenthash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.RentChannelCommand.paymentHash)
}
inline void RentChannelCommand::set_paymenthash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.RentChannelCommand.paymentHash)
}
inline void RentChannelCommand::set_paymenthash(const void* value, size_t size) {
  
  paymenthash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.RentChannelCommand.paymentHash)
}
inline std::string* RentChannelCommand::_internal_mutable_paymenthash() {
  
  return paymenthash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelCommand::release_paymenthash() {
  // @@protoc_insertion_point(field_release:lssdrpc.RentChannelCommand.paymentHash)
  
  return paymenthash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelCommand::set_allocated_paymenthash(std::string* paymenthash) {
  if (paymenthash != nullptr) {
    
  } else {
    
  }
  paymenthash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paymenthash);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.RentChannelCommand.paymentHash)
}

// string payingCurrency = 2;
inline void RentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.RentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void RentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.RentChannelCommand.payingCurrency)
}
inline std::string* RentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.RentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& RentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void RentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.RentChannelCommand.payingCurrency)
}
inline void RentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.RentChannelCommand.payingCurrency)
}
inline void RentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.RentChannelCommand.payingCurrency)
}
inline std::string* RentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:lssdrpc.RentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.RentChannelCommand.payingCurrency)
}

// bytes nodePublicKey = 3;
inline void RentChannelCommand::clear_nodepublickey() {
  nodepublickey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelCommand::nodepublickey() const {
  // @@protoc_insertion_point(field_get:lssdrpc.RentChannelCommand.nodePublicKey)
  return _internal_nodepublickey();
}
inline void RentChannelCommand::set_nodepublickey(const std::string& value) {
  _internal_set_nodepublickey(value);
  // @@protoc_insertion_point(field_set:lssdrpc.RentChannelCommand.nodePublicKey)
}
inline std::string* RentChannelCommand::mutable_nodepublickey() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.RentChannelCommand.nodePublicKey)
  return _internal_mutable_nodepublickey();
}
inline const std::string& RentChannelCommand::_internal_nodepublickey() const {
  return nodepublickey_.GetNoArena();
}
inline void RentChannelCommand::_internal_set_nodepublickey(const std::string& value) {
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelCommand::set_nodepublickey(std::string&& value) {
  
  nodepublickey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.RentChannelCommand.nodePublicKey)
}
inline void RentChannelCommand::set_nodepublickey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.RentChannelCommand.nodePublicKey)
}
inline void RentChannelCommand::set_nodepublickey(const void* value, size_t size) {
  
  nodepublickey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.RentChannelCommand.nodePublicKey)
}
inline std::string* RentChannelCommand::_internal_mutable_nodepublickey() {
  
  return nodepublickey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelCommand::release_nodepublickey() {
  // @@protoc_insertion_point(field_release:lssdrpc.RentChannelCommand.nodePublicKey)
  
  return nodepublickey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelCommand::set_allocated_nodepublickey(std::string* nodepublickey) {
  if (nodepublickey != nullptr) {
    
  } else {
    
  }
  nodepublickey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nodepublickey);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.RentChannelCommand.nodePublicKey)
}

// -------------------------------------------------------------------

// RentChannelResponse

// string channelId = 1;
inline void RentChannelResponse::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RentChannelResponse::channelid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.RentChannelResponse.channelId)
  return _internal_channelid();
}
inline void RentChannelResponse::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.RentChannelResponse.channelId)
}
inline std::string* RentChannelResponse::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.RentChannelResponse.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& RentChannelResponse::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void RentChannelResponse::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RentChannelResponse::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.RentChannelResponse.channelId)
}
inline void RentChannelResponse::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.RentChannelResponse.channelId)
}
inline void RentChannelResponse::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.RentChannelResponse.channelId)
}
inline std::string* RentChannelResponse::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RentChannelResponse::release_channelid() {
  // @@protoc_insertion_point(field_release:lssdrpc.RentChannelResponse.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RentChannelResponse::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.RentChannelResponse.channelId)
}

// -------------------------------------------------------------------

// GetChannelStatusCommand

// string channelId = 1;
inline void GetChannelStatusCommand::clear_channelid() {
  channelid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetChannelStatusCommand::channelid() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetChannelStatusCommand.channelId)
  return _internal_channelid();
}
inline void GetChannelStatusCommand::set_channelid(const std::string& value) {
  _internal_set_channelid(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetChannelStatusCommand.channelId)
}
inline std::string* GetChannelStatusCommand::mutable_channelid() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetChannelStatusCommand.channelId)
  return _internal_mutable_channelid();
}
inline const std::string& GetChannelStatusCommand::_internal_channelid() const {
  return channelid_.GetNoArena();
}
inline void GetChannelStatusCommand::_internal_set_channelid(const std::string& value) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetChannelStatusCommand::set_channelid(std::string&& value) {
  
  channelid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GetChannelStatusCommand.channelId)
}
inline void GetChannelStatusCommand::set_channelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetChannelStatusCommand.channelId)
}
inline void GetChannelStatusCommand::set_channelid(const char* value, size_t size) {
  
  channelid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetChannelStatusCommand.channelId)
}
inline std::string* GetChannelStatusCommand::_internal_mutable_channelid() {
  
  return channelid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetChannelStatusCommand::release_channelid() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetChannelStatusCommand.channelId)
  
  return channelid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetChannelStatusCommand::set_allocated_channelid(std::string* channelid) {
  if (channelid != nullptr) {
    
  } else {
    
  }
  channelid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channelid);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetChannelStatusCommand.channelId)
}

// -------------------------------------------------------------------

// GetChannelStatusResponse

// string status = 1;
inline void GetChannelStatusResponse::clear_status() {
  status_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetChannelStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetChannelStatusResponse.status)
  return _internal_status();
}
inline void GetChannelStatusResponse::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetChannelStatusResponse.status)
}
inline std::string* GetChannelStatusResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetChannelStatusResponse.status)
  return _internal_mutable_status();
}
inline const std::string& GetChannelStatusResponse::_internal_status() const {
  return status_.GetNoArena();
}
inline void GetChannelStatusResponse::_internal_set_status(const std::string& value) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetChannelStatusResponse::set_status(std::string&& value) {
  
  status_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GetChannelStatusResponse.status)
}
inline void GetChannelStatusResponse::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetChannelStatusResponse.status)
}
inline void GetChannelStatusResponse::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetChannelStatusResponse.status)
}
inline std::string* GetChannelStatusResponse::_internal_mutable_status() {
  
  return status_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetChannelStatusResponse::release_status() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetChannelStatusResponse.status)
  
  return status_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetChannelStatusResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetChannelStatusResponse.status)
}

// int64 expiresAt = 2;
inline void GetChannelStatusResponse::clear_expiresat() {
  expiresat_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChannelStatusResponse::_internal_expiresat() const {
  return expiresat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetChannelStatusResponse::expiresat() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetChannelStatusResponse.expiresAt)
  return _internal_expiresat();
}
inline void GetChannelStatusResponse::_internal_set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  expiresat_ = value;
}
inline void GetChannelStatusResponse::set_expiresat(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_expiresat(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetChannelStatusResponse.expiresAt)
}

// -------------------------------------------------------------------

// GetFeeToRentChannelCommand

// string currency = 1;
inline void GetFeeToRentChannelCommand::clear_currency() {
  currency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToRentChannelCommand::currency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelCommand.currency)
  return _internal_currency();
}
inline void GetFeeToRentChannelCommand::set_currency(const std::string& value) {
  _internal_set_currency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetFeeToRentChannelCommand.currency)
}
inline std::string* GetFeeToRentChannelCommand::mutable_currency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelCommand.currency)
  return _internal_mutable_currency();
}
inline const std::string& GetFeeToRentChannelCommand::_internal_currency() const {
  return currency_.GetNoArena();
}
inline void GetFeeToRentChannelCommand::_internal_set_currency(const std::string& value) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToRentChannelCommand::set_currency(std::string&& value) {
  
  currency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GetFeeToRentChannelCommand.currency)
}
inline void GetFeeToRentChannelCommand::set_currency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetFeeToRentChannelCommand.currency)
}
inline void GetFeeToRentChannelCommand::set_currency(const char* value, size_t size) {
  
  currency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetFeeToRentChannelCommand.currency)
}
inline std::string* GetFeeToRentChannelCommand::_internal_mutable_currency() {
  
  return currency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToRentChannelCommand::release_currency() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelCommand.currency)
  
  return currency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToRentChannelCommand::set_allocated_currency(std::string* currency) {
  if (currency != nullptr) {
    
  } else {
    
  }
  currency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), currency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelCommand.currency)
}

// string payingCurrency = 2;
inline void GetFeeToRentChannelCommand::clear_payingcurrency() {
  payingcurrency_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetFeeToRentChannelCommand::payingcurrency() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
  return _internal_payingcurrency();
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const std::string& value) {
  _internal_set_payingcurrency(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
}
inline std::string* GetFeeToRentChannelCommand::mutable_payingcurrency() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
  return _internal_mutable_payingcurrency();
}
inline const std::string& GetFeeToRentChannelCommand::_internal_payingcurrency() const {
  return payingcurrency_.GetNoArena();
}
inline void GetFeeToRentChannelCommand::_internal_set_payingcurrency(const std::string& value) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(std::string&& value) {
  
  payingcurrency_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
}
inline void GetFeeToRentChannelCommand::set_payingcurrency(const char* value, size_t size) {
  
  payingcurrency_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
}
inline std::string* GetFeeToRentChannelCommand::_internal_mutable_payingcurrency() {
  
  return payingcurrency_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetFeeToRentChannelCommand::release_payingcurrency() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
  
  return payingcurrency_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetFeeToRentChannelCommand::set_allocated_payingcurrency(std::string* payingcurrency) {
  if (payingcurrency != nullptr) {
    
  } else {
    
  }
  payingcurrency_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payingcurrency);
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelCommand.payingCurrency)
}

// .lssdrpc.BigInteger capacity = 3;
inline bool GetFeeToRentChannelCommand::_internal_has_capacity() const {
  return this != internal_default_instance() && capacity_ != nullptr;
}
inline bool GetFeeToRentChannelCommand::has_capacity() const {
  return _internal_has_capacity();
}
inline void GetFeeToRentChannelCommand::clear_capacity() {
  if (GetArenaNoVirtual() == nullptr && capacity_ != nullptr) {
    delete capacity_;
  }
  capacity_ = nullptr;
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelCommand::_internal_capacity() const {
  const ::lssdrpc::BigInteger* p = capacity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelCommand::capacity() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelCommand.capacity)
  return _internal_capacity();
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelCommand::release_capacity() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelCommand.capacity)
  
  ::lssdrpc::BigInteger* temp = capacity_;
  capacity_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelCommand::_internal_mutable_capacity() {
  
  if (capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    capacity_ = p;
  }
  return capacity_;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelCommand::mutable_capacity() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelCommand.capacity)
  return _internal_mutable_capacity();
}
inline void GetFeeToRentChannelCommand::set_allocated_capacity(::lssdrpc::BigInteger* capacity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete capacity_;
  }
  if (capacity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      capacity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capacity, submessage_arena);
    }
    
  } else {
    
  }
  capacity_ = capacity;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelCommand.capacity)
}

// int64 lifetimeSeconds = 4;
inline void GetFeeToRentChannelCommand::clear_lifetimeseconds() {
  lifetimeseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToRentChannelCommand::_internal_lifetimeseconds() const {
  return lifetimeseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetFeeToRentChannelCommand::lifetimeseconds() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelCommand.lifetimeSeconds)
  return _internal_lifetimeseconds();
}
inline void GetFeeToRentChannelCommand::_internal_set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  lifetimeseconds_ = value;
}
inline void GetFeeToRentChannelCommand::set_lifetimeseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_lifetimeseconds(value);
  // @@protoc_insertion_point(field_set:lssdrpc.GetFeeToRentChannelCommand.lifetimeSeconds)
}

// -------------------------------------------------------------------

// GetFeeToRentChannelResponse

// .lssdrpc.BigInteger fee = 1;
inline bool GetFeeToRentChannelResponse::_internal_has_fee() const {
  return this != internal_default_instance() && fee_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_fee() const {
  return _internal_has_fee();
}
inline void GetFeeToRentChannelResponse::clear_fee() {
  if (GetArenaNoVirtual() == nullptr && fee_ != nullptr) {
    delete fee_;
  }
  fee_ = nullptr;
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::_internal_fee() const {
  const ::lssdrpc::BigInteger* p = fee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::fee() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelResponse.fee)
  return _internal_fee();
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::release_fee() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelResponse.fee)
  
  ::lssdrpc::BigInteger* temp = fee_;
  fee_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_fee() {
  
  if (fee_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    fee_ = p;
  }
  return fee_;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::mutable_fee() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelResponse.fee)
  return _internal_mutable_fee();
}
inline void GetFeeToRentChannelResponse::set_allocated_fee(::lssdrpc::BigInteger* fee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete fee_;
  }
  if (fee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fee, submessage_arena);
    }
    
  } else {
    
  }
  fee_ = fee;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelResponse.fee)
}

// .lssdrpc.BigInteger rentingFee = 2;
inline bool GetFeeToRentChannelResponse::_internal_has_rentingfee() const {
  return this != internal_default_instance() && rentingfee_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_rentingfee() const {
  return _internal_has_rentingfee();
}
inline void GetFeeToRentChannelResponse::clear_rentingfee() {
  if (GetArenaNoVirtual() == nullptr && rentingfee_ != nullptr) {
    delete rentingfee_;
  }
  rentingfee_ = nullptr;
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::_internal_rentingfee() const {
  const ::lssdrpc::BigInteger* p = rentingfee_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::rentingfee() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelResponse.rentingFee)
  return _internal_rentingfee();
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::release_rentingfee() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelResponse.rentingFee)
  
  ::lssdrpc::BigInteger* temp = rentingfee_;
  rentingfee_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_rentingfee() {
  
  if (rentingfee_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    rentingfee_ = p;
  }
  return rentingfee_;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::mutable_rentingfee() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelResponse.rentingFee)
  return _internal_mutable_rentingfee();
}
inline void GetFeeToRentChannelResponse::set_allocated_rentingfee(::lssdrpc::BigInteger* rentingfee) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rentingfee_;
  }
  if (rentingfee) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rentingfee = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rentingfee, submessage_arena);
    }
    
  } else {
    
  }
  rentingfee_ = rentingfee;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelResponse.rentingFee)
}

// .lssdrpc.BigInteger onChainFees = 3;
inline bool GetFeeToRentChannelResponse::_internal_has_onchainfees() const {
  return this != internal_default_instance() && onchainfees_ != nullptr;
}
inline bool GetFeeToRentChannelResponse::has_onchainfees() const {
  return _internal_has_onchainfees();
}
inline void GetFeeToRentChannelResponse::clear_onchainfees() {
  if (GetArenaNoVirtual() == nullptr && onchainfees_ != nullptr) {
    delete onchainfees_;
  }
  onchainfees_ = nullptr;
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::_internal_onchainfees() const {
  const ::lssdrpc::BigInteger* p = onchainfees_;
  return p != nullptr ? *p : *reinterpret_cast<const ::lssdrpc::BigInteger*>(
      &::lssdrpc::_BigInteger_default_instance_);
}
inline const ::lssdrpc::BigInteger& GetFeeToRentChannelResponse::onchainfees() const {
  // @@protoc_insertion_point(field_get:lssdrpc.GetFeeToRentChannelResponse.onChainFees)
  return _internal_onchainfees();
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::release_onchainfees() {
  // @@protoc_insertion_point(field_release:lssdrpc.GetFeeToRentChannelResponse.onChainFees)
  
  ::lssdrpc::BigInteger* temp = onchainfees_;
  onchainfees_ = nullptr;
  return temp;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::_internal_mutable_onchainfees() {
  
  if (onchainfees_ == nullptr) {
    auto* p = CreateMaybeMessage<::lssdrpc::BigInteger>(GetArenaNoVirtual());
    onchainfees_ = p;
  }
  return onchainfees_;
}
inline ::lssdrpc::BigInteger* GetFeeToRentChannelResponse::mutable_onchainfees() {
  // @@protoc_insertion_point(field_mutable:lssdrpc.GetFeeToRentChannelResponse.onChainFees)
  return _internal_mutable_onchainfees();
}
inline void GetFeeToRentChannelResponse::set_allocated_onchainfees(::lssdrpc::BigInteger* onchainfees) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete onchainfees_;
  }
  if (onchainfees) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      onchainfees = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onchainfees, submessage_arena);
    }
    
  } else {
    
  }
  onchainfees_ = onchainfees;
  // @@protoc_insertion_point(field_set_allocated:lssdrpc.GetFeeToRentChannelResponse.onChainFees)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace lssdrpc

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::lssdrpc::OrderbookState_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lssdrpc::OrderbookState_State>() {
  return ::lssdrpc::OrderbookState_State_descriptor();
}
template <> struct is_proto_enum< ::lssdrpc::SwapSuccess_Role> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lssdrpc::SwapSuccess_Role>() {
  return ::lssdrpc::SwapSuccess_Role_descriptor();
}
template <> struct is_proto_enum< ::lssdrpc::OrderSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::lssdrpc::OrderSide>() {
  return ::lssdrpc::OrderSide_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_lssdrpc_2eproto
